*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                17.37 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.37 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                17.37 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3PBY8MJ
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3PBY8MJ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.37 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.37 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
(FREQ=(WHERE='ROLE = "FREQ"' DEFAULT='Y' RULE=(RULE1=(DESCRIPTION='USEATMOST1FREQ'
VALUES=(VALUE1='Y' )[212911] MAX=1 EXCEEDMAXVALUE='' )[212915] )[212909]
VALIDCHOICES=(CHOICE1='Y' )[212913] )[213197] INPUTREJECT=(WHERE='ROLE in("INPUT",
"REJECTED")' DEFAULT='D' VALIDCHOICES=(CHOICE1='D' )[212919]
RULE=(RULE1=(DESCRIPTION='USEATLEAST1INPUTREJECT' WHERE='(ROLE = "INPUT" and USE in("Y" "D"))
or (ROLE = "REJECTED" and USE = "Y")' MIN=. )[212923] )[212921] )[212917] TARGET=(WHERE='ROLE
= "TARGET"' DEFAULT='Y' VALIDCHOICES=(CHOICE1='Y' CHOICE2='N' )[212927]
RULE=(RULE1=(DESCRIPTION='METADATA.USE1TARGET' VALUES=(VALUE1='Y' )[212933] MIN=1 MAX=1
EXCEEDMAXVALUE='N' )[212931] )[212929] )[212925] )[212907]
1746413    proc freq data=EMWS8.Ensmbl8_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Ensmbl8_VariableSet noprint;
1746414    table ROLE*LEVEL/out=WORK.Ensmbl8META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Ensmbl8META;
1746415    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS8.ENSMBL8_VARIABLESET.
NOTE: The data set WORK.ENSMBL8META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1746416    proc print data=WORK.Ensmbl8META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl8META label noobs;
1746417    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1746418    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1746418  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1746418  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1746419    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1746420    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1746421    run;
 
NOTE: There were 2 observations read from the data set WORK.ENSMBL8META.
NOTE: The PROCEDURE PRINT printed page 1508.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746422    title10;
MPRINT(EM_DIAGRAM):   title10;
1746423    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.AutoNeural33_TRAIN EMWS8.AutoNeural33_TRAIN
EMWS8.AutoNeural33_TRAIN EMWS8.AutoNeural33_TRAIN EMWS8 AutoNeural33_TRAIN
EMWS8.AutoNeural33_TRAIN EMWS8.AutoNeural33_TRAIN
EMWS8.AutoNeural33_TRAIN EMWS8.AutoNeural33_TRAIN EMWS8 AutoNeural33_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.AutoNeural33_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.AutoNeural33_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
1746452    data WORK.Ensmbl8_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl8_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
1746453    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1746454    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1746454  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1746454  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1746455       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1746455  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1746455  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1746456    set EMWS8.AUTONEURAL33_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.AUTONEURAL33_DEPVAR_DM( where=(_TYPE_="TARGET"));
1746457    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1746458    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1746459    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1746460    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1746461    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1746462    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1746463    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1746464    end;
MPRINT(EM_DIAGRAM):   end;
1746465    output;
MPRINT(EM_DIAGRAM):   output;
1746466    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.AUTONEURAL33_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENSMBL8_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1746467    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1746468    proc print data=WORK.Ensmbl8_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl8_EVENT noobs label;
1746469    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1746470    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1746471    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1746472    run;
 
NOTE: There were 1 observations read from the data set WORK.ENSMBL8_EVENT.
NOTE: The PROCEDURE PRINT printed page 1509.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746473    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1746474    proc print data = EMWS8.AutoNeural33_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.AutoNeural33_DepVar_DM noobs label;
1746475    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1746476    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1746477    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1746477  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1746477  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1746478    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1746479    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1746480    run;
 
NOTE: There were 7 observations read from the data set EMWS8.AUTONEURAL33_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1510.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746481    title10;
MPRINT(EM_DIAGRAM):   title10;
1746482    %let groupid =;
1746483    %let endGroupid =;
1746484    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1746485    set EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO;
1746486    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1746486  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1746487    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1746488    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1746489    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.NEURAL28_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746490    %let groupid =;
1746491    %let endGroupid =;
1746492    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1746493    set EMWS8.AutoNeural33_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural33_EMINFO;
1746494    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1746494  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1746495    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1746496    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1746497    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL33_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746498    %let groupid =;
1746499    %let endGroupid =;
1746500    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1746501    set EMWS8.AutoNeural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural28_EMINFO;
1746502    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1746502  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1746503    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1746504    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1746505    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL28_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746506    data WORK.Ensmbl8;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl8;
1746507    length NodeId $32 Model $64;
MPRINT(EM_DIAGRAM):   length NodeId $32 Model $64;
1746508    label Nodeid = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel,  NOQUOTE))" Model
1746508  ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeltype,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Nodeid = "Node Id" Model = "rpt_modeltype";
1746509    nodeid="NEURAL28";
MPRINT(EM_DIAGRAM):   nodeid="NEURAL28";
1746510    model="Neural";
MPRINT(EM_DIAGRAM):   model="Neural";
1746511    output;
MPRINT(EM_DIAGRAM):   output;
1746512    nodeid="AUTONEURAL33";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL33";
1746513    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1746514    output;
MPRINT(EM_DIAGRAM):   output;
1746515    nodeid="AUTONEURAL28";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL28";
1746516    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1746517    output;
MPRINT(EM_DIAGRAM):   output;
1746518    ;
MPRINT(EM_DIAGRAM):   ;
1746519    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.ENSMBL8 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746520    title;
MPRINT(EM_DIAGRAM):   title;
1746521    proc print data=WORK.Ensmbl8 label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl8 label noobs;
1746522    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_combinemodels_title,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Imported Models to be Combined";
1746523    title10 "Probability Function: Average";
MPRINT(EM_DIAGRAM):   title10 "Probability Function: Average";
MPRINT(EM_DIAGRAM):   run;
1746524    run;
 
NOTE: There were 3 observations read from the data set WORK.ENSMBL8.
NOTE: The PROCEDURE PRINT printed page 1511.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746525    title9;
MPRINT(EM_DIAGRAM):   title9;
1746526    title10;
MPRINT(EM_DIAGRAM):   title10;
1746527    data WORK.M2XVTA5_;
MPRINT(EM_DIAGRAM):    data WORK.M2XVTA5_;
1746528    set WORK.M2XVTA5_;
MPRINT(EM_DIAGRAM):   set WORK.M2XVTA5_;
1746529    where NAME = "DepVar";
MPRINT(EM_DIAGRAM):   where NAME = "DepVar";
1746530    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M2XVTA5_.
      WHERE NAME='DepVar';
NOTE: The data set WORK.M2XVTA5_ has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1746531    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
1746532    * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
1746533    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1746534    %macro DMDBClass;
1746535        DepVar(DESC)
1746536    %mend DMDBClass;
1746537    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1746538    * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
1746539    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1746540    %macro DMDBVar;
1746541
1746542    %mend DMDBVar;
1746543    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746544    * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
1746545    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746546    proc dmdb batch data=EMWS8.Neural28_TRAIN
1746547    dmdbcat=WORK.EM_DMDB
1746548    maxlevel = 513
1746549    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Neural28_TRAIN dmdbcat=WORK.EM_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   class
1746550    class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
1746551    target
1746552    DepVar
1746553    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
1746554    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL28_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
1746555    quit;
1746556    *--- end code ---*;
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.37 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                17.37 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1GDCY1R
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1GDCY1R new;
MPRINT(EM_DIAGRAM):   run;
1746658    filename emflow
1746658  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring NEURAL28_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746659    *------------------------------------------------------------*;
1746660    * Ensmbl8: Scoring NEURAL28_TRAIN data;
1746661    *------------------------------------------------------------*;
1746662    data EMWS8.Ensmbl8_TRAIN
1746663    / view=EMWS8.Ensmbl8_TRAIN
1746664    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_TRAIN / view=EMWS8.Ensmbl8_TRAIN ;
1746665    set EMWS8.Neural28_TRAIN
1746666    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_TRAIN ;
1746667    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas.
1746668   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746669   +* Ensmbl8: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Combine model for DepVar;
1746670   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746671   +* Ensmbl8: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 1 of 3;
1746672   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746673   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746674   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
1746675   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1746676   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
1746677   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746678   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746679   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
1746680   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1746681   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
1746682   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746683   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746684   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
1746685   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1746686   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
1746687   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746688   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746689   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
1746690   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
1746691   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
1746692   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746693   +
1746694   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1746695   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1746695  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1746696   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1746697   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1746698   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1746699   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1746700   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
1746701   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746702   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
1746703   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1746704   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
1746705   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746706   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746707   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1746708   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746709   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1746710   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1746711   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
1746712   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746713   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
1746714   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1746715   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
1746716   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746717   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746718   +* TOOL: Variable selection Class;
MPRINT(EM_DIAGRAM):   * TOOL: Variable selection Class;
1746719   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1746720   +* NODE: Varsel;
MPRINT(EM_DIAGRAM):   * NODE: Varsel;
1746721   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746722   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1746723   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1746724   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1746725   +
1746726   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1746727   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1746728   +
1746729   +
1746730   +
1746731   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1746732   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1746733   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1746734   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746735   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
1746736   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1746737   +* NODE: Neural28;
MPRINT(EM_DIAGRAM):   * NODE: Neural28;
1746738   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746739   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1746740   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1746741   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1746742   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1746743   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1746744   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1746745   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1746746   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1746747   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1746748   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1746749   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1746750   +LENGTH _WARN_ $4
1746751   +      F_DepVar  $ 12
1746752   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1746753   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1746754   +
1746755   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1746756   +
1746757   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1746758   +
1746759   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1746760   +
1746761   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1746762   +
1746763   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1746764   +
1746765   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1746766   +
1746767   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1746768   +
1746769   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1746770   +
1746771   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1746772   +
1746773   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
1746774   +
1746775   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
1746776   +
1746777   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1746778   +
1746779   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1746780   +
1746781   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1746782   +
1746783   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1746784   +
1746785   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1746786   +
1746787   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1746788   +
1746789   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1746790   +
1746791   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1746792   +
1746793   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746794   +*** Checking missing input Interval
1746795   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1746796   +
1746797   +IF NMISS(
1746798   +   AcceptedCmpTotal ,
1746799   +   Mnt ,
1746800   +   MntMeatProducts ,
1746801   +   NumCatalogPurchases ,
1746802   +   RFMstat ,
1746803   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1746804   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1746805   +
1746806   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1746807   +END;
MPRINT(EM_DIAGRAM):   END;
1746808   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746809   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1746810   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746811   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1746812   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1746813   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1746814   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1746815   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1746816   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1746817   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1746818   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1746819   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1746820   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1746821   +END;
MPRINT(EM_DIAGRAM):   END;
1746822   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1746823   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1746824   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1746825   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1746826   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1746827   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1746828   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1746829   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1746830   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1746831   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1746832   +   ELSE S_NumCatalogPurchases
1746833   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1746834   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1746835   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1746836   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1746837   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1746838   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1746839   +END;
MPRINT(EM_DIAGRAM):   END;
1746840   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746841   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1746842   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746843   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1746844   +   H11  =     -0.1481294920829 * S_AcceptedCmpTotal  +    -0.31967651937983 *
1746845   +        S_Mnt  +    -0.25501160560688 * S_MntMeatProducts
1746846   +          +    -0.26541354265094 * S_NumCatalogPurchases
1746847   +          +    -0.05107291503479 * S_RFMstat  +     0.26055761102982 *
1746848   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.1481294920829 * S_AcceptedCmpTotal + -0.31967651937983 * S_Mnt
+ -0.25501160560688 * S_MntMeatProducts + -0.26541354265094 * S_NumCatalogPurchases +
-0.05107291503479 * S_RFMstat + 0.26055761102982 * S_Recency ;
1746849   +   H12  =    -0.53585265877367 * S_AcceptedCmpTotal  +    -0.63949625372724 *
1746850   +        S_Mnt  +    -0.71298935461349 * S_MntMeatProducts
1746851   +          +     0.26625422734047 * S_NumCatalogPurchases
1746852   +          +     0.04789590805202 * S_RFMstat  +     -0.2457029388315 *
1746853   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.53585265877367 * S_AcceptedCmpTotal + -0.63949625372724 * S_Mnt
+ -0.71298935461349 * S_MntMeatProducts + 0.26625422734047 * S_NumCatalogPurchases +
0.04789590805202 * S_RFMstat + -0.2457029388315 * S_Recency ;
1746854   +   H13  =     0.36156584602692 * S_AcceptedCmpTotal  +    -3.37453529906718 *
1746855   +        S_Mnt  +     1.02675869236561 * S_MntMeatProducts
1746856   +          +     0.00910121928187 * S_NumCatalogPurchases
1746857   +          +     0.20581491047897 * S_RFMstat  +    -0.18898725892086 *
1746858   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.36156584602692 * S_AcceptedCmpTotal + -3.37453529906718 * S_Mnt
+ 1.02675869236561 * S_MntMeatProducts + 0.00910121928187 * S_NumCatalogPurchases +
0.20581491047897 * S_RFMstat + -0.18898725892086 * S_Recency ;
1746859   +   H14  =    -0.14179052521941 * S_AcceptedCmpTotal  +     0.30769772196415 *
1746860   +        S_Mnt  +     0.17433696286114 * S_MntMeatProducts
1746861   +          +     0.12575078713396 * S_NumCatalogPurchases
1746862   +          +    -0.02826822167447 * S_RFMstat  +     0.28366844846854 *
1746863   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -0.14179052521941 * S_AcceptedCmpTotal + 0.30769772196415 * S_Mnt
+ 0.17433696286114 * S_MntMeatProducts + 0.12575078713396 * S_NumCatalogPurchases +
-0.02826822167447 * S_RFMstat + 0.28366844846854 * S_Recency ;
1746864   +   H15  =      0.0992610666113 * S_AcceptedCmpTotal  +    -0.08290546162861 *
1746865   +        S_Mnt  +     2.79374557573421 * S_MntMeatProducts
1746866   +          +     0.34145061374457 * S_NumCatalogPurchases
1746867   +          +     1.24642569428903 * S_RFMstat  +    -0.05791964822006 *
1746868   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.0992610666113 * S_AcceptedCmpTotal + -0.08290546162861 * S_Mnt +
2.79374557573421 * S_MntMeatProducts + 0.34145061374457 * S_NumCatalogPurchases +
1.24642569428903 * S_RFMstat + -0.05791964822006 * S_Recency ;
1746869   +   H16  =    -0.70732539360309 * S_AcceptedCmpTotal  +    -6.01133749430879 *
1746870   +        S_Mnt  +      2.7772635267037 * S_MntMeatProducts
1746871   +          +     3.89195901397454 * S_NumCatalogPurchases
1746872   +          +     -2.3989156332421 * S_RFMstat  +    -0.49366295107927 *
1746873   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.70732539360309 * S_AcceptedCmpTotal + -6.01133749430879 * S_Mnt
+ 2.7772635267037 * S_MntMeatProducts + 3.89195901397454 * S_NumCatalogPurchases +
-2.3989156332421 * S_RFMstat + -0.49366295107927 * S_Recency ;
1746874   +   H11  =     1.84373127923043 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.84373127923043 + H11 ;
1746875   +   H12  =     0.28145390491001 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.28145390491001 + H12 ;
1746876   +   H13  =    -2.13618632038915 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.13618632038915 + H13 ;
1746877   +   H14  =    -0.43724663060956 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.43724663060956 + H14 ;
1746878   +   H15  =     2.87870499074164 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 2.87870499074164 + H15 ;
1746879   +   H16  =    -1.50303768685501 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.50303768685501 + H16 ;
1746880   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1746881   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1746882   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1746883   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1746884   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
1746885   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
1746886   +END;
MPRINT(EM_DIAGRAM):   END;
1746887   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1746888   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1746889   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1746890   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1746891   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1746892   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
1746893   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
1746894   +END;
MPRINT(EM_DIAGRAM):   END;
1746895   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746896   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1746897   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746898   +
1746899   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1746900   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1746901   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1746902   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1746903   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1746904   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1746905   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1746906   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1746907   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1746908   +end;
MPRINT(EM_DIAGRAM):   end;
1746909   +else do;
MPRINT(EM_DIAGRAM):   else do;
1746910   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1746911   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1746912   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1746913   +   end;
MPRINT(EM_DIAGRAM):   end;
1746914   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1746915   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1746916   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1746917   +   end;
MPRINT(EM_DIAGRAM):   end;
1746918   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1746919   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1746920   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1746921   +   end;
MPRINT(EM_DIAGRAM):   end;
1746922   +end;
MPRINT(EM_DIAGRAM):   end;
1746923   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1746924   +   P_DepVar1  =    -5.40879672831374 * H11  +    -2.30275649942132 * H12
1746925   +          +     3.92987383270932 * H13  +    -5.94814919610295 * H14
1746926   +          +      8.1691029468057 * H15  +     1.41618936614917 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.40879672831374 * H11 + -2.30275649942132 * H12 +
3.92987383270932 * H13 + -5.94814919610295 * H14 + 8.1691029468057 * H15 + 1.41618936614917 *
H16 ;
1746927   +   P_DepVar1  =    -3.18163491507868 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.18163491507868 + P_DepVar1 ;
1746928   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1746929   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1746930   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1746931   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1746932   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1746933   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1746934   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1746935   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1746936   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1746937   +END;
MPRINT(EM_DIAGRAM):   END;
1746938   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1746939   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1746940   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1746941   +END;
MPRINT(EM_DIAGRAM):   END;
1746942   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1746943   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1746944   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1746945   +END;
MPRINT(EM_DIAGRAM):   END;
1746946   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1746947   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1746948   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1746949   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1746950   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1746951   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1746952   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1746953   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746954   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1746955   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1746956   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1746957   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1746958   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1746959   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1746960   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1746961   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1746962   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1746963   +END;
MPRINT(EM_DIAGRAM):   END;
1746964   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1746965   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1746966   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1746967   +drop
1746968   +H11
1746969   +H12
1746970   +H13
1746971   +H14
1746972   +H15
1746973   +H16
1746974   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
1746975   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1746976   +* Renaming variables for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural28;
1746977   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746978   +* Renaming Posterior variables for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural28;
1746979   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746980   +drop Neural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural28_P_DepVar1;
1746981   +Neural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural28_P_DepVar1 = P_DepVar1;
1746982   +drop Neural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural28_P_DepVar0;
1746983   +Neural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural28_P_DepVar0 = P_DepVar0;
1746984   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746985   +* Renaming _WARN_ variable for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural28;
1746986   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746987   +length Neural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural28_WARN_ $4;
1746988   +drop Neural28_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural28_WARN_;
1746989   +Neural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural28_WARN_ = _WARN_;
1746990   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746991   +* Ensmbl8: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 2 of 3;
1746992   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746993   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746994   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1746995   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1746996   +* NODE: AutoNeural33;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural33;
1746997   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1746998   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1746999   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1747000   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1747001   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1747002   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1747003   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1747004   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1747005   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1747006   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1747007   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1747008   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1747009   +LENGTH _WARN_ $4
1747010   +      F_DepVar  $ 12
1747011   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1747012   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1747013   +
1747014   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1747015   +
1747016   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1747017   +
1747018   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1747019   +
1747020   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1747021   +
1747022   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1747023   +
1747024   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1747025   +
1747026   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1747027   +
1747028   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1747029   +
1747030   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1747031   +
1747032   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1747033   +
1747034   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1747035   +
1747036   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1747037   +
1747038   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1747039   +
1747040   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1747041   +
1747042   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1747043   +
1747044   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1747045   +
1747046   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1747047   +
1747048   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747049   +*** Checking missing input Interval
1747050   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1747051   +
1747052   +IF NMISS(
1747053   +   AcceptedCmpTotal ,
1747054   +   Mnt ,
1747055   +   MntMeatProducts ,
1747056   +   NumCatalogPurchases ,
1747057   +   RFMstat ,
1747058   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1747059   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1747060   +
1747061   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1747062   +END;
MPRINT(EM_DIAGRAM):   END;
1747063   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747064   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1747065   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747066   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747067   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1747068   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1747069   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1747070   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1747071   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1747072   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1747073   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1747074   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1747075   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1747076   +END;
MPRINT(EM_DIAGRAM):   END;
1747077   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747078   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1747079   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1747080   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1747081   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1747082   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1747083   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1747084   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1747085   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1747086   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1747087   +   ELSE S_NumCatalogPurchases
1747088   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1747089   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1747090   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1747091   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1747092   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1747093   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1747094   +END;
MPRINT(EM_DIAGRAM):   END;
1747095   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747096   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1747097   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747098   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747099   +   H1x1_1  =     0.21234921669572 * S_AcceptedCmpTotal
1747100   +          +     0.01945817648377 * S_Mnt  +     0.10373621819131 *
1747101   +        S_MntMeatProducts  +     0.14724080002257 * S_NumCatalogPurchases
1747102   +          +     0.01465421656969 * S_RFMstat  +    -0.37839603073195 *
1747103   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.21234921669572 * S_AcceptedCmpTotal + 0.01945817648377 *
S_Mnt + 0.10373621819131 * S_MntMeatProducts + 0.14724080002257 * S_NumCatalogPurchases +
0.01465421656969 * S_RFMstat + -0.37839603073195 * S_Recency ;
1747104   +   H1x1_2  =      1.6456490248475 * S_AcceptedCmpTotal
1747105   +          +    -4.36126689821345 * S_Mnt  +    -5.34341350667797 *
1747106   +        S_MntMeatProducts  +    -0.50775340376834 * S_NumCatalogPurchases
1747107   +          +    -3.77547933008523 * S_RFMstat  +    -0.35687395481612 *
1747108   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.6456490248475 * S_AcceptedCmpTotal + -4.36126689821345 *
S_Mnt + -5.34341350667797 * S_MntMeatProducts + -0.50775340376834 * S_NumCatalogPurchases +
-3.77547933008523 * S_RFMstat + -0.35687395481612 * S_Recency ;
1747109   +   H1x1_3  =     2.25495773414966 * S_AcceptedCmpTotal
1747110   +          +     -11.006968240108 * S_Mnt  +     5.29014268166876 *
1747111   +        S_MntMeatProducts  +     1.38527755695319 * S_NumCatalogPurchases
1747112   +          +    -0.25229120510632 * S_RFMstat  +    -0.96545690161812 *
1747113   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 2.25495773414966 * S_AcceptedCmpTotal + -11.006968240108 *
S_Mnt + 5.29014268166876 * S_MntMeatProducts + 1.38527755695319 * S_NumCatalogPurchases +
-0.25229120510632 * S_RFMstat + -0.96545690161812 * S_Recency ;
1747114   +   H1x1_1  =    -1.44629643725438 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.44629643725438 + H1x1_1 ;
1747115   +   H1x1_2  =    -8.96045510766511 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -8.96045510766511 + H1x1_2 ;
1747116   +   H1x1_3  =    -3.43663513496723 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.43663513496723 + H1x1_3 ;
1747117   +   H1x1_4  = 0;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0;
1747118   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
1747119   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747120   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1747121   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1747122   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1747123   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1747124   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1747125   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1747126   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1747127   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1747128   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1747129   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1747130   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1747131   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1747132   +END;
MPRINT(EM_DIAGRAM):   END;
1747133   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747134   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1747135   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1747136   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1747137   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1747138   +END;
MPRINT(EM_DIAGRAM):   END;
1747139   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747140   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1747141   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747142   +
1747143   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1747144   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1747145   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1747146   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1747147   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1747148   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1747149   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1747150   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1747151   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1747152   +end;
MPRINT(EM_DIAGRAM):   end;
1747153   +else do;
MPRINT(EM_DIAGRAM):   else do;
1747154   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1747155   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1747156   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1747157   +   end;
MPRINT(EM_DIAGRAM):   end;
1747158   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1747159   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1747160   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1747161   +   end;
MPRINT(EM_DIAGRAM):   end;
1747162   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1747163   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1747164   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1747165   +   end;
MPRINT(EM_DIAGRAM):   end;
1747166   +end;
MPRINT(EM_DIAGRAM):   end;
1747167   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747168   +   P_DepVar1  =     15.9155817268417 * H1x1_1  +    -26.1877719603903 * H1x1_2
1747169   +          +     3.03900855168824 * H1x1_3  +    -8.12584282800012 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 15.9155817268417 * H1x1_1 + -26.1877719603903 * H1x1_2 +
3.03900855168824 * H1x1_3 + -8.12584282800012 * H1x1_4 ;
1747170   +   P_DepVar1  =    -0.43873072735423 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.43873072735423 + P_DepVar1 ;
1747171   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1747172   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1747173   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747174   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1747175   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1747176   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1747177   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1747178   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1747179   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1747180   +END;
MPRINT(EM_DIAGRAM):   END;
1747181   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747182   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1747183   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1747184   +END;
MPRINT(EM_DIAGRAM):   END;
1747185   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1747186   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1747187   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1747188   +END;
MPRINT(EM_DIAGRAM):   END;
1747189   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1747190   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1747191   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1747192   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1747193   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1747194   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1747195   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1747196   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747197   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1747198   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747199   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1747200   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1747201   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1747202   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1747203   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1747204   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1747205   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1747206   +END;
MPRINT(EM_DIAGRAM):   END;
1747207   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1747208   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1747209   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1747210   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1747211   +* Renaming variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural33;
1747212   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747213   +* Renaming Posterior variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural33;
1747214   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747215   +drop AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar1;
1747216   +AutoNeural33_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar1 = P_DepVar1;
1747217   +drop AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar0;
1747218   +AutoNeural33_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar0 = P_DepVar0;
1747219   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747220   +* Renaming _WARN_ variable for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural33;
1747221   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747222   +length AutoNeural33_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural33_WARN_ $4;
1747223   +drop AutoNeural33_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_WARN_;
1747224   +AutoNeural33_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural33_WARN_ = _WARN_;
1747225   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747226   +* Ensmbl8: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 3 of 3;
1747227   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747228   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747229   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1747230   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1747231   +* NODE: AutoNeural28;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural28;
1747232   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747233   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1747234   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1747235   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1747236   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1747237   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1747238   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1747239   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1747240   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1747241   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1747242   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1747243   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1747244   +LENGTH _WARN_ $4
1747245   +      F_DepVar  $ 12
1747246   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1747247   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1747248   +
1747249   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1747250   +
1747251   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1747252   +
1747253   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1747254   +
1747255   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1747256   +
1747257   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1747258   +
1747259   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1747260   +
1747261   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1747262   +
1747263   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1747264   +
1747265   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1747266   +
1747267   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1747268   +
1747269   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1747270   +
1747271   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1747272   +
1747273   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1747274   +
1747275   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1747276   +
1747277   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1747278   +
1747279   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1747280   +
1747281   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1747282   +
1747283   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1747284   +
1747285   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1747286   +
1747287   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1747288   +
1747289   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1747290   +
1747291   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1747292   +
1747293   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1747294   +
1747295   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1747296   +
1747297   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1747298   +
1747299   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1747300   +
1747301   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1747302   +
1747303   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1747304   +
1747305   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1747306   +
1747307   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1747308   +
1747309   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1747310   +
1747311   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1747312   +
1747313   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1747314   +
1747315   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1747316   +
1747317   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1747318   +
1747319   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1747320   +
1747321   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1747322   +
1747323   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1747324   +
1747325   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1747326   +
1747327   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1747328   +
1747329   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1747330   +
1747331   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1747332   +
1747333   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1747334   +
1747335   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1747336   +
1747337   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1747338   +
1747339   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1747340   +
1747341   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1747342   +
1747343   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1747344   +
1747345   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1747346   +
1747347   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747348   +*** Checking missing input Interval
1747349   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1747350   +
1747351   +IF NMISS(
1747352   +   AcceptedCmpTotal ,
1747353   +   Mnt ,
1747354   +   MntMeatProducts ,
1747355   +   NumCatalogPurchases ,
1747356   +   RFMstat ,
1747357   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1747358   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1747359   +
1747360   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1747361   +END;
MPRINT(EM_DIAGRAM):   END;
1747362   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747363   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1747364   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747365   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747366   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1747367   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1747368   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1747369   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1747370   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1747371   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1747372   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1747373   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1747374   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1747375   +END;
MPRINT(EM_DIAGRAM):   END;
1747376   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747377   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1747378   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1747379   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1747380   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1747381   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1747382   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1747383   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1747384   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1747385   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1747386   +   ELSE S_NumCatalogPurchases
1747387   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1747388   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1747389   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1747390   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1747391   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1747392   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1747393   +END;
MPRINT(EM_DIAGRAM):   END;
1747394   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747395   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1747396   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747397   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747398   +   H1x1_1  =     2.10717134491045 * S_AcceptedCmpTotal
1747399   +          +    -10.9799187882689 * S_Mnt  +     3.17619086363109 *
1747400   +        S_MntMeatProducts  +     0.58522050540174 * S_NumCatalogPurchases
1747401   +          +     0.10457500953086 * S_RFMstat  +    -0.59708195840656 *
1747402   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 2.10717134491045 * S_AcceptedCmpTotal + -10.9799187882689 *
S_Mnt + 3.17619086363109 * S_MntMeatProducts + 0.58522050540174 * S_NumCatalogPurchases +
0.10457500953086 * S_RFMstat + -0.59708195840656 * S_Recency ;
1747403   +   H1x1_2  =    -1.09600222674288 * S_AcceptedCmpTotal
1747404   +          +    -2.75188573882189 * S_Mnt  +     2.38829776780629 *
1747405   +        S_MntMeatProducts  +     2.37290115499231 * S_NumCatalogPurchases
1747406   +          +    -1.67864747205449 * S_RFMstat  +    -1.87700204299542 *
1747407   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.09600222674288 * S_AcceptedCmpTotal + -2.75188573882189 *
S_Mnt + 2.38829776780629 * S_MntMeatProducts + 2.37290115499231 * S_NumCatalogPurchases +
-1.67864747205449 * S_RFMstat + -1.87700204299542 * S_Recency ;
1747408   +   H1x1_3  =     0.24593136036671 * S_AcceptedCmpTotal
1747409   +          +     0.98275447305236 * S_Mnt  +     1.52686649163215 *
1747410   +        S_MntMeatProducts  +     1.08491172792697 * S_NumCatalogPurchases
1747411   +          +    -6.31220731697864 * S_RFMstat  +    -2.08472878456829 *
1747412   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.24593136036671 * S_AcceptedCmpTotal + 0.98275447305236 *
S_Mnt + 1.52686649163215 * S_MntMeatProducts + 1.08491172792697 * S_NumCatalogPurchases +
-6.31220731697864 * S_RFMstat + -2.08472878456829 * S_Recency ;
1747413   +   H1x1_4  =     1.35296744918554 * S_AcceptedCmpTotal
1747414   +          +    -3.58727753695297 * S_Mnt  +    -6.35187991517409 *
1747415   +        S_MntMeatProducts  +    -1.41725838894141 * S_NumCatalogPurchases
1747416   +          +     -2.5174617752956 * S_RFMstat  +     0.27284317719271 *
1747417   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.35296744918554 * S_AcceptedCmpTotal + -3.58727753695297 *
S_Mnt + -6.35187991517409 * S_MntMeatProducts + -1.41725838894141 * S_NumCatalogPurchases +
-2.5174617752956 * S_RFMstat + 0.27284317719271 * S_Recency ;
1747418   +   H1x1_5  =     1.41560412529603 * S_AcceptedCmpTotal
1747419   +          +     2.25142479190183 * S_Mnt  +      0.2775616702254 *
1747420   +        S_MntMeatProducts  +     -0.4118907005017 * S_NumCatalogPurchases
1747421   +          +     0.38803464834347 * S_RFMstat  +    -0.81750268679565 *
1747422   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.41560412529603 * S_AcceptedCmpTotal + 2.25142479190183 *
S_Mnt + 0.2775616702254 * S_MntMeatProducts + -0.4118907005017 * S_NumCatalogPurchases +
0.38803464834347 * S_RFMstat + -0.81750268679565 * S_Recency ;
1747423   +   H1x1_1  =    -1.94381314805925 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.94381314805925 + H1x1_1 ;
1747424   +   H1x1_2  =     -1.4831757685406 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.4831757685406 + H1x1_2 ;
1747425   +   H1x1_3  =    -0.53539803191548 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.53539803191548 + H1x1_3 ;
1747426   +   H1x1_4  =    -5.07257058520645 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -5.07257058520645 + H1x1_4 ;
1747427   +   H1x1_5  =    -3.95581011117601 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.95581011117601 + H1x1_5 ;
1747428   +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
1747429   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
1747430   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747431   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1747432   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1747433   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1747434   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1747435   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1747436   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1747437   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1747438   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1747439   +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
1747440   +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
1747441   +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
1747442   +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
1747443   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1747444   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1747445   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1747446   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1747447   +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
1747448   +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
1747449   +END;
MPRINT(EM_DIAGRAM):   END;
1747450   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747451   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1747452   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1747453   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1747454   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1747455   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1747456   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1747457   +END;
MPRINT(EM_DIAGRAM):   END;
1747458   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747459   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1747460   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747461   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747462   +   H1x2_1  =    -1.55686119998165 * S_AcceptedCmpTotal
1747463   +          +    -0.26111571781978 * S_Mnt  +    -1.44938218805988 *
1747464   +        S_MntMeatProducts  +     0.04086123541942 * S_NumCatalogPurchases
1747465   +          +    -0.80214702507913 * S_RFMstat  +     0.70413979175849 *
1747466   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.55686119998165 * S_AcceptedCmpTotal + -0.26111571781978 *
S_Mnt + -1.44938218805988 * S_MntMeatProducts + 0.04086123541942 * S_NumCatalogPurchases +
-0.80214702507913 * S_RFMstat + 0.70413979175849 * S_Recency ;
1747467   +   H1x2_2  =    -1.89013114756444 * S_AcceptedCmpTotal
1747468   +          +     2.02645277032883 * S_Mnt  +     0.33300450318575 *
1747469   +        S_MntMeatProducts  +    -3.49523435320164 * S_NumCatalogPurchases
1747470   +          +    -0.54366042810185 * S_RFMstat  +    -0.96821243793862 *
1747471   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -1.89013114756444 * S_AcceptedCmpTotal + 2.02645277032883 *
S_Mnt + 0.33300450318575 * S_MntMeatProducts + -3.49523435320164 * S_NumCatalogPurchases +
-0.54366042810185 * S_RFMstat + -0.96821243793862 * S_Recency ;
1747472   +   H1x2_3  =    -0.37493223935971 * S_AcceptedCmpTotal
1747473   +          +     0.44222577344261 * S_Mnt  +    -2.29203252552751 *
1747474   +        S_MntMeatProducts  +    -2.51799836083289 * S_NumCatalogPurchases
1747475   +          +     0.79676408136588 * S_RFMstat  +    -1.33777715205059 *
1747476   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.37493223935971 * S_AcceptedCmpTotal + 0.44222577344261 *
S_Mnt + -2.29203252552751 * S_MntMeatProducts + -2.51799836083289 * S_NumCatalogPurchases +
0.79676408136588 * S_RFMstat + -1.33777715205059 * S_Recency ;
1747477   +   H1x2_4  =     0.61023216239118 * S_AcceptedCmpTotal
1747478   +          +     -1.2504451910923 * S_Mnt  +     1.08805550572067 *
1747479   +        S_MntMeatProducts  +     0.42462128634087 * S_NumCatalogPurchases
1747480   +          +     0.47301106041065 * S_RFMstat  +    -2.61753144043135 *
1747481   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.61023216239118 * S_AcceptedCmpTotal + -1.2504451910923 *
S_Mnt + 1.08805550572067 * S_MntMeatProducts + 0.42462128634087 * S_NumCatalogPurchases +
0.47301106041065 * S_RFMstat + -2.61753144043135 * S_Recency ;
1747482   +   H1x2_5  =    -1.41618915627784 * S_AcceptedCmpTotal
1747483   +          +    -1.13785141950187 * S_Mnt  +    -1.73667107974481 *
1747484   +        S_MntMeatProducts  +      3.1366199093076 * S_NumCatalogPurchases
1747485   +          +    -1.94563130199796 * S_RFMstat  +       2.512838942818 *
1747486   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.41618915627784 * S_AcceptedCmpTotal + -1.13785141950187 *
S_Mnt + -1.73667107974481 * S_MntMeatProducts + 3.1366199093076 * S_NumCatalogPurchases +
-1.94563130199796 * S_RFMstat + 2.512838942818 * S_Recency ;
1747487   +   H1x2_1  =     0.73112846873387 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.73112846873387 + H1x2_1 ;
1747488   +   H1x2_2  =    -0.66717106615524 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.66717106615524 + H1x2_2 ;
1747489   +   H1x2_3  =      2.7125530739338 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.7125530739338 + H1x2_3 ;
1747490   +   H1x2_4  =    -1.39079027168122 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -1.39079027168122 + H1x2_4 ;
1747491   +   H1x2_5  =     -1.5266283403396 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.5266283403396 + H1x2_5 ;
1747492   +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
1747493   +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
1747494   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747495   +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
1747496   +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
1747497   +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
1747498   +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
1747499   +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
1747500   +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
1747501   +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
1747502   +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
1747503   +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
1747504   +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
1747505   +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
1747506   +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
1747507   +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
1747508   +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
1747509   +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
1747510   +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
1747511   +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
1747512   +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
1747513   +END;
MPRINT(EM_DIAGRAM):   END;
1747514   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747515   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1747516   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1747517   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1747518   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1747519   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1747520   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1747521   +END;
MPRINT(EM_DIAGRAM):   END;
1747522   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747523   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1747524   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747525   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747526   +   H1x3_1  =     1.55893522013734 * S_AcceptedCmpTotal
1747527   +          +    -1.16802167955541 * S_Mnt  +    -1.60360119780136 *
1747528   +        S_MntMeatProducts  +     0.47774394371528 * S_NumCatalogPurchases
1747529   +          +      -0.530718682766 * S_RFMstat  +    -2.44187650282709 *
1747530   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.55893522013734 * S_AcceptedCmpTotal + -1.16802167955541 *
S_Mnt + -1.60360119780136 * S_MntMeatProducts + 0.47774394371528 * S_NumCatalogPurchases +
-0.530718682766 * S_RFMstat + -2.44187650282709 * S_Recency ;
1747531   +   H1x3_2  =     1.06465525219753 * S_AcceptedCmpTotal
1747532   +          +    -4.15619528335918 * S_Mnt  +     1.95067813512976 *
1747533   +        S_MntMeatProducts  +    -2.07670102753791 * S_NumCatalogPurchases
1747534   +          +     0.49910286851075 * S_RFMstat  +     0.93996026298479 *
1747535   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.06465525219753 * S_AcceptedCmpTotal + -4.15619528335918 *
S_Mnt + 1.95067813512976 * S_MntMeatProducts + -2.07670102753791 * S_NumCatalogPurchases +
0.49910286851075 * S_RFMstat + 0.93996026298479 * S_Recency ;
1747536   +   H1x3_3  =    -0.29105397796174 * S_AcceptedCmpTotal
1747537   +          +     2.11159454800566 * S_Mnt  +     1.67840031691295 *
1747538   +        S_MntMeatProducts  +    -2.40711178902336 * S_NumCatalogPurchases
1747539   +          +    -1.13747844076384 * S_RFMstat  +    -0.88756656082469 *
1747540   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.29105397796174 * S_AcceptedCmpTotal + 2.11159454800566 *
S_Mnt + 1.67840031691295 * S_MntMeatProducts + -2.40711178902336 * S_NumCatalogPurchases +
-1.13747844076384 * S_RFMstat + -0.88756656082469 * S_Recency ;
1747541   +   H1x3_4  =    -1.15703505358845 * S_AcceptedCmpTotal
1747542   +          +     0.30100889287849 * S_Mnt  +     0.55319963517684 *
1747543   +        S_MntMeatProducts  +    -0.02272785613118 * S_NumCatalogPurchases
1747544   +          +     0.43699534320691 * S_RFMstat  +     2.22910491450126 *
1747545   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -1.15703505358845 * S_AcceptedCmpTotal + 0.30100889287849 *
S_Mnt + 0.55319963517684 * S_MntMeatProducts + -0.02272785613118 * S_NumCatalogPurchases +
0.43699534320691 * S_RFMstat + 2.22910491450126 * S_Recency ;
1747546   +   H1x3_5  =    -0.42268650148557 * S_AcceptedCmpTotal
1747547   +          +    -2.38416083526034 * S_Mnt  +     2.41579845516974 *
1747548   +        S_MntMeatProducts  +     0.60973384003689 * S_NumCatalogPurchases
1747549   +          +    -1.12415629345715 * S_RFMstat  +    -0.59274912531616 *
1747550   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = -0.42268650148557 * S_AcceptedCmpTotal + -2.38416083526034 *
S_Mnt + 2.41579845516974 * S_MntMeatProducts + 0.60973384003689 * S_NumCatalogPurchases +
-1.12415629345715 * S_RFMstat + -0.59274912531616 * S_Recency ;
1747551   +   H1x3_1  =     0.20894643335542 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.20894643335542 + H1x3_1 ;
1747552   +   H1x3_2  =     2.19187718990043 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 2.19187718990043 + H1x3_2 ;
1747553   +   H1x3_3  =    -0.63127842492526 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.63127842492526 + H1x3_3 ;
1747554   +   H1x3_4  =     0.25735048029686 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.25735048029686 + H1x3_4 ;
1747555   +   H1x3_5  =     0.02632857468412 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.02632857468412 + H1x3_5 ;
1747556   +   H1x3_6  = 0;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0;
1747557   +   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
1747558   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747559   +   H1x3_1  = EXP(H1x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_1 = EXP(H1x3_1 - _MAX_);
1747560   +   _SUM_ = _SUM_ + H1x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_1 ;
1747561   +   H1x3_2  = EXP(H1x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_2 = EXP(H1x3_2 - _MAX_);
1747562   +   _SUM_ = _SUM_ + H1x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_2 ;
1747563   +   H1x3_3  = EXP(H1x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_3 = EXP(H1x3_3 - _MAX_);
1747564   +   _SUM_ = _SUM_ + H1x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_3 ;
1747565   +   H1x3_4  = EXP(H1x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_4 = EXP(H1x3_4 - _MAX_);
1747566   +   _SUM_ = _SUM_ + H1x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_4 ;
1747567   +   H1x3_5  = EXP(H1x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_5 = EXP(H1x3_5 - _MAX_);
1747568   +   _SUM_ = _SUM_ + H1x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_5 ;
1747569   +   H1x3_6  = EXP(H1x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_6 = EXP(H1x3_6 - _MAX_);
1747570   +   _SUM_ = _SUM_ + H1x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_6 ;
1747571   +   H1x3_1  = H1x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 / _SUM_;
1747572   +   H1x3_2  = H1x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 / _SUM_;
1747573   +   H1x3_3  = H1x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 / _SUM_;
1747574   +   H1x3_4  = H1x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 / _SUM_;
1747575   +   H1x3_5  = H1x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 / _SUM_;
1747576   +   H1x3_6  = H1x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 / _SUM_;
1747577   +END;
MPRINT(EM_DIAGRAM):   END;
1747578   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747579   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1747580   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1747581   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1747582   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1747583   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1747584   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1747585   +END;
MPRINT(EM_DIAGRAM):   END;
1747586   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747587   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1747588   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747589   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747590   +   H2x1_1  =    -1.91284328958208 * H1x1_1  +     1.01368252878712 * H1x1_2
1747591   +          +     0.88385633780482 * H1x1_3  +     0.77249497316744 * H1x1_4
1747592   +          +    -1.68467525644522 * H1x1_5  +     0.22872788371043 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.91284328958208 * H1x1_1 + 1.01368252878712 * H1x1_2 +
0.88385633780482 * H1x1_3 + 0.77249497316744 * H1x1_4 + -1.68467525644522 * H1x1_5 +
0.22872788371043 * H1x1_6 ;
1747593   +   H2x1_2  =    -0.08913678495622 * H1x1_1  +    -0.95704614273187 * H1x1_2
1747594   +          +    -1.13959611313765 * H1x1_3  +    -0.83269840840553 * H1x1_4
1747595   +          +    -1.34839441082903 * H1x1_5  +      1.4617930846853 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.08913678495622 * H1x1_1 + -0.95704614273187 * H1x1_2 +
-1.13959611313765 * H1x1_3 + -0.83269840840553 * H1x1_4 + -1.34839441082903 * H1x1_5 +
1.4617930846853 * H1x1_6 ;
1747596   +   H2x1_3  =     1.19406467163652 * H1x1_1  +     1.10561638775412 * H1x1_2
1747597   +          +     3.50091937687106 * H1x1_3  +     -0.7408464567923 * H1x1_4
1747598   +          +     1.07741096211456 * H1x1_5  +     -1.0098240718302 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.19406467163652 * H1x1_1 + 1.10561638775412 * H1x1_2 +
3.50091937687106 * H1x1_3 + -0.7408464567923 * H1x1_4 + 1.07741096211456 * H1x1_5 +
-1.0098240718302 * H1x1_6 ;
1747599   +   H2x1_4  =    -3.50840251474163 * H1x1_1  +    -0.53688540920235 * H1x1_2
1747600   +          +    -2.44435438360824 * H1x1_3  +     4.64213676100195 * H1x1_4
1747601   +          +     0.36171420259161 * H1x1_5  +     0.11106499550345 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -3.50840251474163 * H1x1_1 + -0.53688540920235 * H1x1_2 +
-2.44435438360824 * H1x1_3 + 4.64213676100195 * H1x1_4 + 0.36171420259161 * H1x1_5 +
0.11106499550345 * H1x1_6 ;
1747602   +   H2x1_5  =    -0.92126735850423 * H1x1_1  +    -0.50015259068425 * H1x1_2
1747603   +          +    -2.75013936022633 * H1x1_3  +     1.29804156504555 * H1x1_4
1747604   +          +    -2.88854985509185 * H1x1_5  +     3.51037817476003 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -0.92126735850423 * H1x1_1 + -0.50015259068425 * H1x1_2 +
-2.75013936022633 * H1x1_3 + 1.29804156504555 * H1x1_4 + -2.88854985509185 * H1x1_5 +
3.51037817476003 * H1x1_6 ;
1747605   +   H2x1_6  =      2.7601365695399 * H1x1_1  +     0.60343333315883 * H1x1_2
1747606   +          +    -4.84088835213795 * H1x1_3  +     0.04677091451384 * H1x1_4
1747607   +          +     1.99119511166544 * H1x1_5  +    -1.84413878989067 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 2.7601365695399 * H1x1_1 + 0.60343333315883 * H1x1_2 +
-4.84088835213795 * H1x1_3 + 0.04677091451384 * H1x1_4 + 1.99119511166544 * H1x1_5 +
-1.84413878989067 * H1x1_6 ;
1747608   +   H2x1_1  = H2x1_1  +    -0.55299168308518 * H1x2_1
1747609   +          +    -0.70728759829892 * H1x2_2  +     0.02028723479846 * H1x2_3
1747610   +          +      2.1534144925678 * H1x2_4  +    -0.60181736829464 * H1x2_5
1747611   +          +    -0.96627475596267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.55299168308518 * H1x2_1 + -0.70728759829892 *
H1x2_2 + 0.02028723479846 * H1x2_3 + 2.1534144925678 * H1x2_4 + -0.60181736829464 * H1x2_5 +
-0.96627475596267 * H1x2_6 ;
1747612   +   H2x1_2  = H2x1_2  +     1.02776882707138 * H1x2_1
1747613   +          +    -0.26186544699712 * H1x2_2  +    -0.59804813597981 * H1x2_3
1747614   +          +     0.13683572328121 * H1x2_4  +     -0.4527430044725 * H1x2_5
1747615   +          +     0.09804477894859 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 1.02776882707138 * H1x2_1 + -0.26186544699712 * H1x2_2
+ -0.59804813597981 * H1x2_3 + 0.13683572328121 * H1x2_4 + -0.4527430044725 * H1x2_5 +
0.09804477894859 * H1x2_6 ;
1747616   +   H2x1_3  = H2x1_3  +    -1.37372644240513 * H1x2_1
1747617   +          +    -1.41411080054855 * H1x2_2  +    -0.85635388175337 * H1x2_3
1747618   +          +     1.78033736245689 * H1x2_4  +    -0.32277639652206 * H1x2_5
1747619   +          +    -0.10095907241792 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -1.37372644240513 * H1x2_1 + -1.41411080054855 *
H1x2_2 + -0.85635388175337 * H1x2_3 + 1.78033736245689 * H1x2_4 + -0.32277639652206 * H1x2_5 +
-0.10095907241792 * H1x2_6 ;
1747620   +   H2x1_4  = H2x1_4  +     0.38975073179429 * H1x2_1
1747621   +          +      1.7999626274739 * H1x2_2  +    -0.54595798920563 * H1x2_3
1747622   +          +    -2.87794569741229 * H1x2_4  +     2.24407851876424 * H1x2_5
1747623   +          +    -0.78007016861264 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 0.38975073179429 * H1x2_1 + 1.7999626274739 * H1x2_2 +
-0.54595798920563 * H1x2_3 + -2.87794569741229 * H1x2_4 + 2.24407851876424 * H1x2_5 +
-0.78007016861264 * H1x2_6 ;
1747624   +   H2x1_5  = H2x1_5  +     1.68407538128685 * H1x2_1
1747625   +          +     2.69111816059998 * H1x2_2  +     0.12927675826764 * H1x2_3
1747626   +          +     -1.7263485913587 * H1x2_4  +    -2.15741343790643 * H1x2_5
1747627   +          +     1.95855676074934 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + 1.68407538128685 * H1x2_1 + 2.69111816059998 * H1x2_2
+ 0.12927675826764 * H1x2_3 + -1.7263485913587 * H1x2_4 + -2.15741343790643 * H1x2_5 +
1.95855676074934 * H1x2_6 ;
1747628   +   H2x1_6  = H2x1_6  +     0.31146846941645 * H1x2_1
1747629   +          +     0.33682375646593 * H1x2_2  +      1.6527641940739 * H1x2_3
1747630   +          +    -0.96403239328063 * H1x2_4  +    -1.11790253982232 * H1x2_5
1747631   +          +     -1.4251132059225 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + 0.31146846941645 * H1x2_1 + 0.33682375646593 * H1x2_2
+ 1.6527641940739 * H1x2_3 + -0.96403239328063 * H1x2_4 + -1.11790253982232 * H1x2_5 +
-1.4251132059225 * H1x2_6 ;
1747632   +   H2x1_1  = H2x1_1  +     0.47301275142195 * H1x3_1
1747633   +          +    -1.23391488243925 * H1x3_2  +    -1.81348351496647 * H1x3_3
1747634   +          +    -0.66473016828009 * H1x3_4  +     1.27670685567846 * H1x3_5
1747635   +          +     0.38481934719452 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.47301275142195 * H1x3_1 + -1.23391488243925 * H1x3_2
+ -1.81348351496647 * H1x3_3 + -0.66473016828009 * H1x3_4 + 1.27670685567846 * H1x3_5 +
0.38481934719452 * H1x3_6 ;
1747636   +   H2x1_2  = H2x1_2  +     0.35549808536734 * H1x3_1
1747637   +          +     0.36201179536458 * H1x3_2  +     1.04726425834791 * H1x3_3
1747638   +          +    -1.08276187248251 * H1x3_4  +     0.74248193765521 * H1x3_5
1747639   +          +     1.87596859340821 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.35549808536734 * H1x3_1 + 0.36201179536458 * H1x3_2
+ 1.04726425834791 * H1x3_3 + -1.08276187248251 * H1x3_4 + 0.74248193765521 * H1x3_5 +
1.87596859340821 * H1x3_6 ;
1747640   +   H2x1_3  = H2x1_3  +    -0.36667720681998 * H1x3_1
1747641   +          +      0.5256210995417 * H1x3_2  +    -0.44860423311788 * H1x3_3
1747642   +          +    -0.20913840911463 * H1x3_4  +    -0.76258888517092 * H1x3_5
1747643   +          +     0.20457555210609 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.36667720681998 * H1x3_1 + 0.5256210995417 * H1x3_2
+ -0.44860423311788 * H1x3_3 + -0.20913840911463 * H1x3_4 + -0.76258888517092 * H1x3_5 +
0.20457555210609 * H1x3_6 ;
1747644   +   H2x1_4  = H2x1_4  +     -0.5052323966606 * H1x3_1
1747645   +          +     0.57348008947054 * H1x3_2  +     0.36313882476736 * H1x3_3
1747646   +          +     2.54509537428676 * H1x3_4  +    -1.40462445002153 * H1x3_5
1747647   +          +     1.76488988390401 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.5052323966606 * H1x3_1 + 0.57348008947054 * H1x3_2
+ 0.36313882476736 * H1x3_3 + 2.54509537428676 * H1x3_4 + -1.40462445002153 * H1x3_5 +
1.76488988390401 * H1x3_6 ;
1747648   +   H2x1_5  = H2x1_5  +     -0.4555917406867 * H1x3_1
1747649   +          +     0.52745581365834 * H1x3_2  +    -0.82303556180885 * H1x3_3
1747650   +          +    -0.78981386250305 * H1x3_4  +     0.09307958113664 * H1x3_5
1747651   +          +     1.63202351822216 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.4555917406867 * H1x3_1 + 0.52745581365834 * H1x3_2
+ -0.82303556180885 * H1x3_3 + -0.78981386250305 * H1x3_4 + 0.09307958113664 * H1x3_5 +
1.63202351822216 * H1x3_6 ;
1747652   +   H2x1_6  = H2x1_6  +    -0.57563015009902 * H1x3_1
1747653   +          +     2.47575184377805 * H1x3_2  +    -0.91958118957044 * H1x3_3
1747654   +          +    -1.67916721690516 * H1x3_4  +     0.69514147486102 * H1x3_5
1747655   +          +    -0.75070900812889 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + -0.57563015009902 * H1x3_1 + 2.47575184377805 * H1x3_2
+ -0.91958118957044 * H1x3_3 + -1.67916721690516 * H1x3_4 + 0.69514147486102 * H1x3_5 +
-0.75070900812889 * H1x3_6 ;
1747656   +   H2x1_1  =     0.44089803005479 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.44089803005479 + H2x1_1 ;
1747657   +   H2x1_2  =     0.84182794358826 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.84182794358826 + H2x1_2 ;
1747658   +   H2x1_3  =     0.09803371201388 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.09803371201388 + H2x1_3 ;
1747659   +   H2x1_4  =      -0.624591248343 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.624591248343 + H2x1_4 ;
1747660   +   H2x1_5  =      0.7596943675806 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.7596943675806 + H2x1_5 ;
1747661   +   H2x1_6  =     1.86613856151687 + H2x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.86613856151687 + H2x1_6 ;
1747662   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1747663   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1747664   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1747665   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1747666   +   H2x1_3  = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
1747667   +   H2x1_4  = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_4 = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
1747668   +   H2x1_5  = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_5 = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
1747669   +   H2x1_6  = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
1747670   +END;
MPRINT(EM_DIAGRAM):   END;
1747671   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747672   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1747673   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1747674   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1747675   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1747676   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1747677   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1747678   +END;
MPRINT(EM_DIAGRAM):   END;
1747679   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747680   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1747681   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747682   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747683   +   H2x2_1  =    -0.67599100831955 * H1x1_1  +     0.24077189312828 * H1x1_2
1747684   +          +      0.2000763543409 * H1x1_3  +    -1.82199808794926 * H1x1_4
1747685   +          +    -0.63614429983717 * H1x1_5  +     0.35027369588915 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.67599100831955 * H1x1_1 + 0.24077189312828 * H1x1_2 +
0.2000763543409 * H1x1_3 + -1.82199808794926 * H1x1_4 + -0.63614429983717 * H1x1_5 +
0.35027369588915 * H1x1_6 ;
1747686   +   H2x2_2  =    -2.86273409671688 * H1x1_1  +    -1.17210014090039 * H1x1_2
1747687   +          +     2.79815832312648 * H1x1_3  +     0.46361776813305 * H1x1_4
1747688   +          +      0.0798677597958 * H1x1_5  +    -0.75991454790943 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -2.86273409671688 * H1x1_1 + -1.17210014090039 * H1x1_2 +
2.79815832312648 * H1x1_3 + 0.46361776813305 * H1x1_4 + 0.0798677597958 * H1x1_5 +
-0.75991454790943 * H1x1_6 ;
1747689   +   H2x2_3  =     -0.6739829418862 * H1x1_1  +    -2.31169428380278 * H1x1_2
1747690   +          +     2.10300119718615 * H1x1_3  +    -0.00742357063683 * H1x1_4
1747691   +          +    -1.51041651747244 * H1x1_5  +    -0.17010696636548 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.6739829418862 * H1x1_1 + -2.31169428380278 * H1x1_2 +
2.10300119718615 * H1x1_3 + -0.00742357063683 * H1x1_4 + -1.51041651747244 * H1x1_5 +
-0.17010696636548 * H1x1_6 ;
1747692   +   H2x2_4  =    -1.50678102953218 * H1x1_1  +    -0.89959733379076 * H1x1_2
1747693   +          +     1.08933879000366 * H1x1_3  +      0.4160027440208 * H1x1_4
1747694   +          +     0.96602358671281 * H1x1_5  +     2.49695921665153 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -1.50678102953218 * H1x1_1 + -0.89959733379076 * H1x1_2 +
1.08933879000366 * H1x1_3 + 0.4160027440208 * H1x1_4 + 0.96602358671281 * H1x1_5 +
2.49695921665153 * H1x1_6 ;
1747695   +   H2x2_5  =      0.7197781324018 * H1x1_1  +     0.65156339723506 * H1x1_2
1747696   +          +     1.10688522196469 * H1x1_3  +    -0.18317373714845 * H1x1_4
1747697   +          +    -0.41607265841802 * H1x1_5  +    -1.97247962280317 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.7197781324018 * H1x1_1 + 0.65156339723506 * H1x1_2 +
1.10688522196469 * H1x1_3 + -0.18317373714845 * H1x1_4 + -0.41607265841802 * H1x1_5 +
-1.97247962280317 * H1x1_6 ;
1747698   +   H2x2_6  =     0.54986188496659 * H1x1_1  +    -1.79839449870258 * H1x1_2
1747699   +          +    -1.15036560870119 * H1x1_3  +     1.47969678061941 * H1x1_4
1747700   +          +     0.10597867235187 * H1x1_5  +     0.90300533681641 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.54986188496659 * H1x1_1 + -1.79839449870258 * H1x1_2 +
-1.15036560870119 * H1x1_3 + 1.47969678061941 * H1x1_4 + 0.10597867235187 * H1x1_5 +
0.90300533681641 * H1x1_6 ;
1747701   +   H2x2_1  = H2x2_1  +    -0.21000305943834 * H1x2_1
1747702   +          +    -0.32875528993365 * H1x2_2  +    -2.01191741391886 * H1x2_3
1747703   +          +     0.25433844143017 * H1x2_4  +    -0.22353514971516 * H1x2_5
1747704   +          +    -1.39994531215362 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21000305943834 * H1x2_1 + -0.32875528993365 *
H1x2_2 + -2.01191741391886 * H1x2_3 + 0.25433844143017 * H1x2_4 + -0.22353514971516 * H1x2_5 +
-1.39994531215362 * H1x2_6 ;
1747705   +   H2x2_2  = H2x2_2  +     0.97984435202354 * H1x2_1
1747706   +          +    -0.32249690006833 * H1x2_2  +    -1.39997315416199 * H1x2_3
1747707   +          +     -2.7808281862933 * H1x2_4  +    -0.16292745421241 * H1x2_5
1747708   +          +    -0.40444669273525 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.97984435202354 * H1x2_1 + -0.32249690006833 * H1x2_2
+ -1.39997315416199 * H1x2_3 + -2.7808281862933 * H1x2_4 + -0.16292745421241 * H1x2_5 +
-0.40444669273525 * H1x2_6 ;
1747709   +   H2x2_3  = H2x2_3  +      1.7332207906399 * H1x2_1
1747710   +          +     0.48772690844604 * H1x2_2  +    -0.03702571322482 * H1x2_3
1747711   +          +    -0.04073364631727 * H1x2_4  +    -0.91191013457442 * H1x2_5
1747712   +          +    -2.38736049861996 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.7332207906399 * H1x2_1 + 0.48772690844604 * H1x2_2 +
-0.03702571322482 * H1x2_3 + -0.04073364631727 * H1x2_4 + -0.91191013457442 * H1x2_5 +
-2.38736049861996 * H1x2_6 ;
1747713   +   H2x2_4  = H2x2_4  +    -0.06792429668775 * H1x2_1
1747714   +          +    -3.07222522712126 * H1x2_2  +     0.01320929156379 * H1x2_3
1747715   +          +     0.84459091213222 * H1x2_4  +    -0.95949143247045 * H1x2_5
1747716   +          +     0.02632878191094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.06792429668775 * H1x2_1 + -3.07222522712126 *
H1x2_2 + 0.01320929156379 * H1x2_3 + 0.84459091213222 * H1x2_4 + -0.95949143247045 * H1x2_5 +
0.02632878191094 * H1x2_6 ;
1747717   +   H2x2_5  = H2x2_5  +     0.13831659235384 * H1x2_1
1747718   +          +    -1.75598160312232 * H1x2_2  +     0.17047671926062 * H1x2_3
1747719   +          +    -0.45409084878331 * H1x2_4  +    -1.17540122389603 * H1x2_5
1747720   +          +     0.79706245066425 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 0.13831659235384 * H1x2_1 + -1.75598160312232 * H1x2_2
+ 0.17047671926062 * H1x2_3 + -0.45409084878331 * H1x2_4 + -1.17540122389603 * H1x2_5 +
0.79706245066425 * H1x2_6 ;
1747721   +   H2x2_6  = H2x2_6  +     1.74450762507234 * H1x2_1
1747722   +          +    -0.18999736448811 * H1x2_2  +    -0.82200918268165 * H1x2_3
1747723   +          +      1.8752098314092 * H1x2_4  +    -0.55366925571085 * H1x2_5
1747724   +          +     1.96032751350518 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 1.74450762507234 * H1x2_1 + -0.18999736448811 * H1x2_2
+ -0.82200918268165 * H1x2_3 + 1.8752098314092 * H1x2_4 + -0.55366925571085 * H1x2_5 +
1.96032751350518 * H1x2_6 ;
1747725   +   H2x2_1  = H2x2_1  +     1.05088385328525 * H1x3_1
1747726   +          +    -1.18748050069472 * H1x3_2  +     0.33686598960541 * H1x3_3
1747727   +          +     0.60467968457853 * H1x3_4  +     0.44997942659683 * H1x3_5
1747728   +          +     0.86372067144364 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 1.05088385328525 * H1x3_1 + -1.18748050069472 * H1x3_2
+ 0.33686598960541 * H1x3_3 + 0.60467968457853 * H1x3_4 + 0.44997942659683 * H1x3_5 +
0.86372067144364 * H1x3_6 ;
1747729   +   H2x2_2  = H2x2_2  +     0.54489966189284 * H1x3_1
1747730   +          +     0.63828892530684 * H1x3_2  +     1.36576672067523 * H1x3_3
1747731   +          +    -0.93080386349548 * H1x3_4  +    -0.53645684858865 * H1x3_5
1747732   +          +     0.80254310887989 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54489966189284 * H1x3_1 + 0.63828892530684 * H1x3_2
+ 1.36576672067523 * H1x3_3 + -0.93080386349548 * H1x3_4 + -0.53645684858865 * H1x3_5 +
0.80254310887989 * H1x3_6 ;
1747733   +   H2x2_3  = H2x2_3  +    -0.43326705547287 * H1x3_1
1747734   +          +     1.62130917530395 * H1x3_2  +     -1.9569471371487 * H1x3_3
1747735   +          +    -0.16690355216427 * H1x3_4  +     0.76588074497881 * H1x3_5
1747736   +          +    -0.80961698509146 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.43326705547287 * H1x3_1 + 1.62130917530395 * H1x3_2
+ -1.9569471371487 * H1x3_3 + -0.16690355216427 * H1x3_4 + 0.76588074497881 * H1x3_5 +
-0.80961698509146 * H1x3_6 ;
1747737   +   H2x2_4  = H2x2_4  +     0.14186336769381 * H1x3_1
1747738   +          +    -0.40313769302155 * H1x3_2  +     0.32907477170578 * H1x3_3
1747739   +          +    -0.09559287343495 * H1x3_4  +     1.23870853269954 * H1x3_5
1747740   +          +    -1.29909553454934 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.14186336769381 * H1x3_1 + -0.40313769302155 * H1x3_2
+ 0.32907477170578 * H1x3_3 + -0.09559287343495 * H1x3_4 + 1.23870853269954 * H1x3_5 +
-1.29909553454934 * H1x3_6 ;
1747741   +   H2x2_5  = H2x2_5  +    -0.23962567636847 * H1x3_1
1747742   +          +    -0.40709618711343 * H1x3_2  +    -1.68479406479753 * H1x3_3
1747743   +          +     0.70815879664382 * H1x3_4  +    -0.08013794063462 * H1x3_5
1747744   +          +      0.3854653698129 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.23962567636847 * H1x3_1 + -0.40709618711343 *
H1x3_2 + -1.68479406479753 * H1x3_3 + 0.70815879664382 * H1x3_4 + -0.08013794063462 * H1x3_5 +
0.3854653698129 * H1x3_6 ;
1747745   +   H2x2_6  = H2x2_6  +     0.30227974563111 * H1x3_1
1747746   +          +    -0.74687752968448 * H1x3_2  +     1.36415251312446 * H1x3_3
1747747   +          +     1.81088044806083 * H1x3_4  +     1.05534281539066 * H1x3_5
1747748   +          +    -0.43429796112944 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 0.30227974563111 * H1x3_1 + -0.74687752968448 * H1x3_2
+ 1.36415251312446 * H1x3_3 + 1.81088044806083 * H1x3_4 + 1.05534281539066 * H1x3_5 +
-0.43429796112944 * H1x3_6 ;
1747749   +   H2x2_1  =     0.63184708368306 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.63184708368306 + H2x2_1 ;
1747750   +   H2x2_2  =     0.84907350596357 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = 0.84907350596357 + H2x2_2 ;
1747751   +   H2x2_3  =    -0.73809203587584 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.73809203587584 + H2x2_3 ;
1747752   +   H2x2_4  =    -0.43815853180498 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.43815853180498 + H2x2_4 ;
1747753   +   H2x2_5  =     0.21738444698009 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.21738444698009 + H2x2_5 ;
1747754   +   H2x2_6  =     0.35336989078545 + H2x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.35336989078545 + H2x2_6 ;
1747755   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1747756   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1747757   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1747758   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1747759   +   H2x2_3  = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
1747760   +   H2x2_4  = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_4 = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
1747761   +   H2x2_5  = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
1747762   +   H2x2_6  = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_6 = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
1747763   +END;
MPRINT(EM_DIAGRAM):   END;
1747764   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747765   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1747766   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1747767   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1747768   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1747769   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1747770   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1747771   +END;
MPRINT(EM_DIAGRAM):   END;
1747772   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747773   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1747774   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747775   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747776   +   H3x1_1  =     0.88232318111379 * H2x1_1  +     0.33230222316203 * H2x1_2
1747777   +          +     1.74392107555271 * H2x1_3  +    -1.04185063882146 * H2x1_4
1747778   +          +    -0.63105511848819 * H2x1_5  +    -1.05088304858423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.88232318111379 * H2x1_1 + 0.33230222316203 * H2x1_2 +
1.74392107555271 * H2x1_3 + -1.04185063882146 * H2x1_4 + -0.63105511848819 * H2x1_5 +
-1.05088304858423 * H2x1_6 ;
1747779   +   H3x1_2  =     1.11736284857762 * H2x1_1  +     1.90660007278783 * H2x1_2
1747780   +          +    -0.38007206174956 * H2x1_3  +     0.37265047043174 * H2x1_4
1747781   +          +     2.27208664894129 * H2x1_5  +     0.87150445612099 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 1.11736284857762 * H2x1_1 + 1.90660007278783 * H2x1_2 +
-0.38007206174956 * H2x1_3 + 0.37265047043174 * H2x1_4 + 2.27208664894129 * H2x1_5 +
0.87150445612099 * H2x1_6 ;
1747782   +   H3x1_3  =    -1.47841270668706 * H2x1_1  +    -1.28441896803313 * H2x1_2
1747783   +          +     1.95549364222924 * H2x1_3  +    -2.50484940312791 * H2x1_4
1747784   +          +    -2.84934238039874 * H2x1_5  +     2.18013446750751 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -1.47841270668706 * H2x1_1 + -1.28441896803313 * H2x1_2 +
1.95549364222924 * H2x1_3 + -2.50484940312791 * H2x1_4 + -2.84934238039874 * H2x1_5 +
2.18013446750751 * H2x1_6 ;
1747785   +   H3x1_4  =     1.91981096223784 * H2x1_1  +     2.50981387206546 * H2x1_2
1747786   +          +     1.52848474440169 * H2x1_3  +    -1.77653121606781 * H2x1_4
1747787   +          +    -1.17059017641066 * H2x1_5  +     0.08630071934474 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.91981096223784 * H2x1_1 + 2.50981387206546 * H2x1_2 +
1.52848474440169 * H2x1_3 + -1.77653121606781 * H2x1_4 + -1.17059017641066 * H2x1_5 +
0.08630071934474 * H2x1_6 ;
1747788   +   H3x1_5  =    -0.90689901549977 * H2x1_1  +    -0.28920884601352 * H2x1_2
1747789   +          +     0.19367561691053 * H2x1_3  +    -1.64382922054024 * H2x1_4
1747790   +          +    -1.27645531071461 * H2x1_5  +     2.78368081292476 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.90689901549977 * H2x1_1 + -0.28920884601352 * H2x1_2 +
0.19367561691053 * H2x1_3 + -1.64382922054024 * H2x1_4 + -1.27645531071461 * H2x1_5 +
2.78368081292476 * H2x1_6 ;
1747791   +   H3x1_6  =     1.79097710546589 * H2x1_1  +     0.62195006841522 * H2x1_2
1747792   +          +     0.38238495192417 * H2x1_3  +     0.38117337455775 * H2x1_4
1747793   +          +     0.31232345193628 * H2x1_5  +     1.64288571863932 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = 1.79097710546589 * H2x1_1 + 0.62195006841522 * H2x1_2 +
0.38238495192417 * H2x1_3 + 0.38117337455775 * H2x1_4 + 0.31232345193628 * H2x1_5 +
1.64288571863932 * H2x1_6 ;
1747794   +   H3x1_1  = H3x1_1  +    -0.29610176935088 * H2x2_1
1747795   +          +    -0.05687019870114 * H2x2_2  +     0.19276816813006 * H2x2_3
1747796   +          +    -0.02919428123272 * H2x2_4  +     -0.1225189756077 * H2x2_5
1747797   +          +     0.35216486042215 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -0.29610176935088 * H2x2_1 + -0.05687019870114 *
H2x2_2 + 0.19276816813006 * H2x2_3 + -0.02919428123272 * H2x2_4 + -0.1225189756077 * H2x2_5 +
0.35216486042215 * H2x2_6 ;
1747798   +   H3x1_2  = H3x1_2  +    -0.65560935360323 * H2x2_1
1747799   +          +     1.14492037534385 * H2x2_2  +    -0.73840836071645 * H2x2_3
1747800   +          +      1.3947576688638 * H2x2_4  +    -0.01317619212955 * H2x2_5
1747801   +          +    -0.91648595761636 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + -0.65560935360323 * H2x2_1 + 1.14492037534385 * H2x2_2
+ -0.73840836071645 * H2x2_3 + 1.3947576688638 * H2x2_4 + -0.01317619212955 * H2x2_5 +
-0.91648595761636 * H2x2_6 ;
1747802   +   H3x1_3  = H3x1_3  +    -0.53127332055291 * H2x2_1
1747803   +          +     0.36262088215518 * H2x2_2  +     2.77585954813321 * H2x2_3
1747804   +          +     1.38261906942485 * H2x2_4  +    -0.22635906489825 * H2x2_5
1747805   +          +    -2.11281855575499 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.53127332055291 * H2x2_1 + 0.36262088215518 * H2x2_2
+ 2.77585954813321 * H2x2_3 + 1.38261906942485 * H2x2_4 + -0.22635906489825 * H2x2_5 +
-2.11281855575499 * H2x2_6 ;
1747806   +   H3x1_4  = H3x1_4  +     0.10255243516649 * H2x2_1
1747807   +          +    -0.19237607982949 * H2x2_2  +    -0.39440266749795 * H2x2_3
1747808   +          +     0.62091379272854 * H2x2_4  +    -0.71121773171613 * H2x2_5
1747809   +          +     0.57305821692201 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.10255243516649 * H2x2_1 + -0.19237607982949 * H2x2_2
+ -0.39440266749795 * H2x2_3 + 0.62091379272854 * H2x2_4 + -0.71121773171613 * H2x2_5 +
0.57305821692201 * H2x2_6 ;
1747810   +   H3x1_5  = H3x1_5  +     1.38760232745985 * H2x2_1
1747811   +          +    -0.67366859881604 * H2x2_2  +     0.73667853659073 * H2x2_3
1747812   +          +     0.48338791573814 * H2x2_4  +    -1.86204960161547 * H2x2_5
1747813   +          +     2.06401699674057 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 1.38760232745985 * H2x2_1 + -0.67366859881604 * H2x2_2
+ 0.73667853659073 * H2x2_3 + 0.48338791573814 * H2x2_4 + -1.86204960161547 * H2x2_5 +
2.06401699674057 * H2x2_6 ;
1747814   +   H3x1_6  = H3x1_6  +     1.58403061991045 * H2x2_1
1747815   +          +    -1.98415138001436 * H2x2_2  +    -2.65270828558486 * H2x2_3
1747816   +          +     0.24663962279095 * H2x2_4  +    -0.13610124747178 * H2x2_5
1747817   +          +     0.08850124295188 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 + 1.58403061991045 * H2x2_1 + -1.98415138001436 * H2x2_2
+ -2.65270828558486 * H2x2_3 + 0.24663962279095 * H2x2_4 + -0.13610124747178 * H2x2_5 +
0.08850124295188 * H2x2_6 ;
1747818   +   H3x1_1  =    -0.38359896864958 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.38359896864958 + H3x1_1 ;
1747819   +   H3x1_2  =     0.71155840570573 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.71155840570573 + H3x1_2 ;
1747820   +   H3x1_3  =     0.51799749231142 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 0.51799749231142 + H3x1_3 ;
1747821   +   H3x1_4  =     0.67952932286733 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.67952932286733 + H3x1_4 ;
1747822   +   H3x1_5  =    -0.81394067979603 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.81394067979603 + H3x1_5 ;
1747823   +   H3x1_6  =    -0.01596290366203 + H3x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = -0.01596290366203 + H3x1_6 ;
1747824   +   H3x1_1  = SIN(H3x1_1 );
MPRINT(EM_DIAGRAM):   H3x1_1 = SIN(H3x1_1 );
1747825   +   H3x1_2  = SIN(H3x1_2 );
MPRINT(EM_DIAGRAM):   H3x1_2 = SIN(H3x1_2 );
1747826   +   H3x1_3  = SIN(H3x1_3 );
MPRINT(EM_DIAGRAM):   H3x1_3 = SIN(H3x1_3 );
1747827   +   H3x1_4  = SIN(H3x1_4 );
MPRINT(EM_DIAGRAM):   H3x1_4 = SIN(H3x1_4 );
1747828   +   H3x1_5  = SIN(H3x1_5 );
MPRINT(EM_DIAGRAM):   H3x1_5 = SIN(H3x1_5 );
1747829   +   H3x1_6  = SIN(H3x1_6 );
MPRINT(EM_DIAGRAM):   H3x1_6 = SIN(H3x1_6 );
1747830   +END;
MPRINT(EM_DIAGRAM):   END;
1747831   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747832   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1747833   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1747834   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1747835   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1747836   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1747837   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1747838   +END;
MPRINT(EM_DIAGRAM):   END;
1747839   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747840   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1747841   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747842   +
1747843   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1747844   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1747845   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1747846   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1747847   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1747848   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1747849   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1747850   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1747851   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1747852   +end;
MPRINT(EM_DIAGRAM):   end;
1747853   +else do;
MPRINT(EM_DIAGRAM):   else do;
1747854   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1747855   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1747856   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1747857   +   end;
MPRINT(EM_DIAGRAM):   end;
1747858   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1747859   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1747860   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1747861   +   end;
MPRINT(EM_DIAGRAM):   end;
1747862   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1747863   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1747864   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1747865   +   end;
MPRINT(EM_DIAGRAM):   end;
1747866   +end;
MPRINT(EM_DIAGRAM):   end;
1747867   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1747868   +   P_DepVar1  =     0.28094469007064 * H3x1_1  +     4.40543517205109 * H3x1_2
1747869   +          +     4.58780022403482 * H3x1_3  +    -1.49344393871597 * H3x1_4
1747870   +          +     3.15120047821915 * H3x1_5  +    -1.83744247169269 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.28094469007064 * H3x1_1 + 4.40543517205109 * H3x1_2 +
4.58780022403482 * H3x1_3 + -1.49344393871597 * H3x1_4 + 3.15120047821915 * H3x1_5 +
-1.83744247169269 * H3x1_6 ;
1747871   +   P_DepVar1  =     -2.1680951408523 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.1680951408523 + P_DepVar1 ;
1747872   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1747873   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1747874   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1747875   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1747876   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1747877   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1747878   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1747879   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1747880   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1747881   +END;
MPRINT(EM_DIAGRAM):   END;
1747882   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1747883   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1747884   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1747885   +END;
MPRINT(EM_DIAGRAM):   END;
1747886   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1747887   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1747888   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1747889   +END;
MPRINT(EM_DIAGRAM):   END;
1747890   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1747891   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1747892   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1747893   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1747894   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1747895   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1747896   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1747897   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747898   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1747899   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1747900   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1747901   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1747902   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1747903   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1747904   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1747905   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1747906   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1747907   +END;
MPRINT(EM_DIAGRAM):   END;
1747908   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1747909   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1747910   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1747911   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1747912   +* Renaming variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural28;
1747913   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747914   +* Renaming Posterior variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural28;
1747915   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747916   +drop AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar1;
1747917   +AutoNeural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar1 = P_DepVar1;
1747918   +drop AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar0;
1747919   +AutoNeural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar0 = P_DepVar0;
1747920   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747921   +* Renaming _WARN_ variable for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural28;
1747922   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747923   +length AutoNeural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural28_WARN_ $4;
1747924   +drop AutoNeural28_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_WARN_;
1747925   +AutoNeural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural28_WARN_ = _WARN_;
1747926   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747927   +* Ensmbl8: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Average Posteriors of 3 models;
1747928   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747929   +P_DepVar1 = (
1747930   +Neural28_P_DepVar1 +
1747931   +AutoNeural33_P_DepVar1 +
1747932   +AutoNeural28_P_DepVar1
1747933   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural28_P_DepVar1 + AutoNeural33_P_DepVar1 +
AutoNeural28_P_DepVar1 )/3;
1747934   +P_DepVar0 = (
1747935   +Neural28_P_DepVar0 +
1747936   +AutoNeural33_P_DepVar0 +
1747937   +AutoNeural28_P_DepVar0
1747938   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural28_P_DepVar0 + AutoNeural33_P_DepVar0 +
AutoNeural28_P_DepVar0 )/3;
1747939   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747940   +* Ensmbl8: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing Classification Vars;
1747941   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747942   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
1747943   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
1747944   +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
1747945   +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
1747946   +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
1747947   +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
1747948   +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
1747949   +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
1747950   +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
1747951   +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
1747952   +end;
MPRINT(EM_DIAGRAM):   end;
1747953   +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
1747954   +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
1747955   +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
1747956   +end;
MPRINT(EM_DIAGRAM):   end;
1747957   +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1747958   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747959   +* Ensmbl8: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Producing Unformatted variable;
1747960   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747961   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
1747962   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
1747963   +else
1747964   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
1747965   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747966   +* Ensmbl8: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing _WARN_ Variable;
1747967   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747968   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1747969   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
1747970   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
1747971   +if index(NEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
1747971  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1747972   +if index(NEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
1747972  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1747973   +if index(NEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
1747973  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1747974   +if index(NEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
1747974  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1747975   +if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1747975  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1747976   +if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1747976  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1747977   +if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1747977  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1747978   +if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1747978  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1747979   +if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1747979  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1747980   +if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1747980  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1747981   +if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1747981  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1747982   +if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1747982  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1747983   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747984   +* Ensmbl8: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing Residual Vars;
1747985   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1747986   +if
1747987   +F_DepVar NE '1'
1747988   +AND F_DepVar NE '0'
1747989   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
1747990   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1747991   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1747992   +end;
MPRINT(EM_DIAGRAM):   end;
1747993   +else do;
MPRINT(EM_DIAGRAM):   else do;
1747994   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1747995   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1747996   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1747997   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
1747998   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
1747999   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1748000   +END;
MPRINT(EM_DIAGRAM):   END;
1748001   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1748002    run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL8_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1748003    quit;
1748004    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1748005    filename emflow
1748005  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring NEURAL28_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748006    *------------------------------------------------------------*;
1748007    * Ensmbl8: Scoring NEURAL28_VALIDATE data;
1748008    *------------------------------------------------------------*;
1748009    data EMWS8.Ensmbl8_VALIDATE
1748010    / view=EMWS8.Ensmbl8_VALIDATE
1748011    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_VALIDATE / view=EMWS8.Ensmbl8_VALIDATE ;
1748012    set EMWS8.Neural28_VALIDATE
1748013    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_VALIDATE ;
1748014    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMFLOWSCORE.sas.
1748015   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748016   +* Ensmbl8: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Combine model for DepVar;
1748017   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748018   +* Ensmbl8: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 1 of 3;
1748019   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748020   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748021   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
1748022   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1748023   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
1748024   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748025   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748026   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
1748027   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1748028   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
1748029   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748030   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748031   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
1748032   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1748033   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
1748034   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748035   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748036   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
1748037   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
1748038   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
1748039   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748040   +
1748041   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1748042   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1748042  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1748043   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1748044   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1748045   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1748046   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1748047   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
1748048   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748049   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
1748050   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1748051   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
1748052   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748053   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748054   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1748055   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748056   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1748057   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1748058   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
1748059   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748060   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
1748061   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1748062   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
1748063   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748064   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748065   +* TOOL: Variable selection Class;
MPRINT(EM_DIAGRAM):   * TOOL: Variable selection Class;
1748066   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1748067   +* NODE: Varsel;
MPRINT(EM_DIAGRAM):   * NODE: Varsel;
1748068   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748069   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1748070   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1748071   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1748072   +
1748073   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1748074   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1748075   +
1748076   +
1748077   +
1748078   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1748079   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1748080   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1748081   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748082   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
1748083   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1748084   +* NODE: Neural28;
MPRINT(EM_DIAGRAM):   * NODE: Neural28;
1748085   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748086   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748087   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1748088   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748089   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1748090   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1748091   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1748092   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1748093   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1748094   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1748095   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1748096   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1748097   +LENGTH _WARN_ $4
1748098   +      F_DepVar  $ 12
1748099   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1748100   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1748101   +
1748102   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1748103   +
1748104   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1748105   +
1748106   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1748107   +
1748108   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1748109   +
1748110   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1748111   +
1748112   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1748113   +
1748114   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1748115   +
1748116   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1748117   +
1748118   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1748119   +
1748120   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
1748121   +
1748122   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
1748123   +
1748124   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1748125   +
1748126   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1748127   +
1748128   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1748129   +
1748130   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1748131   +
1748132   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1748133   +
1748134   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1748135   +
1748136   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1748137   +
1748138   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1748139   +
1748140   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748141   +*** Checking missing input Interval
1748142   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1748143   +
1748144   +IF NMISS(
1748145   +   AcceptedCmpTotal ,
1748146   +   Mnt ,
1748147   +   MntMeatProducts ,
1748148   +   NumCatalogPurchases ,
1748149   +   RFMstat ,
1748150   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1748151   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1748152   +
1748153   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1748154   +END;
MPRINT(EM_DIAGRAM):   END;
1748155   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748156   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1748157   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748158   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748159   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748160   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748161   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748162   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748163   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748164   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1748165   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748166   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748167   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748168   +END;
MPRINT(EM_DIAGRAM):   END;
1748169   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748170   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1748171   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748172   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748173   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1748174   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748175   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1748176   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748177   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748178   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1748179   +   ELSE S_NumCatalogPurchases
1748180   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1748181   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748182   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1748183   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748184   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1748185   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748186   +END;
MPRINT(EM_DIAGRAM):   END;
1748187   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748188   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1748189   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748190   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748191   +   H11  =     -0.1481294920829 * S_AcceptedCmpTotal  +    -0.31967651937983 *
1748192   +        S_Mnt  +    -0.25501160560688 * S_MntMeatProducts
1748193   +          +    -0.26541354265094 * S_NumCatalogPurchases
1748194   +          +    -0.05107291503479 * S_RFMstat  +     0.26055761102982 *
1748195   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.1481294920829 * S_AcceptedCmpTotal + -0.31967651937983 * S_Mnt
+ -0.25501160560688 * S_MntMeatProducts + -0.26541354265094 * S_NumCatalogPurchases +
-0.05107291503479 * S_RFMstat + 0.26055761102982 * S_Recency ;
1748196   +   H12  =    -0.53585265877367 * S_AcceptedCmpTotal  +    -0.63949625372724 *
1748197   +        S_Mnt  +    -0.71298935461349 * S_MntMeatProducts
1748198   +          +     0.26625422734047 * S_NumCatalogPurchases
1748199   +          +     0.04789590805202 * S_RFMstat  +     -0.2457029388315 *
1748200   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.53585265877367 * S_AcceptedCmpTotal + -0.63949625372724 * S_Mnt
+ -0.71298935461349 * S_MntMeatProducts + 0.26625422734047 * S_NumCatalogPurchases +
0.04789590805202 * S_RFMstat + -0.2457029388315 * S_Recency ;
1748201   +   H13  =     0.36156584602692 * S_AcceptedCmpTotal  +    -3.37453529906718 *
1748202   +        S_Mnt  +     1.02675869236561 * S_MntMeatProducts
1748203   +          +     0.00910121928187 * S_NumCatalogPurchases
1748204   +          +     0.20581491047897 * S_RFMstat  +    -0.18898725892086 *
1748205   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.36156584602692 * S_AcceptedCmpTotal + -3.37453529906718 * S_Mnt
+ 1.02675869236561 * S_MntMeatProducts + 0.00910121928187 * S_NumCatalogPurchases +
0.20581491047897 * S_RFMstat + -0.18898725892086 * S_Recency ;
1748206   +   H14  =    -0.14179052521941 * S_AcceptedCmpTotal  +     0.30769772196415 *
1748207   +        S_Mnt  +     0.17433696286114 * S_MntMeatProducts
1748208   +          +     0.12575078713396 * S_NumCatalogPurchases
1748209   +          +    -0.02826822167447 * S_RFMstat  +     0.28366844846854 *
1748210   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -0.14179052521941 * S_AcceptedCmpTotal + 0.30769772196415 * S_Mnt
+ 0.17433696286114 * S_MntMeatProducts + 0.12575078713396 * S_NumCatalogPurchases +
-0.02826822167447 * S_RFMstat + 0.28366844846854 * S_Recency ;
1748211   +   H15  =      0.0992610666113 * S_AcceptedCmpTotal  +    -0.08290546162861 *
1748212   +        S_Mnt  +     2.79374557573421 * S_MntMeatProducts
1748213   +          +     0.34145061374457 * S_NumCatalogPurchases
1748214   +          +     1.24642569428903 * S_RFMstat  +    -0.05791964822006 *
1748215   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.0992610666113 * S_AcceptedCmpTotal + -0.08290546162861 * S_Mnt +
2.79374557573421 * S_MntMeatProducts + 0.34145061374457 * S_NumCatalogPurchases +
1.24642569428903 * S_RFMstat + -0.05791964822006 * S_Recency ;
1748216   +   H16  =    -0.70732539360309 * S_AcceptedCmpTotal  +    -6.01133749430879 *
1748217   +        S_Mnt  +      2.7772635267037 * S_MntMeatProducts
1748218   +          +     3.89195901397454 * S_NumCatalogPurchases
1748219   +          +     -2.3989156332421 * S_RFMstat  +    -0.49366295107927 *
1748220   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.70732539360309 * S_AcceptedCmpTotal + -6.01133749430879 * S_Mnt
+ 2.7772635267037 * S_MntMeatProducts + 3.89195901397454 * S_NumCatalogPurchases +
-2.3989156332421 * S_RFMstat + -0.49366295107927 * S_Recency ;
1748221   +   H11  =     1.84373127923043 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.84373127923043 + H11 ;
1748222   +   H12  =     0.28145390491001 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.28145390491001 + H12 ;
1748223   +   H13  =    -2.13618632038915 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.13618632038915 + H13 ;
1748224   +   H14  =    -0.43724663060956 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.43724663060956 + H14 ;
1748225   +   H15  =     2.87870499074164 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 2.87870499074164 + H15 ;
1748226   +   H16  =    -1.50303768685501 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.50303768685501 + H16 ;
1748227   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1748228   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1748229   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1748230   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1748231   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
1748232   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
1748233   +END;
MPRINT(EM_DIAGRAM):   END;
1748234   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748235   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1748236   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1748237   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1748238   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1748239   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
1748240   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
1748241   +END;
MPRINT(EM_DIAGRAM):   END;
1748242   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748243   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1748244   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748245   +
1748246   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1748247   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1748248   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1748249   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1748250   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1748251   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1748252   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1748253   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1748254   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1748255   +end;
MPRINT(EM_DIAGRAM):   end;
1748256   +else do;
MPRINT(EM_DIAGRAM):   else do;
1748257   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1748258   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1748259   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1748260   +   end;
MPRINT(EM_DIAGRAM):   end;
1748261   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1748262   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1748263   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1748264   +   end;
MPRINT(EM_DIAGRAM):   end;
1748265   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1748266   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1748267   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1748268   +   end;
MPRINT(EM_DIAGRAM):   end;
1748269   +end;
MPRINT(EM_DIAGRAM):   end;
1748270   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748271   +   P_DepVar1  =    -5.40879672831374 * H11  +    -2.30275649942132 * H12
1748272   +          +     3.92987383270932 * H13  +    -5.94814919610295 * H14
1748273   +          +      8.1691029468057 * H15  +     1.41618936614917 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.40879672831374 * H11 + -2.30275649942132 * H12 +
3.92987383270932 * H13 + -5.94814919610295 * H14 + 8.1691029468057 * H15 + 1.41618936614917 *
H16 ;
1748274   +   P_DepVar1  =    -3.18163491507868 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.18163491507868 + P_DepVar1 ;
1748275   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1748276   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1748277   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748278   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1748279   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1748280   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1748281   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1748282   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1748283   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1748284   +END;
MPRINT(EM_DIAGRAM):   END;
1748285   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748286   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1748287   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1748288   +END;
MPRINT(EM_DIAGRAM):   END;
1748289   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1748290   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1748291   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1748292   +END;
MPRINT(EM_DIAGRAM):   END;
1748293   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1748294   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1748295   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1748296   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1748297   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1748298   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1748299   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1748300   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748301   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1748302   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748303   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1748304   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1748305   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1748306   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1748307   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1748308   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1748309   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1748310   +END;
MPRINT(EM_DIAGRAM):   END;
1748311   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1748312   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1748313   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1748314   +drop
1748315   +H11
1748316   +H12
1748317   +H13
1748318   +H14
1748319   +H15
1748320   +H16
1748321   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
1748322   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1748323   +* Renaming variables for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural28;
1748324   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748325   +* Renaming Posterior variables for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural28;
1748326   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748327   +drop Neural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural28_P_DepVar1;
1748328   +Neural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural28_P_DepVar1 = P_DepVar1;
1748329   +drop Neural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural28_P_DepVar0;
1748330   +Neural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural28_P_DepVar0 = P_DepVar0;
1748331   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748332   +* Renaming _WARN_ variable for Neural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural28;
1748333   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748334   +length Neural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural28_WARN_ $4;
1748335   +drop Neural28_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural28_WARN_;
1748336   +Neural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural28_WARN_ = _WARN_;
1748337   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748338   +* Ensmbl8: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 2 of 3;
1748339   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748340   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748341   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1748342   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1748343   +* NODE: AutoNeural33;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural33;
1748344   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748345   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748346   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1748347   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748348   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1748349   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1748350   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1748351   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1748352   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1748353   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1748354   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1748355   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1748356   +LENGTH _WARN_ $4
1748357   +      F_DepVar  $ 12
1748358   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1748359   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1748360   +
1748361   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1748362   +
1748363   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1748364   +
1748365   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1748366   +
1748367   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1748368   +
1748369   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1748370   +
1748371   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1748372   +
1748373   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1748374   +
1748375   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1748376   +
1748377   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1748378   +
1748379   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1748380   +
1748381   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1748382   +
1748383   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1748384   +
1748385   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1748386   +
1748387   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1748388   +
1748389   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1748390   +
1748391   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1748392   +
1748393   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1748394   +
1748395   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748396   +*** Checking missing input Interval
1748397   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1748398   +
1748399   +IF NMISS(
1748400   +   AcceptedCmpTotal ,
1748401   +   Mnt ,
1748402   +   MntMeatProducts ,
1748403   +   NumCatalogPurchases ,
1748404   +   RFMstat ,
1748405   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1748406   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1748407   +
1748408   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1748409   +END;
MPRINT(EM_DIAGRAM):   END;
1748410   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748411   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1748412   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748413   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748414   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748415   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748416   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748417   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748418   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748419   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1748420   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748421   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748422   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748423   +END;
MPRINT(EM_DIAGRAM):   END;
1748424   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748425   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1748426   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748427   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748428   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1748429   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748430   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1748431   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748432   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748433   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1748434   +   ELSE S_NumCatalogPurchases
1748435   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1748436   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748437   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1748438   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748439   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1748440   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748441   +END;
MPRINT(EM_DIAGRAM):   END;
1748442   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748443   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1748444   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748445   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748446   +   H1x1_1  =     0.21234921669572 * S_AcceptedCmpTotal
1748447   +          +     0.01945817648377 * S_Mnt  +     0.10373621819131 *
1748448   +        S_MntMeatProducts  +     0.14724080002257 * S_NumCatalogPurchases
1748449   +          +     0.01465421656969 * S_RFMstat  +    -0.37839603073195 *
1748450   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.21234921669572 * S_AcceptedCmpTotal + 0.01945817648377 *
S_Mnt + 0.10373621819131 * S_MntMeatProducts + 0.14724080002257 * S_NumCatalogPurchases +
0.01465421656969 * S_RFMstat + -0.37839603073195 * S_Recency ;
1748451   +   H1x1_2  =      1.6456490248475 * S_AcceptedCmpTotal
1748452   +          +    -4.36126689821345 * S_Mnt  +    -5.34341350667797 *
1748453   +        S_MntMeatProducts  +    -0.50775340376834 * S_NumCatalogPurchases
1748454   +          +    -3.77547933008523 * S_RFMstat  +    -0.35687395481612 *
1748455   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.6456490248475 * S_AcceptedCmpTotal + -4.36126689821345 *
S_Mnt + -5.34341350667797 * S_MntMeatProducts + -0.50775340376834 * S_NumCatalogPurchases +
-3.77547933008523 * S_RFMstat + -0.35687395481612 * S_Recency ;
1748456   +   H1x1_3  =     2.25495773414966 * S_AcceptedCmpTotal
1748457   +          +     -11.006968240108 * S_Mnt  +     5.29014268166876 *
1748458   +        S_MntMeatProducts  +     1.38527755695319 * S_NumCatalogPurchases
1748459   +          +    -0.25229120510632 * S_RFMstat  +    -0.96545690161812 *
1748460   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 2.25495773414966 * S_AcceptedCmpTotal + -11.006968240108 *
S_Mnt + 5.29014268166876 * S_MntMeatProducts + 1.38527755695319 * S_NumCatalogPurchases +
-0.25229120510632 * S_RFMstat + -0.96545690161812 * S_Recency ;
1748461   +   H1x1_1  =    -1.44629643725438 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.44629643725438 + H1x1_1 ;
1748462   +   H1x1_2  =    -8.96045510766511 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -8.96045510766511 + H1x1_2 ;
1748463   +   H1x1_3  =    -3.43663513496723 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.43663513496723 + H1x1_3 ;
1748464   +   H1x1_4  = 0;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0;
1748465   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
1748466   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748467   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1748468   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1748469   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1748470   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1748471   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1748472   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1748473   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1748474   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1748475   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1748476   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1748477   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1748478   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1748479   +END;
MPRINT(EM_DIAGRAM):   END;
1748480   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748481   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1748482   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1748483   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1748484   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1748485   +END;
MPRINT(EM_DIAGRAM):   END;
1748486   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748487   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1748488   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748489   +
1748490   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1748491   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1748492   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1748493   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1748494   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1748495   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1748496   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1748497   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1748498   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1748499   +end;
MPRINT(EM_DIAGRAM):   end;
1748500   +else do;
MPRINT(EM_DIAGRAM):   else do;
1748501   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1748502   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1748503   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1748504   +   end;
MPRINT(EM_DIAGRAM):   end;
1748505   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1748506   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1748507   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1748508   +   end;
MPRINT(EM_DIAGRAM):   end;
1748509   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1748510   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1748511   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1748512   +   end;
MPRINT(EM_DIAGRAM):   end;
1748513   +end;
MPRINT(EM_DIAGRAM):   end;
1748514   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748515   +   P_DepVar1  =     15.9155817268417 * H1x1_1  +    -26.1877719603903 * H1x1_2
1748516   +          +     3.03900855168824 * H1x1_3  +    -8.12584282800012 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 15.9155817268417 * H1x1_1 + -26.1877719603903 * H1x1_2 +
3.03900855168824 * H1x1_3 + -8.12584282800012 * H1x1_4 ;
1748517   +   P_DepVar1  =    -0.43873072735423 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.43873072735423 + P_DepVar1 ;
1748518   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1748519   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1748520   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748521   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1748522   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1748523   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1748524   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1748525   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1748526   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1748527   +END;
MPRINT(EM_DIAGRAM):   END;
1748528   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748529   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1748530   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1748531   +END;
MPRINT(EM_DIAGRAM):   END;
1748532   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1748533   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1748534   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1748535   +END;
MPRINT(EM_DIAGRAM):   END;
1748536   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1748537   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1748538   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1748539   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1748540   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1748541   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1748542   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1748543   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748544   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1748545   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748546   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1748547   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1748548   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1748549   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1748550   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1748551   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1748552   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1748553   +END;
MPRINT(EM_DIAGRAM):   END;
1748554   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1748555   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1748556   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1748557   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1748558   +* Renaming variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural33;
1748559   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748560   +* Renaming Posterior variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural33;
1748561   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748562   +drop AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar1;
1748563   +AutoNeural33_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar1 = P_DepVar1;
1748564   +drop AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar0;
1748565   +AutoNeural33_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar0 = P_DepVar0;
1748566   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748567   +* Renaming _WARN_ variable for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural33;
1748568   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748569   +length AutoNeural33_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural33_WARN_ $4;
1748570   +drop AutoNeural33_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_WARN_;
1748571   +AutoNeural33_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural33_WARN_ = _WARN_;
1748572   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748573   +* Ensmbl8: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Scoring Code of model 3 of 3;
1748574   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748575   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748576   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1748577   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1748578   +* NODE: AutoNeural28;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural28;
1748579   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1748580   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748581   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1748582   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1748583   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1748584   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1748585   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1748586   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1748587   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1748588   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1748589   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1748590   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1748591   +LENGTH _WARN_ $4
1748592   +      F_DepVar  $ 12
1748593   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1748594   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1748595   +
1748596   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1748597   +
1748598   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1748599   +
1748600   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1748601   +
1748602   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1748603   +
1748604   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1748605   +
1748606   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1748607   +
1748608   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1748609   +
1748610   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1748611   +
1748612   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1748613   +
1748614   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1748615   +
1748616   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1748617   +
1748618   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1748619   +
1748620   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1748621   +
1748622   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1748623   +
1748624   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1748625   +
1748626   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1748627   +
1748628   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1748629   +
1748630   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1748631   +
1748632   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1748633   +
1748634   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1748635   +
1748636   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1748637   +
1748638   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1748639   +
1748640   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1748641   +
1748642   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1748643   +
1748644   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1748645   +
1748646   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1748647   +
1748648   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1748649   +
1748650   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1748651   +
1748652   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1748653   +
1748654   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1748655   +
1748656   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1748657   +
1748658   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1748659   +
1748660   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1748661   +
1748662   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1748663   +
1748664   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1748665   +
1748666   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1748667   +
1748668   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1748669   +
1748670   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1748671   +
1748672   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1748673   +
1748674   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1748675   +
1748676   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1748677   +
1748678   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1748679   +
1748680   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1748681   +
1748682   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1748683   +
1748684   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1748685   +
1748686   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1748687   +
1748688   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1748689   +
1748690   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1748691   +
1748692   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1748693   +
1748694   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748695   +*** Checking missing input Interval
1748696   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1748697   +
1748698   +IF NMISS(
1748699   +   AcceptedCmpTotal ,
1748700   +   Mnt ,
1748701   +   MntMeatProducts ,
1748702   +   NumCatalogPurchases ,
1748703   +   RFMstat ,
1748704   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1748705   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1748706   +
1748707   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1748708   +END;
MPRINT(EM_DIAGRAM):   END;
1748709   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748710   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1748711   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748712   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748713   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748714   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748715   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748716   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748717   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748718   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1748719   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748720   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748721   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748722   +END;
MPRINT(EM_DIAGRAM):   END;
1748723   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748724   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1748725   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1748726   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1748727   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1748728   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1748729   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1748730   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1748731   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1748732   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1748733   +   ELSE S_NumCatalogPurchases
1748734   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1748735   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1748736   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1748737   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1748738   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1748739   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1748740   +END;
MPRINT(EM_DIAGRAM):   END;
1748741   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748742   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1748743   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748744   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748745   +   H1x1_1  =     2.10717134491045 * S_AcceptedCmpTotal
1748746   +          +    -10.9799187882689 * S_Mnt  +     3.17619086363109 *
1748747   +        S_MntMeatProducts  +     0.58522050540174 * S_NumCatalogPurchases
1748748   +          +     0.10457500953086 * S_RFMstat  +    -0.59708195840656 *
1748749   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 2.10717134491045 * S_AcceptedCmpTotal + -10.9799187882689 *
S_Mnt + 3.17619086363109 * S_MntMeatProducts + 0.58522050540174 * S_NumCatalogPurchases +
0.10457500953086 * S_RFMstat + -0.59708195840656 * S_Recency ;
1748750   +   H1x1_2  =    -1.09600222674288 * S_AcceptedCmpTotal
1748751   +          +    -2.75188573882189 * S_Mnt  +     2.38829776780629 *
1748752   +        S_MntMeatProducts  +     2.37290115499231 * S_NumCatalogPurchases
1748753   +          +    -1.67864747205449 * S_RFMstat  +    -1.87700204299542 *
1748754   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.09600222674288 * S_AcceptedCmpTotal + -2.75188573882189 *
S_Mnt + 2.38829776780629 * S_MntMeatProducts + 2.37290115499231 * S_NumCatalogPurchases +
-1.67864747205449 * S_RFMstat + -1.87700204299542 * S_Recency ;
1748755   +   H1x1_3  =     0.24593136036671 * S_AcceptedCmpTotal
1748756   +          +     0.98275447305236 * S_Mnt  +     1.52686649163215 *
1748757   +        S_MntMeatProducts  +     1.08491172792697 * S_NumCatalogPurchases
1748758   +          +    -6.31220731697864 * S_RFMstat  +    -2.08472878456829 *
1748759   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.24593136036671 * S_AcceptedCmpTotal + 0.98275447305236 *
S_Mnt + 1.52686649163215 * S_MntMeatProducts + 1.08491172792697 * S_NumCatalogPurchases +
-6.31220731697864 * S_RFMstat + -2.08472878456829 * S_Recency ;
1748760   +   H1x1_4  =     1.35296744918554 * S_AcceptedCmpTotal
1748761   +          +    -3.58727753695297 * S_Mnt  +    -6.35187991517409 *
1748762   +        S_MntMeatProducts  +    -1.41725838894141 * S_NumCatalogPurchases
1748763   +          +     -2.5174617752956 * S_RFMstat  +     0.27284317719271 *
1748764   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.35296744918554 * S_AcceptedCmpTotal + -3.58727753695297 *
S_Mnt + -6.35187991517409 * S_MntMeatProducts + -1.41725838894141 * S_NumCatalogPurchases +
-2.5174617752956 * S_RFMstat + 0.27284317719271 * S_Recency ;
1748765   +   H1x1_5  =     1.41560412529603 * S_AcceptedCmpTotal
1748766   +          +     2.25142479190183 * S_Mnt  +      0.2775616702254 *
1748767   +        S_MntMeatProducts  +     -0.4118907005017 * S_NumCatalogPurchases
1748768   +          +     0.38803464834347 * S_RFMstat  +    -0.81750268679565 *
1748769   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.41560412529603 * S_AcceptedCmpTotal + 2.25142479190183 *
S_Mnt + 0.2775616702254 * S_MntMeatProducts + -0.4118907005017 * S_NumCatalogPurchases +
0.38803464834347 * S_RFMstat + -0.81750268679565 * S_Recency ;
1748770   +   H1x1_1  =    -1.94381314805925 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.94381314805925 + H1x1_1 ;
1748771   +   H1x1_2  =     -1.4831757685406 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.4831757685406 + H1x1_2 ;
1748772   +   H1x1_3  =    -0.53539803191548 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.53539803191548 + H1x1_3 ;
1748773   +   H1x1_4  =    -5.07257058520645 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -5.07257058520645 + H1x1_4 ;
1748774   +   H1x1_5  =    -3.95581011117601 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.95581011117601 + H1x1_5 ;
1748775   +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
1748776   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
1748777   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748778   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1748779   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1748780   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1748781   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1748782   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1748783   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1748784   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1748785   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1748786   +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
1748787   +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
1748788   +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
1748789   +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
1748790   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1748791   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1748792   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1748793   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1748794   +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
1748795   +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
1748796   +END;
MPRINT(EM_DIAGRAM):   END;
1748797   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748798   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1748799   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1748800   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1748801   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1748802   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1748803   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1748804   +END;
MPRINT(EM_DIAGRAM):   END;
1748805   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748806   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1748807   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748808   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748809   +   H1x2_1  =    -1.55686119998165 * S_AcceptedCmpTotal
1748810   +          +    -0.26111571781978 * S_Mnt  +    -1.44938218805988 *
1748811   +        S_MntMeatProducts  +     0.04086123541942 * S_NumCatalogPurchases
1748812   +          +    -0.80214702507913 * S_RFMstat  +     0.70413979175849 *
1748813   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.55686119998165 * S_AcceptedCmpTotal + -0.26111571781978 *
S_Mnt + -1.44938218805988 * S_MntMeatProducts + 0.04086123541942 * S_NumCatalogPurchases +
-0.80214702507913 * S_RFMstat + 0.70413979175849 * S_Recency ;
1748814   +   H1x2_2  =    -1.89013114756444 * S_AcceptedCmpTotal
1748815   +          +     2.02645277032883 * S_Mnt  +     0.33300450318575 *
1748816   +        S_MntMeatProducts  +    -3.49523435320164 * S_NumCatalogPurchases
1748817   +          +    -0.54366042810185 * S_RFMstat  +    -0.96821243793862 *
1748818   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -1.89013114756444 * S_AcceptedCmpTotal + 2.02645277032883 *
S_Mnt + 0.33300450318575 * S_MntMeatProducts + -3.49523435320164 * S_NumCatalogPurchases +
-0.54366042810185 * S_RFMstat + -0.96821243793862 * S_Recency ;
1748819   +   H1x2_3  =    -0.37493223935971 * S_AcceptedCmpTotal
1748820   +          +     0.44222577344261 * S_Mnt  +    -2.29203252552751 *
1748821   +        S_MntMeatProducts  +    -2.51799836083289 * S_NumCatalogPurchases
1748822   +          +     0.79676408136588 * S_RFMstat  +    -1.33777715205059 *
1748823   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.37493223935971 * S_AcceptedCmpTotal + 0.44222577344261 *
S_Mnt + -2.29203252552751 * S_MntMeatProducts + -2.51799836083289 * S_NumCatalogPurchases +
0.79676408136588 * S_RFMstat + -1.33777715205059 * S_Recency ;
1748824   +   H1x2_4  =     0.61023216239118 * S_AcceptedCmpTotal
1748825   +          +     -1.2504451910923 * S_Mnt  +     1.08805550572067 *
1748826   +        S_MntMeatProducts  +     0.42462128634087 * S_NumCatalogPurchases
1748827   +          +     0.47301106041065 * S_RFMstat  +    -2.61753144043135 *
1748828   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.61023216239118 * S_AcceptedCmpTotal + -1.2504451910923 *
S_Mnt + 1.08805550572067 * S_MntMeatProducts + 0.42462128634087 * S_NumCatalogPurchases +
0.47301106041065 * S_RFMstat + -2.61753144043135 * S_Recency ;
1748829   +   H1x2_5  =    -1.41618915627784 * S_AcceptedCmpTotal
1748830   +          +    -1.13785141950187 * S_Mnt  +    -1.73667107974481 *
1748831   +        S_MntMeatProducts  +      3.1366199093076 * S_NumCatalogPurchases
1748832   +          +    -1.94563130199796 * S_RFMstat  +       2.512838942818 *
1748833   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.41618915627784 * S_AcceptedCmpTotal + -1.13785141950187 *
S_Mnt + -1.73667107974481 * S_MntMeatProducts + 3.1366199093076 * S_NumCatalogPurchases +
-1.94563130199796 * S_RFMstat + 2.512838942818 * S_Recency ;
1748834   +   H1x2_1  =     0.73112846873387 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.73112846873387 + H1x2_1 ;
1748835   +   H1x2_2  =    -0.66717106615524 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.66717106615524 + H1x2_2 ;
1748836   +   H1x2_3  =      2.7125530739338 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.7125530739338 + H1x2_3 ;
1748837   +   H1x2_4  =    -1.39079027168122 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -1.39079027168122 + H1x2_4 ;
1748838   +   H1x2_5  =     -1.5266283403396 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.5266283403396 + H1x2_5 ;
1748839   +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
1748840   +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
1748841   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748842   +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
1748843   +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
1748844   +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
1748845   +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
1748846   +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
1748847   +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
1748848   +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
1748849   +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
1748850   +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
1748851   +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
1748852   +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
1748853   +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
1748854   +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
1748855   +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
1748856   +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
1748857   +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
1748858   +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
1748859   +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
1748860   +END;
MPRINT(EM_DIAGRAM):   END;
1748861   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748862   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1748863   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1748864   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1748865   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1748866   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1748867   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1748868   +END;
MPRINT(EM_DIAGRAM):   END;
1748869   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748870   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1748871   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748872   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748873   +   H1x3_1  =     1.55893522013734 * S_AcceptedCmpTotal
1748874   +          +    -1.16802167955541 * S_Mnt  +    -1.60360119780136 *
1748875   +        S_MntMeatProducts  +     0.47774394371528 * S_NumCatalogPurchases
1748876   +          +      -0.530718682766 * S_RFMstat  +    -2.44187650282709 *
1748877   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.55893522013734 * S_AcceptedCmpTotal + -1.16802167955541 *
S_Mnt + -1.60360119780136 * S_MntMeatProducts + 0.47774394371528 * S_NumCatalogPurchases +
-0.530718682766 * S_RFMstat + -2.44187650282709 * S_Recency ;
1748878   +   H1x3_2  =     1.06465525219753 * S_AcceptedCmpTotal
1748879   +          +    -4.15619528335918 * S_Mnt  +     1.95067813512976 *
1748880   +        S_MntMeatProducts  +    -2.07670102753791 * S_NumCatalogPurchases
1748881   +          +     0.49910286851075 * S_RFMstat  +     0.93996026298479 *
1748882   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.06465525219753 * S_AcceptedCmpTotal + -4.15619528335918 *
S_Mnt + 1.95067813512976 * S_MntMeatProducts + -2.07670102753791 * S_NumCatalogPurchases +
0.49910286851075 * S_RFMstat + 0.93996026298479 * S_Recency ;
1748883   +   H1x3_3  =    -0.29105397796174 * S_AcceptedCmpTotal
1748884   +          +     2.11159454800566 * S_Mnt  +     1.67840031691295 *
1748885   +        S_MntMeatProducts  +    -2.40711178902336 * S_NumCatalogPurchases
1748886   +          +    -1.13747844076384 * S_RFMstat  +    -0.88756656082469 *
1748887   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.29105397796174 * S_AcceptedCmpTotal + 2.11159454800566 *
S_Mnt + 1.67840031691295 * S_MntMeatProducts + -2.40711178902336 * S_NumCatalogPurchases +
-1.13747844076384 * S_RFMstat + -0.88756656082469 * S_Recency ;
1748888   +   H1x3_4  =    -1.15703505358845 * S_AcceptedCmpTotal
1748889   +          +     0.30100889287849 * S_Mnt  +     0.55319963517684 *
1748890   +        S_MntMeatProducts  +    -0.02272785613118 * S_NumCatalogPurchases
1748891   +          +     0.43699534320691 * S_RFMstat  +     2.22910491450126 *
1748892   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -1.15703505358845 * S_AcceptedCmpTotal + 0.30100889287849 *
S_Mnt + 0.55319963517684 * S_MntMeatProducts + -0.02272785613118 * S_NumCatalogPurchases +
0.43699534320691 * S_RFMstat + 2.22910491450126 * S_Recency ;
1748893   +   H1x3_5  =    -0.42268650148557 * S_AcceptedCmpTotal
1748894   +          +    -2.38416083526034 * S_Mnt  +     2.41579845516974 *
1748895   +        S_MntMeatProducts  +     0.60973384003689 * S_NumCatalogPurchases
1748896   +          +    -1.12415629345715 * S_RFMstat  +    -0.59274912531616 *
1748897   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = -0.42268650148557 * S_AcceptedCmpTotal + -2.38416083526034 *
S_Mnt + 2.41579845516974 * S_MntMeatProducts + 0.60973384003689 * S_NumCatalogPurchases +
-1.12415629345715 * S_RFMstat + -0.59274912531616 * S_Recency ;
1748898   +   H1x3_1  =     0.20894643335542 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.20894643335542 + H1x3_1 ;
1748899   +   H1x3_2  =     2.19187718990043 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 2.19187718990043 + H1x3_2 ;
1748900   +   H1x3_3  =    -0.63127842492526 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.63127842492526 + H1x3_3 ;
1748901   +   H1x3_4  =     0.25735048029686 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.25735048029686 + H1x3_4 ;
1748902   +   H1x3_5  =     0.02632857468412 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.02632857468412 + H1x3_5 ;
1748903   +   H1x3_6  = 0;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0;
1748904   +   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
1748905   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1748906   +   H1x3_1  = EXP(H1x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_1 = EXP(H1x3_1 - _MAX_);
1748907   +   _SUM_ = _SUM_ + H1x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_1 ;
1748908   +   H1x3_2  = EXP(H1x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_2 = EXP(H1x3_2 - _MAX_);
1748909   +   _SUM_ = _SUM_ + H1x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_2 ;
1748910   +   H1x3_3  = EXP(H1x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_3 = EXP(H1x3_3 - _MAX_);
1748911   +   _SUM_ = _SUM_ + H1x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_3 ;
1748912   +   H1x3_4  = EXP(H1x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_4 = EXP(H1x3_4 - _MAX_);
1748913   +   _SUM_ = _SUM_ + H1x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_4 ;
1748914   +   H1x3_5  = EXP(H1x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_5 = EXP(H1x3_5 - _MAX_);
1748915   +   _SUM_ = _SUM_ + H1x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_5 ;
1748916   +   H1x3_6  = EXP(H1x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_6 = EXP(H1x3_6 - _MAX_);
1748917   +   _SUM_ = _SUM_ + H1x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_6 ;
1748918   +   H1x3_1  = H1x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 / _SUM_;
1748919   +   H1x3_2  = H1x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 / _SUM_;
1748920   +   H1x3_3  = H1x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 / _SUM_;
1748921   +   H1x3_4  = H1x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 / _SUM_;
1748922   +   H1x3_5  = H1x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 / _SUM_;
1748923   +   H1x3_6  = H1x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 / _SUM_;
1748924   +END;
MPRINT(EM_DIAGRAM):   END;
1748925   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1748926   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1748927   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1748928   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1748929   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1748930   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1748931   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1748932   +END;
MPRINT(EM_DIAGRAM):   END;
1748933   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748934   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1748935   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1748936   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1748937   +   H2x1_1  =    -1.91284328958208 * H1x1_1  +     1.01368252878712 * H1x1_2
1748938   +          +     0.88385633780482 * H1x1_3  +     0.77249497316744 * H1x1_4
1748939   +          +    -1.68467525644522 * H1x1_5  +     0.22872788371043 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.91284328958208 * H1x1_1 + 1.01368252878712 * H1x1_2 +
0.88385633780482 * H1x1_3 + 0.77249497316744 * H1x1_4 + -1.68467525644522 * H1x1_5 +
0.22872788371043 * H1x1_6 ;
1748940   +   H2x1_2  =    -0.08913678495622 * H1x1_1  +    -0.95704614273187 * H1x1_2
1748941   +          +    -1.13959611313765 * H1x1_3  +    -0.83269840840553 * H1x1_4
1748942   +          +    -1.34839441082903 * H1x1_5  +      1.4617930846853 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.08913678495622 * H1x1_1 + -0.95704614273187 * H1x1_2 +
-1.13959611313765 * H1x1_3 + -0.83269840840553 * H1x1_4 + -1.34839441082903 * H1x1_5 +
1.4617930846853 * H1x1_6 ;
1748943   +   H2x1_3  =     1.19406467163652 * H1x1_1  +     1.10561638775412 * H1x1_2
1748944   +          +     3.50091937687106 * H1x1_3  +     -0.7408464567923 * H1x1_4
1748945   +          +     1.07741096211456 * H1x1_5  +     -1.0098240718302 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.19406467163652 * H1x1_1 + 1.10561638775412 * H1x1_2 +
3.50091937687106 * H1x1_3 + -0.7408464567923 * H1x1_4 + 1.07741096211456 * H1x1_5 +
-1.0098240718302 * H1x1_6 ;
1748946   +   H2x1_4  =    -3.50840251474163 * H1x1_1  +    -0.53688540920235 * H1x1_2
1748947   +          +    -2.44435438360824 * H1x1_3  +     4.64213676100195 * H1x1_4
1748948   +          +     0.36171420259161 * H1x1_5  +     0.11106499550345 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -3.50840251474163 * H1x1_1 + -0.53688540920235 * H1x1_2 +
-2.44435438360824 * H1x1_3 + 4.64213676100195 * H1x1_4 + 0.36171420259161 * H1x1_5 +
0.11106499550345 * H1x1_6 ;
1748949   +   H2x1_5  =    -0.92126735850423 * H1x1_1  +    -0.50015259068425 * H1x1_2
1748950   +          +    -2.75013936022633 * H1x1_3  +     1.29804156504555 * H1x1_4
1748951   +          +    -2.88854985509185 * H1x1_5  +     3.51037817476003 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -0.92126735850423 * H1x1_1 + -0.50015259068425 * H1x1_2 +
-2.75013936022633 * H1x1_3 + 1.29804156504555 * H1x1_4 + -2.88854985509185 * H1x1_5 +
3.51037817476003 * H1x1_6 ;
1748952   +   H2x1_6  =      2.7601365695399 * H1x1_1  +     0.60343333315883 * H1x1_2
1748953   +          +    -4.84088835213795 * H1x1_3  +     0.04677091451384 * H1x1_4
1748954   +          +     1.99119511166544 * H1x1_5  +    -1.84413878989067 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 2.7601365695399 * H1x1_1 + 0.60343333315883 * H1x1_2 +
-4.84088835213795 * H1x1_3 + 0.04677091451384 * H1x1_4 + 1.99119511166544 * H1x1_5 +
-1.84413878989067 * H1x1_6 ;
1748955   +   H2x1_1  = H2x1_1  +    -0.55299168308518 * H1x2_1
1748956   +          +    -0.70728759829892 * H1x2_2  +     0.02028723479846 * H1x2_3
1748957   +          +      2.1534144925678 * H1x2_4  +    -0.60181736829464 * H1x2_5
1748958   +          +    -0.96627475596267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.55299168308518 * H1x2_1 + -0.70728759829892 *
H1x2_2 + 0.02028723479846 * H1x2_3 + 2.1534144925678 * H1x2_4 + -0.60181736829464 * H1x2_5 +
-0.96627475596267 * H1x2_6 ;
1748959   +   H2x1_2  = H2x1_2  +     1.02776882707138 * H1x2_1
1748960   +          +    -0.26186544699712 * H1x2_2  +    -0.59804813597981 * H1x2_3
1748961   +          +     0.13683572328121 * H1x2_4  +     -0.4527430044725 * H1x2_5
1748962   +          +     0.09804477894859 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 1.02776882707138 * H1x2_1 + -0.26186544699712 * H1x2_2
+ -0.59804813597981 * H1x2_3 + 0.13683572328121 * H1x2_4 + -0.4527430044725 * H1x2_5 +
0.09804477894859 * H1x2_6 ;
1748963   +   H2x1_3  = H2x1_3  +    -1.37372644240513 * H1x2_1
1748964   +          +    -1.41411080054855 * H1x2_2  +    -0.85635388175337 * H1x2_3
1748965   +          +     1.78033736245689 * H1x2_4  +    -0.32277639652206 * H1x2_5
1748966   +          +    -0.10095907241792 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -1.37372644240513 * H1x2_1 + -1.41411080054855 *
H1x2_2 + -0.85635388175337 * H1x2_3 + 1.78033736245689 * H1x2_4 + -0.32277639652206 * H1x2_5 +
-0.10095907241792 * H1x2_6 ;
1748967   +   H2x1_4  = H2x1_4  +     0.38975073179429 * H1x2_1
1748968   +          +      1.7999626274739 * H1x2_2  +    -0.54595798920563 * H1x2_3
1748969   +          +    -2.87794569741229 * H1x2_4  +     2.24407851876424 * H1x2_5
1748970   +          +    -0.78007016861264 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 0.38975073179429 * H1x2_1 + 1.7999626274739 * H1x2_2 +
-0.54595798920563 * H1x2_3 + -2.87794569741229 * H1x2_4 + 2.24407851876424 * H1x2_5 +
-0.78007016861264 * H1x2_6 ;
1748971   +   H2x1_5  = H2x1_5  +     1.68407538128685 * H1x2_1
1748972   +          +     2.69111816059998 * H1x2_2  +     0.12927675826764 * H1x2_3
1748973   +          +     -1.7263485913587 * H1x2_4  +    -2.15741343790643 * H1x2_5
1748974   +          +     1.95855676074934 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + 1.68407538128685 * H1x2_1 + 2.69111816059998 * H1x2_2
+ 0.12927675826764 * H1x2_3 + -1.7263485913587 * H1x2_4 + -2.15741343790643 * H1x2_5 +
1.95855676074934 * H1x2_6 ;
1748975   +   H2x1_6  = H2x1_6  +     0.31146846941645 * H1x2_1
1748976   +          +     0.33682375646593 * H1x2_2  +      1.6527641940739 * H1x2_3
1748977   +          +    -0.96403239328063 * H1x2_4  +    -1.11790253982232 * H1x2_5
1748978   +          +     -1.4251132059225 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + 0.31146846941645 * H1x2_1 + 0.33682375646593 * H1x2_2
+ 1.6527641940739 * H1x2_3 + -0.96403239328063 * H1x2_4 + -1.11790253982232 * H1x2_5 +
-1.4251132059225 * H1x2_6 ;
1748979   +   H2x1_1  = H2x1_1  +     0.47301275142195 * H1x3_1
1748980   +          +    -1.23391488243925 * H1x3_2  +    -1.81348351496647 * H1x3_3
1748981   +          +    -0.66473016828009 * H1x3_4  +     1.27670685567846 * H1x3_5
1748982   +          +     0.38481934719452 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.47301275142195 * H1x3_1 + -1.23391488243925 * H1x3_2
+ -1.81348351496647 * H1x3_3 + -0.66473016828009 * H1x3_4 + 1.27670685567846 * H1x3_5 +
0.38481934719452 * H1x3_6 ;
1748983   +   H2x1_2  = H2x1_2  +     0.35549808536734 * H1x3_1
1748984   +          +     0.36201179536458 * H1x3_2  +     1.04726425834791 * H1x3_3
1748985   +          +    -1.08276187248251 * H1x3_4  +     0.74248193765521 * H1x3_5
1748986   +          +     1.87596859340821 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.35549808536734 * H1x3_1 + 0.36201179536458 * H1x3_2
+ 1.04726425834791 * H1x3_3 + -1.08276187248251 * H1x3_4 + 0.74248193765521 * H1x3_5 +
1.87596859340821 * H1x3_6 ;
1748987   +   H2x1_3  = H2x1_3  +    -0.36667720681998 * H1x3_1
1748988   +          +      0.5256210995417 * H1x3_2  +    -0.44860423311788 * H1x3_3
1748989   +          +    -0.20913840911463 * H1x3_4  +    -0.76258888517092 * H1x3_5
1748990   +          +     0.20457555210609 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.36667720681998 * H1x3_1 + 0.5256210995417 * H1x3_2
+ -0.44860423311788 * H1x3_3 + -0.20913840911463 * H1x3_4 + -0.76258888517092 * H1x3_5 +
0.20457555210609 * H1x3_6 ;
1748991   +   H2x1_4  = H2x1_4  +     -0.5052323966606 * H1x3_1
1748992   +          +     0.57348008947054 * H1x3_2  +     0.36313882476736 * H1x3_3
1748993   +          +     2.54509537428676 * H1x3_4  +    -1.40462445002153 * H1x3_5
1748994   +          +     1.76488988390401 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.5052323966606 * H1x3_1 + 0.57348008947054 * H1x3_2
+ 0.36313882476736 * H1x3_3 + 2.54509537428676 * H1x3_4 + -1.40462445002153 * H1x3_5 +
1.76488988390401 * H1x3_6 ;
1748995   +   H2x1_5  = H2x1_5  +     -0.4555917406867 * H1x3_1
1748996   +          +     0.52745581365834 * H1x3_2  +    -0.82303556180885 * H1x3_3
1748997   +          +    -0.78981386250305 * H1x3_4  +     0.09307958113664 * H1x3_5
1748998   +          +     1.63202351822216 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.4555917406867 * H1x3_1 + 0.52745581365834 * H1x3_2
+ -0.82303556180885 * H1x3_3 + -0.78981386250305 * H1x3_4 + 0.09307958113664 * H1x3_5 +
1.63202351822216 * H1x3_6 ;
1748999   +   H2x1_6  = H2x1_6  +    -0.57563015009902 * H1x3_1
1749000   +          +     2.47575184377805 * H1x3_2  +    -0.91958118957044 * H1x3_3
1749001   +          +    -1.67916721690516 * H1x3_4  +     0.69514147486102 * H1x3_5
1749002   +          +    -0.75070900812889 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + -0.57563015009902 * H1x3_1 + 2.47575184377805 * H1x3_2
+ -0.91958118957044 * H1x3_3 + -1.67916721690516 * H1x3_4 + 0.69514147486102 * H1x3_5 +
-0.75070900812889 * H1x3_6 ;
1749003   +   H2x1_1  =     0.44089803005479 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.44089803005479 + H2x1_1 ;
1749004   +   H2x1_2  =     0.84182794358826 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.84182794358826 + H2x1_2 ;
1749005   +   H2x1_3  =     0.09803371201388 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.09803371201388 + H2x1_3 ;
1749006   +   H2x1_4  =      -0.624591248343 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.624591248343 + H2x1_4 ;
1749007   +   H2x1_5  =      0.7596943675806 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.7596943675806 + H2x1_5 ;
1749008   +   H2x1_6  =     1.86613856151687 + H2x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.86613856151687 + H2x1_6 ;
1749009   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1749010   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1749011   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1749012   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1749013   +   H2x1_3  = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
1749014   +   H2x1_4  = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_4 = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
1749015   +   H2x1_5  = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_5 = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
1749016   +   H2x1_6  = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
1749017   +END;
MPRINT(EM_DIAGRAM):   END;
1749018   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749019   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1749020   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1749021   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1749022   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1749023   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1749024   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1749025   +END;
MPRINT(EM_DIAGRAM):   END;
1749026   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749027   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1749028   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749029   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749030   +   H2x2_1  =    -0.67599100831955 * H1x1_1  +     0.24077189312828 * H1x1_2
1749031   +          +      0.2000763543409 * H1x1_3  +    -1.82199808794926 * H1x1_4
1749032   +          +    -0.63614429983717 * H1x1_5  +     0.35027369588915 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.67599100831955 * H1x1_1 + 0.24077189312828 * H1x1_2 +
0.2000763543409 * H1x1_3 + -1.82199808794926 * H1x1_4 + -0.63614429983717 * H1x1_5 +
0.35027369588915 * H1x1_6 ;
1749033   +   H2x2_2  =    -2.86273409671688 * H1x1_1  +    -1.17210014090039 * H1x1_2
1749034   +          +     2.79815832312648 * H1x1_3  +     0.46361776813305 * H1x1_4
1749035   +          +      0.0798677597958 * H1x1_5  +    -0.75991454790943 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -2.86273409671688 * H1x1_1 + -1.17210014090039 * H1x1_2 +
2.79815832312648 * H1x1_3 + 0.46361776813305 * H1x1_4 + 0.0798677597958 * H1x1_5 +
-0.75991454790943 * H1x1_6 ;
1749036   +   H2x2_3  =     -0.6739829418862 * H1x1_1  +    -2.31169428380278 * H1x1_2
1749037   +          +     2.10300119718615 * H1x1_3  +    -0.00742357063683 * H1x1_4
1749038   +          +    -1.51041651747244 * H1x1_5  +    -0.17010696636548 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.6739829418862 * H1x1_1 + -2.31169428380278 * H1x1_2 +
2.10300119718615 * H1x1_3 + -0.00742357063683 * H1x1_4 + -1.51041651747244 * H1x1_5 +
-0.17010696636548 * H1x1_6 ;
1749039   +   H2x2_4  =    -1.50678102953218 * H1x1_1  +    -0.89959733379076 * H1x1_2
1749040   +          +     1.08933879000366 * H1x1_3  +      0.4160027440208 * H1x1_4
1749041   +          +     0.96602358671281 * H1x1_5  +     2.49695921665153 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -1.50678102953218 * H1x1_1 + -0.89959733379076 * H1x1_2 +
1.08933879000366 * H1x1_3 + 0.4160027440208 * H1x1_4 + 0.96602358671281 * H1x1_5 +
2.49695921665153 * H1x1_6 ;
1749042   +   H2x2_5  =      0.7197781324018 * H1x1_1  +     0.65156339723506 * H1x1_2
1749043   +          +     1.10688522196469 * H1x1_3  +    -0.18317373714845 * H1x1_4
1749044   +          +    -0.41607265841802 * H1x1_5  +    -1.97247962280317 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.7197781324018 * H1x1_1 + 0.65156339723506 * H1x1_2 +
1.10688522196469 * H1x1_3 + -0.18317373714845 * H1x1_4 + -0.41607265841802 * H1x1_5 +
-1.97247962280317 * H1x1_6 ;
1749045   +   H2x2_6  =     0.54986188496659 * H1x1_1  +    -1.79839449870258 * H1x1_2
1749046   +          +    -1.15036560870119 * H1x1_3  +     1.47969678061941 * H1x1_4
1749047   +          +     0.10597867235187 * H1x1_5  +     0.90300533681641 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.54986188496659 * H1x1_1 + -1.79839449870258 * H1x1_2 +
-1.15036560870119 * H1x1_3 + 1.47969678061941 * H1x1_4 + 0.10597867235187 * H1x1_5 +
0.90300533681641 * H1x1_6 ;
1749048   +   H2x2_1  = H2x2_1  +    -0.21000305943834 * H1x2_1
1749049   +          +    -0.32875528993365 * H1x2_2  +    -2.01191741391886 * H1x2_3
1749050   +          +     0.25433844143017 * H1x2_4  +    -0.22353514971516 * H1x2_5
1749051   +          +    -1.39994531215362 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21000305943834 * H1x2_1 + -0.32875528993365 *
H1x2_2 + -2.01191741391886 * H1x2_3 + 0.25433844143017 * H1x2_4 + -0.22353514971516 * H1x2_5 +
-1.39994531215362 * H1x2_6 ;
1749052   +   H2x2_2  = H2x2_2  +     0.97984435202354 * H1x2_1
1749053   +          +    -0.32249690006833 * H1x2_2  +    -1.39997315416199 * H1x2_3
1749054   +          +     -2.7808281862933 * H1x2_4  +    -0.16292745421241 * H1x2_5
1749055   +          +    -0.40444669273525 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.97984435202354 * H1x2_1 + -0.32249690006833 * H1x2_2
+ -1.39997315416199 * H1x2_3 + -2.7808281862933 * H1x2_4 + -0.16292745421241 * H1x2_5 +
-0.40444669273525 * H1x2_6 ;
1749056   +   H2x2_3  = H2x2_3  +      1.7332207906399 * H1x2_1
1749057   +          +     0.48772690844604 * H1x2_2  +    -0.03702571322482 * H1x2_3
1749058   +          +    -0.04073364631727 * H1x2_4  +    -0.91191013457442 * H1x2_5
1749059   +          +    -2.38736049861996 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.7332207906399 * H1x2_1 + 0.48772690844604 * H1x2_2 +
-0.03702571322482 * H1x2_3 + -0.04073364631727 * H1x2_4 + -0.91191013457442 * H1x2_5 +
-2.38736049861996 * H1x2_6 ;
1749060   +   H2x2_4  = H2x2_4  +    -0.06792429668775 * H1x2_1
1749061   +          +    -3.07222522712126 * H1x2_2  +     0.01320929156379 * H1x2_3
1749062   +          +     0.84459091213222 * H1x2_4  +    -0.95949143247045 * H1x2_5
1749063   +          +     0.02632878191094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.06792429668775 * H1x2_1 + -3.07222522712126 *
H1x2_2 + 0.01320929156379 * H1x2_3 + 0.84459091213222 * H1x2_4 + -0.95949143247045 * H1x2_5 +
0.02632878191094 * H1x2_6 ;
1749064   +   H2x2_5  = H2x2_5  +     0.13831659235384 * H1x2_1
1749065   +          +    -1.75598160312232 * H1x2_2  +     0.17047671926062 * H1x2_3
1749066   +          +    -0.45409084878331 * H1x2_4  +    -1.17540122389603 * H1x2_5
1749067   +          +     0.79706245066425 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 0.13831659235384 * H1x2_1 + -1.75598160312232 * H1x2_2
+ 0.17047671926062 * H1x2_3 + -0.45409084878331 * H1x2_4 + -1.17540122389603 * H1x2_5 +
0.79706245066425 * H1x2_6 ;
1749068   +   H2x2_6  = H2x2_6  +     1.74450762507234 * H1x2_1
1749069   +          +    -0.18999736448811 * H1x2_2  +    -0.82200918268165 * H1x2_3
1749070   +          +      1.8752098314092 * H1x2_4  +    -0.55366925571085 * H1x2_5
1749071   +          +     1.96032751350518 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 1.74450762507234 * H1x2_1 + -0.18999736448811 * H1x2_2
+ -0.82200918268165 * H1x2_3 + 1.8752098314092 * H1x2_4 + -0.55366925571085 * H1x2_5 +
1.96032751350518 * H1x2_6 ;
1749072   +   H2x2_1  = H2x2_1  +     1.05088385328525 * H1x3_1
1749073   +          +    -1.18748050069472 * H1x3_2  +     0.33686598960541 * H1x3_3
1749074   +          +     0.60467968457853 * H1x3_4  +     0.44997942659683 * H1x3_5
1749075   +          +     0.86372067144364 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 1.05088385328525 * H1x3_1 + -1.18748050069472 * H1x3_2
+ 0.33686598960541 * H1x3_3 + 0.60467968457853 * H1x3_4 + 0.44997942659683 * H1x3_5 +
0.86372067144364 * H1x3_6 ;
1749076   +   H2x2_2  = H2x2_2  +     0.54489966189284 * H1x3_1
1749077   +          +     0.63828892530684 * H1x3_2  +     1.36576672067523 * H1x3_3
1749078   +          +    -0.93080386349548 * H1x3_4  +    -0.53645684858865 * H1x3_5
1749079   +          +     0.80254310887989 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54489966189284 * H1x3_1 + 0.63828892530684 * H1x3_2
+ 1.36576672067523 * H1x3_3 + -0.93080386349548 * H1x3_4 + -0.53645684858865 * H1x3_5 +
0.80254310887989 * H1x3_6 ;
1749080   +   H2x2_3  = H2x2_3  +    -0.43326705547287 * H1x3_1
1749081   +          +     1.62130917530395 * H1x3_2  +     -1.9569471371487 * H1x3_3
1749082   +          +    -0.16690355216427 * H1x3_4  +     0.76588074497881 * H1x3_5
1749083   +          +    -0.80961698509146 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.43326705547287 * H1x3_1 + 1.62130917530395 * H1x3_2
+ -1.9569471371487 * H1x3_3 + -0.16690355216427 * H1x3_4 + 0.76588074497881 * H1x3_5 +
-0.80961698509146 * H1x3_6 ;
1749084   +   H2x2_4  = H2x2_4  +     0.14186336769381 * H1x3_1
1749085   +          +    -0.40313769302155 * H1x3_2  +     0.32907477170578 * H1x3_3
1749086   +          +    -0.09559287343495 * H1x3_4  +     1.23870853269954 * H1x3_5
1749087   +          +    -1.29909553454934 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.14186336769381 * H1x3_1 + -0.40313769302155 * H1x3_2
+ 0.32907477170578 * H1x3_3 + -0.09559287343495 * H1x3_4 + 1.23870853269954 * H1x3_5 +
-1.29909553454934 * H1x3_6 ;
1749088   +   H2x2_5  = H2x2_5  +    -0.23962567636847 * H1x3_1
1749089   +          +    -0.40709618711343 * H1x3_2  +    -1.68479406479753 * H1x3_3
1749090   +          +     0.70815879664382 * H1x3_4  +    -0.08013794063462 * H1x3_5
1749091   +          +      0.3854653698129 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.23962567636847 * H1x3_1 + -0.40709618711343 *
H1x3_2 + -1.68479406479753 * H1x3_3 + 0.70815879664382 * H1x3_4 + -0.08013794063462 * H1x3_5 +
0.3854653698129 * H1x3_6 ;
1749092   +   H2x2_6  = H2x2_6  +     0.30227974563111 * H1x3_1
1749093   +          +    -0.74687752968448 * H1x3_2  +     1.36415251312446 * H1x3_3
1749094   +          +     1.81088044806083 * H1x3_4  +     1.05534281539066 * H1x3_5
1749095   +          +    -0.43429796112944 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 0.30227974563111 * H1x3_1 + -0.74687752968448 * H1x3_2
+ 1.36415251312446 * H1x3_3 + 1.81088044806083 * H1x3_4 + 1.05534281539066 * H1x3_5 +
-0.43429796112944 * H1x3_6 ;
1749096   +   H2x2_1  =     0.63184708368306 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.63184708368306 + H2x2_1 ;
1749097   +   H2x2_2  =     0.84907350596357 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = 0.84907350596357 + H2x2_2 ;
1749098   +   H2x2_3  =    -0.73809203587584 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.73809203587584 + H2x2_3 ;
1749099   +   H2x2_4  =    -0.43815853180498 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.43815853180498 + H2x2_4 ;
1749100   +   H2x2_5  =     0.21738444698009 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.21738444698009 + H2x2_5 ;
1749101   +   H2x2_6  =     0.35336989078545 + H2x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.35336989078545 + H2x2_6 ;
1749102   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1749103   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1749104   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1749105   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1749106   +   H2x2_3  = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
1749107   +   H2x2_4  = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_4 = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
1749108   +   H2x2_5  = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
1749109   +   H2x2_6  = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_6 = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
1749110   +END;
MPRINT(EM_DIAGRAM):   END;
1749111   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749112   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1749113   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1749114   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1749115   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1749116   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1749117   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1749118   +END;
MPRINT(EM_DIAGRAM):   END;
1749119   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749120   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1749121   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749122   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749123   +   H3x1_1  =     0.88232318111379 * H2x1_1  +     0.33230222316203 * H2x1_2
1749124   +          +     1.74392107555271 * H2x1_3  +    -1.04185063882146 * H2x1_4
1749125   +          +    -0.63105511848819 * H2x1_5  +    -1.05088304858423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.88232318111379 * H2x1_1 + 0.33230222316203 * H2x1_2 +
1.74392107555271 * H2x1_3 + -1.04185063882146 * H2x1_4 + -0.63105511848819 * H2x1_5 +
-1.05088304858423 * H2x1_6 ;
1749126   +   H3x1_2  =     1.11736284857762 * H2x1_1  +     1.90660007278783 * H2x1_2
1749127   +          +    -0.38007206174956 * H2x1_3  +     0.37265047043174 * H2x1_4
1749128   +          +     2.27208664894129 * H2x1_5  +     0.87150445612099 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 1.11736284857762 * H2x1_1 + 1.90660007278783 * H2x1_2 +
-0.38007206174956 * H2x1_3 + 0.37265047043174 * H2x1_4 + 2.27208664894129 * H2x1_5 +
0.87150445612099 * H2x1_6 ;
1749129   +   H3x1_3  =    -1.47841270668706 * H2x1_1  +    -1.28441896803313 * H2x1_2
1749130   +          +     1.95549364222924 * H2x1_3  +    -2.50484940312791 * H2x1_4
1749131   +          +    -2.84934238039874 * H2x1_5  +     2.18013446750751 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -1.47841270668706 * H2x1_1 + -1.28441896803313 * H2x1_2 +
1.95549364222924 * H2x1_3 + -2.50484940312791 * H2x1_4 + -2.84934238039874 * H2x1_5 +
2.18013446750751 * H2x1_6 ;
1749132   +   H3x1_4  =     1.91981096223784 * H2x1_1  +     2.50981387206546 * H2x1_2
1749133   +          +     1.52848474440169 * H2x1_3  +    -1.77653121606781 * H2x1_4
1749134   +          +    -1.17059017641066 * H2x1_5  +     0.08630071934474 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.91981096223784 * H2x1_1 + 2.50981387206546 * H2x1_2 +
1.52848474440169 * H2x1_3 + -1.77653121606781 * H2x1_4 + -1.17059017641066 * H2x1_5 +
0.08630071934474 * H2x1_6 ;
1749135   +   H3x1_5  =    -0.90689901549977 * H2x1_1  +    -0.28920884601352 * H2x1_2
1749136   +          +     0.19367561691053 * H2x1_3  +    -1.64382922054024 * H2x1_4
1749137   +          +    -1.27645531071461 * H2x1_5  +     2.78368081292476 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.90689901549977 * H2x1_1 + -0.28920884601352 * H2x1_2 +
0.19367561691053 * H2x1_3 + -1.64382922054024 * H2x1_4 + -1.27645531071461 * H2x1_5 +
2.78368081292476 * H2x1_6 ;
1749138   +   H3x1_6  =     1.79097710546589 * H2x1_1  +     0.62195006841522 * H2x1_2
1749139   +          +     0.38238495192417 * H2x1_3  +     0.38117337455775 * H2x1_4
1749140   +          +     0.31232345193628 * H2x1_5  +     1.64288571863932 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = 1.79097710546589 * H2x1_1 + 0.62195006841522 * H2x1_2 +
0.38238495192417 * H2x1_3 + 0.38117337455775 * H2x1_4 + 0.31232345193628 * H2x1_5 +
1.64288571863932 * H2x1_6 ;
1749141   +   H3x1_1  = H3x1_1  +    -0.29610176935088 * H2x2_1
1749142   +          +    -0.05687019870114 * H2x2_2  +     0.19276816813006 * H2x2_3
1749143   +          +    -0.02919428123272 * H2x2_4  +     -0.1225189756077 * H2x2_5
1749144   +          +     0.35216486042215 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -0.29610176935088 * H2x2_1 + -0.05687019870114 *
H2x2_2 + 0.19276816813006 * H2x2_3 + -0.02919428123272 * H2x2_4 + -0.1225189756077 * H2x2_5 +
0.35216486042215 * H2x2_6 ;
1749145   +   H3x1_2  = H3x1_2  +    -0.65560935360323 * H2x2_1
1749146   +          +     1.14492037534385 * H2x2_2  +    -0.73840836071645 * H2x2_3
1749147   +          +      1.3947576688638 * H2x2_4  +    -0.01317619212955 * H2x2_5
1749148   +          +    -0.91648595761636 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + -0.65560935360323 * H2x2_1 + 1.14492037534385 * H2x2_2
+ -0.73840836071645 * H2x2_3 + 1.3947576688638 * H2x2_4 + -0.01317619212955 * H2x2_5 +
-0.91648595761636 * H2x2_6 ;
1749149   +   H3x1_3  = H3x1_3  +    -0.53127332055291 * H2x2_1
1749150   +          +     0.36262088215518 * H2x2_2  +     2.77585954813321 * H2x2_3
1749151   +          +     1.38261906942485 * H2x2_4  +    -0.22635906489825 * H2x2_5
1749152   +          +    -2.11281855575499 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.53127332055291 * H2x2_1 + 0.36262088215518 * H2x2_2
+ 2.77585954813321 * H2x2_3 + 1.38261906942485 * H2x2_4 + -0.22635906489825 * H2x2_5 +
-2.11281855575499 * H2x2_6 ;
1749153   +   H3x1_4  = H3x1_4  +     0.10255243516649 * H2x2_1
1749154   +          +    -0.19237607982949 * H2x2_2  +    -0.39440266749795 * H2x2_3
1749155   +          +     0.62091379272854 * H2x2_4  +    -0.71121773171613 * H2x2_5
1749156   +          +     0.57305821692201 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.10255243516649 * H2x2_1 + -0.19237607982949 * H2x2_2
+ -0.39440266749795 * H2x2_3 + 0.62091379272854 * H2x2_4 + -0.71121773171613 * H2x2_5 +
0.57305821692201 * H2x2_6 ;
1749157   +   H3x1_5  = H3x1_5  +     1.38760232745985 * H2x2_1
1749158   +          +    -0.67366859881604 * H2x2_2  +     0.73667853659073 * H2x2_3
1749159   +          +     0.48338791573814 * H2x2_4  +    -1.86204960161547 * H2x2_5
1749160   +          +     2.06401699674057 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 1.38760232745985 * H2x2_1 + -0.67366859881604 * H2x2_2
+ 0.73667853659073 * H2x2_3 + 0.48338791573814 * H2x2_4 + -1.86204960161547 * H2x2_5 +
2.06401699674057 * H2x2_6 ;
1749161   +   H3x1_6  = H3x1_6  +     1.58403061991045 * H2x2_1
1749162   +          +    -1.98415138001436 * H2x2_2  +    -2.65270828558486 * H2x2_3
1749163   +          +     0.24663962279095 * H2x2_4  +    -0.13610124747178 * H2x2_5
1749164   +          +     0.08850124295188 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 + 1.58403061991045 * H2x2_1 + -1.98415138001436 * H2x2_2
+ -2.65270828558486 * H2x2_3 + 0.24663962279095 * H2x2_4 + -0.13610124747178 * H2x2_5 +
0.08850124295188 * H2x2_6 ;
1749165   +   H3x1_1  =    -0.38359896864958 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.38359896864958 + H3x1_1 ;
1749166   +   H3x1_2  =     0.71155840570573 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.71155840570573 + H3x1_2 ;
1749167   +   H3x1_3  =     0.51799749231142 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 0.51799749231142 + H3x1_3 ;
1749168   +   H3x1_4  =     0.67952932286733 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.67952932286733 + H3x1_4 ;
1749169   +   H3x1_5  =    -0.81394067979603 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.81394067979603 + H3x1_5 ;
1749170   +   H3x1_6  =    -0.01596290366203 + H3x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = -0.01596290366203 + H3x1_6 ;
1749171   +   H3x1_1  = SIN(H3x1_1 );
MPRINT(EM_DIAGRAM):   H3x1_1 = SIN(H3x1_1 );
1749172   +   H3x1_2  = SIN(H3x1_2 );
MPRINT(EM_DIAGRAM):   H3x1_2 = SIN(H3x1_2 );
1749173   +   H3x1_3  = SIN(H3x1_3 );
MPRINT(EM_DIAGRAM):   H3x1_3 = SIN(H3x1_3 );
1749174   +   H3x1_4  = SIN(H3x1_4 );
MPRINT(EM_DIAGRAM):   H3x1_4 = SIN(H3x1_4 );
1749175   +   H3x1_5  = SIN(H3x1_5 );
MPRINT(EM_DIAGRAM):   H3x1_5 = SIN(H3x1_5 );
1749176   +   H3x1_6  = SIN(H3x1_6 );
MPRINT(EM_DIAGRAM):   H3x1_6 = SIN(H3x1_6 );
1749177   +END;
MPRINT(EM_DIAGRAM):   END;
1749178   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749179   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1749180   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1749181   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1749182   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1749183   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1749184   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1749185   +END;
MPRINT(EM_DIAGRAM):   END;
1749186   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749187   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1749188   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749189   +
1749190   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1749191   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1749192   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1749193   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1749194   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1749195   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1749196   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1749197   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1749198   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1749199   +end;
MPRINT(EM_DIAGRAM):   end;
1749200   +else do;
MPRINT(EM_DIAGRAM):   else do;
1749201   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1749202   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1749203   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1749204   +   end;
MPRINT(EM_DIAGRAM):   end;
1749205   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1749206   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1749207   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1749208   +   end;
MPRINT(EM_DIAGRAM):   end;
1749209   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1749210   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1749211   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1749212   +   end;
MPRINT(EM_DIAGRAM):   end;
1749213   +end;
MPRINT(EM_DIAGRAM):   end;
1749214   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749215   +   P_DepVar1  =     0.28094469007064 * H3x1_1  +     4.40543517205109 * H3x1_2
1749216   +          +     4.58780022403482 * H3x1_3  +    -1.49344393871597 * H3x1_4
1749217   +          +     3.15120047821915 * H3x1_5  +    -1.83744247169269 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.28094469007064 * H3x1_1 + 4.40543517205109 * H3x1_2 +
4.58780022403482 * H3x1_3 + -1.49344393871597 * H3x1_4 + 3.15120047821915 * H3x1_5 +
-1.83744247169269 * H3x1_6 ;
1749218   +   P_DepVar1  =     -2.1680951408523 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.1680951408523 + P_DepVar1 ;
1749219   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1749220   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1749221   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1749222   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1749223   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1749224   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1749225   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1749226   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1749227   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1749228   +END;
MPRINT(EM_DIAGRAM):   END;
1749229   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749230   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1749231   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1749232   +END;
MPRINT(EM_DIAGRAM):   END;
1749233   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1749234   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1749235   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1749236   +END;
MPRINT(EM_DIAGRAM):   END;
1749237   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1749238   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1749239   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1749240   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1749241   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1749242   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1749243   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1749244   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749245   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1749246   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749247   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1749248   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1749249   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1749250   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1749251   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1749252   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1749253   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1749254   +END;
MPRINT(EM_DIAGRAM):   END;
1749255   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1749256   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1749257   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1749258   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1749259   +* Renaming variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural28;
1749260   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749261   +* Renaming Posterior variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural28;
1749262   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749263   +drop AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar1;
1749264   +AutoNeural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar1 = P_DepVar1;
1749265   +drop AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar0;
1749266   +AutoNeural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar0 = P_DepVar0;
1749267   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749268   +* Renaming _WARN_ variable for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural28;
1749269   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749270   +length AutoNeural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural28_WARN_ $4;
1749271   +drop AutoNeural28_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_WARN_;
1749272   +AutoNeural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural28_WARN_ = _WARN_;
1749273   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749274   +* Ensmbl8: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Average Posteriors of 3 models;
1749275   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749276   +P_DepVar1 = (
1749277   +Neural28_P_DepVar1 +
1749278   +AutoNeural33_P_DepVar1 +
1749279   +AutoNeural28_P_DepVar1
1749280   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural28_P_DepVar1 + AutoNeural33_P_DepVar1 +
AutoNeural28_P_DepVar1 )/3;
1749281   +P_DepVar0 = (
1749282   +Neural28_P_DepVar0 +
1749283   +AutoNeural33_P_DepVar0 +
1749284   +AutoNeural28_P_DepVar0
1749285   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural28_P_DepVar0 + AutoNeural33_P_DepVar0 +
AutoNeural28_P_DepVar0 )/3;
1749286   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749287   +* Ensmbl8: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing Classification Vars;
1749288   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749289   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
1749290   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
1749291   +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
1749292   +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
1749293   +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
1749294   +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
1749295   +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
1749296   +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
1749297   +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
1749298   +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
1749299   +end;
MPRINT(EM_DIAGRAM):   end;
1749300   +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
1749301   +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
1749302   +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
1749303   +end;
MPRINT(EM_DIAGRAM):   end;
1749304   +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749305   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749306   +* Ensmbl8: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Producing Unformatted variable;
1749307   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749308   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
1749309   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
1749310   +else
1749311   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
1749312   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749313   +* Ensmbl8: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing _WARN_ Variable;
1749314   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749315   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1749316   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
1749317   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
1749318   +if index(NEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
1749318  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1749319   +if index(NEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
1749319  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1749320   +if index(NEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
1749320  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1749321   +if index(NEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
1749321  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1749322   +if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1749322  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1749323   +if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1749323  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1749324   +if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1749324  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1749325   +if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1749325  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1749326   +if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1749326  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1749327   +if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1749327  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1749328   +if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1749328  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1749329   +if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1749329  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1749330   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749331   +* Ensmbl8: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing Residual Vars;
1749332   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749333   +if
1749334   +F_DepVar NE '1'
1749335   +AND F_DepVar NE '0'
1749336   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
1749337   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1749338   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1749339   +end;
MPRINT(EM_DIAGRAM):   end;
1749340   +else do;
MPRINT(EM_DIAGRAM):   else do;
1749341   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1749342   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1749343   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1749344   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
1749345   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
1749346   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1749347   +END;
MPRINT(EM_DIAGRAM):   END;
1749348   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749349    run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL8_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL28_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749350    quit;
1749351    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl8_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl8_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Ensmbl8_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
1749411    filename _pref
1749411  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMPUBLISHSCORE.sas";
1749412    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1749413    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMPUBLISHSCORE.sas.
1749414   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1749415   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1749416   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1749417   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1749418   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1749419   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1749420   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1749421   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1749422   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1749423   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1749424   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1749425   +LENGTH _WARN_ $4
1749426   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1749427   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1749428   +
1749429   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1749430   +
1749431   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1749432   +
1749433   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1749434   +
1749435   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1749436   +
1749437   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1749438   +
1749439   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1749440   +
1749441   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1749442   +
1749443   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1749444   +
1749445   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1749446   +
1749447   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
1749448   +
1749449   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
1749450   +
1749451   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1749452   +
1749453   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1749454   +
1749455   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1749456   +
1749457   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1749458   +
1749459   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1749460   +
1749461   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749462   +*** Checking missing input Interval
1749463   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1749464   +
1749465   +IF NMISS(
1749466   +   AcceptedCmpTotal ,
1749467   +   Mnt ,
1749468   +   MntMeatProducts ,
1749469   +   NumCatalogPurchases ,
1749470   +   RFMstat ,
1749471   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1749472   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1749473   +
1749474   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1749475   +END;
MPRINT(EM_DIAGRAM):   END;
1749476   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749477   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1749478   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749479   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749480   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1749481   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1749482   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1749483   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1749484   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1749485   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1749486   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1749487   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1749488   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1749489   +END;
MPRINT(EM_DIAGRAM):   END;
1749490   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749491   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1749492   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1749493   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1749494   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1749495   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1749496   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1749497   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1749498   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1749499   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1749500   +   ELSE S_NumCatalogPurchases
1749501   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1749502   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1749503   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1749504   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1749505   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1749506   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1749507   +END;
MPRINT(EM_DIAGRAM):   END;
1749508   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749509   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1749510   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749511   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749512   +   H11  =     -0.1481294920829 * S_AcceptedCmpTotal  +    -0.31967651937983 *
1749513   +        S_Mnt  +    -0.25501160560688 * S_MntMeatProducts
1749514   +          +    -0.26541354265094 * S_NumCatalogPurchases
1749515   +          +    -0.05107291503479 * S_RFMstat  +     0.26055761102982 *
1749516   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.1481294920829 * S_AcceptedCmpTotal + -0.31967651937983 * S_Mnt
+ -0.25501160560688 * S_MntMeatProducts + -0.26541354265094 * S_NumCatalogPurchases +
-0.05107291503479 * S_RFMstat + 0.26055761102982 * S_Recency ;
1749517   +   H12  =    -0.53585265877367 * S_AcceptedCmpTotal  +    -0.63949625372724 *
1749518   +        S_Mnt  +    -0.71298935461349 * S_MntMeatProducts
1749519   +          +     0.26625422734047 * S_NumCatalogPurchases
1749520   +          +     0.04789590805202 * S_RFMstat  +     -0.2457029388315 *
1749521   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.53585265877367 * S_AcceptedCmpTotal + -0.63949625372724 * S_Mnt
+ -0.71298935461349 * S_MntMeatProducts + 0.26625422734047 * S_NumCatalogPurchases +
0.04789590805202 * S_RFMstat + -0.2457029388315 * S_Recency ;
1749522   +   H13  =     0.36156584602692 * S_AcceptedCmpTotal  +    -3.37453529906718 *
1749523   +        S_Mnt  +     1.02675869236561 * S_MntMeatProducts
1749524   +          +     0.00910121928187 * S_NumCatalogPurchases
1749525   +          +     0.20581491047897 * S_RFMstat  +    -0.18898725892086 *
1749526   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.36156584602692 * S_AcceptedCmpTotal + -3.37453529906718 * S_Mnt
+ 1.02675869236561 * S_MntMeatProducts + 0.00910121928187 * S_NumCatalogPurchases +
0.20581491047897 * S_RFMstat + -0.18898725892086 * S_Recency ;
1749527   +   H14  =    -0.14179052521941 * S_AcceptedCmpTotal  +     0.30769772196415 *
1749528   +        S_Mnt  +     0.17433696286114 * S_MntMeatProducts
1749529   +          +     0.12575078713396 * S_NumCatalogPurchases
1749530   +          +    -0.02826822167447 * S_RFMstat  +     0.28366844846854 *
1749531   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -0.14179052521941 * S_AcceptedCmpTotal + 0.30769772196415 * S_Mnt
+ 0.17433696286114 * S_MntMeatProducts + 0.12575078713396 * S_NumCatalogPurchases +
-0.02826822167447 * S_RFMstat + 0.28366844846854 * S_Recency ;
1749532   +   H15  =      0.0992610666113 * S_AcceptedCmpTotal  +    -0.08290546162861 *
1749533   +        S_Mnt  +     2.79374557573421 * S_MntMeatProducts
1749534   +          +     0.34145061374457 * S_NumCatalogPurchases
1749535   +          +     1.24642569428903 * S_RFMstat  +    -0.05791964822006 *
1749536   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.0992610666113 * S_AcceptedCmpTotal + -0.08290546162861 * S_Mnt +
2.79374557573421 * S_MntMeatProducts + 0.34145061374457 * S_NumCatalogPurchases +
1.24642569428903 * S_RFMstat + -0.05791964822006 * S_Recency ;
1749537   +   H16  =    -0.70732539360309 * S_AcceptedCmpTotal  +    -6.01133749430879 *
1749538   +        S_Mnt  +      2.7772635267037 * S_MntMeatProducts
1749539   +          +     3.89195901397454 * S_NumCatalogPurchases
1749540   +          +     -2.3989156332421 * S_RFMstat  +    -0.49366295107927 *
1749541   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.70732539360309 * S_AcceptedCmpTotal + -6.01133749430879 * S_Mnt
+ 2.7772635267037 * S_MntMeatProducts + 3.89195901397454 * S_NumCatalogPurchases +
-2.3989156332421 * S_RFMstat + -0.49366295107927 * S_Recency ;
1749542   +   H11  =     1.84373127923043 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.84373127923043 + H11 ;
1749543   +   H12  =     0.28145390491001 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.28145390491001 + H12 ;
1749544   +   H13  =    -2.13618632038915 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.13618632038915 + H13 ;
1749545   +   H14  =    -0.43724663060956 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.43724663060956 + H14 ;
1749546   +   H15  =     2.87870499074164 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 2.87870499074164 + H15 ;
1749547   +   H16  =    -1.50303768685501 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.50303768685501 + H16 ;
1749548   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1749549   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1749550   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1749551   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1749552   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
1749553   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
1749554   +END;
MPRINT(EM_DIAGRAM):   END;
1749555   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749556   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1749557   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1749558   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1749559   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1749560   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
1749561   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
1749562   +END;
MPRINT(EM_DIAGRAM):   END;
1749563   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749564   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1749565   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749566   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1749567   +   P_DepVar1  =    -5.40879672831374 * H11  +    -2.30275649942132 * H12
1749568   +          +     3.92987383270932 * H13  +    -5.94814919610295 * H14
1749569   +          +      8.1691029468057 * H15  +     1.41618936614917 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.40879672831374 * H11 + -2.30275649942132 * H12 +
3.92987383270932 * H13 + -5.94814919610295 * H14 + 8.1691029468057 * H15 + 1.41618936614917 *
H16 ;
1749570   +   P_DepVar1  =    -3.18163491507868 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.18163491507868 + P_DepVar1 ;
1749571   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1749572   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1749573   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1749574   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1749575   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1749576   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1749577   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1749578   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1749579   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1749580   +END;
MPRINT(EM_DIAGRAM):   END;
1749581   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1749582   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1749583   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1749584   +END;
MPRINT(EM_DIAGRAM):   END;
1749585   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1749586   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1749587   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1749588   +END;
MPRINT(EM_DIAGRAM):   END;
1749589   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749590   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1749591   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1749592   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1749593   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1749594   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1749595   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1749596   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1749597   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1749598   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1749599   +END;
MPRINT(EM_DIAGRAM):   END;
1749600   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1749601   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1749602   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1749603   +drop
1749604   +H11
1749605   +H12
1749606   +H13
1749607   +H14
1749608   +H15
1749609   +H16
1749610   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
1749611   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749612    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749613    quit;
1749614    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1749615    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1749616    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1749617    retain ID 2 Node "Neural28";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural28";
1749618    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1749619    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 556 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 556 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749620    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1749621    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749622    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 556 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 556 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749623    proc sort data=EMWS8.Neural28_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural28_variableset out=_temp2(keep=NAME CREATOR);
1749624    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749625    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.NEURAL28_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749626    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749627    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1749628    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1749629    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749630    proc contents data=EMWS8.Neural28_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural28_train out=_meta(keep=NAME) noprint;
1749631    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1749632    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1749633    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749634    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749635    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749636    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1749637    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749638    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749639    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1749640    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1749640  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 200 rows and 5 columns.
 
1749641    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749642    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1749643    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 200 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 200 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749644    filename _pref
1749644  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1749645    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1749646    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1749647   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1749648   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1749649   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1749650   +
1749651   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1749652   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1749653   +
1749654   +
1749655   +
1749656   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1749657   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1749658   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749659    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749660    quit;
1749661    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1749662    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1749663    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1749664    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1749665    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1749666    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749667    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1749668    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749669    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749670    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1749671    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749672    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749673    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749674    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1749675    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1749676    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749677    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1749678    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749679    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1749680    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749681    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749682    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749683    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1749684    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749685    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 46 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749686    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1749687    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1749687  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 0 rows and 5 columns.
 
1749688    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749689    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1749690    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 0 observations read from the data set WORK._TEMPX.
NOTE: 0 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 200 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749691    filename _pref
1749691  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1749692    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1749693    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1749694   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749695   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1749696   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1749697   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1749698   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1749699   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749700    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749701    quit;
1749702    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1749703    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1749704    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1749705    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1749706    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1749707    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749708    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1749709    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749710    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749711    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1749712    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749713    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749714    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749715    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1749716    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1749717    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749718    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1749719    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1749720    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1749721    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749722    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749723    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749724    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1749725    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749726    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1749727    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1749728    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1749728  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1749729    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749730    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1749731    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 204 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749732    filename _pref
1749732  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1749733    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1749734    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1749735   +
1749736   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1749737   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1749737  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1749738   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1749739   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1749740   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1749741   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1749742   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749743    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749744    quit;
1749745    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1749746    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1749747    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1749748    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1749749    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1749750    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749751    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1749752    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749753    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749754    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1749755    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749756    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749757    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749758    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1749759    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1749760    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749761    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1749762    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749763    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1749764    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749765    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749766    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749767    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1749768    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749769    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749770    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1749771    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1749771  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1749772    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749773    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1749774    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 243 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749775    filename _pref
1749775  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1749776    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1749777    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1749778   +
1749779   +
1749780   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1749781   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1749782   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1749783   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1749784   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1749785   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749786   +
1749787   +
1749788   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1749789   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1749790   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1749791   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1749792   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1749793   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749794   +
1749795   +
1749796   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1749797   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1749798   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1749799   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1749800   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1749801   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749802   +
1749803   +
1749804   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1749805   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1749806   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1749807   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1749808   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1749809   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749810   +
1749811   +
1749812   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1749813   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1749814   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1749815   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1749816   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1749817   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749818   +
1749819   +
1749820   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1749821   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1749822   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1749823   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1749824   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1749825   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749826   +
1749827   +
1749828   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1749829   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1749830   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1749831   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1749832   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1749833   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749834   +
1749835   +
1749836   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1749837   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1749838   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1749839   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1749840   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1749841   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1749842   +if
1749843   +_FILTERNORM1 not in ( '.')
1749844   + and
1749845   +_FILTERNORM2 not in ( '.')
1749846   + and
1749847   +_FILTERNORM3 not in ( '.')
1749848   + and
1749849   +_FILTERNORM4 not in ( '.')
1749850   + and
1749851   +_FILTERNORM5 not in ( '.')
1749852   + and
1749853   +_FILTERNORM6 not in ( '.')
1749854   + and
1749855   +_FILTERNORM7 not in ( ' ')
1749856   + and
1749857   +_FILTERNORM8 not in ( ' ')
1749858   +and
1749859   +( Dt_Customer ne .)
1749860   +and ( Income ne . and (Income<=107000))
1749861   +and ( Kidhome ne .)
1749862   +and ( MntFishProducts ne .)
1749863   +and ( MntFruits ne .)
1749864   +and ( MntGoldProds ne .)
1749865   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1749866   +and ( MntSweetProducts ne .)
1749867   +and ( MntWines ne .)
1749868   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1749869   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1749870   +and ( NumStorePurchases ne .)
1749871   +and ( NumWebPurchases ne .)
1749872   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1749873   +and ( Recency ne .)
1749874   +and ( Teenhome ne .)
1749875   +and ( Year_Birth ne .)
1749876   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1749877   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1749878   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1749879   +end;
MPRINT(EM_DIAGRAM):   end;
1749880   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1749881   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1749882    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1749883    quit;
1749884    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1749885    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1749886    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1749887    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1749888    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1749889    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749890    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1749891    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749892    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749893    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1749894    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749895    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749896    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749897    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1749898    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1749899    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749900    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1749901    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749902    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1749903    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749904    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749905    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1749906    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1749907    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1749908    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749909    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1749910    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1749910  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1749911    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1749912    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1749913    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 309 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1749914    %macro varDept(fcmpdata=,id=);
1749915    %global nobs&id scoreFlag&id;
1749916    %let scoreFlag&id = 0;
1749917    %if &id=1 or ^&fcmpStart %then %do;
1749918    proc sort data=&fcmpdata out=_temp&id nodupkey;
1749919    by NAME;
1749920    where id=&id and LHS in( %let j=1;
1749921    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1749922    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1749923    "&var" %let j = %eval(&j+1);
1749924    %end;
1749925    );
1749926    run;
1749927    %let dsid = %sysfunc(open(_temp&id));
1749928    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1749929    %let dsid = %sysfunc(close(&dsid));
1749930    %if &&nobs&id %then %do;
1749931    %let scoreFlag&id = 1;
1749932    %let fcmpStart = 1;
1749933    %end;
1749934    %else %let fcmpStart = 0;
1749935    %end;
1749936    %else %do;
1749937    proc sort data=&fcmpdata out=_tempid;
1749938    where id=&id;
1749939    by LHS;
1749940    run;
1749941    %let dsid = %sysfunc(open(_tempid));
1749942    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1749943    %let dsid = %sysfunc(close(&dsid));
1749944    %if ^&&nobs&id %then %do;
1749945    proc datasets lib=work nolist;
1749946    delete _tempid;
1749947    run;
1749948    quit;
1749949    %end;
1749950    %else %do;
1749951    data _tempAll;
1749952    set %let j=%eval(&id-1);
1749953    %do x=1 %to &j;
1749954    %if &&nobs&x %then %do;
1749955    _temp&x %end;
1749956    %end;
1749957    ;
1749958    run;
1749959    proc sql;
1749960    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1749960  ! work._tempid p2 where p.name=p2.lhs;
1749961    quit;
1749962    data _temp&id;
1749963    set _temp&id;
1749964    where LHS ne '' and NAME ne '' and Node ne '';
1749965    run;
1749966    proc datasets lib=work nolist;
1749967    delete _tempAll;
1749968    run;
1749969    %let dsid = %sysfunc(open(_temp&id));
1749970    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1749971    %let dsid = %sysfunc(close(&dsid));
1749972    %if ^&&nobs&id %then %do;
1749973    proc datasets lib=work nolist;
1749974    delete _temp&id;
1749975    run;
1749976    quit;
1749977    %end;
1749978    %else %do;
1749979    %let scoreFlag&id = 1;
1749980    data _temp&id;
1749981    set _temp&id;
1749982    where LHS ne NAME and node ne '';
1749983    run;
1749984    %let dsid = %sysfunc(open(_temp&id));
1749985    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1749986    %let dsid = %sysfunc(close(&dsid));
1749987    %if ^&&nobs&id %then %do;
1749988    proc datasets lib=work nolist;
1749989    delete _temp&id;
1749990    run;
1749991    quit;
1749992    %end;
1749993    %else %do;
1749994    proc sort data=_temp&id nodupkey;
1749995    by LHS NAME;
1749996    run;
1749997    %end;
1749998    %end;
1749999    %end;
1750000    %end;
1750001    %mend varDept;
1750002    %macro optCode(outdata=fcmpdata);
1750003    %global fcmpStart;
1750004    %let fcmpStart = 0;
1750005    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1750006    %let NumNodes=9;
1750007    %do k=1 %to &NumNodes;
1750008    %vardept(fcmpdata=&outdata, id=&k);
1750009    %end;
1750010    %mend optCode;
1750011    %optcode(outData=EMWS8.Ensmbl8_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 30 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 22 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 8 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 8 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 23 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP2.
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 31 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1750012    filename _pref
1750012  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas";
1750013    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750014    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas.
1750015   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1750016   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1750017   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1750018   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1750019   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1750020   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1750021   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1750022   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1750023   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1750024   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1750025   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1750026   +LENGTH _WARN_ $4
1750027   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1750028   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1750029   +
1750030   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1750031   +
1750032   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1750033   +
1750034   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1750035   +
1750036   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1750037   +
1750038   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1750039   +
1750040   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1750041   +
1750042   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1750043   +
1750044   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1750045   +
1750046   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1750047   +
1750048   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1750049   +
1750050   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1750051   +
1750052   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1750053   +
1750054   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1750055   +
1750056   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1750057   +
1750058   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750059   +*** Checking missing input Interval
1750060   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1750061   +
1750062   +IF NMISS(
1750063   +   AcceptedCmpTotal ,
1750064   +   Mnt ,
1750065   +   MntMeatProducts ,
1750066   +   NumCatalogPurchases ,
1750067   +   RFMstat ,
1750068   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1750069   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1750070   +
1750071   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1750072   +END;
MPRINT(EM_DIAGRAM):   END;
1750073   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750074   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1750075   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750076   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750077   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1750078   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1750079   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1750080   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1750081   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1750082   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1750083   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1750084   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1750085   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1750086   +END;
MPRINT(EM_DIAGRAM):   END;
1750087   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750088   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1750089   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1750090   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1750091   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1750092   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1750093   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1750094   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1750095   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1750096   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1750097   +   ELSE S_NumCatalogPurchases
1750098   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1750099   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1750100   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1750101   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1750102   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1750103   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1750104   +END;
MPRINT(EM_DIAGRAM):   END;
1750105   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750106   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1750107   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750108   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750109   +   H1x1_1  =     0.21234921669572 * S_AcceptedCmpTotal
1750110   +          +     0.01945817648377 * S_Mnt  +     0.10373621819131 *
1750111   +        S_MntMeatProducts  +     0.14724080002257 * S_NumCatalogPurchases
1750112   +          +     0.01465421656969 * S_RFMstat  +    -0.37839603073195 *
1750113   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.21234921669572 * S_AcceptedCmpTotal + 0.01945817648377 *
S_Mnt + 0.10373621819131 * S_MntMeatProducts + 0.14724080002257 * S_NumCatalogPurchases +
0.01465421656969 * S_RFMstat + -0.37839603073195 * S_Recency ;
1750114   +   H1x1_2  =      1.6456490248475 * S_AcceptedCmpTotal
1750115   +          +    -4.36126689821345 * S_Mnt  +    -5.34341350667797 *
1750116   +        S_MntMeatProducts  +    -0.50775340376834 * S_NumCatalogPurchases
1750117   +          +    -3.77547933008523 * S_RFMstat  +    -0.35687395481612 *
1750118   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.6456490248475 * S_AcceptedCmpTotal + -4.36126689821345 *
S_Mnt + -5.34341350667797 * S_MntMeatProducts + -0.50775340376834 * S_NumCatalogPurchases +
-3.77547933008523 * S_RFMstat + -0.35687395481612 * S_Recency ;
1750119   +   H1x1_3  =     2.25495773414966 * S_AcceptedCmpTotal
1750120   +          +     -11.006968240108 * S_Mnt  +     5.29014268166876 *
1750121   +        S_MntMeatProducts  +     1.38527755695319 * S_NumCatalogPurchases
1750122   +          +    -0.25229120510632 * S_RFMstat  +    -0.96545690161812 *
1750123   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 2.25495773414966 * S_AcceptedCmpTotal + -11.006968240108 *
S_Mnt + 5.29014268166876 * S_MntMeatProducts + 1.38527755695319 * S_NumCatalogPurchases +
-0.25229120510632 * S_RFMstat + -0.96545690161812 * S_Recency ;
1750124   +   H1x1_1  =    -1.44629643725438 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.44629643725438 + H1x1_1 ;
1750125   +   H1x1_2  =    -8.96045510766511 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -8.96045510766511 + H1x1_2 ;
1750126   +   H1x1_3  =    -3.43663513496723 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.43663513496723 + H1x1_3 ;
1750127   +   H1x1_4  = 0;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0;
1750128   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 );
1750129   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1750130   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1750131   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1750132   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1750133   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1750134   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1750135   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1750136   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1750137   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1750138   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1750139   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1750140   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1750141   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1750142   +END;
MPRINT(EM_DIAGRAM):   END;
1750143   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750144   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1750145   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1750146   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1750147   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1750148   +END;
MPRINT(EM_DIAGRAM):   END;
1750149   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750150   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1750151   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750152   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750153   +   P_DepVar1  =     15.9155817268417 * H1x1_1  +    -26.1877719603903 * H1x1_2
1750154   +          +     3.03900855168824 * H1x1_3  +    -8.12584282800012 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 15.9155817268417 * H1x1_1 + -26.1877719603903 * H1x1_2 +
3.03900855168824 * H1x1_3 + -8.12584282800012 * H1x1_4 ;
1750155   +   P_DepVar1  =    -0.43873072735423 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.43873072735423 + P_DepVar1 ;
1750156   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1750157   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1750158   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1750159   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1750160   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1750161   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1750162   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1750163   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1750164   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1750165   +END;
MPRINT(EM_DIAGRAM):   END;
1750166   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750167   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1750168   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1750169   +END;
MPRINT(EM_DIAGRAM):   END;
1750170   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1750171   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1750172   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1750173   +END;
MPRINT(EM_DIAGRAM):   END;
1750174   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750175   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1750176   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750177   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1750178   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1750179   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1750180   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1750181   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1750182   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1750183   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1750184   +END;
MPRINT(EM_DIAGRAM):   END;
1750185   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1750186   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1750187   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1750188   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1750189    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1750190    quit;
1750191    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1750192    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1750193    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1750194    retain ID 2 Node "AutoNeural33";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural33";
1750195    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1750196    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 560 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 560 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750197    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1750198    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750199    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 560 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 560 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750200    proc sort data=EMWS8.AutoNeural33_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural33_variableset out=_temp2(keep=NAME
CREATOR);
1750201    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750202    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.AUTONEURAL33_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750203    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750204    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1750205    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1750206    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750207    proc contents data=EMWS8.AutoNeural33_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural33_train out=_meta(keep=NAME) noprint;
1750208    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 57 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750209    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1750210    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750211    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 57 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 57 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750212    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750213    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1750214    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750215    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 57 observations read from the data set WORK._META.
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 57 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750216    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1750217    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1750217  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 264 rows and 5 columns.
 
1750218    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750219    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1750220    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 264 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 264 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750221    filename _pref
1750221  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1750222    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750223    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1750224   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1750225   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1750226   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1750227   +
1750228   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1750229   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1750230   +
1750231   +
1750232   +
1750233   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1750234   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1750235   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1750236    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1750237    quit;
1750238    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1750239    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1750240    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1750241    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1750242    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1750243    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750244    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1750245    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750246    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750247    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1750248    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750249    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750250    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750251    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1750252    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1750253    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750254    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1750255    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1750256    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1750257    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750258    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750259    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750260    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1750261    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750262    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 46 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750263    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1750264    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1750264  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 0 rows and 5 columns.
 
1750265    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750266    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1750267    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 0 observations read from the data set WORK._TEMPX.
NOTE: 0 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 264 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1750268    filename _pref
1750268  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1750269    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750270    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1750271   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1750272   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1750273   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1750274   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1750275   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1750276   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1750277    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1750278    quit;
1750279    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1750280    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1750281    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1750282    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1750283    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1750284    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750285    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1750286    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750287    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750288    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1750289    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750290    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1750291    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750292    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1750293    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1750294    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750295    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1750296    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1750297    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1750298    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750299    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750300    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750301    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1750302    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750303    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750304    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1750305    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1750305  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1750306    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750307    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1750308    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 268 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750309    filename _pref
1750309  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1750310    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750311    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1750312   +
1750313   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1750314   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1750314  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1750315   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1750316   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1750317   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1750318   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1750319   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1750320    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1750321    quit;
1750322    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1750323    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1750324    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1750325    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1750326    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1750327    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750328    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1750329    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750330    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750331    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1750332    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750333    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750334    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750335    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1750336    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1750337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750338    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1750339    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750340    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1750341    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750342    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750343    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750344    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1750345    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750346    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750347    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1750348    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1750348  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1750349    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750350    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1750351    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 307 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750352    filename _pref
1750352  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1750353    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750354    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1750355   +
1750356   +
1750357   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1750358   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1750359   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1750360   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1750361   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1750362   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750363   +
1750364   +
1750365   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1750366   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1750367   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1750368   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1750369   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1750370   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750371   +
1750372   +
1750373   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1750374   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1750375   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1750376   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1750377   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1750378   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750379   +
1750380   +
1750381   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1750382   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1750383   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1750384   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1750385   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1750386   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750387   +
1750388   +
1750389   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1750390   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1750391   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1750392   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1750393   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1750394   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750395   +
1750396   +
1750397   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1750398   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1750399   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1750400   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1750401   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1750402   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750403   +
1750404   +
1750405   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1750406   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1750407   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1750408   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1750409   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1750410   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750411   +
1750412   +
1750413   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1750414   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1750415   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1750416   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1750417   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1750418   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1750419   +if
1750420   +_FILTERNORM1 not in ( '.')
1750421   + and
1750422   +_FILTERNORM2 not in ( '.')
1750423   + and
1750424   +_FILTERNORM3 not in ( '.')
1750425   + and
1750426   +_FILTERNORM4 not in ( '.')
1750427   + and
1750428   +_FILTERNORM5 not in ( '.')
1750429   + and
1750430   +_FILTERNORM6 not in ( '.')
1750431   + and
1750432   +_FILTERNORM7 not in ( ' ')
1750433   + and
1750434   +_FILTERNORM8 not in ( ' ')
1750435   +and
1750436   +( Dt_Customer ne .)
1750437   +and ( Income ne . and (Income<=107000))
1750438   +and ( Kidhome ne .)
1750439   +and ( MntFishProducts ne .)
1750440   +and ( MntFruits ne .)
1750441   +and ( MntGoldProds ne .)
1750442   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1750443   +and ( MntSweetProducts ne .)
1750444   +and ( MntWines ne .)
1750445   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1750446   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1750447   +and ( NumStorePurchases ne .)
1750448   +and ( NumWebPurchases ne .)
1750449   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1750450   +and ( Recency ne .)
1750451   +and ( Teenhome ne .)
1750452   +and ( Year_Birth ne .)
1750453   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1750454   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1750455   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1750456   +end;
MPRINT(EM_DIAGRAM):   end;
1750457   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1750458   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1750459    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1750460    quit;
1750461    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1750462    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1750463    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1750464    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1750465    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1750466    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750467    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1750468    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750469    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750470    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1750471    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750472    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750473    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750474    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1750475    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1750476    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750477    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1750478    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750479    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1750480    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750481    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750482    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1750483    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1750484    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1750485    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750486    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1750487    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1750487  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1750488    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1750489    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1750490    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 373 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1750491    %macro varDept(fcmpdata=,id=);
1750492    %global nobs&id scoreFlag&id;
1750493    %let scoreFlag&id = 0;
1750494    %if &id=1 or ^&fcmpStart %then %do;
1750495    proc sort data=&fcmpdata out=_temp&id nodupkey;
1750496    by NAME;
1750497    where id=&id and LHS in( %let j=1;
1750498    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1750499    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1750500    "&var" %let j = %eval(&j+1);
1750501    %end;
1750502    );
1750503    run;
1750504    %let dsid = %sysfunc(open(_temp&id));
1750505    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1750506    %let dsid = %sysfunc(close(&dsid));
1750507    %if &&nobs&id %then %do;
1750508    %let scoreFlag&id = 1;
1750509    %let fcmpStart = 1;
1750510    %end;
1750511    %else %let fcmpStart = 0;
1750512    %end;
1750513    %else %do;
1750514    proc sort data=&fcmpdata out=_tempid;
1750515    where id=&id;
1750516    by LHS;
1750517    run;
1750518    %let dsid = %sysfunc(open(_tempid));
1750519    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1750520    %let dsid = %sysfunc(close(&dsid));
1750521    %if ^&&nobs&id %then %do;
1750522    proc datasets lib=work nolist;
1750523    delete _tempid;
1750524    run;
1750525    quit;
1750526    %end;
1750527    %else %do;
1750528    data _tempAll;
1750529    set %let j=%eval(&id-1);
1750530    %do x=1 %to &j;
1750531    %if &&nobs&x %then %do;
1750532    _temp&x %end;
1750533    %end;
1750534    ;
1750535    run;
1750536    proc sql;
1750537    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1750537  ! work._tempid p2 where p.name=p2.lhs;
1750538    quit;
1750539    data _temp&id;
1750540    set _temp&id;
1750541    where LHS ne '' and NAME ne '' and Node ne '';
1750542    run;
1750543    proc datasets lib=work nolist;
1750544    delete _tempAll;
1750545    run;
1750546    %let dsid = %sysfunc(open(_temp&id));
1750547    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1750548    %let dsid = %sysfunc(close(&dsid));
1750549    %if ^&&nobs&id %then %do;
1750550    proc datasets lib=work nolist;
1750551    delete _temp&id;
1750552    run;
1750553    quit;
1750554    %end;
1750555    %else %do;
1750556    %let scoreFlag&id = 1;
1750557    data _temp&id;
1750558    set _temp&id;
1750559    where LHS ne NAME and node ne '';
1750560    run;
1750561    %let dsid = %sysfunc(open(_temp&id));
1750562    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1750563    %let dsid = %sysfunc(close(&dsid));
1750564    %if ^&&nobs&id %then %do;
1750565    proc datasets lib=work nolist;
1750566    delete _temp&id;
1750567    run;
1750568    quit;
1750569    %end;
1750570    %else %do;
1750571    proc sort data=_temp&id nodupkey;
1750572    by LHS NAME;
1750573    run;
1750574    %end;
1750575    %end;
1750576    %end;
1750577    %end;
1750578    %mend varDept;
1750579    %macro optCode(outdata=fcmpdata);
1750580    %global fcmpStart;
1750581    %let fcmpStart = 0;
1750582    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1750583    %let NumNodes=9;
1750584    %do k=1 %to &NumNodes;
1750585    %vardept(fcmpdata=&outdata, id=&k);
1750586    %end;
1750587    %mend optCode;
1750588    %optcode(outData=EMWS8.Ensmbl8_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 42 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 30 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 12 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 23 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TEMP2.
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 35 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1750589    filename _pref
1750589  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas";
1750590    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1750591    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas.
1750592   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1750593   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1750594   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1750595   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1750596   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1750597   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1750598   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1750599   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1750600   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1750601   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1750602   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1750603   +LENGTH _WARN_ $4
1750604   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1750605   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1750606   +
1750607   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1750608   +
1750609   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1750610   +
1750611   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
1750612   +
1750613   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1750614   +
1750615   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1750616   +
1750617   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1750618   +
1750619   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1750620   +
1750621   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1750622   +
1750623   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1750624   +
1750625   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1750626   +
1750627   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1750628   +
1750629   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1750630   +
1750631   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1750632   +
1750633   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1750634   +
1750635   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1750636   +
1750637   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1750638   +
1750639   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1750640   +
1750641   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1750642   +
1750643   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1750644   +
1750645   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1750646   +
1750647   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1750648   +
1750649   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1750650   +
1750651   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1750652   +
1750653   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1750654   +
1750655   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1750656   +
1750657   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1750658   +
1750659   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1750660   +
1750661   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1750662   +
1750663   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1750664   +
1750665   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1750666   +
1750667   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1750668   +
1750669   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1750670   +
1750671   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1750672   +
1750673   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1750674   +
1750675   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1750676   +
1750677   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1750678   +
1750679   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1750680   +
1750681   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1750682   +
1750683   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1750684   +
1750685   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1750686   +
1750687   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1750688   +
1750689   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1750690   +
1750691   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1750692   +
1750693   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1750694   +
1750695   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1750696   +
1750697   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1750698   +
1750699   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750700   +*** Checking missing input Interval
1750701   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1750702   +
1750703   +IF NMISS(
1750704   +   AcceptedCmpTotal ,
1750705   +   Mnt ,
1750706   +   MntMeatProducts ,
1750707   +   NumCatalogPurchases ,
1750708   +   RFMstat ,
1750709   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases
, RFMstat , Recency ) THEN DO;
1750710   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1750711   +
1750712   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1750713   +END;
MPRINT(EM_DIAGRAM):   END;
1750714   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750715   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1750716   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750717   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750718   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1750719   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1750720   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1750721   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1750722   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1750723   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
1750724   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1750725   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1750726   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1750727   +END;
MPRINT(EM_DIAGRAM):   END;
1750728   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750729   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1750730   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1750731   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1750732   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1750733   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1750734   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1750735   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1750736   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1750737   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
1750738   +   ELSE S_NumCatalogPurchases
1750739   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
1750740   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
1750741   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1750742   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1750743   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1750744   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1750745   +END;
MPRINT(EM_DIAGRAM):   END;
1750746   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750747   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1750748   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750749   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750750   +   H1x1_1  =     2.10717134491045 * S_AcceptedCmpTotal
1750751   +          +    -10.9799187882689 * S_Mnt  +     3.17619086363109 *
1750752   +        S_MntMeatProducts  +     0.58522050540174 * S_NumCatalogPurchases
1750753   +          +     0.10457500953086 * S_RFMstat  +    -0.59708195840656 *
1750754   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 2.10717134491045 * S_AcceptedCmpTotal + -10.9799187882689 *
S_Mnt + 3.17619086363109 * S_MntMeatProducts + 0.58522050540174 * S_NumCatalogPurchases +
0.10457500953086 * S_RFMstat + -0.59708195840656 * S_Recency ;
1750755   +   H1x1_2  =    -1.09600222674288 * S_AcceptedCmpTotal
1750756   +          +    -2.75188573882189 * S_Mnt  +     2.38829776780629 *
1750757   +        S_MntMeatProducts  +     2.37290115499231 * S_NumCatalogPurchases
1750758   +          +    -1.67864747205449 * S_RFMstat  +    -1.87700204299542 *
1750759   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.09600222674288 * S_AcceptedCmpTotal + -2.75188573882189 *
S_Mnt + 2.38829776780629 * S_MntMeatProducts + 2.37290115499231 * S_NumCatalogPurchases +
-1.67864747205449 * S_RFMstat + -1.87700204299542 * S_Recency ;
1750760   +   H1x1_3  =     0.24593136036671 * S_AcceptedCmpTotal
1750761   +          +     0.98275447305236 * S_Mnt  +     1.52686649163215 *
1750762   +        S_MntMeatProducts  +     1.08491172792697 * S_NumCatalogPurchases
1750763   +          +    -6.31220731697864 * S_RFMstat  +    -2.08472878456829 *
1750764   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.24593136036671 * S_AcceptedCmpTotal + 0.98275447305236 *
S_Mnt + 1.52686649163215 * S_MntMeatProducts + 1.08491172792697 * S_NumCatalogPurchases +
-6.31220731697864 * S_RFMstat + -2.08472878456829 * S_Recency ;
1750765   +   H1x1_4  =     1.35296744918554 * S_AcceptedCmpTotal
1750766   +          +    -3.58727753695297 * S_Mnt  +    -6.35187991517409 *
1750767   +        S_MntMeatProducts  +    -1.41725838894141 * S_NumCatalogPurchases
1750768   +          +     -2.5174617752956 * S_RFMstat  +     0.27284317719271 *
1750769   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.35296744918554 * S_AcceptedCmpTotal + -3.58727753695297 *
S_Mnt + -6.35187991517409 * S_MntMeatProducts + -1.41725838894141 * S_NumCatalogPurchases +
-2.5174617752956 * S_RFMstat + 0.27284317719271 * S_Recency ;
1750770   +   H1x1_5  =     1.41560412529603 * S_AcceptedCmpTotal
1750771   +          +     2.25142479190183 * S_Mnt  +      0.2775616702254 *
1750772   +        S_MntMeatProducts  +     -0.4118907005017 * S_NumCatalogPurchases
1750773   +          +     0.38803464834347 * S_RFMstat  +    -0.81750268679565 *
1750774   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.41560412529603 * S_AcceptedCmpTotal + 2.25142479190183 *
S_Mnt + 0.2775616702254 * S_MntMeatProducts + -0.4118907005017 * S_NumCatalogPurchases +
0.38803464834347 * S_RFMstat + -0.81750268679565 * S_Recency ;
1750775   +   H1x1_1  =    -1.94381314805925 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.94381314805925 + H1x1_1 ;
1750776   +   H1x1_2  =     -1.4831757685406 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -1.4831757685406 + H1x1_2 ;
1750777   +   H1x1_3  =    -0.53539803191548 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.53539803191548 + H1x1_3 ;
1750778   +   H1x1_4  =    -5.07257058520645 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -5.07257058520645 + H1x1_4 ;
1750779   +   H1x1_5  =    -3.95581011117601 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.95581011117601 + H1x1_5 ;
1750780   +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
1750781   +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
1750782   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1750783   +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
1750784   +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
1750785   +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
1750786   +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
1750787   +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
1750788   +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
1750789   +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
1750790   +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
1750791   +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
1750792   +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
1750793   +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
1750794   +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
1750795   +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
1750796   +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
1750797   +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
1750798   +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
1750799   +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
1750800   +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
1750801   +END;
MPRINT(EM_DIAGRAM):   END;
1750802   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750803   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1750804   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1750805   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1750806   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1750807   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1750808   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1750809   +END;
MPRINT(EM_DIAGRAM):   END;
1750810   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750811   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1750812   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750813   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750814   +   H1x2_1  =    -1.55686119998165 * S_AcceptedCmpTotal
1750815   +          +    -0.26111571781978 * S_Mnt  +    -1.44938218805988 *
1750816   +        S_MntMeatProducts  +     0.04086123541942 * S_NumCatalogPurchases
1750817   +          +    -0.80214702507913 * S_RFMstat  +     0.70413979175849 *
1750818   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.55686119998165 * S_AcceptedCmpTotal + -0.26111571781978 *
S_Mnt + -1.44938218805988 * S_MntMeatProducts + 0.04086123541942 * S_NumCatalogPurchases +
-0.80214702507913 * S_RFMstat + 0.70413979175849 * S_Recency ;
1750819   +   H1x2_2  =    -1.89013114756444 * S_AcceptedCmpTotal
1750820   +          +     2.02645277032883 * S_Mnt  +     0.33300450318575 *
1750821   +        S_MntMeatProducts  +    -3.49523435320164 * S_NumCatalogPurchases
1750822   +          +    -0.54366042810185 * S_RFMstat  +    -0.96821243793862 *
1750823   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -1.89013114756444 * S_AcceptedCmpTotal + 2.02645277032883 *
S_Mnt + 0.33300450318575 * S_MntMeatProducts + -3.49523435320164 * S_NumCatalogPurchases +
-0.54366042810185 * S_RFMstat + -0.96821243793862 * S_Recency ;
1750824   +   H1x2_3  =    -0.37493223935971 * S_AcceptedCmpTotal
1750825   +          +     0.44222577344261 * S_Mnt  +    -2.29203252552751 *
1750826   +        S_MntMeatProducts  +    -2.51799836083289 * S_NumCatalogPurchases
1750827   +          +     0.79676408136588 * S_RFMstat  +    -1.33777715205059 *
1750828   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.37493223935971 * S_AcceptedCmpTotal + 0.44222577344261 *
S_Mnt + -2.29203252552751 * S_MntMeatProducts + -2.51799836083289 * S_NumCatalogPurchases +
0.79676408136588 * S_RFMstat + -1.33777715205059 * S_Recency ;
1750829   +   H1x2_4  =     0.61023216239118 * S_AcceptedCmpTotal
1750830   +          +     -1.2504451910923 * S_Mnt  +     1.08805550572067 *
1750831   +        S_MntMeatProducts  +     0.42462128634087 * S_NumCatalogPurchases
1750832   +          +     0.47301106041065 * S_RFMstat  +    -2.61753144043135 *
1750833   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.61023216239118 * S_AcceptedCmpTotal + -1.2504451910923 *
S_Mnt + 1.08805550572067 * S_MntMeatProducts + 0.42462128634087 * S_NumCatalogPurchases +
0.47301106041065 * S_RFMstat + -2.61753144043135 * S_Recency ;
1750834   +   H1x2_5  =    -1.41618915627784 * S_AcceptedCmpTotal
1750835   +          +    -1.13785141950187 * S_Mnt  +    -1.73667107974481 *
1750836   +        S_MntMeatProducts  +      3.1366199093076 * S_NumCatalogPurchases
1750837   +          +    -1.94563130199796 * S_RFMstat  +       2.512838942818 *
1750838   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.41618915627784 * S_AcceptedCmpTotal + -1.13785141950187 *
S_Mnt + -1.73667107974481 * S_MntMeatProducts + 3.1366199093076 * S_NumCatalogPurchases +
-1.94563130199796 * S_RFMstat + 2.512838942818 * S_Recency ;
1750839   +   H1x2_1  =     0.73112846873387 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.73112846873387 + H1x2_1 ;
1750840   +   H1x2_2  =    -0.66717106615524 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.66717106615524 + H1x2_2 ;
1750841   +   H1x2_3  =      2.7125530739338 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.7125530739338 + H1x2_3 ;
1750842   +   H1x2_4  =    -1.39079027168122 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -1.39079027168122 + H1x2_4 ;
1750843   +   H1x2_5  =     -1.5266283403396 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -1.5266283403396 + H1x2_5 ;
1750844   +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
1750845   +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
1750846   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1750847   +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
1750848   +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
1750849   +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
1750850   +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
1750851   +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
1750852   +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
1750853   +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
1750854   +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
1750855   +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
1750856   +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
1750857   +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
1750858   +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
1750859   +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
1750860   +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
1750861   +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
1750862   +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
1750863   +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
1750864   +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
1750865   +END;
MPRINT(EM_DIAGRAM):   END;
1750866   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750867   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1750868   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1750869   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1750870   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1750871   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1750872   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1750873   +END;
MPRINT(EM_DIAGRAM):   END;
1750874   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750875   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1750876   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750877   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750878   +   H1x3_1  =     1.55893522013734 * S_AcceptedCmpTotal
1750879   +          +    -1.16802167955541 * S_Mnt  +    -1.60360119780136 *
1750880   +        S_MntMeatProducts  +     0.47774394371528 * S_NumCatalogPurchases
1750881   +          +      -0.530718682766 * S_RFMstat  +    -2.44187650282709 *
1750882   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.55893522013734 * S_AcceptedCmpTotal + -1.16802167955541 *
S_Mnt + -1.60360119780136 * S_MntMeatProducts + 0.47774394371528 * S_NumCatalogPurchases +
-0.530718682766 * S_RFMstat + -2.44187650282709 * S_Recency ;
1750883   +   H1x3_2  =     1.06465525219753 * S_AcceptedCmpTotal
1750884   +          +    -4.15619528335918 * S_Mnt  +     1.95067813512976 *
1750885   +        S_MntMeatProducts  +    -2.07670102753791 * S_NumCatalogPurchases
1750886   +          +     0.49910286851075 * S_RFMstat  +     0.93996026298479 *
1750887   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.06465525219753 * S_AcceptedCmpTotal + -4.15619528335918 *
S_Mnt + 1.95067813512976 * S_MntMeatProducts + -2.07670102753791 * S_NumCatalogPurchases +
0.49910286851075 * S_RFMstat + 0.93996026298479 * S_Recency ;
1750888   +   H1x3_3  =    -0.29105397796174 * S_AcceptedCmpTotal
1750889   +          +     2.11159454800566 * S_Mnt  +     1.67840031691295 *
1750890   +        S_MntMeatProducts  +    -2.40711178902336 * S_NumCatalogPurchases
1750891   +          +    -1.13747844076384 * S_RFMstat  +    -0.88756656082469 *
1750892   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.29105397796174 * S_AcceptedCmpTotal + 2.11159454800566 *
S_Mnt + 1.67840031691295 * S_MntMeatProducts + -2.40711178902336 * S_NumCatalogPurchases +
-1.13747844076384 * S_RFMstat + -0.88756656082469 * S_Recency ;
1750893   +   H1x3_4  =    -1.15703505358845 * S_AcceptedCmpTotal
1750894   +          +     0.30100889287849 * S_Mnt  +     0.55319963517684 *
1750895   +        S_MntMeatProducts  +    -0.02272785613118 * S_NumCatalogPurchases
1750896   +          +     0.43699534320691 * S_RFMstat  +     2.22910491450126 *
1750897   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -1.15703505358845 * S_AcceptedCmpTotal + 0.30100889287849 *
S_Mnt + 0.55319963517684 * S_MntMeatProducts + -0.02272785613118 * S_NumCatalogPurchases +
0.43699534320691 * S_RFMstat + 2.22910491450126 * S_Recency ;
1750898   +   H1x3_5  =    -0.42268650148557 * S_AcceptedCmpTotal
1750899   +          +    -2.38416083526034 * S_Mnt  +     2.41579845516974 *
1750900   +        S_MntMeatProducts  +     0.60973384003689 * S_NumCatalogPurchases
1750901   +          +    -1.12415629345715 * S_RFMstat  +    -0.59274912531616 *
1750902   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = -0.42268650148557 * S_AcceptedCmpTotal + -2.38416083526034 *
S_Mnt + 2.41579845516974 * S_MntMeatProducts + 0.60973384003689 * S_NumCatalogPurchases +
-1.12415629345715 * S_RFMstat + -0.59274912531616 * S_Recency ;
1750903   +   H1x3_1  =     0.20894643335542 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.20894643335542 + H1x3_1 ;
1750904   +   H1x3_2  =     2.19187718990043 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 2.19187718990043 + H1x3_2 ;
1750905   +   H1x3_3  =    -0.63127842492526 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = -0.63127842492526 + H1x3_3 ;
1750906   +   H1x3_4  =     0.25735048029686 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.25735048029686 + H1x3_4 ;
1750907   +   H1x3_5  =     0.02632857468412 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.02632857468412 + H1x3_5 ;
1750908   +   H1x3_6  = 0;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0;
1750909   +   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 , H1x3_4 , H1x3_5 , H1x3_6 );
1750910   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1750911   +   H1x3_1  = EXP(H1x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_1 = EXP(H1x3_1 - _MAX_);
1750912   +   _SUM_ = _SUM_ + H1x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_1 ;
1750913   +   H1x3_2  = EXP(H1x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_2 = EXP(H1x3_2 - _MAX_);
1750914   +   _SUM_ = _SUM_ + H1x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_2 ;
1750915   +   H1x3_3  = EXP(H1x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_3 = EXP(H1x3_3 - _MAX_);
1750916   +   _SUM_ = _SUM_ + H1x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_3 ;
1750917   +   H1x3_4  = EXP(H1x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_4 = EXP(H1x3_4 - _MAX_);
1750918   +   _SUM_ = _SUM_ + H1x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_4 ;
1750919   +   H1x3_5  = EXP(H1x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_5 = EXP(H1x3_5 - _MAX_);
1750920   +   _SUM_ = _SUM_ + H1x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_5 ;
1750921   +   H1x3_6  = EXP(H1x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x3_6 = EXP(H1x3_6 - _MAX_);
1750922   +   _SUM_ = _SUM_ + H1x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x3_6 ;
1750923   +   H1x3_1  = H1x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 / _SUM_;
1750924   +   H1x3_2  = H1x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 / _SUM_;
1750925   +   H1x3_3  = H1x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 / _SUM_;
1750926   +   H1x3_4  = H1x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 / _SUM_;
1750927   +   H1x3_5  = H1x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 / _SUM_;
1750928   +   H1x3_6  = H1x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 / _SUM_;
1750929   +END;
MPRINT(EM_DIAGRAM):   END;
1750930   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1750931   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1750932   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1750933   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1750934   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1750935   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1750936   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1750937   +END;
MPRINT(EM_DIAGRAM):   END;
1750938   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750939   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1750940   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1750941   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1750942   +   H2x1_1  =    -1.91284328958208 * H1x1_1  +     1.01368252878712 * H1x1_2
1750943   +          +     0.88385633780482 * H1x1_3  +     0.77249497316744 * H1x1_4
1750944   +          +    -1.68467525644522 * H1x1_5  +     0.22872788371043 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.91284328958208 * H1x1_1 + 1.01368252878712 * H1x1_2 +
0.88385633780482 * H1x1_3 + 0.77249497316744 * H1x1_4 + -1.68467525644522 * H1x1_5 +
0.22872788371043 * H1x1_6 ;
1750945   +   H2x1_2  =    -0.08913678495622 * H1x1_1  +    -0.95704614273187 * H1x1_2
1750946   +          +    -1.13959611313765 * H1x1_3  +    -0.83269840840553 * H1x1_4
1750947   +          +    -1.34839441082903 * H1x1_5  +      1.4617930846853 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.08913678495622 * H1x1_1 + -0.95704614273187 * H1x1_2 +
-1.13959611313765 * H1x1_3 + -0.83269840840553 * H1x1_4 + -1.34839441082903 * H1x1_5 +
1.4617930846853 * H1x1_6 ;
1750948   +   H2x1_3  =     1.19406467163652 * H1x1_1  +     1.10561638775412 * H1x1_2
1750949   +          +     3.50091937687106 * H1x1_3  +     -0.7408464567923 * H1x1_4
1750950   +          +     1.07741096211456 * H1x1_5  +     -1.0098240718302 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.19406467163652 * H1x1_1 + 1.10561638775412 * H1x1_2 +
3.50091937687106 * H1x1_3 + -0.7408464567923 * H1x1_4 + 1.07741096211456 * H1x1_5 +
-1.0098240718302 * H1x1_6 ;
1750951   +   H2x1_4  =    -3.50840251474163 * H1x1_1  +    -0.53688540920235 * H1x1_2
1750952   +          +    -2.44435438360824 * H1x1_3  +     4.64213676100195 * H1x1_4
1750953   +          +     0.36171420259161 * H1x1_5  +     0.11106499550345 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -3.50840251474163 * H1x1_1 + -0.53688540920235 * H1x1_2 +
-2.44435438360824 * H1x1_3 + 4.64213676100195 * H1x1_4 + 0.36171420259161 * H1x1_5 +
0.11106499550345 * H1x1_6 ;
1750954   +   H2x1_5  =    -0.92126735850423 * H1x1_1  +    -0.50015259068425 * H1x1_2
1750955   +          +    -2.75013936022633 * H1x1_3  +     1.29804156504555 * H1x1_4
1750956   +          +    -2.88854985509185 * H1x1_5  +     3.51037817476003 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -0.92126735850423 * H1x1_1 + -0.50015259068425 * H1x1_2 +
-2.75013936022633 * H1x1_3 + 1.29804156504555 * H1x1_4 + -2.88854985509185 * H1x1_5 +
3.51037817476003 * H1x1_6 ;
1750957   +   H2x1_6  =      2.7601365695399 * H1x1_1  +     0.60343333315883 * H1x1_2
1750958   +          +    -4.84088835213795 * H1x1_3  +     0.04677091451384 * H1x1_4
1750959   +          +     1.99119511166544 * H1x1_5  +    -1.84413878989067 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 2.7601365695399 * H1x1_1 + 0.60343333315883 * H1x1_2 +
-4.84088835213795 * H1x1_3 + 0.04677091451384 * H1x1_4 + 1.99119511166544 * H1x1_5 +
-1.84413878989067 * H1x1_6 ;
1750960   +   H2x1_1  = H2x1_1  +    -0.55299168308518 * H1x2_1
1750961   +          +    -0.70728759829892 * H1x2_2  +     0.02028723479846 * H1x2_3
1750962   +          +      2.1534144925678 * H1x2_4  +    -0.60181736829464 * H1x2_5
1750963   +          +    -0.96627475596267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.55299168308518 * H1x2_1 + -0.70728759829892 *
H1x2_2 + 0.02028723479846 * H1x2_3 + 2.1534144925678 * H1x2_4 + -0.60181736829464 * H1x2_5 +
-0.96627475596267 * H1x2_6 ;
1750964   +   H2x1_2  = H2x1_2  +     1.02776882707138 * H1x2_1
1750965   +          +    -0.26186544699712 * H1x2_2  +    -0.59804813597981 * H1x2_3
1750966   +          +     0.13683572328121 * H1x2_4  +     -0.4527430044725 * H1x2_5
1750967   +          +     0.09804477894859 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 1.02776882707138 * H1x2_1 + -0.26186544699712 * H1x2_2
+ -0.59804813597981 * H1x2_3 + 0.13683572328121 * H1x2_4 + -0.4527430044725 * H1x2_5 +
0.09804477894859 * H1x2_6 ;
1750968   +   H2x1_3  = H2x1_3  +    -1.37372644240513 * H1x2_1
1750969   +          +    -1.41411080054855 * H1x2_2  +    -0.85635388175337 * H1x2_3
1750970   +          +     1.78033736245689 * H1x2_4  +    -0.32277639652206 * H1x2_5
1750971   +          +    -0.10095907241792 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -1.37372644240513 * H1x2_1 + -1.41411080054855 *
H1x2_2 + -0.85635388175337 * H1x2_3 + 1.78033736245689 * H1x2_4 + -0.32277639652206 * H1x2_5 +
-0.10095907241792 * H1x2_6 ;
1750972   +   H2x1_4  = H2x1_4  +     0.38975073179429 * H1x2_1
1750973   +          +      1.7999626274739 * H1x2_2  +    -0.54595798920563 * H1x2_3
1750974   +          +    -2.87794569741229 * H1x2_4  +     2.24407851876424 * H1x2_5
1750975   +          +    -0.78007016861264 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 0.38975073179429 * H1x2_1 + 1.7999626274739 * H1x2_2 +
-0.54595798920563 * H1x2_3 + -2.87794569741229 * H1x2_4 + 2.24407851876424 * H1x2_5 +
-0.78007016861264 * H1x2_6 ;
1750976   +   H2x1_5  = H2x1_5  +     1.68407538128685 * H1x2_1
1750977   +          +     2.69111816059998 * H1x2_2  +     0.12927675826764 * H1x2_3
1750978   +          +     -1.7263485913587 * H1x2_4  +    -2.15741343790643 * H1x2_5
1750979   +          +     1.95855676074934 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + 1.68407538128685 * H1x2_1 + 2.69111816059998 * H1x2_2
+ 0.12927675826764 * H1x2_3 + -1.7263485913587 * H1x2_4 + -2.15741343790643 * H1x2_5 +
1.95855676074934 * H1x2_6 ;
1750980   +   H2x1_6  = H2x1_6  +     0.31146846941645 * H1x2_1
1750981   +          +     0.33682375646593 * H1x2_2  +      1.6527641940739 * H1x2_3
1750982   +          +    -0.96403239328063 * H1x2_4  +    -1.11790253982232 * H1x2_5
1750983   +          +     -1.4251132059225 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + 0.31146846941645 * H1x2_1 + 0.33682375646593 * H1x2_2
+ 1.6527641940739 * H1x2_3 + -0.96403239328063 * H1x2_4 + -1.11790253982232 * H1x2_5 +
-1.4251132059225 * H1x2_6 ;
1750984   +   H2x1_1  = H2x1_1  +     0.47301275142195 * H1x3_1
1750985   +          +    -1.23391488243925 * H1x3_2  +    -1.81348351496647 * H1x3_3
1750986   +          +    -0.66473016828009 * H1x3_4  +     1.27670685567846 * H1x3_5
1750987   +          +     0.38481934719452 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.47301275142195 * H1x3_1 + -1.23391488243925 * H1x3_2
+ -1.81348351496647 * H1x3_3 + -0.66473016828009 * H1x3_4 + 1.27670685567846 * H1x3_5 +
0.38481934719452 * H1x3_6 ;
1750988   +   H2x1_2  = H2x1_2  +     0.35549808536734 * H1x3_1
1750989   +          +     0.36201179536458 * H1x3_2  +     1.04726425834791 * H1x3_3
1750990   +          +    -1.08276187248251 * H1x3_4  +     0.74248193765521 * H1x3_5
1750991   +          +     1.87596859340821 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.35549808536734 * H1x3_1 + 0.36201179536458 * H1x3_2
+ 1.04726425834791 * H1x3_3 + -1.08276187248251 * H1x3_4 + 0.74248193765521 * H1x3_5 +
1.87596859340821 * H1x3_6 ;
1750992   +   H2x1_3  = H2x1_3  +    -0.36667720681998 * H1x3_1
1750993   +          +      0.5256210995417 * H1x3_2  +    -0.44860423311788 * H1x3_3
1750994   +          +    -0.20913840911463 * H1x3_4  +    -0.76258888517092 * H1x3_5
1750995   +          +     0.20457555210609 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.36667720681998 * H1x3_1 + 0.5256210995417 * H1x3_2
+ -0.44860423311788 * H1x3_3 + -0.20913840911463 * H1x3_4 + -0.76258888517092 * H1x3_5 +
0.20457555210609 * H1x3_6 ;
1750996   +   H2x1_4  = H2x1_4  +     -0.5052323966606 * H1x3_1
1750997   +          +     0.57348008947054 * H1x3_2  +     0.36313882476736 * H1x3_3
1750998   +          +     2.54509537428676 * H1x3_4  +    -1.40462445002153 * H1x3_5
1750999   +          +     1.76488988390401 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.5052323966606 * H1x3_1 + 0.57348008947054 * H1x3_2
+ 0.36313882476736 * H1x3_3 + 2.54509537428676 * H1x3_4 + -1.40462445002153 * H1x3_5 +
1.76488988390401 * H1x3_6 ;
1751000   +   H2x1_5  = H2x1_5  +     -0.4555917406867 * H1x3_1
1751001   +          +     0.52745581365834 * H1x3_2  +    -0.82303556180885 * H1x3_3
1751002   +          +    -0.78981386250305 * H1x3_4  +     0.09307958113664 * H1x3_5
1751003   +          +     1.63202351822216 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.4555917406867 * H1x3_1 + 0.52745581365834 * H1x3_2
+ -0.82303556180885 * H1x3_3 + -0.78981386250305 * H1x3_4 + 0.09307958113664 * H1x3_5 +
1.63202351822216 * H1x3_6 ;
1751004   +   H2x1_6  = H2x1_6  +    -0.57563015009902 * H1x3_1
1751005   +          +     2.47575184377805 * H1x3_2  +    -0.91958118957044 * H1x3_3
1751006   +          +    -1.67916721690516 * H1x3_4  +     0.69514147486102 * H1x3_5
1751007   +          +    -0.75070900812889 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 + -0.57563015009902 * H1x3_1 + 2.47575184377805 * H1x3_2
+ -0.91958118957044 * H1x3_3 + -1.67916721690516 * H1x3_4 + 0.69514147486102 * H1x3_5 +
-0.75070900812889 * H1x3_6 ;
1751008   +   H2x1_1  =     0.44089803005479 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.44089803005479 + H2x1_1 ;
1751009   +   H2x1_2  =     0.84182794358826 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.84182794358826 + H2x1_2 ;
1751010   +   H2x1_3  =     0.09803371201388 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.09803371201388 + H2x1_3 ;
1751011   +   H2x1_4  =      -0.624591248343 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.624591248343 + H2x1_4 ;
1751012   +   H2x1_5  =      0.7596943675806 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.7596943675806 + H2x1_5 ;
1751013   +   H2x1_6  =     1.86613856151687 + H2x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.86613856151687 + H2x1_6 ;
1751014   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1751015   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1751016   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1751017   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1751018   +   H2x1_3  = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_3 = 1.0 / (1.0 + EXP(MIN( - H2x1_3 , _EXP_BAR)));
1751019   +   H2x1_4  = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_4 = 1.0 / (1.0 + EXP(MIN( - H2x1_4 , _EXP_BAR)));
1751020   +   H2x1_5  = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_5 = 1.0 / (1.0 + EXP(MIN( - H2x1_5 , _EXP_BAR)));
1751021   +   H2x1_6  = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_6 = 1.0 / (1.0 + EXP(MIN( - H2x1_6 , _EXP_BAR)));
1751022   +END;
MPRINT(EM_DIAGRAM):   END;
1751023   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1751024   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1751025   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1751026   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1751027   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1751028   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1751029   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1751030   +END;
MPRINT(EM_DIAGRAM):   END;
1751031   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751032   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1751033   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751034   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1751035   +   H2x2_1  =    -0.67599100831955 * H1x1_1  +     0.24077189312828 * H1x1_2
1751036   +          +      0.2000763543409 * H1x1_3  +    -1.82199808794926 * H1x1_4
1751037   +          +    -0.63614429983717 * H1x1_5  +     0.35027369588915 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.67599100831955 * H1x1_1 + 0.24077189312828 * H1x1_2 +
0.2000763543409 * H1x1_3 + -1.82199808794926 * H1x1_4 + -0.63614429983717 * H1x1_5 +
0.35027369588915 * H1x1_6 ;
1751038   +   H2x2_2  =    -2.86273409671688 * H1x1_1  +    -1.17210014090039 * H1x1_2
1751039   +          +     2.79815832312648 * H1x1_3  +     0.46361776813305 * H1x1_4
1751040   +          +      0.0798677597958 * H1x1_5  +    -0.75991454790943 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -2.86273409671688 * H1x1_1 + -1.17210014090039 * H1x1_2 +
2.79815832312648 * H1x1_3 + 0.46361776813305 * H1x1_4 + 0.0798677597958 * H1x1_5 +
-0.75991454790943 * H1x1_6 ;
1751041   +   H2x2_3  =     -0.6739829418862 * H1x1_1  +    -2.31169428380278 * H1x1_2
1751042   +          +     2.10300119718615 * H1x1_3  +    -0.00742357063683 * H1x1_4
1751043   +          +    -1.51041651747244 * H1x1_5  +    -0.17010696636548 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.6739829418862 * H1x1_1 + -2.31169428380278 * H1x1_2 +
2.10300119718615 * H1x1_3 + -0.00742357063683 * H1x1_4 + -1.51041651747244 * H1x1_5 +
-0.17010696636548 * H1x1_6 ;
1751044   +   H2x2_4  =    -1.50678102953218 * H1x1_1  +    -0.89959733379076 * H1x1_2
1751045   +          +     1.08933879000366 * H1x1_3  +      0.4160027440208 * H1x1_4
1751046   +          +     0.96602358671281 * H1x1_5  +     2.49695921665153 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -1.50678102953218 * H1x1_1 + -0.89959733379076 * H1x1_2 +
1.08933879000366 * H1x1_3 + 0.4160027440208 * H1x1_4 + 0.96602358671281 * H1x1_5 +
2.49695921665153 * H1x1_6 ;
1751047   +   H2x2_5  =      0.7197781324018 * H1x1_1  +     0.65156339723506 * H1x1_2
1751048   +          +     1.10688522196469 * H1x1_3  +    -0.18317373714845 * H1x1_4
1751049   +          +    -0.41607265841802 * H1x1_5  +    -1.97247962280317 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.7197781324018 * H1x1_1 + 0.65156339723506 * H1x1_2 +
1.10688522196469 * H1x1_3 + -0.18317373714845 * H1x1_4 + -0.41607265841802 * H1x1_5 +
-1.97247962280317 * H1x1_6 ;
1751050   +   H2x2_6  =     0.54986188496659 * H1x1_1  +    -1.79839449870258 * H1x1_2
1751051   +          +    -1.15036560870119 * H1x1_3  +     1.47969678061941 * H1x1_4
1751052   +          +     0.10597867235187 * H1x1_5  +     0.90300533681641 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.54986188496659 * H1x1_1 + -1.79839449870258 * H1x1_2 +
-1.15036560870119 * H1x1_3 + 1.47969678061941 * H1x1_4 + 0.10597867235187 * H1x1_5 +
0.90300533681641 * H1x1_6 ;
1751053   +   H2x2_1  = H2x2_1  +    -0.21000305943834 * H1x2_1
1751054   +          +    -0.32875528993365 * H1x2_2  +    -2.01191741391886 * H1x2_3
1751055   +          +     0.25433844143017 * H1x2_4  +    -0.22353514971516 * H1x2_5
1751056   +          +    -1.39994531215362 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21000305943834 * H1x2_1 + -0.32875528993365 *
H1x2_2 + -2.01191741391886 * H1x2_3 + 0.25433844143017 * H1x2_4 + -0.22353514971516 * H1x2_5 +
-1.39994531215362 * H1x2_6 ;
1751057   +   H2x2_2  = H2x2_2  +     0.97984435202354 * H1x2_1
1751058   +          +    -0.32249690006833 * H1x2_2  +    -1.39997315416199 * H1x2_3
1751059   +          +     -2.7808281862933 * H1x2_4  +    -0.16292745421241 * H1x2_5
1751060   +          +    -0.40444669273525 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.97984435202354 * H1x2_1 + -0.32249690006833 * H1x2_2
+ -1.39997315416199 * H1x2_3 + -2.7808281862933 * H1x2_4 + -0.16292745421241 * H1x2_5 +
-0.40444669273525 * H1x2_6 ;
1751061   +   H2x2_3  = H2x2_3  +      1.7332207906399 * H1x2_1
1751062   +          +     0.48772690844604 * H1x2_2  +    -0.03702571322482 * H1x2_3
1751063   +          +    -0.04073364631727 * H1x2_4  +    -0.91191013457442 * H1x2_5
1751064   +          +    -2.38736049861996 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.7332207906399 * H1x2_1 + 0.48772690844604 * H1x2_2 +
-0.03702571322482 * H1x2_3 + -0.04073364631727 * H1x2_4 + -0.91191013457442 * H1x2_5 +
-2.38736049861996 * H1x2_6 ;
1751065   +   H2x2_4  = H2x2_4  +    -0.06792429668775 * H1x2_1
1751066   +          +    -3.07222522712126 * H1x2_2  +     0.01320929156379 * H1x2_3
1751067   +          +     0.84459091213222 * H1x2_4  +    -0.95949143247045 * H1x2_5
1751068   +          +     0.02632878191094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.06792429668775 * H1x2_1 + -3.07222522712126 *
H1x2_2 + 0.01320929156379 * H1x2_3 + 0.84459091213222 * H1x2_4 + -0.95949143247045 * H1x2_5 +
0.02632878191094 * H1x2_6 ;
1751069   +   H2x2_5  = H2x2_5  +     0.13831659235384 * H1x2_1
1751070   +          +    -1.75598160312232 * H1x2_2  +     0.17047671926062 * H1x2_3
1751071   +          +    -0.45409084878331 * H1x2_4  +    -1.17540122389603 * H1x2_5
1751072   +          +     0.79706245066425 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 0.13831659235384 * H1x2_1 + -1.75598160312232 * H1x2_2
+ 0.17047671926062 * H1x2_3 + -0.45409084878331 * H1x2_4 + -1.17540122389603 * H1x2_5 +
0.79706245066425 * H1x2_6 ;
1751073   +   H2x2_6  = H2x2_6  +     1.74450762507234 * H1x2_1
1751074   +          +    -0.18999736448811 * H1x2_2  +    -0.82200918268165 * H1x2_3
1751075   +          +      1.8752098314092 * H1x2_4  +    -0.55366925571085 * H1x2_5
1751076   +          +     1.96032751350518 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 1.74450762507234 * H1x2_1 + -0.18999736448811 * H1x2_2
+ -0.82200918268165 * H1x2_3 + 1.8752098314092 * H1x2_4 + -0.55366925571085 * H1x2_5 +
1.96032751350518 * H1x2_6 ;
1751077   +   H2x2_1  = H2x2_1  +     1.05088385328525 * H1x3_1
1751078   +          +    -1.18748050069472 * H1x3_2  +     0.33686598960541 * H1x3_3
1751079   +          +     0.60467968457853 * H1x3_4  +     0.44997942659683 * H1x3_5
1751080   +          +     0.86372067144364 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 1.05088385328525 * H1x3_1 + -1.18748050069472 * H1x3_2
+ 0.33686598960541 * H1x3_3 + 0.60467968457853 * H1x3_4 + 0.44997942659683 * H1x3_5 +
0.86372067144364 * H1x3_6 ;
1751081   +   H2x2_2  = H2x2_2  +     0.54489966189284 * H1x3_1
1751082   +          +     0.63828892530684 * H1x3_2  +     1.36576672067523 * H1x3_3
1751083   +          +    -0.93080386349548 * H1x3_4  +    -0.53645684858865 * H1x3_5
1751084   +          +     0.80254310887989 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54489966189284 * H1x3_1 + 0.63828892530684 * H1x3_2
+ 1.36576672067523 * H1x3_3 + -0.93080386349548 * H1x3_4 + -0.53645684858865 * H1x3_5 +
0.80254310887989 * H1x3_6 ;
1751085   +   H2x2_3  = H2x2_3  +    -0.43326705547287 * H1x3_1
1751086   +          +     1.62130917530395 * H1x3_2  +     -1.9569471371487 * H1x3_3
1751087   +          +    -0.16690355216427 * H1x3_4  +     0.76588074497881 * H1x3_5
1751088   +          +    -0.80961698509146 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.43326705547287 * H1x3_1 + 1.62130917530395 * H1x3_2
+ -1.9569471371487 * H1x3_3 + -0.16690355216427 * H1x3_4 + 0.76588074497881 * H1x3_5 +
-0.80961698509146 * H1x3_6 ;
1751089   +   H2x2_4  = H2x2_4  +     0.14186336769381 * H1x3_1
1751090   +          +    -0.40313769302155 * H1x3_2  +     0.32907477170578 * H1x3_3
1751091   +          +    -0.09559287343495 * H1x3_4  +     1.23870853269954 * H1x3_5
1751092   +          +    -1.29909553454934 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.14186336769381 * H1x3_1 + -0.40313769302155 * H1x3_2
+ 0.32907477170578 * H1x3_3 + -0.09559287343495 * H1x3_4 + 1.23870853269954 * H1x3_5 +
-1.29909553454934 * H1x3_6 ;
1751093   +   H2x2_5  = H2x2_5  +    -0.23962567636847 * H1x3_1
1751094   +          +    -0.40709618711343 * H1x3_2  +    -1.68479406479753 * H1x3_3
1751095   +          +     0.70815879664382 * H1x3_4  +    -0.08013794063462 * H1x3_5
1751096   +          +      0.3854653698129 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.23962567636847 * H1x3_1 + -0.40709618711343 *
H1x3_2 + -1.68479406479753 * H1x3_3 + 0.70815879664382 * H1x3_4 + -0.08013794063462 * H1x3_5 +
0.3854653698129 * H1x3_6 ;
1751097   +   H2x2_6  = H2x2_6  +     0.30227974563111 * H1x3_1
1751098   +          +    -0.74687752968448 * H1x3_2  +     1.36415251312446 * H1x3_3
1751099   +          +     1.81088044806083 * H1x3_4  +     1.05534281539066 * H1x3_5
1751100   +          +    -0.43429796112944 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 + 0.30227974563111 * H1x3_1 + -0.74687752968448 * H1x3_2
+ 1.36415251312446 * H1x3_3 + 1.81088044806083 * H1x3_4 + 1.05534281539066 * H1x3_5 +
-0.43429796112944 * H1x3_6 ;
1751101   +   H2x2_1  =     0.63184708368306 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.63184708368306 + H2x2_1 ;
1751102   +   H2x2_2  =     0.84907350596357 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = 0.84907350596357 + H2x2_2 ;
1751103   +   H2x2_3  =    -0.73809203587584 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = -0.73809203587584 + H2x2_3 ;
1751104   +   H2x2_4  =    -0.43815853180498 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.43815853180498 + H2x2_4 ;
1751105   +   H2x2_5  =     0.21738444698009 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 0.21738444698009 + H2x2_5 ;
1751106   +   H2x2_6  =     0.35336989078545 + H2x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0.35336989078545 + H2x2_6 ;
1751107   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1751108   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1751109   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1751110   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1751111   +   H2x2_3  = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.0 / (1.0 + EXP(MIN( - H2x2_3 , _EXP_BAR)));
1751112   +   H2x2_4  = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_4 = 1.0 / (1.0 + EXP(MIN( - H2x2_4 , _EXP_BAR)));
1751113   +   H2x2_5  = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.0 / (1.0 + EXP(MIN( - H2x2_5 , _EXP_BAR)));
1751114   +   H2x2_6  = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_6 = 1.0 / (1.0 + EXP(MIN( - H2x2_6 , _EXP_BAR)));
1751115   +END;
MPRINT(EM_DIAGRAM):   END;
1751116   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1751117   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1751118   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1751119   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1751120   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1751121   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1751122   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1751123   +END;
MPRINT(EM_DIAGRAM):   END;
1751124   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751125   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1751126   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751127   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1751128   +   H3x1_1  =     0.88232318111379 * H2x1_1  +     0.33230222316203 * H2x1_2
1751129   +          +     1.74392107555271 * H2x1_3  +    -1.04185063882146 * H2x1_4
1751130   +          +    -0.63105511848819 * H2x1_5  +    -1.05088304858423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.88232318111379 * H2x1_1 + 0.33230222316203 * H2x1_2 +
1.74392107555271 * H2x1_3 + -1.04185063882146 * H2x1_4 + -0.63105511848819 * H2x1_5 +
-1.05088304858423 * H2x1_6 ;
1751131   +   H3x1_2  =     1.11736284857762 * H2x1_1  +     1.90660007278783 * H2x1_2
1751132   +          +    -0.38007206174956 * H2x1_3  +     0.37265047043174 * H2x1_4
1751133   +          +     2.27208664894129 * H2x1_5  +     0.87150445612099 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 1.11736284857762 * H2x1_1 + 1.90660007278783 * H2x1_2 +
-0.38007206174956 * H2x1_3 + 0.37265047043174 * H2x1_4 + 2.27208664894129 * H2x1_5 +
0.87150445612099 * H2x1_6 ;
1751134   +   H3x1_3  =    -1.47841270668706 * H2x1_1  +    -1.28441896803313 * H2x1_2
1751135   +          +     1.95549364222924 * H2x1_3  +    -2.50484940312791 * H2x1_4
1751136   +          +    -2.84934238039874 * H2x1_5  +     2.18013446750751 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -1.47841270668706 * H2x1_1 + -1.28441896803313 * H2x1_2 +
1.95549364222924 * H2x1_3 + -2.50484940312791 * H2x1_4 + -2.84934238039874 * H2x1_5 +
2.18013446750751 * H2x1_6 ;
1751137   +   H3x1_4  =     1.91981096223784 * H2x1_1  +     2.50981387206546 * H2x1_2
1751138   +          +     1.52848474440169 * H2x1_3  +    -1.77653121606781 * H2x1_4
1751139   +          +    -1.17059017641066 * H2x1_5  +     0.08630071934474 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.91981096223784 * H2x1_1 + 2.50981387206546 * H2x1_2 +
1.52848474440169 * H2x1_3 + -1.77653121606781 * H2x1_4 + -1.17059017641066 * H2x1_5 +
0.08630071934474 * H2x1_6 ;
1751140   +   H3x1_5  =    -0.90689901549977 * H2x1_1  +    -0.28920884601352 * H2x1_2
1751141   +          +     0.19367561691053 * H2x1_3  +    -1.64382922054024 * H2x1_4
1751142   +          +    -1.27645531071461 * H2x1_5  +     2.78368081292476 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.90689901549977 * H2x1_1 + -0.28920884601352 * H2x1_2 +
0.19367561691053 * H2x1_3 + -1.64382922054024 * H2x1_4 + -1.27645531071461 * H2x1_5 +
2.78368081292476 * H2x1_6 ;
1751143   +   H3x1_6  =     1.79097710546589 * H2x1_1  +     0.62195006841522 * H2x1_2
1751144   +          +     0.38238495192417 * H2x1_3  +     0.38117337455775 * H2x1_4
1751145   +          +     0.31232345193628 * H2x1_5  +     1.64288571863932 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = 1.79097710546589 * H2x1_1 + 0.62195006841522 * H2x1_2 +
0.38238495192417 * H2x1_3 + 0.38117337455775 * H2x1_4 + 0.31232345193628 * H2x1_5 +
1.64288571863932 * H2x1_6 ;
1751146   +   H3x1_1  = H3x1_1  +    -0.29610176935088 * H2x2_1
1751147   +          +    -0.05687019870114 * H2x2_2  +     0.19276816813006 * H2x2_3
1751148   +          +    -0.02919428123272 * H2x2_4  +     -0.1225189756077 * H2x2_5
1751149   +          +     0.35216486042215 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -0.29610176935088 * H2x2_1 + -0.05687019870114 *
H2x2_2 + 0.19276816813006 * H2x2_3 + -0.02919428123272 * H2x2_4 + -0.1225189756077 * H2x2_5 +
0.35216486042215 * H2x2_6 ;
1751150   +   H3x1_2  = H3x1_2  +    -0.65560935360323 * H2x2_1
1751151   +          +     1.14492037534385 * H2x2_2  +    -0.73840836071645 * H2x2_3
1751152   +          +      1.3947576688638 * H2x2_4  +    -0.01317619212955 * H2x2_5
1751153   +          +    -0.91648595761636 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + -0.65560935360323 * H2x2_1 + 1.14492037534385 * H2x2_2
+ -0.73840836071645 * H2x2_3 + 1.3947576688638 * H2x2_4 + -0.01317619212955 * H2x2_5 +
-0.91648595761636 * H2x2_6 ;
1751154   +   H3x1_3  = H3x1_3  +    -0.53127332055291 * H2x2_1
1751155   +          +     0.36262088215518 * H2x2_2  +     2.77585954813321 * H2x2_3
1751156   +          +     1.38261906942485 * H2x2_4  +    -0.22635906489825 * H2x2_5
1751157   +          +    -2.11281855575499 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.53127332055291 * H2x2_1 + 0.36262088215518 * H2x2_2
+ 2.77585954813321 * H2x2_3 + 1.38261906942485 * H2x2_4 + -0.22635906489825 * H2x2_5 +
-2.11281855575499 * H2x2_6 ;
1751158   +   H3x1_4  = H3x1_4  +     0.10255243516649 * H2x2_1
1751159   +          +    -0.19237607982949 * H2x2_2  +    -0.39440266749795 * H2x2_3
1751160   +          +     0.62091379272854 * H2x2_4  +    -0.71121773171613 * H2x2_5
1751161   +          +     0.57305821692201 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.10255243516649 * H2x2_1 + -0.19237607982949 * H2x2_2
+ -0.39440266749795 * H2x2_3 + 0.62091379272854 * H2x2_4 + -0.71121773171613 * H2x2_5 +
0.57305821692201 * H2x2_6 ;
1751162   +   H3x1_5  = H3x1_5  +     1.38760232745985 * H2x2_1
1751163   +          +    -0.67366859881604 * H2x2_2  +     0.73667853659073 * H2x2_3
1751164   +          +     0.48338791573814 * H2x2_4  +    -1.86204960161547 * H2x2_5
1751165   +          +     2.06401699674057 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 1.38760232745985 * H2x2_1 + -0.67366859881604 * H2x2_2
+ 0.73667853659073 * H2x2_3 + 0.48338791573814 * H2x2_4 + -1.86204960161547 * H2x2_5 +
2.06401699674057 * H2x2_6 ;
1751166   +   H3x1_6  = H3x1_6  +     1.58403061991045 * H2x2_1
1751167   +          +    -1.98415138001436 * H2x2_2  +    -2.65270828558486 * H2x2_3
1751168   +          +     0.24663962279095 * H2x2_4  +    -0.13610124747178 * H2x2_5
1751169   +          +     0.08850124295188 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 + 1.58403061991045 * H2x2_1 + -1.98415138001436 * H2x2_2
+ -2.65270828558486 * H2x2_3 + 0.24663962279095 * H2x2_4 + -0.13610124747178 * H2x2_5 +
0.08850124295188 * H2x2_6 ;
1751170   +   H3x1_1  =    -0.38359896864958 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.38359896864958 + H3x1_1 ;
1751171   +   H3x1_2  =     0.71155840570573 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.71155840570573 + H3x1_2 ;
1751172   +   H3x1_3  =     0.51799749231142 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 0.51799749231142 + H3x1_3 ;
1751173   +   H3x1_4  =     0.67952932286733 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.67952932286733 + H3x1_4 ;
1751174   +   H3x1_5  =    -0.81394067979603 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.81394067979603 + H3x1_5 ;
1751175   +   H3x1_6  =    -0.01596290366203 + H3x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_6 = -0.01596290366203 + H3x1_6 ;
1751176   +   H3x1_1  = SIN(H3x1_1 );
MPRINT(EM_DIAGRAM):   H3x1_1 = SIN(H3x1_1 );
1751177   +   H3x1_2  = SIN(H3x1_2 );
MPRINT(EM_DIAGRAM):   H3x1_2 = SIN(H3x1_2 );
1751178   +   H3x1_3  = SIN(H3x1_3 );
MPRINT(EM_DIAGRAM):   H3x1_3 = SIN(H3x1_3 );
1751179   +   H3x1_4  = SIN(H3x1_4 );
MPRINT(EM_DIAGRAM):   H3x1_4 = SIN(H3x1_4 );
1751180   +   H3x1_5  = SIN(H3x1_5 );
MPRINT(EM_DIAGRAM):   H3x1_5 = SIN(H3x1_5 );
1751181   +   H3x1_6  = SIN(H3x1_6 );
MPRINT(EM_DIAGRAM):   H3x1_6 = SIN(H3x1_6 );
1751182   +END;
MPRINT(EM_DIAGRAM):   END;
1751183   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1751184   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1751185   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1751186   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1751187   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1751188   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1751189   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1751190   +END;
MPRINT(EM_DIAGRAM):   END;
1751191   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751192   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1751193   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751194   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1751195   +   P_DepVar1  =     0.28094469007064 * H3x1_1  +     4.40543517205109 * H3x1_2
1751196   +          +     4.58780022403482 * H3x1_3  +    -1.49344393871597 * H3x1_4
1751197   +          +     3.15120047821915 * H3x1_5  +    -1.83744247169269 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.28094469007064 * H3x1_1 + 4.40543517205109 * H3x1_2 +
4.58780022403482 * H3x1_3 + -1.49344393871597 * H3x1_4 + 3.15120047821915 * H3x1_5 +
-1.83744247169269 * H3x1_6 ;
1751198   +   P_DepVar1  =     -2.1680951408523 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.1680951408523 + P_DepVar1 ;
1751199   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1751200   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1751201   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1751202   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1751203   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1751204   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1751205   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1751206   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1751207   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1751208   +END;
MPRINT(EM_DIAGRAM):   END;
1751209   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1751210   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1751211   +   P_DepVar0  = .;
The SAS System
 
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1751212   +END;
MPRINT(EM_DIAGRAM):   END;
1751213   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1751214   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1751215   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1751216   +END;
MPRINT(EM_DIAGRAM):   END;
1751217   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751218   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1751219   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1751220   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1751221   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1751222   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1751223   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1751224   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1751225   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1751226   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1751227   +END;
MPRINT(EM_DIAGRAM):   END;
1751228   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1751229   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1751230   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1751231   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1751232    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1751233    quit;
1751234    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1751235    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1751236    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1751237    retain ID 2 Node "AutoNeural28";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural28";
1751238    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1751239    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7689 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7689 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751240    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1751241    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751242    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7689 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7689 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751243    proc sort data=EMWS8.AutoNeural28_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural28_variableset out=_temp2(keep=NAME
CREATOR);
1751244    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751245    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.AUTONEURAL28_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751246    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751247    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1751248    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1751249    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751250    proc contents data=EMWS8.AutoNeural28_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural28_train out=_meta(keep=NAME) noprint;
1751251    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 89 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1751252    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1751253    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751254    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 89 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 89 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751255    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751256    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1751257    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751258    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 89 observations read from the data set WORK._META.
NOTE: There were 7 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 89 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751259    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1751260    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1751260  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3662 rows and 5 columns.
 
1751261    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751262    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1751263    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 3662 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 3662 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751264    filename _pref
1751264  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1751265    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1751266    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1751267   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1751268   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1751269   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1751270   +
1751271   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1751272   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1751273   +
1751274   +
1751275   +
1751276   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1751277   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1751278   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1751279    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1751280    quit;
1751281    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1751282    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1751283    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1751284    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1751285    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1751286    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751287    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1751288    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751289    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP has 0 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751290    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1751291    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751292    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751293    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751294    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1751295    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1751296    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751297    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1751298    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751299    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1751300    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751301    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751302    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751303    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1751304    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751305    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 46 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751306    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1751307    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1751307  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 0 rows and 5 columns.
 
1751308    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751309    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1751310    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 0 observations read from the data set WORK._TEMPX.
NOTE: 0 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 3662 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751311    filename _pref
1751311  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1751312    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1751313    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1751314   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1751315   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1751316   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1751317   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1751318   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1751319   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1751320    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1751321    quit;
1751322    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1751323    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1751324    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1751325    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1751326    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1751327    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751328    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1751329    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751330    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751331    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1751332    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751333    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751334    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751335    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1751336    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1751337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751338    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1751339    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751340    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1751341    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751342    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751343    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751344    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1751345    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751346    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751347    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1751348    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1751348  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1751349    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751350    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1751351    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 3666 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751352    filename _pref
1751352  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1751353    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1751354    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1751355   +
1751356   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1751357   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1751357  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1751358   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1751359   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1751360   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1751361   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1751362   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1751363    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1751364    quit;
1751365    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1751366    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1751367    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1751368    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1751369    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1751370    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751371    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1751372    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751373    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751374    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1751375    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751376    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751377    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751378    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1751379    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1751380    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751381    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1751382    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751383    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1751384    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751385    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751386    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751387    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1751388    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751389    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751390    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1751391    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1751391  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1751392    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751393    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1751394    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 3705 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751395    filename _pref
1751395  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1751396    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1751397    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1751398   +
1751399   +
1751400   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1751401   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1751402   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1751403   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1751404   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1751405   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751406   +
1751407   +
1751408   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1751409   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1751410   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1751411   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1751412   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1751413   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751414   +
1751415   +
1751416   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1751417   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1751418   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1751419   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1751420   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1751421   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751422   +
1751423   +
1751424   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1751425   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1751426   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1751427   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1751428   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1751429   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751430   +
1751431   +
1751432   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1751433   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1751434   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1751435   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1751436   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1751437   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751438   +
1751439   +
1751440   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1751441   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1751442   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1751443   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1751444   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1751445   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751446   +
1751447   +
1751448   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1751449   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1751450   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1751451   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1751452   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1751453   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751454   +
1751455   +
1751456   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1751457   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1751458   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1751459   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1751460   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1751461   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1751462   +if
1751463   +_FILTERNORM1 not in ( '.')
1751464   + and
1751465   +_FILTERNORM2 not in ( '.')
1751466   + and
1751467   +_FILTERNORM3 not in ( '.')
1751468   + and
1751469   +_FILTERNORM4 not in ( '.')
1751470   + and
1751471   +_FILTERNORM5 not in ( '.')
1751472   + and
1751473   +_FILTERNORM6 not in ( '.')
1751474   + and
1751475   +_FILTERNORM7 not in ( ' ')
1751476   + and
1751477   +_FILTERNORM8 not in ( ' ')
1751478   +and
1751479   +( Dt_Customer ne .)
1751480   +and ( Income ne . and (Income<=107000))
1751481   +and ( Kidhome ne .)
1751482   +and ( MntFishProducts ne .)
1751483   +and ( MntFruits ne .)
1751484   +and ( MntGoldProds ne .)
1751485   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1751486   +and ( MntSweetProducts ne .)
1751487   +and ( MntWines ne .)
1751488   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1751489   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1751490   +and ( NumStorePurchases ne .)
1751491   +and ( NumWebPurchases ne .)
1751492   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1751493   +and ( Recency ne .)
1751494   +and ( Teenhome ne .)
1751495   +and ( Year_Birth ne .)
1751496   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1751497   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1751498   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1751499   +end;
MPRINT(EM_DIAGRAM):   end;
1751500   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1751501   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1751502    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1751503    quit;
1751504    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1751505    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1751506    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1751507    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1751508    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1751509    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751510    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1751511    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751512    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751513    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1751514    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751515    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751516    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751517    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1751518    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1751519    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751520    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1751521    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1751522    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1751523    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751524    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751525    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1751526    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1751527    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1751528    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751529    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1751530    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1751530  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1751531    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751532    proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl8_FCMP data=_tempx;
1751533    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL8_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL8_FCMP has 3771 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1751534    %macro varDept(fcmpdata=,id=);
1751535    %global nobs&id scoreFlag&id;
1751536    %let scoreFlag&id = 0;
1751537    %if &id=1 or ^&fcmpStart %then %do;
1751538    proc sort data=&fcmpdata out=_temp&id nodupkey;
1751539    by NAME;
1751540    where id=&id and LHS in( %let j=1;
1751541    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1751542    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1751543    "&var" %let j = %eval(&j+1);
1751544    %end;
1751545    );
1751546    run;
1751547    %let dsid = %sysfunc(open(_temp&id));
1751548    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1751549    %let dsid = %sysfunc(close(&dsid));
1751550    %if &&nobs&id %then %do;
1751551    %let scoreFlag&id = 1;
1751552    %let fcmpStart = 1;
1751553    %end;
1751554    %else %let fcmpStart = 0;
1751555    %end;
1751556    %else %do;
1751557    proc sort data=&fcmpdata out=_tempid;
1751558    where id=&id;
1751559    by LHS;
1751560    run;
1751561    %let dsid = %sysfunc(open(_tempid));
1751562    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1751563    %let dsid = %sysfunc(close(&dsid));
1751564    %if ^&&nobs&id %then %do;
1751565    proc datasets lib=work nolist;
1751566    delete _tempid;
1751567    run;
1751568    quit;
1751569    %end;
1751570    %else %do;
1751571    data _tempAll;
1751572    set %let j=%eval(&id-1);
1751573    %do x=1 %to &j;
1751574    %if &&nobs&x %then %do;
1751575    _temp&x %end;
1751576    %end;
1751577    ;
1751578    run;
1751579    proc sql;
1751580    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1751580  ! work._tempid p2 where p.name=p2.lhs;
1751581    quit;
1751582    data _temp&id;
1751583    set _temp&id;
1751584    where LHS ne '' and NAME ne '' and Node ne '';
1751585    run;
1751586    proc datasets lib=work nolist;
1751587    delete _tempAll;
1751588    run;
1751589    %let dsid = %sysfunc(open(_temp&id));
1751590    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1751591    %let dsid = %sysfunc(close(&dsid));
1751592    %if ^&&nobs&id %then %do;
1751593    proc datasets lib=work nolist;
1751594    delete _temp&id;
1751595    run;
1751596    quit;
1751597    %end;
1751598    %else %do;
1751599    %let scoreFlag&id = 1;
1751600    data _temp&id;
1751601    set _temp&id;
1751602    where LHS ne NAME and node ne '';
1751603    run;
1751604    %let dsid = %sysfunc(open(_temp&id));
1751605    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1751606    %let dsid = %sysfunc(close(&dsid));
1751607    %if ^&&nobs&id %then %do;
1751608    proc datasets lib=work nolist;
1751609    delete _temp&id;
1751610    run;
1751611    quit;
1751612    %end;
1751613    %else %do;
1751614    proc sort data=_temp&id nodupkey;
1751615    by LHS NAME;
1751616    run;
1751617    %end;
1751618    %end;
1751619    %end;
1751620    %end;
1751621    %mend varDept;
1751622    %macro optCode(outdata=fcmpdata);
1751623    %global fcmpStart;
1751624    %let fcmpStart = 0;
1751625    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1751626    %let NumNodes=9;
1751627    %do k=1 %to &NumNodes;
1751628    %vardept(fcmpdata=&outdata, id=&k);
1751629    %end;
1751630    %mend optCode;
1751631    %optcode(outData=EMWS8.Ensmbl8_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 138 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 94 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 44 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 44 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 44 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 44 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 44 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 23 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 44 observations read from the data set WORK._TEMP2.
NOTE: There were 23 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 67 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl8_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1751632    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1751633    * Ensmbl8: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Computing metadata for TRAIN data;
1751634    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.ENSMBL8_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Ensmbl8_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Ensmbl8_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Ensmbl8_TRAIN out=WORK.M17DX8PC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M17DX8PC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M17DX8PC(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M17DX8PC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M17DX8PC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M28QL1CQ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21QWCZ1(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   set WORK.M28QL1CQ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural28_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural28_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Ensmbl8";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Ensmbl8";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl8: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME in( "I_DepVar" "F_DepVar" "U_DepVar" "_WARN_" "P_DepVar1"
"P_DepVar0" "R_DepVar1" "R_DepVar0" ) then CREATOR="Ensmbl8";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1751954    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1751955    set EMWS8.Ensmbl8_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMINFO;
1751956    where DATA='Ensmbl8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Ensmbl8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
1751957    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL8_EMINFO.
      WHERE (DATA='Ensmbl8') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751958    data EMWS8.Ensmbl8_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMINFO;
1751959    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1751960    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1751961    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.ENSMBL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1751965    run;
1751966    data EMWS8.Ensmbl8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMINFO;
1751967    set EMWS8.Ensmbl8_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMINFO WORK.MODELTEMP_INFO;
1751968    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL8_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.ENSMBL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751969    proc sort data = EMWS8.Ensmbl8_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Ensmbl8_EMINFO NOTHREADS;
1751970    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1751971    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL8_EMINFO.
NOTE: The data set EMWS8.ENSMBL8_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751972    proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1751973    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1751974    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1751975    proc sort data = EMWS8.Ensmbl8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Ensmbl8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1751976    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1751977    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL8_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751978    data EMWS8.Ensmbl8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMINFO;
1751979    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1751980    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1751981    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.ENSMBL8_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1751982    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1751983    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1751984    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1751985    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS8.ENSMBL8_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS8.ENSMBL8_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.37 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                17.37 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O30NW64U
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl8\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O30NW64U new;
MPRINT(EM_DIAGRAM):   run;
1752009    data EMWS8.Ensmbl8_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMOUTFIT;
1752010    set EMWS8.Ensmbl8_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMOUTFIT;
1752011    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1752012    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
1752012  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1752013    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1752014    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL8_EMOUTFIT.
NOTE: The data set EMWS8.ENSMBL8_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752015    proc sort data=EMWS8.Ensmbl8_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl8_EMREPORTFIT nothreads;
1752016    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1752017    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL8_EMREPORTFIT.
NOTE: The data set EMWS8.ENSMBL8_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752018    %let _EMwarndup = 0;
1752019    %let _EMtargetdup =;
1752020    %let _EMASEtargetdup =;
1752021    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1752022    set EMWS8.Ensmbl8_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMOUTFIT;
1752023    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1752024    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1752025    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1752026    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1752027    end;
MPRINT(EM_DIAGRAM):   end;
1752028    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL8_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752029    proc sort data=EMWS8.AutoNeural33_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.AutoNeural33_CMeta_TRAIN out=WORK.SUBSETINMETA;
1752030    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1752031    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS8.AUTONEURAL33_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 21 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1752032    proc sort data=EMWS8.Ensmbl8_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Ensmbl8_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
1752033    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1752034    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS8.ENSMBL8_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752035    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1752036    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1752037    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1752038    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 11 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752039    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1752040    set EMWS8.Ensmbl8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_CMeta_TRAIN;
1752041    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1752041  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1752042    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL8_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1752043    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1752044    set EMWS8.Ensmbl8_TRAIN(keep=
1752045    F_DepVar
1752046    I_DepVar
1752047    P_DepVar0
1752048    P_DepVar1
1752049    R_DepVar0
1752050    R_DepVar1
1752051    U_DepVar
1752052    _WARN_
1752053    DepVar
1752054    );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1752055    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: View EMWS8.ENSMBL8_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL28_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.ENSMBL8_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl8_2BMZZ6P nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl8_2BMZZ6P;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl8_2BMZZ6P(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl8_2BMZZ6P;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl8_2BMZZ6P;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural33_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000167753 OVLMAX 0.9995726307 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1756321    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1756322    set EMWS8.Ensmbl8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_CMeta_TRAIN;
1756323    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1756323  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1756324    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL8_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1756325    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1756326    set EMWS8.Ensmbl8_VALIDATE(keep=
1756327    F_DepVar
1756328    I_DepVar
1756329    P_DepVar0
1756330    P_DepVar1
1756331    R_DepVar0
1756332    R_DepVar1
1756333    U_DepVar
1756334    _WARN_
1756335    DepVar
1756336    );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1756337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.VARSEL_VALIDATE.
NOTE: View EMWS8.ENSMBL8_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.NEURAL28_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.ENSMBL8_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl8_1E0QBVE nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl8_1E0QBVE;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl8_1E0QBVE(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMCLASSIFICATION WORK.Ensmbl8_1E0QBVE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl8_1E0QBVE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl8_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural33_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000166801 OVLMAX 0.9983832496 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1760612    %let _cn = %sysfunc(getoption(CENTER));
1760613    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1760614    proc print data=EMWS8.Ensmbl8_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl8_EMREPORTFIT noobs label;
1760615    var STAT LABEL TRAIN
1760616    VALIDATE
1760617    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
1760618    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1760619    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1760620    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1760621    run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL8_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 1512.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1760622    title10;
MPRINT(EM_DIAGRAM):   title10;
1760623    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1760624    proc sort data=EMWS8.Ensmbl8_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl8_EMCLASSIFICATION nothreads;
1760625    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1760626    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL8_EMCLASSIFICATION.
NOTE: The data set EMWS8.ENSMBL8_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1760627    %let _cn = %sysfunc(getoption(CENTER));
1760628    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1760629    proc print data=EMWS8.Ensmbl8_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl8_EMCLASSIFICATION noobs label;
1760630    var from into pct_row pct_col count percent
1760631    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1760632    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1760633    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1760634    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1760635    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1760636    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1760637    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1760638    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1760639    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1760640    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1760641    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1760642    run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL8_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 1513.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1760643    title9;
MPRINT(EM_DIAGRAM):   title9;
1760644    title10;
MPRINT(EM_DIAGRAM):   title10;
1760645    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1760646    %let _cn = %sysfunc(getoption(CENTER));
1760647    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1760648    data EMWS8.Ensmbl8_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl8_EMEVENTREPORT;
1760649    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1760649  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1760650    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1760650  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1760650  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1760650  ! FALSEEVENT
1760651    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1760651  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1760651  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1760652       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1760653    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1760654    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1760655    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1760656    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1760657    set EMWS8.Ensmbl8_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl8_EMEVENTREPORT;
1760658    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL8_EMEVENTREPORT.
NOTE: The data set EMWS8.ENSMBL8_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1760659    proc print data=EMWS8.Ensmbl8_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl8_EMEVENTREPORT noobs label;
1760660    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1760661    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1760662    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1760663    run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL8_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 1514.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1760664    title10;
MPRINT(EM_DIAGRAM):   title10;
1760665    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1760666    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1760667    modify Ensmbl8_EMRANK;
MPRINT(EM_DIAGRAM):   modify Ensmbl8_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1760668    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1760669    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1760669  ! ;
MPRINT(EM_DIAGRAM):   run;
1760670    run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL8_EMRANK.DATA.
1760671    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
 
1760672    %let _cn = %sysfunc(getoption(CENTER));
1760673    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1760674    proc print data=EMWS8.Ensmbl8_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl8_EMRANK label noobs;
1760675    var
1760676    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1760677    by
1760678    notsorted DATAROLE
1760679    notsorted TARGET
1760680    notsorted TARGETLABEL
1760681    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1760682    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1760683    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1760684    run;
 
NOTE: There were 40 observations read from the data set EMWS8.ENSMBL8_EMRANK.
NOTE: The PROCEDURE PRINT printed page 1515.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1760685    title10;
MPRINT(EM_DIAGRAM):   title10;
1760686    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1760687    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1760688    modify Ensmbl8_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Ensmbl8_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1760689    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1760689  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1760690    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1760690  ! ;
MPRINT(EM_DIAGRAM):   run;
1760691    run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL8_EMSCOREDIST.DATA.
1760692    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl8_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
