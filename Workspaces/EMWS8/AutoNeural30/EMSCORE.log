MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.04 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.04 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2AWNSLF 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMSCORE.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2AWNSLF new;
MPRINT(EM_DIAGRAM):   run;
1105156    filename emflow
1105156  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural30: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1105157    *------------------------------------------------------------*;
1105158    * AutoNeural30: Scoring DATA data;
1105159    *------------------------------------------------------------*;
1105160    data EMWS8.AutoNeural30_TRAIN
1105161    / view=EMWS8.AutoNeural30_TRAIN
1105162    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural30_TRAIN / view=EMWS8.AutoNeural30_TRAIN ;
1105163    set EMWS8.Varsel_TRAIN
1105164    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
1105165    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas.
1105166   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1105167   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1105168   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1105169   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1105170   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1105171   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1105172   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1105173   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1105174   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1105175   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1105176   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1105177   +LENGTH _WARN_ $4
1105178   +      F_DepVar  $ 12
1105179   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1105180   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1105181   +
1105182   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1105183   +
1105184   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1105185   +
1105186   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1105187   +
1105188   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1105189   +
1105190   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1105191   +
1105192   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1105193   +
1105194   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1105195   +
1105196   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1105197   +
1105198   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1105199   +
1105200   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1105201   +
1105202   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1105203   +
1105204   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1105205   +
1105206   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1105207   +
1105208   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1105209   +
1105210   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1105211   +
1105212   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1105213   +
1105214   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1105215   +
1105216   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1105217   +
1105218   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1105219   +
1105220   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1105221   +
1105222   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1105223   +
1105224   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1105225   +
1105226   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1105227   +
1105228   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1105229   +
1105230   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1105231   +
1105232   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1105233   +
1105234   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1105235   +
1105236   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1105237   +
1105238   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1105239   +
1105240   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1105241   +
1105242   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1105243   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1105244   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1105245   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1105246   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1105247   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1105248   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105249   +end;
MPRINT(EM_DIAGRAM):   end;
1105250   +else do;
MPRINT(EM_DIAGRAM):   else do;
1105251   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1105252   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1105253   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1105254   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1105255   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1105256   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1105257   +   end;
MPRINT(EM_DIAGRAM):   end;
1105258   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1105259   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1105260   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1105261   +   end;
MPRINT(EM_DIAGRAM):   end;
1105262   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1105263   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1105264   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1105265   +   end;
MPRINT(EM_DIAGRAM):   end;
1105266   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1105267   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1105268   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1105269   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1105270   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105271   +   end;
MPRINT(EM_DIAGRAM):   end;
1105272   +end;
MPRINT(EM_DIAGRAM):   end;
1105273   +
1105274   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105275   +*** Checking missing input Interval
1105276   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1105277   +
1105278   +IF NMISS(
1105279   +   AcceptedCmpTotal ,
1105280   +   Frq ,
1105281   +   Income ,
1105282   +   Mnt ,
1105283   +   MntGoldProds ,
1105284   +   MntMeatProducts ,
1105285   +   MntWines ,
1105286   +   NumDistPurchases ,
1105287   +   RFMstat ,
1105288   +   RMntFrq ,
1105289   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1105290   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1105291   +
1105292   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105293   +END;
MPRINT(EM_DIAGRAM):   END;
1105294   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105295   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1105296   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105297   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105298   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1105299   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1105300   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1105301   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1105302   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1105303   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1105304   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1105305   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1105306   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1105307   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1105308   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1105309   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1105310   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1105311   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1105312   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1105313   +END;
MPRINT(EM_DIAGRAM):   END;
1105314   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105315   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1105316   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1105317   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1105318   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1105319   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1105320   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1105321   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1105322   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1105323   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1105324   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1105325   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1105326   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1105327   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1105328   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1105329   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1105330   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1105331   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1105332   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1105333   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1105334   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1105335   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1105336   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1105337   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1105338   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1105339   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1105340   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1105341   +END;
MPRINT(EM_DIAGRAM):   END;
1105342   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105343   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1105344   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105345   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105346   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1105347   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105348   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105349   +   H1x1_1  =     0.04025840082513 * S_AcceptedCmpTotal
1105350   +          +     0.06318752729093 * S_Frq  +    -1.29545791179409 * S_Income
1105351   +          +    -7.11030940481191 * S_Mnt  +     0.43390451556969 *
1105352   +        S_MntGoldProds  +     1.69733563869673 * S_MntMeatProducts
1105353   +          +     0.48225589030087 * S_MntWines  +     2.50429846731068 *
1105354   +        S_NumDistPurchases  +     0.19831933540707 * S_RFMstat
1105355   +          +     0.96752741277283 * S_RMntFrq  +    -0.27394913723816 *
1105356   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.04025840082513 * S_AcceptedCmpTotal + 0.06318752729093 * 
S_Frq + -1.29545791179409 * S_Income + -7.11030940481191 * S_Mnt + 0.43390451556969 * 
S_MntGoldProds + 1.69733563869673 * S_MntMeatProducts + 0.48225589030087 * S_MntWines + 
2.50429846731068 * S_NumDistPurchases + 0.19831933540707 * S_RFMstat + 0.96752741277283 * 
S_RMntFrq + -0.27394913723816 * S_Recency ;
1105357   +   H1x1_1  = H1x1_1  +    -0.13186660711464 * G_Marital_Status0
1105358   +          +     0.76507926337086 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.13186660711464 * G_Marital_Status0 + 
0.76507926337086 * G_Marital_Status1 ;
1105359   +   H1x1_1  =    -2.07751077372903 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -2.07751077372903 + H1x1_1 ;
1105360   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105361   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105362   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1105363   +END;
MPRINT(EM_DIAGRAM):   END;
1105364   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105365   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1105366   +END;
MPRINT(EM_DIAGRAM):   END;
1105367   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105368   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1105369   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105370   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105371   +   H1x2_1  =     0.04623108287373 * S_AcceptedCmpTotal
1105372   +          +     0.51673349328259 * S_Frq  +    -0.55409697473564 * S_Income
1105373   +          +    -1.80152141029664 * S_Mnt  +    -0.01192709316085 *
1105374   +        S_MntGoldProds  +    -1.08887322486716 * S_MntMeatProducts
1105375   +          +    -0.54592829528894 * S_MntWines  +     0.87903819952137 *
1105376   +        S_NumDistPurchases  +     0.15549845875066 * S_RFMstat
1105377   +          +     0.64330086736687 * S_RMntFrq  +    -0.34615492895156 *
1105378   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.04623108287373 * S_AcceptedCmpTotal + 0.51673349328259 * 
S_Frq + -0.55409697473564 * S_Income + -1.80152141029664 * S_Mnt + -0.01192709316085 * 
S_MntGoldProds + -1.08887322486716 * S_MntMeatProducts + -0.54592829528894 * S_MntWines + 
0.87903819952137 * S_NumDistPurchases + 0.15549845875066 * S_RFMstat + 0.64330086736687 * 
S_RMntFrq + -0.34615492895156 * S_Recency ;
1105379   +   H1x2_1  = H1x2_1  +     0.04272112278258 * G_Marital_Status0
1105380   +          +     0.52128005949051 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.04272112278258 * G_Marital_Status0 + 
0.52128005949051 * G_Marital_Status1 ;
1105381   +   H1x2_1  =    -1.26211132425318 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.26211132425318 + H1x2_1 ;
1105382   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105383   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105384   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1105385   +END;
MPRINT(EM_DIAGRAM):   END;
1105386   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105387   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1105388   +END;
MPRINT(EM_DIAGRAM):   END;
1105389   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105390   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1105391   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105392   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105393   +   H1x3_1  =    -0.31931196892076 * S_AcceptedCmpTotal
1105394   +          +     0.88013014607652 * S_Frq  +       2.380671405121 * S_Income
1105395   +          +    -1.76438631408259 * S_Mnt  +    -0.88002382547081 *
1105396   +        S_MntGoldProds  +     3.22143288077158 * S_MntMeatProducts
1105397   +          +    -1.46872497431142 * S_MntWines  +     4.48983574481035 *
1105398   +        S_NumDistPurchases  +     1.49229101598701 * S_RFMstat
1105399   +          +     0.86000773065844 * S_RMntFrq  +     0.41345680894813 *
1105400   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.31931196892076 * S_AcceptedCmpTotal + 0.88013014607652 * 
S_Frq + 2.380671405121 * S_Income + -1.76438631408259 * S_Mnt + -0.88002382547081 * 
S_MntGoldProds + 3.22143288077158 * S_MntMeatProducts + -1.46872497431142 * S_MntWines + 
4.48983574481035 * S_NumDistPurchases + 1.49229101598701 * S_RFMstat + 0.86000773065844 * 
S_RMntFrq + 0.41345680894813 * S_Recency ;
1105401   +   H1x3_1  = H1x3_1  +     0.24244728138592 * G_Marital_Status0
1105402   +          +     0.68199092237732 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + 0.24244728138592 * G_Marital_Status0 + 
0.68199092237732 * G_Marital_Status1 ;
1105403   +   H1x3_1  =      0.8344057531016 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.8344057531016 + H1x3_1 ;
1105404   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105405   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105406   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1105407   +END;
MPRINT(EM_DIAGRAM):   END;
1105408   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105409   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1105410   +END;
MPRINT(EM_DIAGRAM):   END;
1105411   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105412   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1105413   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105414   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105415   +   H1x4_1  =    -0.13659878639954 * S_AcceptedCmpTotal
1105416   +          +     0.45428559765776 * S_Frq  +    -0.42693519984843 * S_Income
1105417   +          +      1.1792020785091 * S_Mnt  +     0.71939074066077 *
1105418   +        S_MntGoldProds  +    -0.72620231508443 * S_MntMeatProducts
1105419   +          +    -0.32426637270285 * S_MntWines  +    -0.38988807626314 *
1105420   +        S_NumDistPurchases  +    -3.02140616024044 * S_RFMstat
1105421   +          +     -0.8223455835322 * S_RMntFrq  +     0.94450643717764 *
1105422   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.13659878639954 * S_AcceptedCmpTotal + 0.45428559765776 * 
S_Frq + -0.42693519984843 * S_Income + 1.1792020785091 * S_Mnt + 0.71939074066077 * 
S_MntGoldProds + -0.72620231508443 * S_MntMeatProducts + -0.32426637270285 * S_MntWines + 
-0.38988807626314 * S_NumDistPurchases + -3.02140616024044 * S_RFMstat + -0.8223455835322 * 
S_RMntFrq + 0.94450643717764 * S_Recency ;
1105423   +   H1x4_1  = H1x4_1  +    -0.12208204500004 * G_Marital_Status0
1105424   +          +    -0.36246978080124 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.12208204500004 * G_Marital_Status0 + 
-0.36246978080124 * G_Marital_Status1 ;
1105425   +   H1x4_1  =    -0.95371898342722 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.95371898342722 + H1x4_1 ;
1105426   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105427   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105428   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1105429   +END;
MPRINT(EM_DIAGRAM):   END;
1105430   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105431   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1105432   +END;
MPRINT(EM_DIAGRAM):   END;
1105433   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105434   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1105435   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105436   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105437   +   H2x1_1  =    -5.17307699680657 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -5.17307699680657 * H1x1_1 ;
1105438   +   H2x1_1  = H2x1_1  +     5.68206219040914 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 5.68206219040914 * H1x2_1 ;
1105439   +   H2x1_1  = H2x1_1  +      0.0671760867147 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.0671760867147 * H1x3_1 ;
1105440   +   H2x1_1  = H2x1_1  +     1.77797879568099 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.77797879568099 * H1x4_1 ;
1105441   +   H2x1_1  =    -1.18533244144823 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.18533244144823 + H2x1_1 ;
1105442   +   H2x1_1  = SIN(H2x1_1 );
MPRINT(EM_DIAGRAM):   H2x1_1 = SIN(H2x1_1 );
1105443   +END;
MPRINT(EM_DIAGRAM):   END;
1105444   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105445   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1105446   +END;
MPRINT(EM_DIAGRAM):   END;
1105447   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105448   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1105449   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105450   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105451   +   H2x2_1  =    -0.10427732572046 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.10427732572046 * H1x1_1 ;
1105452   +   H2x2_1  = H2x2_1  +    -2.43600502591825 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.43600502591825 * H1x2_1 ;
1105453   +   H2x2_1  = H2x2_1  +    -2.36291758854448 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.36291758854448 * H1x3_1 ;
1105454   +   H2x2_1  = H2x2_1  +    -0.21725276506237 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21725276506237 * H1x4_1 ;
1105455   +   H2x2_1  =     -1.6479184469931 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -1.6479184469931 + H2x2_1 ;
1105456   +   H2x2_1  = SIN(H2x2_1 );
MPRINT(EM_DIAGRAM):   H2x2_1 = SIN(H2x2_1 );
1105457   +END;
MPRINT(EM_DIAGRAM):   END;
1105458   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105459   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1105460   +END;
MPRINT(EM_DIAGRAM):   END;
1105461   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105462   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1105463   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105464   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105465   +   H2x3_1  =    -2.55881911263862 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.55881911263862 * H1x1_1 ;
1105466   +   H2x3_1  = H2x3_1  +    -1.36800479963026 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.36800479963026 * H1x2_1 ;
1105467   +   H2x3_1  = H2x3_1  +     2.49318998831913 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 2.49318998831913 * H1x3_1 ;
1105468   +   H2x3_1  = H2x3_1  +     -0.2723650813761 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -0.2723650813761 * H1x4_1 ;
1105469   +   H2x3_1  =    -2.02002422056859 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.02002422056859 + H2x3_1 ;
1105470   +   H2x3_1  = SIN(H2x3_1 );
MPRINT(EM_DIAGRAM):   H2x3_1 = SIN(H2x3_1 );
1105471   +END;
MPRINT(EM_DIAGRAM):   END;
1105472   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105473   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1105474   +END;
MPRINT(EM_DIAGRAM):   END;
1105475   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105476   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1105477   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105478   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105479   +   H3x1_1  =    -5.17928987039105 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -5.17928987039105 * H2x1_1 ;
1105480   +   H3x1_1  = H3x1_1  +    -4.99188815628878 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -4.99188815628878 * H2x2_1 ;
1105481   +   H3x1_1  = H3x1_1  +    -1.59478766396441 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.59478766396441 * H2x3_1 ;
1105482   +   H3x1_1  =    -1.17125580012514 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -1.17125580012514 + H3x1_1 ;
1105483   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105484   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105485   +   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x1_1 = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
1105486   +END;
MPRINT(EM_DIAGRAM):   END;
1105487   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105488   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1105489   +END;
MPRINT(EM_DIAGRAM):   END;
1105490   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105491   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1105492   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105493   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105494   +   H3x2_1  =       2.158894329803 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 2.158894329803 * H2x1_1 ;
1105495   +   H3x2_1  = H3x2_1  +    -2.32757193457059 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -2.32757193457059 * H2x2_1 ;
1105496   +   H3x2_1  = H3x2_1  +    -6.00752921212942 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -6.00752921212942 * H2x3_1 ;
1105497   +   H3x2_1  =    -0.08802993131411 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.08802993131411 + H3x2_1 ;
1105498   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105499   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105500   +   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x2_1 = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
1105501   +END;
MPRINT(EM_DIAGRAM):   END;
1105502   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105503   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1105504   +END;
MPRINT(EM_DIAGRAM):   END;
1105505   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105506   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1105507   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105508   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105509   +   H4x1_1  =      7.3411593355967 * H3x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 7.3411593355967 * H3x1_1 ;
1105510   +   H4x1_1  = H4x1_1  +    -3.06647078805944 * H3x2_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -3.06647078805944 * H3x2_1 ;
1105511   +   H4x1_1  =    -1.39824841795123 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = -1.39824841795123 + H4x1_1 ;
1105512   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105513   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105514   +   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H4x1_1 = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
1105515   +END;
MPRINT(EM_DIAGRAM):   END;
1105516   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105517   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1105518   +END;
MPRINT(EM_DIAGRAM):   END;
1105519   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105520   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1105521   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105522   +
1105523   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1105524   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1105525   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1105526   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1105527   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1105528   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1105529   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1105530   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1105531   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1105532   +end;
MPRINT(EM_DIAGRAM):   end;
1105533   +else do;
MPRINT(EM_DIAGRAM):   else do;
1105534   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1105535   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1105536   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1105537   +   end;
MPRINT(EM_DIAGRAM):   end;
1105538   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1105539   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1105540   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1105541   +   end;
MPRINT(EM_DIAGRAM):   end;
1105542   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1105543   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1105544   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1105545   +   end;
MPRINT(EM_DIAGRAM):   end;
1105546   +end;
MPRINT(EM_DIAGRAM):   end;
1105547   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105548   +   P_DepVar1  =     9.74622448352833 * H4x1_1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 9.74622448352833 * H4x1_1 ;
1105549   +   P_DepVar1  =    -7.88591846838259 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.88591846838259 + P_DepVar1 ;
1105550   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1105551   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1105552   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1105553   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1105554   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1105555   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1105556   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1105557   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1105558   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1105559   +END;
MPRINT(EM_DIAGRAM):   END;
1105560   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105561   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1105562   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1105563   +END;
MPRINT(EM_DIAGRAM):   END;
1105564   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1105565   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1105566   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1105567   +END;
MPRINT(EM_DIAGRAM):   END;
1105568   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1105569   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1105570   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1105571   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1105572   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1105573   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1105574   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1105575   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105576   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1105577   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105578   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1105579   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1105580   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1105581   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1105582   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1105583   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1105584   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1105585   +END;
MPRINT(EM_DIAGRAM):   END;
1105586   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1105587   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1105588   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1105589   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1105590    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL30_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1105591    quit;
1105592    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1105593    filename emflow
1105593  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural30: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1105594    *------------------------------------------------------------*;
1105595    * AutoNeural30: Scoring VALIDATE data;
1105596    *------------------------------------------------------------*;
1105597    data EMWS8.AutoNeural30_VALIDATE
1105598    / view=EMWS8.AutoNeural30_VALIDATE
1105599    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural30_VALIDATE / view=EMWS8.AutoNeural30_VALIDATE ;
1105600    set EMWS8.Varsel_VALIDATE
1105601    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
1105602    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMFLOWSCORE.sas.
1105603   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1105604   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1105605   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1105606   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1105607   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1105608   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1105609   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1105610   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1105611   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1105612   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1105613   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1105614   +LENGTH _WARN_ $4
1105615   +      F_DepVar  $ 12
1105616   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1105617   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1105618   +
1105619   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1105620   +
1105621   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1105622   +
1105623   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1105624   +
1105625   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1105626   +
1105627   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1105628   +
1105629   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1105630   +
1105631   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1105632   +
1105633   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1105634   +
1105635   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1105636   +
1105637   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1105638   +
1105639   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1105640   +
1105641   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1105642   +
1105643   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1105644   +
1105645   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1105646   +
1105647   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1105648   +
1105649   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1105650   +
1105651   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1105652   +
1105653   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1105654   +
1105655   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1105656   +
1105657   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1105658   +
1105659   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1105660   +
1105661   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1105662   +
1105663   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1105664   +
1105665   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1105666   +
1105667   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1105668   +
1105669   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1105670   +
1105671   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1105672   +
1105673   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1105674   +
1105675   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1105676   +
1105677   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1105678   +
1105679   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1105680   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1105681   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1105682   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1105683   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1105684   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1105685   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105686   +end;
MPRINT(EM_DIAGRAM):   end;
1105687   +else do;
MPRINT(EM_DIAGRAM):   else do;
1105688   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1105689   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1105690   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1105691   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1105692   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1105693   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1105694   +   end;
MPRINT(EM_DIAGRAM):   end;
1105695   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1105696   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1105697   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1105698   +   end;
MPRINT(EM_DIAGRAM):   end;
1105699   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1105700   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1105701   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1105702   +   end;
MPRINT(EM_DIAGRAM):   end;
1105703   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1105704   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1105705   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1105706   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1105707   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105708   +   end;
MPRINT(EM_DIAGRAM):   end;
1105709   +end;
MPRINT(EM_DIAGRAM):   end;
1105710   +
1105711   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105712   +*** Checking missing input Interval
1105713   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1105714   +
1105715   +IF NMISS(
1105716   +   AcceptedCmpTotal ,
1105717   +   Frq ,
1105718   +   Income ,
1105719   +   Mnt ,
1105720   +   MntGoldProds ,
1105721   +   MntMeatProducts ,
1105722   +   MntWines ,
1105723   +   NumDistPurchases ,
1105724   +   RFMstat ,
1105725   +   RMntFrq ,
1105726   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1105727   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1105728   +
1105729   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1105730   +END;
MPRINT(EM_DIAGRAM):   END;
1105731   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105732   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1105733   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105734   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105735   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1105736   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1105737   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1105738   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1105739   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1105740   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1105741   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1105742   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1105743   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1105744   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1105745   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1105746   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1105747   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1105748   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1105749   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1105750   +END;
MPRINT(EM_DIAGRAM):   END;
1105751   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105752   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1105753   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1105754   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1105755   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1105756   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1105757   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1105758   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1105759   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1105760   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1105761   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1105762   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1105763   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1105764   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1105765   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1105766   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1105767   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1105768   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1105769   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1105770   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1105771   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1105772   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1105773   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1105774   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1105775   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1105776   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1105777   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1105778   +END;
MPRINT(EM_DIAGRAM):   END;
1105779   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105780   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1105781   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105782   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105783   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1105784   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105785   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105786   +   H1x1_1  =     0.04025840082513 * S_AcceptedCmpTotal
1105787   +          +     0.06318752729093 * S_Frq  +    -1.29545791179409 * S_Income
1105788   +          +    -7.11030940481191 * S_Mnt  +     0.43390451556969 *
1105789   +        S_MntGoldProds  +     1.69733563869673 * S_MntMeatProducts
1105790   +          +     0.48225589030087 * S_MntWines  +     2.50429846731068 *
1105791   +        S_NumDistPurchases  +     0.19831933540707 * S_RFMstat
1105792   +          +     0.96752741277283 * S_RMntFrq  +    -0.27394913723816 *
1105793   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.04025840082513 * S_AcceptedCmpTotal + 0.06318752729093 * 
S_Frq + -1.29545791179409 * S_Income + -7.11030940481191 * S_Mnt + 0.43390451556969 * 
S_MntGoldProds + 1.69733563869673 * S_MntMeatProducts + 0.48225589030087 * S_MntWines + 
2.50429846731068 * S_NumDistPurchases + 0.19831933540707 * S_RFMstat + 0.96752741277283 * 
S_RMntFrq + -0.27394913723816 * S_Recency ;
1105794   +   H1x1_1  = H1x1_1  +    -0.13186660711464 * G_Marital_Status0
1105795   +          +     0.76507926337086 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.13186660711464 * G_Marital_Status0 + 
0.76507926337086 * G_Marital_Status1 ;
1105796   +   H1x1_1  =    -2.07751077372903 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -2.07751077372903 + H1x1_1 ;
1105797   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105798   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105799   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1105800   +END;
MPRINT(EM_DIAGRAM):   END;
1105801   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105802   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1105803   +END;
MPRINT(EM_DIAGRAM):   END;
1105804   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105805   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1105806   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105807   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105808   +   H1x2_1  =     0.04623108287373 * S_AcceptedCmpTotal
1105809   +          +     0.51673349328259 * S_Frq  +    -0.55409697473564 * S_Income
1105810   +          +    -1.80152141029664 * S_Mnt  +    -0.01192709316085 *
1105811   +        S_MntGoldProds  +    -1.08887322486716 * S_MntMeatProducts
1105812   +          +    -0.54592829528894 * S_MntWines  +     0.87903819952137 *
1105813   +        S_NumDistPurchases  +     0.15549845875066 * S_RFMstat
1105814   +          +     0.64330086736687 * S_RMntFrq  +    -0.34615492895156 *
1105815   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.04623108287373 * S_AcceptedCmpTotal + 0.51673349328259 * 
S_Frq + -0.55409697473564 * S_Income + -1.80152141029664 * S_Mnt + -0.01192709316085 * 
S_MntGoldProds + -1.08887322486716 * S_MntMeatProducts + -0.54592829528894 * S_MntWines + 
0.87903819952137 * S_NumDistPurchases + 0.15549845875066 * S_RFMstat + 0.64330086736687 * 
S_RMntFrq + -0.34615492895156 * S_Recency ;
1105816   +   H1x2_1  = H1x2_1  +     0.04272112278258 * G_Marital_Status0
1105817   +          +     0.52128005949051 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.04272112278258 * G_Marital_Status0 + 
0.52128005949051 * G_Marital_Status1 ;
1105818   +   H1x2_1  =    -1.26211132425318 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.26211132425318 + H1x2_1 ;
1105819   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105820   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105821   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1105822   +END;
MPRINT(EM_DIAGRAM):   END;
1105823   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105824   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1105825   +END;
MPRINT(EM_DIAGRAM):   END;
1105826   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105827   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1105828   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105829   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105830   +   H1x3_1  =    -0.31931196892076 * S_AcceptedCmpTotal
1105831   +          +     0.88013014607652 * S_Frq  +       2.380671405121 * S_Income
1105832   +          +    -1.76438631408259 * S_Mnt  +    -0.88002382547081 *
1105833   +        S_MntGoldProds  +     3.22143288077158 * S_MntMeatProducts
1105834   +          +    -1.46872497431142 * S_MntWines  +     4.48983574481035 *
1105835   +        S_NumDistPurchases  +     1.49229101598701 * S_RFMstat
1105836   +          +     0.86000773065844 * S_RMntFrq  +     0.41345680894813 *
1105837   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.31931196892076 * S_AcceptedCmpTotal + 0.88013014607652 * 
S_Frq + 2.380671405121 * S_Income + -1.76438631408259 * S_Mnt + -0.88002382547081 * 
S_MntGoldProds + 3.22143288077158 * S_MntMeatProducts + -1.46872497431142 * S_MntWines + 
4.48983574481035 * S_NumDistPurchases + 1.49229101598701 * S_RFMstat + 0.86000773065844 * 
S_RMntFrq + 0.41345680894813 * S_Recency ;
1105838   +   H1x3_1  = H1x3_1  +     0.24244728138592 * G_Marital_Status0
1105839   +          +     0.68199092237732 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + 0.24244728138592 * G_Marital_Status0 + 
0.68199092237732 * G_Marital_Status1 ;
1105840   +   H1x3_1  =      0.8344057531016 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.8344057531016 + H1x3_1 ;
1105841   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105842   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105843   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1105844   +END;
MPRINT(EM_DIAGRAM):   END;
1105845   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105846   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1105847   +END;
MPRINT(EM_DIAGRAM):   END;
1105848   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105849   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1105850   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105851   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105852   +   H1x4_1  =    -0.13659878639954 * S_AcceptedCmpTotal
1105853   +          +     0.45428559765776 * S_Frq  +    -0.42693519984843 * S_Income
1105854   +          +      1.1792020785091 * S_Mnt  +     0.71939074066077 *
1105855   +        S_MntGoldProds  +    -0.72620231508443 * S_MntMeatProducts
1105856   +          +    -0.32426637270285 * S_MntWines  +    -0.38988807626314 *
1105857   +        S_NumDistPurchases  +    -3.02140616024044 * S_RFMstat
1105858   +          +     -0.8223455835322 * S_RMntFrq  +     0.94450643717764 *
1105859   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.13659878639954 * S_AcceptedCmpTotal + 0.45428559765776 * 
S_Frq + -0.42693519984843 * S_Income + 1.1792020785091 * S_Mnt + 0.71939074066077 * 
S_MntGoldProds + -0.72620231508443 * S_MntMeatProducts + -0.32426637270285 * S_MntWines + 
-0.38988807626314 * S_NumDistPurchases + -3.02140616024044 * S_RFMstat + -0.8223455835322 * 
S_RMntFrq + 0.94450643717764 * S_Recency ;
1105860   +   H1x4_1  = H1x4_1  +    -0.12208204500004 * G_Marital_Status0
1105861   +          +    -0.36246978080124 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.12208204500004 * G_Marital_Status0 + 
-0.36246978080124 * G_Marital_Status1 ;
1105862   +   H1x4_1  =    -0.95371898342722 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.95371898342722 + H1x4_1 ;
1105863   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105864   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105865   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1105866   +END;
MPRINT(EM_DIAGRAM):   END;
1105867   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105868   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1105869   +END;
MPRINT(EM_DIAGRAM):   END;
1105870   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105871   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1105872   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105873   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105874   +   H2x1_1  =    -5.17307699680657 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -5.17307699680657 * H1x1_1 ;
1105875   +   H2x1_1  = H2x1_1  +     5.68206219040914 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 5.68206219040914 * H1x2_1 ;
1105876   +   H2x1_1  = H2x1_1  +      0.0671760867147 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.0671760867147 * H1x3_1 ;
1105877   +   H2x1_1  = H2x1_1  +     1.77797879568099 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.77797879568099 * H1x4_1 ;
1105878   +   H2x1_1  =    -1.18533244144823 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.18533244144823 + H2x1_1 ;
1105879   +   H2x1_1  = SIN(H2x1_1 );
MPRINT(EM_DIAGRAM):   H2x1_1 = SIN(H2x1_1 );
1105880   +END;
MPRINT(EM_DIAGRAM):   END;
1105881   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105882   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1105883   +END;
MPRINT(EM_DIAGRAM):   END;
1105884   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105885   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1105886   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105887   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105888   +   H2x2_1  =    -0.10427732572046 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.10427732572046 * H1x1_1 ;
1105889   +   H2x2_1  = H2x2_1  +    -2.43600502591825 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.43600502591825 * H1x2_1 ;
1105890   +   H2x2_1  = H2x2_1  +    -2.36291758854448 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.36291758854448 * H1x3_1 ;
1105891   +   H2x2_1  = H2x2_1  +    -0.21725276506237 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21725276506237 * H1x4_1 ;
1105892   +   H2x2_1  =     -1.6479184469931 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -1.6479184469931 + H2x2_1 ;
1105893   +   H2x2_1  = SIN(H2x2_1 );
MPRINT(EM_DIAGRAM):   H2x2_1 = SIN(H2x2_1 );
1105894   +END;
MPRINT(EM_DIAGRAM):   END;
1105895   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105896   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1105897   +END;
MPRINT(EM_DIAGRAM):   END;
1105898   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105899   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1105900   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105901   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105902   +   H2x3_1  =    -2.55881911263862 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.55881911263862 * H1x1_1 ;
1105903   +   H2x3_1  = H2x3_1  +    -1.36800479963026 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.36800479963026 * H1x2_1 ;
1105904   +   H2x3_1  = H2x3_1  +     2.49318998831913 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 2.49318998831913 * H1x3_1 ;
1105905   +   H2x3_1  = H2x3_1  +     -0.2723650813761 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -0.2723650813761 * H1x4_1 ;
1105906   +   H2x3_1  =    -2.02002422056859 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.02002422056859 + H2x3_1 ;
1105907   +   H2x3_1  = SIN(H2x3_1 );
MPRINT(EM_DIAGRAM):   H2x3_1 = SIN(H2x3_1 );
1105908   +END;
MPRINT(EM_DIAGRAM):   END;
1105909   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105910   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1105911   +END;
MPRINT(EM_DIAGRAM):   END;
1105912   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105913   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1105914   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105915   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105916   +   H3x1_1  =    -5.17928987039105 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -5.17928987039105 * H2x1_1 ;
1105917   +   H3x1_1  = H3x1_1  +    -4.99188815628878 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -4.99188815628878 * H2x2_1 ;
1105918   +   H3x1_1  = H3x1_1  +    -1.59478766396441 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.59478766396441 * H2x3_1 ;
1105919   +   H3x1_1  =    -1.17125580012514 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -1.17125580012514 + H3x1_1 ;
1105920   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105921   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105922   +   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x1_1 = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
1105923   +END;
MPRINT(EM_DIAGRAM):   END;
1105924   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105925   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1105926   +END;
MPRINT(EM_DIAGRAM):   END;
1105927   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105928   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1105929   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105930   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105931   +   H3x2_1  =       2.158894329803 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 2.158894329803 * H2x1_1 ;
1105932   +   H3x2_1  = H3x2_1  +    -2.32757193457059 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -2.32757193457059 * H2x2_1 ;
1105933   +   H3x2_1  = H3x2_1  +    -6.00752921212942 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -6.00752921212942 * H2x3_1 ;
1105934   +   H3x2_1  =    -0.08802993131411 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.08802993131411 + H3x2_1 ;
1105935   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105936   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105937   +   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x2_1 = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
1105938   +END;
MPRINT(EM_DIAGRAM):   END;
1105939   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105940   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1105941   +END;
MPRINT(EM_DIAGRAM):   END;
1105942   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105943   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1105944   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105945   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105946   +   H4x1_1  =      7.3411593355967 * H3x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 7.3411593355967 * H3x1_1 ;
1105947   +   H4x1_1  = H4x1_1  +    -3.06647078805944 * H3x2_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -3.06647078805944 * H3x2_1 ;
1105948   +   H4x1_1  =    -1.39824841795123 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = -1.39824841795123 + H4x1_1 ;
1105949   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1105950   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1105951   +   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H4x1_1 = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
1105952   +END;
MPRINT(EM_DIAGRAM):   END;
1105953   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105954   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1105955   +END;
MPRINT(EM_DIAGRAM):   END;
1105956   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105957   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1105958   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1105959   +
1105960   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1105961   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1105962   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1105963   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1105964   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1105965   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1105966   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1105967   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1105968   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1105969   +end;
MPRINT(EM_DIAGRAM):   end;
1105970   +else do;
MPRINT(EM_DIAGRAM):   else do;
1105971   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1105972   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1105973   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1105974   +   end;
MPRINT(EM_DIAGRAM):   end;
1105975   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1105976   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1105977   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1105978   +   end;
MPRINT(EM_DIAGRAM):   end;
1105979   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1105980   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1105981   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1105982   +   end;
MPRINT(EM_DIAGRAM):   end;
1105983   +end;
MPRINT(EM_DIAGRAM):   end;
1105984   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1105985   +   P_DepVar1  =     9.74622448352833 * H4x1_1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 9.74622448352833 * H4x1_1 ;
1105986   +   P_DepVar1  =    -7.88591846838259 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.88591846838259 + P_DepVar1 ;
1105987   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1105988   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1105989   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1105990   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1105991   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1105992   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1105993   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1105994   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1105995   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1105996   +END;
MPRINT(EM_DIAGRAM):   END;
1105997   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1105998   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1105999   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1106000   +END;
MPRINT(EM_DIAGRAM):   END;
1106001   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1106002   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1106003   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1106004   +END;
MPRINT(EM_DIAGRAM):   END;
1106005   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1106006   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1106007   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1106008   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1106009   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1106010   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1106011   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1106012   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1106013   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1106014   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1106015   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1106016   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1106017   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1106018   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1106019   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1106020   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1106021   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1106022   +END;
MPRINT(EM_DIAGRAM):   END;
1106023   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1106024   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1106025   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1106026   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1106027    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL30_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1106028    quit;
1106029    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1106030    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1106031    * AutoNeural30: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * AutoNeural30: Computing metadata for TRAIN data;
1106032    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.AUTONEURAL30_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.AutoNeural30_TRAIN out=_tempAdvisor 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.AutoNeural30_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.AutoNeural30_TRAIN out=WORK.M0MFA5OL 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MFA5OL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MFA5OL(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MFA5OL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MFA5OL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3U0X6W7 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0PMLN05(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U0X6W7;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural30_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "AutoNeural30";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "AutoNeural30";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural30: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1106344    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1106345    set EMWS8.AutoNeural30_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural30_EMINFO;
1106346    where DATA='AutoNeural30' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='AutoNeural30' and KEY ^in('DECDATA', 'DECMETA', 
'IMPORTANCE', 'MODEL');
1106347    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL30_EMINFO.
      WHERE (DATA='AutoNeural30') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1106348    data EMWS8.AutoNeural30_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.AutoNeural30_EMINFO;
1106349    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1106350    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1106351    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.AUTONEURAL30_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
1106355    run;
1106356    data EMWS8.AutoNeural30_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural30_EMINFO;
1106357    set EMWS8.AutoNeural30_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural30_EMINFO WORK.MODELTEMP_INFO;
1106358    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL30_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL30_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1106359    proc sort data = EMWS8.AutoNeural30_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.AutoNeural30_EMINFO NOTHREADS;
1106360    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1106361    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL30_EMINFO.
NOTE: The data set EMWS8.AUTONEURAL30_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1106362    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1106363    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1106364    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1106365    proc sort data = EMWS8.AutoNeural30_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.AutoNeural30_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1106366    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1106367    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL30_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1106368    data EMWS8.AutoNeural30_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural30_EMINFO;
1106369    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1106370    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1106371    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL30_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1106372    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1106373    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1106374    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1106375    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.AUTONEURAL30_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.AUTONEURAL30_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
