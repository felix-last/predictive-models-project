MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H15m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                10 de Março de 2016
Time:                06H15m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0WTD7A5 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0WTD7A5 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H15m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H15m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21024      proc freq data=EMWS8.FIMPORT2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.FIMPORT2_VariableSet noprint;
21025      table ROLE*LEVEL/out=WORK.FIMPORT2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORT2META;
21026      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 19 observations read from the data set EMWS8.FIMPORT2_VARIABLESET.
NOTE: The data set WORK.FIMPORT2META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

21027      proc print data=WORK.FIMPORT2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORT2META label noobs;
21028      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21029      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21030      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21031      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21032      run;

NOTE: There were 3 observations read from the data set WORK.FIMPORT2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21033      title10;
MPRINT(EM_DIAGRAM):   title10;
21034      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21364      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21365      * FIMPORT2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT2: Generation of macros and macro variables;
21366      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21367      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21368      %let EMEXCEPTIONSTRING=;
21369      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21370      * TRAIN: FIMPORT2;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT2;
21371      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21372      %let EM_ACTION = TRAIN;
21373      %let syscc = 0;
21374      /* Fimport.source */
21375      %macro main;
21376            %if %upcase(&EM_ACTION) = CREATE %then %do;
21377               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21378               %include temp;
21379               filename temp;
21380               %create;
21381            %end;
21382            %else
21383            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21384               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21385               %include temp;
21386               filename temp;
21387               %train;
21388            %end;
21389            %else
21390            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21391               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21392               %include temp;
21393               filename temp;
21394               %update;
21395            %end;
21396            %else
21397            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21398               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21399               %include temp;
21400               filename temp;
21401               %property;
21402            %end;
21403             %else
21404            %if %upcase(&EM_ACTION) = SCORE %then %do;
21405               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21406               %include temp;
21407               filename temp;
21408               %score;
21409            %end;
21410            %else
21411            %if %upcase(&EM_ACTION) = REPORT %then %do;
21412               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21413               %include temp;
21414               filename temp;
21415               %report;
21416            %end;
21417            %else
21418            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21419               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21420               %include temp;
21421               filename temp;
21422               %openvariableset;
21423            %end;
21424            %else
21425            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21426               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21427               %include temp;
21428               filename temp;
21429               %closevariableset;
21430            %end;
21431      %mend main;
21432      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21433     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21434     +%macro appendExt;
21435     +   data _null_;
21436     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21437     +      rfile = reverse(tempuif);
21438     +      period = indexc(rfile,".");
21439     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21440     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21441     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21442     +   run;
21443     +%mend appendExt;
21445     +%macro getNobs(ds);
21446     + %global dset nobs;
21447     + %let dset=&ds;
21448     + %let dsid = %sysfunc(open(&dset));
21449     + %if &dsid %then %do;
21450     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21451     +      %let rc = %sysfunc(close(&dsid));
21452     +   %end;
21453     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21454     +%mend getNobs;
21455     +%macro keepordrop;
21456     +  proc contents data=work.importfile noprint
21457     +  out=work.importattrs;
21458     +  run;
21459     +  %getNobs(work.importattrs);
21460     +  data _null_;
21461     +    set  work.importattrs;
21462     +    call symput("varname"||left(_n_),name);
21463     +  run;
21465     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21466     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21467     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21468     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21469     +     %put diff=&diff;
21470     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21471     +         %let kORd = keep;
21472     +             %let start=1;
21473     +             %let end = &EM_PROPERTY_MAXCOLS;
21474     +       %end;
21475     +     %else %do;
21476     +         %let kORd = drop;
21477     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21478     +             %let end = &nobs;
21479     +       %end;
21480     +     data &em_user_data;
21481     +        set &em_user_data;
21482     +        &kORd
21483     +        %do i = &start %to &end;
21484     +            &&varname&i
21485     +         %end;
21486     +        ;
21487     +     run;
21488     +%end;
21489     +%mend keepordrop;
21490     +%macro dropformatvars;
21491     +   %put fmtcnt=&fmtcnt;
21492     +   data new;
21493     +     set work.importfile;
21494     +     %do i = 1 %to &fmtcnt;
21495     +       x1zy&i =put(&&varname&i,&&fmt&i);
21496     +     %end;
21497     +   run;
21498     +   data new;
21499     +     set new;
21500     +     drop
21501     +     %do i = 1 %to &fmtcnt;
21502     +     &&varname&i
21503     +     %end;
21504     +     ;
21505     +   run;
21506     +   proc datasets library=work nolist;
21507     +     modify new;
21508     +     %do i = 1 %to &fmtcnt;
21509     +     rename x1zy&i=&&varname&i;
21510     +     %end;
21511     +   run; quit;
21512     +   data work.importfile;
21513     +     set new;
21514     +   run;
21515     +%mend;
21516     +%macro train;
21517     +   %em_getname(key=DATA,           type=DATA);
21518     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21519     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21520     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21522     +   %appendExt;
21523     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21524     +      proc import table=%trim(&EM_PROPERTY_ACCESSTABLE)
21525     +      out=work.importfile
21526     +      dbms = ACCESS
21527     +      replace;
21528     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21529     +      database="%trim(&EM_USER_USERIMPORTFILE)";
21530     +      %end;
21531     +      %else %do;
21532     +      database="%trim(&EM_PROPERTY_IFILENAME)";
21533     +      %end;
21534     +   %end;
21535     +   %else %do;
21536     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21537     +      proc import datafile="&EM_USER_USERIMPORTFILE"
21538     +      %end;
21539     +      %else %do;
21540     +      proc import datafile="%trim(&EM_PROPERTY_IFILENAME)"
21541     +      %end;
21542     +         out=work.importfile
21544     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21545     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21546     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21547     +         dbms=&EM_PROPERTY_FILETYPE
21548     +      %end;
21549     +      %else %do;
21550     +         dbms=TAB
21551     +      %end;
21552     +      /* Work around for the following defects:S0560899 and S0560009.   */
21553     +      %let sasEnv=%sysfunc(getlocenv());
21554     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21555     +         dbms=EXCEL
21556     +      %end;
21558     +      replace;
21559     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21560     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21561     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21562     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21563     +            getnames=&EM_PROPERTY_NAMEROW;
21564     +        %end;
21565     +      %end;
21566     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21567     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21568     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21569     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21570     +               delimiter=" ";
21571     +            %end;
21572     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21573     +               /* Do not specifiy a delimiter */
21574     +            %end;
21575     +            %else %do;
21576     +               delimiter="&EM_PROPERTY_DELIMITER";
21577     +            %end;
21578     +         %end;
21579     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21580     +            datarow=&EM_PROPERTY_SKIPROWS;
21581     +            /* Guessingrows must be >= skiprows */
21582     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21583     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21584     +            %end;
21585     +         %end;
21586     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21587     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21588     +         %end;
21589     +       %end;
21590     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21591     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21592     +            FMTLIB = work.formats;
21593     +      %end;
21594     +   %end;
21595     +   run;
21596     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21597     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21598     +      %global fmtcnt;
21599     +      %let fmtcnt=0;
21600     +      proc contents data=work.importfile out=work.impattrs noprint;
21601     +      run;
21602     +      data _null_;
21603     +        set work.impattrs;
21604     +        if _n_=1 then i=0;
21605     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21606     +           i = i+1;
21607     +           varname = substr(name, 1, length(name));
21608     +           call symput("fmt"||left(i), trim(format)||".");
21609     +           call symput("varname"||left(i), varname);
21610     +           call symput("fmtcnt",left(i));
21611     +      end;
21612     +      retain i;
21613     +     run;
21614     +    %if &fmtcnt > 0 %then %do;
21615     +       %dropformatvars;
21616     +    %end;
21617     +    proc datasets lib=work memtype=data nolist;
21618     +        modify importfile;
21619     +        attrib _all_ format=;
21620     +    run;
21621     +    quit;
21622     +   %end;
21624     +   %let _fimportObs  = 0;
21625     +   %let _fimportVars = 0;
21626     +   %if %sysfunc(exist(work.importFile)) %then %do;
21627     +       %let dsid = %sysfunc(open(work.importFile));
21628     +       %if &dsid %then %do;
21629     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21630     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21631     +       %let dsid = %sysfunc(close(&dsid));
21632     +       %end;
21633     +   %end;
21635     +   %if ^&_fimportObs %then %do;
21636     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21637     +       %goto endtrain;
21638     +   %end;
21639     +   %if ^&_fimportVars %then %do;
21640     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21641     +       %goto endtrain;
21642     +   %end;
21644     +   data &em_user_data;
21645     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21646     +   run;
21647     +   %keepordrop;
21649     +   %em_getname(key=EMSTAT,     type=DATA);
21651     +   proc datasets lib=&em_lib nolist;
21652     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21653     +   run;
21655     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21656     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21657     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21658     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21659     +            maxClassLevels=20, identifyEmptyColumns=Y,
21660     +            outdata=&em_user_EMCMETADEFAULT,
21661     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21663     +        data &em_user_emcmetadefault;
21664     +           set &em_user_emcmetadefault;
21665     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21666     +        run;
21668     +        data &em_data_eminfo;
21669     +           length TARGET KEY $32  DATA $43;
21670     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21671     +        run;
21673     +   %end;
21674     +   %else %do;
21675     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21676     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21677     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21678     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21680     +            %if "&em_property_summarize" eq "Y" %then %do;
21681     +                %em_getname(key=EMSTAT,  type=DATA);
21682     +                data &em_data_eminfo;
21683     +                   length TARGET KEY $32  DATA $43;
21684     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21685     +                run;
21686     +            %end;
21687     +   %end;
21689     +   data &em_user_EMCMETADEFAULT;
21690     +      set &em_user_EMCMETADEFAULT;
21691     +      length DROP $1;
21692     +      DROP='N';
21693     +   run;
21695     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
21697     +   data _temp;
21698     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
21699     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
21700     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
21701     +      COLUMNMETAMODTIME=MODTIME;
21702     +   run;
21703     +   proc sort data=&em_data_importset;
21704     +      by PORT;
21705     +   run;
21706     +   data &em_data_importset;
21707     +      merge &em_data_importset _temp;
21708     +      by PORT;
21709     +      if PORT='DATA' then ROLE="&em_property_role";
21710     +   run;
21712     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21714     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21715     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
21716     +            filename x "&em_user_variablesetdelta";
21717     +            data &em_data_variableset;
21718     +               set &em_user_emcmetadefault;
21719     +               %inc X;
21720     +            run;
21721     +            filename x;
21722     +        %end;
21723     +        %else %do;
21724     +            data &em_data_variableset;
21725     +               set &em_user_emcmetadefault;
21726     +            run;
21727     +        %end;
21728     +    %end;
21730     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21731     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
21732     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
21733     +         id NAME;
21734     +      run;
21736     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
21737     +         data _null_;
21738     +            length string $200;
21739     +            set _DiffMeta end=eof;
21740     +            where _type_='COMPARE';
21741     +            file x1;
21742     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21743     +            put string;
21744     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21745     +            put string;
21746     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21747     +            put string;
21748     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21749     +            put string;
21750     +            put 'end;';
21751     +            if drop='Y' then do;
21752     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
21753     +               put string;
21754     +            end;
21755     +            if eof then
21756     +               put 'drop DROP;';
21757     +         run;
21759     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
21760     +         filename x2 "&em_user_deltacode";
21761     +         %em_copyfile(infref=x1, outfref=x2);
21762     +         filename x1;
21763     +         filename x2;
21765     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21766     +         filename x "&em_user_variablesetdelta";
21767     +         data _null_;
21768     +            length string $200;
21769     +            set _DiffMeta end=eof;
21770     +            where _type_='COMPARE';
21771     +            file x;
21772     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21773     +            put string;
21774     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21775     +            put string;
21776     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21777     +            put string;
21778     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21779     +            put string;
21780     +            string = '   DROP="'!!strip(DROP)!!'";';
21781     +            put string;
21782     +            put 'end;';
21783     +         run;
21784     +         filename x;
21785     +       proc datasets lib=work nolist;
21786     +          delete _DiffMeta;
21787     +       run;
21789     +       data &em_data_exportset;
21790     +          set &em_data_exportset;
21791     +          if NODEPORT='TRAIN' then do;
21792     +             ROLE="&em_property_role";
21793     +             COLUMNMETAMODTIME=datetime();
21794     +             MODTIME=datetime();
21795     +             DATASET="&em_nodeid._train";
21796     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
21797     +             DELTACODE="CDelta_TRAIN";
21798     +             APPLYDELTA='Y';
21799     +             EXPORT='Y';
21800     +             NEEDUPDATE='Y';
21802     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
21803     +                EMINFO="&em_data_eminfo";
21804     +                EMINFOMODTIME=datetime();
21805     +            %end;
21806     +            %else %do;
21807     +                EMINFO='';
21808     +                EMINFOMODTIME=.;
21809     +            %end;
21810     +          end;
21811     +       run;
21812     +   %end;
21814     +  proc contents data=&em_user_data;
21815     +  run;
21816     +  proc datasets library=work nolist;
21817     +   delete importfile importattrs new;
21818     +   quit;
21819     +  run;
21821     +  %endtrain:
21822     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
filetype=*xlsx*
delimiter=*,*
MPRINT(TRAIN):   proc import datafile="E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\USERIMPORTFILE.xlsx   " out=work.importfile dbms=xlsx replace;
MPRINT(TRAIN):   RXLX;
MPRINT(TRAIN):   run;

NOTE: The import data set has 7500 observations and 19 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           1.32 seconds
      cpu time            0.79 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT2_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 7500 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS8.FIMPORT2_DATA has 7500 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 19 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      32:29   
NOTE: There were 19 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=19  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete FIMPORT2_EMSTATDEFAULT FIMPORT2_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS8.FIMPORT2_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS8.FIMPORT2_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.42 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

21823      %let SYSCC = 0;
21824      options validvarname=any;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
21825      proc contents data=EMWS8.FIMPORT2_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.FIMPORT2_DATA out=_tempAdvisor noprint;
21826      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK._TEMPADVISOR has 19 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21827      options validvarname=V7;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
21828      %let _dsidTable = 0;
21829      %let _engineTable =;
21830      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
21831      dsid = open('EMWS8.FIMPORT2_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.FIMPORT2_DATA');
21832      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
21833      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
21834      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
21835      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
21836      end;
MPRINT(EMADVISECOLUMNS):   end;
21837      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21838      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
21839      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
21840      set EMWS8.FIMPORT2_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS8.FIMPORT2_DATA;
21841      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
21842      output;
MPRINT(EMADVISECOLUMNS):   output;
21843      stop;
MPRINT(EMADVISECOLUMNS):   stop;
21844      end;
MPRINT(EMADVISECOLUMNS):   end;
21845      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT2_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21846      proc contents data=EMWS8.FIMPORT2_DATA
21847      out=WORK.M13F2D_R noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.FIMPORT2_DATA out=WORK.M13F2D_R noprint;
21848      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M13F2D_R has 19 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21849      data WORK.M13F2D_R;
MPRINT(EMADVISECOLUMNS):    data WORK.M13F2D_R;
21850      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
21851      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
21852      set WORK.M13F2D_R(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M13F2D_R(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
21853      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
21854      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
21855      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
21856      if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21857      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21858      end;
MPRINT(EMADVISECOLUMNS):   end;
21859      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
21860      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
21861      if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21862      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21863      end;
MPRINT(EMADVISECOLUMNS):   end;
21864      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
21865      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
21866      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
21867      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
21868      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
21869      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 19 observations read from the data set WORK.M13F2D_R.
NOTE: The data set WORK.M13F2D_R has 19 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21870      data WORK.M13F2D_R;
MPRINT(EMADVISECOLUMNS):    data WORK.M13F2D_R;
21871      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
21872      set WORK.M13F2D_R;
MPRINT(EMADVISECOLUMNS):   set WORK.M13F2D_R;
21873      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
21874      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 19 observations read from the data set WORK.M13F2D_R.
NOTE: The data set WORK.M13F2D_R has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1U3TUG3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
21878      data WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U3TUG3;
21879      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
21880      set WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U3TUG3;
21881      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 19 observations read from the data set WORK.M1U3TUG3.
NOTE: The data set WORK.M1U3TUG3 has 19 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M3K__BPQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U3TUG3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.20 seconds
      cpu time            0.09 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.FIMPORT2_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS8.FIMPORT2_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;

NOTE: There were 19 observations read from the data set EMWS8.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT2_EMCMETADEFAULT has 19 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

22099      %let SYSCC = 0;
22100      data EMWS8.FIMPORT2_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS8.FIMPORT2_EMTMETADEFAULT;
22101      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
22102      LIBNAME = "EMWS8";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS8";
22103      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS8.FIMPORT2_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22104      options validvarname=any;
MPRINT(EMADVISETABLE):    options validvarname=any;
22105      proc contents data=EMWS8.FIMPORT2_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT2_DATA out=_tempAdvisor noprint;
22106      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set WORK._TEMPADVISOR has 19 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22107      options validvarname=V7;
MPRINT(EMADVISETABLE):   options validvarname=V7;
MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS8.FIMPORT2_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT2_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M2ZZD56U;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M2ZZD56U(obs=1);
MPRINT(EMADVISETABLE):   nobs = 7500;
MPRINT(EMADVISETABLE):   ncols = 19;
MPRINT(EMADVISETABLE):   nbytes = 1168384;
MPRINT(EMADVISETABLE):   memname = "FIMPORT2_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1773209711.549;
MPRINT(EMADVISETABLE):   modate = 1773209711.549;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS8.FIMPORT2_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT2_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT2_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.FIMPORT2_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT2_IMPORTSET.
NOTE: The data set EMWS8.FIMPORT2_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT2_ImportSet;
MPRINT(TRAIN):   merge EMWS8.FIMPORT2_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="SCORE";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT2_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS8.FIMPORT2_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS8.FIMPORT2_VariableSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT2_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\VARIABLESETDELTA.txt.
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 19 observations read from the data set EMWS8.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT2_VARIABLESET has 19 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS8.FIMPORT2_VariableSet base=EMWS8.FIMPORT2_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 19 observations read from the data set EMWS8.FIMPORT2_VARIABLESET.
NOTE: There were 19 observations read from the data set EMWS8.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 0 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H15m,
      Create Time=03 de Março de 2016 08H23m

NOTE: 0 records were written to the file X1.
NOTE: There were 0 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H15m,
      Create Time=03 de Março de 2016 08H23m

NOTE: 0 records were written to the file X2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\FIMPORT2\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H15m,
      Create Time=03 de Março de 2016 08H23m

NOTE: 0 records were written to the file X.
NOTE: There were 0 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT2_ExportSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT2_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="SCORE";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT2_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT2_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT2_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT2_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS8.FIMPORT2_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   run;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22136      *------------------------------------------------------------*;
22137      * End TRAIN: FIMPORT2;
22138      *------------------------------------------------------------*;

22139      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22140      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22141      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22142      ;
MPRINT(EM_DIAGRAM):   ;
22143      ;
MPRINT(EM_DIAGRAM):   ;
22144      ;
MPRINT(EM_DIAGRAM):   ;
22145      ;
MPRINT(EM_DIAGRAM):   ;
22146      quit;
MPRINT(EM_DIAGRAM):   quit;
22147      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22148      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22149      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22150      /*; *"; *'; */
22151      ;
MPRINT(EM_DIAGRAM):   ;
22152      run;
MPRINT(EM_DIAGRAM):   run;
22153      quit;
MPRINT(EM_DIAGRAM):   quit;
22154      /* Reset EM Options */
22155      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22156      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22157      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
