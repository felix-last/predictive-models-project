MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.27 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.27 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O374MXUO 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O374MXUO new;
MPRINT(EM_DIAGRAM):   run;
942429     proc transpose data=EMWS8.Reg10_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg10_EMESTIMATE out=WORK.TEMPREG;
942430     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
942431     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG10_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 63 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

942432     proc transpose data=EMWS8.Reg10_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg10_MAPDS out=WORK.TEMPREG2;
942433     var "AcceptedCmp10"n--"Teenhome"n;
MPRINT(EM_DIAGRAM):   var "AcceptedCmp10"n--"Teenhome"n;
942434     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG10_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 29 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

942435     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
942436     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
942437     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 63 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 63 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

942438     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
942439     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
942440     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 29 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

942441     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
942442     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
942443     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
942444     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
942445     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 63 observations read from the data set WORK.TEMPREG.
NOTE: There were 29 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 21 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

942446     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
942447     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
942448     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
942449     i=1;
MPRINT(EM_DIAGRAM):   i=1;
942450     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
942451     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
942452     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
942453     output;
MPRINT(EM_DIAGRAM):   output;
942454     end;
MPRINT(EM_DIAGRAM):   end;
942455     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 21 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

942456     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
942457     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
942458     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set WORK.TEMPREG3.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 18 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

942459     filename emflow
942459   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg10: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
942460     *------------------------------------------------------------*;
942461     * Reg10: Scoring DATA data;
942462     *------------------------------------------------------------*;
942463     data EMWS8.Reg10_TRAIN
942464     / view=EMWS8.Reg10_TRAIN
942465     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg10_TRAIN / view=EMWS8.Reg10_TRAIN ;
942466     set EMWS8.Meta2_TRAIN
942467     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta2_TRAIN ;
942468     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas.
942469    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
942470    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
942471    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
942472    +
942473    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
942474    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
942475    +
942476    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
942477    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
942478    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
942479    +array REG10DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG10DRF [2] $12 _temporary_ ('1' '0' );
942480    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
942481    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
942482    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
942483    +ARRAY REG10DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG10DRU[2] _TEMPORARY_ (1 0);
942484    +
942485    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
942486    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
942487    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
942488    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
942489    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
942490    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942491    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
942492    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
942493    +end;
MPRINT(EM_DIAGRAM):   end;
942494    +else do;
MPRINT(EM_DIAGRAM):   else do;
942495    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
942496    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
942497    +   end;
MPRINT(EM_DIAGRAM):   end;
942498    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
942499    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
942500    +   end;
MPRINT(EM_DIAGRAM):   end;
942501    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942502    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
942503    +   end;
MPRINT(EM_DIAGRAM):   end;
942504    +end;
MPRINT(EM_DIAGRAM):   end;
942505    +
942506    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
942507    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
942508    +
942509    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
942510    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
942511    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942512    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942513    +end;
MPRINT(EM_DIAGRAM):   end;
942514    +
942515    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
942516    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
942517    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942518    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942519    +end;
MPRINT(EM_DIAGRAM):   end;
942520    +
942521    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
942522    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
942523    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942524    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942525    +end;
MPRINT(EM_DIAGRAM):   end;
942526    +
942527    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
942528    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
942529    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942530    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942531    +end;
MPRINT(EM_DIAGRAM):   end;
942532    +
942533    +*** Check MntWines for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntWines for missing values ;
942534    +if missing( MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntWines ) then do;
942535    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942536    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942537    +end;
MPRINT(EM_DIAGRAM):   end;
942538    +
942539    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
942540    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
942541    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942542    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942543    +end;
MPRINT(EM_DIAGRAM):   end;
942544    +
942545    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
942546    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
942547    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942548    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942549    +end;
MPRINT(EM_DIAGRAM):   end;
942550    +
942551    +*** Check NumStorePurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumStorePurchases for missing values ;
942552    +if missing( NumStorePurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumStorePurchases ) then do;
942553    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942554    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942555    +end;
MPRINT(EM_DIAGRAM):   end;
942556    +
942557    +*** Check NumWebPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebPurchases for missing values ;
942558    +if missing( NumWebPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebPurchases ) then do;
942559    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942560    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942561    +end;
MPRINT(EM_DIAGRAM):   end;
942562    +
942563    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
942564    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
942565    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942566    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942567    +end;
MPRINT(EM_DIAGRAM):   end;
942568    +
942569    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
942570    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
942571    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942572    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942573    +end;
MPRINT(EM_DIAGRAM):   end;
942574    +
942575    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
942576    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
942577    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942578    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942579    +end;
MPRINT(EM_DIAGRAM):   end;
942580    +
942581    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
942582    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
942583    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
942584    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
942585    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942586    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942587    +end;
MPRINT(EM_DIAGRAM):   end;
942588    +else do;
MPRINT(EM_DIAGRAM):   else do;
942589    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
942590    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
942591    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942592    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
942593    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
942594    +   end;
MPRINT(EM_DIAGRAM):   end;
942595    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
942596    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
942597    +   end;
MPRINT(EM_DIAGRAM):   end;
942598    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942599    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
942600    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942601    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942602    +   end;
MPRINT(EM_DIAGRAM):   end;
942603    +end;
MPRINT(EM_DIAGRAM):   end;
942604    +
942605    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
942606    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
942607    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
942608    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
942609    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942610    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942611    +end;
MPRINT(EM_DIAGRAM):   end;
942612    +else do;
MPRINT(EM_DIAGRAM):   else do;
942613    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
942614    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
942615    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942616    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
942617    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
942618    +   end;
MPRINT(EM_DIAGRAM):   end;
942619    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
942620    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
942621    +   end;
MPRINT(EM_DIAGRAM):   end;
942622    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942623    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
942624    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942625    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942626    +   end;
MPRINT(EM_DIAGRAM):   end;
942627    +end;
MPRINT(EM_DIAGRAM):   end;
942628    +
942629    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
942630    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
942631    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
942632    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
942633    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942634    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942635    +end;
MPRINT(EM_DIAGRAM):   end;
942636    +else do;
MPRINT(EM_DIAGRAM):   else do;
942637    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
942638    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
942639    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942640    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
942641    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
942642    +   end;
MPRINT(EM_DIAGRAM):   end;
942643    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
942644    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
942645    +   end;
MPRINT(EM_DIAGRAM):   end;
942646    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942647    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
942648    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942649    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942650    +   end;
MPRINT(EM_DIAGRAM):   end;
942651    +end;
MPRINT(EM_DIAGRAM):   end;
942652    +
942653    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
942654    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
942655    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
942656    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
942657    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942658    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942659    +end;
MPRINT(EM_DIAGRAM):   end;
942660    +else do;
MPRINT(EM_DIAGRAM):   else do;
942661    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
942662    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
942663    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942664    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
942665    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
942666    +   end;
MPRINT(EM_DIAGRAM):   end;
942667    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
942668    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
942669    +   end;
MPRINT(EM_DIAGRAM):   end;
942670    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942671    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
942672    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942673    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942674    +   end;
MPRINT(EM_DIAGRAM):   end;
942675    +end;
MPRINT(EM_DIAGRAM):   end;
942676    +
942677    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
942678    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
942679    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
942680    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
942681    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942682    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942683    +end;
MPRINT(EM_DIAGRAM):   end;
942684    +else do;
MPRINT(EM_DIAGRAM):   else do;
942685    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
942686    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
942687    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942688    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
942689    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
942690    +   end;
MPRINT(EM_DIAGRAM):   end;
942691    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
942692    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
942693    +   end;
MPRINT(EM_DIAGRAM):   end;
942694    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942695    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
942696    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942697    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942698    +   end;
MPRINT(EM_DIAGRAM):   end;
942699    +end;
MPRINT(EM_DIAGRAM):   end;
942700    +
942701    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
942702    +drop _8_0 _8_1 _8_2 _8_3 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 ;
942703    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
942704    +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
942705    +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
942706    +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
942707    +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
942708    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
942709    +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
942710    +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
942711    +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
942712    +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
942713    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942714    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942715    +end;
MPRINT(EM_DIAGRAM):   end;
942716    +else do;
MPRINT(EM_DIAGRAM):   else do;
942717    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
942718    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
942719    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942720    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
942721    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
942722    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
942723    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
942724    +            _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
942725    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
942726    +         end;
MPRINT(EM_DIAGRAM):   end;
942727    +         else do;
MPRINT(EM_DIAGRAM):   else do;
942728    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
942729    +               _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
942730    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
942731    +            end;
MPRINT(EM_DIAGRAM):   end;
942732    +         end;
MPRINT(EM_DIAGRAM):   end;
942733    +      end;
MPRINT(EM_DIAGRAM):   end;
942734    +      else do;
MPRINT(EM_DIAGRAM):   else do;
942735    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
942736    +            _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
942737    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
942738    +         end;
MPRINT(EM_DIAGRAM):   end;
942739    +      end;
MPRINT(EM_DIAGRAM):   end;
942740    +   end;
MPRINT(EM_DIAGRAM):   end;
942741    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942742    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
942743    +         _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
942744    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
942745    +      end;
MPRINT(EM_DIAGRAM):   end;
942746    +      else do;
MPRINT(EM_DIAGRAM):   else do;
942747    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
942748    +            _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
942749    +            _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
942750    +            _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
942751    +            _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
942752    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
942753    +         end;
MPRINT(EM_DIAGRAM):   end;
942754    +      end;
MPRINT(EM_DIAGRAM):   end;
942755    +   end;
MPRINT(EM_DIAGRAM):   end;
942756    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
942757    +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
942758    +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
942759    +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
942760    +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
942761    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
942762    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942763    +   end;
MPRINT(EM_DIAGRAM):   end;
942764    +end;
MPRINT(EM_DIAGRAM):   end;
942765    +
942766    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
942767    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
942768    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
942769    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
942770    +   goto REG10DR1;
MPRINT(EM_DIAGRAM):   goto REG10DR1;
942771    +end;
MPRINT(EM_DIAGRAM):   end;
942772    +
942773    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
942774    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
942775    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
942776    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
942777    +
942778    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
942779    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942780    +_LP0 = _LP0 + (   -0.71107732112007) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71107732112007) * _TEMP * _1_0;
942781    +
942782    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
942783    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942784    +_LP0 = _LP0 + (   -0.81763295180983) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.81763295180983) * _TEMP * _2_0;
942785    +
942786    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
942787    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942788    +_LP0 = _LP0 + (    -0.8618538514738) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.8618538514738) * _TEMP * _3_0;
942789    +
942790    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
942791    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942792    +_LP0 = _LP0 + (   -0.64997710050937) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.64997710050937) * _TEMP * _4_0;
942793    +
942794    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
942795    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942796    +_LP0 = _LP0 + (   -0.91699409369659) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91699409369659) * _TEMP * _5_0;
942797    +
942798    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
942799    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
942800    +_LP0 = _LP0 + (    0.00003628120307 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00003628120307 * _TEMP);
942801    +
942802    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
942803    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
942804    +_LP0 = _LP0 + (    0.09345382071006) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09345382071006) * _TEMP * _8_0;
942805    +_LP0 = _LP0 + (   -0.47894059934485) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.47894059934485) * _TEMP * _8_1;
942806    +_LP0 = _LP0 + (    0.46164092141221) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46164092141221) * _TEMP * _8_2;
942807    +_LP0 = _LP0 + (    -0.5078574429985) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.5078574429985) * _TEMP * _8_3;
942808    +
942809    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
942810    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
942811    +_LP0 = _LP0 + (   -0.00285470778488 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00285470778488 * _TEMP);
942812    +
942813    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
942814    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
942815    +_LP0 = _LP0 + (   -0.00481548089585 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00481548089585 * _TEMP);
942816    +
942817    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
942818    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
942819    +_LP0 = _LP0 + (    0.00485302069895 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00485302069895 * _TEMP);
942820    +
942821    +***  Effect: MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: MntWines ;
942822    +_TEMP = MntWines ;
MPRINT(EM_DIAGRAM):   _TEMP = MntWines ;
942823    +_LP0 = _LP0 + (   -0.00184060065513 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00184060065513 * _TEMP);
942824    +
942825    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
942826    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
942827    +_LP0 = _LP0 + (    0.40015202354101 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.40015202354101 * _TEMP);
942828    +
942829    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
942830    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
942831    +_LP0 = _LP0 + (    0.39526484909287 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.39526484909287 * _TEMP);
942832    +
942833    +***  Effect: NumStorePurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumStorePurchases ;
942834    +_TEMP = NumStorePurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumStorePurchases ;
942835    +_LP0 = _LP0 + (   -0.21400418800044 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21400418800044 * _TEMP);
942836    +
942837    +***  Effect: NumWebPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebPurchases ;
942838    +_TEMP = NumWebPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebPurchases ;
942839    +_LP0 = _LP0 + (    -0.2223953481686 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2223953481686 * _TEMP);
942840    +
942841    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
942842    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
942843    +_LP0 = _LP0 + (    0.54388363089232 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.54388363089232 * _TEMP);
942844    +
942845    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
942846    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
942847    +_LP0 = _LP0 + (   -0.05513564922633 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05513564922633 * _TEMP);
942848    +
942849    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
942850    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
942851    +_LP0 = _LP0 + (   -0.70674092258187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.70674092258187 * _TEMP);
942852    +
942853    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
942854    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
942855    +_P0 = probnorm((   -0.62163391257391) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -0.62163391257391) + _LP0);
942856    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
942857    +
942858    +REG10DR1:
942859    +
942860    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG10DR1: *** Residuals;
942861    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
942862    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
942863    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
942864    +end;
MPRINT(EM_DIAGRAM):   end;
942865    +else do;
MPRINT(EM_DIAGRAM):   else do;
942866    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
942867    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
942868    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
942869    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
942870    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
942871    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
942872    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
942873    +   end;
MPRINT(EM_DIAGRAM):   end;
942874    +end;
MPRINT(EM_DIAGRAM):   end;
942875    +
942876    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
942877    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
942878    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
942879    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
942880    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
942881    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
942882    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
942883    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
942884    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
942885    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
942886    +end;
MPRINT(EM_DIAGRAM):   end;
942887    +I_DepVar = REG10DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG10DRF[_IY];
942888    +U_DepVar = REG10DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG10DRU[_IY];
942889    +
942890    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
942891    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
942892    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
942893     run;

NOTE: DATA STEP view saved on file EMWS8.REG10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
942894     quit;
942895     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
942896     filename emflow
942896   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg10: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
942897     *------------------------------------------------------------*;
942898     * Reg10: Scoring VALIDATE data;
942899     *------------------------------------------------------------*;
942900     data EMWS8.Reg10_VALIDATE
942901     / view=EMWS8.Reg10_VALIDATE
942902     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg10_VALIDATE / view=EMWS8.Reg10_VALIDATE ;
942903     set EMWS8.Meta2_VALIDATE
942904     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta2_VALIDATE ;
942905     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg10\EMFLOWSCORE.sas.
942906    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
942907    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
942908    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
942909    +
942910    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
942911    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
942912    +
942913    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
942914    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
942915    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
942916    +array REG10DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG10DRF [2] $12 _temporary_ ('1' '0' );
942917    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
942918    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
942919    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
942920    +ARRAY REG10DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG10DRU[2] _TEMPORARY_ (1 0);
942921    +
942922    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
942923    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
942924    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
942925    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
942926    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
942927    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
942928    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
942929    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
942930    +end;
MPRINT(EM_DIAGRAM):   end;
942931    +else do;
MPRINT(EM_DIAGRAM):   else do;
942932    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
942933    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
942934    +   end;
MPRINT(EM_DIAGRAM):   end;
942935    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
942936    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
942937    +   end;
MPRINT(EM_DIAGRAM):   end;
942938    +   else do;
MPRINT(EM_DIAGRAM):   else do;
942939    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
942940    +   end;
MPRINT(EM_DIAGRAM):   end;
942941    +end;
MPRINT(EM_DIAGRAM):   end;
942942    +
942943    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
942944    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
942945    +
942946    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
942947    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
942948    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942949    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942950    +end;
MPRINT(EM_DIAGRAM):   end;
942951    +
942952    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
942953    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
942954    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942955    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942956    +end;
MPRINT(EM_DIAGRAM):   end;
942957    +
942958    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
942959    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
942960    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942961    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942962    +end;
MPRINT(EM_DIAGRAM):   end;
942963    +
942964    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
942965    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
942966    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942967    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942968    +end;
MPRINT(EM_DIAGRAM):   end;
942969    +
942970    +*** Check MntWines for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntWines for missing values ;
942971    +if missing( MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntWines ) then do;
942972    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942973    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942974    +end;
MPRINT(EM_DIAGRAM):   end;
942975    +
942976    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
942977    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
942978    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942979    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942980    +end;
MPRINT(EM_DIAGRAM):   end;
942981    +
942982    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
942983    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
942984    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942985    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942986    +end;
MPRINT(EM_DIAGRAM):   end;
942987    +
942988    +*** Check NumStorePurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumStorePurchases for missing values ;
942989    +if missing( NumStorePurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumStorePurchases ) then do;
942990    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942991    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942992    +end;
MPRINT(EM_DIAGRAM):   end;
942993    +
942994    +*** Check NumWebPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebPurchases for missing values ;
942995    +if missing( NumWebPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebPurchases ) then do;
942996    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
942997    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
942998    +end;
MPRINT(EM_DIAGRAM):   end;
942999    +
943000    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
943001    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
943002    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943003    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943004    +end;
MPRINT(EM_DIAGRAM):   end;
943005    +
943006    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
943007    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
943008    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943009    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943010    +end;
MPRINT(EM_DIAGRAM):   end;
943011    +
943012    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
943013    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
943014    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943015    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943016    +end;
MPRINT(EM_DIAGRAM):   end;
943017    +
943018    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
943019    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
943020    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
943021    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
943022    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943023    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943024    +end;
MPRINT(EM_DIAGRAM):   end;
943025    +else do;
MPRINT(EM_DIAGRAM):   else do;
943026    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
943027    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
943028    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943029    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
943030    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
943031    +   end;
MPRINT(EM_DIAGRAM):   end;
943032    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
943033    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
943034    +   end;
MPRINT(EM_DIAGRAM):   end;
943035    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943036    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
943037    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943038    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943039    +   end;
MPRINT(EM_DIAGRAM):   end;
943040    +end;
MPRINT(EM_DIAGRAM):   end;
943041    +
943042    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
943043    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
943044    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
943045    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
943046    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943047    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943048    +end;
MPRINT(EM_DIAGRAM):   end;
943049    +else do;
MPRINT(EM_DIAGRAM):   else do;
943050    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
943051    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
943052    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943053    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
943054    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
943055    +   end;
MPRINT(EM_DIAGRAM):   end;
943056    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
943057    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
943058    +   end;
MPRINT(EM_DIAGRAM):   end;
943059    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943060    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
943061    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943062    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943063    +   end;
MPRINT(EM_DIAGRAM):   end;
943064    +end;
MPRINT(EM_DIAGRAM):   end;
943065    +
943066    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
943067    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
943068    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
943069    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
943070    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943071    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943072    +end;
MPRINT(EM_DIAGRAM):   end;
943073    +else do;
MPRINT(EM_DIAGRAM):   else do;
943074    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
943075    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
943076    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943077    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
943078    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
943079    +   end;
MPRINT(EM_DIAGRAM):   end;
943080    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
943081    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
943082    +   end;
MPRINT(EM_DIAGRAM):   end;
943083    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943084    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
943085    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943086    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943087    +   end;
MPRINT(EM_DIAGRAM):   end;
943088    +end;
MPRINT(EM_DIAGRAM):   end;
943089    +
943090    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
943091    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
943092    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
943093    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
943094    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943095    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943096    +end;
MPRINT(EM_DIAGRAM):   end;
943097    +else do;
MPRINT(EM_DIAGRAM):   else do;
943098    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
943099    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
943100    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943101    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
943102    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
943103    +   end;
MPRINT(EM_DIAGRAM):   end;
943104    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
943105    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
943106    +   end;
MPRINT(EM_DIAGRAM):   end;
943107    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943108    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
943109    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943110    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943111    +   end;
MPRINT(EM_DIAGRAM):   end;
943112    +end;
MPRINT(EM_DIAGRAM):   end;
943113    +
943114    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
943115    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
943116    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
943117    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
943118    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943119    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943120    +end;
MPRINT(EM_DIAGRAM):   end;
943121    +else do;
MPRINT(EM_DIAGRAM):   else do;
943122    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
943123    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
943124    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943125    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
943126    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
943127    +   end;
MPRINT(EM_DIAGRAM):   end;
943128    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
943129    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
943130    +   end;
MPRINT(EM_DIAGRAM):   end;
943131    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943132    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
943133    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943134    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943135    +   end;
MPRINT(EM_DIAGRAM):   end;
943136    +end;
MPRINT(EM_DIAGRAM):   end;
943137    +
943138    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
943139    +drop _8_0 _8_1 _8_2 _8_3 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 ;
943140    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
943141    +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
943142    +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
943143    +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
943144    +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
943145    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
943146    +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
943147    +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
943148    +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
943149    +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
943150    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
943151    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943152    +end;
MPRINT(EM_DIAGRAM):   end;
943153    +else do;
MPRINT(EM_DIAGRAM):   else do;
943154    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
943155    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
943156    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
943157    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
943158    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
943159    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
943160    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
943161    +            _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
943162    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
943163    +         end;
MPRINT(EM_DIAGRAM):   end;
943164    +         else do;
MPRINT(EM_DIAGRAM):   else do;
943165    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
943166    +               _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
943167    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
943168    +            end;
MPRINT(EM_DIAGRAM):   end;
943169    +         end;
MPRINT(EM_DIAGRAM):   end;
943170    +      end;
MPRINT(EM_DIAGRAM):   end;
943171    +      else do;
MPRINT(EM_DIAGRAM):   else do;
943172    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
943173    +            _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
943174    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
943175    +         end;
MPRINT(EM_DIAGRAM):   end;
943176    +      end;
MPRINT(EM_DIAGRAM):   end;
943177    +   end;
MPRINT(EM_DIAGRAM):   end;
943178    +   else do;
MPRINT(EM_DIAGRAM):   else do;
943179    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
943180    +         _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
943181    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
943182    +      end;
MPRINT(EM_DIAGRAM):   end;
943183    +      else do;
MPRINT(EM_DIAGRAM):   else do;
943184    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
943185    +            _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
943186    +            _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
943187    +            _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
943188    +            _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
943189    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
943190    +         end;
MPRINT(EM_DIAGRAM):   end;
943191    +      end;
MPRINT(EM_DIAGRAM):   end;
943192    +   end;
MPRINT(EM_DIAGRAM):   end;
943193    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
943194    +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
943195    +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
943196    +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
943197    +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
943198    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
943199    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
943200    +   end;
MPRINT(EM_DIAGRAM):   end;
943201    +end;
MPRINT(EM_DIAGRAM):   end;
943202    +
943203    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
943204    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
943205    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
943206    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
943207    +   goto REG10DR1;
MPRINT(EM_DIAGRAM):   goto REG10DR1;
943208    +end;
MPRINT(EM_DIAGRAM):   end;
943209    +
943210    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
943211    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
943212    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
943213    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
943214    +
943215    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
943216    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943217    +_LP0 = _LP0 + (   -0.71107732112007) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71107732112007) * _TEMP * _1_0;
943218    +
943219    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
943220    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943221    +_LP0 = _LP0 + (   -0.81763295180983) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.81763295180983) * _TEMP * _2_0;
943222    +
943223    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
943224    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943225    +_LP0 = _LP0 + (    -0.8618538514738) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.8618538514738) * _TEMP * _3_0;
943226    +
943227    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
943228    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943229    +_LP0 = _LP0 + (   -0.64997710050937) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.64997710050937) * _TEMP * _4_0;
943230    +
943231    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
943232    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943233    +_LP0 = _LP0 + (   -0.91699409369659) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91699409369659) * _TEMP * _5_0;
943234    +
943235    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
943236    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
943237    +_LP0 = _LP0 + (    0.00003628120307 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00003628120307 * _TEMP);
943238    +
943239    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
943240    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
943241    +_LP0 = _LP0 + (    0.09345382071006) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09345382071006) * _TEMP * _8_0;
943242    +_LP0 = _LP0 + (   -0.47894059934485) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.47894059934485) * _TEMP * _8_1;
943243    +_LP0 = _LP0 + (    0.46164092141221) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46164092141221) * _TEMP * _8_2;
943244    +_LP0 = _LP0 + (    -0.5078574429985) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.5078574429985) * _TEMP * _8_3;
943245    +
943246    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
943247    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
943248    +_LP0 = _LP0 + (   -0.00285470778488 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00285470778488 * _TEMP);
943249    +
943250    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
943251    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
943252    +_LP0 = _LP0 + (   -0.00481548089585 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00481548089585 * _TEMP);
943253    +
943254    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
943255    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
943256    +_LP0 = _LP0 + (    0.00485302069895 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00485302069895 * _TEMP);
943257    +
943258    +***  Effect: MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: MntWines ;
943259    +_TEMP = MntWines ;
MPRINT(EM_DIAGRAM):   _TEMP = MntWines ;
943260    +_LP0 = _LP0 + (   -0.00184060065513 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00184060065513 * _TEMP);
943261    +
943262    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
943263    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
943264    +_LP0 = _LP0 + (    0.40015202354101 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.40015202354101 * _TEMP);
943265    +
943266    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
943267    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
943268    +_LP0 = _LP0 + (    0.39526484909287 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.39526484909287 * _TEMP);
943269    +
943270    +***  Effect: NumStorePurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumStorePurchases ;
943271    +_TEMP = NumStorePurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumStorePurchases ;
943272    +_LP0 = _LP0 + (   -0.21400418800044 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21400418800044 * _TEMP);
943273    +
943274    +***  Effect: NumWebPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebPurchases ;
943275    +_TEMP = NumWebPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebPurchases ;
943276    +_LP0 = _LP0 + (    -0.2223953481686 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2223953481686 * _TEMP);
943277    +
943278    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
943279    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
943280    +_LP0 = _LP0 + (    0.54388363089232 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.54388363089232 * _TEMP);
943281    +
943282    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
943283    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
943284    +_LP0 = _LP0 + (   -0.05513564922633 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05513564922633 * _TEMP);
943285    +
943286    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
943287    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
943288    +_LP0 = _LP0 + (   -0.70674092258187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.70674092258187 * _TEMP);
943289    +
943290    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
943291    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
943292    +_P0 = probnorm((   -0.62163391257391) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -0.62163391257391) + _LP0);
943293    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
943294    +
943295    +REG10DR1:
943296    +
943297    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG10DR1: *** Residuals;
943298    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
943299    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
943300    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
943301    +end;
MPRINT(EM_DIAGRAM):   end;
943302    +else do;
MPRINT(EM_DIAGRAM):   else do;
943303    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
943304    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
943305    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
943306    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
943307    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
943308    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
943309    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
943310    +   end;
MPRINT(EM_DIAGRAM):   end;
943311    +end;
MPRINT(EM_DIAGRAM):   end;
943312    +
943313    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
943314    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
943315    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
943316    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
943317    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
943318    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
943319    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
943320    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
943321    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
943322    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
943323    +end;
MPRINT(EM_DIAGRAM):   end;
943324    +I_DepVar = REG10DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG10DRF[_IY];
943325    +U_DepVar = REG10DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG10DRU[_IY];
943326    +
943327    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
943328    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
943329    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
943330     run;

NOTE: DATA STEP view saved on file EMWS8.REG10_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
943331     quit;
943332     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
943333     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
943334     * Reg10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg10: Computing metadata for TRAIN data;
943335     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG10_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg10_TRAIN out=WORK.M3PQUY1Q noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PQUY1Q;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PQUY1Q(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PQUY1Q;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PQUY1Q;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3BBL8UJ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2V_TYNR(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BBL8UJ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg10";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ACCEPTEDCMP1' 'ACCEPTEDCMP2' 'ACCEPTEDCMP3' 
'ACCEPTEDCMP4' 'ACCEPTEDCMP5' 'INCOME' 'MARITAL_STATUS' 'MNTFISHPRODUCTS' 'MNTFRUITS' 
'MNTMEATPRODUCTS' 'MNTWINES' 'NUMCATALOGPURCHASES' 'NUMDEALSPURCHASES' 'NUMSTOREPURCHASES' 
'NUMWEBPURCHASES' 'NUMWEBVISITSMONTH' 'RECENCY' 'TEENHOME' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg10: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
943673     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
943674     set EMWS8.Reg10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg10_EMINFO;
943675     where DATA='Reg10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
943676     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG10_EMINFO.
      WHERE (DATA='Reg10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

943677     data EMWS8.Reg10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg10_EMINFO;
943678     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
943679     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
943680     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
943684     run;
943685     data EMWS8.Reg10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg10_EMINFO;
943686     set EMWS8.Reg10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg10_EMINFO WORK.MODELTEMP_INFO;
943687     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG10_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

943688     proc sort data = EMWS8.Reg10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg10_EMINFO NOTHREADS;
943689     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
943690     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG10_EMINFO.
NOTE: The data set EMWS8.REG10_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

943691     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
943692     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
943693     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

943694     proc sort data = EMWS8.Reg10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
943695     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
943696     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

943697     data EMWS8.Reg10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg10_EMINFO;
943698     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
943699     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
943700     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

943701     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
943702     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
943703     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
943704     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.REG10_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.REG10_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
