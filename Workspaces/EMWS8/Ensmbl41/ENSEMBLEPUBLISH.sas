*------------------------------------------------------------*;
* Ensmbl41: Voting to produce predicted target;
*------------------------------------------------------------*;
array Ensmbl41_post{2} _temporary_;
array Ensmbl41_count{2} _temporary_;
array Ensmbl41_level{2} $32 _temporary_ (
"1"
"0"
);
do i=1 to 2;
Ensmbl41_post{i} = 0;
Ensmbl41_count{i} = 0;
end;
if AutoNeural15_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural15_P_DepVar1;
end;
if AutoNeural14_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural14_P_DepVar1;
end;
if AutoNeural13_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural13_P_DepVar1;
end;
if AutoNeural19_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural19_P_DepVar1;
end;
if AutoNeural18_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural18_P_DepVar1;
end;
if AutoNeural17_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural17_P_DepVar1;
end;
if AutoNeural16_I_DepVar = Ensmbl41_level{1} then do;
Ensmbl41_count{1} + 1;
Ensmbl41_post{1}=Ensmbl41_post{1}+ AutoNeural16_P_DepVar1;
end;
if AutoNeural15_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural15_P_DepVar0;
end;
if AutoNeural14_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural14_P_DepVar0;
end;
if AutoNeural13_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural13_P_DepVar0;
end;
if AutoNeural19_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural19_P_DepVar0;
end;
if AutoNeural18_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural18_P_DepVar0;
end;
if AutoNeural17_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural17_P_DepVar0;
end;
if AutoNeural16_I_DepVar = Ensmbl41_level{2} then do;
Ensmbl41_count{2} + 1;
Ensmbl41_post{2}=Ensmbl41_post{2}+ AutoNeural16_P_DepVar0;
end;
*------------------------------------------------------------*;
* Ensmbl41: Determine Into Variable;
*------------------------------------------------------------*;
length I_DepVar $32;
drop i vote_count vote_post;
vote_count = max(
Ensmbl41_count{1} ,
Ensmbl41_count{2}
);
do i=1 to 2;
if Ensmbl41_count{i}=vote_count and Ensmbl41_post{i}>vote_post then do;
I_DepVar = Ensmbl41_level{i};
vote_post = Ensmbl41_count{i};
end;
end;
*------------------------------------------------------------*;
* Ensmbl41: Compute posterior vars using models predicting the chosen level;
*------------------------------------------------------------*;
P_DepVar1 = 0;
P_DepVar0 = 0;
if I_DepVar = AutoNeural15_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural15_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural15_P_DepVar0;
end;
if I_DepVar = AutoNeural14_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural14_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural14_P_DepVar0;
end;
if I_DepVar = AutoNeural13_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural13_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural13_P_DepVar0;
end;
if I_DepVar = AutoNeural19_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural19_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural19_P_DepVar0;
end;
if I_DepVar = AutoNeural18_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural18_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural18_P_DepVar0;
end;
if I_DepVar = AutoNeural17_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural17_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural17_P_DepVar0;
end;
if I_DepVar = AutoNeural16_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural16_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural16_P_DepVar0;
end;
* Ensmbl41: Averaging posterior;
P_DepVar1 = P_DepVar1/vote_count;
P_DepVar0 = P_DepVar0/vote_count;
*------------------------------------------------------------*;
* Ensmbl41: Producing Unformatted variable;
*------------------------------------------------------------*;
label U_DepVar = "Unnormalized Into: DepVar";
if I_DepVar = '1' then U_DepVar = 1;
else
if I_DepVar = '0' then U_DepVar = 0;
*------------------------------------------------------------*;
* Ensmbl41: Computing _WARN_ Variable;
*------------------------------------------------------------*;
length _WARN_ $4;
label _WARN_ = 'Warnings';
_WARN_ = '';
if index(AUTONEURAL15_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL15_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL15_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL15_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL14_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL14_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL14_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL14_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL13_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL13_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL13_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL13_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL19_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL19_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL19_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL19_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL18_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL18_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL18_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL18_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL17_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL17_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL17_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL17_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL16_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL16_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL16_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL16_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
