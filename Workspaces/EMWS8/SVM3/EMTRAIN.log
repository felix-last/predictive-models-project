MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                19.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0IF20VC 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0IF20VC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
761035     proc freq data=EMWS8.SVM3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM3_VariableSet noprint;
761036     table ROLE*LEVEL/out=WORK.SVM3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM3META;
761037     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.SVM3_VARIABLESET.
NOTE: The data set WORK.SVM3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

761038     proc print data=WORK.SVM3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM3META label noobs;
761039     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
761040     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
761040   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
761040   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
761041     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
761042     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
761043     run;

NOTE: There were 8 observations read from the data set WORK.SVM3META.
NOTE: The PROCEDURE PRINT printed page 576.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

761044     title10;
MPRINT(EM_DIAGRAM):   title10;
761045     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM3_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM3_DepVar_DD 
out=EMWS8.SVM3_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
761092     data WORK.SVM3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
761093     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
761094     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
761094   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
761094   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
761095        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
761095   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
761095   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
761096     set EMWS8.SVM3_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DEPVAR_DM( where=(_TYPE_="TARGET"));
761097     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
761098     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
761099     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
761100     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
761101     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
761102     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
761103     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
761104     end;
MPRINT(EM_DIAGRAM):   end;
761105     output;
MPRINT(EM_DIAGRAM):   output;
761106     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

761107     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
761108     proc print data=WORK.SVM3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM3_EVENT noobs label;
761109     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
761110     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
761111     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
761112     run;

NOTE: There were 1 observations read from the data set WORK.SVM3_EVENT.
NOTE: The PROCEDURE PRINT printed page 577.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

761113     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
761114     proc print data = EMWS8.SVM3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM3_DepVar_DM noobs label;
761115     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
761116     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
761117     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
761117   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
761117   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
761118     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
761119     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
761120     run;

NOTE: There were 7 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 578.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

761121     title10;
MPRINT(EM_DIAGRAM):   title10;
761122     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
761624     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
761625     * SVM3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM3: Generation of macros and macro variables;
761626     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
761627     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

761628     %let EMEXCEPTIONSTRING=;
761629     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
761630     * TRAIN: SVM3;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM3;
761631     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
761632     %let EM_ACTION = TRAIN;
761633     %let syscc = 0;
761634     %macro main;
761635     
761636        filename temp catalog 'sashelp.emmodl.svm_macros.source';
761637        %include temp;
761638        filename temp;
761639        %SetProperties;
761640        %if %upcase(&EM_ACTION) = CREATE %then %do;
761641            filename temp catalog 'sashelp.emmodl.svm_create.source';
761642            %include temp;
761643            filename temp;
761644            %create;
761645        %end;
761646        %else
761647        %if %upcase(&EM_ACTION) = TRAIN %then %do;
761648            filename temp catalog 'sashelp.emmodl.svm_train.source';
761649            %include temp;
761650            filename temp;
761651            %train;
761652        %end;
761653        %else
761654        %if %upcase(&EM_ACTION) = REPORT %then %do;
761655            filename temp catalog 'sashelp.emmodl.svm_report.source';
761656            %include temp;
761657            filename temp;
761658            %report;
761659        %end;
761660     
761661     %mend main;
761662     
761663     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
761665    +%macro SetProperties;
761666    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
761667    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
761668    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
761669    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
761670    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
761671    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
761672    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
761673    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
761674    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
761675    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
761676    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
761677    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
761678    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
761679    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
761680    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
761681    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
761682    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
761683    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
761684    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
761685    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
761686    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
761687    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
761688    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
761689    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
761690    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
761691    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
761692    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
761693    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
761694    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
761695    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
761696    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
761697    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
761698    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
761699    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
761700    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
761701    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
761702    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
761703    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
761704    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
761705    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
761706    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
761707    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
761708    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
761709    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
761710    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
761711    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
761712    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
761713    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
761714    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
761715    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
761717    +%mend SetProperties;
761720    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
761722    +  %local emclassout emvarout;
761724    +   proc dmdb batch dmdbcat= _emdmdb
761726    +   %if &out ne 0 %then %do ;
761727    +       data=&indata out= _emdmdb &emclassout &emvarout;
761728    +   %end ;
761729    +   %else %do ;
761730    +       data=&indata &emclassout &emvarout;
761731    +   %end ;
761733    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
761734    +   %if %em_class   ne  %then %do ;
761735    +       class %EM_CLASS;
761736    +   %end ;
761737    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
761738    +   %if %em_target ne %then %do ;
761739    +          target %em_target ;
761740    +   %end ;
761741    +   run ;
761742    +%mend make_dmdb;
761745    +%macro svm_training(indata=,
761746    +                    task=,
761747    +                    classtask=,
761748    +                    method=,
761749    +                    outest =,
761750    +                    outclass =,
761751    +                    outfit =,
761752    +                    isValidationSet =,
761753    +                    testdata =,
761754    +                    testout =,
761755    +                    validSource=,
761756    +                    usecgbydefault=
761757    +                    );
761759    +%make_dmdb(indata=&indata, out=1);
761761    +options debug="nlpitermsg=2";
761763    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
761764    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
761765    +ods output tun_crt = &EM_USER_TUNINGCRIT;
761766    +%end;
761768    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
761769    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
761770    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
761771    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
761773    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
761774    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
761775    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
761776    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
761779    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
761780    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
761781    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
761782    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
761784    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
761785    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
761786    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
761787    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
761790    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
761791    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
761792    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
761793    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
761796    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
761797    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
761798    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
761799    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
761800    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
761801    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
761802    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
761803    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
761804    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
761805    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
761806    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
761807    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
761811    +proc svm data= _emdmdb
761812    +         dmdbcat= _emdmdb
761813    +         nomonitor
761814    +         outfit= &outfit
761815    +         outclass= &outclass
761816    +         outest= &outest
761817    +         out = _outtrain
761818    +         maxiter = &_PROPERTY_MAXITER
761819    +         maxfunc = &_PROPERTY_MAXFUNC
761820    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
761821    +         gconv =   &_PROPERTY_GCONV
761822    +         absgconv = &_PROPERTY_ABSGCONV
761823    +         xconv =   &_PROPERTY_XCONV
761824    +         absxconv = &_PROPERTY_ABSXCONV
761826    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
761827    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
761828    +             xscale
761829    +         %end;
761830    +         %else %do;
761831    +             noscale
761832    +         %end;
761833    +    %end;
761834    +    %if &task eq CLASSIFICATION %then %do;
761835    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
761836    +         method= &method
761837    +        %end;
761838    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
761839    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
761840    +        %end;
761841    +        %else %do;
761842    +         method= &EM_PROPERTY_METHOD
761843    +        %end;
761844    +    %end;
761845    +    %else %do;
761846    +         method= &method  task=&classtask
761847    +         /*%if &classtask eq EPS_REG %then %do; */
761848    +             esp=&_PROPERTY_EPSILON
761849    +         /*%end;*/
761850    +    %end;
761852    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
761853    +         kernel = &EM_PROPERTY_KERNEL
761854    +    %end;
761855    +    %else %do;
761856    +         kernel = Linear
761857    +    %end;
761859    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
761861    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
761862    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
761863    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
761864    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
761865    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
761866    +            tun = &EM_PROPERTY_TUNINGMETHOD
761867    +        %end;
761869    +    %end;
761871    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
761872    +         CV  = &EM_PROPERTY_CVMETHOD
761873    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
761874    +         fold = &EM_PROPERTY_CVFOLD
761875    +         %end;
761876    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
761877    +                testdata = &testdata
761878    +         %end;
761879    +    %end;
761881    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
761882    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
761883    +    %end;
761885    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
761886    +    &EM_PROPERTY_PRINTOPTION
761887    +    %end;
761889    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
761890    +    POPTHIS
761891    +    %end;
761892    +    ;
761893    +    var %EM_INPUT %EM_REJECTED;
761894    +    target %EM_TARGET;
761896    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
761898    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
761899    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
761900    +             by &_PROPERTY_TUN_C_BY
761901    +             ;
761902    +         %end;
761903    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
761904    +             C  &_PROPERTY_USERCVALUE ;
761905    +         %end;
761907    +     %end;
761908    +     %else %do;
761909    +           C  &_PROPERTY_USERCVALUE ;
761910    +     %end;
761913    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
761915    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
761916    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
761917    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
761918    +                  by &_PROPERTY_POLY_TUN_KP1_BY
761919    +                ;
761920    +             %end;
761921    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
761922    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
761923    +             %end;
761924    +          %end;
761925    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
761926    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
761927    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
761928    +                ;
761929    +              %end;
761930    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
761931    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
761932    +              %end;
761933    +           %end;
761934    +           %else %do;
761935    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
761936    +           %end;
761937    +    %end;
761939    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
761940    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
761941    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
761942    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
761943    +                  by &_PROPERTY_RBF_TUN_KP1_BY
761944    +                  ;
761945    +              %end;
761946    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
761947    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
761948    +              %end;
761949    +          %end;
761950    +          %else %do;
761951    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
761952    +          %end;
761953    +    %end;
761956    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
761958    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
761960    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
761961    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
761962    +                by &_PROPERTY_SGMD_TUN_KP1_BY
761963    +             ;
761964    +             %end;
761965    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
761966    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
761967    +             %end;
761969    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
761970    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
761971    +                by &_PROPERTY_SGMD_TUN_KP2_BY
761972    +             ;
761973    +             %end;
761974    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
761975    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
761976    +             %end;
761977    +          %end;
761978    +          %else %do;
761979    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
761980    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
761981    +          %end;
761982    +    %end;
761984    +run;
761985    +%TRAINENDLINE:
761986    +quit;
761987    +%mend svm_training;
761989    +%macro svm_score(indata=,
761990    +                 inest=,
761991    +                 infit=,
761992    +                 inclass=,
761993    +                 outindata=,
761994    +                 outscore=,
761995    +                 targetLevel=
761996    +                 );
761999    +%if &TargetLevel eq BINARY %then %do;
762001    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
762003    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
762004    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
762005    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
762006    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
762009    +%do %while(^ %sysfunc(fetch(&dsid)));
762010    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
762011    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
762012    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
762013    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
762014    +%end;
762016    +%let dsid = %sysfunc(close(&dsid));
762019    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
762020    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762022    +%do %while(^ %sysfunc(fetch(&dsid)));
762023    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762024    +%end;
762025    +%let dsid = %sysfunc(close(&dsid));
762027    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
762028    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762030    +%do %while(^ %sysfunc(fetch(&dsid)));
762031    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762032    +%end;
762033    +%let dsid = %sysfunc(close(&dsid));
762036    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
762037    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
762038    +run;
762040    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
762041    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
762041   !+from a part of %EM_MODEL() macro */
762043    +data &outscore(drop=_P);
762044    +      set  &outscore;
762045    +     if (_P_ < -600) then _p =0;
762046    +     else _P = 1/(1+EXP((-1)*(_P_)));
762048    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
762049    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762050    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
762052    +%do %while(^ %sysfunc(fetch(&dsid)));
762053    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
762054    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
762055    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
762056    +       &P_Var = _P;
762057    +   %end;
762058    +   %else %do;
762059    +       &P_Var = 1 - _P;
762060    +       %let targetNonEvent = &P_LEVEL;
762061    +   %end;
762062    +%end;
762063    +%let dsid = %sysfunc(close(&dsid));
762065    +%include resifref;
762067    +run;
762069    +filename resifref;
762071    +%end; /* the end of if - targetlevel eq binary */
762072    +%else %do;
762074    +/* ----     interval target  ------ */
762076    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
762077    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762079    +%do %while(^ %sysfunc(fetch(&dsid)));
762080    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762081    +%end;
762082    +%let dsid = %sysfunc(close(&dsid));
762084    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
762085    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762087    +%do %while(^ %sysfunc(fetch(&dsid)));
762088    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762089    +%end;
762091    +%let dsid = %sysfunc(close(&dsid));
762093    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
762094    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
762095    +run;
762097    +%end; /* end of targetlevel eq interval */
762100    +%mend svm_score;
762103    +%macro makeSVMFitStatDs();
762105    +data &EM_USER_SVMFITDS;
762106    +     set &EM_USER_SVMFITSTAT;
762107    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
762107   !+noquote))";
762108    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
762108   !+rpt_svmfitstat_label_k_par2, noquote))";
762109    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
762109   !+rpt_svmfitstat_label_k_par3, noquote))";
762110    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
762110   !+ noquote))";
762111    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
762111   !+noquote))";
762112    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
762112   !+rpt_svmfitstat_label_margin, noquote))";
762113    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
762113   !+ noquote))";
762114    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
762114   !+noquote))";
762115    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
762115   !+noquote))";
762116    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
762116   !+noquote))";
762117    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
762117   !+noquote))";
762118    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
762118   !+noquote))";
762119    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
762119   !+rpt_svmfitstat_label_ntrain, noquote))";
762120    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
762120   !+ noquote))";
762121    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
762121   !+ noquote))";
762122    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
762122   !+noquote))";
762123    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
762123   !+rpt_svmfitstat_label_radius, noquote))";
762124    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
762124   !+noquote))";
762125    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
762125   !+noquote))";
762126    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
762126   !+ noquote))";
762127    +    if _TYPE_ ='_ACCTAB_' then delete;
762128    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
762129    +      _BIAS_= _K_PAR_;
762130    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
762131    +    %end;
762132    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
762133    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
762134    +    %end;
762135    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
762136    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
762137    +    %end;
762138    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
762139    +      DROP _K_PAR3_  _L1_;
762140    +    %end;
762141    +run;
762143    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
762144    +run;
762146    +data &EM_USER_SVMFITDS;
762147    +     set &EM_USER_SVMFITDS;
762148    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
762148   !+;
762149    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
762150    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
762150   !+noquote))";
762151    +     Rename COL1 = Train;
762152    +     if _NAME_ = '_ACCU_' then delete;
762153    +run;
762155    +%mend makeSVMFitStatDs;
762157    +%macro svm_fitstat(validSource=);
762159    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
762160    +            %if &_validSource= VALIDSET %then %do;
762161    +                validDs=work._tmp_scored_test,
762162    +                testDs=,
762163    +            %end;
762164    +            %else %if &_validSource= TESTSET %then %do;
762165    +                validDs=,
762166    +                testDs=work._tmp_scored_test,
762167    +            %end;
762168    +            decdata=&EM_DEC_DECDATA,
762169    +            decmeta=&EM_DEC_DECMETA,
762170    +            freqvar=, df=,
762171    +            outfit=&EM_DATA_EMOUTFIT);
762173    +data &EM_DATA_EMOUTFIT;
762174    +     set &EM_DATA_EMOUTFIT;
762175    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
762175   !+_SBC_; /* Because of DF */
762176    +run;
762177    +%mend svm_fitstat;
762179    +/*----------------------------------------------------------------------------------
762179   !+-----
762180    +   OUTEST data set
762182    +                                                       APRTMNT_  APRTMNT_   TELIND_
762182   !+  TELIND_
762183    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
762183   !+     2_
762185    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
762185   !+   0.97609
762186    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
762186   !+   0.15280
762187    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
762187   !+  -0.07311
762189    +=-----------------------------------------------------------------------------------
762189   !+--*/
762190    +/* this is not used, generate score code directly for the case of linear svm */
762191    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
762191   !+Residual=);
762193    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
762195    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
762196    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
762197    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
762198    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
762199    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
762201    +%do %while(^ %sysfunc(fetch(&dsid)));
762202    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
762203    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
762204    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
762205    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
762206    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
762207    +%end;
762208    +%let dsid = %sysfunc(close(&dsid));
762210    +data _cmeta;
762211    +    set &ColumnsMeta;
762212    +    NAME = upcase(strip(NAME));
762213    +run;
762215    +data _tmpclass;
762216    +       set &outclass;
762217    +   _VAR_ = upcase(strip(_VAR_));
762218    +run;
762220    +proc sql;
762221    +create table _outclass as
762222    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
762223    +  from  _tmpclass, _cmeta
762224    +  where _tmpclass._VAR_ = _cmeta.NAME;
762225    +run;
762227    +data _outclass;
762228    +    set _outclass;
762229    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
762230    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
762231    +run;
762232    +data _meands;
762233    +    set &outest;
762234    +    if _TYPE_='_MEAN_';
762235    +run;
762237    +/*
762238    +data _null_;
762239    +    set &outest;
762240    +    if _TYPE_='_PARMS_';
762241    +    call symput('bias', _STDEV_ );
762242    +    call symput('intercept', _MEAN_ );
762243    +run;
762244    +*/
762246    +filename  _File_ "&File";
762247    +data _null_;
762248    +    FILE _File_;
762249    +    length _line $500;
762250    +    drop _line;
762252    +    put ' ';
762253    +    put '/*-------------------------------------------------*/';
762254    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
762255    +    put '/*-------------------------------------------------*/';
762256    +    put ' ';
762258    +    put 'length _warn_ $ 4;';
762259    +    put 'label _warn_ = "Warnings";';
762260    +    put 'length _svm_uname $32;';
762261    +    put 'DROP _svm_uname ;';
762263    +  dsid = open("work._outclass");
762264    +    if dsid then do;
762265    +          oldvname ='';
762266    +          do while(not fetch(dsid));
762267    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
762268    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
762269    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
762270    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
762271    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
762272    +             *put 'vtype =' vtype;
762273    +             *put 'vformat=' vformat;
762275    +             if oldname ne vname then do;
762276    +                 if vtype = 'N' then do;
762277    +                     if vformat eq ' ' then do;
762278    +                        put '_svm_uname = put(' vname ', Best12.);';
762279    +                     end; else do;
762280    +                        put '_svm_uname = put(' vname ',' vformat ');';
762281    +                     end;
762282    +                  end;
762283    +                  else do;
762284    +                     if vformat eq ' ' then do;
762285    +                        put '_svm_uname = ' vname ' ;';
762286    +                     end; else do;
762287    +                        put '_svm_uname = put(' vname ',' vformat ');';
762288    +                     end;
762289    +                  end;
762290    +                  put '%DMNORMIP(_svm_uname);';
762291    +              end; /* end of oldname ne vname */
762293    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
762294    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
762295    +              put _line;
762296    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
762296   !+;';
762297    +              oldname = vname;
762298    +          end;
762300    +     end;
762301    +rc=close(dsid);
762303    +dsid = open("&outest");
762304    +    if dsid then do;
762305    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
762305   !+noquote))"  "------ */";
762306    +          ncol = attrn(dsid, 'NVARS');
762307    +          do i=4 to ncol;
762308    +             vname = upcase(trim(left(varname(dsid,i))));
762309    +              do while(not fetch(dsid));
762310    +                  type = strip(getvarc(dsid,2));
762311    +                  select(type);
762312    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
762313    +                      when('_STDEV_') std  =  getvarn(dsid, i);
762314    +                      when('_PARMS_') coeff = getvarn(dsid, i);
762315    +                  otherwise;
762316    +                  end;
762317    +              end; /* end of do-while*/
762318    +              *put '+' coeff '*(' vname '-' mean ')/' std;
762319    +              if i=4 then  do; put '_P_ =(' coeff ; end;
762320    +              else if i=5 then do; put '+' coeff ');' ; end;
762321    +              else do;
762322    +                      tmpvar = '_TMPVAR'||strip(i);
762323    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
762324    +                      put 'else ' tmpvar '=' vname ';';
762325    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
762326    +                      put 'drop  ' tmpvar ';';
762327    +              end;
762328    +              rc=rewind(dsid);
762329    +         end; /* end of  do i=6 to &nvars; */
762330    +         put ';';
762331    +     end;
762332    +    rc=close(dsid);
762333    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
762333   !+"------ */";
762335    +%if &TargetLevel eq BINARY %then %do;
762337    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
762338    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762339    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
762341    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
762342    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
762344    +%do %while(^ %sysfunc(fetch(&dsid)));
762345    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
762346    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
762347    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
762348    +       put " &P_Var = _P;";
762349    +   %end;
762350    +   %else %do;
762351    +       put " &P_Var = 1 - _P;";
762352    +   %let targetNonEvent = &P_LEVEL;
762353    +   %end;
762354    +%end;
762355    +%let dsid = %sysfunc(close(&dsid));
762357    +%if &Residual = Y %then %do;
762359    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
762359   !+"------ */";
762361    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
762362    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762363    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
762365    +   %do %while(^ %sysfunc(fetch(&dsid)));
762366    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
762367    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
762368    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
762369    +       put " &R_Var = 1 - _P;";
762370    +   %end;
762371    +   %else %do;
762372    +       put " &R_Var = 0 - (1 - _P);";
762373    +   %end;
762374    +   %end;
762375    +   %let dsid = %sysfunc(close(&dsid));
762376    +%end;
762377    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
762377   !+"------ */";
762379    +    put 'length _FORMAT_VAR $200;';
762380    +    put 'length _TARGNOR $%DMNORLEN; ';
762381    +    put 'DROP _FORMAT_VAR _TARGNOR;';
762382    +    %if &TargetFormat ne  %then %do;
762383    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
762384    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
762385    +    %end;
762386    +    %else %do;
762387    +    %if &TargetType  = N  %then %do;
762388    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
762389    +       %end;
762390    +       %else %do;
762391    +    put "_FORMAT_VAR= &TargetVar;";
762392    +       %end;
762393    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
762394    +    %end;
762396    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
762397    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
762398    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
762400    +    %do %while(^ %sysfunc(fetch(&dsid)));
762401    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
762402    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
762403    +        %let qF_var_label = %str(%"&F_var_label%");
762404    +    put "&F_var = _TARGNOR ;";
762405    +    put "label &F_var = &qF_Var_label;";
762406    +    %end;
762407    +    %let dsid = %sysfunc(close(&dsid));
762409    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
762409   !+"------ */";
762411    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
762412    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762413    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
762415    +%do %while(^%sysfunc(fetch(&dsid)));
762416    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
762417    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
762418    +   %let qI_var_label = %str(%"&I_var_label%");
762419    +   %let qTargetEvent = %str(%"&targetEvent%");
762420    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
762421    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
762422    +       put " else &I_Var  =  &qtargetNonEvent ;";
762423    +       put " label &I_var = &qI_var_label;";
762424    +%end;
762425    +%let dsid = %sysfunc(close(&dsid));
762427    +%end;  /* end of TargetLevel= Binary */
762429    +%else %if &TargetLevel eq INTERVAL %then %do;
762431    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
762432    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762433    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
762435    +%do %while(^ %sysfunc(fetch(&dsid)));
762436    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
762437    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
762438    +   %let qP_label = %str(%"&P_label%");
762439    +    put " &P_Var = _P_;";
762440    +    put " label &P_Var = &qP_label;";
762441    +%end;
762442    +%let dsid = %sysfunc(close(&dsid));
762444    +%if &Residual = Y %then %do;
762446    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
762446   !+"------ */";
762448    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
762449    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762450    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
762452    +   %do %while(^ %sysfunc(fetch(&dsid)));
762453    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
762454    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
762455    +     %let qR_label = %str(%"&R_label%");
762456    +       put " &R_Var = &TargetVar - &P_var;";
762457    +       put " label &R_Var = &qR_label;";
762458    +   %end;
762459    +   %let dsid = %sysfunc(close(&dsid));
762460    +%end;
762462    +%end;   /* end of TargetLevel= Interval */
762464    +  put "/*------------------------------------------------------------*/";
762465    +proc datasets lib=work nolist;
762466    + delete _tmpclass _cmeta _outclass;
762467    +run;
762468    +run;
762470    +filename  _File_;
762472    +%mend gen_score;
762474    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
762475    +%global &nLevel;
762476    +proc dmdb batch data=&indata
762477    +classout=_tmp_dmdbout;
762478    +class &target;
762479    +run;
762480    +data _tmp_dmdbout;
762481    +    set _tmp_dmdbout;
762482    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
762483    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
762484    +run;
762485    +data _null_;
762486    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
762487    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
762488    +    %let dsid = %sysfunc(close(&dsid));
762489    +     call symput("&nLevel", put(&_obs, Best12.));
762490    +run;
762492    +proc datasets lib=work nolist;
762493    +     delete _tmp_dmdbout;
762494    +run;
762495    +quit;
762496    +%Mend CheckBinaryTargetLevel;
762499    +%macro getNObs(inds=, nobs=);
762500    +    %global &nobs;
762501    +    data _null_;
762502    +        set &inds end=eof;
762503    +        if eof then call symput("&nobs", _N_);
762504    +    run;
762505    +    quit;
762506    +%mend  getNObs;
762510    +%macro makeAlphaDs(target=, cmeta=);
762512    + %let isOBSIndex= N;
762513    + %let dsid = %sysfunc(open(&cmeta));
762514    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
762515    + %do %while(^%sysfunc(fetch(&dsid)));
762516    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
762517    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
762518    + %end;
762519    + %let dsid = %sysfunc(close(&dsid));
762521    +data &EM_USER_OUTALPHA;
762522    +     set _sample_train;
762523    +     set _outtrain(keep=_ALPHA_ _BOUND_);
762524    +     %if &isOBSIndex= N %then %do;
762525    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
762526    +     %end;
762527    +     %else %do;
762528    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
762529    +     %end;
762530    +run;
762532    +data &EM_EXPORT_TRAIN;
762533    +     length _OBS_ 8;
762534    +     set &EM_EXPORT_TRAIN;
762535    +     _OBS_ = _N_;
762536    +run;
762538    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
762539    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
762540    +     by _OBS_;
762541    +     if _ALPHA_ =. then _ALPHA_=0;
762542    +     if _BOUND_ ="" then _BOUND_="_LBC";
762543    +run;
762545    +data &EM_USER_OUTALPHA;
762546    +   set &EM_USER_OUTALPHA;
762547    +   if _ALPHA_ = 0 then delete;
762548    +   %if &isOBSIndex= N %then %do;
762549    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
762550    +   rename _OBS_ = _dataobs_;
762551    +   %end;
762552    +   %else %do;
762553    +   drop _OBS_;
762554    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
762554   !+noquote))";
762555    +   %end;
762556    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
762557    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
762558    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
762559    +   run;
762561    +%mend makeAlphaDs;
762564    +%macro makeTunData();
762565    +data &EM_USER_TUNINGCRIT;
762566    +    set &EM_USER_TUNINGCRIT;
762567    +    Drop N;
762568    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
762569    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
762570    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
762571    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
762572    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
762573    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
762574    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
762574   !+noquote))";
762575    +run;
762576    +%mend makeTunData;
762578    +/*------------------ Score Code Generation with Proc SVMScore
762578   !+----------------------  */
762581    +%macro score_code(TargetLevel=, type=);
762583    +%let _inoutest = WORK._inoutest ;
762584    +%let _inoutfit = WORK._inoutfit ;
762585    +%let _inoutclass = WORK._inoutclass;
762587    +%if &type eq FLOW %then %do;
762588    +    %let _inoutest = &EM_USER_OUTEST;
762589    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
762590    +    %let _inoutclass = &EM_USER_OUTCLASS;
762591    +%end;
762592    +%else %do;
762593    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
762593   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
762594    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
762594   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
762595    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
762595   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
762596    +%end;
762598    +%let emscoreout = %str(&)%str(em_score_output);
762601    +%if &type eq FLOW %then %do;
762602    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
762603    +%end;
762604    +%else %do;
762605    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
762606    +%end;
762608    +data _null_;
762609    +    FILE _File_ MOD;
762611    +    put ' ';
762612    +    put '/*-------------------------------------------------*/';
762613    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
762613   !+;
762614    +    put '/*-------------------------------------------------*/';
762615    +    put ' ';
762617    +%if &TargetLevel eq BINARY %then %do;
762619    +/*%put &emscoreout;  */
762621    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
762622    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762624    +%do %while(^ %sysfunc(fetch(&dsid)));
762625    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762627    +%end;
762628    +%let dsid = %sysfunc(close(&dsid));
762630    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
762631    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762633    +%do %while(^ %sysfunc(fetch(&dsid)));
762634    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
762636    +%end;
762637    +%let dsid = %sysfunc(close(&dsid));
762640    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
762640   !+inclass=&_inoutclass";
762641    +    %if &type eq FLOW %then %do;
762642    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
762643    +    %end;
762644    +    %else %do;
762645    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
762646    +    %end;
762647    +    put ";";
762648    +    put "run;";
762651    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
762653    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
762654    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
762655    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
762656    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
762659    +%do %while(^ %sysfunc(fetch(&dsid)));
762660    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
762661    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
762662    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
762663    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
762664    +%end;
762666    +%let dsid = %sysfunc(close(&dsid));
762668    +    put "data &emscoreout(drop=_P);";
762669    +    put "     set &emscoreout;";
762670    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
762671    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
762673    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
762674    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762675    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
762677    +%do %while(^ %sysfunc(fetch(&dsid)));
762678    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
762679    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
762680    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
762681    +    put " &P_Var = _P ;";
762682    +   %end;
762683    +   %else %do;
762684    +    put " &P_Var = 1 - _P ;";
762685    +    %let targetNonEvent = &P_LEVEL;
762686    +   %end;
762687    +%end;
762688    +%let dsid = %sysfunc(close(&dsid));
762690    +%end; /* the end of if - targetlevel eq binary */
762691    +%else %do;
762693    +/* ----     interval target  ------ */
762695    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
762696    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762698    +%do %while(^ %sysfunc(fetch(&dsid)));
762699    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
762700    +%end;
762701    +%let dsid = %sysfunc(close(&dsid));
762703    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
762704    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
762705    +%do %while(^ %sysfunc(fetch(&dsid)));
762706    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
762707    +%end;
762708    +%let dsid = %sysfunc(close(&dsid));
762710    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
762710   !+inclass=&_inoutclass ";
762711    +    %if &type eq FLOW %then %do;
762712    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
762713    +    %end;
762714    +    %else %do;
762715    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
762716    +    %end;
762717    +    put ";";
762719    +%end; /* end of targetlevel eq interval */
762721    +run;
762722    +filename  _File_;
762723    +%mend score_code;
762726    +%macro makeDeltaCode(TargetLevel=);
762727    +*--- Build Code to Modify Metadata ---*;
762728    +filename X "&EM_FILE_CDELTA_TRAIN";
762730    +/* modify columns meta */
762731    +data _null_;
762732    +    file X;
762733    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
762734    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
762735    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
762736    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
762737    +run;
762738    +%mend makeDeltaCode;
762740    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
762741    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
762743    +    %do;
762744    +    %let m_data      = &data;
762745    +    %let m_decdata   = &decdata;
762746    +    %let m_decmeta   = &decmeta;
762747    +    %let m_noresfile = &noresfile;
762748    +    %let m_resfile   = &resfile;
762749    +    dm "afa c=sashelp.emutil.decidecode.scl";
762750    +  %end;
762751    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
762752    +%Macro Train;
762755    +/*%let SVM_MAXNUMOBS = 10000; */
762756    +/*%let EM_SCORECODEFORMAT=PROC;*/
762757    +/*%let SVM_SAMPLESIZE = 100; */
762759    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
762760    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
762761    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
762762    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
762763    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
762764    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
762765    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
762768    +/*---------- Check the input data set ---------------------*/
762769    +%if &EM_IMPORT_DATA eq  %then %do;
762770    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
762771    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
762772    +%GOTO ENDLINE;
762773    +%end;
762775    +/*----------- Check the target variable  -------------------*/
762777    +%let _targetVar= %EM_TARGET;
762778    +%let _targetlevel = %EM_TARGET_LEVEL;
762780    +%if &_targetVar eq  %then %do;
762781    +%PUT ERROR:THERE IS NO VALID TARGET;
762782    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
762783    +%GOTO ENDLINE;
762784    +%end;
762786    +%let K = %SCAN(&_targetVar, 2, %STR( ));
762787    +%if &K > %then %do;
762788    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
762789    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
762790    +%GOTO ENDLINE;
762791    +%end;
762793    +/* check actual num of target levels */
762794    +%if (&_targetLevel eq BINARY) %then %do;
762795    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
762795   !+nLevel=_nTargetLevel );
762796    +    %if &_nTargetLevel  > 2 %then %do;
762797    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
762797   !+;
762798    +    %GOTO ENDLINE;
762799    +    %end;
762800    +%end;
762801    +%else %do;
762802    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
762802   !+ SUPPORTS ONLY BINARY TARGET;
762803    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
762804    +      %GOTO ENDLINE;
762805    +%end;
762807    +%let _PROPERTY_TASK = ;
762808    +%let _PROPERTY_CLASSTASK = ;
762809    +%let _PROPERTY_METHOD = ;
762810    +%if (&_targetLevel eq BINARY) %then %do;
762811    +      %let _PROPERTY_TASK = CLASSIFICATION;
762812    +      %let _PROPERTY_CLASSTASK = C_CLAS;
762813    +      %let _PROPERTY_METHOD = LINSVM;
762814    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
762815    +%else %if (&_targetLevel eq INTERVAL) %then %do;
762816    +      /* for interval target */
762817    +      %let _PROPERTY_TASK = REGRESSION;
762818    +      %let _PROPERTY_CLASSTASK = L2_REG;
762819    +      %let _PROPERTY_METHOD = LSSVM;
762820    +%end; %else %do;
762821    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
762822    +      %GOTO ENDLINE;
762824    +%end;
762827    +%let _isValidationSet =NO;
762828    +%let _testdata =;
762829    +%let _testout =;
762830    +%let _validSource=;
762832    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
762833    +        %let _isValidationSet = YES;
762834    +        %let _testdata = &EM_IMPORT_VALIDATE;
762835    +        %let _testout = &EM_EXPORT_VALIDATE;
762836    +        %let _validSource= VALIDSET;
762837    +%end;
762838    +%else %do;
762839    +        %if &EM_IMPORT_TEST  ne  %then %do;
762840    +         %let _isValidationSet = YES;
762841    +         %let _testdata = &EM_IMPORT_TEST;
762842    +         %let _testout = &EM_EXPORT_TEST;
762843    +         %let _validSource= TESTSET;
762844    +         %end;
762845    +%end;
762847    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
762848    +    %if &_isValidationSet eq NO  %then %do;
762849    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
762850    +    %GOTO ENDLINE;
762851    +    %end;
762852    +%end;
762854    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
762855    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
762856    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
762857    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
762858    +%let _num_input_class =
762858   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
762859    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
762861    +%if  &_num_input_total < 2 %then %do;
762862    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
762863    +         %goto ENDLINE;
762864    +         %end;
762867    +/*
762868    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
762868   !+%then %do;
762870    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
762872    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
762873    +         %let  EMEXCEPTIONSTRING =
762873   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
762874    +               %goto endline;
762875    +    %end;
762876    +%end;
762877    +*/
762879    +/*------ Training ----------------------*/
762880    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
762881    +    %if (&_targetLevel ne INTERVAL) %then %do;
762882    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
762882   !+METADATA=&EM_DATA_VARIABLESET,
762883    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
762883   !+INDEX=Y, INDEXNAME=_OBS_ );
762884    +    %end;
762885    +    %else %do;
762886    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
762886   !+METADATA=&EM_DATA_VARIABLESET,
762887    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
762887   !+INDEX=Y, INDEXNAME=_OBS_ );
762888    +    %end;
762889    +%end;
762890    +%else %do;
762891    +data _sample_train;
762892    +    length _OBS_ 8.;
762893    +    set &EM_IMPORT_DATA;
762894    +    _OBS_ = _N_;
762895    +run;
762896    +%end;
762897    +%let _usecgbydefault=;
762898    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
762899    +    %let _usecgbydefault = N;
762900    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
762901    +    %if &_trainnobs > 3000   %then %do;
762902    +    %let _usecgbydefault = Y;
762903    +   %end;
762904    +%end;
762906    +%svm_training(indata=_sample_train,
762907    +              task=&_PROPERTY_TASK,
762908    +              classtask =&_PROPERTY_CLASSTASK,
762909    +              method = &_PROPERTY_METHOD,
762910    +              outest=&EM_USER_OUTEST,
762911    +              outfit=&EM_USER_SVMFITSTAT,
762912    +              outclass=&EM_USER_OUTCLASS,
762913    +              isValidationSet=&_isValidationSet,
762914    +              testdata =&_testdata,
762915    +              testout =&_testout,
762916    +              validSource=&_validSource,
762917    +              usecgbydefault=&_usecgbydefault
762918    +              );
762919    +run;
762921    +%svm_score(indata=&EM_IMPORT_DATA,
762922    +             inest=&EM_USER_OUTEST,
762923    +             infit=&EM_USER_SVMFITSTAT,
762924    +             inclass=&EM_USER_OUTCLASS,
762925    +             outindata=  _tmpTrain ,
762926    +             outscore = &EM_EXPORT_TRAIN,
762927    +             targetLevel =&_targetLevel
762928    +            );
762930    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
762931    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
762932    +             inest=&EM_USER_OUTEST,
762933    +             infit=&EM_USER_SVMFITSTAT,
762934    +             inclass=&EM_USER_OUTCLASS,
762935    +             outindata=_tmpValid,
762936    +             outscore = &EM_EXPORT_VALIDATE,
762937    +             targetLevel =&_targetLevel
762938    +            );
762940    +%end;
762941    +%if &EM_IMPORT_TEST  ne  %then %do;
762942    +  %svm_score(indata=&EM_IMPORT_TEST,
762943    +             inest=&EM_USER_OUTEST,
762944    +             infit=&EM_USER_SVMFITSTAT,
762945    +             inclass=&EM_USER_OUTCLASS,
762946    +             outindata=_tmpTest,
762947    +             outscore= &EM_EXPORT_TEST,
762948    +             targetLevel =&_targetLevel
762949    +            );
762951    +%end;
762953    +/*------------------ run decision codes ----------------------*/
762955    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
762956    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
762958    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
762959    +filename _sffile_  "&decfile";
762960    +%if %sysfunc(fexist(_sffile_)) %then
762961    +%do;
762962    +    data &EM_EXPORT_TRAIN;
762963    +       set &EM_EXPORT_TRAIN;
762964    +           %include _sffile_;
762965    +    run;
762966    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
762967    +    data &EM_EXPORT_VALIDATE;
762968    +       set  &EM_EXPORT_VALIDATE;
762969    +           %include _sffile_;
762970    +    %end;
762971    +    %if &EM_IMPORT_TEST  ne  %then %do;
762972    +        data &EM_EXPORT_TEST;
762973    +            set  &EM_EXPORT_TEST;
762974    +            %include _sffile_;
762975    +        run;
762976    +    %end;
762977    +%let rc = %sysfunc(fdelete(_sffile_));
762978    +%end;
762979    +filename _sffile_ ;
762981    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
762982    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
762984    +%makeDeltaCode(TargetLevel =&_targetLevel);
762987    +/* %put SYSError =  &SYSERR;  */
762989    +%if &SYSERR > 0 %then %do;
762990    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
762991    +      %goto ENDLINE;
762992    +%end;
762994    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
762994   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
762994   !+Cutoff=0.5, Residual=Y)
762995    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
762995   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
762995   !+Cutoff=0.5, Residual=N)
762996    +*/
762999    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
762999   !+RESIDUALS=Y);
763001    +/*------ Make data for report data ----------------*/
763002    +%makeSVMFitStatDs;
763004    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
763006    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
763008    +proc datasets lib = work nolist;
763009    +      delete _outtrain  _sample_train ;
763010    +run;
763012    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
763013    +%if &_svnobs < 1   %then %do;
763014    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
763015    +      %goto endline;
763016    +%end;
763019    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
763020    +%makeTunData();
763021    +%end;
763024    +%ENDLINE:
763026    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta3_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
763028    +/*------------------------------------------------------------------
763029    +  MACRO EXPLOREOBS
763031    +  SUPPORT:  SASDHD - David Duling
763032    +  PRODUCT:  Enterprise Miner
763034    +  DESCRIPTION:
763035    +  Generates maximum and default numbers of observations to
763036    +  download for visualization depending on the record length.
763038    +  Values were determined by trial and error using typical
763039    +  Windows workstation configurations.
763041    +  Discrete sets of values are returned so that user experience
763042    +  will be consitent with similar sized data sets.
763044    +  These macro variables are set:
763045    +  _exploreobs_max -- maximum number of obs downloadable
763046    +  _exploreobs_def -- default number of obs to be downloaded
763047    +  _exploreobs_recl - record length.  Might be useful for reporting.
763049    +  Use the _exploreobs_max to set limit the GUI selection of
763050    +  observations for downloading.  The GUI selection for obs
763051    +  could be reduced to "Default" and "Max".
763053    +  Parameters
763054    +  data=   libname.memname of input data
763055    +  vars=   subset list of variables.
763056    +          downloading 1 out of 500 really does work like downloading
763057    +          1 out of 1 vars.  Users may select a subset of vars for
763058    +                   visualizations.  Pass in the list as space delimited
763059    +          var names.  If vars is not specified, the record length
763060    +          of the entire data will be used.
763061    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
763063    +  Control
763064    +  Users may control the values by entering these macro variables.
763065    +            EM_EXPLOREOBS_MAX
763066    +            EM_EXPLOREOBS_DEFAULT
763067    +  These values override the computed values.
763069    +  Debugging
763070    +  %let _exploreobs_debug=1 ;
763071    +--------------------------------------------------------------------
763072    +  HISTORY: 20APR2004. sasdhd. pushed.
763073    +           18DEC2004. sasdhd. S0280556.
763074    +           07SEP2007. sasdhd. HK1009586
763075    +--------------------------------------------------------------------*/
763077    +%macro exploreobs(data=,vars=, nbytes=) ;
763079    +   /*--- variable definitions ---*/
763080    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
763081    +   %local xobs xvars xlen vlen xi vname vlist ;
763082    +   %local _exp_source _exp_notes ;
763084    +   /*--- USER definitions ---*/
763085    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
763087    +   /*--- variable intializations ---*/
763088    +   %let _exploreobs_max=0 ;
763089    +   %let _exploreobs_def=0 ;
763090    +   %let _exploreobs_recl=0 ;
763091    +   %let xvars= 0 ;
763092    +   %let xlen = 0 ;
763093    +   %let xobs = 0 ;
763095    +   /*--- data error checks ---*/
763096    +   %if "&data" eq "" %then %do ;
763097    +            %put NOTE: DATA is not specified. ;
763098    +            %goto term ;
763099    +      %end ;
763101    +   %let dsid=%sysfunc(open(&data)) ;
763102    +   %if not &dsid %then %do ;
763103    +            %put NOTE: DATA &data is not available. ;
763104    +            %goto term ;
763105    +      %end ;
763107    +   /*--- if a vars list exists generate a subset ---*/
763108    +   %if &vars ne %then %do ;
763109    +         %let dsid=%sysfunc(close(&dsid)) ;
763110    +         %if &_exploreobs_debug ne 1 %then %do ;
763111    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
763112    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
763113    +                  options nosource nonotes ;
763114    +         %end ;
763115    +         data _exploreobs_temp_data ;
763116    +         set &data(obs=0) ;
763117    +          keep &vars ;
763118    +         run;
763119    +         %if &_exploreobs_debug ne 1 %then %do ;
763120    +                  options &_exp_source &_exp_notes ;
763121    +         %end ;
763122    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
763123    +         %if &dsid eq 0 %then %do ;
763124    +                  %put NOTE: Sample is not available.;
763125    +                  %goto term ;
763126    +            %end ;
763127    +      %end ;
763129    +   /*--- get var attributes ---*/
763130    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
763131    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
763132    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
763133    +   %let dsid= %sysfunc(close(&dsid)) ;
763135    +   /*--- set default and max obs ---*/
763136    +   %let _exploreobs_recl=%eval(&xlen) ;
763137    +   %if &_exploreobs_recl eq 0 %then %do ;
763138    +             %let _exploreobs_max= 0 ;
763139    +             %let _exploreobs_def= 0 ;
763140    +             %goto term ;
763142    +   %end ;
763143    +   %else
763144    +   %if &_exploreobs_recl le 32 %then %do ;
763145    +             %let _exploreobs_max=100000 ;
763146    +             %let _exploreobs_def= 10000 ;
763147    +   %end ;
763148    +   %else
763149    +   %if &_exploreobs_recl le 128 %then %do ;
763150    +             %let _exploreobs_max=60000 ;
763151    +             %let _exploreobs_def= 6000 ;
763152    +   %end ;
763153    +   %else
763154    +   %if &_exploreobs_recl lt 1000 %then %do ;
763155    +             %let _exploreobs_max=20000 ;
763156    +             %let _exploreobs_def= 2000 ;
763157    +   %end ;
763158    +   %else
763159    +   %if &_exploreobs_recl lt 5000 %then %do ;
763160    +             %let _exploreobs_max= 10000 ;
763161    +             %let _exploreobs_def=  1000 ;
763162    +   %end ;
763163    +   %else
763164    +   %if &_exploreobs_recl lt 20000 %then %do ;
763165    +             %let _exploreobs_max= 5000 ;
763166    +             %let _exploreobs_def=  500 ;
763167    +   %end ;
763168    +   %else %do ;
763169    +             %let _exploreobs_max= 1000 ;
763170    +             %let _exploreobs_def=  200 ;
763171    +   %end ;
763173    +   /*--- Users options ---*/
763174    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
763175    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
763176    +   %end;
763177    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
763178    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
763179    +   %end;
763181    +    /*--- S0868273 ---*/
763182    +    %if "&NBYTES" ne "" %then %do;
763183    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
763184    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
763185    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
763185   !+&EM_EXPLOREOBS_MAX));
763186    +       %end;
763188    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
763189    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
763190    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
763190   !+&EM_EXPLOREOBS_DEFAULT));
763191    +          %if ^&_exploreobs_def %then
763192    +              %let _exploreobs_def = 1;
763194    +       %end;
763195    +    %end;
763197    +   /*--- Terminate ---*/
763198    +   %term:
763200    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
763200   !+max=&_exploreobs_max : def= &_exploreobs_def ;
763201    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Meta3_TRAIN;
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM3_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Meta3_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Meta3_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Meta3_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Meta3_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 46 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Frq Mnt MntMeatProducts NumCatalogPurchases 
NumDealsPurchases NumWebVisitsMonth Recency _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar Marital_Status
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 12 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM3_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM3_SVMFITSTAT outclass= EMWS8.SVM3_OUTCLASS outest= EMWS8.SVM3_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmpTotal Frq Marital_Status Mnt MntMeatProducts 
NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth Recency
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM3_OUTCLASS has 15 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 13 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 20 variables.
NOTE: The data set EMWS8.SVM3_OUTEST has 5 observations and 18 variables.
NOTE: The data set EMWS8.SVM3_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 51987
*** Time for Optimization: 763
*** Total Processing Time: 763
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM3_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 579-583.
NOTE: PROCEDURE SVM used (Total process time):
      real time           12:42.54
      cpu time            12:40.52
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta3_TRAIN inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS 
out=EMWS8.SVM3_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           2.22 seconds
      cpu time            0.18 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           2.22 seconds
      cpu time            0.18 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=26. April 2016 19.59 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM3_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM3_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas.
763204    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
763205    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
763206    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
763207    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
763208    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
763209    +if
763210    + F_DepVar ne '1'
763211    +and F_DepVar ne '0'
763212    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
763213    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
763214    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
763215    +end;
MPRINT(SVM_SCORE):   end;
763216    +else do;
MPRINT(SVM_SCORE):   else do;
763217    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
763218    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
763219    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
763220    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
763221    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
763222    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
763223    +end;
MPRINT(SVM_SCORE):   end;
763224    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta3_VALIDATE inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS 
out=EMWS8.SVM3_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM3_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=26. April 2016 19.59 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM3_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM3_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas.
763225    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
763226    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
763227    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
763228    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
763229    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
763230    +if
763231    + F_DepVar ne '1'
763232    +and F_DepVar ne '0'
763233    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
763234    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
763235    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
763236    +end;
MPRINT(SVM_SCORE):   end;
763237    +else do;
MPRINT(SVM_SCORE):   else do;
763238    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
763239    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
763240    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
763241    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
763242    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
763243    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
763244    +end;
MPRINT(SVM_SCORE):   end;
763245    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM3_VALIDATE.
NOTE: The data set EMWS8.SVM3_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
763246     data SVM3_SCORE/view=SVM3_SCORE;
MPRINT(EM_DECIDECODE):   data SVM3_SCORE/view=SVM3_SCORE;
763247     set EMWS8.SVM3_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM3_TRAIN;
763248     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM3_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
763249     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
763250     * SVM3: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM3: Create decision matrix;
763251     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
763252     data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
763253       length   DepVar                           $  32
763254                COUNT                                8
763255                DATAPRIOR                            8
763256                TRAINPRIOR                           8
763257                DECPRIOR                             8
763258                DECISION1                            8
763259                DECISION2                            8
763260                ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
763261     
763262       label    COUNT="Level Counts"
763263                DATAPRIOR="Data Proportions"
763264                TRAINPRIOR="Training Proportions"
763265                DECPRIOR="Decision Priors"
763266                DECISION1="1"
763267                DECISION2="0"
763268                ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
763269       format   COUNT 10.
763270                ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
763271     DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
763271   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
763272     output;
MPRINT(EM_DECIDECODE):   output;
763273     DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
763273   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
763274     output;
MPRINT(EM_DECIDECODE):   output;
763275     ;
MPRINT(EM_DECIDECODE):   ;
763276     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

763277     proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
763278     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
763279     label DECISION1= '1';
763280     label DECISION2= '0';
763281     run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
763282     quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

763283     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
763284     * SVM3 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM3 Generate decision score code;
763285     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
763286     run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=28. April 2016 20.05 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM3_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 18 variables.
763287     %em_copyfile(infref=#LN06263, outfref=#LN06262, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06262 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06263",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06262 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=28. April 2016 20.05 Uhr

NOTE: 47 records were written to the file #LN06262.
      The minimum record length was 1.
      The maximum record length was 196.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
763288     %em_copyfile(infref=#LN06265, outfref=#LN06264, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06264 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06265",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06264 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=3386,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=28. April 2016 20.05 Uhr

NOTE: 65 records were written to the file #LN06264.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 15 observations read from the data set EMWS8.SVM3_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 15 observations and 9 variables.
763289     %em_copyfile(infref=#LN06267, outfref=#LN06266, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06266 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06267",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06266 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=6753,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=28. April 2016 20.05 Uhr

NOTE: 44 records were written to the file #LN06266.
      The minimum record length was 1.
      The maximum record length was 143.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=9332,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=28. April 2016 20.05 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 20.05 Uhr,
      Create Time=26. April 2016 19.42 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM3_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_SVMFITSTAT.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM3_SVMFITDS out =EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_SVMFITDS.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM3_SVMFITDS.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM3_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM3_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM3_TRAIN EMWS8.SVM3_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: The data set EMWS8.SVM3_OUTALPHA has 209 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM3_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 209 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM3_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM3_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM3_TUNINGCRIT.
NOTE: The data set EMWS8.SVM3_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
763290     
763291     *------------------------------------------------------------*;
763292     * End TRAIN: SVM3;
763293     *------------------------------------------------------------*;

763294     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
763295     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
763296     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
763297     ;
MPRINT(EM_DIAGRAM):   ;
763298     ;
MPRINT(EM_DIAGRAM):   ;
763299     ;
MPRINT(EM_DIAGRAM):   ;
763300     ;
MPRINT(EM_DIAGRAM):   ;
763301     quit;
MPRINT(EM_DIAGRAM):   quit;
763302     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
763303     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
763304     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
763305     /*; *"; *'; */
763306     ;
MPRINT(EM_DIAGRAM):   ;
763307     run;
MPRINT(EM_DIAGRAM):   run;
763308     quit;
MPRINT(EM_DIAGRAM):   quit;
763309     /* Reset EM Options */
763310     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
763311     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
763312     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
