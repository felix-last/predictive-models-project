MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.02 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                11.02 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2835PFG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2835PFG new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.02 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.02 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3103132    proc freq data=EMWS8.SVM3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM3_VariableSet noprint;
3103133    table ROLE*LEVEL/out=WORK.SVM3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM3META;
3103134    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.SVM3_VARIABLESET.
NOTE: The data set WORK.SVM3META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3103135    proc print data=WORK.SVM3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM3META label noobs;
3103136    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3103137    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
3103137  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
3103137  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
3103138    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3103139    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3103140    run;

NOTE: There were 7 observations read from the data set WORK.SVM3META.
NOTE: The PROCEDURE PRINT printed page 2803.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3103141    title10;
MPRINT(EM_DIAGRAM):   title10;
3103142    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM3_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM3_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM3_DepVar_DD 
out=EMWS8.SVM3_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
3103189    data WORK.SVM3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
3103190    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3103191    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3103191  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3103191  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3103192       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3103192  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3103192  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3103193    set EMWS8.SVM3_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM3_DEPVAR_DM( where=(_TYPE_="TARGET"));
3103194    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3103195    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3103196    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3103197    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3103198    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3103199    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3103200    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3103201    end;
MPRINT(EM_DIAGRAM):   end;
3103202    output;
MPRINT(EM_DIAGRAM):   output;
3103203    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3103204    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3103205    proc print data=WORK.SVM3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM3_EVENT noobs label;
3103206    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3103207    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3103208    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3103209    run;

NOTE: There were 1 observations read from the data set WORK.SVM3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2804.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3103210    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
3103211    proc print data = EMWS8.SVM3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM3_DepVar_DM noobs label;
3103212    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3103213    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
3103214    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3103214  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3103214  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3103215    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3103216    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3103217    run;

NOTE: There were 7 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2805.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3103218    title10;
MPRINT(EM_DIAGRAM):   title10;
3103219    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
3103731    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3103732    * SVM3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM3: Generation of macros and macro variables;
3103733    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
3103734    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

3103735    %let EMEXCEPTIONSTRING=;
3103736    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3103737    * TRAIN: SVM3;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM3;
3103738    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3103739    %let EM_ACTION = TRAIN;
3103740    %let syscc = 0;
3103741    %macro main;
3103742    
3103743       filename temp catalog 'sashelp.emmodl.svm_macros.source';
3103744       %include temp;
3103745       filename temp;
3103746       %SetProperties;
3103747       %if %upcase(&EM_ACTION) = CREATE %then %do;
3103748           filename temp catalog 'sashelp.emmodl.svm_create.source';
3103749           %include temp;
3103750           filename temp;
3103751           %create;
3103752       %end;
3103753       %else
3103754       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3103755           filename temp catalog 'sashelp.emmodl.svm_train.source';
3103756           %include temp;
3103757           filename temp;
3103758           %train;
3103759       %end;
3103760       %else
3103761       %if %upcase(&EM_ACTION) = REPORT %then %do;
3103762           filename temp catalog 'sashelp.emmodl.svm_report.source';
3103763           %include temp;
3103764           filename temp;
3103765           %report;
3103766       %end;
3103767    
3103768    %mend main;
3103769    
3103770    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
3103772   +%macro SetProperties;
3103773   +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
3103774   +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
3103775   +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
3103776   +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
3103777   +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
3103778   +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
3103779   +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
3103780   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
3103781   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
3103782   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
3103783   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
3103784   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
3103785   +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
3103786   +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
3103787   +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
3103788   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
3103789   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
3103790   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
3103791   +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
3103792   +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
3103793   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
3103794   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
3103795   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
3103796   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
3103797   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
3103798   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
3103799   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
3103800   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
3103801   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
3103802   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
3103803   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
3103804   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
3103805   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
3103806   +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
3103807   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
3103808   +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
3103809   +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
3103810   +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
3103811   +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
3103812   +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
3103813   +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
3103814   +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
3103815   +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
3103816   +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
3103817   +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
3103818   +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
3103819   +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
3103820   +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
3103821   +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
3103822   +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
3103824   +%mend SetProperties;
3103827   +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
3103829   +  %local emclassout emvarout;
3103831   +   proc dmdb batch dmdbcat= _emdmdb
3103833   +   %if &out ne 0 %then %do ;
3103834   +       data=&indata out= _emdmdb &emclassout &emvarout;
3103835   +   %end ;
3103836   +   %else %do ;
3103837   +       data=&indata &emclassout &emvarout;
3103838   +   %end ;
3103840   +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
3103841   +   %if %em_class   ne  %then %do ;
3103842   +       class %EM_CLASS;
3103843   +   %end ;
3103844   +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
3103845   +   %if %em_target ne %then %do ;
3103846   +          target %em_target ;
3103847   +   %end ;
3103848   +   run ;
3103849   +%mend make_dmdb;
3103852   +%macro svm_training(indata=,
3103853   +                    task=,
3103854   +                    classtask=,
3103855   +                    method=,
3103856   +                    outest =,
3103857   +                    outclass =,
3103858   +                    outfit =,
3103859   +                    isValidationSet =,
3103860   +                    testdata =,
3103861   +                    testout =,
3103862   +                    validSource=,
3103863   +                    usecgbydefault=
3103864   +                    );
3103866   +%make_dmdb(indata=&indata, out=1);
3103868   +options debug="nlpitermsg=2";
3103870   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
3103871   +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
3103872   +ods output tun_crt = &EM_USER_TUNINGCRIT;
3103873   +%end;
3103875   +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
3103876   +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
3103877   +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
3103878   +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
3103880   +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
3103881   +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
3103882   +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
3103883   +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
3103886   +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
3103887   +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
3103888   +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
3103889   +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
3103891   +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
3103892   +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
3103893   +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
3103894   +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
3103897   +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
3103898   +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
3103899   +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
3103900   +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
3103903   +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
3103904   +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
3103905   +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
3103906   +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
3103907   +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
3103908   +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
3103909   +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
3103910   +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
3103911   +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
3103912   +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
3103913   +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
3103914   +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
3103918   +proc svm data= _emdmdb
3103919   +         dmdbcat= _emdmdb
3103920   +         nomonitor
3103921   +         outfit= &outfit
3103922   +         outclass= &outclass
3103923   +         outest= &outest
3103924   +         out = _outtrain
3103925   +         maxiter = &_PROPERTY_MAXITER
3103926   +         maxfunc = &_PROPERTY_MAXFUNC
3103927   +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
3103928   +         gconv =   &_PROPERTY_GCONV
3103929   +         absgconv = &_PROPERTY_ABSGCONV
3103930   +         xconv =   &_PROPERTY_XCONV
3103931   +         absxconv = &_PROPERTY_ABSXCONV
3103933   +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
3103934   +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
3103935   +             xscale
3103936   +         %end;
3103937   +         %else %do;
3103938   +             noscale
3103939   +         %end;
3103940   +    %end;
3103941   +    %if &task eq CLASSIFICATION %then %do;
3103942   +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
3103943   +         method= &method
3103944   +        %end;
3103945   +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
3103946   +         method= DQP   qpsize = &_PROPERTY_QPSIZE
3103947   +        %end;
3103948   +        %else %do;
3103949   +         method= &EM_PROPERTY_METHOD
3103950   +        %end;
3103951   +    %end;
3103952   +    %else %do;
3103953   +         method= &method  task=&classtask
3103954   +         /*%if &classtask eq EPS_REG %then %do; */
3103955   +             esp=&_PROPERTY_EPSILON
3103956   +         /*%end;*/
3103957   +    %end;
3103959   +    %if &EM_PROPERTY_KERNEL ne  %then %do;
3103960   +         kernel = &EM_PROPERTY_KERNEL
3103961   +    %end;
3103962   +    %else %do;
3103963   +         kernel = Linear
3103964   +    %end;
3103966   +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
3103968   +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
3103969   +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
3103970   +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
3103971   +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
3103972   +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
3103973   +            tun = &EM_PROPERTY_TUNINGMETHOD
3103974   +        %end;
3103976   +    %end;
3103978   +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
3103979   +         CV  = &EM_PROPERTY_CVMETHOD
3103980   +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
3103981   +         fold = &EM_PROPERTY_CVFOLD
3103982   +         %end;
3103983   +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
3103984   +                testdata = &testdata
3103985   +         %end;
3103986   +    %end;
3103988   +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
3103989   +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
3103990   +    %end;
3103992   +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
3103993   +    &EM_PROPERTY_PRINTOPTION
3103994   +    %end;
3103996   +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
3103997   +    POPTHIS
3103998   +    %end;
3103999   +    ;
3104000   +    var %EM_INPUT %EM_REJECTED;
3104001   +    target %EM_TARGET;
3104003   +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
3104005   +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
3104006   +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
3104007   +             by &_PROPERTY_TUN_C_BY
3104008   +             ;
3104009   +         %end;
3104010   +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
3104011   +             C  &_PROPERTY_USERCVALUE ;
3104012   +         %end;
3104014   +     %end;
3104015   +     %else %do;
3104016   +           C  &_PROPERTY_USERCVALUE ;
3104017   +     %end;
3104020   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
3104022   +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
3104023   +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
3104024   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
3104025   +                  by &_PROPERTY_POLY_TUN_KP1_BY
3104026   +                ;
3104027   +             %end;
3104028   +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
3104029   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
3104030   +             %end;
3104031   +          %end;
3104032   +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
3104033   +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
3104034   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
3104035   +                ;
3104036   +              %end;
3104037   +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
3104038   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
3104039   +              %end;
3104040   +           %end;
3104041   +           %else %do;
3104042   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
3104043   +           %end;
3104044   +    %end;
3104046   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
3104047   +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
3104048   +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
3104049   +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
3104050   +                  by &_PROPERTY_RBF_TUN_KP1_BY
3104051   +                  ;
3104052   +              %end;
3104053   +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
3104054   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
3104055   +              %end;
3104056   +          %end;
3104057   +          %else %do;
3104058   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
3104059   +          %end;
3104060   +    %end;
3104063   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
3104065   +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
3104067   +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
3104068   +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
3104069   +                by &_PROPERTY_SGMD_TUN_KP1_BY
3104070   +             ;
3104071   +             %end;
3104072   +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
3104073   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
3104074   +             %end;
3104076   +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
3104077   +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
3104078   +                by &_PROPERTY_SGMD_TUN_KP2_BY
3104079   +             ;
3104080   +             %end;
3104081   +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
3104082   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
3104083   +             %end;
3104084   +          %end;
3104085   +          %else %do;
3104086   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
3104087   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
3104088   +          %end;
3104089   +    %end;
3104091   +run;
3104092   +%TRAINENDLINE:
3104093   +quit;
3104094   +%mend svm_training;
3104096   +%macro svm_score(indata=,
3104097   +                 inest=,
3104098   +                 infit=,
3104099   +                 inclass=,
3104100   +                 outindata=,
3104101   +                 outscore=,
3104102   +                 targetLevel=
3104103   +                 );
3104106   +%if &TargetLevel eq BINARY %then %do;
3104108   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
3104110   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
3104111   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
3104112   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
3104113   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
3104116   +%do %while(^ %sysfunc(fetch(&dsid)));
3104117   +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
3104118   +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
3104119   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
3104120   +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
3104121   +%end;
3104123   +%let dsid = %sysfunc(close(&dsid));
3104126   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
3104127   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104129   +%do %while(^ %sysfunc(fetch(&dsid)));
3104130   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104131   +%end;
3104132   +%let dsid = %sysfunc(close(&dsid));
3104134   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
3104135   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104137   +%do %while(^ %sysfunc(fetch(&dsid)));
3104138   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104139   +%end;
3104140   +%let dsid = %sysfunc(close(&dsid));
3104143   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
3104144   +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
3104145   +run;
3104147   +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
3104148   +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
3104148  !+from a part of %EM_MODEL() macro */
3104150   +data &outscore(drop=_P);
3104151   +      set  &outscore;
3104152   +     if (_P_ < -600) then _p =0;
3104153   +     else _P = 1/(1+EXP((-1)*(_P_)));
3104155   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
3104156   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104157   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
3104159   +%do %while(^ %sysfunc(fetch(&dsid)));
3104160   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
3104161   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
3104162   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
3104163   +       &P_Var = _P;
3104164   +   %end;
3104165   +   %else %do;
3104166   +       &P_Var = 1 - _P;
3104167   +       %let targetNonEvent = &P_LEVEL;
3104168   +   %end;
3104169   +%end;
3104170   +%let dsid = %sysfunc(close(&dsid));
3104172   +%include resifref;
3104174   +run;
3104176   +filename resifref;
3104178   +%end; /* the end of if - targetlevel eq binary */
3104179   +%else %do;
3104181   +/* ----     interval target  ------ */
3104183   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
3104184   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104186   +%do %while(^ %sysfunc(fetch(&dsid)));
3104187   +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104188   +%end;
3104189   +%let dsid = %sysfunc(close(&dsid));
3104191   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
3104192   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104194   +%do %while(^ %sysfunc(fetch(&dsid)));
3104195   +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104196   +%end;
3104198   +%let dsid = %sysfunc(close(&dsid));
3104200   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
3104201   +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
3104202   +run;
3104204   +%end; /* end of targetlevel eq interval */
3104207   +%mend svm_score;
3104210   +%macro makeSVMFitStatDs();
3104212   +data &EM_USER_SVMFITDS;
3104213   +     set &EM_USER_SVMFITSTAT;
3104214   +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
3104214  !+noquote))";
3104215   +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
3104215  !+rpt_svmfitstat_label_k_par2, noquote))";
3104216   +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
3104216  !+rpt_svmfitstat_label_k_par3, noquote))";
3104217   +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
3104217  !+ noquote))";
3104218   +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
3104218  !+noquote))";
3104219   +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
3104219  !+rpt_svmfitstat_label_margin, noquote))";
3104220   +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
3104220  !+ noquote))";
3104221   +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
3104221  !+noquote))";
3104222   +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
3104222  !+noquote))";
3104223   +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
3104223  !+noquote))";
3104224   +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
3104224  !+noquote))";
3104225   +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
3104225  !+noquote))";
3104226   +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
3104226  !+rpt_svmfitstat_label_ntrain, noquote))";
3104227   +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
3104227  !+ noquote))";
3104228   +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
3104228  !+ noquote))";
3104229   +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
3104229  !+noquote))";
3104230   +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
3104230  !+rpt_svmfitstat_label_radius, noquote))";
3104231   +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
3104231  !+noquote))";
3104232   +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
3104232  !+noquote))";
3104233   +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
3104233  !+ noquote))";
3104234   +    if _TYPE_ ='_ACCTAB_' then delete;
3104235   +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
3104236   +      _BIAS_= _K_PAR_;
3104237   +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
3104238   +    %end;
3104239   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
3104240   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
3104241   +    %end;
3104242   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
3104243   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
3104244   +    %end;
3104245   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
3104246   +      DROP _K_PAR3_  _L1_;
3104247   +    %end;
3104248   +run;
3104250   +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
3104251   +run;
3104253   +data &EM_USER_SVMFITDS;
3104254   +     set &EM_USER_SVMFITDS;
3104255   +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
3104255  !+;
3104256   +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
3104257   +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
3104257  !+noquote))";
3104258   +     Rename COL1 = Train;
3104259   +     if _NAME_ = '_ACCU_' then delete;
3104260   +run;
3104262   +%mend makeSVMFitStatDs;
3104264   +%macro svm_fitstat(validSource=);
3104266   +%EM_FITSTAT(trainDs = work._tmp_scored_train,
3104267   +            %if &_validSource= VALIDSET %then %do;
3104268   +                validDs=work._tmp_scored_test,
3104269   +                testDs=,
3104270   +            %end;
3104271   +            %else %if &_validSource= TESTSET %then %do;
3104272   +                validDs=,
3104273   +                testDs=work._tmp_scored_test,
3104274   +            %end;
3104275   +            decdata=&EM_DEC_DECDATA,
3104276   +            decmeta=&EM_DEC_DECMETA,
3104277   +            freqvar=, df=,
3104278   +            outfit=&EM_DATA_EMOUTFIT);
3104280   +data &EM_DATA_EMOUTFIT;
3104281   +     set &EM_DATA_EMOUTFIT;
3104282   +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
3104282  !+_SBC_; /* Because of DF */
3104283   +run;
3104284   +%mend svm_fitstat;
3104286   +/*----------------------------------------------------------------------------------
3104286  !+-----
3104287   +   OUTEST data set
3104289   +                                                       APRTMNT_  APRTMNT_   TELIND_
3104289  !+  TELIND_
3104290   + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
3104290  !+     2_
3104292   +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
3104292  !+   0.97609
3104293   +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
3104293  !+   0.15280
3104294   +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
3104294  !+  -0.07311
3104296   +=-----------------------------------------------------------------------------------
3104296  !+--*/
3104297   +/* this is not used, generate score code directly for the case of linear svm */
3104298   +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
3104298  !+Residual=);
3104300   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
3104302   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
3104303   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
3104304   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
3104305   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
3104306   +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
3104308   +%do %while(^ %sysfunc(fetch(&dsid)));
3104309   +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
3104310   +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
3104311   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
3104312   +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
3104313   +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
3104314   +%end;
3104315   +%let dsid = %sysfunc(close(&dsid));
3104317   +data _cmeta;
3104318   +    set &ColumnsMeta;
3104319   +    NAME = upcase(strip(NAME));
3104320   +run;
3104322   +data _tmpclass;
3104323   +       set &outclass;
3104324   +   _VAR_ = upcase(strip(_VAR_));
3104325   +run;
3104327   +proc sql;
3104328   +create table _outclass as
3104329   +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
3104330   +  from  _tmpclass, _cmeta
3104331   +  where _tmpclass._VAR_ = _cmeta.NAME;
3104332   +run;
3104334   +data _outclass;
3104335   +    set _outclass;
3104336   +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
3104337   +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
3104338   +run;
3104339   +data _meands;
3104340   +    set &outest;
3104341   +    if _TYPE_='_MEAN_';
3104342   +run;
3104344   +/*
3104345   +data _null_;
3104346   +    set &outest;
3104347   +    if _TYPE_='_PARMS_';
3104348   +    call symput('bias', _STDEV_ );
3104349   +    call symput('intercept', _MEAN_ );
3104350   +run;
3104351   +*/
3104353   +filename  _File_ "&File";
3104354   +data _null_;
3104355   +    FILE _File_;
3104356   +    length _line $500;
3104357   +    drop _line;
3104359   +    put ' ';
3104360   +    put '/*-------------------------------------------------*/';
3104361   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
3104362   +    put '/*-------------------------------------------------*/';
3104363   +    put ' ';
3104365   +    put 'length _warn_ $ 4;';
3104366   +    put 'label _warn_ = "Warnings";';
3104367   +    put 'length _svm_uname $32;';
3104368   +    put 'DROP _svm_uname ;';
3104370   +  dsid = open("work._outclass");
3104371   +    if dsid then do;
3104372   +          oldvname ='';
3104373   +          do while(not fetch(dsid));
3104374   +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
3104375   +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
3104376   +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
3104377   +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
3104378   +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
3104379   +             *put 'vtype =' vtype;
3104380   +             *put 'vformat=' vformat;
3104382   +             if oldname ne vname then do;
3104383   +                 if vtype = 'N' then do;
3104384   +                     if vformat eq ' ' then do;
3104385   +                        put '_svm_uname = put(' vname ', Best12.);';
3104386   +                     end; else do;
3104387   +                        put '_svm_uname = put(' vname ',' vformat ');';
3104388   +                     end;
3104389   +                  end;
3104390   +                  else do;
3104391   +                     if vformat eq ' ' then do;
3104392   +                        put '_svm_uname = ' vname ' ;';
3104393   +                     end; else do;
3104394   +                        put '_svm_uname = put(' vname ',' vformat ');';
3104395   +                     end;
3104396   +                  end;
3104397   +                  put '%DMNORMIP(_svm_uname);';
3104398   +              end; /* end of oldname ne vname */
3104400   +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
3104401   +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
3104402   +              put _line;
3104403   +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
3104403  !+;';
3104404   +              oldname = vname;
3104405   +          end;
3104407   +     end;
3104408   +rc=close(dsid);
3104410   +dsid = open("&outest");
3104411   +    if dsid then do;
3104412   +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
3104412  !+noquote))"  "------ */";
3104413   +          ncol = attrn(dsid, 'NVARS');
3104414   +          do i=4 to ncol;
3104415   +             vname = upcase(trim(left(varname(dsid,i))));
3104416   +              do while(not fetch(dsid));
3104417   +                  type = strip(getvarc(dsid,2));
3104418   +                  select(type);
3104419   +                      when('_MEAN_')  mean =  getvarn(dsid, i);
3104420   +                      when('_STDEV_') std  =  getvarn(dsid, i);
3104421   +                      when('_PARMS_') coeff = getvarn(dsid, i);
3104422   +                  otherwise;
3104423   +                  end;
3104424   +              end; /* end of do-while*/
3104425   +              *put '+' coeff '*(' vname '-' mean ')/' std;
3104426   +              if i=4 then  do; put '_P_ =(' coeff ; end;
3104427   +              else if i=5 then do; put '+' coeff ');' ; end;
3104428   +              else do;
3104429   +                      tmpvar = '_TMPVAR'||strip(i);
3104430   +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
3104431   +                      put 'else ' tmpvar '=' vname ';';
3104432   +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
3104433   +                      put 'drop  ' tmpvar ';';
3104434   +              end;
3104435   +              rc=rewind(dsid);
3104436   +         end; /* end of  do i=6 to &nvars; */
3104437   +         put ';';
3104438   +     end;
3104439   +    rc=close(dsid);
3104440   + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
3104440  !+"------ */";
3104442   +%if &TargetLevel eq BINARY %then %do;
3104444   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
3104445   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104446   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
3104448   +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
3104449   +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
3104451   +%do %while(^ %sysfunc(fetch(&dsid)));
3104452   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
3104453   +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
3104454   +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
3104455   +       put " &P_Var = _P;";
3104456   +   %end;
3104457   +   %else %do;
3104458   +       put " &P_Var = 1 - _P;";
3104459   +   %let targetNonEvent = &P_LEVEL;
3104460   +   %end;
3104461   +%end;
3104462   +%let dsid = %sysfunc(close(&dsid));
3104464   +%if &Residual = Y %then %do;
3104466   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
3104466  !+"------ */";
3104468   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
3104469   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104470   +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
3104472   +   %do %while(^ %sysfunc(fetch(&dsid)));
3104473   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
3104474   +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
3104475   +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
3104476   +       put " &R_Var = 1 - _P;";
3104477   +   %end;
3104478   +   %else %do;
3104479   +       put " &R_Var = 0 - (1 - _P);";
3104480   +   %end;
3104481   +   %end;
3104482   +   %let dsid = %sysfunc(close(&dsid));
3104483   +%end;
3104484   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
3104484  !+"------ */";
3104486   +    put 'length _FORMAT_VAR $200;';
3104487   +    put 'length _TARGNOR $%DMNORLEN; ';
3104488   +    put 'DROP _FORMAT_VAR _TARGNOR;';
3104489   +    %if &TargetFormat ne  %then %do;
3104490   +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
3104491   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
3104492   +    %end;
3104493   +    %else %do;
3104494   +    %if &TargetType  = N  %then %do;
3104495   +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
3104496   +       %end;
3104497   +       %else %do;
3104498   +    put "_FORMAT_VAR= &TargetVar;";
3104499   +       %end;
3104500   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
3104501   +    %end;
3104503   +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
3104504   +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
3104505   +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
3104507   +    %do %while(^ %sysfunc(fetch(&dsid)));
3104508   +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
3104509   +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
3104510   +        %let qF_var_label = %str(%"&F_var_label%");
3104511   +    put "&F_var = _TARGNOR ;";
3104512   +    put "label &F_var = &qF_Var_label;";
3104513   +    %end;
3104514   +    %let dsid = %sysfunc(close(&dsid));
3104516   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
3104516  !+"------ */";
3104518   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
3104519   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104520   +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
3104522   +%do %while(^%sysfunc(fetch(&dsid)));
3104523   +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
3104524   +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
3104525   +   %let qI_var_label = %str(%"&I_var_label%");
3104526   +   %let qTargetEvent = %str(%"&targetEvent%");
3104527   +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
3104528   +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
3104529   +       put " else &I_Var  =  &qtargetNonEvent ;";
3104530   +       put " label &I_var = &qI_var_label;";
3104531   +%end;
3104532   +%let dsid = %sysfunc(close(&dsid));
3104534   +%end;  /* end of TargetLevel= Binary */
3104536   +%else %if &TargetLevel eq INTERVAL %then %do;
3104538   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
3104539   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104540   +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
3104542   +%do %while(^ %sysfunc(fetch(&dsid)));
3104543   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
3104544   +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
3104545   +   %let qP_label = %str(%"&P_label%");
3104546   +    put " &P_Var = _P_;";
3104547   +    put " label &P_Var = &qP_label;";
3104548   +%end;
3104549   +%let dsid = %sysfunc(close(&dsid));
3104551   +%if &Residual = Y %then %do;
3104553   +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
3104553  !+"------ */";
3104555   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
3104556   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104557   +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
3104559   +   %do %while(^ %sysfunc(fetch(&dsid)));
3104560   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
3104561   +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
3104562   +     %let qR_label = %str(%"&R_label%");
3104563   +       put " &R_Var = &TargetVar - &P_var;";
3104564   +       put " label &R_Var = &qR_label;";
3104565   +   %end;
3104566   +   %let dsid = %sysfunc(close(&dsid));
3104567   +%end;
3104569   +%end;   /* end of TargetLevel= Interval */
3104571   +  put "/*------------------------------------------------------------*/";
3104572   +proc datasets lib=work nolist;
3104573   + delete _tmpclass _cmeta _outclass;
3104574   +run;
3104575   +run;
3104577   +filename  _File_;
3104579   +%mend gen_score;
3104581   +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
3104582   +%global &nLevel;
3104583   +proc dmdb batch data=&indata
3104584   +classout=_tmp_dmdbout;
3104585   +class &target;
3104586   +run;
3104587   +data _tmp_dmdbout;
3104588   +    set _tmp_dmdbout;
3104589   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
3104590   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
3104591   +run;
3104592   +data _null_;
3104593   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
3104594   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
3104595   +    %let dsid = %sysfunc(close(&dsid));
3104596   +     call symput("&nLevel", put(&_obs, Best12.));
3104597   +run;
3104599   +proc datasets lib=work nolist;
3104600   +     delete _tmp_dmdbout;
3104601   +run;
3104602   +quit;
3104603   +%Mend CheckBinaryTargetLevel;
3104606   +%macro getNObs(inds=, nobs=);
3104607   +    %global &nobs;
3104608   +    data _null_;
3104609   +        set &inds end=eof;
3104610   +        if eof then call symput("&nobs", _N_);
3104611   +    run;
3104612   +    quit;
3104613   +%mend  getNObs;
3104617   +%macro makeAlphaDs(target=, cmeta=);
3104619   + %let isOBSIndex= N;
3104620   + %let dsid = %sysfunc(open(&cmeta));
3104621   + %let vn_name =%sysfunc(varnum(&dsid, NAME));
3104622   + %do %while(^%sysfunc(fetch(&dsid)));
3104623   +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
3104624   +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
3104625   + %end;
3104626   + %let dsid = %sysfunc(close(&dsid));
3104628   +data &EM_USER_OUTALPHA;
3104629   +     set _sample_train;
3104630   +     set _outtrain(keep=_ALPHA_ _BOUND_);
3104631   +     %if &isOBSIndex= N %then %do;
3104632   +     keep _OBS_ _ALPHA_ _BOUND_ &target;
3104633   +     %end;
3104634   +     %else %do;
3104635   +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
3104636   +     %end;
3104637   +run;
3104639   +data &EM_EXPORT_TRAIN;
3104640   +     length _OBS_ 8;
3104641   +     set &EM_EXPORT_TRAIN;
3104642   +     _OBS_ = _N_;
3104643   +run;
3104645   +data &EM_EXPORT_TRAIN(Drop=_OBS_);
3104646   +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
3104647   +     by _OBS_;
3104648   +     if _ALPHA_ =. then _ALPHA_=0;
3104649   +     if _BOUND_ ="" then _BOUND_="_LBC";
3104650   +run;
3104652   +data &EM_USER_OUTALPHA;
3104653   +   set &EM_USER_OUTALPHA;
3104654   +   if _ALPHA_ = 0 then delete;
3104655   +   %if &isOBSIndex= N %then %do;
3104656   +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
3104657   +   rename _OBS_ = _dataobs_;
3104658   +   %end;
3104659   +   %else %do;
3104660   +   drop _OBS_;
3104661   +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
3104661  !+noquote))";
3104662   +   %end;
3104663   +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
3104664   +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
3104665   +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
3104666   +   run;
3104668   +%mend makeAlphaDs;
3104671   +%macro makeTunData();
3104672   +data &EM_USER_TUNINGCRIT;
3104673   +    set &EM_USER_TUNINGCRIT;
3104674   +    Drop N;
3104675   +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
3104676   +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
3104677   +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
3104678   +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
3104679   +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
3104680   +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
3104681   +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
3104681  !+noquote))";
3104682   +run;
3104683   +%mend makeTunData;
3104685   +/*------------------ Score Code Generation with Proc SVMScore
3104685  !+----------------------  */
3104688   +%macro score_code(TargetLevel=, type=);
3104690   +%let _inoutest = WORK._inoutest ;
3104691   +%let _inoutfit = WORK._inoutfit ;
3104692   +%let _inoutclass = WORK._inoutclass;
3104694   +%if &type eq FLOW %then %do;
3104695   +    %let _inoutest = &EM_USER_OUTEST;
3104696   +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
3104697   +    %let _inoutclass = &EM_USER_OUTCLASS;
3104698   +%end;
3104699   +%else %do;
3104700   +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
3104700  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
3104701   +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
3104701  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
3104702   +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
3104702  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
3104703   +%end;
3104705   +%let emscoreout = %str(&)%str(em_score_output);
3104708   +%if &type eq FLOW %then %do;
3104709   +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
3104710   +%end;
3104711   +%else %do;
3104712   +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
3104713   +%end;
3104715   +data _null_;
3104716   +    FILE _File_ MOD;
3104718   +    put ' ';
3104719   +    put '/*-------------------------------------------------*/';
3104720   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
3104720  !+;
3104721   +    put '/*-------------------------------------------------*/';
3104722   +    put ' ';
3104724   +%if &TargetLevel eq BINARY %then %do;
3104726   +/*%put &emscoreout;  */
3104728   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
3104729   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104731   +%do %while(^ %sysfunc(fetch(&dsid)));
3104732   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104734   +%end;
3104735   +%let dsid = %sysfunc(close(&dsid));
3104737   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
3104738   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104740   +%do %while(^ %sysfunc(fetch(&dsid)));
3104741   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
3104743   +%end;
3104744   +%let dsid = %sysfunc(close(&dsid));
3104747   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
3104747  !+inclass=&_inoutclass";
3104748   +    %if &type eq FLOW %then %do;
3104749   +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
3104750   +    %end;
3104751   +    %else %do;
3104752   +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
3104753   +    %end;
3104754   +    put ";";
3104755   +    put "run;";
3104758   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
3104760   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
3104761   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
3104762   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
3104763   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
3104766   +%do %while(^ %sysfunc(fetch(&dsid)));
3104767   +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
3104768   +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
3104769   +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
3104770   +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
3104771   +%end;
3104773   +%let dsid = %sysfunc(close(&dsid));
3104775   +    put "data &emscoreout(drop=_P);";
3104776   +    put "     set &emscoreout;";
3104777   +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
3104778   +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
3104780   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
3104781   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104782   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
3104784   +%do %while(^ %sysfunc(fetch(&dsid)));
3104785   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
3104786   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
3104787   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
3104788   +    put " &P_Var = _P ;";
3104789   +   %end;
3104790   +   %else %do;
3104791   +    put " &P_Var = 1 - _P ;";
3104792   +    %let targetNonEvent = &P_LEVEL;
3104793   +   %end;
3104794   +%end;
3104795   +%let dsid = %sysfunc(close(&dsid));
3104797   +%end; /* the end of if - targetlevel eq binary */
3104798   +%else %do;
3104800   +/* ----     interval target  ------ */
3104802   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
3104803   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104805   +%do %while(^ %sysfunc(fetch(&dsid)));
3104806   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
3104807   +%end;
3104808   +%let dsid = %sysfunc(close(&dsid));
3104810   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
3104811   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
3104812   +%do %while(^ %sysfunc(fetch(&dsid)));
3104813   +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
3104814   +%end;
3104815   +%let dsid = %sysfunc(close(&dsid));
3104817   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
3104817  !+inclass=&_inoutclass ";
3104818   +    %if &type eq FLOW %then %do;
3104819   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
3104820   +    %end;
3104821   +    %else %do;
3104822   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
3104823   +    %end;
3104824   +    put ";";
3104826   +%end; /* end of targetlevel eq interval */
3104828   +run;
3104829   +filename  _File_;
3104830   +%mend score_code;
3104833   +%macro makeDeltaCode(TargetLevel=);
3104834   +*--- Build Code to Modify Metadata ---*;
3104835   +filename X "&EM_FILE_CDELTA_TRAIN";
3104837   +/* modify columns meta */
3104838   +data _null_;
3104839   +    file X;
3104840   +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
3104841   +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
3104842   +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
3104843   +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
3104844   +run;
3104845   +%mend makeDeltaCode;
3104847   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
3104848   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
3104850   +    %do;
3104851   +    %let m_data      = &data;
3104852   +    %let m_decdata   = &decdata;
3104853   +    %let m_decmeta   = &decmeta;
3104854   +    %let m_noresfile = &noresfile;
3104855   +    %let m_resfile   = &resfile;
3104856   +    dm "afa c=sashelp.emutil.decidecode.scl";
3104857   +  %end;
3104858   +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
3104859   +%Macro Train;
3104862   +/*%let SVM_MAXNUMOBS = 10000; */
3104863   +/*%let EM_SCORECODEFORMAT=PROC;*/
3104864   +/*%let SVM_SAMPLESIZE = 100; */
3104866   +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
3104867   +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
3104868   +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
3104869   +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
3104870   +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
3104871   +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
3104872   +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
3104875   +/*---------- Check the input data set ---------------------*/
3104876   +%if &EM_IMPORT_DATA eq  %then %do;
3104877   +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
3104878   +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
3104879   +%GOTO ENDLINE;
3104880   +%end;
3104882   +/*----------- Check the target variable  -------------------*/
3104884   +%let _targetVar= %EM_TARGET;
3104885   +%let _targetlevel = %EM_TARGET_LEVEL;
3104887   +%if &_targetVar eq  %then %do;
3104888   +%PUT ERROR:THERE IS NO VALID TARGET;
3104889   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
3104890   +%GOTO ENDLINE;
3104891   +%end;
3104893   +%let K = %SCAN(&_targetVar, 2, %STR( ));
3104894   +%if &K > %then %do;
3104895   +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
3104896   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
3104897   +%GOTO ENDLINE;
3104898   +%end;
3104900   +/* check actual num of target levels */
3104901   +%if (&_targetLevel eq BINARY) %then %do;
3104902   +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
3104902  !+nLevel=_nTargetLevel );
3104903   +    %if &_nTargetLevel  > 2 %then %do;
3104904   +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
3104904  !+;
3104905   +    %GOTO ENDLINE;
3104906   +    %end;
3104907   +%end;
3104908   +%else %do;
3104909   +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
3104909  !+ SUPPORTS ONLY BINARY TARGET;
3104910   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
3104911   +      %GOTO ENDLINE;
3104912   +%end;
3104914   +%let _PROPERTY_TASK = ;
3104915   +%let _PROPERTY_CLASSTASK = ;
3104916   +%let _PROPERTY_METHOD = ;
3104917   +%if (&_targetLevel eq BINARY) %then %do;
3104918   +      %let _PROPERTY_TASK = CLASSIFICATION;
3104919   +      %let _PROPERTY_CLASSTASK = C_CLAS;
3104920   +      %let _PROPERTY_METHOD = LINSVM;
3104921   +%end;  /* end of %if (&_targetLevel eq BINARY)  */
3104922   +%else %if (&_targetLevel eq INTERVAL) %then %do;
3104923   +      /* for interval target */
3104924   +      %let _PROPERTY_TASK = REGRESSION;
3104925   +      %let _PROPERTY_CLASSTASK = L2_REG;
3104926   +      %let _PROPERTY_METHOD = LSSVM;
3104927   +%end; %else %do;
3104928   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
3104929   +      %GOTO ENDLINE;
3104931   +%end;
3104934   +%let _isValidationSet =NO;
3104935   +%let _testdata =;
3104936   +%let _testout =;
3104937   +%let _validSource=;
3104939   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
3104940   +        %let _isValidationSet = YES;
3104941   +        %let _testdata = &EM_IMPORT_VALIDATE;
3104942   +        %let _testout = &EM_EXPORT_VALIDATE;
3104943   +        %let _validSource= VALIDSET;
3104944   +%end;
3104945   +%else %do;
3104946   +        %if &EM_IMPORT_TEST  ne  %then %do;
3104947   +         %let _isValidationSet = YES;
3104948   +         %let _testdata = &EM_IMPORT_TEST;
3104949   +         %let _testout = &EM_EXPORT_TEST;
3104950   +         %let _validSource= TESTSET;
3104951   +         %end;
3104952   +%end;
3104954   +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
3104955   +    %if &_isValidationSet eq NO  %then %do;
3104956   +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
3104957   +    %GOTO ENDLINE;
3104958   +    %end;
3104959   +%end;
3104961   +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
3104962   +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
3104963   +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
3104964   +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
3104965   +%let _num_input_class =
3104965  !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
3104966   +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
3104968   +%if  &_num_input_total < 2 %then %do;
3104969   +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
3104970   +         %goto ENDLINE;
3104971   +         %end;
3104974   +/*
3104975   +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
3104975  !+%then %do;
3104977   +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
3104979   +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
3104980   +         %let  EMEXCEPTIONSTRING =
3104980  !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
3104981   +               %goto endline;
3104982   +    %end;
3104983   +%end;
3104984   +*/
3104986   +/*------ Training ----------------------*/
3104987   +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
3104988   +    %if (&_targetLevel ne INTERVAL) %then %do;
3104989   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
3104989  !+METADATA=&EM_DATA_VARIABLESET,
3104990   +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
3104990  !+INDEX=Y, INDEXNAME=_OBS_ );
3104991   +    %end;
3104992   +    %else %do;
3104993   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
3104993  !+METADATA=&EM_DATA_VARIABLESET,
3104994   +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
3104994  !+INDEX=Y, INDEXNAME=_OBS_ );
3104995   +    %end;
3104996   +%end;
3104997   +%else %do;
3104998   +data _sample_train;
3104999   +    length _OBS_ 8.;
3105000   +    set &EM_IMPORT_DATA;
3105001   +    _OBS_ = _N_;
3105002   +run;
3105003   +%end;
3105004   +%let _usecgbydefault=;
3105005   +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
3105006   +    %let _usecgbydefault = N;
3105007   +    %getNObs(inds=_sample_train, nobs=_trainnobs);
3105008   +    %if &_trainnobs > 3000   %then %do;
3105009   +    %let _usecgbydefault = Y;
3105010   +   %end;
3105011   +%end;
3105013   +%svm_training(indata=_sample_train,
3105014   +              task=&_PROPERTY_TASK,
3105015   +              classtask =&_PROPERTY_CLASSTASK,
3105016   +              method = &_PROPERTY_METHOD,
3105017   +              outest=&EM_USER_OUTEST,
3105018   +              outfit=&EM_USER_SVMFITSTAT,
3105019   +              outclass=&EM_USER_OUTCLASS,
3105020   +              isValidationSet=&_isValidationSet,
3105021   +              testdata =&_testdata,
3105022   +              testout =&_testout,
3105023   +              validSource=&_validSource,
3105024   +              usecgbydefault=&_usecgbydefault
3105025   +              );
3105026   +run;
3105028   +%svm_score(indata=&EM_IMPORT_DATA,
3105029   +             inest=&EM_USER_OUTEST,
3105030   +             infit=&EM_USER_SVMFITSTAT,
3105031   +             inclass=&EM_USER_OUTCLASS,
3105032   +             outindata=  _tmpTrain ,
3105033   +             outscore = &EM_EXPORT_TRAIN,
3105034   +             targetLevel =&_targetLevel
3105035   +            );
3105037   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
3105038   +  %svm_score(indata=&EM_IMPORT_VALIDATE,
3105039   +             inest=&EM_USER_OUTEST,
3105040   +             infit=&EM_USER_SVMFITSTAT,
3105041   +             inclass=&EM_USER_OUTCLASS,
3105042   +             outindata=_tmpValid,
3105043   +             outscore = &EM_EXPORT_VALIDATE,
3105044   +             targetLevel =&_targetLevel
3105045   +            );
3105047   +%end;
3105048   +%if &EM_IMPORT_TEST  ne  %then %do;
3105049   +  %svm_score(indata=&EM_IMPORT_TEST,
3105050   +             inest=&EM_USER_OUTEST,
3105051   +             infit=&EM_USER_SVMFITSTAT,
3105052   +             inclass=&EM_USER_OUTCLASS,
3105053   +             outindata=_tmpTest,
3105054   +             outscore= &EM_EXPORT_TEST,
3105055   +             targetLevel =&_targetLevel
3105056   +            );
3105058   +%end;
3105060   +/*------------------ run decision codes ----------------------*/
3105062   +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
3105063   +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
3105065   +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
3105066   +filename _sffile_  "&decfile";
3105067   +%if %sysfunc(fexist(_sffile_)) %then
3105068   +%do;
3105069   +    data &EM_EXPORT_TRAIN;
3105070   +       set &EM_EXPORT_TRAIN;
3105071   +           %include _sffile_;
3105072   +    run;
3105073   +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
3105074   +    data &EM_EXPORT_VALIDATE;
3105075   +       set  &EM_EXPORT_VALIDATE;
3105076   +           %include _sffile_;
3105077   +    %end;
3105078   +    %if &EM_IMPORT_TEST  ne  %then %do;
3105079   +        data &EM_EXPORT_TEST;
3105080   +            set  &EM_EXPORT_TEST;
3105081   +            %include _sffile_;
3105082   +        run;
3105083   +    %end;
3105084   +%let rc = %sysfunc(fdelete(_sffile_));
3105085   +%end;
3105086   +filename _sffile_ ;
3105088   +%score_code(TargetLevel =&_targetLevel, type=FLOW);
3105089   +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
3105091   +%makeDeltaCode(TargetLevel =&_targetLevel);
3105094   +/* %put SYSError =  &SYSERR;  */
3105096   +%if &SYSERR > 0 %then %do;
3105097   +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
3105098   +      %goto ENDLINE;
3105099   +%end;
3105101   +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
3105101  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
3105101  !+Cutoff=0.5, Residual=Y)
3105102   +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
3105102  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
3105102  !+Cutoff=0.5, Residual=N)
3105103   +*/
3105106   +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
3105106  !+RESIDUALS=Y);
3105108   +/*------ Make data for report data ----------------*/
3105109   +%makeSVMFitStatDs;
3105111   +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
3105113   +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
3105115   +proc datasets lib = work nolist;
3105116   +      delete _outtrain  _sample_train ;
3105117   +run;
3105119   +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
3105120   +%if &_svnobs < 1   %then %do;
3105121   +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
3105122   +      %goto endline;
3105123   +%end;
3105126   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
3105127   +%makeTunData();
3105128   +%end;
3105131   +%ENDLINE:
3105133   +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta3_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
3105135   +/*------------------------------------------------------------------
3105136   +  MACRO EXPLOREOBS
3105138   +  SUPPORT:  SASDHD - David Duling
3105139   +  PRODUCT:  Enterprise Miner
3105141   +  DESCRIPTION:
3105142   +  Generates maximum and default numbers of observations to
3105143   +  download for visualization depending on the record length.
3105145   +  Values were determined by trial and error using typical
3105146   +  Windows workstation configurations.
3105148   +  Discrete sets of values are returned so that user experience
3105149   +  will be consitent with similar sized data sets.
3105151   +  These macro variables are set:
3105152   +  _exploreobs_max -- maximum number of obs downloadable
3105153   +  _exploreobs_def -- default number of obs to be downloaded
3105154   +  _exploreobs_recl - record length.  Might be useful for reporting.
3105156   +  Use the _exploreobs_max to set limit the GUI selection of
3105157   +  observations for downloading.  The GUI selection for obs
3105158   +  could be reduced to "Default" and "Max".
3105160   +  Parameters
3105161   +  data=   libname.memname of input data
3105162   +  vars=   subset list of variables.
3105163   +          downloading 1 out of 500 really does work like downloading
3105164   +          1 out of 1 vars.  Users may select a subset of vars for
3105165   +                   visualizations.  Pass in the list as space delimited
3105166   +          var names.  If vars is not specified, the record length
3105167   +          of the entire data will be used.
3105168   +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
3105170   +  Control
3105171   +  Users may control the values by entering these macro variables.
3105172   +            EM_EXPLOREOBS_MAX
3105173   +            EM_EXPLOREOBS_DEFAULT
3105174   +  These values override the computed values.
3105176   +  Debugging
3105177   +  %let _exploreobs_debug=1 ;
3105178   +--------------------------------------------------------------------
3105179   +  HISTORY: 20APR2004. sasdhd. pushed.
3105180   +           18DEC2004. sasdhd. S0280556.
3105181   +           07SEP2007. sasdhd. HK1009586
3105182   +--------------------------------------------------------------------*/
3105184   +%macro exploreobs(data=,vars=, nbytes=) ;
3105186   +   /*--- variable definitions ---*/
3105187   +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
3105188   +   %local xobs xvars xlen vlen xi vname vlist ;
3105189   +   %local _exp_source _exp_notes ;
3105191   +   /*--- USER definitions ---*/
3105192   +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
3105194   +   /*--- variable intializations ---*/
3105195   +   %let _exploreobs_max=0 ;
3105196   +   %let _exploreobs_def=0 ;
3105197   +   %let _exploreobs_recl=0 ;
3105198   +   %let xvars= 0 ;
3105199   +   %let xlen = 0 ;
3105200   +   %let xobs = 0 ;
3105202   +   /*--- data error checks ---*/
3105203   +   %if "&data" eq "" %then %do ;
3105204   +            %put NOTE: DATA is not specified. ;
3105205   +            %goto term ;
3105206   +      %end ;
3105208   +   %let dsid=%sysfunc(open(&data)) ;
3105209   +   %if not &dsid %then %do ;
3105210   +            %put NOTE: DATA &data is not available. ;
3105211   +            %goto term ;
3105212   +      %end ;
3105214   +   /*--- if a vars list exists generate a subset ---*/
3105215   +   %if &vars ne %then %do ;
3105216   +         %let dsid=%sysfunc(close(&dsid)) ;
3105217   +         %if &_exploreobs_debug ne 1 %then %do ;
3105218   +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
3105219   +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
3105220   +                  options nosource nonotes ;
3105221   +         %end ;
3105222   +         data _exploreobs_temp_data ;
3105223   +         set &data(obs=0) ;
3105224   +          keep &vars ;
3105225   +         run;
3105226   +         %if &_exploreobs_debug ne 1 %then %do ;
3105227   +                  options &_exp_source &_exp_notes ;
3105228   +         %end ;
3105229   +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
3105230   +         %if &dsid eq 0 %then %do ;
3105231   +                  %put NOTE: Sample is not available.;
3105232   +                  %goto term ;
3105233   +            %end ;
3105234   +      %end ;
3105236   +   /*--- get var attributes ---*/
3105237   +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
3105238   +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
3105239   +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
3105240   +   %let dsid= %sysfunc(close(&dsid)) ;
3105242   +   /*--- set default and max obs ---*/
3105243   +   %let _exploreobs_recl=%eval(&xlen) ;
3105244   +   %if &_exploreobs_recl eq 0 %then %do ;
3105245   +             %let _exploreobs_max= 0 ;
3105246   +             %let _exploreobs_def= 0 ;
3105247   +             %goto term ;
3105249   +   %end ;
3105250   +   %else
3105251   +   %if &_exploreobs_recl le 32 %then %do ;
3105252   +             %let _exploreobs_max=100000 ;
3105253   +             %let _exploreobs_def= 10000 ;
3105254   +   %end ;
3105255   +   %else
3105256   +   %if &_exploreobs_recl le 128 %then %do ;
3105257   +             %let _exploreobs_max=60000 ;
3105258   +             %let _exploreobs_def= 6000 ;
3105259   +   %end ;
3105260   +   %else
3105261   +   %if &_exploreobs_recl lt 1000 %then %do ;
3105262   +             %let _exploreobs_max=20000 ;
3105263   +             %let _exploreobs_def= 2000 ;
3105264   +   %end ;
3105265   +   %else
3105266   +   %if &_exploreobs_recl lt 5000 %then %do ;
3105267   +             %let _exploreobs_max= 10000 ;
3105268   +             %let _exploreobs_def=  1000 ;
3105269   +   %end ;
3105270   +   %else
3105271   +   %if &_exploreobs_recl lt 20000 %then %do ;
3105272   +             %let _exploreobs_max= 5000 ;
3105273   +             %let _exploreobs_def=  500 ;
3105274   +   %end ;
3105275   +   %else %do ;
3105276   +             %let _exploreobs_max= 1000 ;
3105277   +             %let _exploreobs_def=  200 ;
3105278   +   %end ;
3105280   +   /*--- Users options ---*/
3105281   +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
3105282   +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
3105283   +   %end;
3105284   +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
3105285   +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
3105286   +   %end;
3105288   +    /*--- S0868273 ---*/
3105289   +    %if "&NBYTES" ne "" %then %do;
3105290   +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
3105291   +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
3105292   +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
3105292  !+&EM_EXPLOREOBS_MAX));
3105293   +       %end;
3105295   +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
3105296   +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
3105297   +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
3105297  !+&EM_EXPLOREOBS_DEFAULT));
3105298   +          %if ^&_exploreobs_def %then
3105299   +              %let _exploreobs_def = 1;
3105301   +       %end;
3105302   +    %end;
3105304   +   /*--- Terminate ---*/
3105305   +   %term:
3105307   +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
3105307  !+max=&_exploreobs_max : def= &_exploreobs_def ;
3105308   +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Meta3_TRAIN;
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM3_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Meta3_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Meta3_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Meta3_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Meta3_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 46 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      -7800594:***   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be 
      shifted by the "BEST" format.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits 
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat 
RMntFrq Recency Teenhome _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain 
Custid DepVar Education HigherEducationBinary Marital_Status
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 28 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM3_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM3_SVMFITSTAT outclass= EMWS8.SVM3_OUTCLASS outest= EMWS8.SVM3_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome 
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer 
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM3_OUTCLASS has 42 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 40 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 36 variables.
NOTE: The data set EMWS8.SVM3_OUTEST has 5 observations and 45 variables.
NOTE: The data set EMWS8.SVM3_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 54521
*** Time for Optimization: 849
*** Total Processing Time: 850
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM3_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 2806-2810.
NOTE: PROCEDURE SVM used (Total process time):
      real time           14:10.30
      cpu time            13:57.57
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta3_TRAIN inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS 
out=EMWS8.SVM3_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=26. April 2016 19.59 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM3_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM3_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas.
3105311   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
3105312   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
3105313   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
3105314   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
3105315   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
3105316   +if
3105317   + F_DepVar ne '1'
3105318   +and F_DepVar ne '0'
3105319   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
3105320   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
3105321   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
3105322   +end;
MPRINT(SVM_SCORE):   end;
3105323   +else do;
MPRINT(SVM_SCORE):   else do;
3105324   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
3105325   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
3105326   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
3105327   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
3105328   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
3105329   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
3105330   +end;
MPRINT(SVM_SCORE):   end;
3105331   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta3_VALIDATE inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS 
out=EMWS8.SVM3_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM3_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM3_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=26. April 2016 19.59 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM3_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM3_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM3\tmprescode.sas.
3105332   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
3105333   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
3105334   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
3105335   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
3105336   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
3105337   +if
3105338   + F_DepVar ne '1'
3105339   +and F_DepVar ne '0'
3105340   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
3105341   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
3105342   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
3105343   +end;
MPRINT(SVM_SCORE):   end;
3105344   +else do;
MPRINT(SVM_SCORE):   else do;
3105345   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
3105346   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
3105347   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
3105348   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
3105349   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
3105350   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
3105351   +end;
MPRINT(SVM_SCORE):   end;
3105352   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM3_VALIDATE.
NOTE: The data set EMWS8.SVM3_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
3105353    data SVM3_SCORE/view=SVM3_SCORE;
MPRINT(EM_DECIDECODE):   data SVM3_SCORE/view=SVM3_SCORE;
3105354    set EMWS8.SVM3_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM3_TRAIN;
3105355    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM3_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM3_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
3105356    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
3105357    * SVM3: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM3: Create decision matrix;
3105358    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
3105359    data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
3105360      length   DepVar                           $  32
3105361               COUNT                                8
3105362               DATAPRIOR                            8
3105363               TRAINPRIOR                           8
3105364               DECPRIOR                             8
3105365               DECISION1                            8
3105366               DECISION2                            8
3105367               ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
3105368    
3105369      label    COUNT="Level Counts"
3105370               DATAPRIOR="Data Proportions"
3105371               TRAINPRIOR="Training Proportions"
3105372               DECPRIOR="Decision Priors"
3105373               DECISION1="1"
3105374               DECISION2="0"
3105375               ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
3105376      format   COUNT 10.
3105377               ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
3105378    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
3105378  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
3105379    output;
MPRINT(EM_DECIDECODE):   output;
3105380    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
3105380  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
3105381    output;
MPRINT(EM_DECIDECODE):   output;
3105382    ;
MPRINT(EM_DECIDECODE):   ;
3105383    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3105384    proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
3105385    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
3105386    label DECISION1= '1';
3105387    label DECISION2= '0';
3105388    run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
3105389    quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

3105390    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
3105391    * SVM3 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM3 Generate decision score code;
3105392    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
3105393    run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM3_OUTEST 
infit=EMWS8.SVM3_SVMFITSTAT inclass=EMWS8.SVM3_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=28. April 2016 11.16 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM3_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 45 variables.
3105394    %em_copyfile(infref=#LN23596, outfref=#LN23595, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN23595 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN23596",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN23595 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=28. April 2016 11.16 Uhr

NOTE: 112 records were written to the file #LN23595.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
3105395    %em_copyfile(infref=#LN23598, outfref=#LN23597, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN23597 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN23598",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
The SAS System

MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN23597 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=8801,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=28. April 2016 11.16 Uhr

NOTE: 65 records were written to the file #LN23597.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 42 observations read from the data set EMWS8.SVM3_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 42 observations and 9 variables.
3105396    %em_copyfile(infref=#LN23600, outfref=#LN23599, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN23599 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN23600",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN23599 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12171,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=28. April 2016 11.16 Uhr

NOTE: 98 records were written to the file #LN23599.
      The minimum record length was 1.
      The maximum record length was 151.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=18494,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=28. April 2016 11.16 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM3\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 11.16 Uhr,
      Create Time=26. April 2016 19.42 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM3_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM3_SVMFITSTAT.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM3_SVMFITDS out =EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM3_SVMFITDS.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM3_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM3_SVMFITDS.
NOTE: The data set EMWS8.SVM3_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM3_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM3_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM3_TRAIN EMWS8.SVM3_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM3_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: The data set EMWS8.SVM3_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM3_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: The data set EMWS8.SVM3_OUTALPHA has 229 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM3_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      -7796967:***   
NOTE: There were 229 observations read from the data set EMWS8.SVM3_OUTALPHA.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be 
      shifted by the "BEST" format.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM3_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM3_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM3_TUNINGCRIT.
NOTE: The data set EMWS8.SVM3_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3105397    
3105398    *------------------------------------------------------------*;
3105399    * End TRAIN: SVM3;
3105400    *------------------------------------------------------------*;

3105401    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3105402    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3105403    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3105404    ;
MPRINT(EM_DIAGRAM):   ;
3105405    ;
MPRINT(EM_DIAGRAM):   ;
3105406    ;
MPRINT(EM_DIAGRAM):   ;
3105407    ;
MPRINT(EM_DIAGRAM):   ;
3105408    quit;
MPRINT(EM_DIAGRAM):   quit;
3105409    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3105410    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3105411    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3105412    /*; *"; *'; */
3105413    ;
MPRINT(EM_DIAGRAM):   ;
3105414    run;
MPRINT(EM_DIAGRAM):   run;
3105415    quit;
MPRINT(EM_DIAGRAM):   quit;
3105416    /* Reset EM Options */
3105417    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3105418    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3105419    goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
