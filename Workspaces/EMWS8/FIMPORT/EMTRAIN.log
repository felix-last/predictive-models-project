MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H31m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                11 de Abril de 2016
Time:                13H31m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1IXASRQ "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1IXASRQ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H31m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Paul Englert";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H31m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Paul Englert";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20690      proc freq data=EMWS8.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.FIMPORT_VariableSet noprint;
20691      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
20692      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.31 seconds
      cpu time            0.01 seconds
      

20693      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
20694      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20695      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20696      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20697      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20698      run;

NOTE: There were 7 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.42 seconds
      cpu time            0.00 seconds
      

20699      title10;
MPRINT(EM_DIAGRAM):   title10;
20700      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21055      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21056      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21057      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21058      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21059      %let EMEXCEPTIONSTRING=;
21060      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21061      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21062      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21063      %let EM_ACTION = TRAIN;
21064      %let syscc = 0;
21065      /* Fimport.source */
21066      %macro main;
21067            %if %upcase(&EM_ACTION) = CREATE %then %do;
21068               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21069               %include temp;
21070               filename temp;
21071               %create;
21072            %end;
21073            %else
21074            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21075               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21076               %include temp;
21077               filename temp;
21078               %train;
21079            %end;
21080            %else
21081            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21082               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21083               %include temp;
21084               filename temp;
21085               %update;
21086            %end;
21087            %else
21088            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21089               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21090               %include temp;
21091               filename temp;
21092               %property;
21093            %end;
21094             %else
21095            %if %upcase(&EM_ACTION) = SCORE %then %do;
21096               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21097               %include temp;
21098               filename temp;
21099               %score;
21100            %end;
21101            %else
21102            %if %upcase(&EM_ACTION) = REPORT %then %do;
21103               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21104               %include temp;
21105               filename temp;
21106               %report;
21107            %end;
21108            %else
21109            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21110               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21111               %include temp;
21112               filename temp;
21113               %openvariableset;
21114            %end;
21115            %else
21116            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21117               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21118               %include temp;
21119               filename temp;
21120               %closevariableset;
21121            %end;
21122      %mend main;
21123      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21124     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21125     +%macro appendExt;
21126     +   data _null_;
21127     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21128     +      rfile = reverse(tempuif);
21129     +      period = indexc(rfile,".");
21130     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21131     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21132     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21133     +   run;
21134     +%mend appendExt;
21136     +%macro getNobs(ds);
21137     + %global dset nobs;
21138     + %let dset=&ds;
21139     + %let dsid = %sysfunc(open(&dset));
21140     + %if &dsid %then %do;
21141     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21142     +      %let rc = %sysfunc(close(&dsid));
21143     +   %end;
21144     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21145     +%mend getNobs;
21146     +%macro keepordrop;
21147     +  proc contents data=work.importfile noprint
21148     +  out=work.importattrs;
21149     +  run;
21150     +  %getNobs(work.importattrs);
21151     +  data _null_;
21152     +    set  work.importattrs;
21153     +    call symput("varname"||left(_n_),name);
21154     +  run;
21156     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21157     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21158     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21159     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21160     +     %put diff=&diff;
21161     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21162     +         %let kORd = keep;
21163     +             %let start=1;
21164     +             %let end = &EM_PROPERTY_MAXCOLS;
21165     +       %end;
21166     +     %else %do;
21167     +         %let kORd = drop;
21168     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21169     +             %let end = &nobs;
21170     +       %end;
21171     +     data &em_user_data;
21172     +        set &em_user_data;
21173     +        &kORd
21174     +        %do i = &start %to &end;
21175     +            &&varname&i
21176     +         %end;
21177     +        ;
21178     +     run;
21179     +%end;
21180     +%mend keepordrop;
21181     +%macro dropformatvars;
21182     +   %put fmtcnt=&fmtcnt;
21183     +   data new;
21184     +     set work.importfile;
21185     +     %do i = 1 %to &fmtcnt;
21186     +       x1zy&i =put(&&varname&i,&&fmt&i);
21187     +     %end;
21188     +   run;
21189     +   data new;
21190     +     set new;
21191     +     drop
21192     +     %do i = 1 %to &fmtcnt;
21193     +     &&varname&i
21194     +     %end;
21195     +     ;
21196     +   run;
21197     +   proc datasets library=work nolist;
21198     +     modify new;
21199     +     %do i = 1 %to &fmtcnt;
21200     +     rename x1zy&i=&&varname&i;
21201     +     %end;
21202     +   run; quit;
21203     +   data work.importfile;
21204     +     set new;
21205     +   run;
21206     +%mend;
21207     +%macro train;
21208     +   %em_getname(key=DATA,           type=DATA);
21209     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21210     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21211     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21213     +   %appendExt;
21214     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21215     +      proc import table=%trim(&EM_PROPERTY_ACCESSTABLE)
21216     +      out=work.importfile
21217     +      dbms = ACCESS
21218     +      replace;
21219     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21220     +      database="%trim(&EM_USER_USERIMPORTFILE)";
21221     +      %end;
21222     +      %else %do;
21223     +      database="%trim(&EM_PROPERTY_IFILENAME)";
21224     +      %end;
21225     +   %end;
21226     +   %else %do;
21227     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21228     +      proc import datafile="&EM_USER_USERIMPORTFILE"
21229     +      %end;
21230     +      %else %do;
21231     +      proc import datafile="%trim(&EM_PROPERTY_IFILENAME)"
21232     +      %end;
21233     +         out=work.importfile
21235     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21236     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21237     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21238     +         dbms=&EM_PROPERTY_FILETYPE
21239     +      %end;
21240     +      %else %do;
21241     +         dbms=TAB
21242     +      %end;
21243     +      /* Work around for the following defects:S0560899 and S0560009.   */
21244     +      %let sasEnv=%sysfunc(getlocenv());
21245     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21246     +         dbms=EXCEL
21247     +      %end;
21249     +      replace;
21250     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21251     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21252     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21253     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21254     +            getnames=&EM_PROPERTY_NAMEROW;
21255     +        %end;
21256     +      %end;
21257     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21258     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21259     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21260     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21261     +               delimiter=" ";
21262     +            %end;
21263     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21264     +               /* Do not specifiy a delimiter */
21265     +            %end;
21266     +            %else %do;
21267     +               delimiter="&EM_PROPERTY_DELIMITER";
21268     +            %end;
21269     +         %end;
21270     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21271     +            datarow=&EM_PROPERTY_SKIPROWS;
21272     +            /* Guessingrows must be >= skiprows */
21273     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21274     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21275     +            %end;
21276     +         %end;
21277     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21278     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21279     +         %end;
21280     +       %end;
21281     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21282     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21283     +            FMTLIB = work.formats;
21284     +      %end;
21285     +   %end;
21286     +   run;
21287     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21288     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21289     +      %global fmtcnt;
21290     +      %let fmtcnt=0;
21291     +      proc contents data=work.importfile out=work.impattrs noprint;
21292     +      run;
21293     +      data _null_;
21294     +        set work.impattrs;
21295     +        if _n_=1 then i=0;
21296     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21297     +           i = i+1;
21298     +           varname = substr(name, 1, length(name));
21299     +           call symput("fmt"||left(i), trim(format)||".");
21300     +           call symput("varname"||left(i), varname);
21301     +           call symput("fmtcnt",left(i));
21302     +      end;
21303     +      retain i;
21304     +     run;
21305     +    %if &fmtcnt > 0 %then %do;
21306     +       %dropformatvars;
21307     +    %end;
21308     +    proc datasets lib=work memtype=data nolist;
21309     +        modify importfile;
21310     +        attrib _all_ format=;
21311     +    run;
21312     +    quit;
21313     +   %end;
21315     +   %let _fimportObs  = 0;
21316     +   %let _fimportVars = 0;
21317     +   %if %sysfunc(exist(work.importFile)) %then %do;
21318     +       %let dsid = %sysfunc(open(work.importFile));
21319     +       %if &dsid %then %do;
21320     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21321     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21322     +       %let dsid = %sysfunc(close(&dsid));
21323     +       %end;
21324     +   %end;
21326     +   %if ^&_fimportObs %then %do;
21327     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21328     +       %goto endtrain;
21329     +   %end;
21330     +   %if ^&_fimportVars %then %do;
21331     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21332     +       %goto endtrain;
21333     +   %end;
21335     +   data &em_user_data;
21336     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21337     +   run;
21338     +   %keepordrop;
21340     +   %em_getname(key=EMSTAT,     type=DATA);
21342     +   proc datasets lib=&em_lib nolist;
21343     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21344     +   run;
21346     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21347     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21348     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21349     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21350     +            maxClassLevels=20, identifyEmptyColumns=Y,
21351     +            outdata=&em_user_EMCMETADEFAULT,
21352     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21354     +        data &em_user_emcmetadefault;
21355     +           set &em_user_emcmetadefault;
21356     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21357     +        run;
21359     +        data &em_data_eminfo;
21360     +           length TARGET KEY $32  DATA $43;
21361     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21362     +        run;
21364     +   %end;
21365     +   %else %do;
21366     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21367     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21368     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21369     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21371     +            %if "&em_property_summarize" eq "Y" %then %do;
21372     +                %em_getname(key=EMSTAT,  type=DATA);
21373     +                data &em_data_eminfo;
21374     +                   length TARGET KEY $32  DATA $43;
21375     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21376     +                run;
21377     +            %end;
21378     +   %end;
21380     +   data &em_user_EMCMETADEFAULT;
21381     +      set &em_user_EMCMETADEFAULT;
21382     +      length DROP $1;
21383     +      DROP='N';
21384     +   run;
21386     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
21388     +   data _temp;
21389     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
21390     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
21391     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
21392     +      COLUMNMETAMODTIME=MODTIME;
21393     +   run;
21394     +   proc sort data=&em_data_importset;
21395     +      by PORT;
21396     +   run;
21397     +   data &em_data_importset;
21398     +      merge &em_data_importset _temp;
21399     +      by PORT;
21400     +      if PORT='DATA' then ROLE="&em_property_role";
21401     +   run;
21403     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21405     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21406     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
21407     +            filename x "&em_user_variablesetdelta";
21408     +            data &em_data_variableset;
21409     +               set &em_user_emcmetadefault;
21410     +               %inc X;
21411     +            run;
21412     +            filename x;
21413     +        %end;
21414     +        %else %do;
21415     +            data &em_data_variableset;
21416     +               set &em_user_emcmetadefault;
21417     +            run;
21418     +        %end;
21419     +    %end;
21421     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21422     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
21423     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
21424     +         id NAME;
21425     +      run;
21427     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
21428     +         data _null_;
21429     +            length string $200;
21430     +            set _DiffMeta end=eof;
21431     +            where _type_='COMPARE';
21432     +            file x1;
21433     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21434     +            put string;
21435     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21436     +            put string;
21437     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21438     +            put string;
21439     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21440     +            put string;
21441     +            put 'end;';
21442     +            if drop='Y' then do;
21443     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
21444     +               put string;
21445     +            end;
21446     +            if eof then
21447     +               put 'drop DROP;';
21448     +         run;
21450     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
21451     +         filename x2 "&em_user_deltacode";
21452     +         %em_copyfile(infref=x1, outfref=x2);
21453     +         filename x1;
21454     +         filename x2;
21456     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21457     +         filename x "&em_user_variablesetdelta";
21458     +         data _null_;
21459     +            length string $200;
21460     +            set _DiffMeta end=eof;
21461     +            where _type_='COMPARE';
21462     +            file x;
21463     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21464     +            put string;
21465     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21466     +            put string;
21467     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21468     +            put string;
21469     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21470     +            put string;
21471     +            string = '   DROP="'!!strip(DROP)!!'";';
21472     +            put string;
21473     +            put 'end;';
21474     +         run;
21475     +         filename x;
21476     +       proc datasets lib=work nolist;
21477     +          delete _DiffMeta;
21478     +       run;
21480     +       data &em_data_exportset;
21481     +          set &em_data_exportset;
21482     +          if NODEPORT='TRAIN' then do;
21483     +             ROLE="&em_property_role";
21484     +             COLUMNMETAMODTIME=datetime();
21485     +             MODTIME=datetime();
21486     +             DATASET="&em_nodeid._train";
21487     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
21488     +             DELTACODE="CDelta_TRAIN";
21489     +             APPLYDELTA='Y';
21490     +             EXPORT='Y';
21491     +             NEEDUPDATE='Y';
21493     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
21494     +                EMINFO="&em_data_eminfo";
21495     +                EMINFOMODTIME=datetime();
21496     +            %end;
21497     +            %else %do;
21498     +                EMINFO='';
21499     +                EMINFOMODTIME=.;
21500     +            %end;
21501     +          end;
21502     +       run;
21503     +   %end;
21505     +  proc contents data=&em_user_data;
21506     +  run;
21507     +  proc datasets library=work nolist;
21508     +   delete importfile importattrs new;
21509     +   quit;
21510     +  run;
21512     +  %endtrain:
21513     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
filetype=*xlsx*
delimiter=*,*
MPRINT(TRAIN):   proc import datafile="C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.xlsx   " out=work.importfile dbms=xlsx replace;
MPRINT(TRAIN):   RXLX;
MPRINT(TRAIN):   run;

NOTE: The import data set has 3500 observations and 34 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           1.33 seconds
      cpu time            0.76 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 3500 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS8.FIMPORT_DATA has 3500 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      32:29   
NOTE: There were 34 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

nobs=34  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS8.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting EMWS8.FIMPORT_EMINFO (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

21514      %let SYSCC = 0;
21515      options validvarname=any;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
21516      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21517      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21518      options validvarname=V7;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
21519      %let _dsidTable = 0;
21520      %let _engineTable =;
21521      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
21522      dsid = open('EMWS8.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.FIMPORT_DATA');
21523      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
21524      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
21525      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
21526      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
21527      end;
MPRINT(EMADVISECOLUMNS):   end;
21528      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21529      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
21530      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
21531      set EMWS8.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS8.FIMPORT_DATA;
21532      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
21533      output;
MPRINT(EMADVISECOLUMNS):   output;
21534      stop;
MPRINT(EMADVISECOLUMNS):   stop;
21535      end;
MPRINT(EMADVISECOLUMNS):   end;
21536      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21537      proc contents data=EMWS8.FIMPORT_DATA
21538      out=WORK.M1HU5199 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.FIMPORT_DATA out=WORK.M1HU5199 noprint;
21539      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M1HU5199 has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21540      data WORK.M1HU5199;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HU5199;
21541      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
21542      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
21543      set WORK.M1HU5199(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M1HU5199(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
21544      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
21545      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
21546      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
21547      if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21548      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21549      end;
MPRINT(EMADVISECOLUMNS):   end;
21550      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
21551      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
21552      if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21553      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21554      end;
MPRINT(EMADVISECOLUMNS):   end;
21555      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
21556      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
21557      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
21558      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
21559      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
21560      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M1HU5199.
NOTE: The data set WORK.M1HU5199 has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21561      data WORK.M1HU5199;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HU5199;
21562      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
21563      set WORK.M1HU5199;
MPRINT(EMADVISECOLUMNS):   set WORK.M1HU5199;
21564      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
21565      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M1HU5199.
NOTE: The data set WORK.M1HU5199 has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1UZSKCH NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
21569      data WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UZSKCH;
21570      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
21571      set WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UZSKCH;
21572      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M1UZSKCH.
NOTE: The data set WORK.M1UZSKCH has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M27X8XH9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UZSKCH;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.48 seconds
      cpu time            0.15 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.FIMPORT_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET="";
MPRINT(TRAIN):   KEY="STATS";
MPRINT(TRAIN):   DATA="EMWS8.FIMPORT_EMSTAT";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;

NOTE: The data set EMWS8.FIMPORT_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_EMCMETADEFAULT has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

21790      %let SYSCC = 0;
21791      data EMWS8.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS8.FIMPORT_EMTMETADEFAULT;
21792      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
21793      LIBNAME = "EMWS8";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS8";
21794      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS8.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21795      options validvarname=any;
MPRINT(EMADVISETABLE):    options validvarname=any;
21796      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21797      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21798      options validvarname=V7;
MPRINT(EMADVISETABLE):   options validvarname=V7;
MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS8.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M2Z1_61H;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M2Z1_61H(obs=1);
MPRINT(EMADVISETABLE):   nobs = 3500;
MPRINT(EMADVISETABLE):   ncols = 34;
MPRINT(EMADVISETABLE):   nbytes = 967680;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1776000668.213;
MPRINT(EMADVISETABLE):   modate = 1776000668.213;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.38 seconds
      cpu time            0.12 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS8.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS8.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt.
21827     +if NAME="AcceptedCmp1" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp1" then do;
21828     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21829     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21830     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21831     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21832     +end;
MPRINT(TRAIN):   end;
21833     +if NAME="AcceptedCmp2" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp2" then do;
21834     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21835     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21836     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21837     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21838     +end;
MPRINT(TRAIN):   end;
21839     +if NAME="AcceptedCmp3" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp3" then do;
21840     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21841     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21842     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21843     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21844     +end;
MPRINT(TRAIN):   end;
21845     +if NAME="AcceptedCmp4" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp4" then do;
21846     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21847     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21848     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21849     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21850     +end;
MPRINT(TRAIN):   end;
21851     +if NAME="AcceptedCmp5" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp5" then do;
21852     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21853     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21854     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21855     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21856     +end;
MPRINT(TRAIN):   end;
21857     +if NAME="Complain" then do;
MPRINT(TRAIN):   if NAME="Complain" then do;
21858     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21859     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21860     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21861     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21862     +end;
MPRINT(TRAIN):   end;
21863     +if NAME="Custid" then do;
MPRINT(TRAIN):   if NAME="Custid" then do;
21864     +ROLE="ID";
MPRINT(TRAIN):   ROLE="ID";
21865     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21866     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21867     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21868     +end;
MPRINT(TRAIN):   end;
21869     +if NAME="DepVar" then do;
MPRINT(TRAIN):   if NAME="DepVar" then do;
21870     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
21871     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21872     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21873     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21874     +end;
MPRINT(TRAIN):   end;
21875     +if NAME="Dt_Customer" then do;
MPRINT(TRAIN):   if NAME="Dt_Customer" then do;
21876     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21877     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21878     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21879     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21880     +end;
MPRINT(TRAIN):   end;
21881     +if NAME="Element1" then do;
MPRINT(TRAIN):   if NAME="Element1" then do;
21882     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21883     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21884     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21885     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21886     +end;
MPRINT(TRAIN):   end;
21887     +if NAME="Element2" then do;
MPRINT(TRAIN):   if NAME="Element2" then do;
21888     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21889     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21890     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21891     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21892     +end;
MPRINT(TRAIN):   end;
21893     +if NAME="Element3" then do;
MPRINT(TRAIN):   if NAME="Element3" then do;
21894     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21895     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21896     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21897     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21898     +end;
MPRINT(TRAIN):   end;
21899     +if NAME="Element4" then do;
MPRINT(TRAIN):   if NAME="Element4" then do;
21900     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21901     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21902     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21903     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21904     +end;
MPRINT(TRAIN):   end;
21905     +if NAME="Group" then do;
MPRINT(TRAIN):   if NAME="Group" then do;
21906     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21907     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21908     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21909     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21910     +end;
MPRINT(TRAIN):   end;
21911     +if NAME="Z_CostContact" then do;
MPRINT(TRAIN):   if NAME="Z_CostContact" then do;
21912     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21913     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21914     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21915     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21916     +end;
MPRINT(TRAIN):   end;
21917     +if NAME="Z_Revenue" then do;
MPRINT(TRAIN):   if NAME="Z_Revenue" then do;
21918     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21919     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21920     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21921     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21922     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_VARIABLESET has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS8.FIMPORT_VariableSet base=EMWS8.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 32 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=11 de Abril de 2016 13H31m,
      Create Time=03 de Abril de 2016 17H26m

NOTE: 81 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11 de Abril de 2016 13H31m,
      Create Time=03 de Abril de 2016 17H26m

NOTE: 81 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=11 de Abril de 2016 13H31m,
      Create Time=03 de Abril de 2016 17H26m

NOTE: 96 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   run;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21923      *------------------------------------------------------------*;
21924      * End TRAIN: FIMPORT;
21925      *------------------------------------------------------------*;

21926      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21927      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
21928      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21929      ;
MPRINT(EM_DIAGRAM):   ;
21930      ;
MPRINT(EM_DIAGRAM):   ;
21931      ;
MPRINT(EM_DIAGRAM):   ;
21932      ;
MPRINT(EM_DIAGRAM):   ;
21933      quit;
MPRINT(EM_DIAGRAM):   quit;
21934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21935      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
21936      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21937      /*; *"; *'; */
21938      ;
MPRINT(EM_DIAGRAM):   ;
21939      run;
MPRINT(EM_DIAGRAM):   run;
21940      quit;
MPRINT(EM_DIAGRAM):   quit;
21941      /* Reset EM Options */
21942      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
21943      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
21944      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
