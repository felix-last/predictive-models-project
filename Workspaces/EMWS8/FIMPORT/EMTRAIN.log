MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                03. April 2016
Time:                16.19 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QLQUE0 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QLQUE0 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20693      proc freq data=EMWS8.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.FIMPORT_VariableSet noprint;
20694      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
20695      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

20696      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
20697      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20698      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20699      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20700      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20701      run;

NOTE: There were 7 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

20702      title10;
MPRINT(EM_DIAGRAM):   title10;
20703      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21061      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21062      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21063      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21064      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21065      %let EMEXCEPTIONSTRING=;
21066      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21067      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21068      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21069      %let EM_ACTION = TRAIN;
21070      %let syscc = 0;
21071      /* Fimport.source */
21072      %macro main;
21073            %if %upcase(&EM_ACTION) = CREATE %then %do;
21074               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21075               %include temp;
21076               filename temp;
21077               %create;
21078            %end;
21079            %else
21080            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21081               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21082               %include temp;
21083               filename temp;
21084               %train;
21085            %end;
21086            %else
21087            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21088               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21089               %include temp;
21090               filename temp;
21091               %update;
21092            %end;
21093            %else
21094            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21095               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21096               %include temp;
21097               filename temp;
21098               %property;
21099            %end;
21100             %else
21101            %if %upcase(&EM_ACTION) = SCORE %then %do;
21102               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21103               %include temp;
21104               filename temp;
21105               %score;
21106            %end;
21107            %else
21108            %if %upcase(&EM_ACTION) = REPORT %then %do;
21109               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21110               %include temp;
21111               filename temp;
21112               %report;
21113            %end;
21114            %else
21115            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21116               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21117               %include temp;
21118               filename temp;
21119               %openvariableset;
21120            %end;
21121            %else
21122            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21123               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21124               %include temp;
21125               filename temp;
21126               %closevariableset;
21127            %end;
21128      %mend main;
21129      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21130     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21131     +%macro appendExt;
21132     +   data _null_;
21133     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21134     +      rfile = reverse(tempuif);
21135     +      period = indexc(rfile,".");
21136     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21137     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21138     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21139     +   run;
21140     +%mend appendExt;
21142     +%macro getNobs(ds);
21143     + %global dset nobs;
21144     + %let dset=&ds;
21145     + %let dsid = %sysfunc(open(&dset));
21146     + %if &dsid %then %do;
21147     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21148     +      %let rc = %sysfunc(close(&dsid));
21149     +   %end;
21150     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21151     +%mend getNobs;
21152     +%macro keepordrop;
21153     +  proc contents data=work.importfile noprint
21154     +  out=work.importattrs;
21155     +  run;
21156     +  %getNobs(work.importattrs);
21157     +  data _null_;
21158     +    set  work.importattrs;
21159     +    call symput("varname"||left(_n_),name);
21160     +  run;
21162     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21163     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21164     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21165     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21166     +     %put diff=&diff;
21167     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21168     +         %let kORd = keep;
21169     +             %let start=1;
21170     +             %let end = &EM_PROPERTY_MAXCOLS;
21171     +       %end;
21172     +     %else %do;
21173     +         %let kORd = drop;
21174     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21175     +             %let end = &nobs;
21176     +       %end;
21177     +     data &em_user_data;
21178     +        set &em_user_data;
21179     +        &kORd
21180     +        %do i = &start %to &end;
21181     +            &&varname&i
21182     +         %end;
21183     +        ;
21184     +     run;
21185     +%end;
21186     +%mend keepordrop;
21187     +%macro dropformatvars;
21188     +   %put fmtcnt=&fmtcnt;
21189     +   data new;
21190     +     set work.importfile;
21191     +     %do i = 1 %to &fmtcnt;
21192     +       x1zy&i =put(&&varname&i,&&fmt&i);
21193     +     %end;
21194     +   run;
21195     +   data new;
21196     +     set new;
21197     +     drop
21198     +     %do i = 1 %to &fmtcnt;
21199     +     &&varname&i
21200     +     %end;
21201     +     ;
21202     +   run;
21203     +   proc datasets library=work nolist;
21204     +     modify new;
21205     +     %do i = 1 %to &fmtcnt;
21206     +     rename x1zy&i=&&varname&i;
21207     +     %end;
21208     +   run; quit;
21209     +   data work.importfile;
21210     +     set new;
21211     +   run;
21212     +%mend;
21213     +%macro train;
21214     +   %em_getname(key=DATA,           type=DATA);
21215     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21216     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21217     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21219     +   %appendExt;
21220     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21221     +      proc import table=%trim(&EM_PROPERTY_ACCESSTABLE)
21222     +      out=work.importfile
21223     +      dbms = ACCESS
21224     +      replace;
21225     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21226     +      database="%trim(&EM_USER_USERIMPORTFILE)";
21227     +      %end;
21228     +      %else %do;
21229     +      database="%trim(&EM_PROPERTY_IFILENAME)";
21230     +      %end;
21231     +   %end;
21232     +   %else %do;
21233     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21234     +      proc import datafile="&EM_USER_USERIMPORTFILE"
21235     +      %end;
21236     +      %else %do;
21237     +      proc import datafile="%trim(&EM_PROPERTY_IFILENAME)"
21238     +      %end;
21239     +         out=work.importfile
21241     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21242     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21243     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21244     +         dbms=&EM_PROPERTY_FILETYPE
21245     +      %end;
21246     +      %else %do;
21247     +         dbms=TAB
21248     +      %end;
21249     +      /* Work around for the following defects:S0560899 and S0560009.   */
21250     +      %let sasEnv=%sysfunc(getlocenv());
21251     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21252     +         dbms=EXCEL
21253     +      %end;
21255     +      replace;
21256     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21257     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21258     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21259     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21260     +            getnames=&EM_PROPERTY_NAMEROW;
21261     +        %end;
21262     +      %end;
21263     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21264     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21265     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21266     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21267     +               delimiter=" ";
21268     +            %end;
21269     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21270     +               /* Do not specifiy a delimiter */
21271     +            %end;
21272     +            %else %do;
21273     +               delimiter="&EM_PROPERTY_DELIMITER";
21274     +            %end;
21275     +         %end;
21276     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21277     +            datarow=&EM_PROPERTY_SKIPROWS;
21278     +            /* Guessingrows must be >= skiprows */
21279     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21280     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21281     +            %end;
21282     +         %end;
21283     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21284     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21285     +         %end;
21286     +       %end;
21287     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21288     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21289     +            FMTLIB = work.formats;
21290     +      %end;
21291     +   %end;
21292     +   run;
21293     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21294     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21295     +      %global fmtcnt;
21296     +      %let fmtcnt=0;
21297     +      proc contents data=work.importfile out=work.impattrs noprint;
21298     +      run;
21299     +      data _null_;
21300     +        set work.impattrs;
21301     +        if _n_=1 then i=0;
21302     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21303     +           i = i+1;
21304     +           varname = substr(name, 1, length(name));
21305     +           call symput("fmt"||left(i), trim(format)||".");
21306     +           call symput("varname"||left(i), varname);
21307     +           call symput("fmtcnt",left(i));
21308     +      end;
21309     +      retain i;
21310     +     run;
21311     +    %if &fmtcnt > 0 %then %do;
21312     +       %dropformatvars;
21313     +    %end;
21314     +    proc datasets lib=work memtype=data nolist;
21315     +        modify importfile;
21316     +        attrib _all_ format=;
21317     +    run;
21318     +    quit;
21319     +   %end;
21321     +   %let _fimportObs  = 0;
21322     +   %let _fimportVars = 0;
21323     +   %if %sysfunc(exist(work.importFile)) %then %do;
21324     +       %let dsid = %sysfunc(open(work.importFile));
21325     +       %if &dsid %then %do;
21326     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21327     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21328     +       %let dsid = %sysfunc(close(&dsid));
21329     +       %end;
21330     +   %end;
21332     +   %if ^&_fimportObs %then %do;
21333     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21334     +       %goto endtrain;
21335     +   %end;
21336     +   %if ^&_fimportVars %then %do;
21337     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21338     +       %goto endtrain;
21339     +   %end;
21341     +   data &em_user_data;
21342     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21343     +   run;
21344     +   %keepordrop;
21346     +   %em_getname(key=EMSTAT,     type=DATA);
21348     +   proc datasets lib=&em_lib nolist;
21349     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21350     +   run;
21352     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21353     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21354     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21355     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21356     +            maxClassLevels=20, identifyEmptyColumns=Y,
21357     +            outdata=&em_user_EMCMETADEFAULT,
21358     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21360     +        data &em_user_emcmetadefault;
21361     +           set &em_user_emcmetadefault;
21362     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21363     +        run;
21365     +        data &em_data_eminfo;
21366     +           length TARGET KEY $32  DATA $43;
21367     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21368     +        run;
21370     +   %end;
21371     +   %else %do;
21372     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21373     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21374     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21375     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21377     +            %if "&em_property_summarize" eq "Y" %then %do;
21378     +                %em_getname(key=EMSTAT,  type=DATA);
21379     +                data &em_data_eminfo;
21380     +                   length TARGET KEY $32  DATA $43;
21381     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21382     +                run;
21383     +            %end;
21384     +   %end;
21386     +   data &em_user_EMCMETADEFAULT;
21387     +      set &em_user_EMCMETADEFAULT;
21388     +      length DROP $1;
21389     +      DROP='N';
21390     +   run;
21392     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
21394     +   data _temp;
21395     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
21396     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
21397     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
21398     +      COLUMNMETAMODTIME=MODTIME;
21399     +   run;
21400     +   proc sort data=&em_data_importset;
21401     +      by PORT;
21402     +   run;
21403     +   data &em_data_importset;
21404     +      merge &em_data_importset _temp;
21405     +      by PORT;
21406     +      if PORT='DATA' then ROLE="&em_property_role";
21407     +   run;
21409     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21411     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21412     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
21413     +            filename x "&em_user_variablesetdelta";
21414     +            data &em_data_variableset;
21415     +               set &em_user_emcmetadefault;
21416     +               %inc X;
21417     +            run;
21418     +            filename x;
21419     +        %end;
21420     +        %else %do;
21421     +            data &em_data_variableset;
21422     +               set &em_user_emcmetadefault;
21423     +            run;
21424     +        %end;
21425     +    %end;
21427     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21428     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
21429     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
21430     +         id NAME;
21431     +      run;
21433     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
21434     +         data _null_;
21435     +            length string $200;
21436     +            set _DiffMeta end=eof;
21437     +            where _type_='COMPARE';
21438     +            file x1;
21439     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21440     +            put string;
21441     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21442     +            put string;
21443     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21444     +            put string;
21445     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21446     +            put string;
21447     +            put 'end;';
21448     +            if drop='Y' then do;
21449     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
21450     +               put string;
21451     +            end;
21452     +            if eof then
21453     +               put 'drop DROP;';
21454     +         run;
21456     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
21457     +         filename x2 "&em_user_deltacode";
21458     +         %em_copyfile(infref=x1, outfref=x2);
21459     +         filename x1;
21460     +         filename x2;
21462     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21463     +         filename x "&em_user_variablesetdelta";
21464     +         data _null_;
21465     +            length string $200;
21466     +            set _DiffMeta end=eof;
21467     +            where _type_='COMPARE';
21468     +            file x;
21469     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21470     +            put string;
21471     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21472     +            put string;
21473     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21474     +            put string;
21475     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21476     +            put string;
21477     +            string = '   DROP="'!!strip(DROP)!!'";';
21478     +            put string;
21479     +            put 'end;';
21480     +         run;
21481     +         filename x;
21482     +       proc datasets lib=work nolist;
21483     +          delete _DiffMeta;
21484     +       run;
21486     +       data &em_data_exportset;
21487     +          set &em_data_exportset;
21488     +          if NODEPORT='TRAIN' then do;
21489     +             ROLE="&em_property_role";
21490     +             COLUMNMETAMODTIME=datetime();
21491     +             MODTIME=datetime();
21492     +             DATASET="&em_nodeid._train";
21493     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
21494     +             DELTACODE="CDelta_TRAIN";
21495     +             APPLYDELTA='Y';
21496     +             EXPORT='Y';
21497     +             NEEDUPDATE='Y';
21499     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
21500     +                EMINFO="&em_data_eminfo";
21501     +                EMINFOMODTIME=datetime();
21502     +            %end;
21503     +            %else %do;
21504     +                EMINFO='';
21505     +                EMINFOMODTIME=.;
21506     +            %end;
21507     +          end;
21508     +       run;
21509     +   %end;
21511     +  proc contents data=&em_user_data;
21512     +  run;
21513     +  proc datasets library=work nolist;
21514     +   delete importfile importattrs new;
21515     +   quit;
21516     +  run;
21518     +  %endtrain:
21519     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
filetype=*xlsx*
delimiter=*,*
MPRINT(TRAIN):   proc import datafile="C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.xlsx   " out=work.importfile dbms=xlsx replace;
MPRINT(TRAIN):   RXLX;
MPRINT(TRAIN):   run;

NOTE: The import data set has 3500 observations and 34 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.71 seconds
      cpu time            0.70 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 3500 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS8.FIMPORT_DATA has 3500 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      32:29   
NOTE: There were 34 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=34  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS8.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting EMWS8.FIMPORT_EMINFO (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

21520      %let SYSCC = 0;
21521      options validvarname=any;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
21522      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21523      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21524      options validvarname=V7;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
21525      %let _dsidTable = 0;
21526      %let _engineTable =;
21527      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
21528      dsid = open('EMWS8.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.FIMPORT_DATA');
21529      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
21530      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
21531      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
21532      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
21533      end;
MPRINT(EMADVISECOLUMNS):   end;
21534      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21535      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
21536      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
21537      set EMWS8.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS8.FIMPORT_DATA;
21538      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
21539      output;
MPRINT(EMADVISECOLUMNS):   output;
21540      stop;
MPRINT(EMADVISECOLUMNS):   stop;
21541      end;
MPRINT(EMADVISECOLUMNS):   end;
21542      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21543      proc contents data=EMWS8.FIMPORT_DATA
21544      out=WORK.M1QBR8P7 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.FIMPORT_DATA out=WORK.M1QBR8P7 noprint;
21545      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M1QBR8P7 has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21546      data WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBR8P7;
21547      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
21548      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
21549      set WORK.M1QBR8P7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBR8P7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
21550      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
21551      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
21552      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
21553      if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21554      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21555      end;
MPRINT(EMADVISECOLUMNS):   end;
21556      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
21557      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
21558      if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21559      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21560      end;
MPRINT(EMADVISECOLUMNS):   end;
21561      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
21562      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
21563      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
21564      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
21565      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
21566      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M1QBR8P7.
NOTE: The data set WORK.M1QBR8P7 has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21567      data WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBR8P7;
21568      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
21569      set WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBR8P7;
21570      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
21571      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M1QBR8P7.
NOTE: The data set WORK.M1QBR8P7 has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0QCOBOX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
21575      data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
21576      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
21577      set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
21578      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 34 observations read from the data set WORK.M0QCOBOX.
NOTE: The data set WORK.M0QCOBOX has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M276W6JP(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.FIMPORT_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET="";
MPRINT(TRAIN):   KEY="STATS";
MPRINT(TRAIN):   DATA="EMWS8.FIMPORT_EMSTAT";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;

NOTE: The data set EMWS8.FIMPORT_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_EMCMETADEFAULT has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

21796      %let SYSCC = 0;
21797      data EMWS8.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS8.FIMPORT_EMTMETADEFAULT;
21798      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
21799      LIBNAME = "EMWS8";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS8";
21800      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS8.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21801      options validvarname=any;
MPRINT(EMADVISETABLE):    options validvarname=any;
21802      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21803      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21804      options validvarname=V7;
MPRINT(EMADVISETABLE):   options validvarname=V7;
MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS8.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M122DX68;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M122DX68(obs=1);
MPRINT(EMADVISETABLE):   nobs = 3500;
MPRINT(EMADVISETABLE):   ncols = 34;
MPRINT(EMADVISETABLE):   nbytes = 967680;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1775319600.902;
MPRINT(EMADVISETABLE):   modate = 1775319600.902;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS8.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS8.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt.
21833     +if NAME="AcceptedCmp1" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp1" then do;
21834     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21835     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21836     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21837     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21838     +end;
MPRINT(TRAIN):   end;
21839     +if NAME="AcceptedCmp2" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp2" then do;
21840     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21841     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21842     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21843     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21844     +end;
MPRINT(TRAIN):   end;
21845     +if NAME="AcceptedCmp3" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp3" then do;
21846     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21847     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21848     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21849     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21850     +end;
MPRINT(TRAIN):   end;
21851     +if NAME="AcceptedCmp4" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp4" then do;
21852     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21853     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21854     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21855     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21856     +end;
MPRINT(TRAIN):   end;
21857     +if NAME="AcceptedCmp5" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp5" then do;
21858     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21859     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21860     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21861     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21862     +end;
MPRINT(TRAIN):   end;
21863     +if NAME="Complain" then do;
MPRINT(TRAIN):   if NAME="Complain" then do;
21864     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21865     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21866     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21867     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21868     +end;
MPRINT(TRAIN):   end;
21869     +if NAME="Custid" then do;
MPRINT(TRAIN):   if NAME="Custid" then do;
21870     +ROLE="ID";
MPRINT(TRAIN):   ROLE="ID";
21871     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21872     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21873     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21874     +end;
MPRINT(TRAIN):   end;
21875     +if NAME="DepVar" then do;
MPRINT(TRAIN):   if NAME="DepVar" then do;
21876     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
21877     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21878     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21879     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21880     +end;
MPRINT(TRAIN):   end;
21881     +if NAME="Dt_Customer" then do;
MPRINT(TRAIN):   if NAME="Dt_Customer" then do;
21882     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21883     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21884     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21885     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21886     +end;
MPRINT(TRAIN):   end;
21887     +if NAME="Element1" then do;
MPRINT(TRAIN):   if NAME="Element1" then do;
21888     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21889     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21890     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21891     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21892     +end;
MPRINT(TRAIN):   end;
21893     +if NAME="Element2" then do;
MPRINT(TRAIN):   if NAME="Element2" then do;
21894     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21895     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21896     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21897     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21898     +end;
MPRINT(TRAIN):   end;
21899     +if NAME="Element3" then do;
MPRINT(TRAIN):   if NAME="Element3" then do;
21900     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21901     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21902     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21903     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21904     +end;
MPRINT(TRAIN):   end;
21905     +if NAME="Element4" then do;
MPRINT(TRAIN):   if NAME="Element4" then do;
21906     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21907     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21908     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21909     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21910     +end;
MPRINT(TRAIN):   end;
21911     +if NAME="Group" then do;
MPRINT(TRAIN):   if NAME="Group" then do;
21912     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21913     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21914     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21915     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21916     +end;
MPRINT(TRAIN):   end;
21917     +if NAME="Z_CostContact" then do;
MPRINT(TRAIN):   if NAME="Z_CostContact" then do;
21918     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21919     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21920     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21921     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21922     +end;
MPRINT(TRAIN):   end;
21923     +if NAME="Z_Revenue" then do;
MPRINT(TRAIN):   if NAME="Z_Revenue" then do;
21924     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21925     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21926     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21927     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21928     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_VARIABLESET has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS8.FIMPORT_VariableSet base=EMWS8.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 32 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr

NOTE: 81 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr

NOTE: 81 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr

NOTE: 96 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   run;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21929      *------------------------------------------------------------*;
21930      * End TRAIN: FIMPORT;
21931      *------------------------------------------------------------*;

21932      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21933      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
21934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21935      ;
MPRINT(EM_DIAGRAM):   ;
21936      ;
MPRINT(EM_DIAGRAM):   ;
21937      ;
MPRINT(EM_DIAGRAM):   ;
21938      ;
MPRINT(EM_DIAGRAM):   ;
21939      quit;
MPRINT(EM_DIAGRAM):   quit;
21940      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21941      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
21942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21943      /*; *"; *'; */
21944      ;
MPRINT(EM_DIAGRAM):   ;
21945      run;
MPRINT(EM_DIAGRAM):   run;
21946      quit;
MPRINT(EM_DIAGRAM):   quit;
21947      /* Reset EM Options */
21948      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
21949      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
21950      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
