*------------------------------------------------------------*
User:                Lukas Fahr
Date:                03. April 2016
Time:                16.20 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                03. April 2016
Time:                16.19 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QLQUE0 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QLQUE0 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.19 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20693      proc freq data=EMWS8.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.FIMPORT_VariableSet noprint;
20694      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
20695      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
20696      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
20697      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20698      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20699      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20700      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20701      run;
 
NOTE: There were 7 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
20702      title10;
MPRINT(EM_DIAGRAM):   title10;
20703      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21061      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21062      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21063      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21064      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
21065      %let EMEXCEPTIONSTRING=;
21066      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21067      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21068      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21069      %let EM_ACTION = TRAIN;
21070      %let syscc = 0;
21071      /* Fimport.source */
21072      %macro main;
21073            %if %upcase(&EM_ACTION) = CREATE %then %do;
21074               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21075               %include temp;
21076               filename temp;
21077               %create;
21078            %end;
21079            %else
21080            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21081               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21082               %include temp;
21083               filename temp;
21084               %train;
21085            %end;
21086            %else
21087            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21088               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21089               %include temp;
21090               filename temp;
21091               %update;
21092            %end;
21093            %else
21094            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21095               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21096               %include temp;
21097               filename temp;
21098               %property;
21099            %end;
21100             %else
21101            %if %upcase(&EM_ACTION) = SCORE %then %do;
21102               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21103               %include temp;
21104               filename temp;
21105               %score;
21106            %end;
21107            %else
21108            %if %upcase(&EM_ACTION) = REPORT %then %do;
21109               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21110               %include temp;
21111               filename temp;
21112               %report;
21113            %end;
21114            %else
21115            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21116               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21117               %include temp;
21118               filename temp;
21119               %openvariableset;
21120            %end;
21121            %else
21122            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21123               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21124               %include temp;
21125               filename temp;
21126               %closevariableset;
21127            %end;
21128      %mend main;
21129      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21130     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21131     +%macro appendExt;
21132     +   data _null_;
21133     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21134     +      rfile = reverse(tempuif);
21135     +      period = indexc(rfile,".");
21136     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21137     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21138     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21139     +   run;
21140     +%mend appendExt;
21142     +%macro getNobs(ds);
21143     + %global dset nobs;
21144     + %let dset=&ds;
21145     + %let dsid = %sysfunc(open(&dset));
21146     + %if &dsid %then %do;
21147     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21148     +      %let rc = %sysfunc(close(&dsid));
21149     +   %end;
21150     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21151     +%mend getNobs;
21152     +%macro keepordrop;
21153     +  proc contents data=work.importfile noprint
21154     +  out=work.importattrs;
21155     +  run;
21156     +  %getNobs(work.importattrs);
21157     +  data _null_;
21158     +    set  work.importattrs;
21159     +    call symput("varname"||left(_n_),name);
21160     +  run;
21162     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21163     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21164     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21165     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21166     +     %put diff=&diff;
21167     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21168     +         %let kORd = keep;
21169     +             %let start=1;
21170     +             %let end = &EM_PROPERTY_MAXCOLS;
21171     +       %end;
21172     +     %else %do;
21173     +         %let kORd = drop;
21174     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21175     +             %let end = &nobs;
21176     +       %end;
21177     +     data &em_user_data;
21178     +        set &em_user_data;
21179     +        &kORd
21180     +        %do i = &start %to &end;
21181     +            &&varname&i
21182     +         %end;
21183     +        ;
21184     +     run;
21185     +%end;
21186     +%mend keepordrop;
21187     +%macro dropformatvars;
21188     +   %put fmtcnt=&fmtcnt;
21189     +   data new;
21190     +     set work.importfile;
21191     +     %do i = 1 %to &fmtcnt;
21192     +       x1zy&i =put(&&varname&i,&&fmt&i);
21193     +     %end;
21194     +   run;
21195     +   data new;
21196     +     set new;
21197     +     drop
21198     +     %do i = 1 %to &fmtcnt;
21199     +     &&varname&i
21200     +     %end;
21201     +     ;
21202     +   run;
21203     +   proc datasets library=work nolist;
21204     +     modify new;
21205     +     %do i = 1 %to &fmtcnt;
21206     +     rename x1zy&i=&&varname&i;
21207     +     %end;
21208     +   run; quit;
21209     +   data work.importfile;
21210     +     set new;
21211     +   run;
21212     +%mend;
21213     +%macro train;
21214     +   %em_getname(key=DATA,           type=DATA);
21215     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21216     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21217     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21219     +   %appendExt;
21220     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21221     +      proc import table=%trim(&EM_PROPERTY_ACCESSTABLE)
21222     +      out=work.importfile
21223     +      dbms = ACCESS
21224     +      replace;
21225     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21226     +      database="%trim(&EM_USER_USERIMPORTFILE)";
21227     +      %end;
21228     +      %else %do;
21229     +      database="%trim(&EM_PROPERTY_IFILENAME)";
21230     +      %end;
21231     +   %end;
21232     +   %else %do;
21233     +      %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21234     +      proc import datafile="&EM_USER_USERIMPORTFILE"
21235     +      %end;
21236     +      %else %do;
21237     +      proc import datafile="%trim(&EM_PROPERTY_IFILENAME)"
21238     +      %end;
21239     +         out=work.importfile
21241     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21242     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21243     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21244     +         dbms=&EM_PROPERTY_FILETYPE
21245     +      %end;
21246     +      %else %do;
21247     +         dbms=TAB
21248     +      %end;
21249     +      /* Work around for the following defects:S0560899 and S0560009.   */
21250     +      %let sasEnv=%sysfunc(getlocenv());
21251     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21252     +         dbms=EXCEL
21253     +      %end;
21255     +      replace;
21256     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21257     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21258     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21259     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21260     +            getnames=&EM_PROPERTY_NAMEROW;
21261     +        %end;
21262     +      %end;
21263     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21264     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21265     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21266     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21267     +               delimiter=" ";
21268     +            %end;
21269     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21270     +               /* Do not specifiy a delimiter */
21271     +            %end;
21272     +            %else %do;
21273     +               delimiter="&EM_PROPERTY_DELIMITER";
21274     +            %end;
21275     +         %end;
21276     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21277     +            datarow=&EM_PROPERTY_SKIPROWS;
21278     +            /* Guessingrows must be >= skiprows */
21279     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21280     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21281     +            %end;
21282     +         %end;
21283     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21284     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21285     +         %end;
21286     +       %end;
21287     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21288     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21289     +            FMTLIB = work.formats;
21290     +      %end;
21291     +   %end;
21292     +   run;
21293     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21294     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21295     +      %global fmtcnt;
21296     +      %let fmtcnt=0;
21297     +      proc contents data=work.importfile out=work.impattrs noprint;
21298     +      run;
21299     +      data _null_;
21300     +        set work.impattrs;
21301     +        if _n_=1 then i=0;
21302     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21303     +           i = i+1;
21304     +           varname = substr(name, 1, length(name));
21305     +           call symput("fmt"||left(i), trim(format)||".");
21306     +           call symput("varname"||left(i), varname);
21307     +           call symput("fmtcnt",left(i));
21308     +      end;
21309     +      retain i;
21310     +     run;
21311     +    %if &fmtcnt > 0 %then %do;
21312     +       %dropformatvars;
21313     +    %end;
21314     +    proc datasets lib=work memtype=data nolist;
21315     +        modify importfile;
21316     +        attrib _all_ format=;
21317     +    run;
21318     +    quit;
21319     +   %end;
21321     +   %let _fimportObs  = 0;
21322     +   %let _fimportVars = 0;
21323     +   %if %sysfunc(exist(work.importFile)) %then %do;
21324     +       %let dsid = %sysfunc(open(work.importFile));
21325     +       %if &dsid %then %do;
21326     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21327     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21328     +       %let dsid = %sysfunc(close(&dsid));
21329     +       %end;
21330     +   %end;
21332     +   %if ^&_fimportObs %then %do;
21333     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21334     +       %goto endtrain;
21335     +   %end;
21336     +   %if ^&_fimportVars %then %do;
21337     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21338     +       %goto endtrain;
21339     +   %end;
21341     +   data &em_user_data;
21342     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21343     +   run;
21344     +   %keepordrop;
21346     +   %em_getname(key=EMSTAT,     type=DATA);
21348     +   proc datasets lib=&em_lib nolist;
21349     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21350     +   run;
21352     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21353     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21354     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21355     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21356     +            maxClassLevels=20, identifyEmptyColumns=Y,
21357     +            outdata=&em_user_EMCMETADEFAULT,
21358     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21360     +        data &em_user_emcmetadefault;
21361     +           set &em_user_emcmetadefault;
21362     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21363     +        run;
21365     +        data &em_data_eminfo;
21366     +           length TARGET KEY $32  DATA $43;
21367     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21368     +        run;
21370     +   %end;
21371     +   %else %do;
21372     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21373     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21374     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21375     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21377     +            %if "&em_property_summarize" eq "Y" %then %do;
21378     +                %em_getname(key=EMSTAT,  type=DATA);
21379     +                data &em_data_eminfo;
21380     +                   length TARGET KEY $32  DATA $43;
21381     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21382     +                run;
21383     +            %end;
21384     +   %end;
21386     +   data &em_user_EMCMETADEFAULT;
21387     +      set &em_user_EMCMETADEFAULT;
21388     +      length DROP $1;
21389     +      DROP='N';
21390     +   run;
21392     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
21394     +   data _temp;
21395     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
21396     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
21397     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
21398     +      COLUMNMETAMODTIME=MODTIME;
21399     +   run;
21400     +   proc sort data=&em_data_importset;
21401     +      by PORT;
21402     +   run;
21403     +   data &em_data_importset;
21404     +      merge &em_data_importset _temp;
21405     +      by PORT;
21406     +      if PORT='DATA' then ROLE="&em_property_role";
21407     +   run;
21409     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21411     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21412     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
21413     +            filename x "&em_user_variablesetdelta";
21414     +            data &em_data_variableset;
21415     +               set &em_user_emcmetadefault;
21416     +               %inc X;
21417     +            run;
21418     +            filename x;
21419     +        %end;
21420     +        %else %do;
21421     +            data &em_data_variableset;
21422     +               set &em_user_emcmetadefault;
21423     +            run;
21424     +        %end;
21425     +    %end;
21427     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21428     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
21429     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
21430     +         id NAME;
21431     +      run;
21433     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
21434     +         data _null_;
21435     +            length string $200;
21436     +            set _DiffMeta end=eof;
21437     +            where _type_='COMPARE';
21438     +            file x1;
21439     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21440     +            put string;
21441     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21442     +            put string;
21443     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21444     +            put string;
21445     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21446     +            put string;
21447     +            put 'end;';
21448     +            if drop='Y' then do;
21449     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
21450     +               put string;
21451     +            end;
21452     +            if eof then
21453     +               put 'drop DROP;';
21454     +         run;
21456     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
21457     +         filename x2 "&em_user_deltacode";
21458     +         %em_copyfile(infref=x1, outfref=x2);
21459     +         filename x1;
21460     +         filename x2;
21462     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21463     +         filename x "&em_user_variablesetdelta";
21464     +         data _null_;
21465     +            length string $200;
21466     +            set _DiffMeta end=eof;
21467     +            where _type_='COMPARE';
21468     +            file x;
21469     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21470     +            put string;
21471     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21472     +            put string;
21473     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21474     +            put string;
21475     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21476     +            put string;
21477     +            string = '   DROP="'!!strip(DROP)!!'";';
21478     +            put string;
21479     +            put 'end;';
21480     +         run;
21481     +         filename x;
21482     +       proc datasets lib=work nolist;
21483     +          delete _DiffMeta;
21484     +       run;
21486     +       data &em_data_exportset;
21487     +          set &em_data_exportset;
21488     +          if NODEPORT='TRAIN' then do;
21489     +             ROLE="&em_property_role";
21490     +             COLUMNMETAMODTIME=datetime();
21491     +             MODTIME=datetime();
21492     +             DATASET="&em_nodeid._train";
21493     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
21494     +             DELTACODE="CDelta_TRAIN";
21495     +             APPLYDELTA='Y';
21496     +             EXPORT='Y';
21497     +             NEEDUPDATE='Y';
21499     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
21500     +                EMINFO="&em_data_eminfo";
21501     +                EMINFOMODTIME=datetime();
21502     +            %end;
21503     +            %else %do;
21504     +                EMINFO='';
21505     +                EMINFOMODTIME=.;
21506     +            %end;
21507     +          end;
21508     +       run;
21509     +   %end;
21511     +  proc contents data=&em_user_data;
21512     +  run;
21513     +  proc datasets library=work nolist;
21514     +   delete importfile importattrs new;
21515     +   quit;
21516     +  run;
21518     +  %endtrain:
21519     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
filetype=*xlsx*
delimiter=*,*
MPRINT(TRAIN):   proc import datafile="C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\USERIMPORTFILE.xlsx   " out=work.importfile dbms=xlsx replace;
MPRINT(TRAIN):   RXLX;
MPRINT(TRAIN):   run;
 
NOTE: The import data set has 3500 observations and 34 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.71 seconds
      cpu time            0.70 seconds
 
 
MPRINT(TRAIN):   data EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;
 
NOTE: There were 3500 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS8.FIMPORT_DATA has 3500 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;
 
NOTE: The data set WORK.IMPORTATTRS has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      32:29
NOTE: There were 34 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
nobs=34  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: The file EMWS8.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting EMWS8.FIMPORT_EMINFO (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
 
21520      %let SYSCC = 0;
21521      options validvarname=any;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
21522      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21523      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21524      options validvarname=V7;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
21525      %let _dsidTable = 0;
21526      %let _engineTable =;
21527      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
21528      dsid = open('EMWS8.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.FIMPORT_DATA');
21529      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
21530      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
21531      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
21532      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
21533      end;
MPRINT(EMADVISECOLUMNS):   end;
21534      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21535      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
21536      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
21537      set EMWS8.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS8.FIMPORT_DATA;
21538      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
21539      output;
MPRINT(EMADVISECOLUMNS):   output;
21540      stop;
MPRINT(EMADVISECOLUMNS):   stop;
21541      end;
MPRINT(EMADVISECOLUMNS):   end;
21542      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21543      proc contents data=EMWS8.FIMPORT_DATA
21544      out=WORK.M1QBR8P7 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.FIMPORT_DATA out=WORK.M1QBR8P7 noprint;
21545      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: The data set WORK.M1QBR8P7 has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21546      data WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBR8P7;
21547      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
21548      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
21549      set WORK.M1QBR8P7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBR8P7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
21550      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
21551      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
21552      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
21553      if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21554      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21555      end;
MPRINT(EMADVISECOLUMNS):   end;
21556      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
21557      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
21558      if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21559      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21560      end;
MPRINT(EMADVISECOLUMNS):   end;
21561      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
21562      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
21563      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
21564      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
21565      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
21566      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: There were 34 observations read from the data set WORK.M1QBR8P7.
NOTE: The data set WORK.M1QBR8P7 has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21567      data WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBR8P7;
21568      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
21569      set WORK.M1QBR8P7;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBR8P7;
21570      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
21571      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: There were 34 observations read from the data set WORK.M1QBR8P7.
NOTE: The data set WORK.M1QBR8P7 has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0QCOBOX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
21575      data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
21576      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
21577      set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
21578      run;
MPRINT(EMADVISECOLUMNS):   run;
 
NOTE: There were 34 observations read from the data set WORK.M0QCOBOX.
NOTE: The data set WORK.M0QCOBOX has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EMADVISECOLUMNS):    data WORK.M276W6JP(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QCOBOX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EMADVISECOLUMNS):
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.FIMPORT_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET="";
MPRINT(TRAIN):   KEY="STATS";
MPRINT(TRAIN):   DATA="EMWS8.FIMPORT_EMSTAT";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS8.FIMPORT_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_EMCMETADEFAULT has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;
 
21796      %let SYSCC = 0;
21797      data EMWS8.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS8.FIMPORT_EMTMETADEFAULT;
21798      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
21799      LIBNAME = "EMWS8";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS8";
21800      run;
MPRINT(EMADVISETABLE):   run;
 
NOTE: The data set EMWS8.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21801      options validvarname=any;
MPRINT(EMADVISETABLE):    options validvarname=any;
21802      proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA out=_tempAdvisor noprint;
21803      run;
MPRINT(EMADVISETABLE):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21804      options validvarname=V7;
MPRINT(EMADVISETABLE):   options validvarname=V7;
MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS8.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M122DX68;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M122DX68(obs=1);
MPRINT(EMADVISETABLE):   nobs = 3500;
MPRINT(EMADVISETABLE):   ncols = 34;
MPRINT(EMADVISETABLE):   nbytes = 967680;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1775319600.902;
MPRINT(EMADVISETABLE):   modate = 1775319600.902;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EMADVISETABLE):
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;
 
NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS8.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS8.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;
 
NOTE: There were 15 observations read from the data set EMWS8.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS8.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS8.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt.
21833     +if NAME="AcceptedCmp1" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp1" then do;
21834     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21835     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21836     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21837     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21838     +end;
MPRINT(TRAIN):   end;
21839     +if NAME="AcceptedCmp2" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp2" then do;
21840     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21841     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21842     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21843     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21844     +end;
MPRINT(TRAIN):   end;
21845     +if NAME="AcceptedCmp3" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp3" then do;
21846     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21847     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21848     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21849     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21850     +end;
MPRINT(TRAIN):   end;
21851     +if NAME="AcceptedCmp4" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp4" then do;
21852     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21853     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21854     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21855     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21856     +end;
MPRINT(TRAIN):   end;
21857     +if NAME="AcceptedCmp5" then do;
MPRINT(TRAIN):   if NAME="AcceptedCmp5" then do;
21858     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21859     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21860     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21861     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21862     +end;
MPRINT(TRAIN):   end;
21863     +if NAME="Complain" then do;
MPRINT(TRAIN):   if NAME="Complain" then do;
21864     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21865     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21866     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21867     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21868     +end;
MPRINT(TRAIN):   end;
21869     +if NAME="Custid" then do;
MPRINT(TRAIN):   if NAME="Custid" then do;
21870     +ROLE="ID";
MPRINT(TRAIN):   ROLE="ID";
21871     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21872     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21873     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21874     +end;
MPRINT(TRAIN):   end;
21875     +if NAME="DepVar" then do;
MPRINT(TRAIN):   if NAME="DepVar" then do;
21876     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
21877     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
21878     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21879     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21880     +end;
MPRINT(TRAIN):   end;
21881     +if NAME="Dt_Customer" then do;
MPRINT(TRAIN):   if NAME="Dt_Customer" then do;
21882     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
21883     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21884     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21885     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21886     +end;
MPRINT(TRAIN):   end;
21887     +if NAME="Element1" then do;
MPRINT(TRAIN):   if NAME="Element1" then do;
21888     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21889     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21890     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21891     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21892     +end;
MPRINT(TRAIN):   end;
21893     +if NAME="Element2" then do;
MPRINT(TRAIN):   if NAME="Element2" then do;
21894     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21895     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21896     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21897     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21898     +end;
MPRINT(TRAIN):   end;
21899     +if NAME="Element3" then do;
MPRINT(TRAIN):   if NAME="Element3" then do;
21900     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21901     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21902     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21903     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21904     +end;
MPRINT(TRAIN):   end;
21905     +if NAME="Element4" then do;
MPRINT(TRAIN):   if NAME="Element4" then do;
21906     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21907     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21908     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21909     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21910     +end;
MPRINT(TRAIN):   end;
21911     +if NAME="Group" then do;
MPRINT(TRAIN):   if NAME="Group" then do;
21912     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21913     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
21914     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21915     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21916     +end;
MPRINT(TRAIN):   end;
21917     +if NAME="Z_CostContact" then do;
MPRINT(TRAIN):   if NAME="Z_CostContact" then do;
21918     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21919     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21920     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21921     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21922     +end;
MPRINT(TRAIN):   end;
21923     +if NAME="Z_Revenue" then do;
MPRINT(TRAIN):   if NAME="Z_Revenue" then do;
21924     +ROLE="REJECTED";
MPRINT(TRAIN):   ROLE="REJECTED";
21925     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
21926     +ORDER="";
MPRINT(TRAIN):   ORDER="";
21927     +DROP="N";
MPRINT(TRAIN):   DROP="N";
21928     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS8.FIMPORT_VARIABLESET has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS8.FIMPORT_VariableSet base=EMWS8.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 32 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename x1 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;
 
NOTE: The file X1 is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr
 
NOTE: 81 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X2 is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr
 
NOTE: 81 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;
 
NOTE: The file X is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.00 Uhr
 
NOTE: 96 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 16 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;
 
NOTE: Deleting WORK._DIFFMETA (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS8.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc contents data=EMWS8.FIMPORT_DATA;
MPRINT(TRAIN):   run;
 
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
NOTE: The PROCEDURE CONTENTS printed page 2.
 
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;
 
NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   run;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21929      *------------------------------------------------------------*;
21930      * End TRAIN: FIMPORT;
21931      *------------------------------------------------------------*;
 
21932      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21933      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
21934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21935      ;
MPRINT(EM_DIAGRAM):   ;
21936      ;
MPRINT(EM_DIAGRAM):   ;
21937      ;
MPRINT(EM_DIAGRAM):   ;
21938      ;
MPRINT(EM_DIAGRAM):   ;
21939      quit;
MPRINT(EM_DIAGRAM):   quit;
21940      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21941      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
21942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21943      /*; *"; *'; */
21944      ;
MPRINT(EM_DIAGRAM):   ;
21945      run;
MPRINT(EM_DIAGRAM):   run;
21946      quit;
MPRINT(EM_DIAGRAM):   quit;
21947      /* Reset EM Options */
21948      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
21949      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
21950      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.20 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                03. April 2016
Time:                16.20 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O06KO25Y "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O06KO25Y new;
MPRINT(EM_DIAGRAM):   run;
22052      %let EMEXCEPTIONSTRING=;
22053      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22054      * SCORE: FIMPORT;
MPRINT(EM_DIAGRAM):   * SCORE: FIMPORT;
22055      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22056      %let EM_ACTION = SCORE;
22057      %let syscc = 0;
22058      /* Fimport.source */
22059      %macro main;
22060            %if %upcase(&EM_ACTION) = CREATE %then %do;
22061               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
22062               %include temp;
22063               filename temp;
22064               %create;
22065            %end;
22066            %else
22067            %if %upcase(&EM_ACTION) = TRAIN %then %do;
22068               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
22069               %include temp;
22070               filename temp;
22071               %train;
22072            %end;
22073            %else
22074            %if %upcase(&EM_ACTION) = UPDATE %then %do;
22075               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
22076               %include temp;
22077               filename temp;
22078               %update;
22079            %end;
22080            %else
22081            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
22082               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22083               %include temp;
22084               filename temp;
22085               %property;
22086            %end;
22087             %else
22088            %if %upcase(&EM_ACTION) = SCORE %then %do;
22089               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
22090               %include temp;
22091               filename temp;
22092               %score;
22093            %end;
22094            %else
22095            %if %upcase(&EM_ACTION) = REPORT %then %do;
22096               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
22097               %include temp;
22098               filename temp;
22099               %report;
22100            %end;
22101            %else
22102            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
22103               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22104               %include temp;
22105               filename temp;
22106               %openvariableset;
22107            %end;
22108            %else
22109            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
22110               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22111               %include temp;
22112               filename temp;
22113               %closevariableset;
22114            %end;
22115      %mend main;
22116      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_SCORE.SOURCE.
22117     +%macro score;
22119     +   filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
22120     +   data _null_;
22121     +      file x;
22122     +      put ' ';
22123     +   run;
22124     +   filename x;
22126     +   %em_getname(key=DATA, type=DATA);
22127     +   %if %sysfunc(exist(&em_user_data)) %then %do;
22128     +       data &em_export_train / view=&em_export_train;
22129     +          set &em_user_data;
22130     +       run;
22131     +   %end;
22133     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename x "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\_updatePath.st";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file x;
MPRINT(SCORE):   put ' ';
MPRINT(SCORE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\_updatePath.st,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03. April 2016 16.20 Uhr,
      Create Time=03. April 2016 16.14 Uhr
 
NOTE: 1 record was written to the file X.
      The minimum record length was 1.
      The maximum record length was 1.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS8.FIMPORT_train / view=EMWS8.FIMPORT_train;
MPRINT(SCORE):   set EMWS8.FIMPORT_DATA;
MPRINT(SCORE):   run;
 
NOTE: DATA STEP view saved on file EMWS8.FIMPORT_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22134      *------------------------------------------------------------*;
22135      * End SCORE: FIMPORT;
22136      *------------------------------------------------------------*;
 
22138      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
22139      * FIMPORT: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * FIMPORT: Computing metadata for TRAIN data;
22140      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.FIMPORT_train out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.FIMPORT_train');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.FIMPORT_train out=WORK.M23SGVOL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23SGVOL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M23SGVOL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23SGVOL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M23SGVOL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2FUJTDL NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FEDK2C(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FUJTDL;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.FIMPORT_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.FIMPORT_EMCMETADEFAULT out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.FIMPORT_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "FIMPORT";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp1" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp2" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp3" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp4" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp5" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Complain" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Custid" then do;
MPRINT(EM_DIAGRAM):   ROLE="ID";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="DepVar" then do;
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Dt_Customer" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Element1" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Element2" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Element3" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Element4" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Group" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Z_CostContact" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Z_Revenue" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   ORDER="";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop DROP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "03. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.20 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                03. April 2016
Time:                16.20 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1S_HU20 "C:\Users\Lukas Fahr\OneDrive\00 Dokumente\00 Nova IMS\02 Semester 2\03 Predictive Models\Practical AM - Project\Workspaces\EMWS8\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1S_HU20 new;
MPRINT(EM_DIAGRAM):   run;
22543      %let EMEXCEPTIONSTRING=;
22544      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22545      * REPORT: FIMPORT;
MPRINT(EM_DIAGRAM):   * REPORT: FIMPORT;
22546      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22547      %let EM_ACTION = REPORT;
22548      %let syscc = 0;
22549      /* Fimport.source */
22550      %macro main;
22551            %if %upcase(&EM_ACTION) = CREATE %then %do;
22552               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
22553               %include temp;
22554               filename temp;
22555               %create;
22556            %end;
22557            %else
22558            %if %upcase(&EM_ACTION) = TRAIN %then %do;
22559               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
22560               %include temp;
22561               filename temp;
22562               %train;
22563            %end;
22564            %else
22565            %if %upcase(&EM_ACTION) = UPDATE %then %do;
22566               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
22567               %include temp;
22568               filename temp;
22569               %update;
22570            %end;
22571            %else
22572            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
22573               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22574               %include temp;
22575               filename temp;
22576               %property;
22577            %end;
22578             %else
22579            %if %upcase(&EM_ACTION) = SCORE %then %do;
22580               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
22581               %include temp;
22582               filename temp;
22583               %score;
22584            %end;
22585            %else
22586            %if %upcase(&EM_ACTION) = REPORT %then %do;
22587               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
22588               %include temp;
22589               filename temp;
22590               %report;
22591            %end;
22592            %else
22593            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
22594               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22595               %include temp;
22596               filename temp;
22597               %openvariableset;
22598            %end;
22599            %else
22600            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
22601               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22602               %include temp;
22603               filename temp;
22604               %closevariableset;
22605            %end;
22606      %mend main;
22607      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_REPORT.SOURCE.
22608     +%macro report;
22609     +    %em_getname(key=EMSTAT,     type=DATA);
22610     +    %em_getname(key=EMINFO,     type=DATA);
22611     +    %em_getname(key=CLASS,      type=DATA);
22612     +    %em_getname(key=INTERVAL,   type=DATA);
22614     +    %em_REPORT(key=EMSTAT,   viewtype=DATA, description=EMSTAT, block=Report, autodisplay=Y);
22615     +    %em_REPORT(key=INTERVAL, viewtype=LATTICE, LATTICETYPE=HISTOGRAM, LATTICEX=VARIABLE, DISCRETEX=Y, X=VALUE,FREQ=PERCENT,block=Report, description=INTERVALTARGET, autodisplay=N);
22616     +    %em_REPORT(key=CLASS, viewtype=LATTICE, LATTICEtype=BAR, LATTICEX=VARIABLE, X=VALUE,FREQ=PERCENT, block=Report, description=CLASSTARGET, autodisplay=Y);
22618     +    %if &em_property_summarize eq Y %then %do;
22619     +        filename temp catalog 'sashelp.emmeta.emadvisestatistics.source';
22620     +        %include temp;
22621     +        filename temp;
22623     +        data work.tempmeta;
22624     +           set &em_lib..&em_nodeid._CMETA_TRAIN;
22625     +           if ROLE='TARGET' and LEVEL ne 'INTERVAL' then output;
22626     +         run;
22628     +        %class_profile(DATA=&em_export_train, OUTPUT=&em_user_class, VARS=,
22629     +                      METADATA=tempmeta, STAT=_STAT, FREQ=);
22631     +         data work.tempmeta;
22632     +           set &em_lib..&em_nodeid._CMETA_TRAIN;
22633     +            if ROLE='TARGET' and LEVEL eq 'INTERVAL' then output;
22634     +         run;
22635     +         %var_profile(DATA=&em_export_train, OUTPUT=&em_user_INTERVAL, VARS=, METADATA=tempmeta, COMPUTESTAT=Y, STAT=_STAT, FREQ=,
22636     +                   BINDATA=, BIN=Y, NUMBARS=8, MINMAX=N);
22638     +        data work.tempmeta;
22639     +           set &em_lib..&em_nodeid._CMETA_TRAIN;
22640     +        run;
22642     +        %if "&em_property_advancedadvisor" eq "N" %then %do;
22643     +            %EmAdviseStat(&em_export_train, maxClassLevels=32, metadata=tempmeta, statisticData=&em_user_emstat);
22645     +            data &em_data_exportset;
22646     +                 set &em_data_exportset;
22647     +                 if NODEPORT='TRAIN' then do;
22648     +                    EMINFO="&em_data_eminfo";
22649     +                    EMINFOMODTIME=datetime();
22650     +                 end;
22651     +            run;
22652     +        %end;
22653     +        %else %do;
22654     +            %em_getname(key=EMSTATDEFAULT,     type=DATA);
22655     +            %if %sysfunc(exist(&em_user_emstatdefault)) %then %do;
22656     +                data &em_user_emstat /  view=&em_user_emstat;
22657     +                   set &em_user_emstatdefault;
22658     +                run;
22659     +            %end;
22660     +        %end;
22661     +    %end;
22662     +    %else %do;
22663     +        %if "&em_property_advancedadvisor" eq "N" %then %do;
22664     +            proc datasets lib=&em_lib nolist;
22665     +               delete &em_nodeid._EMINFO;
22666     +            run;
22667     +            quit;
22668     +            data &em_data_exportset;
22669     +                 set &em_data_exportset;
22670     +                 if NODEPORT='TRAIN' then do;
22671     +                    EMINFO="";
22672     +                    EMINFOMODTIME=.;
22673     +                 end;
22674     +            run;
22675     +        %end;
22676     +    %end;
22678     +    data &em_data_exportset;
22679     +       set &em_data_exportset;
22680     +       if NODEPORT='TRAIN' then do;
22681     +          ROLE="&em_property_role";
22682     +       end;
22683     +    run;
22685     +    %if %sysfunc(exist(&em_data_variableSet)) %then %do;
22686     +        proc freq data=&em_data_variableset noprint;
22687     +             table ROLE*LEVEL/out=work.tempMeta;
22688     +        run;
22689     +        proc print data=work.tempmeta label noobs;
22690     +           var ROLE LEVEL COUNT;
22691     +           label ROLE  = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
22692     +                 LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
22693     +                 COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
22694     +        title9  ' ';
22695     +        title10  "%sysfunc(sasmsg(sashelp.dmine, rpt_exptattributes_title, NOQUOTE, TRAIN))";
22696     +        run;
22697     +        title10;
22698     +    %end;
22700     +    %if %sysfunc(exist(work.tempmeta)) %then %do;
22701     +        proc datasets lib=work nolist;
22702     +           delete tempmeta;
22703     +        run;
22704     +        quit;
22705     +    %end;
22707     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMSTAT";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EMSTAT";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Report";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6452270250978;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "INTERVAL";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "VARIABLE";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "INTERVALTARGET";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "VALUE";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "PERCENT";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Report";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92828985579697;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CLASS";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "VARIABLE";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "CLASSTARGET";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "VALUE";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "PERCENT";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Report";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14122958906983;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 378 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   filename temp catalog 'sashelp.emmeta.emadvisestatistics.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMETA.EMADVISESTATISTICS.SOURCE.
22756     +/*
22757     +    MACRO: EmAdviseStatistics
22759     +    PURPOSE: Called by datasource wizard
22762     +    PARAMETERS:
22763     +         none
22765     +    USAGE:
22768     +    AUTHOR:   Dom Latour
22770     +    AMENDMENTS: Initial Version                   07Apr08 SASDZL
22772     +*/
22775     + %macro EmAdviseStat(dataset,
22776     +               maxClassLevels=20,
22777     +               metadata=WORK.COLUMNMETA,
22778     +               statisticData=WORK.STATISTIC);
22779     +   proc display c=sashelp.emmeta.advisestatistics.scl; run;
22780     +%mend EmAdviseStat;
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):   data work.tempmeta;
MPRINT(REPORT):   set EMWS8.FIMPORT_CMETA_TRAIN;
MPRINT(REPORT):   if ROLE='TARGET' and LEVEL ne 'INTERVAL' then output;
MPRINT(REPORT):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK.TEMPMETA has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set tempmeta(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPMETA.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   length _VARS $80;
MPRINT(CLASS_PROFILE):   retain _vars;
MPRINT(CLASS_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(CLASS_PROFILE):   set tempmeta end=eof;
MPRINT(CLASS_PROFILE):   where LEVEL ne 'INTERVAL' or ROLE='FREQ';
MPRINT(CLASS_PROFILE):   if ROLE='FREQ' then call symput('FREQ', NAME);
MPRINT(CLASS_PROFILE):   else do;
MPRINT(CLASS_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(CLASS_PROFILE):   else do;
MPRINT(CLASS_PROFILE):   put _Vars;
MPRINT(CLASS_PROFILE):   _vars = strip(NAME);
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   if eof then do;
MPRINT(CLASS_PROFILE):   put _Vars;
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Sonntag, 03. April 2016 16.20 Uhr,
      Last Modified=Sonntag, 03. April 2016 16.20 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD8428_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 6.
      The maximum record length was 13.
NOTE: There were 1 observations read from the data set WORK.TEMPMETA.
      WHERE (LEVEL not = 'INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22781     +%macro _vars;
22782     +DepVar
22783     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=EMWS8.FIMPORT_train nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(_VARS):   DepVar
MPRINT(CLASS_PROFILE):   ;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 3500   Memory used = 511K.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data EMWS8.FIMPORT_CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set EMWS8.FIMPORT_CLASS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=EMWS8.FIMPORT_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.FIMPORT_CLASS.
NOTE: The data set WORK._STAT has 2 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   data work.tempmeta;
MPRINT(REPORT):   set EMWS8.FIMPORT_CMETA_TRAIN;
MPRINT(REPORT):   if ROLE='TARGET' and LEVEL eq 'INTERVAL' then output;
MPRINT(REPORT):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK.TEMPMETA has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* FIMPORT: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set tempmeta(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 0 observations read from the data set WORK.TEMPMETA.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sonntag, 03. April 2016 16.20 Uhr,
      Last Modified=Sonntag, 03. April 2016 16.20 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD8428_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22784     +%macro _vars;
22785     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):   data work.tempmeta;
MPRINT(REPORT):   set EMWS8.FIMPORT_CMETA_TRAIN;
MPRINT(REPORT):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK.TEMPMETA has 34 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EMADVISESTAT):   proc display c=sashelp.emmeta.advisestatistics.scl;
MPRINT(EMADVISESTAT):   run;
 
22786      %let SYSCC = 0;
*------------------------------------------------------------*
Computing data source summary statistics
*------------------------------------------------------------*
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
22787      %let EM_ADVISENCOUNT = -1;
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
22788      %let _GridFlag = 0;
22789      %hpdm_performance(data=EMWS8.FIMPORT_train, isGrid=_GridFlag);
MPRINT(EMADVISESTAT):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EMADVISESTAT):  ;
22790      proc dmdb data=EMWS8.FIMPORT_train(obs=1000000)
22791      maxlevel = 513
22792      classout=WORK._CLASSSTAT varout=WORK._VARSTAT;
MPRINT(EMADVISESTAT):    proc dmdb data=EMWS8.FIMPORT_train(obs=1000000) maxlevel = 513 classout=WORK._CLASSSTAT varout=WORK._VARSTAT;
22793      var
22794      'Dt_Customer'n
22795      'Element1'n
22796      'Element2'n
22797      'Element3'n
22798      'Income'n
22799      'Kidhome'n
22800      'MntFishProducts'n
22801      'MntFruits'n
22802      'MntGoldProds'n
22803      'MntMeatProducts'n
22804      'MntSweetProducts'n
22805      'MntWines'n
22806      'NumCatalogPurchases'n
22807      'NumDealsPurchases'n
22808      'NumStorePurchases'n
22809      'NumWebPurchases'n
22810      'NumWebVisitsMonth'n
22811      'Recency'n
22812      'Teenhome'n
22813      'Year_Birth'n
22814      'Z_CostContact'n
22815      'Z_Revenue'n
22816      ;
MPRINT(EMADVISESTAT):   var 'Dt_Customer'n 'Element1'n 'Element2'n 'Element3'n 'Income'n 'Kidhome'n 'MntFishProducts'n 'MntFruits'n 'MntGoldProds'n 'MntMeatProducts'n 'MntSweetProducts'n 'MntWines'n 'NumCatalogPurchases'n 'NumDealsPurchases'n
'NumStorePurchases'n 'NumWebPurchases'n 'NumWebVisitsMonth'n 'Recency'n 'Teenhome'n 'Year_Birth'n 'Z_CostContact'n 'Z_Revenue'n ;
22817      class
22818      'AcceptedCmp1'n
22819      'AcceptedCmp2'n
22820      'AcceptedCmp3'n
22821      'AcceptedCmp4'n
22822      'AcceptedCmp5'n
22823      'Complain'n
22824      'DepVar'n
22825      'Education'n
22826      'Element4'n
22827      'Group'n
22828      'Marital_Status'n
22829      ;
MPRINT(EMADVISESTAT):   class 'AcceptedCmp1'n 'AcceptedCmp2'n 'AcceptedCmp3'n 'AcceptedCmp4'n 'AcceptedCmp5'n 'Complain'n 'DepVar'n 'Education'n 'Element4'n 'Group'n 'Marital_Status'n ;
22830      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: Records processed = 3500   Memory used = 511K.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: The data set WORK._CLASSSTAT has 26 observations and 9 variables.
NOTE: The data set WORK._VARSTAT has 22 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22831      proc sort data=WORK._CLASSSTAT;
MPRINT(EMADVISESTAT):    proc sort data=WORK._CLASSSTAT;
22832      by NAME;
MPRINT(EMADVISESTAT):   by NAME;
22833      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 26 observations read from the data set WORK._CLASSSTAT.
NOTE: The data set WORK._CLASSSTAT has 26 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22834      data WORK._CLASSSTAT;
MPRINT(EMADVISESTAT):   data WORK._CLASSSTAT;
22835      set WORK._CLASSSTAT end=eof;
MPRINT(EMADVISESTAT):   set WORK._CLASSSTAT end=eof;
22836      retain NLEVEL PCTMISS NTOTAL 0;
MPRINT(EMADVISESTAT):   retain NLEVEL PCTMISS NTOTAL 0;
22837      KEEP NAME TYPE NLEVEL PCTMISS;
MPRINT(EMADVISESTAT):   KEEP NAME TYPE NLEVEL PCTMISS;
22838      by NAME;
MPRINT(EMADVISESTAT):   by NAME;
22839      if first.NAME then do;
MPRINT(EMADVISESTAT):   if first.NAME then do;
22840      NTOTAL = frequency;
MPRINT(EMADVISESTAT):   NTOTAL = frequency;
22841      if CRAW eq '' and NRAW=. then do;
MPRINT(EMADVISESTAT):   if CRAW eq '' and NRAW=. then do;
22842      PCTMISS=FREQPERCENT;
MPRINT(EMADVISESTAT):   PCTMISS=FREQPERCENT;
22843      NLEVEL = 0;
MPRINT(EMADVISESTAT):   NLEVEL = 0;
22844      end;
MPRINT(EMADVISESTAT):   end;
22845      else do;
MPRINT(EMADVISESTAT):   else do;
22846      NLEVEL=1;
MPRINT(EMADVISESTAT):   NLEVEL=1;
22847      PCTMISS=0;
MPRINT(EMADVISESTAT):   PCTMISS=0;
22848      end;
MPRINT(EMADVISESTAT):   end;
22849      end;
MPRINT(EMADVISESTAT):   end;
22850      else do;
MPRINT(EMADVISESTAT):   else do;
22851      NLEVEL + 1;
MPRINT(EMADVISESTAT):   NLEVEL + 1;
22852      NTOTAL + FREQUENCY;
MPRINT(EMADVISESTAT):   NTOTAL + FREQUENCY;
22853      end;
MPRINT(EMADVISESTAT):   end;
22854      if last.NAME then do;
MPRINT(EMADVISESTAT):   if last.NAME then do;
22855      if eof then call symput('EM_ADVISENCOUNT', strip(put(ntotal, best.)));
MPRINT(EMADVISESTAT):   if eof then call symput('EM_ADVISENCOUNT', strip(put(ntotal, best.)));
22856      output;
MPRINT(EMADVISESTAT):   output;
22857      end;
MPRINT(EMADVISESTAT):   end;
22858      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 26 observations read from the data set WORK._CLASSSTAT.
NOTE: The data set WORK._CLASSSTAT has 11 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22859      data WORK._VARSTAT;
MPRINT(EMADVISESTAT):    data WORK._VARSTAT;
22860      set WORK._VARSTAT end=eof;
MPRINT(EMADVISESTAT):   set WORK._VARSTAT end=eof;
22861      retain TYPE 'N';
MPRINT(EMADVISESTAT):   retain TYPE 'N';
22862      PCTMISS = 100*NMISS/(NMISS + N);
MPRINT(EMADVISESTAT):   PCTMISS = 100*NMISS/(NMISS + N);
22863      drop N
22864      ;
MPRINT(EMADVISESTAT):   drop N ;
22865      if eof then call symput('EM_ADVISENCOUNT', strip(put(nmiss + n, best.)));
MPRINT(EMADVISESTAT):   if eof then call symput('EM_ADVISENCOUNT', strip(put(nmiss + n, best.)));
22866      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 22 observations read from the data set WORK._VARSTAT.
NOTE: The data set WORK._VARSTAT has 22 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22867      data EMWS8.FIMPORT_EMSTAT;
MPRINT(EMADVISESTAT):    data EMWS8.FIMPORT_EMSTAT;
22868      length Name $32 Type $1 nlevel pctmiss min max mean std skewness kurtosis 8;
MPRINT(EMADVISESTAT):   length Name $32 Type $1 nlevel pctmiss min max mean std skewness kurtosis 8;
22869      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,  NOQUOTE))" NLEVEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))" PCTMISS =
22870         "%sysfunc(sasmsg(sashelp.dmine, rpt_pctmissing_vlabel, NOQUOTE))" MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))" MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))" MEAN =
22871         "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))" STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))" SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))" KURTOSIS =
22872         "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
MPRINT(EMADVISESTAT):   label NAME = "Variable Name" TYPE = "Type" NLEVEL = "Number of Levels" PCTMISS = "Percent Missing" MIN = "Minimum" MAX = "Maximum" MEAN = "Mean" STD = "Standard Deviation" SKEWNESS = "Skewness" KURTOSIS = "Kurtosis";
22873      format NLEVEL 6.0 PCTMISS MIN MAX MEAN STD SKEWNESS KURTOSIS BEST8.3;
MPRINT(EMADVISESTAT):   format NLEVEL 6.0 PCTMISS MIN MAX MEAN STD SKEWNESS KURTOSIS BEST8.3;
22874      set WORK._VARSTAT WORK._CLASSSTAT;
MPRINT(EMADVISESTAT):   set WORK._VARSTAT WORK._CLASSSTAT;
22875      drop NMISS;
MPRINT(EMADVISESTAT):   drop NMISS;
22876      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 22 observations read from the data set WORK._VARSTAT.
NOTE: There were 11 observations read from the data set WORK._CLASSSTAT.
NOTE: The data set EMWS8.FIMPORT_EMSTAT has 33 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22877      proc sort data=EMWS8.FIMPORT_EMSTAT;
MPRINT(EMADVISESTAT):   proc sort data=EMWS8.FIMPORT_EMSTAT;
22878      by NAME;
MPRINT(EMADVISESTAT):   by NAME;
22879      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.FIMPORT_EMSTAT.
NOTE: The data set EMWS8.FIMPORT_EMSTAT has 33 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22880      proc sort data=WORK.M03P_2MP;
MPRINT(EMADVISESTAT):    proc sort data=WORK.M03P_2MP;
22881      by NAME;
MPRINT(EMADVISESTAT):   by NAME;
22882      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 34 observations read from the data set WORK.M03P_2MP.
NOTE: The data set WORK.M03P_2MP has 34 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22883      data WORK.M03P_2MP;
MPRINT(EMADVISESTAT):   data WORK.M03P_2MP;
22884      merge WORK.M03P_2MP EMWS8.FIMPORT_EMSTAT;
MPRINT(EMADVISESTAT):   merge WORK.M03P_2MP EMWS8.FIMPORT_EMSTAT;
22885      by NAME;
MPRINT(EMADVISESTAT):   by NAME;
22886      if FORMATTYPE in("DATE", "DATETIME", "TIME") then do;
MPRINT(EMADVISESTAT):   if FORMATTYPE in("DATE", "DATETIME", "TIME") then do;
22887      MEAN=.;
MPRINT(EMADVISESTAT):   MEAN=.;
22888      MIN=.;
MPRINT(EMADVISESTAT):   MIN=.;
22889      MAX=.;
MPRINT(EMADVISESTAT):   MAX=.;
22890      STD=.;
MPRINT(EMADVISESTAT):   STD=.;
22891      SKEWNESS=.;
MPRINT(EMADVISESTAT):   SKEWNESS=.;
22892      KURTOSIS=.;
MPRINT(EMADVISESTAT):   KURTOSIS=.;
22893      end;
MPRINT(EMADVISESTAT):   end;
22894      else if ROLE = 'ID' then do;
MPRINT(EMADVISESTAT):   else if ROLE = 'ID' then do;
22895      MEAN=.;
MPRINT(EMADVISESTAT):   MEAN=.;
22896      STD=.;
MPRINT(EMADVISESTAT):   STD=.;
22897      SKEWNESS=.;
MPRINT(EMADVISESTAT):   SKEWNESS=.;
22898      KURTOSIS=.;
MPRINT(EMADVISESTAT):   KURTOSIS=.;
22899      end;
MPRINT(EMADVISESTAT):   end;
22900      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 34 observations read from the data set WORK.M03P_2MP.
NOTE: There were 33 observations read from the data set EMWS8.FIMPORT_EMSTAT.
NOTE: The data set WORK.M03P_2MP has 34 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22901      data tempmeta;
MPRINT(EMADVISESTAT):    data tempmeta;
22902      set WORK.M03P_2MP;
MPRINT(EMADVISESTAT):   set WORK.M03P_2MP;
22903      run;
MPRINT(EMADVISESTAT):   run;
 
NOTE: There were 34 observations read from the data set WORK.M03P_2MP.
NOTE: The data set WORK.TEMPMETA has 34 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.22 seconds
      cpu time            0.24 seconds
 
 
MPRINT(EMADVISESTAT):
MPRINT(REPORT):  ;
MPRINT(REPORT):   data EMWS8.FIMPORT_ExportSet;
MPRINT(REPORT):   set EMWS8.FIMPORT_ExportSet;
MPRINT(REPORT):   if NODEPORT='TRAIN' then do;
MPRINT(REPORT):   EMINFO="EMWS8.FIMPORT_EMINFO";
MPRINT(REPORT):   EMINFOMODTIME=datetime();
MPRINT(REPORT):   end;
MPRINT(REPORT):   run;
 
NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):   data EMWS8.FIMPORT_ExportSet;
MPRINT(REPORT):   set EMWS8.FIMPORT_ExportSet;
MPRINT(REPORT):   if NODEPORT='TRAIN' then do;
MPRINT(REPORT):   ROLE="TRAIN";
MPRINT(REPORT):   end;
MPRINT(REPORT):   run;
 
NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   proc freq data=EMWS8.FIMPORT_VariableSet noprint;
MPRINT(REPORT):   table ROLE*LEVEL/out=work.tempMeta;
MPRINT(REPORT):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_VARIABLESET.
NOTE: The data set WORK.TEMPMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):   proc print data=work.tempmeta label noobs;
MPRINT(REPORT):   var ROLE LEVEL COUNT;
MPRINT(REPORT):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
MPRINT(REPORT):   title9 ' ';
MPRINT(REPORT):   title10 "Exported Attributes for TRAIN Port";
MPRINT(REPORT):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPMETA.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   title10;
MPRINT(REPORT):   proc datasets lib=work nolist;
MPRINT(REPORT):   delete tempmeta;
MPRINT(REPORT):   run;
 
NOTE: Deleting WORK.TEMPMETA (memtype=DATA).
MPRINT(REPORT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22904      *------------------------------------------------------------*;
22905      * End REPORT: FIMPORT;
22906      *------------------------------------------------------------*;
 
22907      /* Reset EM Options */
22908      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
22909      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22910      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
22911      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
22912      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
22913      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 378 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 378 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
