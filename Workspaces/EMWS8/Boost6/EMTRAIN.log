MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.51 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                19.51 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2LB2POJ 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2LB2POJ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.51 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.51 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\Boost6\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
533498     proc freq data=EMWS8.Boost6_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Boost6_VariableSet noprint;
533499     table ROLE*LEVEL/out=WORK.Boost6META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Boost6META;
533500     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BOOST6_VARIABLESET.
NOTE: The data set WORK.BOOST6META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

533501     proc print data=WORK.Boost6META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost6META label noobs;
533502     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
533503     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
533503   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
533503   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
533504     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
533505     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
533506     run;

NOTE: There were 8 observations read from the data set WORK.BOOST6META.
NOTE: The PROCEDURE PRINT printed page 521.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

533507     title10;
MPRINT(EM_DIAGRAM):   title10;
533508     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN 
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost6_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Boost6_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost6_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost6_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Boost6_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Boost6_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost6_DepVar_DD 
out=EMWS8.Boost6_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
533555     data WORK.Boost6_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost6_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
533556     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
533557     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
533557   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
533557   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
533558        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
533558   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
533558   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
533559     set EMWS8.BOOST6_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.BOOST6_DEPVAR_DM( where=(_TYPE_="TARGET"));
533560     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
533561     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
533562     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
533563     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
533564     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
533565     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
533566     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
533567     end;
MPRINT(EM_DIAGRAM):   end;
533568     output;
MPRINT(EM_DIAGRAM):   output;
533569     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.BOOST6_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST6_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

533570     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
533571     proc print data=WORK.Boost6_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost6_EVENT noobs label;
533572     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
533573     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
533574     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
533575     run;

NOTE: There were 1 observations read from the data set WORK.BOOST6_EVENT.
NOTE: The PROCEDURE PRINT printed page 522.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

533576     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
533577     proc print data = EMWS8.Boost6_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Boost6_DepVar_DM noobs label;
533578     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
533579     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
533580     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
533580   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
533580   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
533581     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
533582     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
533583     run;

NOTE: There were 7 observations read from the data set EMWS8.BOOST6_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 523.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

533584     title10;
MPRINT(EM_DIAGRAM):   title10;
533585     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost6: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost6: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost6: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost6_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost6_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost6_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost6_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
534058     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
534059     * Boost6: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost6: Generation of macros and macro variables;
534060     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
534061     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

534062     %let EMEXCEPTIONSTRING=;
534063     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
534064     * TRAIN: Boost6;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost6;
534065     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
534066     %let EM_ACTION = TRAIN;
534067     %let syscc = 0;
534068     %macro main;
534069     
534070       filename temp catalog 'sashelp.emmodl.boost_macros.source';
534071       %include temp;
534072       filename temp;
534073     
534074       %setProperties;
534075     
534076       %if %upcase(&EM_ACTION) = CREATE %then %do;
534077         filename temp catalog 'sashelp.emmodl.boost_create.source';
534078         %include temp;
534079         filename temp;
534080     
534081         %create;
534082       %end;
534083     
534084        %else
534085        %if %upcase(&EM_ACTION) = TRAIN %then %do;
534086     
534087            filename temp catalog 'sashelp.emmodl.boost_train.source';
534088            %include temp;
534089            filename temp;
534090            %train;
534091        %end;
534092     
534093       %else
534094       %if %upcase(&EM_ACTION) = SCORE %then %do;
534095         filename temp catalog 'sashelp.emmodl.boost_score.source';
534096         %include temp;
534097         filename temp;
534098     
534099         %score;
534100     
534101       %end;
534102     
534103       %else
534104       %if %upcase(&EM_ACTION) = REPORT %then %do;
534105     
534106            filename temp catalog 'sashelp.emmodl.boost_report.source';
534107            %include temp;
534108            filename temp;
534109     
534110            %report;
534111        %end;
534112     
534113        %doendm:
534114     %mend main;
534115     
534116     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
534118    +%macro SetProperties;
534120    +     /* boost options */
534121    +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
534122    +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
534123    +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
534124    +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
534125    +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
534126    +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
534127    +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
534128    +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
534129    +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
534130    +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
534131    +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
534132    +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
534134    +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
534135    +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
534136    +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
534137    +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
534138    +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
534139    +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
534140    +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
534141    +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
534143    +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
534144    +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
534145    +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
534146    +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
534148    +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
534149    +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
534150    +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
534152    +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
534156    +%macro train;
534158    +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
534159    +   %include temp;
534160    +   filename temp;
534162    +   %if &EM_IMPORT_DATA eq %then %do;
534163    +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
534164    +       %put &em_codebar;
534165    +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
534165   !+NOQUOTE));
534166    +       %put &errormsg;
534167    +       %put &em_codebar;
534168    +       %goto doendm;
534169    +   %end;
534170    +   %else
534171    +       %let EMEXCEPTIONSTRING =;
534173    +   %if  &EM_NUM_TARGET ne 1 %then %do;
534174    +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
534175    +        %put &em_codebar;
534176    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
534176   !+NOQUOTE));
534177    +        %put &errormsg;
534178    +        %put &em_codebar;
534179    +        %goto doendm;
534180    +   %end;
534182    +   %let target_level = %EM_TARGET_LEVEL;
534183    +   %let target_var = %EM_TARGET;
534185    +   /* check actual num of target levels */
534186    +   %if (&target_Level eq BINARY) %then %do;
534187    +      %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&target_Var,
534188    +                              nLevel=_nTargetLevel );
534189    +      %if &_nTargetLevel  > 2 %then %do;
534190    +        %let EMEXCEPTIONSTRING =
534190   !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
534191    +        %put &em_codebar;
534192    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
534192   !+NOQUOTE));
534193    +        %put &errormsg;
534194    +        %put &em_codebar;
534195    +        %goto doendm;
534196    +      %end;
534197    +   %end;
534199    +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
534199   !+(&EM_NUM_ORDINAL_INPUT < 1)
534200    +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
534201    +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
534202    +        %put &em_codebar;
534203    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
534203   !+;
534204    +        %put &errormsg;
534205    +        %put &em_codebar;
534206    +        %goto doendm;
534207    +   %end;
534209    +   /* Initialize property macro variables */
534210    +   %SetProperties;
534212    +   /* data sets */
534213    +   %EM_GETNAME(key=MODEL, type=DATA);
534214    +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
534215    +   %EM_GETNAME(key=SUBFIT, type=DATA);
534216    +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
534218    +   /* files
534219    +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
534221    +   /* retrieve target information */
534222    +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
534224    +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
534225    +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
534226    +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
534227    +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
534228    +   %do %while(^ %sysfunc(fetch(&dsid)));
534229    +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
534230    +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
534231    +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
534232    +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
534233    +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
534234    +   %end;
534235    +   %let dsid = %sysfunc(close(&dsid));
534237    +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
534237   !+support ordinal target */
534238    +   %if &Target_Level eq ORDINAL %then %do;
534239    +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
534240    +        %put &em_codebar;
534241    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
534241   !+error_invalidordinaltarget_note, NOQUOTE));
534242    +        %put &errormsg;
534243    +        %put &em_codebar;
534244    +        %goto doendm;
534245    +   %end;
534247    +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
534247   !+thrown */
534248    +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
534248   !+)) %then %do;
534249    +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
534250    +        %put &em_codebar;
534251    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
534251   !+NOQUOTE));
534252    +        %put &errormsg;
534253    +        %put &em_codebar;
534254    +        %goto doendm;
534255    +   %end;
534257    +   %runBoostProcedure;
534260    +   %doendm:
534261    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
534262    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
534263    +  %global &nLevel;
534264    +  proc dmdb batch data=&indata
534265    +    classout=_tmp_dmdbout;
534266    +    class &target;
534267    +  run;
534268    +  data _tmp_dmdbout;
534269    +    set _tmp_dmdbout;
534270    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
534271    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
534272    +  run;
534273    +  data _null_;
534274    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
534275    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
534276    +    %let dsid = %sysfunc(close(&dsid));
534277    +     call symput("&nLevel", put(&_obs, Best12.));
534278    +  run;
534280    +  proc datasets lib=work nolist;
534281    +     delete _tmp_dmdbout;
534282    +  run;
534283    +  quit;
534284    +%Mend CheckBinaryTargetLevel;
534287    +%macro runBoostProcedure;
534289    +  proc sql;
534290    +    reset noprint;
534291    +    select count(*) into :nobs from &EM_IMPORT_DATA;
534292    +  quit;
534294    +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
534296    +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
534297    +      iterations = &EM_PROPERTY_ITERATIONS
534298    +    %end;
534300    +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
534301    +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
534302    +       trainproportion = &tprop
534303    +    %end;
534305    +    %if &EM_PROPERTY_SEED ne %then %do;
534306    +       seed = &EM_PROPERTY_SEED
534307    +    %end;
534309    +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
534310    +       shrinkage = &EM_PROPERTY_SHRINKAGE
534311    +    %end;
534313    +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
534314    +      leaffraction = &EM_PROPERTY_LEAFFRACTION
534315    +    %end;
534317    +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
534318    +    %if &splitsize ge &nobs %then %do;
534319    +       %let splitsize= .;
534320    +    %end;
534321    +    %if &splitsize ne . %then %do;
534322    +      splitsize = &splitsize
534323    +    %end;
534325    +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
534326    +      mincatsize = &EM_PROPERTY_MINCATSIZE
534327    +    %end;
534329    +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
534330    +       maxbranch = &EM_PROPERTY_MAXBRANCH
534331    +    %end;
534333    +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
534334    +       maxdepth = &EM_PROPERTY_MAXDEPTH
534335    +    %end;
534337    +    %let nsurrs = ;
534338    +    %if &EM_PROPERTY_NSURRS ne %then %do;
534339    +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
534339   !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
534340    +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
534341    +      maxsurrs = &nsurrs
534342    +    %end;
534344    +    %if &EM_PROPERTY_MISSING ne %then %do;
534345    +      Missing = &EM_PROPERTY_MISSING
534346    +    %end;
534348    +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
534349    +      reusevar = &EM_PROPERTY_REUSEVAR
534350    +    %end;
534351    +/*
534352    +    %if &EM_PROPERTY_PRECISION ne %then %do;
534353    +      intervaldecimals=&EM_PROPERTY_PRECISION
534354    +    %end;
534355    +*/
534356    +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
534357    +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
534358    +    %end;
534360    +    %if &Target_Event ne %then %do;
534361    +      Event="&Target_Event"
534362    +    %end;
534364    +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
534365    +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
534366    +    %end;
534368    +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
534369    +      IntervalBins = &EM_PROPERTY_INTERVALBINS
534370    +    %end;
534372    +    %if &TARGET_LEVEL eq INTERVAL %then %do;
534373    +      %if &EM_PROPERTY_HUBER ne %then %do;
534374    +        Huber=&EM_PROPERTY_HUBER
534375    +      %end;
534376    +    %end;
534377    +    ;
534379    +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
534380    +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
534381    +    %end;
534383    +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
534383   !+ne  %then %do;
534384    +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
534384   !+%EM_NOMINAL_REJECTED / level = nominal;
534385    +    %end;
534387    +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
534388    +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
534389    +    %end;
534391    +    %if %EM_FREQ ne %then %do;
534392    +       freq %EM_FREQ;
534393    +    %end;
534395    +    target %EM_TARGET / level = &TARGET_LEVEL;
534397    +    &EM_DEC_STATEMENT;
534399    +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
534400    +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
534401    +    %end;
534402    +    %if &EM_PROPERTY_NODESIZE ne %then %do;
534403    +       nodesize = &EM_PROPERTY_NODESIZE
534404    +    %end;
534405    +    ;
534406    +    save model=&EM_USER_MODEL;
534407    +  run;
534408    +  quit;
534409    +  %em_checkerror();
534411    +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta3_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS8.Meta3_TRAIN;
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS8.Meta3_TRAIN iterations = 
1000 trainproportion = 1 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 20 
maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 15 Exhaustive = 5000 
Event="1                               " CategoricalBins = 100 IntervalBins = 300 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Frq Mnt MntMeatProducts NumCatalogPurchases 
NumDealsPurchases NumWebVisitsMonth Recency
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Marital_Status
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(RUNBOOSTPROCEDURE):   / level = BINARY;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = RAM nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS8.Boost6_MODEL;
NOTE: 1553212 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 75080704 bytes.
NOTE: Passed training data 5000 times.
NOTE: Current TREEBOOST model contains 1000 trees.
NOTE: Training used 616696 bytes of work memory.
NOTE: The data set EMWS8.BOOST6_MODEL has 128523 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           10.77 seconds
      cpu time            10.76 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           10.79 seconds
      cpu time            10.78 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

534414     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost6;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
534415     
534416     *------------------------------------------------------------*;
534417     * End TRAIN: Boost6;
534418     *------------------------------------------------------------*;

534419     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
534420     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
534421     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
534422     ;
MPRINT(EM_DIAGRAM):   ;
534423     ;
MPRINT(EM_DIAGRAM):   ;
534424     ;
MPRINT(EM_DIAGRAM):   ;
534425     ;
MPRINT(EM_DIAGRAM):   ;
534426     quit;
MPRINT(EM_DIAGRAM):   quit;
534427     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
534428     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
534429     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
534430     /*; *"; *'; */
534431     ;
MPRINT(EM_DIAGRAM):   ;
534432     run;
MPRINT(EM_DIAGRAM):   run;
534433     quit;
MPRINT(EM_DIAGRAM):   quit;
534434     /* Reset EM Options */
534435     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
534436     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
534437     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
