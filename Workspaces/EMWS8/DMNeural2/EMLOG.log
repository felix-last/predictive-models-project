*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                09.23 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                09.23 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1VF5MSA
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1VF5MSA new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
1226444    proc freq data=EMWS8.DMNeural2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.DMNeural2_VariableSet noprint;
1226445    table ROLE*LEVEL/out=WORK.DMNeural2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.DMNeural2META;
1226446    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS8.DMNEURAL2_VARIABLESET.
NOTE: The data set WORK.DMNEURAL2META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226447    proc print data=WORK.DMNeural2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.DMNeural2META label noobs;
1226448    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1226449    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1226449  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1226449  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1226450    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1226451    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1226452    run;
 
NOTE: There were 2 observations read from the data set WORK.DMNEURAL2META.
NOTE: The PROCEDURE PRINT printed page 1180.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226453    title10;
MPRINT(EM_DIAGRAM):   title10;
1226454    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.PRINCOMP_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.DMNeural2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.DMNeural2_DepVar_DD
_TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.DMNeural2_DepVar_DD
out=EMWS8.DMNeural2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1226501    data WORK.DMNeural2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.DMNeural2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
1226502    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1226503    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1226503  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1226503  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1226504       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1226504  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1226504  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1226505    set EMWS8.DMNEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.DMNEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
1226506    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1226507    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1226508    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1226509    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1226510    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1226511    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1226512    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1226513    end;
MPRINT(EM_DIAGRAM):   end;
1226514    output;
MPRINT(EM_DIAGRAM):   output;
1226515    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.DMNEURAL2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.DMNEURAL2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226516    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1226517    proc print data=WORK.DMNeural2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.DMNeural2_EVENT noobs label;
1226518    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1226519    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1226520    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1226521    run;
 
NOTE: There were 1 observations read from the data set WORK.DMNEURAL2_EVENT.
NOTE: The PROCEDURE PRINT printed page 1181.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226522    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1226523    proc print data = EMWS8.DMNeural2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.DMNeural2_DepVar_DM noobs label;
1226524    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1226525    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1226526    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1226526  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1226526  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1226527    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1226528    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1226529    run;
 
NOTE: There were 7 observations read from the data set EMWS8.DMNEURAL2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1182.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226530    title10;
MPRINT(EM_DIAGRAM):   title10;
1226531    data WORK.M0D216MR;
MPRINT(EM_DIAGRAM):    data WORK.M0D216MR;
1226532    set WORK.M0D216MR;
MPRINT(EM_DIAGRAM):   set WORK.M0D216MR;
1226533    if role = 'TARGET' and use = 'Y' then do;
MPRINT(EM_DIAGRAM):   if role = 'TARGET' and use = 'Y' then do;
1226534    role = 'TARGET';
MPRINT(EM_DIAGRAM):   role = 'TARGET';
1226535    output;
MPRINT(EM_DIAGRAM):   output;
1226536    end;
MPRINT(EM_DIAGRAM):   end;
1226537    if role = 'INPUT' and use in ('Y','D') then do;
MPRINT(EM_DIAGRAM):   if role = 'INPUT' and use in ('Y','D') then do;
1226538    role = 'INPUT';
MPRINT(EM_DIAGRAM):   role = 'INPUT';
1226539    output;
MPRINT(EM_DIAGRAM):   output;
1226540    end;
MPRINT(EM_DIAGRAM):   end;
1226541    if role = 'REJECTED' and use = 'Y' then do;
MPRINT(EM_DIAGRAM):   if role = 'REJECTED' and use = 'Y' then do;
1226542    role = 'INPUT';
MPRINT(EM_DIAGRAM):   role = 'INPUT';
1226543    output;
MPRINT(EM_DIAGRAM):   output;
1226544    end;
MPRINT(EM_DIAGRAM):   end;
1226545    if role = 'FREQ' then do;
MPRINT(EM_DIAGRAM):   if role = 'FREQ' then do;
1226546    role = 'FREQ';
MPRINT(EM_DIAGRAM):   role = 'FREQ';
1226547    output;
MPRINT(EM_DIAGRAM):   output;
1226548    end;
MPRINT(EM_DIAGRAM):   end;
1226549    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M0D216MR.
NOTE: The data set WORK.M0D216MR has 19 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226550    data WORK.M0D216MR;
MPRINT(EM_DIAGRAM):    data WORK.M0D216MR;
1226551    set WORK.M0D216MR end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0D216MR end=eof;
1226552    output;
MPRINT(EM_DIAGRAM):   output;
1226553    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
1226554    NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
1226555    ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
1226556    LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
1226557    TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
1226558    output;
MPRINT(EM_DIAGRAM):   output;
1226559    end;
MPRINT(EM_DIAGRAM):   end;
1226560    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M0D216MR.
NOTE: The data set WORK.M0D216MR has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.DMNEURAL2_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
1226561    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1226562    * DMNeural2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * DMNeural2: Create decision matrix;
1226563    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1226564    data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
1226565      length   DepVar                           $  32
1226566               COUNT                                8
1226567               DATAPRIOR                            8
1226568               TRAINPRIOR                           8
1226569               DECPRIOR                             8
1226570               DECISION1                            8
1226571               DECISION2                            8
1226572               ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
1226573
1226574      label    COUNT="Level Counts"
1226575               DATAPRIOR="Data Proportions"
1226576               TRAINPRIOR="Training Proportions"
1226577               DECPRIOR="Decision Priors"
1226578               DECISION1="1"
1226579               DECISION2="0"
1226580               ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
1226581      format   COUNT 10.
1226582               ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
1226583    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
1226583  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.151221567;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
1226584    output;
MPRINT(EM_DIAGRAM):   output;
1226585    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
1226585  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.848778433;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
1226586    output;
MPRINT(EM_DIAGRAM):   output;
1226587    ;
MPRINT(EM_DIAGRAM):   ;
1226588    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226589    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1226590    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
1226591    label DECISION1= '1';
1226592    label DECISION2= '0';
1226593    run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
1226594    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMNeural2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1226595    *------------------------------------------------------------* ;
1226596    * DMNeural2: DMDBClass Macro ;
1226597    *------------------------------------------------------------* ;
1226598    %macro DMDBClass;
1226599        DepVar(DESC)
1226600    %mend DMDBClass;
1226601    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1226602    * DMNeural2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * DMNeural2: DMDBVar Macro ;
1226603    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1226604    %macro DMDBVar;
1226605        PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5 PC_6
1226606       PC_7 PC_8 PC_9 Year_Birth
1226607    %mend DMDBVar;
1226608    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1226609    * DMNeural2: Create DMDB;
MPRINT(EM_DIAGRAM):   * DMNeural2: Create DMDB;
1226610    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1226611    proc dmdb batch data=EMWS8.PRINCOMP_TRAIN
1226612    dmdbcat=WORK.DMNeural2_DMDB
1226613    maxlevel = 513
1226614    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.PRINCOMP_TRAIN dmdbcat=WORK.DMNeural2_DMDB
maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
1226615    class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
1226616    var %DMDBVar;
MPRINT(DMDBVAR):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5
PC_6 PC_7 PC_8 PC_9 Year_Birth
MPRINT(EM_DIAGRAM):  ;
1226617    target
1226618    DepVar
1226619    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
1226620    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
1226621    quit;
1226622    *--- end code ---*;
 
1226623    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
1226624    * DMNeural2: Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * DMNeural2: Input Variables Macro ;
1226625    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1226626    %macro INPUTS;
1226627        PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5 PC_6
1226628       PC_7 PC_8 PC_9 Year_Birth
1226629    %mend INPUTS;
1226630    proc dmneurl data=EMWS8.PRINCOMP_TRAIN dmdbcat=WORK.DMNeural2_DMDB
1226631    outest=EMWS8.DMNeural2_ESTIMATE outfit=WORK._OUTFIT_DMNEURAL
1226632    out=WORK._OUT_DMNEURAL outclass=WORK._OUTCLASSDMNEURL_3PIMQLD
1226633    optcrit=ACC maxcomp=6 maxstage=10 maxfunc=1000
1226634    selcrit=SSE
1226635    maxiter=400 maxvect=800 memsiz=8 stopr2=0.00005 cutoff=0.5 maxrows = 3000
1226636    absgconv=0.0005 gconv=1E-8
1226637    NOMONITOR
1226638    ;
MPRINT(EM_DIAGRAM):   proc dmneurl data=EMWS8.PRINCOMP_TRAIN dmdbcat=WORK.DMNeural2_DMDB
outest=EMWS8.DMNeural2_ESTIMATE outfit=WORK._OUTFIT_DMNEURAL out=WORK._OUT_DMNEURAL
outclass=WORK._OUTCLASSDMNEURL_3PIMQLD optcrit=ACC maxcomp=6 maxstage=10 maxfunc=1000
selcrit=SSE maxiter=400 maxvect=800 memsiz=8 stopr2=0.00005 cutoff=0.5 maxrows = 3000
absgconv=0.0005 gconv=1E-8 NOMONITOR ;
MPRINT(EM_DIAGRAM):   var
1226639    var %INPUTS;
MPRINT(INPUTS):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5
PC_6 PC_7 PC_8 PC_9 Year_Birth
MPRINT(EM_DIAGRAM):  ;
1226640    target DepVar;
MPRINT(EM_DIAGRAM):   target DepVar;
1226641    ;
MPRINT(EM_DIAGRAM):   ;
1226642    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._OUTCLASSDMNEURL_3PIMQLD has 2 observations and 3 variables.
 
Building X'X  for target: DepVar rows=19 memory=0.00 meg.
2374 records read
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=981
NOTE: Sparsity  Percentage=0.0276874463
     ---------- Optimization Cycle (Stage=0) ----------
-------------------- Activation= SQUARE (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=3 Crit= 0.0432574: SSE=410.772241 Acc= 88.8374
-------------------- Activation= TANH (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=6 Crit=0.04353471: SSE=413.405571 Acc= 88.7110
-------------------- Activation= ARCTAN (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: ARCTAN: Iter=8 Crit=0.04337489: SSE=411.887915 Acc= 88.5425
-------------------- Activation= LOGIST (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=25 Crit=0.04367086: SSE=414.698508 Acc= 88.6268
-------------------- Activation= GAUSS (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=6.
NOTE: GAUSS: Iter=13 Crit=0.05865079: SSE=556.947857 Acc= 86.0152
-------------------- Activation= SIN (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: SIN: Iter=10 Crit=0.04315339: SSE=409.784549 Acc= 88.7110
-------------------- Activation= COS (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: COS: Iter=6 Crit=0.05656143: SSE=537.107346 Acc= 86.1415
-------------------- Activation= EXP (Stage=0) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=11 Crit=0.05025475: SSE=477.219095 Acc= 88.2898
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=1262
NOTE: Sparsity  Percentage=0.035618305
2374 records read
     ---------- Optimization Cycle (Stage=1) ----------
-------------------- Activation= SQUARE (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit= 0.0391813: SSE= 370.23681 Acc= 89.7641
-------------------- Activation= TANH (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=8 Crit=0.03930242: SSE=371.447166 Acc= 89.8905
-------------------- Activation= ARCTAN (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: ARCTAN: Iter=7 Crit=0.03931628: SSE=371.570161 Acc= 89.8905
-------------------- Activation= LOGIST (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=4 Crit=  0.039335: SSE=371.961062 Acc= 89.9326
-------------------- Activation= GAUSS (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: GAUSS: Iter=6 Crit=0.04151472: SSE=394.220463 Acc= 89.0901
-------------------- Activation= SIN (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=4 Crit=0.03939849: SSE=372.470794 Acc= 89.9326
-------------------- Activation= COS (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=6.
NOTE: COS: Iter=8 Crit= 0.0415108: SSE=394.182009 Acc= 89.0901
-------------------- Activation= EXP (Stage=1) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=3 Crit=0.03922386: SSE=370.908281 Acc= 89.7220
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=1153
NOTE: Sparsity  Percentage=0.0325419221
2374 records read
     ---------- Optimization Cycle (Stage=2) ----------
-------------------- Activation= SQUARE (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03843454: SSE=362.172337 Acc= 90.0590
-------------------- Activation= TANH (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=4 Crit=0.03868491: SSE=364.587267 Acc= 89.8905
-------------------- Activation= ARCTAN (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: ARCTAN: Iter=6 Crit= 0.0386843: SSE= 364.41662 Acc= 89.9326
-------------------- Activation= LOGIST (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=0 Crit=0.03890443: SSE=367.640559 Acc= 89.6799
-------------------- Activation= GAUSS (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: GAUSS: Iter=7 Crit= 0.0386395: SSE=365.187258 Acc= 90.1432
-------------------- Activation= SIN (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=4 Crit=0.03874405: SSE=365.323401 Acc= 89.8484
-------------------- Activation= COS (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=4.
NOTE: COS: Iter=5 Crit=0.03894422: SSE=368.500505 Acc= 89.8062
-------------------- Activation= EXP (Stage=2) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=2 Crit=0.03864214: SSE=364.065141 Acc= 89.8905
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=1185
NOTE: Sparsity  Percentage=0.0334450804
2374 records read
     ---------- Optimization Cycle (Stage=3) ----------
-------------------- Activation= SQUARE (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03814082: SSE=358.740376 Acc= 89.9326
-------------------- Activation= TANH (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=5 Crit= 0.0382802: SSE= 359.95765 Acc= 90.0168
-------------------- Activation= ARCTAN (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: ARCTAN: Iter=4 Crit=0.03831405: SSE=360.503096 Acc= 90.1011
-------------------- Activation= LOGIST (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: LOGIST: Iter=1 Crit=0.03830277: SSE=360.402556 Acc= 89.9747
-------------------- Activation= GAUSS (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=5.
NOTE: GAUSS: Iter=5 Crit=0.03822946: SSE=360.616208 Acc= 89.9747
-------------------- Activation= SIN (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=3 Crit=0.03830361: SSE= 360.34578 Acc= 89.9747
-------------------- Activation= COS (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=4.
NOTE: COS: Iter=6 Crit=0.03821675: SSE=360.507778 Acc= 89.9747
-------------------- Activation= EXP (Stage=3) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=1 Crit=0.03828748: SSE=360.045584 Acc= 90.1011
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=889
NOTE: Sparsity  Percentage=0.0250908662
2374 records read
     ---------- Optimization Cycle (Stage=4) ----------
-------------------- Activation= SQUARE (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03802949: SSE=357.657033 Acc= 90.0590
-------------------- Activation= TANH (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: TANH: Iter=10 Crit=0.03796636: SSE=356.561993 Acc= 90.1853
-------------------- Activation= ARCTAN (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: ARCTAN: Iter=5 Crit=0.03804636: SSE= 357.72842 Acc= 90.1011
-------------------- Activation= LOGIST (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=0 Crit=0.03806832: SSE= 357.96127 Acc= 90.0168
-------------------- Activation= GAUSS (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=3.
NOTE: GAUSS: Iter=7 Crit=0.03806407: SSE=358.368229 Acc= 89.8062
-------------------- Activation= SIN (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: SIN: Iter=4 Crit=0.03804939: SSE= 357.78094 Acc= 90.0590
-------------------- Activation= COS (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=5.
NOTE: COS: Iter=4 Crit=0.03811228: SSE=358.477056 Acc= 90.0168
-------------------- Activation= EXP (Stage=4) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=1 Crit=0.03805028: SSE=357.820862 Acc= 90.1011
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=1352
NOTE: Sparsity  Percentage=0.0381584377
2374 records read
     ---------- Optimization Cycle (Stage=5) ----------
-------------------- Activation= SQUARE (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03799234: SSE= 356.54588 Acc= 90.2696
-------------------- Activation= TANH (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: TANH: Iter=4 Crit=0.03800661: SSE=  356.8159 Acc= 90.2275
-------------------- Activation= ARCTAN (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: ARCTAN: Iter=4 Crit=0.03800831: SSE=356.770667 Acc= 90.2696
-------------------- Activation= LOGIST (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=0 Crit=0.03801105: SSE=356.933258 Acc= 90.2696
-------------------- Activation= GAUSS (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=3.
NOTE: GAUSS: Iter=3 Crit= 0.0380327: SSE=357.275477 Acc= 90.1853
-------------------- Activation= SIN (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=3 Crit=0.03800717: SSE=356.747284 Acc= 90.2275
-------------------- Activation= COS (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=6.
NOTE: COS: Iter=5 Crit=0.03802643: SSE=357.155436 Acc= 90.1432
-------------------- Activation= EXP (Stage=5) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=1 Crit=0.03801112: SSE=356.842474 Acc= 90.2696
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=96
NOTE: Sparsity  Percentage=39.669421488
2374 records read
     ---------- Optimization Cycle (Stage=6) ----------
-------------------- Activation= SQUARE (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03800019: SSE= 356.66362 Acc= 90.3117
-------------------- Activation= TANH (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=2 Crit=0.03800904: SSE=356.498727 Acc= 90.2275
-------------------- Activation= ARCTAN (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: ARCTAN: Iter=3 Crit=0.03800216: SSE=356.693498 Acc= 90.3117
-------------------- Activation= LOGIST (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=0 Crit=0.03800259: SSE=356.797099 Acc= 90.1853
-------------------- Activation= GAUSS (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: GAUSS: Iter=3 Crit=0.03800195: SSE=356.620416 Acc= 90.3117
-------------------- Activation= SIN (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=2 Crit=0.03800094: SSE=356.699575 Acc= 90.2696
-------------------- Activation= COS (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: COS: Iter=4 Crit=0.03800195: SSE=356.622166 Acc= 90.3117
-------------------- Activation= EXP (Stage=6) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=1.
NOTE: EXP: Iter=2 Crit= 0.0380088: SSE=356.562998 Acc= 90.2696
2374 records read
2374 records read
2374 records read
2374 records read
NOTE: Distinctive Patterns=97
NOTE: Sparsity  Percentage=40.082644628
2374 records read
     ---------- Optimization Cycle (Stage=7) ----------
-------------------- Activation= SQUARE (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SQUARE: Iter=1 Crit=0.03799298: SSE=356.795009 Acc= 90.2275
-------------------- Activation= TANH (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: TANH: Iter=2 Crit=0.03799831: SSE=356.642556 Acc= 90.3117
-------------------- Activation= ARCTAN (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: ARCTAN: Iter=2 Crit=0.03799991: SSE= 356.62087 Acc= 90.3117
-------------------- Activation= LOGIST (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: LOGIST: Iter=0 Crit=0.03800189: SSE=356.650836 Acc= 90.2275
-------------------- Activation= GAUSS (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: GAUSS: Iter=4 Crit=0.03801414: SSE= 356.55019 Acc= 90.2696
-------------------- Activation= SIN (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: SIN: Iter=3 Crit=0.03799427: SSE=356.831052 Acc= 90.2696
-------------------- Activation= COS (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: Singular Hessian at result, nullity=2.
NOTE: COS: Iter=6 Crit= 0.0380141: SSE=356.549479 Acc= 90.2696
-------------------- Activation= EXP (Stage=7) --------------------
NOTE: ABSGCONV convergence criterion satisfied.
NOTE: EXP: Iter=2 Crit=0.03799483: SSE=356.910929 Acc= 90.2696
2374 records read
NOTE: The data set EMWS8.DMNEURAL2_ESTIMATE has 110 observations and 24 variables.
2374 records read
NOTE: The data set WORK._OUT_DMNEURAL has 2374 observations and 4 variables.
NOTE: The data set WORK._OUTFIT_DMNEURAL has 9 observations and 9 variables.
*** Total Number of Runs through Data :       42
*** Total Number of NL Optimizations  :       64
*** Total Number of Iterations in NLP :      268
*** Total Number Function Calls in NLP:      610
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           30.40 seconds
      cpu time            30.42 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The PROCEDURE DMNEURL printed pages 1183-1210.
NOTE: PROCEDURE DMNEURL used (Total process time):
      real time           30.41 seconds
      cpu time            30.42 seconds
 
 
1226643    data WORK._OUTFIT_DMNEURAL;
MPRINT(EM_DIAGRAM):    data WORK._OUTFIT_DMNEURAL;
1226644    set WORK._OUTFIT_DMNEURAL;
MPRINT(EM_DIAGRAM):   set WORK._OUTFIT_DMNEURAL;
1226645    if _TYPE_^='_FITIND_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_FITIND_' then delete;
1226646    label _STAGE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stage, noquote))"
1226646  ! ;
MPRINT(EM_DIAGRAM):   label _STAGE_ = "Training Stage";
1226647    _STAGE_=_STAGE_-1;
MPRINT(EM_DIAGRAM):   _STAGE_=_STAGE_-1;
 
NOTE: There were 9 observations read from the data set WORK._OUTFIT_DMNEURAL.
NOTE: The data set WORK._OUTFIT_DMNEURAL has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226648    proc transpose data=WORK._OUTFIT_DMNEURAL out=WORK._OUTFIT_DMNEURAL prefix=TRAINING;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._OUTFIT_DMNEURAL out=WORK._OUTFIT_DMNEURAL
prefix=TRAINING;
 
NOTE: There were 8 observations read from the data set WORK._OUTFIT_DMNEURAL.
NOTE: The data set WORK._OUTFIT_DMNEURAL has 6 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226649    data WORK._OUTFIT_DMNEURAL;
MPRINT(EM_DIAGRAM):   data WORK._OUTFIT_DMNEURAL;
1226650    set WORK._OUTFIT_DMNEURAL;
MPRINT(EM_DIAGRAM):   set WORK._OUTFIT_DMNEURAL;
1226651    label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Statistic";
1226652    label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_statlabel,
1226652  ! noquote))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label of Statistic";
1226653    rename _NAME_=STATISTIC;
MPRINT(EM_DIAGRAM):   rename _NAME_=STATISTIC;
1226654    rename _LABEL_=LABEL;
MPRINT(EM_DIAGRAM):   rename _LABEL_=LABEL;
1226655    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK._OUTFIT_DMNEURAL.
NOTE: The data set WORK._OUTFIT_DMNEURAL has 6 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226656    data WORK._DSSTAGEDMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):    data WORK._DSSTAGEDMNEURL_3PIMQLD;
1226657    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226658    by _STAGE_;
MPRINT(EM_DIAGRAM):   by _STAGE_;
1226659    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226660    keep _STAGE_ _NAME_;
MPRINT(EM_DIAGRAM):   keep _STAGE_ _NAME_;
1226661    if FIRST._STAGE_ then output;
MPRINT(EM_DIAGRAM):   if FIRST._STAGE_ then output;
1226662    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._DSSTAGEDMNEURL_3PIMQLD has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226663    data WORK._DSSTDMEANDMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):    data WORK._DSSTDMEANDMNEURL_3PIMQLD;
1226664    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226665    if _TYPE_='_STDEV_' or _TYPE_='_MEAN_' then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_STDEV_' or _TYPE_='_MEAN_' then output;
1226666    DROP _TARGET_ _NAME_ _STAGE_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   DROP _TARGET_ _NAME_ _STAGE_ _MEAN_ _STDEV_;
1226667    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._DSSTDMEANDMNEURL_3PIMQLD has 2 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226668    data WORK._DSPARADMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):    data WORK._DSPARADMNEURL_3PIMQLD;
1226669    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226670    if _TYPE_='_PARMS_' then if _STAGE_=0 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=0 then output;
1226671    if _TYPE_='_PARMS_' then if _STAGE_=1 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=1 then output;
1226672    if _TYPE_='_PARMS_' then if _STAGE_=2 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=2 then output;
1226673    if _TYPE_='_PARMS_' then if _STAGE_=3 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=3 then output;
1226674    if _TYPE_='_PARMS_' then if _STAGE_=4 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=4 then output;
1226675    if _TYPE_='_PARMS_' then if _STAGE_=5 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=5 then output;
1226676    if _TYPE_='_PARMS_' then if _STAGE_=6 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=6 then output;
1226677    if _TYPE_='_PARMS_' then if _STAGE_=7 then output;
MPRINT(EM_DIAGRAM):   if _TYPE_='_PARMS_' then if _STAGE_=7 then output;
1226678    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._DSPARADMNEURL_3PIMQLD has 64 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226679    data WORK._DSPARADMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):    data WORK._DSPARADMNEURL_3PIMQLD;
1226680    set WORK._DSPARADMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):   set WORK._DSPARADMNEURL_3PIMQLD;
1226681    by _STAGE_;
MPRINT(EM_DIAGRAM):   by _STAGE_;
1226682    if FIRST._STAGE_ then output;
MPRINT(EM_DIAGRAM):   if FIRST._STAGE_ then output;
1226683    DROP _TARGET_ _TYPE_ _MEAN_ _STDEV_ _NAME_ _STAGE_;
MPRINT(EM_DIAGRAM):   DROP _TARGET_ _TYPE_ _MEAN_ _STDEV_ _NAME_ _STAGE_;
 
NOTE: There were 64 observations read from the data set WORK._DSPARADMNEURL_3PIMQLD.
NOTE: The data set WORK._DSPARADMNEURL_3PIMQLD has 8 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226684    proc transpose data=WORK._DSPARADMNEURL_3PIMQLD out=WORK._DSPARADMNEURL_3PIMQLD
1226684  ! prefix=STAGE;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._DSPARADMNEURL_3PIMQLD
out=WORK._DSPARADMNEURL_3PIMQLD prefix=STAGE;
 
NOTE: There were 8 observations read from the data set WORK._DSPARADMNEURL_3PIMQLD.
NOTE: The data set WORK._DSPARADMNEURL_3PIMQLD has 18 observations and 9 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226685    proc transpose data=WORK._DSPARADMNEURL_3PIMQLD out=WORK._DSPARADMNEURL_3PIMQLD
1226685  ! prefix=PARA;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._DSPARADMNEURL_3PIMQLD
out=WORK._DSPARADMNEURL_3PIMQLD prefix=PARA;
1226686    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._DSPARADMNEURL_3PIMQLD.
NOTE: The data set WORK._DSPARADMNEURL_3PIMQLD has 8 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226687    data WORK._OUTCLASSDMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):    data WORK._OUTCLASSDMNEURL_3PIMQLD;
1226688    set WORK._OUTCLASSDMNEURL_3PIMQLD;
MPRINT(EM_DIAGRAM):   set WORK._OUTCLASSDMNEURL_3PIMQLD;
1226689    if upcase(_VAR_)=upcase('DepVar') then delete;
MPRINT(EM_DIAGRAM):   if upcase(_VAR_)=upcase('DepVar') then delete;
1226690    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._OUTCLASSDMNEURL_3PIMQLD.
NOTE: The data set WORK._OUTCLASSDMNEURL_3PIMQLD has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226691    data WORK._SPRIN0;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN0;
1226692    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226693    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226694    if _STAGE_ ^='0' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='0' then delete;
1226695    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226694:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN0 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226696    proc transpose data=WORK._SPRIN0 out=WORK._SPRIN0 prefix=_SPRIN0;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN0 out=WORK._SPRIN0 prefix=_SPRIN0;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN0.
NOTE: The data set WORK._SPRIN0 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226697    data WORK._SPRIN0;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN0;
1226698    set WORK._SPRIN0;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN0;
1226699    if _SPRIN01=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN01=. then delete;
1226700    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN0.
NOTE: The data set WORK._SPRIN0 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226701    proc transpose data=WORK._SPRIN0 out=WORK._SPRIN0;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN0 out=WORK._SPRIN0;
1226702    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN0.
NOTE: The data set WORK._SPRIN0 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226703    data WORK._SPRIN1;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN1;
1226704    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226705    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226706    if _STAGE_ ^='1' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='1' then delete;
1226707    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226706:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN1 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226708    proc transpose data=WORK._SPRIN1 out=WORK._SPRIN1 prefix=_SPRIN1;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN1 out=WORK._SPRIN1 prefix=_SPRIN1;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN1.
NOTE: The data set WORK._SPRIN1 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226709    data WORK._SPRIN1;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN1;
1226710    set WORK._SPRIN1;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN1;
1226711    if _SPRIN11=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN11=. then delete;
1226712    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN1.
NOTE: The data set WORK._SPRIN1 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226713    proc transpose data=WORK._SPRIN1 out=WORK._SPRIN1;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN1 out=WORK._SPRIN1;
1226714    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN1.
NOTE: The data set WORK._SPRIN1 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226715    data WORK._SPRIN2;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN2;
1226716    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226717    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226718    if _STAGE_ ^='2' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='2' then delete;
1226719    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226718:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN2 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226720    proc transpose data=WORK._SPRIN2 out=WORK._SPRIN2 prefix=_SPRIN2;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN2 out=WORK._SPRIN2 prefix=_SPRIN2;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN2.
NOTE: The data set WORK._SPRIN2 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226721    data WORK._SPRIN2;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN2;
1226722    set WORK._SPRIN2;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN2;
1226723    if _SPRIN21=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN21=. then delete;
1226724    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN2.
NOTE: The data set WORK._SPRIN2 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226725    proc transpose data=WORK._SPRIN2 out=WORK._SPRIN2;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN2 out=WORK._SPRIN2;
1226726    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN2.
NOTE: The data set WORK._SPRIN2 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226727    data WORK._SPRIN3;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN3;
1226728    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226729    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226730    if _STAGE_ ^='3' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='3' then delete;
1226731    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226730:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN3 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226732    proc transpose data=WORK._SPRIN3 out=WORK._SPRIN3 prefix=_SPRIN3;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN3 out=WORK._SPRIN3 prefix=_SPRIN3;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN3.
NOTE: The data set WORK._SPRIN3 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226733    data WORK._SPRIN3;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN3;
1226734    set WORK._SPRIN3;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN3;
1226735    if _SPRIN31=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN31=. then delete;
1226736    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN3.
NOTE: The data set WORK._SPRIN3 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226737    proc transpose data=WORK._SPRIN3 out=WORK._SPRIN3;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN3 out=WORK._SPRIN3;
1226738    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN3.
NOTE: The data set WORK._SPRIN3 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226739    data WORK._SPRIN4;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN4;
1226740    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226741    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226742    if _STAGE_ ^='4' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='4' then delete;
1226743    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226742:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN4 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226744    proc transpose data=WORK._SPRIN4 out=WORK._SPRIN4 prefix=_SPRIN4;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN4 out=WORK._SPRIN4 prefix=_SPRIN4;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN4.
NOTE: The data set WORK._SPRIN4 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226745    data WORK._SPRIN4;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN4;
1226746    set WORK._SPRIN4;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN4;
1226747    if _SPRIN41=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN41=. then delete;
1226748    /* to delete _v_ variables */
 
The SAS System
 
NOTE: There were 18 observations read from the data set WORK._SPRIN4.
NOTE: The data set WORK._SPRIN4 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226749    proc transpose data=WORK._SPRIN4 out=WORK._SPRIN4;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN4 out=WORK._SPRIN4;
1226750    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN4.
NOTE: The data set WORK._SPRIN4 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226751    data WORK._SPRIN5;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN5;
1226752    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226753    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226754    if _STAGE_ ^='5' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='5' then delete;
1226755    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226754:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN5 has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226756    proc transpose data=WORK._SPRIN5 out=WORK._SPRIN5 prefix=_SPRIN5;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN5 out=WORK._SPRIN5 prefix=_SPRIN5;
 
NOTE: There were 6 observations read from the data set WORK._SPRIN5.
NOTE: The data set WORK._SPRIN5 has 18 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226757    data WORK._SPRIN5;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN5;
1226758    set WORK._SPRIN5;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN5;
1226759    if _SPRIN51=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN51=. then delete;
1226760    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN5.
NOTE: The data set WORK._SPRIN5 has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1226761    proc transpose data=WORK._SPRIN5 out=WORK._SPRIN5;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN5 out=WORK._SPRIN5;
1226762    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN5.
NOTE: The data set WORK._SPRIN5 has 6 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226763    data WORK._SPRIN6;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN6;
1226764    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226765    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226766    if _STAGE_ ^='6' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='6' then delete;
1226767    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226766:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN6 has 2 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226768    proc transpose data=WORK._SPRIN6 out=WORK._SPRIN6 prefix=_SPRIN6;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN6 out=WORK._SPRIN6 prefix=_SPRIN6;
 
NOTE: There were 2 observations read from the data set WORK._SPRIN6.
NOTE: The data set WORK._SPRIN6 has 18 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226769    data WORK._SPRIN6;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN6;
1226770    set WORK._SPRIN6;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN6;
1226771    if _SPRIN61=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN61=. then delete;
1226772    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN6.
NOTE: The data set WORK._SPRIN6 has 18 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226773    proc transpose data=WORK._SPRIN6 out=WORK._SPRIN6;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN6 out=WORK._SPRIN6;
1226774    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN6.
NOTE: The data set WORK._SPRIN6 has 2 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226775    data WORK._SPRIN7;
MPRINT(EM_DIAGRAM):    data WORK._SPRIN7;
1226776    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1226777    if _TYPE_^='_EIGVEC_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_^='_EIGVEC_' then delete;
1226778    if _STAGE_ ^='7' then delete;
MPRINT(EM_DIAGRAM):   if _STAGE_ ^='7' then delete;
1226779    drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
MPRINT(EM_DIAGRAM):   drop _TARGET_ _TYPE_ _STAGE_ _NAME_ _MEAN_ _STDEV_;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1226778:14
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._SPRIN7 has 2 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226780    proc transpose data=WORK._SPRIN7 out=WORK._SPRIN7 prefix=_SPRIN7;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN7 out=WORK._SPRIN7 prefix=_SPRIN7;
 
NOTE: There were 2 observations read from the data set WORK._SPRIN7.
NOTE: The data set WORK._SPRIN7 has 18 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226781    data WORK._SPRIN7;
MPRINT(EM_DIAGRAM):   data WORK._SPRIN7;
1226782    set WORK._SPRIN7;
MPRINT(EM_DIAGRAM):   set WORK._SPRIN7;
1226783    if _SPRIN71=. then delete;
MPRINT(EM_DIAGRAM):   if _SPRIN71=. then delete;
1226784    /* to delete _v_ variables */
 
NOTE: There were 18 observations read from the data set WORK._SPRIN7.
NOTE: The data set WORK._SPRIN7 has 18 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1226785    proc transpose data=WORK._SPRIN7 out=WORK._SPRIN7;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK._SPRIN7 out=WORK._SPRIN7;
1226786    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK._SPRIN7.
NOTE: The data set WORK._SPRIN7 has 2 observations and 19 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.23 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0HWJE7G
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0HWJE7G new;
MPRINT(EM_DIAGRAM):   run;
1226888    filename emflow
1226888  ! "C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * DMNeural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1226889    *------------------------------------------------------------*;
1226890    * DMNeural2: Scoring DATA data;
1226891    *------------------------------------------------------------*;
1226892    data EMWS8.DMNeural2_TRAIN
1226893    / view=EMWS8.DMNeural2_TRAIN
1226894    ;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_TRAIN / view=EMWS8.DMNeural2_TRAIN ;
1226895    set EMWS8.PRINCOMP_TRAIN
1226896    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
1226897    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas.
1226898   +**********************************************************;
MPRINT(EM_DIAGRAM):   **********************************************************;
1226899   +**** Begin scoring code for DMNeural;
MPRINT(EM_DIAGRAM):   **** Begin scoring code for DMNeural;
1226900   +**********************************************************;
MPRINT(EM_DIAGRAM):   **********************************************************;
1226901   +LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
1226902   +LABEL _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = "Warnings";
1226903   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH I_DepVar
1226903  !+       I_DepVar $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1226904   +LABEL I_DepVar="Into: DepVar";
MPRINT(EM_DIAGRAM):   LABEL I_DepVar= "Into: DepVar";
1226905   +LENGTH _FORMAT_ $200;
MPRINT(EM_DIAGRAM):   LENGTH _FORMAT_ $200;
1226906   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH _NORMFMT_
1226906  !+       _NORMFMT_ $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1226907   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH F_DepVar
1226907  !+       F_DepVar $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1226908   +LABEL F_DepVar="From: DepVar";
MPRINT(EM_DIAGRAM):   LABEL F_DepVar= "From: DepVar";
1226909   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH _TARGNOR_
1226909  !+       _TARGNOR_ $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1226910   +_FORMAT_ =PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT_ =PUT(DepVar, BEST.);
1226911   +%DMNORMCP(_FORMAT_ , _TARGNOR_ );
MPRINT(DMNORMCP):   _TARGNOR_=dmnorm(_FORMAT_,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1226912   +F_DepVar=_TARGNOR_;
MPRINT(EM_DIAGRAM):   F_DepVar=_TARGNOR_;
1226913   +DROP
1226914   +_FORMAT_ _NORMFMT_;
MPRINT(EM_DIAGRAM):   DROP _FORMAT_ _NORMFMT_;
1226915   +;
MPRINT(EM_DIAGRAM):   ;
1226916   +/*-------------------------------------------------------------------------*/
1226917   +*Impute missing values for interval variables;
MPRINT(EM_DIAGRAM):   *Impute missing values for interval variables;
1226918   +/*-------------------------------------------------------------------------*/
1226919   +;
MPRINT(EM_DIAGRAM):   ;
1226920   +if PC_1=. then _S1_PC_1 = 0;
MPRINT(EM_DIAGRAM):   if PC_1=. then _S1_PC_1 = 0;
1226921   +else _S1_PC_1=(PC_1-1.1934663685102E-14)/3.34529398009117;
MPRINT(EM_DIAGRAM):   else _S1_PC_1=(PC_1-1.1934663685102E-14)/3.34529398009117;
1226922   +if PC_10=. then _S2_PC_10 = 0;
MPRINT(EM_DIAGRAM):   if PC_10=. then _S2_PC_10 = 0;
1226923   +else _S2_PC_10=(PC_10-7.3437465039148E-15)/1.21693061249386;
MPRINT(EM_DIAGRAM):   else _S2_PC_10=(PC_10-7.3437465039148E-15)/1.21693061249386;
1226924   +if PC_11=. then _S3_PC_11 = 0;
MPRINT(EM_DIAGRAM):   if PC_11=. then _S3_PC_11 = 0;
1226925   +else _S3_PC_11=(PC_11--7.0730068811131E-15)/1.16796442652649;
MPRINT(EM_DIAGRAM):   else _S3_PC_11=(PC_11--7.0730068811131E-15)/1.16796442652649;
1226926   +if PC_12=. then _S4_PC_12 = 0;
MPRINT(EM_DIAGRAM):   if PC_12=. then _S4_PC_12 = 0;
1226927   +else _S4_PC_12=(PC_12-4.4552960029481E-15)/1.12591589658837;
MPRINT(EM_DIAGRAM):   else _S4_PC_12=(PC_12-4.4552960029481E-15)/1.12591589658837;
1226928   +if PC_13=. then _S5_PC_13 = 0;
MPRINT(EM_DIAGRAM):   if PC_13=. then _S5_PC_13 = 0;
1226929   +else _S5_PC_13=(PC_13--1.6512112280313E-15)/1.11508775876214;
MPRINT(EM_DIAGRAM):   else _S5_PC_13=(PC_13--1.6512112280313E-15)/1.11508775876214;
1226930   +if PC_14=. then _S6_PC_14 = 0;
MPRINT(EM_DIAGRAM):   if PC_14=. then _S6_PC_14 = 0;
1226931   +else _S6_PC_14=(PC_14-6.8566794103398E-15)/1.10697173642324;
MPRINT(EM_DIAGRAM):   else _S6_PC_14=(PC_14-6.8566794103398E-15)/1.10697173642324;
1226932   +if PC_15=. then _S7_PC_15 = 0;
MPRINT(EM_DIAGRAM):   if PC_15=. then _S7_PC_15 = 0;
1226933   +else _S7_PC_15=(PC_15-3.7113436914175E-16)/1.07529239411864;
MPRINT(EM_DIAGRAM):   else _S7_PC_15=(PC_15-3.7113436914175E-16)/1.07529239411864;
1226934   +if PC_16=. then _S8_PC_16 = 0;
MPRINT(EM_DIAGRAM):   if PC_16=. then _S8_PC_16 = 0;
1226935   +else _S8_PC_16=(PC_16-2.1907029218846E-15)/1.05155973148348;
MPRINT(EM_DIAGRAM):   else _S8_PC_16=(PC_16-2.1907029218846E-15)/1.05155973148348;
1226936   +if PC_17=. then _S9_PC_17 = 0;
MPRINT(EM_DIAGRAM):   if PC_17=. then _S9_PC_17 = 0;
1226937   +else _S9_PC_17=(PC_17--4.0758372994179E-15)/1.00117687196913;
MPRINT(EM_DIAGRAM):   else _S9_PC_17=(PC_17--4.0758372994179E-15)/1.00117687196913;
1226938   +if PC_2=. then _S10_PC_2 = 0;
MPRINT(EM_DIAGRAM):   if PC_2=. then _S10_PC_2 = 0;
1226939   +else _S10_PC_2=(PC_2--1.1878965470177E-14)/1.83914433852806;
MPRINT(EM_DIAGRAM):   else _S10_PC_2=(PC_2--1.1878965470177E-14)/1.83914433852806;
1226940   +if PC_3=. then _S11_PC_3 = 0;
MPRINT(EM_DIAGRAM):   if PC_3=. then _S11_PC_3 = 0;
1226941   +else _S11_PC_3=(PC_3--4.1240062006548E-15)/1.80610585666437;
MPRINT(EM_DIAGRAM):   else _S11_PC_3=(PC_3--4.1240062006548E-15)/1.80610585666437;
1226942   +if PC_4=. then _S12_PC_4 = 0;
MPRINT(EM_DIAGRAM):   if PC_4=. then _S12_PC_4 = 0;
1226943   +else _S12_PC_4=(PC_4-5.7654901165917E-15)/1.56990487320424;
MPRINT(EM_DIAGRAM):   else _S12_PC_4=(PC_4-5.7654901165917E-15)/1.56990487320424;
1226944   +if PC_5=. then _S13_PC_5 = 0;
MPRINT(EM_DIAGRAM):   if PC_5=. then _S13_PC_5 = 0;
1226945   +else _S13_PC_5=(PC_5-6.952876915043E-15)/1.49991827290296;
MPRINT(EM_DIAGRAM):   else _S13_PC_5=(PC_5-6.952876915043E-15)/1.49991827290296;
1226946   +if PC_6=. then _S14_PC_6 = 0;
MPRINT(EM_DIAGRAM):   if PC_6=. then _S14_PC_6 = 0;
1226947   +else _S14_PC_6=(PC_6--2.2466817323511E-15)/1.41774006330542;
MPRINT(EM_DIAGRAM):   else _S14_PC_6=(PC_6--2.2466817323511E-15)/1.41774006330542;
1226948   +if PC_7=. then _S15_PC_7 = 0;
MPRINT(EM_DIAGRAM):   if PC_7=. then _S15_PC_7 = 0;
1226949   +else _S15_PC_7=(PC_7--8.9771866810044E-16)/1.33453688307765;
MPRINT(EM_DIAGRAM):   else _S15_PC_7=(PC_7--8.9771866810044E-16)/1.33453688307765;
1226950   +if PC_8=. then _S16_PC_8 = 0;
MPRINT(EM_DIAGRAM):   if PC_8=. then _S16_PC_8 = 0;
1226951   +else _S16_PC_8=(PC_8-3.0127075597884E-15)/1.29598076617177;
MPRINT(EM_DIAGRAM):   else _S16_PC_8=(PC_8-3.0127075597884E-15)/1.29598076617177;
1226952   +if PC_9=. then _S17_PC_9 = 0;
MPRINT(EM_DIAGRAM):   if PC_9=. then _S17_PC_9 = 0;
1226953   +else _S17_PC_9=(PC_9-4.6677068276258E-15)/1.23713745620335;
MPRINT(EM_DIAGRAM):   else _S17_PC_9=(PC_9-4.6677068276258E-15)/1.23713745620335;
1226954   +if Year_Birth=. then _S18_YEAR_BIRTH = 0;
MPRINT(EM_DIAGRAM):   if Year_Birth=. then _S18_YEAR_BIRTH = 0;
1226955   +else _S18_YEAR_BIRTH=(Year_Birth-1968.79401853412)/12.063294849345;
MPRINT(EM_DIAGRAM):   else _S18_YEAR_BIRTH=(Year_Birth-1968.79401853412)/12.063294849345;
1226956   +;
MPRINT(EM_DIAGRAM):   ;
1226957   +/*----------------------------------------------*/
1226958   +* Component 1 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 0;
1226959   +/*----------------------------------------------*/
1226960   +;
MPRINT(EM_DIAGRAM):   ;
1226961   +_SPRIN01=
1226962   +0.5472327471*_S1_PC_1+
1226963   +0.0689025168*_S2_PC_10+
1226964   +0.1063292528*_S3_PC_11+
1226965   +-0.00786993*_S4_PC_12+
1226966   +-0.081647068*_S5_PC_13+
1226967   +0.0764676562*_S6_PC_14+
1226968   +0.2501879069*_S7_PC_15+
1226969   +-0.158104644*_S8_PC_16+
1226970   +0.2869913627*_S9_PC_17+
1226971   +0.0098433348*_S10_PC_2+
1226972   +0.1206515741*_S11_PC_3+
1226973   +0.0085779438*_S12_PC_4+
1226974   +-0.339405068*_S13_PC_5+
1226975   +0.3375545447*_S14_PC_6+
1226976   +0.0542971825*_S15_PC_7+
1226977   +0.5050955192*_S16_PC_8+
1226978   +-0.004055733*_S17_PC_9+
1226979   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN01= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1226980   +/*----------------------------------------------*/
1226981   +* Component 2 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 0;
1226982   +/*----------------------------------------------*/
1226983   +;
MPRINT(EM_DIAGRAM):   ;
1226984   +_SPRIN02=
1226985   +-0.426804633*_S1_PC_1+
1226986   +0.2472546236*_S2_PC_10+
1226987   +0.1765620828*_S3_PC_11+
1226988   +0.1176647043*_S4_PC_12+
1226989   +-0.274534049*_S5_PC_13+
1226990   +0.1250064953*_S6_PC_14+
1226991   +0.2491355177*_S7_PC_15+
1226992   +-0.304075464*_S8_PC_16+
1226993   +-0.187873028*_S9_PC_17+
1226994   +0.3451926716*_S10_PC_2+
1226995   +0.3362017343*_S11_PC_3+
1226996   +-0.010389084*_S12_PC_4+
1226997   +0.1887629926*_S13_PC_5+
1226998   +-0.049089507*_S14_PC_6+
1226999   +-0.001231054*_S15_PC_7+
1227000   +0.2888987164*_S16_PC_8+
1227001   +-0.277594699*_S17_PC_9+
1227002   +2.115587E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN02= -0.426804633*_S1_PC_1+ 0.2472546236*_S2_PC_10+
0.1765620828*_S3_PC_11+ 0.1176647043*_S4_PC_12+ -0.274534049*_S5_PC_13+
0.1250064953*_S6_PC_14+ 0.2491355177*_S7_PC_15+ -0.304075464*_S8_PC_16+
-0.187873028*_S9_PC_17+ 0.3451926716*_S10_PC_2+ 0.3362017343*_S11_PC_3+
-0.010389084*_S12_PC_4+ 0.1887629926*_S13_PC_5+ -0.049089507*_S14_PC_6+
-0.001231054*_S15_PC_7+ 0.2888987164*_S16_PC_8+ -0.277594699*_S17_PC_9+
2.115587E-10*_S18_YEAR_BIRTH;
1227003   +/*----------------------------------------------*/
1227004   +* Component 3 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 0;
1227005   +/*----------------------------------------------*/
1227006   +;
MPRINT(EM_DIAGRAM):   ;
1227007   +_SPRIN03=
1227008   +-0.115046453*_S1_PC_1+
1227009   +0.5302526185*_S2_PC_10+
1227010   +-0.275135397*_S3_PC_11+
1227011   +0.004612446*_S4_PC_12+
1227012   +0.166932134*_S5_PC_13+
1227013   +-0.17048832*_S6_PC_14+
1227014   +-0.212191542*_S7_PC_15+
1227015   +0.0228966122*_S8_PC_16+
1227016   +0.4384969167*_S9_PC_17+
1227017   +0.0077993846*_S10_PC_2+
1227018   +0.4915793429*_S11_PC_3+
1227019   +-0.162964672*_S12_PC_4+
1227020   +-0.164545705*_S13_PC_5+
1227021   +-0.046033642*_S14_PC_6+
1227022   +0.0686861603*_S15_PC_7+
1227023   +-0.175404685*_S16_PC_8+
1227024   +0.0465458336*_S17_PC_9+
1227025   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN03= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227026   +/*----------------------------------------------*/
1227027   +* Component 4 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 0;
1227028   +/*----------------------------------------------*/
1227029   +;
MPRINT(EM_DIAGRAM):   ;
1227030   +_SPRIN04=
1227031   +0.2669085642*_S1_PC_1+
1227032   +-0.010858941*_S2_PC_10+
1227033   +0.2008720446*_S3_PC_11+
1227034   +0.5144148856*_S4_PC_12+
1227035   +-0.190832368*_S5_PC_13+
1227036   +0.1155863429*_S6_PC_14+
1227037   +-0.050867722*_S7_PC_15+
1227038   +0.1008214478*_S8_PC_16+
1227039   +-0.011138547*_S9_PC_17+
1227040   +-0.552849986*_S10_PC_2+
1227041   +0.2862487731*_S11_PC_3+
1227042   +-0.137559562*_S12_PC_4+
1227043   +0.2589005161*_S13_PC_5+
1227044   +-0.112565595*_S14_PC_6+
1227045   +0.0284161528*_S15_PC_7+
1227046   +-0.118315879*_S16_PC_8+
1227047   +-0.244959549*_S17_PC_9+
1227048   +3.395879E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN04= 0.2669085642*_S1_PC_1+ -0.010858941*_S2_PC_10+
0.2008720446*_S3_PC_11+ 0.5144148856*_S4_PC_12+ -0.190832368*_S5_PC_13+
0.1155863429*_S6_PC_14+ -0.050867722*_S7_PC_15+ 0.1008214478*_S8_PC_16+
-0.011138547*_S9_PC_17+ -0.552849986*_S10_PC_2+ 0.2862487731*_S11_PC_3+
-0.137559562*_S12_PC_4+ 0.2589005161*_S13_PC_5+ -0.112565595*_S14_PC_6+
0.0284161528*_S15_PC_7+ -0.118315879*_S16_PC_8+ -0.244959549*_S17_PC_9+
3.395879E-10*_S18_YEAR_BIRTH;
1227049   +/*----------------------------------------------*/
1227050   +* Component 5 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 0;
1227051   +/*----------------------------------------------*/
1227052   +;
MPRINT(EM_DIAGRAM):   ;
1227053   +_SPRIN05=
1227054   +0.1715451272*_S1_PC_1+
1227055   +0.3115614636*_S2_PC_10+
1227056   +0.3007489853*_S3_PC_11+
1227057   +0.0867096677*_S4_PC_12+
1227058   +0.4850813272*_S5_PC_13+
1227059   +-0.154430605*_S6_PC_14+
1227060   +0.0053311376*_S7_PC_15+
1227061   +0.1605102659*_S8_PC_16+
1227062   +-0.18054643*_S9_PC_17+
1227063   +0.1238681466*_S10_PC_2+
1227064   +-0.209620079*_S11_PC_3+
1227065   +0.0074706781*_S12_PC_4+
1227066   +-0.230438413*_S13_PC_5+
1227067   +-0.360907655*_S14_PC_6+
1227068   +-0.094862505*_S15_PC_7+
1227069   +0.102183415*_S16_PC_8+
1227070   +-0.442555387*_S17_PC_9+
1227071   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN05= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1227072   +/*----------------------------------------------*/
1227073   +* Component 6 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 0;
1227074   +/*----------------------------------------------*/
1227075   +;
MPRINT(EM_DIAGRAM):   ;
1227076   +_SPRIN06=
1227077   +-0.082829906*_S1_PC_1+
1227078   +-0.099862677*_S2_PC_10+
1227079   +-0.42446278*_S3_PC_11+
1227080   +0.0381283395*_S4_PC_12+
1227081   +0.2616016667*_S5_PC_13+
1227082   +-0.180040658*_S6_PC_14+
1227083   +0.6294744866*_S7_PC_15+
1227084   +0.1814410053*_S8_PC_16+
1227085   +-0.035735751*_S9_PC_17+
1227086   +-0.119029185*_S10_PC_2+
1227087   +-0.043278125*_S11_PC_3+
1227088   +-0.389423222*_S12_PC_4+
1227089   +0.182278282*_S13_PC_5+
1227090   +0.0575259788*_S14_PC_6+
1227091   +0.196731809*_S15_PC_7+
1227092   +0.1093250508*_S16_PC_8+
1227093   +-0.124003136*_S17_PC_9+
1227094   +-5.75602E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN06= -0.082829906*_S1_PC_1+ -0.099862677*_S2_PC_10+
-0.42446278*_S3_PC_11+ 0.0381283395*_S4_PC_12+ 0.2616016667*_S5_PC_13+ -0.180040658*_S6_PC_14+
0.6294744866*_S7_PC_15+ 0.1814410053*_S8_PC_16+ -0.035735751*_S9_PC_17+
-0.119029185*_S10_PC_2+ -0.043278125*_S11_PC_3+ -0.389423222*_S12_PC_4+ 0.182278282*_S13_PC_5+
0.0575259788*_S14_PC_6+ 0.196731809*_S15_PC_7+ 0.1093250508*_S16_PC_8+ -0.124003136*_S17_PC_9+
-5.75602E-10*_S18_YEAR_BIRTH;
1227095   +;
MPRINT(EM_DIAGRAM):   ;
1227096   +/*----------------------------------------------*/
1227097   +* Component 1 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 1;
1227098   +/*----------------------------------------------*/
1227099   +;
MPRINT(EM_DIAGRAM):   ;
1227100   +_SPRIN11=
1227101   +-0.083760411*_S1_PC_1+
1227102   +0.0150156059*_S2_PC_10+
1227103   +0.3603117506*_S3_PC_11+
1227104   +-0.065465485*_S4_PC_12+
1227105   +0.2296666341*_S5_PC_13+
1227106   +-0.312415498*_S6_PC_14+
1227107   +0.3487593185*_S7_PC_15+
1227108   +-0.422555663*_S8_PC_16+
1227109   +0.3668401007*_S9_PC_17+
1227110   +-0.232806564*_S10_PC_2+
1227111   +-0.057086549*_S11_PC_3+
1227112   +0.2689297791*_S12_PC_4+
1227113   +0.2603201656*_S13_PC_5+
1227114   +-0.074110053*_S14_PC_6+
1227115   +-0.140250737*_S15_PC_7+
1227116   +-0.162814522*_S16_PC_8+
1227117   +0.1559535136*_S17_PC_9+
1227118   +2.299043E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN11= -0.083760411*_S1_PC_1+ 0.0150156059*_S2_PC_10+
0.3603117506*_S3_PC_11+ -0.065465485*_S4_PC_12+ 0.2296666341*_S5_PC_13+
-0.312415498*_S6_PC_14+ 0.3487593185*_S7_PC_15+ -0.422555663*_S8_PC_16+
0.3668401007*_S9_PC_17+ -0.232806564*_S10_PC_2+ -0.057086549*_S11_PC_3+
0.2689297791*_S12_PC_4+ 0.2603201656*_S13_PC_5+ -0.074110053*_S14_PC_6+
-0.140250737*_S15_PC_7+ -0.162814522*_S16_PC_8+ 0.1559535136*_S17_PC_9+
2.299043E-10*_S18_YEAR_BIRTH;
1227119   +/*----------------------------------------------*/
1227120   +* Component 2 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 1;
1227121   +/*----------------------------------------------*/
1227122   +;
MPRINT(EM_DIAGRAM):   ;
1227123   +_SPRIN12=
1227124   +0.0904586995*_S1_PC_1+
1227125   +-0.25358759*_S2_PC_10+
1227126   +0.1798508899*_S3_PC_11+
1227127   +0.1286557873*_S4_PC_12+
1227128   +0.3871465144*_S5_PC_13+
1227129   +0.3933352021*_S6_PC_14+
1227130   +-0.105794257*_S7_PC_15+
1227131   +0.0164426249*_S8_PC_16+
1227132   +0.2424122793*_S9_PC_17+
1227133   +0.3425749957*_S10_PC_2+
1227134   +0.1236367164*_S11_PC_3+
1227135   +-0.267238623*_S12_PC_4+
1227136   +0.2876403849*_S13_PC_5+
1227137   +-0.276983559*_S14_PC_6+
1227138   +0.1162237381*_S15_PC_7+
1227139   +0.1603566014*_S16_PC_8+
1227140   +0.317885474*_S17_PC_9+
1227141   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN12= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1227142   +/*----------------------------------------------*/
1227143   +* Component 3 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 1;
1227144   +/*----------------------------------------------*/
1227145   +;
MPRINT(EM_DIAGRAM):   ;
1227146   +_SPRIN13=
1227147   +-0.142104936*_S1_PC_1+
1227148   +-0.163802529*_S2_PC_10+
1227149   +0.2722556929*_S3_PC_11+
1227150   +-0.106217695*_S4_PC_12+
1227151   +0.1292014315*_S5_PC_13+
1227152   +-0.186258463*_S6_PC_14+
1227153   +-0.091004563*_S7_PC_15+
1227154   +-0.064777423*_S8_PC_16+
1227155   +-0.238558476*_S9_PC_17+
1227156   +-0.156265277*_S10_PC_2+
1227157   +0.2206105358*_S11_PC_3+
1227158   +-0.156353822*_S12_PC_4+
1227159   +-0.2104311*_S13_PC_5+
1227160   +0.0856687943*_S14_PC_6+
1227161   +0.2870928087*_S15_PC_7+
1227162   +0.0511562227*_S16_PC_8+
1227163   +0.1122597348*_S17_PC_9+
1227164   +0.7071067813*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN13= -0.142104936*_S1_PC_1+ -0.163802529*_S2_PC_10+
0.2722556929*_S3_PC_11+ -0.106217695*_S4_PC_12+ 0.1292014315*_S5_PC_13+
-0.186258463*_S6_PC_14+ -0.091004563*_S7_PC_15+ -0.064777423*_S8_PC_16+
-0.238558476*_S9_PC_17+ -0.156265277*_S10_PC_2+ 0.2206105358*_S11_PC_3+
-0.156353822*_S12_PC_4+ -0.2104311*_S13_PC_5+ 0.0856687943*_S14_PC_6+ 0.2870928087*_S15_PC_7+
0.0511562227*_S16_PC_8+ 0.1122597348*_S17_PC_9+ 0.7071067813*_S18_YEAR_BIRTH;
1227165   +/*----------------------------------------------*/
1227166   +* Component 4 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 1;
1227167   +/*----------------------------------------------*/
1227168   +;
MPRINT(EM_DIAGRAM):   ;
1227169   +_SPRIN14=
1227170   +-0.07513814*_S1_PC_1+
1227171   +0.2268213548*_S2_PC_10+
1227172   +0.3357028263*_S3_PC_11+
1227173   +-0.217855162*_S4_PC_12+
1227174   +-0.34642163*_S5_PC_13+
1227175   +-0.117797127*_S6_PC_14+
1227176   +0.1772546491*_S7_PC_15+
1227177   +0.4970081949*_S8_PC_16+
1227178   +0.0579273257*_S9_PC_17+
1227179   +-0.068881631*_S10_PC_2+
1227180   +-0.048574106*_S11_PC_3+
1227181   +-0.307629187*_S12_PC_4+
1227182   +0.0117800688*_S13_PC_5+
1227183   +-0.170688469*_S14_PC_6+
1227184   +-0.287177589*_S15_PC_7+
1227185   +0.1470406186*_S16_PC_8+
1227186   +0.3632739449*_S17_PC_9+
1227187   +1.905836E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN14= -0.07513814*_S1_PC_1+ 0.2268213548*_S2_PC_10+
0.3357028263*_S3_PC_11+ -0.217855162*_S4_PC_12+ -0.34642163*_S5_PC_13+ -0.117797127*_S6_PC_14+
0.1772546491*_S7_PC_15+ 0.4970081949*_S8_PC_16+ 0.0579273257*_S9_PC_17+
-0.068881631*_S10_PC_2+ -0.048574106*_S11_PC_3+ -0.307629187*_S12_PC_4+
0.0117800688*_S13_PC_5+ -0.170688469*_S14_PC_6+ -0.287177589*_S15_PC_7+
0.1470406186*_S16_PC_8+ 0.3632739449*_S17_PC_9+ 1.905836E-10*_S18_YEAR_BIRTH;
1227188   +/*----------------------------------------------*/
1227189   +* Component 5 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 1;
1227190   +/*----------------------------------------------*/
1227191   +;
MPRINT(EM_DIAGRAM):   ;
1227192   +_SPRIN15=
1227193   +0.3406028277*_S1_PC_1+
1227194   +-0.047103907*_S2_PC_10+
1227195   +-0.040071736*_S3_PC_11+
1227196   +-0.188047264*_S4_PC_12+
1227197   +-0.105899894*_S5_PC_13+
1227198   +-0.546605414*_S6_PC_14+
1227199   +-0.215949151*_S7_PC_15+
1227200   +0.1552257804*_S8_PC_16+
1227201   +-0.063292919*_S9_PC_17+
1227202   +0.2436344531*_S10_PC_2+
1227203   +0.1847153335*_S11_PC_3+
1227204   +0.1847115801*_S12_PC_4+
1227205   +0.5094087484*_S13_PC_5+
1227206   +-0.017225219*_S14_PC_6+
1227207   +0.1843449226*_S15_PC_7+
1227208   +0.1814443365*_S16_PC_8+
1227209   +-0.076033755*_S17_PC_9+
1227210   +1.775586E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN15= 0.3406028277*_S1_PC_1+ -0.047103907*_S2_PC_10+
-0.040071736*_S3_PC_11+ -0.188047264*_S4_PC_12+ -0.105899894*_S5_PC_13+
-0.546605414*_S6_PC_14+ -0.215949151*_S7_PC_15+ 0.1552257804*_S8_PC_16+
-0.063292919*_S9_PC_17+ 0.2436344531*_S10_PC_2+ 0.1847153335*_S11_PC_3+
0.1847115801*_S12_PC_4+ 0.5094087484*_S13_PC_5+ -0.017225219*_S14_PC_6+
0.1843449226*_S15_PC_7+ 0.1814443365*_S16_PC_8+ -0.076033755*_S17_PC_9+
1.775586E-10*_S18_YEAR_BIRTH;
1227211   +/*----------------------------------------------*/
1227212   +* Component 6 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 1;
1227213   +/*----------------------------------------------*/
1227214   +;
MPRINT(EM_DIAGRAM):   ;
1227215   +_SPRIN16=
1227216   +0.1806930607*_S1_PC_1+
1227217   +0.0788596166*_S2_PC_10+
1227218   +0.1968872716*_S3_PC_11+
1227219   +-0.003908283*_S4_PC_12+
1227220   +0.2158704538*_S5_PC_13+
1227221   +0.1239491149*_S6_PC_14+
1227222   +0.231901586*_S7_PC_15+
1227223   +0.2297800823*_S8_PC_16+
1227224   +-0.242925465*_S9_PC_17+
1227225   +0.2708005769*_S10_PC_2+
1227226   +0.2941705488*_S11_PC_3+
1227227   +0.0605451876*_S12_PC_4+
1227228   +0.0886168754*_S13_PC_5+
1227229   +0.5048353663*_S14_PC_6+
1227230   +-0.216665596*_S15_PC_7+
1227231   +-0.467488352*_S16_PC_8+
1227232   +0.0553338626*_S17_PC_9+
1227233   +2.54004E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN16= 0.1806930607*_S1_PC_1+ 0.0788596166*_S2_PC_10+
0.1968872716*_S3_PC_11+ -0.003908283*_S4_PC_12+ 0.2158704538*_S5_PC_13+
0.1239491149*_S6_PC_14+ 0.231901586*_S7_PC_15+ 0.2297800823*_S8_PC_16+ -0.242925465*_S9_PC_17+
0.2708005769*_S10_PC_2+ 0.2941705488*_S11_PC_3+ 0.0605451876*_S12_PC_4+
0.0886168754*_S13_PC_5+ 0.5048353663*_S14_PC_6+ -0.216665596*_S15_PC_7+
-0.467488352*_S16_PC_8+ 0.0553338626*_S17_PC_9+ 2.54004E-10*_S18_YEAR_BIRTH;
1227234   +;
MPRINT(EM_DIAGRAM):   ;
1227235   +/*----------------------------------------------*/
1227236   +* Component 1 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 2;
1227237   +/*----------------------------------------------*/
1227238   +;
MPRINT(EM_DIAGRAM):   ;
1227239   +_SPRIN21=
1227240   +-0.115046453*_S1_PC_1+
1227241   +0.5302526185*_S2_PC_10+
1227242   +-0.275135397*_S3_PC_11+
1227243   +0.004612446*_S4_PC_12+
1227244   +0.166932134*_S5_PC_13+
1227245   +-0.17048832*_S6_PC_14+
1227246   +-0.212191542*_S7_PC_15+
1227247   +0.0228966122*_S8_PC_16+
1227248   +0.4384969167*_S9_PC_17+
1227249   +0.0077993846*_S10_PC_2+
1227250   +0.4915793429*_S11_PC_3+
1227251   +-0.162964672*_S12_PC_4+
1227252   +-0.164545705*_S13_PC_5+
1227253   +-0.046033642*_S14_PC_6+
1227254   +0.0686861603*_S15_PC_7+
1227255   +-0.175404685*_S16_PC_8+
1227256   +0.0465458336*_S17_PC_9+
1227257   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN21= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227258   +/*----------------------------------------------*/
1227259   +* Component 2 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 2;
1227260   +/*----------------------------------------------*/
1227261   +;
MPRINT(EM_DIAGRAM):   ;
1227262   +_SPRIN22=
1227263   +-0.280418472*_S1_PC_1+
1227264   +0.033952608*_S2_PC_10+
1227265   +0.0500378399*_S3_PC_11+
1227266   +0.5960630607*_S4_PC_12+
1227267   +0.0567914812*_S5_PC_13+
1227268   +-0.149428438*_S6_PC_14+
1227269   +0.0315198821*_S7_PC_15+
1227270   +0.3721577951*_S8_PC_16+
1227271   +0.0994481608*_S9_PC_17+
1227272   +0.0756226515*_S10_PC_2+
1227273   +-0.096605202*_S11_PC_3+
1227274   +0.4357739087*_S12_PC_4+
1227275   +-0.08415535*_S13_PC_5+
1227276   +0.17775354*_S14_PC_6+
1227277   +0.2151817247*_S15_PC_7+
1227278   +0.1918182434*_S16_PC_8+
1227279   +0.2464805102*_S17_PC_9+
1227280   +-4.36857E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN22= -0.280418472*_S1_PC_1+ 0.033952608*_S2_PC_10+
0.0500378399*_S3_PC_11+ 0.5960630607*_S4_PC_12+ 0.0567914812*_S5_PC_13+
-0.149428438*_S6_PC_14+ 0.0315198821*_S7_PC_15+ 0.3721577951*_S8_PC_16+
0.0994481608*_S9_PC_17+ 0.0756226515*_S10_PC_2+ -0.096605202*_S11_PC_3+
0.4357739087*_S12_PC_4+ -0.08415535*_S13_PC_5+ 0.17775354*_S14_PC_6+ 0.2151817247*_S15_PC_7+
0.1918182434*_S16_PC_8+ 0.2464805102*_S17_PC_9+ -4.36857E-11*_S18_YEAR_BIRTH;
1227281   +/*----------------------------------------------*/
1227282   +* Component 3 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 2;
1227283   +/*----------------------------------------------*/
1227284   +;
MPRINT(EM_DIAGRAM):   ;
1227285   +_SPRIN23=
1227286   +0.1715451272*_S1_PC_1+
1227287   +0.3115614636*_S2_PC_10+
1227288   +0.3007489853*_S3_PC_11+
1227289   +0.0867096677*_S4_PC_12+
1227290   +0.4850813272*_S5_PC_13+
1227291   +-0.154430605*_S6_PC_14+
1227292   +0.0053311376*_S7_PC_15+
1227293   +0.1605102659*_S8_PC_16+
1227294   +-0.18054643*_S9_PC_17+
1227295   +0.1238681466*_S10_PC_2+
1227296   +-0.209620079*_S11_PC_3+
1227297   +0.0074706781*_S12_PC_4+
1227298   +-0.230438413*_S13_PC_5+
1227299   +-0.360907655*_S14_PC_6+
1227300   +-0.094862505*_S15_PC_7+
1227301   +0.102183415*_S16_PC_8+
1227302   +-0.442555387*_S17_PC_9+
1227303   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN23= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1227304   +/*----------------------------------------------*/
1227305   +* Component 4 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 2;
1227306   +/*----------------------------------------------*/
1227307   +;
MPRINT(EM_DIAGRAM):   ;
1227308   +_SPRIN24=
1227309   +-0.216059196*_S1_PC_1+
1227310   +0.2253134053*_S2_PC_10+
1227311   +0.0458400339*_S3_PC_11+
1227312   +-0.158708269*_S4_PC_12+
1227313   +0.2958082517*_S5_PC_13+
1227314   +0.1640638198*_S6_PC_14+
1227315   +-0.330259515*_S7_PC_15+
1227316   +0.0489846489*_S8_PC_16+
1227317   +0.0159008582*_S9_PC_17+
1227318   +-0.302936443*_S10_PC_2+
1227319   +-0.158642589*_S11_PC_3+
1227320   +-0.070387665*_S12_PC_4+
1227321   +0.3540228754*_S13_PC_5+
1227322   +0.4732991561*_S14_PC_6+
1227323   +-0.173510857*_S15_PC_7+
1227324   +0.3684386956*_S16_PC_8+
1227325   +-0.109680308*_S17_PC_9+
1227326   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN24= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1227327   +/*----------------------------------------------*/
1227328   +* Component 5 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 2;
1227329   +/*----------------------------------------------*/
1227330   +;
MPRINT(EM_DIAGRAM):   ;
1227331   +_SPRIN25=
1227332   +-0.088531922*_S1_PC_1+
1227333   +-0.009002035*_S2_PC_10+
1227334   +0.31667389*_S3_PC_11+
1227335   +-0.02941866*_S4_PC_12+
1227336   +-0.2067745*_S5_PC_13+
1227337   +-0.025433534*_S6_PC_14+
1227338   +-0.054283266*_S7_PC_15+
1227339   +0.0743381462*_S8_PC_16+
1227340   +0.4000347072*_S9_PC_17+
1227341   +0.2150358409*_S10_PC_2+
1227342   +-0.342625967*_S11_PC_3+
1227343   +-0.277332723*_S12_PC_4+
1227344   +0.0361157229*_S13_PC_5+
1227345   +0.2510167741*_S14_PC_6+
1227346   +0.4155727148*_S15_PC_7+
1227347   +-0.285270046*_S16_PC_8+
1227348   +-0.34654039*_S17_PC_9+
1227349   +-5.85785E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN25= -0.088531922*_S1_PC_1+ -0.009002035*_S2_PC_10+
0.31667389*_S3_PC_11+ -0.02941866*_S4_PC_12+ -0.2067745*_S5_PC_13+ -0.025433534*_S6_PC_14+
-0.054283266*_S7_PC_15+ 0.0743381462*_S8_PC_16+ 0.4000347072*_S9_PC_17+
0.2150358409*_S10_PC_2+ -0.342625967*_S11_PC_3+ -0.277332723*_S12_PC_4+
0.0361157229*_S13_PC_5+ 0.2510167741*_S14_PC_6+ 0.4155727148*_S15_PC_7+
-0.285270046*_S16_PC_8+ -0.34654039*_S17_PC_9+ -5.85785E-10*_S18_YEAR_BIRTH;
1227350   +/*----------------------------------------------*/
1227351   +* Component 6 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 2;
1227352   +/*----------------------------------------------*/
1227353   +;
MPRINT(EM_DIAGRAM):   ;
1227354   +_SPRIN26=
1227355   +0.5472327471*_S1_PC_1+
1227356   +0.0689025168*_S2_PC_10+
1227357   +0.1063292528*_S3_PC_11+
1227358   +-0.00786993*_S4_PC_12+
1227359   +-0.081647068*_S5_PC_13+
1227360   +0.0764676562*_S6_PC_14+
1227361   +0.2501879069*_S7_PC_15+
1227362   +-0.158104644*_S8_PC_16+
1227363   +0.2869913627*_S9_PC_17+
1227364   +0.0098433348*_S10_PC_2+
1227365   +0.1206515741*_S11_PC_3+
1227366   +0.0085779438*_S12_PC_4+
1227367   +-0.339405068*_S13_PC_5+
1227368   +0.3375545447*_S14_PC_6+
1227369   +0.0542971825*_S15_PC_7+
1227370   +0.5050955192*_S16_PC_8+
1227371   +-0.004055733*_S17_PC_9+
1227372   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN26= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1227373   +;
MPRINT(EM_DIAGRAM):   ;
1227374   +/*----------------------------------------------*/
1227375   +* Component 1 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 3;
1227376   +/*----------------------------------------------*/
1227377   +;
MPRINT(EM_DIAGRAM):   ;
1227378   +_SPRIN31=
1227379   +0.1806930607*_S1_PC_1+
1227380   +0.0788596166*_S2_PC_10+
1227381   +0.1968872716*_S3_PC_11+
1227382   +-0.003908283*_S4_PC_12+
1227383   +0.2158704538*_S5_PC_13+
1227384   +0.1239491149*_S6_PC_14+
1227385   +0.231901586*_S7_PC_15+
1227386   +0.2297800823*_S8_PC_16+
1227387   +-0.242925465*_S9_PC_17+
1227388   +0.2708005769*_S10_PC_2+
1227389   +0.2941705488*_S11_PC_3+
1227390   +0.0605451876*_S12_PC_4+
1227391   +0.0886168754*_S13_PC_5+
1227392   +0.5048353663*_S14_PC_6+
1227393   +-0.216665596*_S15_PC_7+
1227394   +-0.467488352*_S16_PC_8+
1227395   +0.0553338626*_S17_PC_9+
1227396   +2.54004E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN31= 0.1806930607*_S1_PC_1+ 0.0788596166*_S2_PC_10+
0.1968872716*_S3_PC_11+ -0.003908283*_S4_PC_12+ 0.2158704538*_S5_PC_13+
0.1239491149*_S6_PC_14+ 0.231901586*_S7_PC_15+ 0.2297800823*_S8_PC_16+ -0.242925465*_S9_PC_17+
0.2708005769*_S10_PC_2+ 0.2941705488*_S11_PC_3+ 0.0605451876*_S12_PC_4+
0.0886168754*_S13_PC_5+ 0.5048353663*_S14_PC_6+ -0.216665596*_S15_PC_7+
-0.467488352*_S16_PC_8+ 0.0553338626*_S17_PC_9+ 2.54004E-10*_S18_YEAR_BIRTH;
1227397   +/*----------------------------------------------*/
1227398   +* Component 2 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 3;
1227399   +/*----------------------------------------------*/
1227400   +;
MPRINT(EM_DIAGRAM):   ;
1227401   +_SPRIN32=
1227402   +-0.07513814*_S1_PC_1+
1227403   +0.2268213548*_S2_PC_10+
1227404   +0.3357028263*_S3_PC_11+
1227405   +-0.217855162*_S4_PC_12+
1227406   +-0.34642163*_S5_PC_13+
1227407   +-0.117797127*_S6_PC_14+
1227408   +0.1772546491*_S7_PC_15+
1227409   +0.4970081949*_S8_PC_16+
1227410   +0.0579273257*_S9_PC_17+
1227411   +-0.068881631*_S10_PC_2+
1227412   +-0.048574106*_S11_PC_3+
1227413   +-0.307629187*_S12_PC_4+
1227414   +0.0117800688*_S13_PC_5+
1227415   +-0.170688469*_S14_PC_6+
1227416   +-0.287177589*_S15_PC_7+
1227417   +0.1470406186*_S16_PC_8+
1227418   +0.3632739449*_S17_PC_9+
1227419   +1.905836E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN32= -0.07513814*_S1_PC_1+ 0.2268213548*_S2_PC_10+
0.3357028263*_S3_PC_11+ -0.217855162*_S4_PC_12+ -0.34642163*_S5_PC_13+ -0.117797127*_S6_PC_14+
0.1772546491*_S7_PC_15+ 0.4970081949*_S8_PC_16+ 0.0579273257*_S9_PC_17+
-0.068881631*_S10_PC_2+ -0.048574106*_S11_PC_3+ -0.307629187*_S12_PC_4+
0.0117800688*_S13_PC_5+ -0.170688469*_S14_PC_6+ -0.287177589*_S15_PC_7+
0.1470406186*_S16_PC_8+ 0.3632739449*_S17_PC_9+ 1.905836E-10*_S18_YEAR_BIRTH;
1227420   +/*----------------------------------------------*/
1227421   +* Component 3 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 3;
1227422   +/*----------------------------------------------*/
1227423   +;
MPRINT(EM_DIAGRAM):   ;
1227424   +_SPRIN33=
1227425   +-0.083760411*_S1_PC_1+
1227426   +0.0150156059*_S2_PC_10+
1227427   +0.3603117506*_S3_PC_11+
1227428   +-0.065465485*_S4_PC_12+
1227429   +0.2296666341*_S5_PC_13+
1227430   +-0.312415498*_S6_PC_14+
1227431   +0.3487593185*_S7_PC_15+
1227432   +-0.422555663*_S8_PC_16+
1227433   +0.3668401007*_S9_PC_17+
1227434   +-0.232806564*_S10_PC_2+
1227435   +-0.057086549*_S11_PC_3+
1227436   +0.2689297791*_S12_PC_4+
1227437   +0.2603201656*_S13_PC_5+
1227438   +-0.074110053*_S14_PC_6+
1227439   +-0.140250737*_S15_PC_7+
1227440   +-0.162814522*_S16_PC_8+
1227441   +0.1559535136*_S17_PC_9+
1227442   +2.299043E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN33= -0.083760411*_S1_PC_1+ 0.0150156059*_S2_PC_10+
0.3603117506*_S3_PC_11+ -0.065465485*_S4_PC_12+ 0.2296666341*_S5_PC_13+
-0.312415498*_S6_PC_14+ 0.3487593185*_S7_PC_15+ -0.422555663*_S8_PC_16+
0.3668401007*_S9_PC_17+ -0.232806564*_S10_PC_2+ -0.057086549*_S11_PC_3+
0.2689297791*_S12_PC_4+ 0.2603201656*_S13_PC_5+ -0.074110053*_S14_PC_6+
-0.140250737*_S15_PC_7+ -0.162814522*_S16_PC_8+ 0.1559535136*_S17_PC_9+
2.299043E-10*_S18_YEAR_BIRTH;
1227443   +/*----------------------------------------------*/
1227444   +* Component 4 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 3;
1227445   +/*----------------------------------------------*/
1227446   +;
MPRINT(EM_DIAGRAM):   ;
1227447   +_SPRIN34=
1227448   +-0.082829906*_S1_PC_1+
1227449   +-0.099862677*_S2_PC_10+
1227450   +-0.42446278*_S3_PC_11+
1227451   +0.0381283395*_S4_PC_12+
1227452   +0.2616016667*_S5_PC_13+
1227453   +-0.180040658*_S6_PC_14+
1227454   +0.6294744866*_S7_PC_15+
1227455   +0.1814410053*_S8_PC_16+
1227456   +-0.035735751*_S9_PC_17+
1227457   +-0.119029185*_S10_PC_2+
1227458   +-0.043278125*_S11_PC_3+
1227459   +-0.389423222*_S12_PC_4+
1227460   +0.182278282*_S13_PC_5+
1227461   +0.0575259788*_S14_PC_6+
1227462   +0.196731809*_S15_PC_7+
1227463   +0.1093250508*_S16_PC_8+
1227464   +-0.124003136*_S17_PC_9+
1227465   +-5.75602E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN34= -0.082829906*_S1_PC_1+ -0.099862677*_S2_PC_10+
-0.42446278*_S3_PC_11+ 0.0381283395*_S4_PC_12+ 0.2616016667*_S5_PC_13+ -0.180040658*_S6_PC_14+
0.6294744866*_S7_PC_15+ 0.1814410053*_S8_PC_16+ -0.035735751*_S9_PC_17+
-0.119029185*_S10_PC_2+ -0.043278125*_S11_PC_3+ -0.389423222*_S12_PC_4+ 0.182278282*_S13_PC_5+
0.0575259788*_S14_PC_6+ 0.196731809*_S15_PC_7+ 0.1093250508*_S16_PC_8+ -0.124003136*_S17_PC_9+
-5.75602E-10*_S18_YEAR_BIRTH;
1227466   +/*----------------------------------------------*/
1227467   +* Component 5 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 3;
1227468   +/*----------------------------------------------*/
1227469   +;
MPRINT(EM_DIAGRAM):   ;
1227470   +_SPRIN35=
1227471   +0.1421049362*_S1_PC_1+
1227472   +0.1638025284*_S2_PC_10+
1227473   +-0.272255693*_S3_PC_11+
1227474   +0.1062176945*_S4_PC_12+
1227475   +-0.129201432*_S5_PC_13+
1227476   +0.1862584627*_S6_PC_14+
1227477   +0.0910045641*_S7_PC_15+
1227478   +0.0647774228*_S8_PC_16+
1227479   +0.238558476*_S9_PC_17+
1227480   +0.1562652772*_S10_PC_2+
1227481   +-0.220610537*_S11_PC_3+
1227482   +0.1563538222*_S12_PC_4+
1227483   +0.2104310993*_S13_PC_5+
1227484   +-0.085668794*_S14_PC_6+
1227485   +-0.287092808*_S15_PC_7+
1227486   +-0.051156223*_S16_PC_8+
1227487   +-0.112259736*_S17_PC_9+
1227488   +0.7071067811*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN35= 0.1421049362*_S1_PC_1+ 0.1638025284*_S2_PC_10+
-0.272255693*_S3_PC_11+ 0.1062176945*_S4_PC_12+ -0.129201432*_S5_PC_13+
0.1862584627*_S6_PC_14+ 0.0910045641*_S7_PC_15+ 0.0647774228*_S8_PC_16+ 0.238558476*_S9_PC_17+
0.1562652772*_S10_PC_2+ -0.220610537*_S11_PC_3+ 0.1563538222*_S12_PC_4+
0.2104310993*_S13_PC_5+ -0.085668794*_S14_PC_6+ -0.287092808*_S15_PC_7+
-0.051156223*_S16_PC_8+ -0.112259736*_S17_PC_9+ 0.7071067811*_S18_YEAR_BIRTH;
1227489   +/*----------------------------------------------*/
1227490   +* Component 6 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 3;
1227491   +/*----------------------------------------------*/
1227492   +;
MPRINT(EM_DIAGRAM):   ;
1227493   +_SPRIN36=
1227494   +-0.280418472*_S1_PC_1+
1227495   +0.033952608*_S2_PC_10+
1227496   +0.0500378399*_S3_PC_11+
1227497   +0.5960630607*_S4_PC_12+
1227498   +0.0567914812*_S5_PC_13+
1227499   +-0.149428438*_S6_PC_14+
1227500   +0.0315198821*_S7_PC_15+
1227501   +0.3721577951*_S8_PC_16+
1227502   +0.0994481608*_S9_PC_17+
1227503   +0.0756226515*_S10_PC_2+
1227504   +-0.096605202*_S11_PC_3+
1227505   +0.4357739087*_S12_PC_4+
1227506   +-0.08415535*_S13_PC_5+
1227507   +0.17775354*_S14_PC_6+
1227508   +0.2151817247*_S15_PC_7+
1227509   +0.1918182434*_S16_PC_8+
1227510   +0.2464805102*_S17_PC_9+
1227511   +-4.36857E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN36= -0.280418472*_S1_PC_1+ 0.033952608*_S2_PC_10+
0.0500378399*_S3_PC_11+ 0.5960630607*_S4_PC_12+ 0.0567914812*_S5_PC_13+
-0.149428438*_S6_PC_14+ 0.0315198821*_S7_PC_15+ 0.3721577951*_S8_PC_16+
0.0994481608*_S9_PC_17+ 0.0756226515*_S10_PC_2+ -0.096605202*_S11_PC_3+
0.4357739087*_S12_PC_4+ -0.08415535*_S13_PC_5+ 0.17775354*_S14_PC_6+ 0.2151817247*_S15_PC_7+
0.1918182434*_S16_PC_8+ 0.2464805102*_S17_PC_9+ -4.36857E-11*_S18_YEAR_BIRTH;
1227512   +;
MPRINT(EM_DIAGRAM):   ;
1227513   +/*----------------------------------------------*/
1227514   +* Component 1 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 4;
1227515   +/*----------------------------------------------*/
1227516   +;
MPRINT(EM_DIAGRAM):   ;
1227517   +_SPRIN41=
1227518   +0.2669085642*_S1_PC_1+
1227519   +-0.010858941*_S2_PC_10+
1227520   +0.2008720446*_S3_PC_11+
1227521   +0.5144148856*_S4_PC_12+
1227522   +-0.190832368*_S5_PC_13+
1227523   +0.1155863429*_S6_PC_14+
1227524   +-0.050867722*_S7_PC_15+
1227525   +0.1008214478*_S8_PC_16+
1227526   +-0.011138547*_S9_PC_17+
1227527   +-0.552849986*_S10_PC_2+
1227528   +0.2862487731*_S11_PC_3+
1227529   +-0.137559562*_S12_PC_4+
1227530   +0.2589005161*_S13_PC_5+
1227531   +-0.112565595*_S14_PC_6+
1227532   +0.0284161528*_S15_PC_7+
1227533   +-0.118315879*_S16_PC_8+
1227534   +-0.244959549*_S17_PC_9+
1227535   +3.395879E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN41= 0.2669085642*_S1_PC_1+ -0.010858941*_S2_PC_10+
0.2008720446*_S3_PC_11+ 0.5144148856*_S4_PC_12+ -0.190832368*_S5_PC_13+
0.1155863429*_S6_PC_14+ -0.050867722*_S7_PC_15+ 0.1008214478*_S8_PC_16+
-0.011138547*_S9_PC_17+ -0.552849986*_S10_PC_2+ 0.2862487731*_S11_PC_3+
-0.137559562*_S12_PC_4+ 0.2589005161*_S13_PC_5+ -0.112565595*_S14_PC_6+
0.0284161528*_S15_PC_7+ -0.118315879*_S16_PC_8+ -0.244959549*_S17_PC_9+
3.395879E-10*_S18_YEAR_BIRTH;
1227536   +/*----------------------------------------------*/
1227537   +* Component 2 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 4;
1227538   +/*----------------------------------------------*/
1227539   +;
MPRINT(EM_DIAGRAM):   ;
1227540   +_SPRIN42=
1227541   +-0.216059196*_S1_PC_1+
1227542   +0.2253134053*_S2_PC_10+
1227543   +0.0458400339*_S3_PC_11+
1227544   +-0.158708269*_S4_PC_12+
1227545   +0.2958082517*_S5_PC_13+
1227546   +0.1640638198*_S6_PC_14+
1227547   +-0.330259515*_S7_PC_15+
1227548   +0.0489846489*_S8_PC_16+
1227549   +0.0159008582*_S9_PC_17+
1227550   +-0.302936443*_S10_PC_2+
1227551   +-0.158642589*_S11_PC_3+
1227552   +-0.070387665*_S12_PC_4+
1227553   +0.3540228754*_S13_PC_5+
1227554   +0.4732991561*_S14_PC_6+
1227555   +-0.173510857*_S15_PC_7+
1227556   +0.3684386956*_S16_PC_8+
1227557   +-0.109680308*_S17_PC_9+
1227558   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN42= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1227559   +/*----------------------------------------------*/
1227560   +* Component 3 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 4;
1227561   +/*----------------------------------------------*/
1227562   +;
MPRINT(EM_DIAGRAM):   ;
1227563   +_SPRIN43=
1227564   +-0.115046453*_S1_PC_1+
1227565   +0.5302526185*_S2_PC_10+
1227566   +-0.275135397*_S3_PC_11+
1227567   +0.004612446*_S4_PC_12+
1227568   +0.166932134*_S5_PC_13+
1227569   +-0.17048832*_S6_PC_14+
1227570   +-0.212191542*_S7_PC_15+
1227571   +0.0228966122*_S8_PC_16+
1227572   +0.4384969167*_S9_PC_17+
1227573   +0.0077993846*_S10_PC_2+
1227574   +0.4915793429*_S11_PC_3+
1227575   +-0.162964672*_S12_PC_4+
1227576   +-0.164545705*_S13_PC_5+
1227577   +-0.046033642*_S14_PC_6+
1227578   +0.0686861603*_S15_PC_7+
1227579   +-0.175404685*_S16_PC_8+
1227580   +0.0465458336*_S17_PC_9+
1227581   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN43= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227582   +/*----------------------------------------------*/
1227583   +* Component 4 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 4;
1227584   +/*----------------------------------------------*/
1227585   +;
MPRINT(EM_DIAGRAM):   ;
1227586   +_SPRIN44=
1227587   +0.5472327471*_S1_PC_1+
1227588   +0.0689025168*_S2_PC_10+
1227589   +0.1063292528*_S3_PC_11+
1227590   +-0.00786993*_S4_PC_12+
1227591   +-0.081647068*_S5_PC_13+
1227592   +0.0764676562*_S6_PC_14+
1227593   +0.2501879069*_S7_PC_15+
1227594   +-0.158104644*_S8_PC_16+
1227595   +0.2869913627*_S9_PC_17+
1227596   +0.0098433348*_S10_PC_2+
1227597   +0.1206515741*_S11_PC_3+
1227598   +0.0085779438*_S12_PC_4+
1227599   +-0.339405068*_S13_PC_5+
1227600   +0.3375545447*_S14_PC_6+
1227601   +0.0542971825*_S15_PC_7+
1227602   +0.5050955192*_S16_PC_8+
1227603   +-0.004055733*_S17_PC_9+
1227604   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN44= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1227605   +/*----------------------------------------------*/
1227606   +* Component 5 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 4;
1227607   +/*----------------------------------------------*/
1227608   +;
MPRINT(EM_DIAGRAM):   ;
1227609   +_SPRIN45=
1227610   +0.0904586995*_S1_PC_1+
1227611   +-0.25358759*_S2_PC_10+
1227612   +0.1798508899*_S3_PC_11+
1227613   +0.1286557873*_S4_PC_12+
1227614   +0.3871465144*_S5_PC_13+
1227615   +0.3933352021*_S6_PC_14+
1227616   +-0.105794257*_S7_PC_15+
1227617   +0.0164426249*_S8_PC_16+
1227618   +0.2424122793*_S9_PC_17+
1227619   +0.3425749957*_S10_PC_2+
1227620   +0.1236367164*_S11_PC_3+
1227621   +-0.267238623*_S12_PC_4+
1227622   +0.2876403849*_S13_PC_5+
1227623   +-0.276983559*_S14_PC_6+
1227624   +0.1162237381*_S15_PC_7+
1227625   +0.1603566014*_S16_PC_8+
1227626   +0.317885474*_S17_PC_9+
1227627   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN45= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1227628   +/*----------------------------------------------*/
1227629   +* Component 6 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 4;
1227630   +/*----------------------------------------------*/
1227631   +;
MPRINT(EM_DIAGRAM):   ;
1227632   +_SPRIN46=
1227633   +-0.180501533*_S1_PC_1+
1227634   +-0.292125135*_S2_PC_10+
1227635   +0.0496068949*_S3_PC_11+
1227636   +-0.39238632*_S4_PC_12+
1227637   +0.0504480044*_S5_PC_13+
1227638   +0.2554721353*_S6_PC_14+
1227639   +0.1212210649*_S7_PC_15+
1227640   +0.3944716624*_S8_PC_16+
1227641   +0.2654649612*_S9_PC_17+
1227642   +-0.139900403*_S10_PC_2+
1227643   +0.3104878745*_S11_PC_3+
1227644   +0.3921543574*_S12_PC_4+
1227645   +-0.0786467*_S13_PC_5+
1227646   +-0.135648388*_S14_PC_6+
1227647   +0.0491760472*_S15_PC_7+
1227648   +0.0525967564*_S16_PC_8+
1227649   +-0.342839266*_S17_PC_9+
1227650   +-1.65775E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN46= -0.180501533*_S1_PC_1+ -0.292125135*_S2_PC_10+
0.0496068949*_S3_PC_11+ -0.39238632*_S4_PC_12+ 0.0504480044*_S5_PC_13+ 0.2554721353*_S6_PC_14+
0.1212210649*_S7_PC_15+ 0.3944716624*_S8_PC_16+ 0.2654649612*_S9_PC_17+
-0.139900403*_S10_PC_2+ 0.3104878745*_S11_PC_3+ 0.3921543574*_S12_PC_4+ -0.0786467*_S13_PC_5+
-0.135648388*_S14_PC_6+ 0.0491760472*_S15_PC_7+ 0.0525967564*_S16_PC_8+
-0.342839266*_S17_PC_9+ -1.65775E-10*_S18_YEAR_BIRTH;
1227651   +;
MPRINT(EM_DIAGRAM):   ;
1227652   +/*----------------------------------------------*/
1227653   +* Component 1 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 5;
1227654   +/*----------------------------------------------*/
1227655   +;
MPRINT(EM_DIAGRAM):   ;
1227656   +_SPRIN51=
1227657   +-0.115046453*_S1_PC_1+
1227658   +0.5302526185*_S2_PC_10+
1227659   +-0.275135397*_S3_PC_11+
1227660   +0.004612446*_S4_PC_12+
1227661   +0.166932134*_S5_PC_13+
1227662   +-0.17048832*_S6_PC_14+
1227663   +-0.212191542*_S7_PC_15+
1227664   +0.0228966122*_S8_PC_16+
1227665   +0.4384969167*_S9_PC_17+
1227666   +0.0077993846*_S10_PC_2+
1227667   +0.4915793429*_S11_PC_3+
1227668   +-0.162964672*_S12_PC_4+
1227669   +-0.164545705*_S13_PC_5+
1227670   +-0.046033642*_S14_PC_6+
1227671   +0.0686861603*_S15_PC_7+
1227672   +-0.175404685*_S16_PC_8+
1227673   +0.0465458336*_S17_PC_9+
1227674   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN51= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227675   +/*----------------------------------------------*/
1227676   +* Component 2 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 5;
1227677   +/*----------------------------------------------*/
1227678   +;
MPRINT(EM_DIAGRAM):   ;
1227679   +_SPRIN52=
1227680   +0.5472327471*_S1_PC_1+
1227681   +0.0689025168*_S2_PC_10+
1227682   +0.1063292528*_S3_PC_11+
1227683   +-0.00786993*_S4_PC_12+
1227684   +-0.081647068*_S5_PC_13+
1227685   +0.0764676562*_S6_PC_14+
1227686   +0.2501879069*_S7_PC_15+
1227687   +-0.158104644*_S8_PC_16+
1227688   +0.2869913627*_S9_PC_17+
1227689   +0.0098433348*_S10_PC_2+
1227690   +0.1206515741*_S11_PC_3+
1227691   +0.0085779438*_S12_PC_4+
1227692   +-0.339405068*_S13_PC_5+
1227693   +0.3375545447*_S14_PC_6+
1227694   +0.0542971825*_S15_PC_7+
1227695   +0.5050955192*_S16_PC_8+
1227696   +-0.004055733*_S17_PC_9+
1227697   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN52= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1227698   +/*----------------------------------------------*/
1227699   +* Component 3 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 5;
1227700   +/*----------------------------------------------*/
1227701   +;
MPRINT(EM_DIAGRAM):   ;
1227702   +_SPRIN53=
1227703   +0.0904586995*_S1_PC_1+
1227704   +-0.25358759*_S2_PC_10+
1227705   +0.1798508899*_S3_PC_11+
1227706   +0.1286557873*_S4_PC_12+
1227707   +0.3871465144*_S5_PC_13+
1227708   +0.3933352021*_S6_PC_14+
1227709   +-0.105794257*_S7_PC_15+
1227710   +0.0164426249*_S8_PC_16+
1227711   +0.2424122793*_S9_PC_17+
1227712   +0.3425749957*_S10_PC_2+
1227713   +0.1236367164*_S11_PC_3+
1227714   +-0.267238623*_S12_PC_4+
1227715   +0.2876403849*_S13_PC_5+
1227716   +-0.276983559*_S14_PC_6+
1227717   +0.1162237381*_S15_PC_7+
1227718   +0.1603566014*_S16_PC_8+
1227719   +0.317885474*_S17_PC_9+
1227720   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN53= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1227721   +/*----------------------------------------------*/
1227722   +* Component 4 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 5;
1227723   +/*----------------------------------------------*/
1227724   +;
MPRINT(EM_DIAGRAM):   ;
1227725   +_SPRIN54=
1227726   +-0.216059196*_S1_PC_1+
1227727   +0.2253134053*_S2_PC_10+
1227728   +0.0458400339*_S3_PC_11+
1227729   +-0.158708269*_S4_PC_12+
1227730   +0.2958082517*_S5_PC_13+
1227731   +0.1640638198*_S6_PC_14+
1227732   +-0.330259515*_S7_PC_15+
1227733   +0.0489846489*_S8_PC_16+
1227734   +0.0159008582*_S9_PC_17+
1227735   +-0.302936443*_S10_PC_2+
1227736   +-0.158642589*_S11_PC_3+
1227737   +-0.070387665*_S12_PC_4+
1227738   +0.3540228754*_S13_PC_5+
1227739   +0.4732991561*_S14_PC_6+
1227740   +-0.173510857*_S15_PC_7+
1227741   +0.3684386956*_S16_PC_8+
1227742   +-0.109680308*_S17_PC_9+
1227743   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN54= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1227744   +/*----------------------------------------------*/
1227745   +* Component 5 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 5;
1227746   +/*----------------------------------------------*/
1227747   +;
MPRINT(EM_DIAGRAM):   ;
1227748   +_SPRIN55=
1227749   +0.1715451272*_S1_PC_1+
1227750   +0.3115614636*_S2_PC_10+
1227751   +0.3007489853*_S3_PC_11+
1227752   +0.0867096677*_S4_PC_12+
1227753   +0.4850813272*_S5_PC_13+
1227754   +-0.154430605*_S6_PC_14+
1227755   +0.0053311376*_S7_PC_15+
1227756   +0.1605102659*_S8_PC_16+
1227757   +-0.18054643*_S9_PC_17+
1227758   +0.1238681466*_S10_PC_2+
1227759   +-0.209620079*_S11_PC_3+
1227760   +0.0074706781*_S12_PC_4+
1227761   +-0.230438413*_S13_PC_5+
1227762   +-0.360907655*_S14_PC_6+
1227763   +-0.094862505*_S15_PC_7+
1227764   +0.102183415*_S16_PC_8+
1227765   +-0.442555387*_S17_PC_9+
1227766   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN55= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1227767   +/*----------------------------------------------*/
1227768   +* Component 6 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 5;
1227769   +/*----------------------------------------------*/
1227770   +;
MPRINT(EM_DIAGRAM):   ;
1227771   +_SPRIN56=
1227772   +-0.142104936*_S1_PC_1+
1227773   +-0.163802529*_S2_PC_10+
1227774   +0.2722556929*_S3_PC_11+
1227775   +-0.106217695*_S4_PC_12+
1227776   +0.1292014315*_S5_PC_13+
1227777   +-0.186258463*_S6_PC_14+
1227778   +-0.091004563*_S7_PC_15+
1227779   +-0.064777423*_S8_PC_16+
1227780   +-0.238558476*_S9_PC_17+
1227781   +-0.156265277*_S10_PC_2+
1227782   +0.2206105358*_S11_PC_3+
1227783   +-0.156353822*_S12_PC_4+
1227784   +-0.2104311*_S13_PC_5+
1227785   +0.0856687943*_S14_PC_6+
1227786   +0.2870928087*_S15_PC_7+
1227787   +0.0511562227*_S16_PC_8+
1227788   +0.1122597348*_S17_PC_9+
1227789   +0.7071067813*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN56= -0.142104936*_S1_PC_1+ -0.163802529*_S2_PC_10+
0.2722556929*_S3_PC_11+ -0.106217695*_S4_PC_12+ 0.1292014315*_S5_PC_13+
-0.186258463*_S6_PC_14+ -0.091004563*_S7_PC_15+ -0.064777423*_S8_PC_16+
-0.238558476*_S9_PC_17+ -0.156265277*_S10_PC_2+ 0.2206105358*_S11_PC_3+
-0.156353822*_S12_PC_4+ -0.2104311*_S13_PC_5+ 0.0856687943*_S14_PC_6+ 0.2870928087*_S15_PC_7+
0.0511562227*_S16_PC_8+ 0.1122597348*_S17_PC_9+ 0.7071067813*_S18_YEAR_BIRTH;
1227790   +;
MPRINT(EM_DIAGRAM):   ;
1227791   +/*----------------------------------------------*/
1227792   +* Component 1 at stage 6;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 6;
1227793   +/*----------------------------------------------*/
1227794   +;
MPRINT(EM_DIAGRAM):   ;
1227795   +_SPRIN61=
1227796   +-0.115046453*_S1_PC_1+
1227797   +0.5302526185*_S2_PC_10+
1227798   +-0.275135397*_S3_PC_11+
1227799   +0.004612446*_S4_PC_12+
1227800   +0.166932134*_S5_PC_13+
1227801   +-0.17048832*_S6_PC_14+
1227802   +-0.212191542*_S7_PC_15+
1227803   +0.0228966122*_S8_PC_16+
1227804   +0.4384969167*_S9_PC_17+
1227805   +0.0077993846*_S10_PC_2+
1227806   +0.4915793429*_S11_PC_3+
1227807   +-0.162964672*_S12_PC_4+
1227808   +-0.164545705*_S13_PC_5+
1227809   +-0.046033642*_S14_PC_6+
1227810   +0.0686861603*_S15_PC_7+
1227811   +-0.175404685*_S16_PC_8+
1227812   +0.0465458336*_S17_PC_9+
1227813   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN61= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227814   +/*----------------------------------------------*/
1227815   +* Component 2 at stage 6;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 6;
1227816   +/*----------------------------------------------*/
1227817   +;
MPRINT(EM_DIAGRAM):   ;
1227818   +_SPRIN62=
1227819   +-0.088531922*_S1_PC_1+
1227820   +-0.009002035*_S2_PC_10+
1227821   +0.31667389*_S3_PC_11+
1227822   +-0.02941866*_S4_PC_12+
1227823   +-0.2067745*_S5_PC_13+
1227824   +-0.025433534*_S6_PC_14+
1227825   +-0.054283266*_S7_PC_15+
1227826   +0.0743381462*_S8_PC_16+
1227827   +0.4000347072*_S9_PC_17+
1227828   +0.2150358409*_S10_PC_2+
1227829   +-0.342625967*_S11_PC_3+
1227830   +-0.277332723*_S12_PC_4+
1227831   +0.0361157229*_S13_PC_5+
1227832   +0.2510167741*_S14_PC_6+
1227833   +0.4155727148*_S15_PC_7+
1227834   +-0.285270046*_S16_PC_8+
1227835   +-0.34654039*_S17_PC_9+
1227836   +-5.85785E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN62= -0.088531922*_S1_PC_1+ -0.009002035*_S2_PC_10+
0.31667389*_S3_PC_11+ -0.02941866*_S4_PC_12+ -0.2067745*_S5_PC_13+ -0.025433534*_S6_PC_14+
-0.054283266*_S7_PC_15+ 0.0743381462*_S8_PC_16+ 0.4000347072*_S9_PC_17+
0.2150358409*_S10_PC_2+ -0.342625967*_S11_PC_3+ -0.277332723*_S12_PC_4+
0.0361157229*_S13_PC_5+ 0.2510167741*_S14_PC_6+ 0.4155727148*_S15_PC_7+
-0.285270046*_S16_PC_8+ -0.34654039*_S17_PC_9+ -5.85785E-10*_S18_YEAR_BIRTH;
1227837   +;
MPRINT(EM_DIAGRAM):   ;
1227838   +/*----------------------------------------------*/
1227839   +* Component 1 at stage 7;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 7;
1227840   +/*----------------------------------------------*/
1227841   +;
MPRINT(EM_DIAGRAM):   ;
1227842   +_SPRIN71=
1227843   +-0.115046453*_S1_PC_1+
1227844   +0.5302526185*_S2_PC_10+
1227845   +-0.275135397*_S3_PC_11+
1227846   +0.004612446*_S4_PC_12+
1227847   +0.166932134*_S5_PC_13+
1227848   +-0.17048832*_S6_PC_14+
1227849   +-0.212191542*_S7_PC_15+
1227850   +0.0228966122*_S8_PC_16+
1227851   +0.4384969167*_S9_PC_17+
1227852   +0.0077993846*_S10_PC_2+
1227853   +0.4915793429*_S11_PC_3+
1227854   +-0.162964672*_S12_PC_4+
1227855   +-0.164545705*_S13_PC_5+
1227856   +-0.046033642*_S14_PC_6+
1227857   +0.0686861603*_S15_PC_7+
1227858   +-0.175404685*_S16_PC_8+
1227859   +0.0465458336*_S17_PC_9+
1227860   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN71= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1227861   +/*----------------------------------------------*/
1227862   +* Component 2 at stage 7;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 7;
1227863   +/*----------------------------------------------*/
1227864   +;
MPRINT(EM_DIAGRAM):   ;
1227865   +_SPRIN72=
1227866   +-0.180501533*_S1_PC_1+
1227867   +-0.292125135*_S2_PC_10+
1227868   +0.0496068949*_S3_PC_11+
1227869   +-0.39238632*_S4_PC_12+
1227870   +0.0504480044*_S5_PC_13+
1227871   +0.2554721353*_S6_PC_14+
1227872   +0.1212210649*_S7_PC_15+
1227873   +0.3944716624*_S8_PC_16+
1227874   +0.2654649612*_S9_PC_17+
1227875   +-0.139900403*_S10_PC_2+
1227876   +0.3104878745*_S11_PC_3+
1227877   +0.3921543574*_S12_PC_4+
1227878   +-0.0786467*_S13_PC_5+
1227879   +-0.135648388*_S14_PC_6+
1227880   +0.0491760472*_S15_PC_7+
1227881   +0.0525967564*_S16_PC_8+
1227882   +-0.342839266*_S17_PC_9+
1227883   +-1.65775E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN72= -0.180501533*_S1_PC_1+ -0.292125135*_S2_PC_10+
0.0496068949*_S3_PC_11+ -0.39238632*_S4_PC_12+ 0.0504480044*_S5_PC_13+ 0.2554721353*_S6_PC_14+
0.1212210649*_S7_PC_15+ 0.3944716624*_S8_PC_16+ 0.2654649612*_S9_PC_17+
-0.139900403*_S10_PC_2+ 0.3104878745*_S11_PC_3+ 0.3921543574*_S12_PC_4+ -0.0786467*_S13_PC_5+
-0.135648388*_S14_PC_6+ 0.0491760472*_S15_PC_7+ 0.0525967564*_S16_PC_8+
-0.342839266*_S17_PC_9+ -1.65775E-10*_S18_YEAR_BIRTH;
1227884   +;
MPRINT(EM_DIAGRAM):   ;
1227885   +DROP
1227886   +_SPRIN01
1227887   +_SPRIN02
1227888   +_SPRIN03
1227889   +_SPRIN04
1227890   +_SPRIN05
1227891   +_SPRIN06
1227892   +_SPRIN11
1227893   +_SPRIN12
1227894   +_SPRIN13
1227895   +_SPRIN14
1227896   +_SPRIN15
1227897   +_SPRIN16
1227898   +_SPRIN21
1227899   +_SPRIN22
1227900   +_SPRIN23
1227901   +_SPRIN24
1227902   +_SPRIN25
1227903   +_SPRIN26
1227904   +_SPRIN31
1227905   +_SPRIN32
1227906   +_SPRIN33
1227907   +_SPRIN34
1227908   +_SPRIN35
1227909   +_SPRIN36
1227910   +_SPRIN41
1227911   +_SPRIN42
1227912   +_SPRIN43
1227913   +_SPRIN44
1227914   +_SPRIN45
1227915   +_SPRIN46
1227916   +_SPRIN51
1227917   +_SPRIN52
1227918   +_SPRIN53
1227919   +_SPRIN54
1227920   +_SPRIN55
1227921   +_SPRIN56
1227922   +_SPRIN61
1227923   +_SPRIN62
1227924   +_SPRIN71
1227925   +_SPRIN72
1227926   +;
MPRINT(EM_DIAGRAM):   DROP _SPRIN01 _SPRIN02 _SPRIN03 _SPRIN04 _SPRIN05 _SPRIN06 _SPRIN11
_SPRIN12 _SPRIN13 _SPRIN14 _SPRIN15 _SPRIN16 _SPRIN21 _SPRIN22 _SPRIN23 _SPRIN24 _SPRIN25
_SPRIN26 _SPRIN31 _SPRIN32 _SPRIN33 _SPRIN34 _SPRIN35 _SPRIN36 _SPRIN41 _SPRIN42 _SPRIN43
_SPRIN44 _SPRIN45 _SPRIN46 _SPRIN51 _SPRIN52 _SPRIN53 _SPRIN54 _SPRIN55 _SPRIN56 _SPRIN61
_SPRIN62 _SPRIN71 _SPRIN72 ;
1227927   +;
MPRINT(EM_DIAGRAM):   ;
1227928   +/**********************************************************/
1227929   +* Selected activation function at stage 0 = SIN;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 0 = SIN;
1227930   +/**********************************************************/
1227931   +;
MPRINT(EM_DIAGRAM):   ;
1227932   +_YHAT0=2.5483709193
1227933   ++3.79289941309279*SIN(-0.42084283769022*_SPRIN01*(2/ARCOS(-1)))
1227934   ++9.12613357366608*SIN(0.11461206996404*_SPRIN02*(2/ARCOS(-1)))
1227935   ++1.75427678769776*SIN(0.65319204434228*_SPRIN03*(2/ARCOS(-1)))
1227936   ++9.4204264255804*SIN(-0.09632976126072*_SPRIN04*(2/ARCOS(-1)))
1227937   ++7.74196499908445*SIN(0.13593076474093*_SPRIN05*(2/ARCOS(-1)))
1227938   ++1.2344834866815*SIN(0.94061350603414*_SPRIN06*(2/ARCOS(-1)))
1227939   +;
MPRINT(EM_DIAGRAM):   _YHAT0=2.5483709193
+3.79289941309279*SIN(-0.42084283769022*_SPRIN01*(2/ARCOS(-1)))
+9.12613357366608*SIN(0.11461206996404*_SPRIN02*(2/ARCOS(-1)))
+1.75427678769776*SIN(0.65319204434228*_SPRIN03*(2/ARCOS(-1)))
+9.4204264255804*SIN(-0.09632976126072*_SPRIN04*(2/ARCOS(-1)))
+7.74196499908445*SIN(0.13593076474093*_SPRIN05*(2/ARCOS(-1)))
+1.2344834866815*SIN(0.94061350603414*_SPRIN06*(2/ARCOS(-1))) ;
1227940   +/*--- Target level is binary, take a logistic link function --*/
1227941   +if _YHAT0 > 0 then _YHAT0=1/(1+exp(-_YHAT0));
MPRINT(EM_DIAGRAM):   if _YHAT0 > 0 then _YHAT0=1/(1+exp(-_YHAT0));
1227942   +else _YHAT0=exp(_YHAT0)/(1+exp(_YHAT0));
MPRINT(EM_DIAGRAM):   else _YHAT0=exp(_YHAT0)/(1+exp(_YHAT0));
1227943   +;
MPRINT(EM_DIAGRAM):   ;
1227944   +/**********************************************************/
1227945   +* Selected activation function at stage 1 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 1 = SQUARE;
1227946   +/**********************************************************/
1227947   +;
MPRINT(EM_DIAGRAM):   ;
1227948   +_RHAT1=0.0038091527
1227949   ++(0.04083501553091+0.00505131800181*_SPRIN11)*_SPRIN11
1227950   ++(0.03682825883303+-0.00518790244012*_SPRIN12)*_SPRIN12
1227951   ++(-0.01898621280818+-0.00110083315067*_SPRIN13)*_SPRIN13
1227952   ++(-0.02368844932599+0.0002312229899*_SPRIN14)*_SPRIN14
1227953   ++(0.01854629185569+-0.00511783349856*_SPRIN15)*_SPRIN15
1227954   ++(0.00874927307929+-0.00458046676089*_SPRIN16)*_SPRIN16
1227955   +;
MPRINT(EM_DIAGRAM):   _RHAT1=0.0038091527
+(0.04083501553091+0.00505131800181*_SPRIN11)*_SPRIN11
+(0.03682825883303+-0.00518790244012*_SPRIN12)*_SPRIN12
+(-0.01898621280818+-0.00110083315067*_SPRIN13)*_SPRIN13
+(-0.02368844932599+0.0002312229899*_SPRIN14)*_SPRIN14
+(0.01854629185569+-0.00511783349856*_SPRIN15)*_SPRIN15
+(0.00874927307929+-0.00458046676089*_SPRIN16)*_SPRIN16 ;
1227956   +;
MPRINT(EM_DIAGRAM):   ;
1227957   +/**********************************************************/
1227958   +* Selected activation function at stage 2 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 2 = SQUARE;
1227959   +/**********************************************************/
1227960   +;
MPRINT(EM_DIAGRAM):   ;
1227961   +_RHAT2=0.0033806367
1227962   ++(0.01363438578855+0.00418049484282*_SPRIN21)*_SPRIN21
1227963   ++(-0.00939841818055+-0.01204528580564*_SPRIN22)*_SPRIN22
1227964   ++(0.00740450154167+0.00253672591167*_SPRIN23)*_SPRIN23
1227965   ++(0.01011311389787+-0.00146722764271*_SPRIN24)*_SPRIN24
1227966   ++(0.00825906753326+-0.00293450175884*_SPRIN25)*_SPRIN25
1227967   ++(-0.00851652393959+0.00682318379966*_SPRIN26)*_SPRIN26
1227968   +;
MPRINT(EM_DIAGRAM):   _RHAT2=0.0033806367
+(0.01363438578855+0.00418049484282*_SPRIN21)*_SPRIN21
+(-0.00939841818055+-0.01204528580564*_SPRIN22)*_SPRIN22
+(0.00740450154167+0.00253672591167*_SPRIN23)*_SPRIN23
+(0.01011311389787+-0.00146722764271*_SPRIN24)*_SPRIN24
+(0.00825906753326+-0.00293450175884*_SPRIN25)*_SPRIN25
+(-0.00851652393959+0.00682318379966*_SPRIN26)*_SPRIN26 ;
1227969   +;
MPRINT(EM_DIAGRAM):   ;
1227970   +/**********************************************************/
1227971   +* Selected activation function at stage 3 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 3 = SQUARE;
1227972   +/**********************************************************/
1227973   +;
MPRINT(EM_DIAGRAM):   ;
1227974   +_RHAT3=-0.000829622
1227975   ++(0.00600271794048+-0.00074476410414*_SPRIN31)*_SPRIN31
1227976   ++(-0.00364300062933+-0.00040838089063*_SPRIN32)*_SPRIN32
1227977   ++(0.00781166729348+-0.00181934912487*_SPRIN33)*_SPRIN33
1227978   ++(0.00349080387965+0.00841515528576*_SPRIN34)*_SPRIN34
1227979   ++(0.00912669691909+-0.00970203240121*_SPRIN35)*_SPRIN35
1227980   ++(-0.00166318913219+-0.00275873829837*_SPRIN36)*_SPRIN36
1227981   +;
MPRINT(EM_DIAGRAM):   _RHAT3=-0.000829622
+(0.00600271794048+-0.00074476410414*_SPRIN31)*_SPRIN31
+(-0.00364300062933+-0.00040838089063*_SPRIN32)*_SPRIN32
+(0.00781166729348+-0.00181934912487*_SPRIN33)*_SPRIN33
+(0.00349080387965+0.00841515528576*_SPRIN34)*_SPRIN34
+(0.00912669691909+-0.00970203240121*_SPRIN35)*_SPRIN35
+(-0.00166318913219+-0.00275873829837*_SPRIN36)*_SPRIN36 ;
1227982   +;
MPRINT(EM_DIAGRAM):   ;
1227983   +/**********************************************************/
1227984   +* Selected activation function at stage 4 = TANH;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 4 = TANH;
1227985   +/**********************************************************/
1227986   +;
MPRINT(EM_DIAGRAM):   ;
1227987   +_RHAT4=-0.001101264
1227988   ++-0.035302483833*TANH(0.1155236446518*_SPRIN41)
1227989   ++0.01574826561252*TANH(-0.84880911259972*_SPRIN42)
1227990   ++0.00913476757653*TANH(5.75007475786896*_SPRIN43)
1227991   ++-0.01055088580281*TANH(1.74814947785792*_SPRIN44)
1227992   ++0.00707812218626*TANH(-2.78842235044945*_SPRIN45)
1227993   ++0.00980902580133*TANH(0.45937598506696*_SPRIN46)
1227994   +;
MPRINT(EM_DIAGRAM):   _RHAT4=-0.001101264 +-0.035302483833*TANH(0.1155236446518*_SPRIN41)
+0.01574826561252*TANH(-0.84880911259972*_SPRIN42)
+0.00913476757653*TANH(5.75007475786896*_SPRIN43)
+-0.01055088580281*TANH(1.74814947785792*_SPRIN44)
+0.00707812218626*TANH(-2.78842235044945*_SPRIN45)
+0.00980902580133*TANH(0.45937598506696*_SPRIN46) ;
1227995   +;
MPRINT(EM_DIAGRAM):   ;
1227996   +/**********************************************************/
1227997   +* Selected activation function at stage 5 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 5 = SQUARE;
1227998   +/**********************************************************/
1227999   +;
MPRINT(EM_DIAGRAM):   ;
1228000   +_RHAT5=0.000668225
1228001   ++(-0.00019510519268+-0.00067610323388*_SPRIN51)*_SPRIN51
1228002   ++(0.00299570661826+0.00046350367455*_SPRIN52)*_SPRIN52
1228003   ++(0.00367067678963+-0.00097228388893*_SPRIN53)*_SPRIN53
1228004   ++(0.00271553459602+-0.00080798865923*_SPRIN54)*_SPRIN54
1228005   ++(0.00402113460937+0.00291524397998*_SPRIN55)*_SPRIN55
1228006   ++(-0.0013102871264+-0.00077751868318*_SPRIN56)*_SPRIN56
1228007   +;
MPRINT(EM_DIAGRAM):   _RHAT5=0.000668225
+(-0.00019510519268+-0.00067610323388*_SPRIN51)*_SPRIN51
+(0.00299570661826+0.00046350367455*_SPRIN52)*_SPRIN52
+(0.00367067678963+-0.00097228388893*_SPRIN53)*_SPRIN53
+(0.00271553459602+-0.00080798865923*_SPRIN54)*_SPRIN54
+(0.00402113460937+0.00291524397998*_SPRIN55)*_SPRIN55
+(-0.0013102871264+-0.00077751868318*_SPRIN56)*_SPRIN56 ;
1228008   +;
MPRINT(EM_DIAGRAM):   ;
1228009   +/**********************************************************/
1228010   +* Selected activation function at stage 6 = TANH;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 6 = TANH;
1228011   +/**********************************************************/
1228012   +;
MPRINT(EM_DIAGRAM):   ;
1228013   +_RHAT6=0.0000939197
1228014   ++0.02544723422973*TANH(0.11690459842008*_SPRIN61)
1228015   ++0.01189019712044*TANH(0.07362773994214*_SPRIN62)
1228016   +;
MPRINT(EM_DIAGRAM):   _RHAT6=0.0000939197 +0.02544723422973*TANH(0.11690459842008*_SPRIN61)
+0.01189019712044*TANH(0.07362773994214*_SPRIN62) ;
1228017   +;
MPRINT(EM_DIAGRAM):   ;
1228018   +/**********************************************************/
1228019   +* Selected activation function at stage 7 = COS;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 7 = COS;
1228020   +/**********************************************************/
1228021   +;
MPRINT(EM_DIAGRAM):   ;
1228022   +_RHAT7=0.5329856773
1228023   ++-0.13664525498092*COS(0.13087682520683*_SPRIN71*(2/ARCOS(-1)))
1228024   ++-0.39681366133923*COS(0.00183650665402*_SPRIN72*(2/ARCOS(-1)))
1228025   +;
MPRINT(EM_DIAGRAM):   _RHAT7=0.5329856773
+-0.13664525498092*COS(0.13087682520683*_SPRIN71*(2/ARCOS(-1)))
+-0.39681366133923*COS(0.00183650665402*_SPRIN72*(2/ARCOS(-1))) ;
1228026   +;
MPRINT(EM_DIAGRAM):   ;
1228027   +_tmpPredict
1228028   +=_YHAT0
1228029   ++_RHAT1
1228030   ++_RHAT2
1228031   ++_RHAT3
1228032   ++_RHAT4
1228033   ++_RHAT5
1228034   ++_RHAT6
1228035   ++_RHAT7
1228036   +;
MPRINT(EM_DIAGRAM):   _tmpPredict =_YHAT0 +_RHAT1 +_RHAT2 +_RHAT3 +_RHAT4 +_RHAT5 +_RHAT6
+_RHAT7 ;
1228037   +_tmpPredict=1-_tmpPredict;
MPRINT(EM_DIAGRAM):   _tmpPredict=1-_tmpPredict;
1228038   +If _tmpPredict > 1 then _tmpPredict=1;
MPRINT(EM_DIAGRAM):   If _tmpPredict > 1 then _tmpPredict=1;
1228039   +else if _tmpPredict < 0 then _tmpPredict=0;
MPRINT(EM_DIAGRAM):   else if _tmpPredict < 0 then _tmpPredict=0;
1228040   +P_DepVar1=_tmpPredict;
MPRINT(EM_DIAGRAM):   P_DepVar1=_tmpPredict;
1228041   +label P_DepVar1 = "Predicted: DepVar=1";
MPRINT(EM_DIAGRAM):   label P_DepVar1 = "Predicted: DepVar=1";
1228042   +P_DepVar0=1-_tmpPredict;
MPRINT(EM_DIAGRAM):   P_DepVar0=1-_tmpPredict;
1228043   +label P_DepVar0 = "Predicted: DepVar=0";
MPRINT(EM_DIAGRAM):   label P_DepVar0 = "Predicted: DepVar=0";
1228044   +if P_DepVar1 ge 0.5 then I_DepVar="1";
MPRINT(EM_DIAGRAM):   if P_DepVar1 ge 0.5 then I_DepVar="1";
1228045   +else I_DepVar="0";
MPRINT(EM_DIAGRAM):   else I_DepVar="0";
1228046   +if F_DepVar NE "1" AND F_DepVar NE "0" then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE "1" AND F_DepVar NE "0" then do;
1228047   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1228048   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1228049   +end;
MPRINT(EM_DIAGRAM):   end;
1228050   +else do;
MPRINT(EM_DIAGRAM):   else do;
1228051   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1228052   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1228053   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1228054   +WHEN("1") R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN("1") R_DepVar1 = R_DepVar1 +1;
1228055   +WHEN("0") R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN("0") R_DepVar0 = R_DepVar0 +1;
1228056   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1228057   +end;
MPRINT(EM_DIAGRAM):   end;
1228058   +END;
MPRINT(EM_DIAGRAM):   END;
1228059   +;
MPRINT(EM_DIAGRAM):   ;
1228060   +DROP _YHAT0
1228061   +_RHAT1
1228062   +_RHAT2
1228063   +_RHAT3
1228064   +_RHAT4
1228065   +_RHAT5
1228066   +_RHAT6
1228067   +_RHAT7
1228068   +_tmpPredict
1228069   +_S1_PC_1
1228070   +_S2_PC_10
1228071   +_S3_PC_11
1228072   +_S4_PC_12
1228073   +_S5_PC_13
1228074   +_S6_PC_14
1228075   +_S7_PC_15
1228076   +_S8_PC_16
1228077   +_S9_PC_17
1228078   +_S10_PC_2
1228079   +_S11_PC_3
1228080   +_S12_PC_4
1228081   +_S13_PC_5
1228082   +_S14_PC_6
1228083   +_S15_PC_7
1228084   +_S16_PC_8
1228085   +_S17_PC_9
1228086   +_S18_YEAR_BIRTH
1228087   +;
MPRINT(EM_DIAGRAM):   DROP _YHAT0 _RHAT1 _RHAT2 _RHAT3 _RHAT4 _RHAT5 _RHAT6 _RHAT7 _tmpPredict
_S1_PC_1 _S2_PC_10 _S3_PC_11 _S4_PC_12 _S5_PC_13 _S6_PC_14 _S7_PC_15 _S8_PC_16 _S9_PC_17
_S10_PC_2 _S11_PC_3 _S12_PC_4 _S13_PC_5 _S14_PC_6 _S15_PC_7 _S16_PC_8 _S17_PC_9
_S18_YEAR_BIRTH ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1228088    run;
 
NOTE: DATA STEP view saved on file EMWS8.DMNEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1228089    quit;
1228090    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1228091    filename emflow
1228091  ! "C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * DMNeural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1228092    *------------------------------------------------------------*;
1228093    * DMNeural2: Scoring VALIDATE data;
1228094    *------------------------------------------------------------*;
1228095    data EMWS8.DMNeural2_VALIDATE
1228096    / view=EMWS8.DMNeural2_VALIDATE
1228097    ;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_VALIDATE / view=EMWS8.DMNeural2_VALIDATE ;
1228098    set EMWS8.PRINCOMP_VALIDATE
1228099    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
1228100    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMFLOWSCORE.sas.
1228101   +**********************************************************;
MPRINT(EM_DIAGRAM):   **********************************************************;
1228102   +**** Begin scoring code for DMNeural;
MPRINT(EM_DIAGRAM):   **** Begin scoring code for DMNeural;
1228103   +**********************************************************;
MPRINT(EM_DIAGRAM):   **********************************************************;
1228104   +LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
1228105   +LABEL _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = "Warnings";
1228106   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH I_DepVar
1228106  !+       I_DepVar $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1228107   +LABEL I_DepVar="Into: DepVar";
MPRINT(EM_DIAGRAM):   LABEL I_DepVar= "Into: DepVar";
1228108   +LENGTH _FORMAT_ $200;
MPRINT(EM_DIAGRAM):   LENGTH _FORMAT_ $200;
1228109   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH _NORMFMT_
1228109  !+       _NORMFMT_ $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1228110   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH F_DepVar
1228110  !+       F_DepVar $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1228111   +LABEL F_DepVar="From: DepVar";
MPRINT(EM_DIAGRAM):   LABEL F_DepVar= "From: DepVar";
1228112   +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH _TARGNOR_
1228112  !+       _TARGNOR_ $%DMNORLEN;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
1228113   +_FORMAT_ =PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT_ =PUT(DepVar, BEST.);
1228114   +%DMNORMCP(_FORMAT_ , _TARGNOR_ );
MPRINT(DMNORMCP):   _TARGNOR_=dmnorm(_FORMAT_,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1228115   +F_DepVar=_TARGNOR_;
MPRINT(EM_DIAGRAM):   F_DepVar=_TARGNOR_;
1228116   +DROP
1228117   +_FORMAT_ _NORMFMT_;
MPRINT(EM_DIAGRAM):   DROP _FORMAT_ _NORMFMT_;
1228118   +;
MPRINT(EM_DIAGRAM):   ;
1228119   +/*-------------------------------------------------------------------------*/
1228120   +*Impute missing values for interval variables;
MPRINT(EM_DIAGRAM):   *Impute missing values for interval variables;
1228121   +/*-------------------------------------------------------------------------*/
1228122   +;
MPRINT(EM_DIAGRAM):   ;
1228123   +if PC_1=. then _S1_PC_1 = 0;
MPRINT(EM_DIAGRAM):   if PC_1=. then _S1_PC_1 = 0;
1228124   +else _S1_PC_1=(PC_1-1.1934663685102E-14)/3.34529398009117;
MPRINT(EM_DIAGRAM):   else _S1_PC_1=(PC_1-1.1934663685102E-14)/3.34529398009117;
1228125   +if PC_10=. then _S2_PC_10 = 0;
MPRINT(EM_DIAGRAM):   if PC_10=. then _S2_PC_10 = 0;
1228126   +else _S2_PC_10=(PC_10-7.3437465039148E-15)/1.21693061249386;
MPRINT(EM_DIAGRAM):   else _S2_PC_10=(PC_10-7.3437465039148E-15)/1.21693061249386;
1228127   +if PC_11=. then _S3_PC_11 = 0;
MPRINT(EM_DIAGRAM):   if PC_11=. then _S3_PC_11 = 0;
1228128   +else _S3_PC_11=(PC_11--7.0730068811131E-15)/1.16796442652649;
MPRINT(EM_DIAGRAM):   else _S3_PC_11=(PC_11--7.0730068811131E-15)/1.16796442652649;
1228129   +if PC_12=. then _S4_PC_12 = 0;
MPRINT(EM_DIAGRAM):   if PC_12=. then _S4_PC_12 = 0;
1228130   +else _S4_PC_12=(PC_12-4.4552960029481E-15)/1.12591589658837;
MPRINT(EM_DIAGRAM):   else _S4_PC_12=(PC_12-4.4552960029481E-15)/1.12591589658837;
1228131   +if PC_13=. then _S5_PC_13 = 0;
MPRINT(EM_DIAGRAM):   if PC_13=. then _S5_PC_13 = 0;
1228132   +else _S5_PC_13=(PC_13--1.6512112280313E-15)/1.11508775876214;
MPRINT(EM_DIAGRAM):   else _S5_PC_13=(PC_13--1.6512112280313E-15)/1.11508775876214;
1228133   +if PC_14=. then _S6_PC_14 = 0;
MPRINT(EM_DIAGRAM):   if PC_14=. then _S6_PC_14 = 0;
1228134   +else _S6_PC_14=(PC_14-6.8566794103398E-15)/1.10697173642324;
MPRINT(EM_DIAGRAM):   else _S6_PC_14=(PC_14-6.8566794103398E-15)/1.10697173642324;
1228135   +if PC_15=. then _S7_PC_15 = 0;
MPRINT(EM_DIAGRAM):   if PC_15=. then _S7_PC_15 = 0;
1228136   +else _S7_PC_15=(PC_15-3.7113436914175E-16)/1.07529239411864;
MPRINT(EM_DIAGRAM):   else _S7_PC_15=(PC_15-3.7113436914175E-16)/1.07529239411864;
1228137   +if PC_16=. then _S8_PC_16 = 0;
MPRINT(EM_DIAGRAM):   if PC_16=. then _S8_PC_16 = 0;
1228138   +else _S8_PC_16=(PC_16-2.1907029218846E-15)/1.05155973148348;
MPRINT(EM_DIAGRAM):   else _S8_PC_16=(PC_16-2.1907029218846E-15)/1.05155973148348;
1228139   +if PC_17=. then _S9_PC_17 = 0;
MPRINT(EM_DIAGRAM):   if PC_17=. then _S9_PC_17 = 0;
1228140   +else _S9_PC_17=(PC_17--4.0758372994179E-15)/1.00117687196913;
MPRINT(EM_DIAGRAM):   else _S9_PC_17=(PC_17--4.0758372994179E-15)/1.00117687196913;
1228141   +if PC_2=. then _S10_PC_2 = 0;
MPRINT(EM_DIAGRAM):   if PC_2=. then _S10_PC_2 = 0;
1228142   +else _S10_PC_2=(PC_2--1.1878965470177E-14)/1.83914433852806;
MPRINT(EM_DIAGRAM):   else _S10_PC_2=(PC_2--1.1878965470177E-14)/1.83914433852806;
1228143   +if PC_3=. then _S11_PC_3 = 0;
MPRINT(EM_DIAGRAM):   if PC_3=. then _S11_PC_3 = 0;
1228144   +else _S11_PC_3=(PC_3--4.1240062006548E-15)/1.80610585666437;
MPRINT(EM_DIAGRAM):   else _S11_PC_3=(PC_3--4.1240062006548E-15)/1.80610585666437;
1228145   +if PC_4=. then _S12_PC_4 = 0;
MPRINT(EM_DIAGRAM):   if PC_4=. then _S12_PC_4 = 0;
1228146   +else _S12_PC_4=(PC_4-5.7654901165917E-15)/1.56990487320424;
MPRINT(EM_DIAGRAM):   else _S12_PC_4=(PC_4-5.7654901165917E-15)/1.56990487320424;
1228147   +if PC_5=. then _S13_PC_5 = 0;
MPRINT(EM_DIAGRAM):   if PC_5=. then _S13_PC_5 = 0;
1228148   +else _S13_PC_5=(PC_5-6.952876915043E-15)/1.49991827290296;
MPRINT(EM_DIAGRAM):   else _S13_PC_5=(PC_5-6.952876915043E-15)/1.49991827290296;
1228149   +if PC_6=. then _S14_PC_6 = 0;
MPRINT(EM_DIAGRAM):   if PC_6=. then _S14_PC_6 = 0;
1228150   +else _S14_PC_6=(PC_6--2.2466817323511E-15)/1.41774006330542;
MPRINT(EM_DIAGRAM):   else _S14_PC_6=(PC_6--2.2466817323511E-15)/1.41774006330542;
1228151   +if PC_7=. then _S15_PC_7 = 0;
MPRINT(EM_DIAGRAM):   if PC_7=. then _S15_PC_7 = 0;
1228152   +else _S15_PC_7=(PC_7--8.9771866810044E-16)/1.33453688307765;
MPRINT(EM_DIAGRAM):   else _S15_PC_7=(PC_7--8.9771866810044E-16)/1.33453688307765;
1228153   +if PC_8=. then _S16_PC_8 = 0;
MPRINT(EM_DIAGRAM):   if PC_8=. then _S16_PC_8 = 0;
1228154   +else _S16_PC_8=(PC_8-3.0127075597884E-15)/1.29598076617177;
MPRINT(EM_DIAGRAM):   else _S16_PC_8=(PC_8-3.0127075597884E-15)/1.29598076617177;
1228155   +if PC_9=. then _S17_PC_9 = 0;
MPRINT(EM_DIAGRAM):   if PC_9=. then _S17_PC_9 = 0;
1228156   +else _S17_PC_9=(PC_9-4.6677068276258E-15)/1.23713745620335;
MPRINT(EM_DIAGRAM):   else _S17_PC_9=(PC_9-4.6677068276258E-15)/1.23713745620335;
1228157   +if Year_Birth=. then _S18_YEAR_BIRTH = 0;
MPRINT(EM_DIAGRAM):   if Year_Birth=. then _S18_YEAR_BIRTH = 0;
1228158   +else _S18_YEAR_BIRTH=(Year_Birth-1968.79401853412)/12.063294849345;
MPRINT(EM_DIAGRAM):   else _S18_YEAR_BIRTH=(Year_Birth-1968.79401853412)/12.063294849345;
1228159   +;
MPRINT(EM_DIAGRAM):   ;
1228160   +/*----------------------------------------------*/
1228161   +* Component 1 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 0;
1228162   +/*----------------------------------------------*/
1228163   +;
MPRINT(EM_DIAGRAM):   ;
1228164   +_SPRIN01=
1228165   +0.5472327471*_S1_PC_1+
1228166   +0.0689025168*_S2_PC_10+
1228167   +0.1063292528*_S3_PC_11+
1228168   +-0.00786993*_S4_PC_12+
1228169   +-0.081647068*_S5_PC_13+
1228170   +0.0764676562*_S6_PC_14+
1228171   +0.2501879069*_S7_PC_15+
1228172   +-0.158104644*_S8_PC_16+
1228173   +0.2869913627*_S9_PC_17+
1228174   +0.0098433348*_S10_PC_2+
1228175   +0.1206515741*_S11_PC_3+
1228176   +0.0085779438*_S12_PC_4+
1228177   +-0.339405068*_S13_PC_5+
1228178   +0.3375545447*_S14_PC_6+
1228179   +0.0542971825*_S15_PC_7+
1228180   +0.5050955192*_S16_PC_8+
1228181   +-0.004055733*_S17_PC_9+
1228182   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN01= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1228183   +/*----------------------------------------------*/
1228184   +* Component 2 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 0;
1228185   +/*----------------------------------------------*/
1228186   +;
MPRINT(EM_DIAGRAM):   ;
1228187   +_SPRIN02=
1228188   +-0.426804633*_S1_PC_1+
1228189   +0.2472546236*_S2_PC_10+
1228190   +0.1765620828*_S3_PC_11+
1228191   +0.1176647043*_S4_PC_12+
1228192   +-0.274534049*_S5_PC_13+
1228193   +0.1250064953*_S6_PC_14+
1228194   +0.2491355177*_S7_PC_15+
1228195   +-0.304075464*_S8_PC_16+
1228196   +-0.187873028*_S9_PC_17+
1228197   +0.3451926716*_S10_PC_2+
1228198   +0.3362017343*_S11_PC_3+
1228199   +-0.010389084*_S12_PC_4+
1228200   +0.1887629926*_S13_PC_5+
1228201   +-0.049089507*_S14_PC_6+
1228202   +-0.001231054*_S15_PC_7+
1228203   +0.2888987164*_S16_PC_8+
1228204   +-0.277594699*_S17_PC_9+
1228205   +2.115587E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN02= -0.426804633*_S1_PC_1+ 0.2472546236*_S2_PC_10+
0.1765620828*_S3_PC_11+ 0.1176647043*_S4_PC_12+ -0.274534049*_S5_PC_13+
0.1250064953*_S6_PC_14+ 0.2491355177*_S7_PC_15+ -0.304075464*_S8_PC_16+
-0.187873028*_S9_PC_17+ 0.3451926716*_S10_PC_2+ 0.3362017343*_S11_PC_3+
-0.010389084*_S12_PC_4+ 0.1887629926*_S13_PC_5+ -0.049089507*_S14_PC_6+
-0.001231054*_S15_PC_7+ 0.2888987164*_S16_PC_8+ -0.277594699*_S17_PC_9+
2.115587E-10*_S18_YEAR_BIRTH;
1228206   +/*----------------------------------------------*/
1228207   +* Component 3 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 0;
1228208   +/*----------------------------------------------*/
1228209   +;
MPRINT(EM_DIAGRAM):   ;
1228210   +_SPRIN03=
1228211   +-0.115046453*_S1_PC_1+
1228212   +0.5302526185*_S2_PC_10+
1228213   +-0.275135397*_S3_PC_11+
1228214   +0.004612446*_S4_PC_12+
1228215   +0.166932134*_S5_PC_13+
1228216   +-0.17048832*_S6_PC_14+
1228217   +-0.212191542*_S7_PC_15+
1228218   +0.0228966122*_S8_PC_16+
1228219   +0.4384969167*_S9_PC_17+
1228220   +0.0077993846*_S10_PC_2+
1228221   +0.4915793429*_S11_PC_3+
1228222   +-0.162964672*_S12_PC_4+
1228223   +-0.164545705*_S13_PC_5+
1228224   +-0.046033642*_S14_PC_6+
1228225   +0.0686861603*_S15_PC_7+
1228226   +-0.175404685*_S16_PC_8+
1228227   +0.0465458336*_S17_PC_9+
1228228   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN03= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1228229   +/*----------------------------------------------*/
1228230   +* Component 4 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 0;
1228231   +/*----------------------------------------------*/
1228232   +;
MPRINT(EM_DIAGRAM):   ;
1228233   +_SPRIN04=
1228234   +0.2669085642*_S1_PC_1+
1228235   +-0.010858941*_S2_PC_10+
1228236   +0.2008720446*_S3_PC_11+
1228237   +0.5144148856*_S4_PC_12+
1228238   +-0.190832368*_S5_PC_13+
1228239   +0.1155863429*_S6_PC_14+
1228240   +-0.050867722*_S7_PC_15+
1228241   +0.1008214478*_S8_PC_16+
1228242   +-0.011138547*_S9_PC_17+
1228243   +-0.552849986*_S10_PC_2+
1228244   +0.2862487731*_S11_PC_3+
1228245   +-0.137559562*_S12_PC_4+
1228246   +0.2589005161*_S13_PC_5+
1228247   +-0.112565595*_S14_PC_6+
1228248   +0.0284161528*_S15_PC_7+
1228249   +-0.118315879*_S16_PC_8+
1228250   +-0.244959549*_S17_PC_9+
1228251   +3.395879E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN04= 0.2669085642*_S1_PC_1+ -0.010858941*_S2_PC_10+
0.2008720446*_S3_PC_11+ 0.5144148856*_S4_PC_12+ -0.190832368*_S5_PC_13+
0.1155863429*_S6_PC_14+ -0.050867722*_S7_PC_15+ 0.1008214478*_S8_PC_16+
-0.011138547*_S9_PC_17+ -0.552849986*_S10_PC_2+ 0.2862487731*_S11_PC_3+
-0.137559562*_S12_PC_4+ 0.2589005161*_S13_PC_5+ -0.112565595*_S14_PC_6+
0.0284161528*_S15_PC_7+ -0.118315879*_S16_PC_8+ -0.244959549*_S17_PC_9+
3.395879E-10*_S18_YEAR_BIRTH;
1228252   +/*----------------------------------------------*/
1228253   +* Component 5 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 0;
1228254   +/*----------------------------------------------*/
1228255   +;
MPRINT(EM_DIAGRAM):   ;
1228256   +_SPRIN05=
1228257   +0.1715451272*_S1_PC_1+
1228258   +0.3115614636*_S2_PC_10+
1228259   +0.3007489853*_S3_PC_11+
1228260   +0.0867096677*_S4_PC_12+
1228261   +0.4850813272*_S5_PC_13+
1228262   +-0.154430605*_S6_PC_14+
1228263   +0.0053311376*_S7_PC_15+
1228264   +0.1605102659*_S8_PC_16+
1228265   +-0.18054643*_S9_PC_17+
1228266   +0.1238681466*_S10_PC_2+
1228267   +-0.209620079*_S11_PC_3+
1228268   +0.0074706781*_S12_PC_4+
1228269   +-0.230438413*_S13_PC_5+
1228270   +-0.360907655*_S14_PC_6+
1228271   +-0.094862505*_S15_PC_7+
1228272   +0.102183415*_S16_PC_8+
1228273   +-0.442555387*_S17_PC_9+
1228274   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN05= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1228275   +/*----------------------------------------------*/
1228276   +* Component 6 at stage 0;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 0;
1228277   +/*----------------------------------------------*/
1228278   +;
MPRINT(EM_DIAGRAM):   ;
1228279   +_SPRIN06=
1228280   +-0.082829906*_S1_PC_1+
1228281   +-0.099862677*_S2_PC_10+
1228282   +-0.42446278*_S3_PC_11+
1228283   +0.0381283395*_S4_PC_12+
1228284   +0.2616016667*_S5_PC_13+
1228285   +-0.180040658*_S6_PC_14+
1228286   +0.6294744866*_S7_PC_15+
1228287   +0.1814410053*_S8_PC_16+
1228288   +-0.035735751*_S9_PC_17+
1228289   +-0.119029185*_S10_PC_2+
1228290   +-0.043278125*_S11_PC_3+
1228291   +-0.389423222*_S12_PC_4+
1228292   +0.182278282*_S13_PC_5+
1228293   +0.0575259788*_S14_PC_6+
1228294   +0.196731809*_S15_PC_7+
1228295   +0.1093250508*_S16_PC_8+
1228296   +-0.124003136*_S17_PC_9+
1228297   +-5.75602E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN06= -0.082829906*_S1_PC_1+ -0.099862677*_S2_PC_10+
-0.42446278*_S3_PC_11+ 0.0381283395*_S4_PC_12+ 0.2616016667*_S5_PC_13+ -0.180040658*_S6_PC_14+
0.6294744866*_S7_PC_15+ 0.1814410053*_S8_PC_16+ -0.035735751*_S9_PC_17+
-0.119029185*_S10_PC_2+ -0.043278125*_S11_PC_3+ -0.389423222*_S12_PC_4+ 0.182278282*_S13_PC_5+
0.0575259788*_S14_PC_6+ 0.196731809*_S15_PC_7+ 0.1093250508*_S16_PC_8+ -0.124003136*_S17_PC_9+
-5.75602E-10*_S18_YEAR_BIRTH;
1228298   +;
MPRINT(EM_DIAGRAM):   ;
1228299   +/*----------------------------------------------*/
1228300   +* Component 1 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 1;
1228301   +/*----------------------------------------------*/
1228302   +;
MPRINT(EM_DIAGRAM):   ;
1228303   +_SPRIN11=
1228304   +-0.083760411*_S1_PC_1+
1228305   +0.0150156059*_S2_PC_10+
1228306   +0.3603117506*_S3_PC_11+
1228307   +-0.065465485*_S4_PC_12+
1228308   +0.2296666341*_S5_PC_13+
1228309   +-0.312415498*_S6_PC_14+
1228310   +0.3487593185*_S7_PC_15+
1228311   +-0.422555663*_S8_PC_16+
1228312   +0.3668401007*_S9_PC_17+
1228313   +-0.232806564*_S10_PC_2+
1228314   +-0.057086549*_S11_PC_3+
1228315   +0.2689297791*_S12_PC_4+
1228316   +0.2603201656*_S13_PC_5+
1228317   +-0.074110053*_S14_PC_6+
1228318   +-0.140250737*_S15_PC_7+
1228319   +-0.162814522*_S16_PC_8+
1228320   +0.1559535136*_S17_PC_9+
1228321   +2.299043E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN11= -0.083760411*_S1_PC_1+ 0.0150156059*_S2_PC_10+
0.3603117506*_S3_PC_11+ -0.065465485*_S4_PC_12+ 0.2296666341*_S5_PC_13+
-0.312415498*_S6_PC_14+ 0.3487593185*_S7_PC_15+ -0.422555663*_S8_PC_16+
0.3668401007*_S9_PC_17+ -0.232806564*_S10_PC_2+ -0.057086549*_S11_PC_3+
0.2689297791*_S12_PC_4+ 0.2603201656*_S13_PC_5+ -0.074110053*_S14_PC_6+
-0.140250737*_S15_PC_7+ -0.162814522*_S16_PC_8+ 0.1559535136*_S17_PC_9+
2.299043E-10*_S18_YEAR_BIRTH;
1228322   +/*----------------------------------------------*/
1228323   +* Component 2 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 1;
1228324   +/*----------------------------------------------*/
1228325   +;
MPRINT(EM_DIAGRAM):   ;
1228326   +_SPRIN12=
1228327   +0.0904586995*_S1_PC_1+
1228328   +-0.25358759*_S2_PC_10+
1228329   +0.1798508899*_S3_PC_11+
1228330   +0.1286557873*_S4_PC_12+
1228331   +0.3871465144*_S5_PC_13+
1228332   +0.3933352021*_S6_PC_14+
1228333   +-0.105794257*_S7_PC_15+
1228334   +0.0164426249*_S8_PC_16+
1228335   +0.2424122793*_S9_PC_17+
1228336   +0.3425749957*_S10_PC_2+
1228337   +0.1236367164*_S11_PC_3+
1228338   +-0.267238623*_S12_PC_4+
1228339   +0.2876403849*_S13_PC_5+
1228340   +-0.276983559*_S14_PC_6+
1228341   +0.1162237381*_S15_PC_7+
1228342   +0.1603566014*_S16_PC_8+
1228343   +0.317885474*_S17_PC_9+
1228344   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN12= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1228345   +/*----------------------------------------------*/
1228346   +* Component 3 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 1;
1228347   +/*----------------------------------------------*/
1228348   +;
MPRINT(EM_DIAGRAM):   ;
1228349   +_SPRIN13=
1228350   +-0.142104936*_S1_PC_1+
1228351   +-0.163802529*_S2_PC_10+
1228352   +0.2722556929*_S3_PC_11+
1228353   +-0.106217695*_S4_PC_12+
1228354   +0.1292014315*_S5_PC_13+
1228355   +-0.186258463*_S6_PC_14+
1228356   +-0.091004563*_S7_PC_15+
1228357   +-0.064777423*_S8_PC_16+
1228358   +-0.238558476*_S9_PC_17+
1228359   +-0.156265277*_S10_PC_2+
1228360   +0.2206105358*_S11_PC_3+
1228361   +-0.156353822*_S12_PC_4+
1228362   +-0.2104311*_S13_PC_5+
1228363   +0.0856687943*_S14_PC_6+
1228364   +0.2870928087*_S15_PC_7+
1228365   +0.0511562227*_S16_PC_8+
1228366   +0.1122597348*_S17_PC_9+
1228367   +0.7071067813*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN13= -0.142104936*_S1_PC_1+ -0.163802529*_S2_PC_10+
0.2722556929*_S3_PC_11+ -0.106217695*_S4_PC_12+ 0.1292014315*_S5_PC_13+
-0.186258463*_S6_PC_14+ -0.091004563*_S7_PC_15+ -0.064777423*_S8_PC_16+
-0.238558476*_S9_PC_17+ -0.156265277*_S10_PC_2+ 0.2206105358*_S11_PC_3+
-0.156353822*_S12_PC_4+ -0.2104311*_S13_PC_5+ 0.0856687943*_S14_PC_6+ 0.2870928087*_S15_PC_7+
0.0511562227*_S16_PC_8+ 0.1122597348*_S17_PC_9+ 0.7071067813*_S18_YEAR_BIRTH;
1228368   +/*----------------------------------------------*/
1228369   +* Component 4 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 1;
1228370   +/*----------------------------------------------*/
1228371   +;
MPRINT(EM_DIAGRAM):   ;
1228372   +_SPRIN14=
1228373   +-0.07513814*_S1_PC_1+
1228374   +0.2268213548*_S2_PC_10+
1228375   +0.3357028263*_S3_PC_11+
1228376   +-0.217855162*_S4_PC_12+
1228377   +-0.34642163*_S5_PC_13+
1228378   +-0.117797127*_S6_PC_14+
1228379   +0.1772546491*_S7_PC_15+
1228380   +0.4970081949*_S8_PC_16+
1228381   +0.0579273257*_S9_PC_17+
1228382   +-0.068881631*_S10_PC_2+
1228383   +-0.048574106*_S11_PC_3+
1228384   +-0.307629187*_S12_PC_4+
1228385   +0.0117800688*_S13_PC_5+
1228386   +-0.170688469*_S14_PC_6+
1228387   +-0.287177589*_S15_PC_7+
1228388   +0.1470406186*_S16_PC_8+
1228389   +0.3632739449*_S17_PC_9+
1228390   +1.905836E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN14= -0.07513814*_S1_PC_1+ 0.2268213548*_S2_PC_10+
0.3357028263*_S3_PC_11+ -0.217855162*_S4_PC_12+ -0.34642163*_S5_PC_13+ -0.117797127*_S6_PC_14+
0.1772546491*_S7_PC_15+ 0.4970081949*_S8_PC_16+ 0.0579273257*_S9_PC_17+
-0.068881631*_S10_PC_2+ -0.048574106*_S11_PC_3+ -0.307629187*_S12_PC_4+
0.0117800688*_S13_PC_5+ -0.170688469*_S14_PC_6+ -0.287177589*_S15_PC_7+
0.1470406186*_S16_PC_8+ 0.3632739449*_S17_PC_9+ 1.905836E-10*_S18_YEAR_BIRTH;
1228391   +/*----------------------------------------------*/
1228392   +* Component 5 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 1;
1228393   +/*----------------------------------------------*/
1228394   +;
MPRINT(EM_DIAGRAM):   ;
1228395   +_SPRIN15=
1228396   +0.3406028277*_S1_PC_1+
1228397   +-0.047103907*_S2_PC_10+
1228398   +-0.040071736*_S3_PC_11+
1228399   +-0.188047264*_S4_PC_12+
1228400   +-0.105899894*_S5_PC_13+
1228401   +-0.546605414*_S6_PC_14+
1228402   +-0.215949151*_S7_PC_15+
1228403   +0.1552257804*_S8_PC_16+
1228404   +-0.063292919*_S9_PC_17+
1228405   +0.2436344531*_S10_PC_2+
1228406   +0.1847153335*_S11_PC_3+
1228407   +0.1847115801*_S12_PC_4+
1228408   +0.5094087484*_S13_PC_5+
1228409   +-0.017225219*_S14_PC_6+
1228410   +0.1843449226*_S15_PC_7+
1228411   +0.1814443365*_S16_PC_8+
1228412   +-0.076033755*_S17_PC_9+
1228413   +1.775586E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN15= 0.3406028277*_S1_PC_1+ -0.047103907*_S2_PC_10+
-0.040071736*_S3_PC_11+ -0.188047264*_S4_PC_12+ -0.105899894*_S5_PC_13+
-0.546605414*_S6_PC_14+ -0.215949151*_S7_PC_15+ 0.1552257804*_S8_PC_16+
-0.063292919*_S9_PC_17+ 0.2436344531*_S10_PC_2+ 0.1847153335*_S11_PC_3+
0.1847115801*_S12_PC_4+ 0.5094087484*_S13_PC_5+ -0.017225219*_S14_PC_6+
0.1843449226*_S15_PC_7+ 0.1814443365*_S16_PC_8+ -0.076033755*_S17_PC_9+
1.775586E-10*_S18_YEAR_BIRTH;
1228414   +/*----------------------------------------------*/
1228415   +* Component 6 at stage 1;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 1;
1228416   +/*----------------------------------------------*/
1228417   +;
MPRINT(EM_DIAGRAM):   ;
1228418   +_SPRIN16=
1228419   +0.1806930607*_S1_PC_1+
1228420   +0.0788596166*_S2_PC_10+
1228421   +0.1968872716*_S3_PC_11+
1228422   +-0.003908283*_S4_PC_12+
1228423   +0.2158704538*_S5_PC_13+
1228424   +0.1239491149*_S6_PC_14+
1228425   +0.231901586*_S7_PC_15+
1228426   +0.2297800823*_S8_PC_16+
1228427   +-0.242925465*_S9_PC_17+
1228428   +0.2708005769*_S10_PC_2+
1228429   +0.2941705488*_S11_PC_3+
1228430   +0.0605451876*_S12_PC_4+
1228431   +0.0886168754*_S13_PC_5+
1228432   +0.5048353663*_S14_PC_6+
1228433   +-0.216665596*_S15_PC_7+
1228434   +-0.467488352*_S16_PC_8+
1228435   +0.0553338626*_S17_PC_9+
1228436   +2.54004E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN16= 0.1806930607*_S1_PC_1+ 0.0788596166*_S2_PC_10+
0.1968872716*_S3_PC_11+ -0.003908283*_S4_PC_12+ 0.2158704538*_S5_PC_13+
0.1239491149*_S6_PC_14+ 0.231901586*_S7_PC_15+ 0.2297800823*_S8_PC_16+ -0.242925465*_S9_PC_17+
0.2708005769*_S10_PC_2+ 0.2941705488*_S11_PC_3+ 0.0605451876*_S12_PC_4+
0.0886168754*_S13_PC_5+ 0.5048353663*_S14_PC_6+ -0.216665596*_S15_PC_7+
-0.467488352*_S16_PC_8+ 0.0553338626*_S17_PC_9+ 2.54004E-10*_S18_YEAR_BIRTH;
1228437   +;
MPRINT(EM_DIAGRAM):   ;
1228438   +/*----------------------------------------------*/
1228439   +* Component 1 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 2;
1228440   +/*----------------------------------------------*/
1228441   +;
MPRINT(EM_DIAGRAM):   ;
1228442   +_SPRIN21=
1228443   +-0.115046453*_S1_PC_1+
1228444   +0.5302526185*_S2_PC_10+
1228445   +-0.275135397*_S3_PC_11+
1228446   +0.004612446*_S4_PC_12+
1228447   +0.166932134*_S5_PC_13+
1228448   +-0.17048832*_S6_PC_14+
1228449   +-0.212191542*_S7_PC_15+
1228450   +0.0228966122*_S8_PC_16+
1228451   +0.4384969167*_S9_PC_17+
1228452   +0.0077993846*_S10_PC_2+
1228453   +0.4915793429*_S11_PC_3+
1228454   +-0.162964672*_S12_PC_4+
1228455   +-0.164545705*_S13_PC_5+
1228456   +-0.046033642*_S14_PC_6+
1228457   +0.0686861603*_S15_PC_7+
1228458   +-0.175404685*_S16_PC_8+
1228459   +0.0465458336*_S17_PC_9+
1228460   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN21= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1228461   +/*----------------------------------------------*/
1228462   +* Component 2 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 2;
1228463   +/*----------------------------------------------*/
1228464   +;
MPRINT(EM_DIAGRAM):   ;
1228465   +_SPRIN22=
1228466   +-0.280418472*_S1_PC_1+
1228467   +0.033952608*_S2_PC_10+
1228468   +0.0500378399*_S3_PC_11+
1228469   +0.5960630607*_S4_PC_12+
1228470   +0.0567914812*_S5_PC_13+
1228471   +-0.149428438*_S6_PC_14+
1228472   +0.0315198821*_S7_PC_15+
1228473   +0.3721577951*_S8_PC_16+
1228474   +0.0994481608*_S9_PC_17+
1228475   +0.0756226515*_S10_PC_2+
1228476   +-0.096605202*_S11_PC_3+
1228477   +0.4357739087*_S12_PC_4+
1228478   +-0.08415535*_S13_PC_5+
1228479   +0.17775354*_S14_PC_6+
1228480   +0.2151817247*_S15_PC_7+
1228481   +0.1918182434*_S16_PC_8+
1228482   +0.2464805102*_S17_PC_9+
1228483   +-4.36857E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN22= -0.280418472*_S1_PC_1+ 0.033952608*_S2_PC_10+
0.0500378399*_S3_PC_11+ 0.5960630607*_S4_PC_12+ 0.0567914812*_S5_PC_13+
-0.149428438*_S6_PC_14+ 0.0315198821*_S7_PC_15+ 0.3721577951*_S8_PC_16+
0.0994481608*_S9_PC_17+ 0.0756226515*_S10_PC_2+ -0.096605202*_S11_PC_3+
0.4357739087*_S12_PC_4+ -0.08415535*_S13_PC_5+ 0.17775354*_S14_PC_6+ 0.2151817247*_S15_PC_7+
0.1918182434*_S16_PC_8+ 0.2464805102*_S17_PC_9+ -4.36857E-11*_S18_YEAR_BIRTH;
1228484   +/*----------------------------------------------*/
1228485   +* Component 3 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 2;
1228486   +/*----------------------------------------------*/
1228487   +;
MPRINT(EM_DIAGRAM):   ;
1228488   +_SPRIN23=
1228489   +0.1715451272*_S1_PC_1+
1228490   +0.3115614636*_S2_PC_10+
1228491   +0.3007489853*_S3_PC_11+
1228492   +0.0867096677*_S4_PC_12+
1228493   +0.4850813272*_S5_PC_13+
1228494   +-0.154430605*_S6_PC_14+
1228495   +0.0053311376*_S7_PC_15+
1228496   +0.1605102659*_S8_PC_16+
1228497   +-0.18054643*_S9_PC_17+
1228498   +0.1238681466*_S10_PC_2+
1228499   +-0.209620079*_S11_PC_3+
1228500   +0.0074706781*_S12_PC_4+
1228501   +-0.230438413*_S13_PC_5+
1228502   +-0.360907655*_S14_PC_6+
1228503   +-0.094862505*_S15_PC_7+
1228504   +0.102183415*_S16_PC_8+
1228505   +-0.442555387*_S17_PC_9+
1228506   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN23= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1228507   +/*----------------------------------------------*/
1228508   +* Component 4 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 2;
1228509   +/*----------------------------------------------*/
1228510   +;
MPRINT(EM_DIAGRAM):   ;
1228511   +_SPRIN24=
1228512   +-0.216059196*_S1_PC_1+
1228513   +0.2253134053*_S2_PC_10+
1228514   +0.0458400339*_S3_PC_11+
1228515   +-0.158708269*_S4_PC_12+
1228516   +0.2958082517*_S5_PC_13+
1228517   +0.1640638198*_S6_PC_14+
1228518   +-0.330259515*_S7_PC_15+
1228519   +0.0489846489*_S8_PC_16+
1228520   +0.0159008582*_S9_PC_17+
1228521   +-0.302936443*_S10_PC_2+
1228522   +-0.158642589*_S11_PC_3+
1228523   +-0.070387665*_S12_PC_4+
1228524   +0.3540228754*_S13_PC_5+
1228525   +0.4732991561*_S14_PC_6+
1228526   +-0.173510857*_S15_PC_7+
1228527   +0.3684386956*_S16_PC_8+
1228528   +-0.109680308*_S17_PC_9+
1228529   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN24= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1228530   +/*----------------------------------------------*/
1228531   +* Component 5 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 2;
1228532   +/*----------------------------------------------*/
1228533   +;
MPRINT(EM_DIAGRAM):   ;
1228534   +_SPRIN25=
1228535   +-0.088531922*_S1_PC_1+
1228536   +-0.009002035*_S2_PC_10+
1228537   +0.31667389*_S3_PC_11+
1228538   +-0.02941866*_S4_PC_12+
1228539   +-0.2067745*_S5_PC_13+
1228540   +-0.025433534*_S6_PC_14+
1228541   +-0.054283266*_S7_PC_15+
1228542   +0.0743381462*_S8_PC_16+
1228543   +0.4000347072*_S9_PC_17+
1228544   +0.2150358409*_S10_PC_2+
1228545   +-0.342625967*_S11_PC_3+
1228546   +-0.277332723*_S12_PC_4+
1228547   +0.0361157229*_S13_PC_5+
1228548   +0.2510167741*_S14_PC_6+
1228549   +0.4155727148*_S15_PC_7+
1228550   +-0.285270046*_S16_PC_8+
1228551   +-0.34654039*_S17_PC_9+
1228552   +-5.85785E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN25= -0.088531922*_S1_PC_1+ -0.009002035*_S2_PC_10+
0.31667389*_S3_PC_11+ -0.02941866*_S4_PC_12+ -0.2067745*_S5_PC_13+ -0.025433534*_S6_PC_14+
-0.054283266*_S7_PC_15+ 0.0743381462*_S8_PC_16+ 0.4000347072*_S9_PC_17+
0.2150358409*_S10_PC_2+ -0.342625967*_S11_PC_3+ -0.277332723*_S12_PC_4+
0.0361157229*_S13_PC_5+ 0.2510167741*_S14_PC_6+ 0.4155727148*_S15_PC_7+
-0.285270046*_S16_PC_8+ -0.34654039*_S17_PC_9+ -5.85785E-10*_S18_YEAR_BIRTH;
1228553   +/*----------------------------------------------*/
1228554   +* Component 6 at stage 2;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 2;
1228555   +/*----------------------------------------------*/
1228556   +;
MPRINT(EM_DIAGRAM):   ;
1228557   +_SPRIN26=
1228558   +0.5472327471*_S1_PC_1+
1228559   +0.0689025168*_S2_PC_10+
1228560   +0.1063292528*_S3_PC_11+
1228561   +-0.00786993*_S4_PC_12+
1228562   +-0.081647068*_S5_PC_13+
1228563   +0.0764676562*_S6_PC_14+
1228564   +0.2501879069*_S7_PC_15+
1228565   +-0.158104644*_S8_PC_16+
1228566   +0.2869913627*_S9_PC_17+
1228567   +0.0098433348*_S10_PC_2+
1228568   +0.1206515741*_S11_PC_3+
1228569   +0.0085779438*_S12_PC_4+
1228570   +-0.339405068*_S13_PC_5+
1228571   +0.3375545447*_S14_PC_6+
1228572   +0.0542971825*_S15_PC_7+
1228573   +0.5050955192*_S16_PC_8+
1228574   +-0.004055733*_S17_PC_9+
1228575   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN26= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1228576   +;
MPRINT(EM_DIAGRAM):   ;
1228577   +/*----------------------------------------------*/
1228578   +* Component 1 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 3;
1228579   +/*----------------------------------------------*/
1228580   +;
MPRINT(EM_DIAGRAM):   ;
1228581   +_SPRIN31=
1228582   +0.1806930607*_S1_PC_1+
1228583   +0.0788596166*_S2_PC_10+
1228584   +0.1968872716*_S3_PC_11+
1228585   +-0.003908283*_S4_PC_12+
1228586   +0.2158704538*_S5_PC_13+
1228587   +0.1239491149*_S6_PC_14+
1228588   +0.231901586*_S7_PC_15+
1228589   +0.2297800823*_S8_PC_16+
1228590   +-0.242925465*_S9_PC_17+
1228591   +0.2708005769*_S10_PC_2+
1228592   +0.2941705488*_S11_PC_3+
1228593   +0.0605451876*_S12_PC_4+
1228594   +0.0886168754*_S13_PC_5+
1228595   +0.5048353663*_S14_PC_6+
1228596   +-0.216665596*_S15_PC_7+
1228597   +-0.467488352*_S16_PC_8+
1228598   +0.0553338626*_S17_PC_9+
1228599   +2.54004E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN31= 0.1806930607*_S1_PC_1+ 0.0788596166*_S2_PC_10+
0.1968872716*_S3_PC_11+ -0.003908283*_S4_PC_12+ 0.2158704538*_S5_PC_13+
0.1239491149*_S6_PC_14+ 0.231901586*_S7_PC_15+ 0.2297800823*_S8_PC_16+ -0.242925465*_S9_PC_17+
0.2708005769*_S10_PC_2+ 0.2941705488*_S11_PC_3+ 0.0605451876*_S12_PC_4+
0.0886168754*_S13_PC_5+ 0.5048353663*_S14_PC_6+ -0.216665596*_S15_PC_7+
-0.467488352*_S16_PC_8+ 0.0553338626*_S17_PC_9+ 2.54004E-10*_S18_YEAR_BIRTH;
1228600   +/*----------------------------------------------*/
1228601   +* Component 2 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 3;
1228602   +/*----------------------------------------------*/
1228603   +;
MPRINT(EM_DIAGRAM):   ;
1228604   +_SPRIN32=
1228605   +-0.07513814*_S1_PC_1+
1228606   +0.2268213548*_S2_PC_10+
1228607   +0.3357028263*_S3_PC_11+
1228608   +-0.217855162*_S4_PC_12+
1228609   +-0.34642163*_S5_PC_13+
1228610   +-0.117797127*_S6_PC_14+
1228611   +0.1772546491*_S7_PC_15+
1228612   +0.4970081949*_S8_PC_16+
1228613   +0.0579273257*_S9_PC_17+
1228614   +-0.068881631*_S10_PC_2+
1228615   +-0.048574106*_S11_PC_3+
1228616   +-0.307629187*_S12_PC_4+
1228617   +0.0117800688*_S13_PC_5+
1228618   +-0.170688469*_S14_PC_6+
1228619   +-0.287177589*_S15_PC_7+
1228620   +0.1470406186*_S16_PC_8+
1228621   +0.3632739449*_S17_PC_9+
1228622   +1.905836E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN32= -0.07513814*_S1_PC_1+ 0.2268213548*_S2_PC_10+
0.3357028263*_S3_PC_11+ -0.217855162*_S4_PC_12+ -0.34642163*_S5_PC_13+ -0.117797127*_S6_PC_14+
0.1772546491*_S7_PC_15+ 0.4970081949*_S8_PC_16+ 0.0579273257*_S9_PC_17+
-0.068881631*_S10_PC_2+ -0.048574106*_S11_PC_3+ -0.307629187*_S12_PC_4+
0.0117800688*_S13_PC_5+ -0.170688469*_S14_PC_6+ -0.287177589*_S15_PC_7+
0.1470406186*_S16_PC_8+ 0.3632739449*_S17_PC_9+ 1.905836E-10*_S18_YEAR_BIRTH;
1228623   +/*----------------------------------------------*/
1228624   +* Component 3 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 3;
1228625   +/*----------------------------------------------*/
1228626   +;
MPRINT(EM_DIAGRAM):   ;
1228627   +_SPRIN33=
1228628   +-0.083760411*_S1_PC_1+
1228629   +0.0150156059*_S2_PC_10+
1228630   +0.3603117506*_S3_PC_11+
1228631   +-0.065465485*_S4_PC_12+
1228632   +0.2296666341*_S5_PC_13+
1228633   +-0.312415498*_S6_PC_14+
1228634   +0.3487593185*_S7_PC_15+
1228635   +-0.422555663*_S8_PC_16+
1228636   +0.3668401007*_S9_PC_17+
1228637   +-0.232806564*_S10_PC_2+
1228638   +-0.057086549*_S11_PC_3+
1228639   +0.2689297791*_S12_PC_4+
1228640   +0.2603201656*_S13_PC_5+
1228641   +-0.074110053*_S14_PC_6+
1228642   +-0.140250737*_S15_PC_7+
1228643   +-0.162814522*_S16_PC_8+
1228644   +0.1559535136*_S17_PC_9+
1228645   +2.299043E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN33= -0.083760411*_S1_PC_1+ 0.0150156059*_S2_PC_10+
0.3603117506*_S3_PC_11+ -0.065465485*_S4_PC_12+ 0.2296666341*_S5_PC_13+
-0.312415498*_S6_PC_14+ 0.3487593185*_S7_PC_15+ -0.422555663*_S8_PC_16+
0.3668401007*_S9_PC_17+ -0.232806564*_S10_PC_2+ -0.057086549*_S11_PC_3+
0.2689297791*_S12_PC_4+ 0.2603201656*_S13_PC_5+ -0.074110053*_S14_PC_6+
-0.140250737*_S15_PC_7+ -0.162814522*_S16_PC_8+ 0.1559535136*_S17_PC_9+
2.299043E-10*_S18_YEAR_BIRTH;
1228646   +/*----------------------------------------------*/
1228647   +* Component 4 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 3;
1228648   +/*----------------------------------------------*/
1228649   +;
MPRINT(EM_DIAGRAM):   ;
1228650   +_SPRIN34=
1228651   +-0.082829906*_S1_PC_1+
1228652   +-0.099862677*_S2_PC_10+
1228653   +-0.42446278*_S3_PC_11+
1228654   +0.0381283395*_S4_PC_12+
1228655   +0.2616016667*_S5_PC_13+
1228656   +-0.180040658*_S6_PC_14+
1228657   +0.6294744866*_S7_PC_15+
1228658   +0.1814410053*_S8_PC_16+
1228659   +-0.035735751*_S9_PC_17+
1228660   +-0.119029185*_S10_PC_2+
1228661   +-0.043278125*_S11_PC_3+
1228662   +-0.389423222*_S12_PC_4+
1228663   +0.182278282*_S13_PC_5+
1228664   +0.0575259788*_S14_PC_6+
1228665   +0.196731809*_S15_PC_7+
1228666   +0.1093250508*_S16_PC_8+
1228667   +-0.124003136*_S17_PC_9+
1228668   +-5.75602E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN34= -0.082829906*_S1_PC_1+ -0.099862677*_S2_PC_10+
-0.42446278*_S3_PC_11+ 0.0381283395*_S4_PC_12+ 0.2616016667*_S5_PC_13+ -0.180040658*_S6_PC_14+
0.6294744866*_S7_PC_15+ 0.1814410053*_S8_PC_16+ -0.035735751*_S9_PC_17+
-0.119029185*_S10_PC_2+ -0.043278125*_S11_PC_3+ -0.389423222*_S12_PC_4+ 0.182278282*_S13_PC_5+
0.0575259788*_S14_PC_6+ 0.196731809*_S15_PC_7+ 0.1093250508*_S16_PC_8+ -0.124003136*_S17_PC_9+
-5.75602E-10*_S18_YEAR_BIRTH;
1228669   +/*----------------------------------------------*/
1228670   +* Component 5 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 3;
1228671   +/*----------------------------------------------*/
1228672   +;
MPRINT(EM_DIAGRAM):   ;
1228673   +_SPRIN35=
1228674   +0.1421049362*_S1_PC_1+
1228675   +0.1638025284*_S2_PC_10+
1228676   +-0.272255693*_S3_PC_11+
1228677   +0.1062176945*_S4_PC_12+
1228678   +-0.129201432*_S5_PC_13+
1228679   +0.1862584627*_S6_PC_14+
1228680   +0.0910045641*_S7_PC_15+
1228681   +0.0647774228*_S8_PC_16+
1228682   +0.238558476*_S9_PC_17+
1228683   +0.1562652772*_S10_PC_2+
1228684   +-0.220610537*_S11_PC_3+
1228685   +0.1563538222*_S12_PC_4+
1228686   +0.2104310993*_S13_PC_5+
1228687   +-0.085668794*_S14_PC_6+
1228688   +-0.287092808*_S15_PC_7+
1228689   +-0.051156223*_S16_PC_8+
1228690   +-0.112259736*_S17_PC_9+
1228691   +0.7071067811*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN35= 0.1421049362*_S1_PC_1+ 0.1638025284*_S2_PC_10+
-0.272255693*_S3_PC_11+ 0.1062176945*_S4_PC_12+ -0.129201432*_S5_PC_13+
0.1862584627*_S6_PC_14+ 0.0910045641*_S7_PC_15+ 0.0647774228*_S8_PC_16+ 0.238558476*_S9_PC_17+
0.1562652772*_S10_PC_2+ -0.220610537*_S11_PC_3+ 0.1563538222*_S12_PC_4+
0.2104310993*_S13_PC_5+ -0.085668794*_S14_PC_6+ -0.287092808*_S15_PC_7+
-0.051156223*_S16_PC_8+ -0.112259736*_S17_PC_9+ 0.7071067811*_S18_YEAR_BIRTH;
1228692   +/*----------------------------------------------*/
1228693   +* Component 6 at stage 3;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 3;
1228694   +/*----------------------------------------------*/
1228695   +;
MPRINT(EM_DIAGRAM):   ;
1228696   +_SPRIN36=
1228697   +-0.280418472*_S1_PC_1+
1228698   +0.033952608*_S2_PC_10+
1228699   +0.0500378399*_S3_PC_11+
1228700   +0.5960630607*_S4_PC_12+
1228701   +0.0567914812*_S5_PC_13+
1228702   +-0.149428438*_S6_PC_14+
1228703   +0.0315198821*_S7_PC_15+
1228704   +0.3721577951*_S8_PC_16+
1228705   +0.0994481608*_S9_PC_17+
1228706   +0.0756226515*_S10_PC_2+
1228707   +-0.096605202*_S11_PC_3+
1228708   +0.4357739087*_S12_PC_4+
1228709   +-0.08415535*_S13_PC_5+
1228710   +0.17775354*_S14_PC_6+
1228711   +0.2151817247*_S15_PC_7+
1228712   +0.1918182434*_S16_PC_8+
1228713   +0.2464805102*_S17_PC_9+
1228714   +-4.36857E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN36= -0.280418472*_S1_PC_1+ 0.033952608*_S2_PC_10+
0.0500378399*_S3_PC_11+ 0.5960630607*_S4_PC_12+ 0.0567914812*_S5_PC_13+
-0.149428438*_S6_PC_14+ 0.0315198821*_S7_PC_15+ 0.3721577951*_S8_PC_16+
0.0994481608*_S9_PC_17+ 0.0756226515*_S10_PC_2+ -0.096605202*_S11_PC_3+
0.4357739087*_S12_PC_4+ -0.08415535*_S13_PC_5+ 0.17775354*_S14_PC_6+ 0.2151817247*_S15_PC_7+
0.1918182434*_S16_PC_8+ 0.2464805102*_S17_PC_9+ -4.36857E-11*_S18_YEAR_BIRTH;
1228715   +;
MPRINT(EM_DIAGRAM):   ;
1228716   +/*----------------------------------------------*/
1228717   +* Component 1 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 4;
1228718   +/*----------------------------------------------*/
1228719   +;
MPRINT(EM_DIAGRAM):   ;
1228720   +_SPRIN41=
1228721   +0.2669085642*_S1_PC_1+
1228722   +-0.010858941*_S2_PC_10+
1228723   +0.2008720446*_S3_PC_11+
1228724   +0.5144148856*_S4_PC_12+
1228725   +-0.190832368*_S5_PC_13+
1228726   +0.1155863429*_S6_PC_14+
1228727   +-0.050867722*_S7_PC_15+
1228728   +0.1008214478*_S8_PC_16+
1228729   +-0.011138547*_S9_PC_17+
1228730   +-0.552849986*_S10_PC_2+
1228731   +0.2862487731*_S11_PC_3+
1228732   +-0.137559562*_S12_PC_4+
1228733   +0.2589005161*_S13_PC_5+
1228734   +-0.112565595*_S14_PC_6+
1228735   +0.0284161528*_S15_PC_7+
1228736   +-0.118315879*_S16_PC_8+
1228737   +-0.244959549*_S17_PC_9+
1228738   +3.395879E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN41= 0.2669085642*_S1_PC_1+ -0.010858941*_S2_PC_10+
0.2008720446*_S3_PC_11+ 0.5144148856*_S4_PC_12+ -0.190832368*_S5_PC_13+
0.1155863429*_S6_PC_14+ -0.050867722*_S7_PC_15+ 0.1008214478*_S8_PC_16+
-0.011138547*_S9_PC_17+ -0.552849986*_S10_PC_2+ 0.2862487731*_S11_PC_3+
-0.137559562*_S12_PC_4+ 0.2589005161*_S13_PC_5+ -0.112565595*_S14_PC_6+
0.0284161528*_S15_PC_7+ -0.118315879*_S16_PC_8+ -0.244959549*_S17_PC_9+
3.395879E-10*_S18_YEAR_BIRTH;
1228739   +/*----------------------------------------------*/
1228740   +* Component 2 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 4;
1228741   +/*----------------------------------------------*/
1228742   +;
MPRINT(EM_DIAGRAM):   ;
1228743   +_SPRIN42=
1228744   +-0.216059196*_S1_PC_1+
1228745   +0.2253134053*_S2_PC_10+
1228746   +0.0458400339*_S3_PC_11+
1228747   +-0.158708269*_S4_PC_12+
1228748   +0.2958082517*_S5_PC_13+
1228749   +0.1640638198*_S6_PC_14+
1228750   +-0.330259515*_S7_PC_15+
1228751   +0.0489846489*_S8_PC_16+
1228752   +0.0159008582*_S9_PC_17+
1228753   +-0.302936443*_S10_PC_2+
1228754   +-0.158642589*_S11_PC_3+
1228755   +-0.070387665*_S12_PC_4+
1228756   +0.3540228754*_S13_PC_5+
1228757   +0.4732991561*_S14_PC_6+
1228758   +-0.173510857*_S15_PC_7+
1228759   +0.3684386956*_S16_PC_8+
1228760   +-0.109680308*_S17_PC_9+
1228761   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN42= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1228762   +/*----------------------------------------------*/
1228763   +* Component 3 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 4;
1228764   +/*----------------------------------------------*/
1228765   +;
MPRINT(EM_DIAGRAM):   ;
1228766   +_SPRIN43=
1228767   +-0.115046453*_S1_PC_1+
1228768   +0.5302526185*_S2_PC_10+
1228769   +-0.275135397*_S3_PC_11+
1228770   +0.004612446*_S4_PC_12+
1228771   +0.166932134*_S5_PC_13+
1228772   +-0.17048832*_S6_PC_14+
1228773   +-0.212191542*_S7_PC_15+
1228774   +0.0228966122*_S8_PC_16+
1228775   +0.4384969167*_S9_PC_17+
1228776   +0.0077993846*_S10_PC_2+
1228777   +0.4915793429*_S11_PC_3+
1228778   +-0.162964672*_S12_PC_4+
1228779   +-0.164545705*_S13_PC_5+
1228780   +-0.046033642*_S14_PC_6+
1228781   +0.0686861603*_S15_PC_7+
1228782   +-0.175404685*_S16_PC_8+
1228783   +0.0465458336*_S17_PC_9+
1228784   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN43= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1228785   +/*----------------------------------------------*/
1228786   +* Component 4 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 4;
1228787   +/*----------------------------------------------*/
1228788   +;
MPRINT(EM_DIAGRAM):   ;
1228789   +_SPRIN44=
1228790   +0.5472327471*_S1_PC_1+
1228791   +0.0689025168*_S2_PC_10+
1228792   +0.1063292528*_S3_PC_11+
1228793   +-0.00786993*_S4_PC_12+
1228794   +-0.081647068*_S5_PC_13+
1228795   +0.0764676562*_S6_PC_14+
1228796   +0.2501879069*_S7_PC_15+
1228797   +-0.158104644*_S8_PC_16+
1228798   +0.2869913627*_S9_PC_17+
1228799   +0.0098433348*_S10_PC_2+
1228800   +0.1206515741*_S11_PC_3+
1228801   +0.0085779438*_S12_PC_4+
1228802   +-0.339405068*_S13_PC_5+
1228803   +0.3375545447*_S14_PC_6+
1228804   +0.0542971825*_S15_PC_7+
1228805   +0.5050955192*_S16_PC_8+
1228806   +-0.004055733*_S17_PC_9+
1228807   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN44= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1228808   +/*----------------------------------------------*/
1228809   +* Component 5 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 4;
1228810   +/*----------------------------------------------*/
1228811   +;
MPRINT(EM_DIAGRAM):   ;
1228812   +_SPRIN45=
1228813   +0.0904586995*_S1_PC_1+
1228814   +-0.25358759*_S2_PC_10+
1228815   +0.1798508899*_S3_PC_11+
1228816   +0.1286557873*_S4_PC_12+
1228817   +0.3871465144*_S5_PC_13+
1228818   +0.3933352021*_S6_PC_14+
1228819   +-0.105794257*_S7_PC_15+
1228820   +0.0164426249*_S8_PC_16+
1228821   +0.2424122793*_S9_PC_17+
1228822   +0.3425749957*_S10_PC_2+
1228823   +0.1236367164*_S11_PC_3+
1228824   +-0.267238623*_S12_PC_4+
1228825   +0.2876403849*_S13_PC_5+
1228826   +-0.276983559*_S14_PC_6+
1228827   +0.1162237381*_S15_PC_7+
1228828   +0.1603566014*_S16_PC_8+
1228829   +0.317885474*_S17_PC_9+
1228830   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN45= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1228831   +/*----------------------------------------------*/
1228832   +* Component 6 at stage 4;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 4;
1228833   +/*----------------------------------------------*/
1228834   +;
MPRINT(EM_DIAGRAM):   ;
1228835   +_SPRIN46=
1228836   +-0.180501533*_S1_PC_1+
1228837   +-0.292125135*_S2_PC_10+
1228838   +0.0496068949*_S3_PC_11+
1228839   +-0.39238632*_S4_PC_12+
1228840   +0.0504480044*_S5_PC_13+
1228841   +0.2554721353*_S6_PC_14+
1228842   +0.1212210649*_S7_PC_15+
1228843   +0.3944716624*_S8_PC_16+
1228844   +0.2654649612*_S9_PC_17+
1228845   +-0.139900403*_S10_PC_2+
1228846   +0.3104878745*_S11_PC_3+
1228847   +0.3921543574*_S12_PC_4+
1228848   +-0.0786467*_S13_PC_5+
1228849   +-0.135648388*_S14_PC_6+
1228850   +0.0491760472*_S15_PC_7+
1228851   +0.0525967564*_S16_PC_8+
1228852   +-0.342839266*_S17_PC_9+
1228853   +-1.65775E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN46= -0.180501533*_S1_PC_1+ -0.292125135*_S2_PC_10+
0.0496068949*_S3_PC_11+ -0.39238632*_S4_PC_12+ 0.0504480044*_S5_PC_13+ 0.2554721353*_S6_PC_14+
0.1212210649*_S7_PC_15+ 0.3944716624*_S8_PC_16+ 0.2654649612*_S9_PC_17+
-0.139900403*_S10_PC_2+ 0.3104878745*_S11_PC_3+ 0.3921543574*_S12_PC_4+ -0.0786467*_S13_PC_5+
-0.135648388*_S14_PC_6+ 0.0491760472*_S15_PC_7+ 0.0525967564*_S16_PC_8+
-0.342839266*_S17_PC_9+ -1.65775E-10*_S18_YEAR_BIRTH;
1228854   +;
MPRINT(EM_DIAGRAM):   ;
1228855   +/*----------------------------------------------*/
1228856   +* Component 1 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 5;
1228857   +/*----------------------------------------------*/
1228858   +;
MPRINT(EM_DIAGRAM):   ;
1228859   +_SPRIN51=
1228860   +-0.115046453*_S1_PC_1+
1228861   +0.5302526185*_S2_PC_10+
1228862   +-0.275135397*_S3_PC_11+
1228863   +0.004612446*_S4_PC_12+
1228864   +0.166932134*_S5_PC_13+
1228865   +-0.17048832*_S6_PC_14+
1228866   +-0.212191542*_S7_PC_15+
1228867   +0.0228966122*_S8_PC_16+
1228868   +0.4384969167*_S9_PC_17+
1228869   +0.0077993846*_S10_PC_2+
1228870   +0.4915793429*_S11_PC_3+
1228871   +-0.162964672*_S12_PC_4+
1228872   +-0.164545705*_S13_PC_5+
1228873   +-0.046033642*_S14_PC_6+
1228874   +0.0686861603*_S15_PC_7+
1228875   +-0.175404685*_S16_PC_8+
1228876   +0.0465458336*_S17_PC_9+
1228877   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN51= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1228878   +/*----------------------------------------------*/
1228879   +* Component 2 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 5;
1228880   +/*----------------------------------------------*/
1228881   +;
MPRINT(EM_DIAGRAM):   ;
1228882   +_SPRIN52=
1228883   +0.5472327471*_S1_PC_1+
1228884   +0.0689025168*_S2_PC_10+
1228885   +0.1063292528*_S3_PC_11+
1228886   +-0.00786993*_S4_PC_12+
1228887   +-0.081647068*_S5_PC_13+
1228888   +0.0764676562*_S6_PC_14+
1228889   +0.2501879069*_S7_PC_15+
1228890   +-0.158104644*_S8_PC_16+
1228891   +0.2869913627*_S9_PC_17+
1228892   +0.0098433348*_S10_PC_2+
1228893   +0.1206515741*_S11_PC_3+
1228894   +0.0085779438*_S12_PC_4+
1228895   +-0.339405068*_S13_PC_5+
1228896   +0.3375545447*_S14_PC_6+
1228897   +0.0542971825*_S15_PC_7+
1228898   +0.5050955192*_S16_PC_8+
1228899   +-0.004055733*_S17_PC_9+
1228900   +-1.11379E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN52= 0.5472327471*_S1_PC_1+ 0.0689025168*_S2_PC_10+
0.1063292528*_S3_PC_11+ -0.00786993*_S4_PC_12+ -0.081647068*_S5_PC_13+ 0.0764676562*_S6_PC_14+
0.2501879069*_S7_PC_15+ -0.158104644*_S8_PC_16+ 0.2869913627*_S9_PC_17+
0.0098433348*_S10_PC_2+ 0.1206515741*_S11_PC_3+ 0.0085779438*_S12_PC_4+
-0.339405068*_S13_PC_5+ 0.3375545447*_S14_PC_6+ 0.0542971825*_S15_PC_7+
0.5050955192*_S16_PC_8+ -0.004055733*_S17_PC_9+ -1.11379E-10*_S18_YEAR_BIRTH;
1228901   +/*----------------------------------------------*/
1228902   +* Component 3 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 3 at stage 5;
1228903   +/*----------------------------------------------*/
1228904   +;
MPRINT(EM_DIAGRAM):   ;
1228905   +_SPRIN53=
1228906   +0.0904586995*_S1_PC_1+
1228907   +-0.25358759*_S2_PC_10+
1228908   +0.1798508899*_S3_PC_11+
1228909   +0.1286557873*_S4_PC_12+
1228910   +0.3871465144*_S5_PC_13+
1228911   +0.3933352021*_S6_PC_14+
1228912   +-0.105794257*_S7_PC_15+
1228913   +0.0164426249*_S8_PC_16+
1228914   +0.2424122793*_S9_PC_17+
1228915   +0.3425749957*_S10_PC_2+
1228916   +0.1236367164*_S11_PC_3+
1228917   +-0.267238623*_S12_PC_4+
1228918   +0.2876403849*_S13_PC_5+
1228919   +-0.276983559*_S14_PC_6+
1228920   +0.1162237381*_S15_PC_7+
1228921   +0.1603566014*_S16_PC_8+
1228922   +0.317885474*_S17_PC_9+
1228923   +2.058378E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN53= 0.0904586995*_S1_PC_1+ -0.25358759*_S2_PC_10+
0.1798508899*_S3_PC_11+ 0.1286557873*_S4_PC_12+ 0.3871465144*_S5_PC_13+
0.3933352021*_S6_PC_14+ -0.105794257*_S7_PC_15+ 0.0164426249*_S8_PC_16+
0.2424122793*_S9_PC_17+ 0.3425749957*_S10_PC_2+ 0.1236367164*_S11_PC_3+
-0.267238623*_S12_PC_4+ 0.2876403849*_S13_PC_5+ -0.276983559*_S14_PC_6+
0.1162237381*_S15_PC_7+ 0.1603566014*_S16_PC_8+ 0.317885474*_S17_PC_9+
2.058378E-10*_S18_YEAR_BIRTH;
1228924   +/*----------------------------------------------*/
1228925   +* Component 4 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 4 at stage 5;
1228926   +/*----------------------------------------------*/
1228927   +;
MPRINT(EM_DIAGRAM):   ;
1228928   +_SPRIN54=
1228929   +-0.216059196*_S1_PC_1+
1228930   +0.2253134053*_S2_PC_10+
1228931   +0.0458400339*_S3_PC_11+
1228932   +-0.158708269*_S4_PC_12+
1228933   +0.2958082517*_S5_PC_13+
1228934   +0.1640638198*_S6_PC_14+
1228935   +-0.330259515*_S7_PC_15+
1228936   +0.0489846489*_S8_PC_16+
1228937   +0.0159008582*_S9_PC_17+
1228938   +-0.302936443*_S10_PC_2+
1228939   +-0.158642589*_S11_PC_3+
1228940   +-0.070387665*_S12_PC_4+
1228941   +0.3540228754*_S13_PC_5+
1228942   +0.4732991561*_S14_PC_6+
1228943   +-0.173510857*_S15_PC_7+
1228944   +0.3684386956*_S16_PC_8+
1228945   +-0.109680308*_S17_PC_9+
1228946   +8.873873E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN54= -0.216059196*_S1_PC_1+ 0.2253134053*_S2_PC_10+
0.0458400339*_S3_PC_11+ -0.158708269*_S4_PC_12+ 0.2958082517*_S5_PC_13+
0.1640638198*_S6_PC_14+ -0.330259515*_S7_PC_15+ 0.0489846489*_S8_PC_16+
0.0159008582*_S9_PC_17+ -0.302936443*_S10_PC_2+ -0.158642589*_S11_PC_3+
-0.070387665*_S12_PC_4+ 0.3540228754*_S13_PC_5+ 0.4732991561*_S14_PC_6+
-0.173510857*_S15_PC_7+ 0.3684386956*_S16_PC_8+ -0.109680308*_S17_PC_9+
8.873873E-11*_S18_YEAR_BIRTH;
1228947   +/*----------------------------------------------*/
1228948   +* Component 5 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 5 at stage 5;
1228949   +/*----------------------------------------------*/
1228950   +;
MPRINT(EM_DIAGRAM):   ;
1228951   +_SPRIN55=
1228952   +0.1715451272*_S1_PC_1+
1228953   +0.3115614636*_S2_PC_10+
1228954   +0.3007489853*_S3_PC_11+
1228955   +0.0867096677*_S4_PC_12+
1228956   +0.4850813272*_S5_PC_13+
1228957   +-0.154430605*_S6_PC_14+
1228958   +0.0053311376*_S7_PC_15+
1228959   +0.1605102659*_S8_PC_16+
1228960   +-0.18054643*_S9_PC_17+
1228961   +0.1238681466*_S10_PC_2+
1228962   +-0.209620079*_S11_PC_3+
1228963   +0.0074706781*_S12_PC_4+
1228964   +-0.230438413*_S13_PC_5+
1228965   +-0.360907655*_S14_PC_6+
1228966   +-0.094862505*_S15_PC_7+
1228967   +0.102183415*_S16_PC_8+
1228968   +-0.442555387*_S17_PC_9+
1228969   +-9.0633E-11*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN55= 0.1715451272*_S1_PC_1+ 0.3115614636*_S2_PC_10+
0.3007489853*_S3_PC_11+ 0.0867096677*_S4_PC_12+ 0.4850813272*_S5_PC_13+
-0.154430605*_S6_PC_14+ 0.0053311376*_S7_PC_15+ 0.1605102659*_S8_PC_16+ -0.18054643*_S9_PC_17+
0.1238681466*_S10_PC_2+ -0.209620079*_S11_PC_3+ 0.0074706781*_S12_PC_4+
-0.230438413*_S13_PC_5+ -0.360907655*_S14_PC_6+ -0.094862505*_S15_PC_7+ 0.102183415*_S16_PC_8+
-0.442555387*_S17_PC_9+ -9.0633E-11*_S18_YEAR_BIRTH;
1228970   +/*----------------------------------------------*/
1228971   +* Component 6 at stage 5;
MPRINT(EM_DIAGRAM):   * Component 6 at stage 5;
1228972   +/*----------------------------------------------*/
1228973   +;
MPRINT(EM_DIAGRAM):   ;
1228974   +_SPRIN56=
1228975   +-0.142104936*_S1_PC_1+
1228976   +-0.163802529*_S2_PC_10+
1228977   +0.2722556929*_S3_PC_11+
1228978   +-0.106217695*_S4_PC_12+
1228979   +0.1292014315*_S5_PC_13+
1228980   +-0.186258463*_S6_PC_14+
1228981   +-0.091004563*_S7_PC_15+
1228982   +-0.064777423*_S8_PC_16+
1228983   +-0.238558476*_S9_PC_17+
1228984   +-0.156265277*_S10_PC_2+
1228985   +0.2206105358*_S11_PC_3+
1228986   +-0.156353822*_S12_PC_4+
1228987   +-0.2104311*_S13_PC_5+
1228988   +0.0856687943*_S14_PC_6+
1228989   +0.2870928087*_S15_PC_7+
1228990   +0.0511562227*_S16_PC_8+
1228991   +0.1122597348*_S17_PC_9+
1228992   +0.7071067813*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN56= -0.142104936*_S1_PC_1+ -0.163802529*_S2_PC_10+
0.2722556929*_S3_PC_11+ -0.106217695*_S4_PC_12+ 0.1292014315*_S5_PC_13+
-0.186258463*_S6_PC_14+ -0.091004563*_S7_PC_15+ -0.064777423*_S8_PC_16+
-0.238558476*_S9_PC_17+ -0.156265277*_S10_PC_2+ 0.2206105358*_S11_PC_3+
-0.156353822*_S12_PC_4+ -0.2104311*_S13_PC_5+ 0.0856687943*_S14_PC_6+ 0.2870928087*_S15_PC_7+
0.0511562227*_S16_PC_8+ 0.1122597348*_S17_PC_9+ 0.7071067813*_S18_YEAR_BIRTH;
1228993   +;
MPRINT(EM_DIAGRAM):   ;
1228994   +/*----------------------------------------------*/
1228995   +* Component 1 at stage 6;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 6;
1228996   +/*----------------------------------------------*/
1228997   +;
MPRINT(EM_DIAGRAM):   ;
1228998   +_SPRIN61=
1228999   +-0.115046453*_S1_PC_1+
1229000   +0.5302526185*_S2_PC_10+
1229001   +-0.275135397*_S3_PC_11+
1229002   +0.004612446*_S4_PC_12+
1229003   +0.166932134*_S5_PC_13+
1229004   +-0.17048832*_S6_PC_14+
1229005   +-0.212191542*_S7_PC_15+
1229006   +0.0228966122*_S8_PC_16+
1229007   +0.4384969167*_S9_PC_17+
1229008   +0.0077993846*_S10_PC_2+
1229009   +0.4915793429*_S11_PC_3+
1229010   +-0.162964672*_S12_PC_4+
1229011   +-0.164545705*_S13_PC_5+
1229012   +-0.046033642*_S14_PC_6+
1229013   +0.0686861603*_S15_PC_7+
1229014   +-0.175404685*_S16_PC_8+
1229015   +0.0465458336*_S17_PC_9+
1229016   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN61= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1229017   +/*----------------------------------------------*/
1229018   +* Component 2 at stage 6;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 6;
1229019   +/*----------------------------------------------*/
1229020   +;
MPRINT(EM_DIAGRAM):   ;
1229021   +_SPRIN62=
1229022   +-0.088531922*_S1_PC_1+
1229023   +-0.009002035*_S2_PC_10+
1229024   +0.31667389*_S3_PC_11+
1229025   +-0.02941866*_S4_PC_12+
1229026   +-0.2067745*_S5_PC_13+
1229027   +-0.025433534*_S6_PC_14+
1229028   +-0.054283266*_S7_PC_15+
1229029   +0.0743381462*_S8_PC_16+
1229030   +0.4000347072*_S9_PC_17+
1229031   +0.2150358409*_S10_PC_2+
1229032   +-0.342625967*_S11_PC_3+
1229033   +-0.277332723*_S12_PC_4+
1229034   +0.0361157229*_S13_PC_5+
1229035   +0.2510167741*_S14_PC_6+
1229036   +0.4155727148*_S15_PC_7+
1229037   +-0.285270046*_S16_PC_8+
1229038   +-0.34654039*_S17_PC_9+
1229039   +-5.85785E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN62= -0.088531922*_S1_PC_1+ -0.009002035*_S2_PC_10+
0.31667389*_S3_PC_11+ -0.02941866*_S4_PC_12+ -0.2067745*_S5_PC_13+ -0.025433534*_S6_PC_14+
-0.054283266*_S7_PC_15+ 0.0743381462*_S8_PC_16+ 0.4000347072*_S9_PC_17+
0.2150358409*_S10_PC_2+ -0.342625967*_S11_PC_3+ -0.277332723*_S12_PC_4+
0.0361157229*_S13_PC_5+ 0.2510167741*_S14_PC_6+ 0.4155727148*_S15_PC_7+
-0.285270046*_S16_PC_8+ -0.34654039*_S17_PC_9+ -5.85785E-10*_S18_YEAR_BIRTH;
1229040   +;
MPRINT(EM_DIAGRAM):   ;
1229041   +/*----------------------------------------------*/
1229042   +* Component 1 at stage 7;
MPRINT(EM_DIAGRAM):   * Component 1 at stage 7;
1229043   +/*----------------------------------------------*/
1229044   +;
MPRINT(EM_DIAGRAM):   ;
1229045   +_SPRIN71=
1229046   +-0.115046453*_S1_PC_1+
1229047   +0.5302526185*_S2_PC_10+
1229048   +-0.275135397*_S3_PC_11+
1229049   +0.004612446*_S4_PC_12+
1229050   +0.166932134*_S5_PC_13+
1229051   +-0.17048832*_S6_PC_14+
1229052   +-0.212191542*_S7_PC_15+
1229053   +0.0228966122*_S8_PC_16+
1229054   +0.4384969167*_S9_PC_17+
1229055   +0.0077993846*_S10_PC_2+
1229056   +0.4915793429*_S11_PC_3+
1229057   +-0.162964672*_S12_PC_4+
1229058   +-0.164545705*_S13_PC_5+
1229059   +-0.046033642*_S14_PC_6+
1229060   +0.0686861603*_S15_PC_7+
1229061   +-0.175404685*_S16_PC_8+
1229062   +0.0465458336*_S17_PC_9+
1229063   +8.283E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN71= -0.115046453*_S1_PC_1+ 0.5302526185*_S2_PC_10+
-0.275135397*_S3_PC_11+ 0.004612446*_S4_PC_12+ 0.166932134*_S5_PC_13+ -0.17048832*_S6_PC_14+
-0.212191542*_S7_PC_15+ 0.0228966122*_S8_PC_16+ 0.4384969167*_S9_PC_17+
0.0077993846*_S10_PC_2+ 0.4915793429*_S11_PC_3+ -0.162964672*_S12_PC_4+
-0.164545705*_S13_PC_5+ -0.046033642*_S14_PC_6+ 0.0686861603*_S15_PC_7+
-0.175404685*_S16_PC_8+ 0.0465458336*_S17_PC_9+ 8.283E-10*_S18_YEAR_BIRTH;
1229064   +/*----------------------------------------------*/
1229065   +* Component 2 at stage 7;
MPRINT(EM_DIAGRAM):   * Component 2 at stage 7;
1229066   +/*----------------------------------------------*/
1229067   +;
MPRINT(EM_DIAGRAM):   ;
1229068   +_SPRIN72=
1229069   +-0.180501533*_S1_PC_1+
1229070   +-0.292125135*_S2_PC_10+
1229071   +0.0496068949*_S3_PC_11+
1229072   +-0.39238632*_S4_PC_12+
1229073   +0.0504480044*_S5_PC_13+
1229074   +0.2554721353*_S6_PC_14+
1229075   +0.1212210649*_S7_PC_15+
1229076   +0.3944716624*_S8_PC_16+
1229077   +0.2654649612*_S9_PC_17+
1229078   +-0.139900403*_S10_PC_2+
1229079   +0.3104878745*_S11_PC_3+
1229080   +0.3921543574*_S12_PC_4+
1229081   +-0.0786467*_S13_PC_5+
1229082   +-0.135648388*_S14_PC_6+
1229083   +0.0491760472*_S15_PC_7+
1229084   +0.0525967564*_S16_PC_8+
1229085   +-0.342839266*_S17_PC_9+
1229086   +-1.65775E-10*_S18_YEAR_BIRTH;
MPRINT(EM_DIAGRAM):   _SPRIN72= -0.180501533*_S1_PC_1+ -0.292125135*_S2_PC_10+
0.0496068949*_S3_PC_11+ -0.39238632*_S4_PC_12+ 0.0504480044*_S5_PC_13+ 0.2554721353*_S6_PC_14+
0.1212210649*_S7_PC_15+ 0.3944716624*_S8_PC_16+ 0.2654649612*_S9_PC_17+
-0.139900403*_S10_PC_2+ 0.3104878745*_S11_PC_3+ 0.3921543574*_S12_PC_4+ -0.0786467*_S13_PC_5+
-0.135648388*_S14_PC_6+ 0.0491760472*_S15_PC_7+ 0.0525967564*_S16_PC_8+
-0.342839266*_S17_PC_9+ -1.65775E-10*_S18_YEAR_BIRTH;
1229087   +;
MPRINT(EM_DIAGRAM):   ;
1229088   +DROP
1229089   +_SPRIN01
1229090   +_SPRIN02
1229091   +_SPRIN03
1229092   +_SPRIN04
1229093   +_SPRIN05
1229094   +_SPRIN06
1229095   +_SPRIN11
1229096   +_SPRIN12
1229097   +_SPRIN13
1229098   +_SPRIN14
1229099   +_SPRIN15
1229100   +_SPRIN16
1229101   +_SPRIN21
1229102   +_SPRIN22
1229103   +_SPRIN23
1229104   +_SPRIN24
1229105   +_SPRIN25
1229106   +_SPRIN26
1229107   +_SPRIN31
1229108   +_SPRIN32
1229109   +_SPRIN33
1229110   +_SPRIN34
1229111   +_SPRIN35
1229112   +_SPRIN36
1229113   +_SPRIN41
1229114   +_SPRIN42
1229115   +_SPRIN43
1229116   +_SPRIN44
1229117   +_SPRIN45
1229118   +_SPRIN46
1229119   +_SPRIN51
1229120   +_SPRIN52
1229121   +_SPRIN53
1229122   +_SPRIN54
1229123   +_SPRIN55
1229124   +_SPRIN56
1229125   +_SPRIN61
1229126   +_SPRIN62
1229127   +_SPRIN71
1229128   +_SPRIN72
1229129   +;
MPRINT(EM_DIAGRAM):   DROP _SPRIN01 _SPRIN02 _SPRIN03 _SPRIN04 _SPRIN05 _SPRIN06 _SPRIN11
_SPRIN12 _SPRIN13 _SPRIN14 _SPRIN15 _SPRIN16 _SPRIN21 _SPRIN22 _SPRIN23 _SPRIN24 _SPRIN25
_SPRIN26 _SPRIN31 _SPRIN32 _SPRIN33 _SPRIN34 _SPRIN35 _SPRIN36 _SPRIN41 _SPRIN42 _SPRIN43
_SPRIN44 _SPRIN45 _SPRIN46 _SPRIN51 _SPRIN52 _SPRIN53 _SPRIN54 _SPRIN55 _SPRIN56 _SPRIN61
_SPRIN62 _SPRIN71 _SPRIN72 ;
1229130   +;
MPRINT(EM_DIAGRAM):   ;
1229131   +/**********************************************************/
1229132   +* Selected activation function at stage 0 = SIN;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 0 = SIN;
1229133   +/**********************************************************/
1229134   +;
MPRINT(EM_DIAGRAM):   ;
1229135   +_YHAT0=2.5483709193
1229136   ++3.79289941309279*SIN(-0.42084283769022*_SPRIN01*(2/ARCOS(-1)))
1229137   ++9.12613357366608*SIN(0.11461206996404*_SPRIN02*(2/ARCOS(-1)))
1229138   ++1.75427678769776*SIN(0.65319204434228*_SPRIN03*(2/ARCOS(-1)))
1229139   ++9.4204264255804*SIN(-0.09632976126072*_SPRIN04*(2/ARCOS(-1)))
1229140   ++7.74196499908445*SIN(0.13593076474093*_SPRIN05*(2/ARCOS(-1)))
1229141   ++1.2344834866815*SIN(0.94061350603414*_SPRIN06*(2/ARCOS(-1)))
1229142   +;
MPRINT(EM_DIAGRAM):   _YHAT0=2.5483709193
+3.79289941309279*SIN(-0.42084283769022*_SPRIN01*(2/ARCOS(-1)))
+9.12613357366608*SIN(0.11461206996404*_SPRIN02*(2/ARCOS(-1)))
+1.75427678769776*SIN(0.65319204434228*_SPRIN03*(2/ARCOS(-1)))
+9.4204264255804*SIN(-0.09632976126072*_SPRIN04*(2/ARCOS(-1)))
+7.74196499908445*SIN(0.13593076474093*_SPRIN05*(2/ARCOS(-1)))
+1.2344834866815*SIN(0.94061350603414*_SPRIN06*(2/ARCOS(-1))) ;
1229143   +/*--- Target level is binary, take a logistic link function --*/
1229144   +if _YHAT0 > 0 then _YHAT0=1/(1+exp(-_YHAT0));
MPRINT(EM_DIAGRAM):   if _YHAT0 > 0 then _YHAT0=1/(1+exp(-_YHAT0));
1229145   +else _YHAT0=exp(_YHAT0)/(1+exp(_YHAT0));
MPRINT(EM_DIAGRAM):   else _YHAT0=exp(_YHAT0)/(1+exp(_YHAT0));
1229146   +;
MPRINT(EM_DIAGRAM):   ;
1229147   +/**********************************************************/
1229148   +* Selected activation function at stage 1 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 1 = SQUARE;
1229149   +/**********************************************************/
1229150   +;
MPRINT(EM_DIAGRAM):   ;
1229151   +_RHAT1=0.0038091527
1229152   ++(0.04083501553091+0.00505131800181*_SPRIN11)*_SPRIN11
1229153   ++(0.03682825883303+-0.00518790244012*_SPRIN12)*_SPRIN12
1229154   ++(-0.01898621280818+-0.00110083315067*_SPRIN13)*_SPRIN13
1229155   ++(-0.02368844932599+0.0002312229899*_SPRIN14)*_SPRIN14
1229156   ++(0.01854629185569+-0.00511783349856*_SPRIN15)*_SPRIN15
1229157   ++(0.00874927307929+-0.00458046676089*_SPRIN16)*_SPRIN16
1229158   +;
MPRINT(EM_DIAGRAM):   _RHAT1=0.0038091527
+(0.04083501553091+0.00505131800181*_SPRIN11)*_SPRIN11
+(0.03682825883303+-0.00518790244012*_SPRIN12)*_SPRIN12
+(-0.01898621280818+-0.00110083315067*_SPRIN13)*_SPRIN13
+(-0.02368844932599+0.0002312229899*_SPRIN14)*_SPRIN14
+(0.01854629185569+-0.00511783349856*_SPRIN15)*_SPRIN15
+(0.00874927307929+-0.00458046676089*_SPRIN16)*_SPRIN16 ;
1229159   +;
MPRINT(EM_DIAGRAM):   ;
1229160   +/**********************************************************/
1229161   +* Selected activation function at stage 2 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 2 = SQUARE;
1229162   +/**********************************************************/
1229163   +;
MPRINT(EM_DIAGRAM):   ;
1229164   +_RHAT2=0.0033806367
1229165   ++(0.01363438578855+0.00418049484282*_SPRIN21)*_SPRIN21
1229166   ++(-0.00939841818055+-0.01204528580564*_SPRIN22)*_SPRIN22
1229167   ++(0.00740450154167+0.00253672591167*_SPRIN23)*_SPRIN23
1229168   ++(0.01011311389787+-0.00146722764271*_SPRIN24)*_SPRIN24
1229169   ++(0.00825906753326+-0.00293450175884*_SPRIN25)*_SPRIN25
1229170   ++(-0.00851652393959+0.00682318379966*_SPRIN26)*_SPRIN26
1229171   +;
MPRINT(EM_DIAGRAM):   _RHAT2=0.0033806367
+(0.01363438578855+0.00418049484282*_SPRIN21)*_SPRIN21
+(-0.00939841818055+-0.01204528580564*_SPRIN22)*_SPRIN22
+(0.00740450154167+0.00253672591167*_SPRIN23)*_SPRIN23
+(0.01011311389787+-0.00146722764271*_SPRIN24)*_SPRIN24
+(0.00825906753326+-0.00293450175884*_SPRIN25)*_SPRIN25
+(-0.00851652393959+0.00682318379966*_SPRIN26)*_SPRIN26 ;
1229172   +;
MPRINT(EM_DIAGRAM):   ;
1229173   +/**********************************************************/
1229174   +* Selected activation function at stage 3 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 3 = SQUARE;
1229175   +/**********************************************************/
1229176   +;
MPRINT(EM_DIAGRAM):   ;
1229177   +_RHAT3=-0.000829622
1229178   ++(0.00600271794048+-0.00074476410414*_SPRIN31)*_SPRIN31
1229179   ++(-0.00364300062933+-0.00040838089063*_SPRIN32)*_SPRIN32
1229180   ++(0.00781166729348+-0.00181934912487*_SPRIN33)*_SPRIN33
1229181   ++(0.00349080387965+0.00841515528576*_SPRIN34)*_SPRIN34
1229182   ++(0.00912669691909+-0.00970203240121*_SPRIN35)*_SPRIN35
1229183   ++(-0.00166318913219+-0.00275873829837*_SPRIN36)*_SPRIN36
1229184   +;
MPRINT(EM_DIAGRAM):   _RHAT3=-0.000829622
+(0.00600271794048+-0.00074476410414*_SPRIN31)*_SPRIN31
+(-0.00364300062933+-0.00040838089063*_SPRIN32)*_SPRIN32
+(0.00781166729348+-0.00181934912487*_SPRIN33)*_SPRIN33
+(0.00349080387965+0.00841515528576*_SPRIN34)*_SPRIN34
+(0.00912669691909+-0.00970203240121*_SPRIN35)*_SPRIN35
+(-0.00166318913219+-0.00275873829837*_SPRIN36)*_SPRIN36 ;
1229185   +;
MPRINT(EM_DIAGRAM):   ;
1229186   +/**********************************************************/
1229187   +* Selected activation function at stage 4 = TANH;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 4 = TANH;
1229188   +/**********************************************************/
1229189   +;
MPRINT(EM_DIAGRAM):   ;
1229190   +_RHAT4=-0.001101264
1229191   ++-0.035302483833*TANH(0.1155236446518*_SPRIN41)
1229192   ++0.01574826561252*TANH(-0.84880911259972*_SPRIN42)
1229193   ++0.00913476757653*TANH(5.75007475786896*_SPRIN43)
1229194   ++-0.01055088580281*TANH(1.74814947785792*_SPRIN44)
1229195   ++0.00707812218626*TANH(-2.78842235044945*_SPRIN45)
1229196   ++0.00980902580133*TANH(0.45937598506696*_SPRIN46)
1229197   +;
MPRINT(EM_DIAGRAM):   _RHAT4=-0.001101264 +-0.035302483833*TANH(0.1155236446518*_SPRIN41)
+0.01574826561252*TANH(-0.84880911259972*_SPRIN42)
+0.00913476757653*TANH(5.75007475786896*_SPRIN43)
+-0.01055088580281*TANH(1.74814947785792*_SPRIN44)
+0.00707812218626*TANH(-2.78842235044945*_SPRIN45)
+0.00980902580133*TANH(0.45937598506696*_SPRIN46) ;
1229198   +;
MPRINT(EM_DIAGRAM):   ;
1229199   +/**********************************************************/
1229200   +* Selected activation function at stage 5 = SQUARE;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 5 = SQUARE;
1229201   +/**********************************************************/
1229202   +;
MPRINT(EM_DIAGRAM):   ;
1229203   +_RHAT5=0.000668225
1229204   ++(-0.00019510519268+-0.00067610323388*_SPRIN51)*_SPRIN51
1229205   ++(0.00299570661826+0.00046350367455*_SPRIN52)*_SPRIN52
1229206   ++(0.00367067678963+-0.00097228388893*_SPRIN53)*_SPRIN53
1229207   ++(0.00271553459602+-0.00080798865923*_SPRIN54)*_SPRIN54
1229208   ++(0.00402113460937+0.00291524397998*_SPRIN55)*_SPRIN55
1229209   ++(-0.0013102871264+-0.00077751868318*_SPRIN56)*_SPRIN56
1229210   +;
MPRINT(EM_DIAGRAM):   _RHAT5=0.000668225
+(-0.00019510519268+-0.00067610323388*_SPRIN51)*_SPRIN51
+(0.00299570661826+0.00046350367455*_SPRIN52)*_SPRIN52
+(0.00367067678963+-0.00097228388893*_SPRIN53)*_SPRIN53
+(0.00271553459602+-0.00080798865923*_SPRIN54)*_SPRIN54
+(0.00402113460937+0.00291524397998*_SPRIN55)*_SPRIN55
+(-0.0013102871264+-0.00077751868318*_SPRIN56)*_SPRIN56 ;
1229211   +;
MPRINT(EM_DIAGRAM):   ;
1229212   +/**********************************************************/
1229213   +* Selected activation function at stage 6 = TANH;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 6 = TANH;
1229214   +/**********************************************************/
1229215   +;
MPRINT(EM_DIAGRAM):   ;
1229216   +_RHAT6=0.0000939197
1229217   ++0.02544723422973*TANH(0.11690459842008*_SPRIN61)
1229218   ++0.01189019712044*TANH(0.07362773994214*_SPRIN62)
1229219   +;
MPRINT(EM_DIAGRAM):   _RHAT6=0.0000939197 +0.02544723422973*TANH(0.11690459842008*_SPRIN61)
+0.01189019712044*TANH(0.07362773994214*_SPRIN62) ;
1229220   +;
MPRINT(EM_DIAGRAM):   ;
1229221   +/**********************************************************/
1229222   +* Selected activation function at stage 7 = COS;
MPRINT(EM_DIAGRAM):   * Selected activation function at stage 7 = COS;
1229223   +/**********************************************************/
1229224   +;
MPRINT(EM_DIAGRAM):   ;
1229225   +_RHAT7=0.5329856773
1229226   ++-0.13664525498092*COS(0.13087682520683*_SPRIN71*(2/ARCOS(-1)))
1229227   ++-0.39681366133923*COS(0.00183650665402*_SPRIN72*(2/ARCOS(-1)))
1229228   +;
MPRINT(EM_DIAGRAM):   _RHAT7=0.5329856773
+-0.13664525498092*COS(0.13087682520683*_SPRIN71*(2/ARCOS(-1)))
+-0.39681366133923*COS(0.00183650665402*_SPRIN72*(2/ARCOS(-1))) ;
1229229   +;
MPRINT(EM_DIAGRAM):   ;
1229230   +_tmpPredict
1229231   +=_YHAT0
1229232   ++_RHAT1
1229233   ++_RHAT2
1229234   ++_RHAT3
1229235   ++_RHAT4
1229236   ++_RHAT5
1229237   ++_RHAT6
1229238   ++_RHAT7
1229239   +;
MPRINT(EM_DIAGRAM):   _tmpPredict =_YHAT0 +_RHAT1 +_RHAT2 +_RHAT3 +_RHAT4 +_RHAT5 +_RHAT6
+_RHAT7 ;
1229240   +_tmpPredict=1-_tmpPredict;
MPRINT(EM_DIAGRAM):   _tmpPredict=1-_tmpPredict;
1229241   +If _tmpPredict > 1 then _tmpPredict=1;
MPRINT(EM_DIAGRAM):   If _tmpPredict > 1 then _tmpPredict=1;
1229242   +else if _tmpPredict < 0 then _tmpPredict=0;
MPRINT(EM_DIAGRAM):   else if _tmpPredict < 0 then _tmpPredict=0;
1229243   +P_DepVar1=_tmpPredict;
MPRINT(EM_DIAGRAM):   P_DepVar1=_tmpPredict;
1229244   +label P_DepVar1 = "Predicted: DepVar=1";
MPRINT(EM_DIAGRAM):   label P_DepVar1 = "Predicted: DepVar=1";
1229245   +P_DepVar0=1-_tmpPredict;
MPRINT(EM_DIAGRAM):   P_DepVar0=1-_tmpPredict;
1229246   +label P_DepVar0 = "Predicted: DepVar=0";
MPRINT(EM_DIAGRAM):   label P_DepVar0 = "Predicted: DepVar=0";
1229247   +if P_DepVar1 ge 0.5 then I_DepVar="1";
MPRINT(EM_DIAGRAM):   if P_DepVar1 ge 0.5 then I_DepVar="1";
1229248   +else I_DepVar="0";
MPRINT(EM_DIAGRAM):   else I_DepVar="0";
1229249   +if F_DepVar NE "1" AND F_DepVar NE "0" then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE "1" AND F_DepVar NE "0" then do;
1229250   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1229251   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1229252   +end;
MPRINT(EM_DIAGRAM):   end;
1229253   +else do;
MPRINT(EM_DIAGRAM):   else do;
1229254   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1229255   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1229256   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1229257   +WHEN("1") R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN("1") R_DepVar1 = R_DepVar1 +1;
1229258   +WHEN("0") R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN("0") R_DepVar0 = R_DepVar0 +1;
1229259   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1229260   +end;
MPRINT(EM_DIAGRAM):   end;
1229261   +END;
MPRINT(EM_DIAGRAM):   END;
1229262   +;
MPRINT(EM_DIAGRAM):   ;
1229263   +DROP _YHAT0
1229264   +_RHAT1
1229265   +_RHAT2
1229266   +_RHAT3
1229267   +_RHAT4
1229268   +_RHAT5
1229269   +_RHAT6
1229270   +_RHAT7
1229271   +_tmpPredict
1229272   +_S1_PC_1
1229273   +_S2_PC_10
1229274   +_S3_PC_11
1229275   +_S4_PC_12
1229276   +_S5_PC_13
1229277   +_S6_PC_14
1229278   +_S7_PC_15
1229279   +_S8_PC_16
1229280   +_S9_PC_17
1229281   +_S10_PC_2
1229282   +_S11_PC_3
1229283   +_S12_PC_4
1229284   +_S13_PC_5
1229285   +_S14_PC_6
1229286   +_S15_PC_7
1229287   +_S16_PC_8
1229288   +_S17_PC_9
1229289   +_S18_YEAR_BIRTH
1229290   +;
MPRINT(EM_DIAGRAM):   DROP _YHAT0 _RHAT1 _RHAT2 _RHAT3 _RHAT4 _RHAT5 _RHAT6 _RHAT7 _tmpPredict
_S1_PC_1 _S2_PC_10 _S3_PC_11 _S4_PC_12 _S5_PC_13 _S6_PC_14 _S7_PC_15 _S8_PC_16 _S9_PC_17
_S10_PC_2 _S11_PC_3 _S12_PC_4 _S13_PC_5 _S14_PC_6 _S15_PC_7 _S16_PC_8 _S17_PC_9
_S18_YEAR_BIRTH ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1229291    run;
 
NOTE: DATA STEP view saved on file EMWS8.DMNEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1229292    quit;
1229293    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ _ERR_ _AVERR_ _DFT_ _DFE_ _MSE_ _RMSE_ _NW_ _FPE_ _RFPE_
_AIC_ _SBC_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.DMNeural2_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ _ERR_ _AVERR_ _DFT_ _DFE_ _MSE_ _RMSE_ _NW_ _FPE_ _RFPE_ _AIC_ _SBC_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   label _DFE_= "Train: Degrees of Freedom for Error" _DFT_=
"Train: Total Degrees of Freedom" _DFM_= "Train: Model Degrees of Freedom" _MSE_= "Train: Mean
Squared Error" _RMSE_= "Train: Root Mean Squared Error" _NW_= "Train: Number of Weights" _FPE_
= "Train: Final Prediction Error" _RFPE_ = "Train: Root Final Prediction Error" _AIC_= "Train:
Akaike's Information Criterion" _SBC_= "Train: Schwarz's Bayesian Criterion" _ERR_= "Train:
Error Function" _AVERR_= "Train: Average Error Function";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ _ERR_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar="1" then do;
MPRINT(CALFITSTATSNOMINAL):   if P_DepVar1<1e-10 then _ERR_+(-2*(1e10*P_DepVar1-10*LOG(10)-1));
MPRINT(CALFITSTATSNOMINAL):   else _ERR_+(-2*log(P_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar="0" then do;
MPRINT(CALFITSTATSNOMINAL):   if P_DepVar0<1e-10 then _ERR_+(-2*(1e10*P_DepVar0-10*LOG(10)-1));
MPRINT(CALFITSTATSNOMINAL):   else _ERR_+(-2*log(P_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   _AVERR_=_ERR_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _NW_=88;
MPRINT(CALFITSTATSNOMINAL):   _DFM_=88;
MPRINT(CALFITSTATSNOMINAL):   _DFT_=_DIV_-_NOBS_;
MPRINT(CALFITSTATSNOMINAL):   _DFE_=_DFT_-_DFM_;
MPRINT(CALFITSTATSNOMINAL):   if _DFE_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MSE_=_ASE_ *_DFT_/_DFE_;
MPRINT(CALFITSTATSNOMINAL):   _RMSE_=sqrt(_MSE_);
MPRINT(CALFITSTATSNOMINAL):   _FPE_ =_ASE_*(_DFT_+_DFM_)/_DFE_;
MPRINT(CALFITSTATSNOMINAL):   _RFPE_=sqrt(_FPE_);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _AIC_=_ERR_+2*_DFM_;
MPRINT(CALFITSTATSNOMINAL):   if _DFT_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _SBC_=_ERR_+_DFM_*log(_DFT_);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.DMNeural2_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.DMNeural2_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
1229353    data _tmpds1_;
MPRINT(EM_DIAGRAM):    data _tmpds1_;
1229354    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1229355    if _TYPE_ ^='_PARMS_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_ ^='_PARMS_' then delete;
1229356    length STATISTICS $30;
MPRINT(EM_DIAGRAM):   length STATISTICS $30;
1229357    STATISTICS = 'Sum of Square Errors';
MPRINT(EM_DIAGRAM):   STATISTICS = 'Sum of Square Errors';
1229358    KEEP _NAME_ _STAGE_ STATISTICS _MEAN_;
MPRINT(EM_DIAGRAM):   KEEP _NAME_ _STAGE_ STATISTICS _MEAN_;
1229359    Label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_optfn, noquote))";
MPRINT(EM_DIAGRAM):   Label _NAME_ = "Optimization Function";
1229360    Label _STAGE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stage, noquote))"
1229360  ! ;
MPRINT(EM_DIAGRAM):   Label _STAGE_ = "Training Stage";
1229361    Label _MEAN_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))";
MPRINT(EM_DIAGRAM):   Label _MEAN_ = "Statistic";
1229362    Label STATISTICS = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stats,
1229362  ! noquote))";
MPRINT(EM_DIAGRAM):   Label STATISTICS = "Statistics";
1229363    rename _NAME_ =OPTIMIZATION;
MPRINT(EM_DIAGRAM):   rename _NAME_ =OPTIMIZATION;
1229364    rename _STAGE_=STAGE;
MPRINT(EM_DIAGRAM):   rename _STAGE_=STAGE;
1229365    rename _MEAN_ = VALUE;
MPRINT(EM_DIAGRAM):   rename _MEAN_ = VALUE;
1229366    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._TMPDS1_ has 64 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1229367    data _tmpds2_;
MPRINT(EM_DIAGRAM):   data _tmpds2_;
1229368    set EMWS8.DMNeural2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_ESTIMATE;
1229369    if _TYPE_ ^='_PARMS_' then delete;
MPRINT(EM_DIAGRAM):   if _TYPE_ ^='_PARMS_' then delete;
1229370    length STATISTICS $30;
MPRINT(EM_DIAGRAM):   length STATISTICS $30;
1229371    STATISTICS = 'Accuracy Percent';
MPRINT(EM_DIAGRAM):   STATISTICS = 'Accuracy Percent';
1229372    KEEP _NAME_ _STAGE_ STATISTICS _STDEV_;
MPRINT(EM_DIAGRAM):   KEEP _NAME_ _STAGE_ STATISTICS _STDEV_;
1229373    Label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_optfn, noquote))";
MPRINT(EM_DIAGRAM):   Label _NAME_ = "Optimization Function";
1229374    Label _STAGE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stage, noquote))"
1229374  ! ;
MPRINT(EM_DIAGRAM):   Label _STAGE_ = "Training Stage";
1229375    Label _STDEV_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))";
MPRINT(EM_DIAGRAM):   Label _STDEV_ = "Statistic";
1229376    Label STATISTICS = "%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stats,
1229376  ! noquote))";
MPRINT(EM_DIAGRAM):   Label STATISTICS = "Statistics";
1229377    rename _NAME_ =OPTIMIZATION;
MPRINT(EM_DIAGRAM):   rename _NAME_ =OPTIMIZATION;
1229378    rename _STAGE_=STAGE;
MPRINT(EM_DIAGRAM):   rename _STAGE_=STAGE;
1229379    rename _STDEV_ = VALUE;
MPRINT(EM_DIAGRAM):   rename _STDEV_ = VALUE;
1229380    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.DMNEURAL2_ESTIMATE.
NOTE: The data set WORK._TMPDS2_ has 64 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1229381    data EMWS8.DMNeural2_PLOTSTAGE;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_PLOTSTAGE;
1229382    set _tmpds1_ _tmpds2_;
MPRINT(EM_DIAGRAM):   set _tmpds1_ _tmpds2_;
1229383    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 64 observations read from the data set WORK._TMPDS1_.
NOTE: There were 64 observations read from the data set WORK._TMPDS2_.
NOTE: The data set EMWS8.DMNEURAL2_PLOTSTAGE has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * DMNeural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1229384    *------------------------------------------------------------*;
1229385    * DMNeural2: Computing metadata for TRAIN data;
1229386    *------------------------------------------------------------*;
 
NOTE: View EMWS8.DMNEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.DMNeural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.DMNeural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.DMNeural2_TRAIN out=WORK.M1URUL6O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1URUL6O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1URUL6O(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1URUL6O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1URUL6O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2ZGJCW6 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2AWPSY7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZGJCW6;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "DMNeural2";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "DMNeural2";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "DMNeural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * DMNeural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1229698    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1229699    set EMWS8.DMNeural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMINFO;
1229700    where DATA='DMNeural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='DMNeural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
1229701    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.DMNEURAL2_EMINFO.
      WHERE (DATA='DMNeural2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229702    data EMWS8.DMNeural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMINFO;
1229703    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1229704    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1229705    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.DMNEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1229709    run;
1229710    data EMWS8.DMNeural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMINFO;
1229711    set EMWS8.DMNeural2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMINFO WORK.MODELTEMP_INFO;
1229712    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.DMNEURAL2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.DMNEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229713    proc sort data = EMWS8.DMNeural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.DMNeural2_EMINFO NOTHREADS;
1229714    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1229715    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.DMNEURAL2_EMINFO.
NOTE: The data set EMWS8.DMNEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229716    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1229717    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1229718    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1229719    proc sort data = EMWS8.DMNeural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.DMNeural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1229720    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1229721    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.DMNEURAL2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229722    data EMWS8.DMNeural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMINFO;
1229723    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1229724    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1229725    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.DMNEURAL2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229726    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1229727    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1229728    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1229729    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS8.DMNEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS8.DMNEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                09.23 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1APG6OU
"C:\\predictive-models-project\Workspaces\EMWS8\DMNeural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1APG6OU new;
MPRINT(EM_DIAGRAM):   run;
1229753    data EMWS8.DMNeural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMOUTFIT;
1229754    set EMWS8.DMNeural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMOUTFIT;
1229755    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1229756    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
1229756  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1229757    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1229758    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.DMNEURAL2_EMOUTFIT.
NOTE: The data set EMWS8.DMNEURAL2_EMOUTFIT has 1 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229759    proc sort data=EMWS8.DMNeural2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.DMNeural2_EMREPORTFIT nothreads;
1229760    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1229761    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS8.DMNEURAL2_EMREPORTFIT.
NOTE: The data set EMWS8.DMNEURAL2_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229762    %let _EMwarndup = 0;
1229763    %let _EMtargetdup =;
1229764    %let _EMASEtargetdup =;
1229765    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1229766    set EMWS8.DMNeural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMOUTFIT;
1229767    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1229768    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1229769    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1229770    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1229771    end;
MPRINT(EM_DIAGRAM):   end;
1229772    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.DMNEURAL2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1229773    proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=WORK.SUBSETINMETA;
1229774    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1229775    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 21 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229776    proc sort data=EMWS8.DMNeural2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.DMNeural2_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
1229777    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1229778    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS8.DMNEURAL2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1229779    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1229780    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1229781    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1229782    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 19 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229783    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1229784    set EMWS8.DMNeural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_CMeta_TRAIN;
1229785    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1229785  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1229786    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.DMNEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1229787    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1229788    set EMWS8.DMNeural2_TRAIN(keep=
1229789    F_DepVar
1229790    I_DepVar
1229791    P_DepVar0
1229792    P_DepVar1
1229793    R_DepVar0
1229794    R_DepVar1
1229795    _WARN_
1229796    DepVar
1229797    );
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
1229798    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Variable _NORMFMT_ is uninitialized.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.DMNEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.DMNEURAL2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.DMNeural2_21M1LK8 nocol norow
outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.DMNeural2_21M1LK8;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.DMNeural2_21M1LK8(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.DMNeural2_21M1LK8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.DMNeural2_21M1LK8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1234064    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1234065    set EMWS8.DMNeural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_CMeta_TRAIN;
1234066    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1234066  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1234067    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.DMNEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1234068    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1234069    set EMWS8.DMNeural2_VALIDATE(keep=
1234070    F_DepVar
1234071    I_DepVar
1234072    P_DepVar0
1234073    P_DepVar1
1234074    R_DepVar0
1234075    R_DepVar1
1234076    _WARN_
1234077    DepVar
1234078    );
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
1234079    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Variable _NORMFMT_ is uninitialized.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.DMNEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PRINCOMP_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.DMNEURAL2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.DMNeural2_1ZSGCNX nocol norow
outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.DMNeural2_1ZSGCNX;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.DMNeural2_1ZSGCNX(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMCLASSIFICATION WORK.DMNeural2_1ZSGCNX;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.DMNeural2_1ZSGCNX;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.DMNeural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1238354    %let _cn = %sysfunc(getoption(CENTER));
1238355    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1238356    proc print data=EMWS8.DMNeural2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.DMNeural2_EMREPORTFIT noobs label;
1238357    var STAT LABEL TRAIN
1238358    VALIDATE
1238359    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
1238360    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1238361    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1238362    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1238363    run;
 
NOTE: There were 20 observations read from the data set EMWS8.DMNEURAL2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 1211.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1238364    title10;
MPRINT(EM_DIAGRAM):   title10;
1238365    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1238366    proc sort data=EMWS8.DMNeural2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.DMNeural2_EMCLASSIFICATION nothreads;
1238367    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1238368    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.DMNEURAL2_EMCLASSIFICATION.
NOTE: The data set EMWS8.DMNEURAL2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1238369    %let _cn = %sysfunc(getoption(CENTER));
1238370    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1238371    proc print data=EMWS8.DMNeural2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.DMNeural2_EMCLASSIFICATION noobs label;
1238372    var from into pct_row pct_col count percent
1238373    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1238374    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1238375    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1238376    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1238377    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1238378    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1238379    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1238380    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1238381    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1238382    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1238383    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1238384    run;
 
NOTE: There were 8 observations read from the data set EMWS8.DMNEURAL2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 1212.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1238385    title9;
MPRINT(EM_DIAGRAM):   title9;
1238386    title10;
MPRINT(EM_DIAGRAM):   title10;
1238387    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1238388    %let _cn = %sysfunc(getoption(CENTER));
1238389    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1238390    data EMWS8.DMNeural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.DMNeural2_EMEVENTREPORT;
1238391    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1238391  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1238392    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1238392  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1238392  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1238392  ! FALSEEVENT
1238393    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1238393  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1238393  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1238394       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1238395    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1238396    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1238397    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1238398    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1238399    set EMWS8.DMNeural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.DMNeural2_EMEVENTREPORT;
1238400    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.DMNEURAL2_EMEVENTREPORT.
NOTE: The data set EMWS8.DMNEURAL2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1238401    proc print data=EMWS8.DMNeural2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.DMNeural2_EMEVENTREPORT noobs label;
1238402    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1238403    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1238404    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1238405    run;
 
NOTE: There were 2 observations read from the data set EMWS8.DMNEURAL2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 1213.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1238406    title10;
MPRINT(EM_DIAGRAM):   title10;
1238407    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1238408    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1238409    modify DMNeural2_EMRANK;
MPRINT(EM_DIAGRAM):   modify DMNeural2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1238410    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1238411    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1238411  ! ;
MPRINT(EM_DIAGRAM):   run;
1238412    run;
 
NOTE: MODIFY was successful for EMWS8.DMNEURAL2_EMRANK.DATA.
1238413    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
1238414    %let _cn = %sysfunc(getoption(CENTER));
1238415    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1238416    proc print data=EMWS8.DMNeural2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.DMNeural2_EMRANK label noobs;
1238417    var
1238418    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1238419    by
1238420    notsorted DATAROLE
1238421    notsorted TARGET
1238422    notsorted TARGETLABEL
1238423    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1238424    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1238425    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1238426    run;
 
NOTE: There were 40 observations read from the data set EMWS8.DMNEURAL2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 1214.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1238427    title10;
MPRINT(EM_DIAGRAM):   title10;
1238428    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1238429    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1238430    modify DMNeural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify DMNeural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1238431    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1238431  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1238432    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1238432  ! ;
MPRINT(EM_DIAGRAM):   run;
1238433    run;
 
NOTE: MODIFY was successful for EMWS8.DMNEURAL2_EMSCOREDIST.DATA.
1238434    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.DMNeural2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
