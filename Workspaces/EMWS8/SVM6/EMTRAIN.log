MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                09.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O10N7RR6 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O10N7RR6 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1617690    proc freq data=EMWS8.SVM6_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM6_VariableSet noprint;
1617691    table ROLE*LEVEL/out=WORK.SVM6META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM6META;
1617692    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS8.SVM6_VARIABLESET.
NOTE: The data set WORK.SVM6META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1617693    proc print data=WORK.SVM6META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM6META label noobs;
1617694    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1617695    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1617695  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1617695  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
1617696    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1617697    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1617698    run;

NOTE: There were 4 observations read from the data set WORK.SVM6META.
NOTE: The PROCEDURE PRINT printed page 1394.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1617699    title10;
MPRINT(EM_DIAGRAM):   title10;
1617700    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.PRINCOMP_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM6_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM6_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM6_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM6_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM6_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM6_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM6_DepVar_DD 
out=EMWS8.SVM6_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1617747    data WORK.SVM6_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM6_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1617748    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1617749    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1617749  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1617749  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1617750       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1617750  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1617750  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1617751    set EMWS8.SVM6_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM6_DEPVAR_DM( where=(_TYPE_="TARGET"));
1617752    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1617753    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1617754    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1617755    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1617756    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1617757    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1617758    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1617759    end;
MPRINT(EM_DIAGRAM):   end;
1617760    output;
MPRINT(EM_DIAGRAM):   output;
1617761    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM6_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

1617762    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1617763    proc print data=WORK.SVM6_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM6_EVENT noobs label;
1617764    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1617765    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1617766    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1617767    run;

NOTE: There were 1 observations read from the data set WORK.SVM6_EVENT.
NOTE: The PROCEDURE PRINT printed page 1395.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1617768    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
1617769    proc print data = EMWS8.SVM6_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM6_DepVar_DM noobs label;
1617770    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1617771    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
1617772    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1617772  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1617772  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1617773    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1617774    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1617775    run;

NOTE: There were 7 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1396.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1617776    title10;
MPRINT(EM_DIAGRAM):   title10;
1617777    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM6: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM6: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM6: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM6_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM6_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM6_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM6_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1618272    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1618273    * SVM6: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM6: Generation of macros and macro variables;
1618274    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
1618275    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

1618276    %let EMEXCEPTIONSTRING=;
1618277    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1618278    * TRAIN: SVM6;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM6;
1618279    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1618280    %let EM_ACTION = TRAIN;
1618281    %let syscc = 0;
1618282    %macro main;
1618283    
1618284       filename temp catalog 'sashelp.emmodl.svm_macros.source';
1618285       %include temp;
1618286       filename temp;
1618287       %SetProperties;
1618288       %if %upcase(&EM_ACTION) = CREATE %then %do;
1618289           filename temp catalog 'sashelp.emmodl.svm_create.source';
1618290           %include temp;
1618291           filename temp;
1618292           %create;
1618293       %end;
1618294       %else
1618295       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1618296           filename temp catalog 'sashelp.emmodl.svm_train.source';
1618297           %include temp;
1618298           filename temp;
1618299           %train;
1618300       %end;
1618301       %else
1618302       %if %upcase(&EM_ACTION) = REPORT %then %do;
1618303           filename temp catalog 'sashelp.emmodl.svm_report.source';
1618304           %include temp;
1618305           filename temp;
1618306           %report;
1618307       %end;
1618308    
1618309    %mend main;
1618310    
1618311    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
1618313   +%macro SetProperties;
1618314   +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
1618315   +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
1618316   +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
1618317   +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
1618318   +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
1618319   +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
1618320   +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
1618321   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
1618322   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
1618323   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
1618324   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
1618325   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
1618326   +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
1618327   +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
1618328   +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
1618329   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
1618330   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
1618331   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
1618332   +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
1618333   +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
1618334   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
1618335   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
1618336   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
1618337   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
1618338   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
1618339   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
1618340   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
1618341   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
1618342   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
1618343   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
1618344   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
1618345   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
1618346   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
1618347   +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
1618348   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
1618349   +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
1618350   +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
1618351   +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
1618352   +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
1618353   +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
1618354   +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
1618355   +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
1618356   +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
1618357   +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
1618358   +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
1618359   +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
1618360   +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
1618361   +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
1618362   +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
1618363   +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
1618365   +%mend SetProperties;
1618368   +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
1618370   +  %local emclassout emvarout;
1618372   +   proc dmdb batch dmdbcat= _emdmdb
1618374   +   %if &out ne 0 %then %do ;
1618375   +       data=&indata out= _emdmdb &emclassout &emvarout;
1618376   +   %end ;
1618377   +   %else %do ;
1618378   +       data=&indata &emclassout &emvarout;
1618379   +   %end ;
1618381   +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
1618382   +   %if %em_class   ne  %then %do ;
1618383   +       class %EM_CLASS;
1618384   +   %end ;
1618385   +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
1618386   +   %if %em_target ne %then %do ;
1618387   +          target %em_target ;
1618388   +   %end ;
1618389   +   run ;
1618390   +%mend make_dmdb;
1618393   +%macro svm_training(indata=,
1618394   +                    task=,
1618395   +                    classtask=,
1618396   +                    method=,
1618397   +                    outest =,
1618398   +                    outclass =,
1618399   +                    outfit =,
1618400   +                    isValidationSet =,
1618401   +                    testdata =,
1618402   +                    testout =,
1618403   +                    validSource=,
1618404   +                    usecgbydefault=
1618405   +                    );
1618407   +%make_dmdb(indata=&indata, out=1);
1618409   +options debug="nlpitermsg=2";
1618411   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
1618412   +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
1618413   +ods output tun_crt = &EM_USER_TUNINGCRIT;
1618414   +%end;
1618416   +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
1618417   +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
1618418   +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
1618419   +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
1618421   +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
1618422   +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
1618423   +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
1618424   +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
1618427   +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
1618428   +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
1618429   +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
1618430   +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
1618432   +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
1618433   +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
1618434   +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
1618435   +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
1618438   +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
1618439   +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
1618440   +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
1618441   +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
1618444   +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
1618445   +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
1618446   +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
1618447   +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
1618448   +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
1618449   +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
1618450   +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
1618451   +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
1618452   +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
1618453   +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
1618454   +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
1618455   +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
1618459   +proc svm data= _emdmdb
1618460   +         dmdbcat= _emdmdb
1618461   +         nomonitor
1618462   +         outfit= &outfit
1618463   +         outclass= &outclass
1618464   +         outest= &outest
1618465   +         out = _outtrain
1618466   +         maxiter = &_PROPERTY_MAXITER
1618467   +         maxfunc = &_PROPERTY_MAXFUNC
1618468   +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
1618469   +         gconv =   &_PROPERTY_GCONV
1618470   +         absgconv = &_PROPERTY_ABSGCONV
1618471   +         xconv =   &_PROPERTY_XCONV
1618472   +         absxconv = &_PROPERTY_ABSXCONV
1618474   +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
1618475   +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
1618476   +             xscale
1618477   +         %end;
1618478   +         %else %do;
1618479   +             noscale
1618480   +         %end;
1618481   +    %end;
1618482   +    %if &task eq CLASSIFICATION %then %do;
1618483   +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
1618484   +         method= &method
1618485   +        %end;
1618486   +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
1618487   +         method= DQP   qpsize = &_PROPERTY_QPSIZE
1618488   +        %end;
1618489   +        %else %do;
1618490   +         method= &EM_PROPERTY_METHOD
1618491   +        %end;
1618492   +    %end;
1618493   +    %else %do;
1618494   +         method= &method  task=&classtask
1618495   +         /*%if &classtask eq EPS_REG %then %do; */
1618496   +             esp=&_PROPERTY_EPSILON
1618497   +         /*%end;*/
1618498   +    %end;
1618500   +    %if &EM_PROPERTY_KERNEL ne  %then %do;
1618501   +         kernel = &EM_PROPERTY_KERNEL
1618502   +    %end;
1618503   +    %else %do;
1618504   +         kernel = Linear
1618505   +    %end;
1618507   +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
1618509   +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
1618510   +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
1618511   +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
1618512   +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
1618513   +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
1618514   +            tun = &EM_PROPERTY_TUNINGMETHOD
1618515   +        %end;
1618517   +    %end;
1618519   +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
1618520   +         CV  = &EM_PROPERTY_CVMETHOD
1618521   +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
1618522   +         fold = &EM_PROPERTY_CVFOLD
1618523   +         %end;
1618524   +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
1618525   +                testdata = &testdata
1618526   +         %end;
1618527   +    %end;
1618529   +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
1618530   +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
1618531   +    %end;
1618533   +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
1618534   +    &EM_PROPERTY_PRINTOPTION
1618535   +    %end;
1618537   +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
1618538   +    POPTHIS
1618539   +    %end;
1618540   +    ;
1618541   +    var %EM_INPUT %EM_REJECTED;
1618542   +    target %EM_TARGET;
1618544   +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
1618546   +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
1618547   +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
1618548   +             by &_PROPERTY_TUN_C_BY
1618549   +             ;
1618550   +         %end;
1618551   +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
1618552   +             C  &_PROPERTY_USERCVALUE ;
1618553   +         %end;
1618555   +     %end;
1618556   +     %else %do;
1618557   +           C  &_PROPERTY_USERCVALUE ;
1618558   +     %end;
1618561   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
1618563   +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
1618564   +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
1618565   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
1618566   +                  by &_PROPERTY_POLY_TUN_KP1_BY
1618567   +                ;
1618568   +             %end;
1618569   +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
1618570   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
1618571   +             %end;
1618572   +          %end;
1618573   +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
1618574   +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
1618575   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
1618576   +                ;
1618577   +              %end;
1618578   +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
1618579   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
1618580   +              %end;
1618581   +           %end;
1618582   +           %else %do;
1618583   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
1618584   +           %end;
1618585   +    %end;
1618587   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
1618588   +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
1618589   +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
1618590   +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
1618591   +                  by &_PROPERTY_RBF_TUN_KP1_BY
1618592   +                  ;
1618593   +              %end;
1618594   +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
1618595   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
1618596   +              %end;
1618597   +          %end;
1618598   +          %else %do;
1618599   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
1618600   +          %end;
1618601   +    %end;
1618604   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
1618606   +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
1618608   +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
1618609   +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
1618610   +                by &_PROPERTY_SGMD_TUN_KP1_BY
1618611   +             ;
1618612   +             %end;
1618613   +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
1618614   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
1618615   +             %end;
1618617   +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
1618618   +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
1618619   +                by &_PROPERTY_SGMD_TUN_KP2_BY
1618620   +             ;
1618621   +             %end;
1618622   +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
1618623   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
1618624   +             %end;
1618625   +          %end;
1618626   +          %else %do;
1618627   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
1618628   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
1618629   +          %end;
1618630   +    %end;
1618632   +run;
1618633   +%TRAINENDLINE:
1618634   +quit;
1618635   +%mend svm_training;
1618637   +%macro svm_score(indata=,
1618638   +                 inest=,
1618639   +                 infit=,
1618640   +                 inclass=,
The SAS System

1618641   +                 outindata=,
1618642   +                 outscore=,
1618643   +                 targetLevel=
1618644   +                 );
1618647   +%if &TargetLevel eq BINARY %then %do;
1618649   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
1618651   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
1618652   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
1618653   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
1618654   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
1618657   +%do %while(^ %sysfunc(fetch(&dsid)));
1618658   +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
1618659   +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
1618660   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
1618661   +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
1618662   +%end;
1618664   +%let dsid = %sysfunc(close(&dsid));
1618667   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
1618668   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618670   +%do %while(^ %sysfunc(fetch(&dsid)));
1618671   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1618672   +%end;
1618673   +%let dsid = %sysfunc(close(&dsid));
1618675   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
1618676   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618678   +%do %while(^ %sysfunc(fetch(&dsid)));
1618679   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1618680   +%end;
1618681   +%let dsid = %sysfunc(close(&dsid));
1618684   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
1618685   +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
1618686   +run;
1618688   +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
1618689   +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
1618689  !+from a part of %EM_MODEL() macro */
1618691   +data &outscore(drop=_P);
1618692   +      set  &outscore;
1618693   +     if (_P_ < -600) then _p =0;
1618694   +     else _P = 1/(1+EXP((-1)*(_P_)));
1618696   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
1618697   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618698   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
1618700   +%do %while(^ %sysfunc(fetch(&dsid)));
1618701   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
1618702   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
1618703   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
1618704   +       &P_Var = _P;
1618705   +   %end;
1618706   +   %else %do;
1618707   +       &P_Var = 1 - _P;
1618708   +       %let targetNonEvent = &P_LEVEL;
1618709   +   %end;
1618710   +%end;
1618711   +%let dsid = %sysfunc(close(&dsid));
1618713   +%include resifref;
1618715   +run;
1618717   +filename resifref;
1618719   +%end; /* the end of if - targetlevel eq binary */
1618720   +%else %do;
1618722   +/* ----     interval target  ------ */
1618724   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
1618725   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618727   +%do %while(^ %sysfunc(fetch(&dsid)));
1618728   +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1618729   +%end;
1618730   +%let dsid = %sysfunc(close(&dsid));
1618732   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
1618733   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618735   +%do %while(^ %sysfunc(fetch(&dsid)));
1618736   +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1618737   +%end;
1618739   +%let dsid = %sysfunc(close(&dsid));
1618741   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
1618742   +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
1618743   +run;
1618745   +%end; /* end of targetlevel eq interval */
1618748   +%mend svm_score;
1618751   +%macro makeSVMFitStatDs();
1618753   +data &EM_USER_SVMFITDS;
1618754   +     set &EM_USER_SVMFITSTAT;
1618755   +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
1618755  !+noquote))";
1618756   +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
1618756  !+rpt_svmfitstat_label_k_par2, noquote))";
1618757   +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
1618757  !+rpt_svmfitstat_label_k_par3, noquote))";
1618758   +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
1618758  !+ noquote))";
1618759   +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
1618759  !+noquote))";
1618760   +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
1618760  !+rpt_svmfitstat_label_margin, noquote))";
1618761   +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
1618761  !+ noquote))";
1618762   +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
1618762  !+noquote))";
1618763   +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
1618763  !+noquote))";
1618764   +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
1618764  !+noquote))";
1618765   +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
1618765  !+noquote))";
1618766   +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
1618766  !+noquote))";
1618767   +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
1618767  !+rpt_svmfitstat_label_ntrain, noquote))";
1618768   +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
1618768  !+ noquote))";
1618769   +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
1618769  !+ noquote))";
1618770   +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
1618770  !+noquote))";
1618771   +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
1618771  !+rpt_svmfitstat_label_radius, noquote))";
1618772   +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
1618772  !+noquote))";
1618773   +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
1618773  !+noquote))";
1618774   +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
1618774  !+ noquote))";
1618775   +    if _TYPE_ ='_ACCTAB_' then delete;
1618776   +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
1618777   +      _BIAS_= _K_PAR_;
1618778   +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
1618779   +    %end;
1618780   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
1618781   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
1618782   +    %end;
1618783   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
1618784   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
1618785   +    %end;
1618786   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
1618787   +      DROP _K_PAR3_  _L1_;
1618788   +    %end;
1618789   +run;
1618791   +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
1618792   +run;
1618794   +data &EM_USER_SVMFITDS;
1618795   +     set &EM_USER_SVMFITDS;
1618796   +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
1618796  !+;
1618797   +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
1618798   +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
1618798  !+noquote))";
1618799   +     Rename COL1 = Train;
1618800   +     if _NAME_ = '_ACCU_' then delete;
1618801   +run;
1618803   +%mend makeSVMFitStatDs;
1618805   +%macro svm_fitstat(validSource=);
1618807   +%EM_FITSTAT(trainDs = work._tmp_scored_train,
1618808   +            %if &_validSource= VALIDSET %then %do;
1618809   +                validDs=work._tmp_scored_test,
1618810   +                testDs=,
1618811   +            %end;
1618812   +            %else %if &_validSource= TESTSET %then %do;
1618813   +                validDs=,
1618814   +                testDs=work._tmp_scored_test,
1618815   +            %end;
1618816   +            decdata=&EM_DEC_DECDATA,
1618817   +            decmeta=&EM_DEC_DECMETA,
1618818   +            freqvar=, df=,
1618819   +            outfit=&EM_DATA_EMOUTFIT);
1618821   +data &EM_DATA_EMOUTFIT;
1618822   +     set &EM_DATA_EMOUTFIT;
1618823   +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
1618823  !+_SBC_; /* Because of DF */
1618824   +run;
1618825   +%mend svm_fitstat;
1618827   +/*----------------------------------------------------------------------------------
1618827  !+-----
1618828   +   OUTEST data set
1618830   +                                                       APRTMNT_  APRTMNT_   TELIND_
1618830  !+  TELIND_
1618831   + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
1618831  !+     2_
1618833   +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
1618833  !+   0.97609
1618834   +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
1618834  !+   0.15280
1618835   +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
1618835  !+  -0.07311
1618837   +=-----------------------------------------------------------------------------------
1618837  !+--*/
1618838   +/* this is not used, generate score code directly for the case of linear svm */
1618839   +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
1618839  !+Residual=);
1618841   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
1618843   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
1618844   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
1618845   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
1618846   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
1618847   +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
1618849   +%do %while(^ %sysfunc(fetch(&dsid)));
1618850   +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
1618851   +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
1618852   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
1618853   +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
1618854   +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
1618855   +%end;
1618856   +%let dsid = %sysfunc(close(&dsid));
1618858   +data _cmeta;
1618859   +    set &ColumnsMeta;
1618860   +    NAME = upcase(strip(NAME));
1618861   +run;
1618863   +data _tmpclass;
1618864   +       set &outclass;
1618865   +   _VAR_ = upcase(strip(_VAR_));
1618866   +run;
1618868   +proc sql;
1618869   +create table _outclass as
1618870   +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
1618871   +  from  _tmpclass, _cmeta
1618872   +  where _tmpclass._VAR_ = _cmeta.NAME;
1618873   +run;
1618875   +data _outclass;
1618876   +    set _outclass;
1618877   +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
1618878   +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
1618879   +run;
1618880   +data _meands;
1618881   +    set &outest;
1618882   +    if _TYPE_='_MEAN_';
1618883   +run;
1618885   +/*
1618886   +data _null_;
1618887   +    set &outest;
1618888   +    if _TYPE_='_PARMS_';
1618889   +    call symput('bias', _STDEV_ );
1618890   +    call symput('intercept', _MEAN_ );
1618891   +run;
1618892   +*/
1618894   +filename  _File_ "&File";
1618895   +data _null_;
1618896   +    FILE _File_;
1618897   +    length _line $500;
1618898   +    drop _line;
1618900   +    put ' ';
1618901   +    put '/*-------------------------------------------------*/';
1618902   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
1618903   +    put '/*-------------------------------------------------*/';
1618904   +    put ' ';
1618906   +    put 'length _warn_ $ 4;';
1618907   +    put 'label _warn_ = "Warnings";';
1618908   +    put 'length _svm_uname $32;';
1618909   +    put 'DROP _svm_uname ;';
1618911   +  dsid = open("work._outclass");
1618912   +    if dsid then do;
1618913   +          oldvname ='';
1618914   +          do while(not fetch(dsid));
1618915   +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
1618916   +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
1618917   +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
1618918   +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
1618919   +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
1618920   +             *put 'vtype =' vtype;
1618921   +             *put 'vformat=' vformat;
1618923   +             if oldname ne vname then do;
1618924   +                 if vtype = 'N' then do;
1618925   +                     if vformat eq ' ' then do;
1618926   +                        put '_svm_uname = put(' vname ', Best12.);';
1618927   +                     end; else do;
1618928   +                        put '_svm_uname = put(' vname ',' vformat ');';
1618929   +                     end;
1618930   +                  end;
1618931   +                  else do;
1618932   +                     if vformat eq ' ' then do;
1618933   +                        put '_svm_uname = ' vname ' ;';
1618934   +                     end; else do;
1618935   +                        put '_svm_uname = put(' vname ',' vformat ');';
1618936   +                     end;
1618937   +                  end;
1618938   +                  put '%DMNORMIP(_svm_uname);';
1618939   +              end; /* end of oldname ne vname */
1618941   +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
1618942   +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
1618943   +              put _line;
1618944   +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
1618944  !+;';
1618945   +              oldname = vname;
1618946   +          end;
1618948   +     end;
1618949   +rc=close(dsid);
1618951   +dsid = open("&outest");
1618952   +    if dsid then do;
1618953   +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
1618953  !+noquote))"  "------ */";
1618954   +          ncol = attrn(dsid, 'NVARS');
1618955   +          do i=4 to ncol;
1618956   +             vname = upcase(trim(left(varname(dsid,i))));
1618957   +              do while(not fetch(dsid));
1618958   +                  type = strip(getvarc(dsid,2));
1618959   +                  select(type);
1618960   +                      when('_MEAN_')  mean =  getvarn(dsid, i);
1618961   +                      when('_STDEV_') std  =  getvarn(dsid, i);
1618962   +                      when('_PARMS_') coeff = getvarn(dsid, i);
1618963   +                  otherwise;
1618964   +                  end;
1618965   +              end; /* end of do-while*/
1618966   +              *put '+' coeff '*(' vname '-' mean ')/' std;
1618967   +              if i=4 then  do; put '_P_ =(' coeff ; end;
1618968   +              else if i=5 then do; put '+' coeff ');' ; end;
1618969   +              else do;
1618970   +                      tmpvar = '_TMPVAR'||strip(i);
1618971   +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
1618972   +                      put 'else ' tmpvar '=' vname ';';
1618973   +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
1618974   +                      put 'drop  ' tmpvar ';';
1618975   +              end;
1618976   +              rc=rewind(dsid);
1618977   +         end; /* end of  do i=6 to &nvars; */
1618978   +         put ';';
1618979   +     end;
1618980   +    rc=close(dsid);
1618981   + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
1618981  !+"------ */";
1618983   +%if &TargetLevel eq BINARY %then %do;
1618985   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
1618986   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1618987   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
1618989   +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
1618990   +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
1618992   +%do %while(^ %sysfunc(fetch(&dsid)));
1618993   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
1618994   +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
1618995   +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
1618996   +       put " &P_Var = _P;";
1618997   +   %end;
1618998   +   %else %do;
1618999   +       put " &P_Var = 1 - _P;";
1619000   +   %let targetNonEvent = &P_LEVEL;
1619001   +   %end;
1619002   +%end;
1619003   +%let dsid = %sysfunc(close(&dsid));
1619005   +%if &Residual = Y %then %do;
1619007   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
1619007  !+"------ */";
1619009   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
1619010   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619011   +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
1619013   +   %do %while(^ %sysfunc(fetch(&dsid)));
1619014   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
1619015   +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
1619016   +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
1619017   +       put " &R_Var = 1 - _P;";
1619018   +   %end;
1619019   +   %else %do;
1619020   +       put " &R_Var = 0 - (1 - _P);";
1619021   +   %end;
1619022   +   %end;
1619023   +   %let dsid = %sysfunc(close(&dsid));
1619024   +%end;
1619025   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
1619025  !+"------ */";
1619027   +    put 'length _FORMAT_VAR $200;';
1619028   +    put 'length _TARGNOR $%DMNORLEN; ';
1619029   +    put 'DROP _FORMAT_VAR _TARGNOR;';
1619030   +    %if &TargetFormat ne  %then %do;
1619031   +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
1619032   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
1619033   +    %end;
1619034   +    %else %do;
1619035   +    %if &TargetType  = N  %then %do;
1619036   +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
1619037   +       %end;
1619038   +       %else %do;
1619039   +    put "_FORMAT_VAR= &TargetVar;";
1619040   +       %end;
1619041   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
1619042   +    %end;
1619044   +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
1619045   +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
1619046   +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
1619048   +    %do %while(^ %sysfunc(fetch(&dsid)));
1619049   +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
1619050   +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
1619051   +        %let qF_var_label = %str(%"&F_var_label%");
1619052   +    put "&F_var = _TARGNOR ;";
1619053   +    put "label &F_var = &qF_Var_label;";
1619054   +    %end;
1619055   +    %let dsid = %sysfunc(close(&dsid));
1619057   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
1619057  !+"------ */";
1619059   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
1619060   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619061   +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
1619063   +%do %while(^%sysfunc(fetch(&dsid)));
1619064   +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
1619065   +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
1619066   +   %let qI_var_label = %str(%"&I_var_label%");
1619067   +   %let qTargetEvent = %str(%"&targetEvent%");
1619068   +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
1619069   +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
1619070   +       put " else &I_Var  =  &qtargetNonEvent ;";
1619071   +       put " label &I_var = &qI_var_label;";
1619072   +%end;
1619073   +%let dsid = %sysfunc(close(&dsid));
1619075   +%end;  /* end of TargetLevel= Binary */
1619077   +%else %if &TargetLevel eq INTERVAL %then %do;
1619079   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
1619080   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619081   +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
1619083   +%do %while(^ %sysfunc(fetch(&dsid)));
1619084   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
1619085   +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
1619086   +   %let qP_label = %str(%"&P_label%");
1619087   +    put " &P_Var = _P_;";
1619088   +    put " label &P_Var = &qP_label;";
1619089   +%end;
1619090   +%let dsid = %sysfunc(close(&dsid));
1619092   +%if &Residual = Y %then %do;
1619094   +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
1619094  !+"------ */";
1619096   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
1619097   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619098   +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
1619100   +   %do %while(^ %sysfunc(fetch(&dsid)));
1619101   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
1619102   +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
1619103   +     %let qR_label = %str(%"&R_label%");
1619104   +       put " &R_Var = &TargetVar - &P_var;";
1619105   +       put " label &R_Var = &qR_label;";
1619106   +   %end;
1619107   +   %let dsid = %sysfunc(close(&dsid));
1619108   +%end;
1619110   +%end;   /* end of TargetLevel= Interval */
1619112   +  put "/*------------------------------------------------------------*/";
1619113   +proc datasets lib=work nolist;
1619114   + delete _tmpclass _cmeta _outclass;
1619115   +run;
1619116   +run;
1619118   +filename  _File_;
1619120   +%mend gen_score;
1619122   +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
1619123   +%global &nLevel;
1619124   +proc dmdb batch data=&indata
1619125   +classout=_tmp_dmdbout;
1619126   +class &target;
1619127   +run;
1619128   +data _tmp_dmdbout;
1619129   +    set _tmp_dmdbout;
1619130   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
1619131   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
1619132   +run;
1619133   +data _null_;
1619134   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
1619135   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
1619136   +    %let dsid = %sysfunc(close(&dsid));
1619137   +     call symput("&nLevel", put(&_obs, Best12.));
1619138   +run;
1619140   +proc datasets lib=work nolist;
1619141   +     delete _tmp_dmdbout;
1619142   +run;
1619143   +quit;
1619144   +%Mend CheckBinaryTargetLevel;
1619147   +%macro getNObs(inds=, nobs=);
1619148   +    %global &nobs;
1619149   +    data _null_;
1619150   +        set &inds end=eof;
1619151   +        if eof then call symput("&nobs", _N_);
1619152   +    run;
1619153   +    quit;
1619154   +%mend  getNObs;
1619158   +%macro makeAlphaDs(target=, cmeta=);
1619160   + %let isOBSIndex= N;
1619161   + %let dsid = %sysfunc(open(&cmeta));
1619162   + %let vn_name =%sysfunc(varnum(&dsid, NAME));
1619163   + %do %while(^%sysfunc(fetch(&dsid)));
1619164   +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
1619165   +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
1619166   + %end;
1619167   + %let dsid = %sysfunc(close(&dsid));
1619169   +data &EM_USER_OUTALPHA;
1619170   +     set _sample_train;
1619171   +     set _outtrain(keep=_ALPHA_ _BOUND_);
1619172   +     %if &isOBSIndex= N %then %do;
1619173   +     keep _OBS_ _ALPHA_ _BOUND_ &target;
1619174   +     %end;
1619175   +     %else %do;
1619176   +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
1619177   +     %end;
1619178   +run;
1619180   +data &EM_EXPORT_TRAIN;
1619181   +     length _OBS_ 8;
1619182   +     set &EM_EXPORT_TRAIN;
1619183   +     _OBS_ = _N_;
1619184   +run;
1619186   +data &EM_EXPORT_TRAIN(Drop=_OBS_);
1619187   +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
1619188   +     by _OBS_;
1619189   +     if _ALPHA_ =. then _ALPHA_=0;
1619190   +     if _BOUND_ ="" then _BOUND_="_LBC";
1619191   +run;
1619193   +data &EM_USER_OUTALPHA;
1619194   +   set &EM_USER_OUTALPHA;
1619195   +   if _ALPHA_ = 0 then delete;
1619196   +   %if &isOBSIndex= N %then %do;
1619197   +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
1619198   +   rename _OBS_ = _dataobs_;
1619199   +   %end;
1619200   +   %else %do;
1619201   +   drop _OBS_;
1619202   +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
1619202  !+noquote))";
1619203   +   %end;
1619204   +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
1619205   +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
1619206   +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
1619207   +   run;
1619209   +%mend makeAlphaDs;
1619212   +%macro makeTunData();
1619213   +data &EM_USER_TUNINGCRIT;
1619214   +    set &EM_USER_TUNINGCRIT;
1619215   +    Drop N;
1619216   +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
1619217   +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
1619218   +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
1619219   +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
1619220   +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
1619221   +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
1619222   +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
1619222  !+noquote))";
1619223   +run;
1619224   +%mend makeTunData;
1619226   +/*------------------ Score Code Generation with Proc SVMScore
1619226  !+----------------------  */
1619229   +%macro score_code(TargetLevel=, type=);
1619231   +%let _inoutest = WORK._inoutest ;
1619232   +%let _inoutfit = WORK._inoutfit ;
1619233   +%let _inoutclass = WORK._inoutclass;
1619235   +%if &type eq FLOW %then %do;
1619236   +    %let _inoutest = &EM_USER_OUTEST;
1619237   +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
1619238   +    %let _inoutclass = &EM_USER_OUTCLASS;
1619239   +%end;
1619240   +%else %do;
1619241   +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
1619241  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
1619242   +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
1619242  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
1619243   +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
1619243  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
1619244   +%end;
1619246   +%let emscoreout = %str(&)%str(em_score_output);
1619249   +%if &type eq FLOW %then %do;
1619250   +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
1619251   +%end;
1619252   +%else %do;
1619253   +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
1619254   +%end;
1619256   +data _null_;
1619257   +    FILE _File_ MOD;
1619259   +    put ' ';
1619260   +    put '/*-------------------------------------------------*/';
1619261   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
1619261  !+;
1619262   +    put '/*-------------------------------------------------*/';
1619263   +    put ' ';
1619265   +%if &TargetLevel eq BINARY %then %do;
1619267   +/*%put &emscoreout;  */
1619269   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
1619270   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619272   +%do %while(^ %sysfunc(fetch(&dsid)));
1619273   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1619275   +%end;
1619276   +%let dsid = %sysfunc(close(&dsid));
1619278   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
1619279   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619281   +%do %while(^ %sysfunc(fetch(&dsid)));
1619282   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
1619284   +%end;
1619285   +%let dsid = %sysfunc(close(&dsid));
1619288   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
1619288  !+inclass=&_inoutclass";
1619289   +    %if &type eq FLOW %then %do;
1619290   +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
1619291   +    %end;
1619292   +    %else %do;
1619293   +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
1619294   +    %end;
1619295   +    put ";";
1619296   +    put "run;";
1619299   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
1619301   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
1619302   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
1619303   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
1619304   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
1619307   +%do %while(^ %sysfunc(fetch(&dsid)));
1619308   +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
1619309   +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
1619310   +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
1619311   +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
1619312   +%end;
1619314   +%let dsid = %sysfunc(close(&dsid));
1619316   +    put "data &emscoreout(drop=_P);";
1619317   +    put "     set &emscoreout;";
1619318   +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
1619319   +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
1619321   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
1619322   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619323   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
1619325   +%do %while(^ %sysfunc(fetch(&dsid)));
1619326   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
1619327   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
1619328   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
1619329   +    put " &P_Var = _P ;";
1619330   +   %end;
1619331   +   %else %do;
1619332   +    put " &P_Var = 1 - _P ;";
1619333   +    %let targetNonEvent = &P_LEVEL;
1619334   +   %end;
1619335   +%end;
1619336   +%let dsid = %sysfunc(close(&dsid));
1619338   +%end; /* the end of if - targetlevel eq binary */
1619339   +%else %do;
1619341   +/* ----     interval target  ------ */
1619343   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
1619344   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619346   +%do %while(^ %sysfunc(fetch(&dsid)));
1619347   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
1619348   +%end;
1619349   +%let dsid = %sysfunc(close(&dsid));
1619351   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
1619352   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
1619353   +%do %while(^ %sysfunc(fetch(&dsid)));
1619354   +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
1619355   +%end;
1619356   +%let dsid = %sysfunc(close(&dsid));
1619358   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
1619358  !+inclass=&_inoutclass ";
1619359   +    %if &type eq FLOW %then %do;
1619360   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
1619361   +    %end;
1619362   +    %else %do;
1619363   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
1619364   +    %end;
1619365   +    put ";";
1619367   +%end; /* end of targetlevel eq interval */
1619369   +run;
1619370   +filename  _File_;
1619371   +%mend score_code;
1619374   +%macro makeDeltaCode(TargetLevel=);
1619375   +*--- Build Code to Modify Metadata ---*;
1619376   +filename X "&EM_FILE_CDELTA_TRAIN";
1619378   +/* modify columns meta */
1619379   +data _null_;
1619380   +    file X;
1619381   +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
1619382   +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
1619383   +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
1619384   +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
1619385   +run;
1619386   +%mend makeDeltaCode;
1619388   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
1619389   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
1619391   +    %do;
1619392   +    %let m_data      = &data;
1619393   +    %let m_decdata   = &decdata;
1619394   +    %let m_decmeta   = &decmeta;
1619395   +    %let m_noresfile = &noresfile;
1619396   +    %let m_resfile   = &resfile;
1619397   +    dm "afa c=sashelp.emutil.decidecode.scl";
1619398   +  %end;
1619399   +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
1619400   +%Macro Train;
1619403   +/*%let SVM_MAXNUMOBS = 10000; */
1619404   +/*%let EM_SCORECODEFORMAT=PROC;*/
1619405   +/*%let SVM_SAMPLESIZE = 100; */
1619407   +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
1619408   +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
1619409   +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
1619410   +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
1619411   +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
1619412   +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
1619413   +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
1619416   +/*---------- Check the input data set ---------------------*/
1619417   +%if &EM_IMPORT_DATA eq  %then %do;
1619418   +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
1619419   +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
1619420   +%GOTO ENDLINE;
1619421   +%end;
1619423   +/*----------- Check the target variable  -------------------*/
1619425   +%let _targetVar= %EM_TARGET;
1619426   +%let _targetlevel = %EM_TARGET_LEVEL;
1619428   +%if &_targetVar eq  %then %do;
1619429   +%PUT ERROR:THERE IS NO VALID TARGET;
1619430   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
1619431   +%GOTO ENDLINE;
1619432   +%end;
1619434   +%let K = %SCAN(&_targetVar, 2, %STR( ));
1619435   +%if &K > %then %do;
1619436   +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
1619437   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
1619438   +%GOTO ENDLINE;
1619439   +%end;
1619441   +/* check actual num of target levels */
1619442   +%if (&_targetLevel eq BINARY) %then %do;
1619443   +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
1619443  !+nLevel=_nTargetLevel );
1619444   +    %if &_nTargetLevel  > 2 %then %do;
1619445   +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
1619445  !+;
1619446   +    %GOTO ENDLINE;
1619447   +    %end;
1619448   +%end;
1619449   +%else %do;
1619450   +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
1619450  !+ SUPPORTS ONLY BINARY TARGET;
1619451   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
1619452   +      %GOTO ENDLINE;
1619453   +%end;
1619455   +%let _PROPERTY_TASK = ;
1619456   +%let _PROPERTY_CLASSTASK = ;
1619457   +%let _PROPERTY_METHOD = ;
1619458   +%if (&_targetLevel eq BINARY) %then %do;
1619459   +      %let _PROPERTY_TASK = CLASSIFICATION;
1619460   +      %let _PROPERTY_CLASSTASK = C_CLAS;
1619461   +      %let _PROPERTY_METHOD = LINSVM;
1619462   +%end;  /* end of %if (&_targetLevel eq BINARY)  */
1619463   +%else %if (&_targetLevel eq INTERVAL) %then %do;
1619464   +      /* for interval target */
1619465   +      %let _PROPERTY_TASK = REGRESSION;
1619466   +      %let _PROPERTY_CLASSTASK = L2_REG;
1619467   +      %let _PROPERTY_METHOD = LSSVM;
1619468   +%end; %else %do;
1619469   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
1619470   +      %GOTO ENDLINE;
1619472   +%end;
1619475   +%let _isValidationSet =NO;
1619476   +%let _testdata =;
1619477   +%let _testout =;
1619478   +%let _validSource=;
1619480   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
1619481   +        %let _isValidationSet = YES;
1619482   +        %let _testdata = &EM_IMPORT_VALIDATE;
1619483   +        %let _testout = &EM_EXPORT_VALIDATE;
1619484   +        %let _validSource= VALIDSET;
1619485   +%end;
1619486   +%else %do;
1619487   +        %if &EM_IMPORT_TEST  ne  %then %do;
1619488   +         %let _isValidationSet = YES;
1619489   +         %let _testdata = &EM_IMPORT_TEST;
1619490   +         %let _testout = &EM_EXPORT_TEST;
1619491   +         %let _validSource= TESTSET;
1619492   +         %end;
1619493   +%end;
1619495   +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
1619496   +    %if &_isValidationSet eq NO  %then %do;
1619497   +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
1619498   +    %GOTO ENDLINE;
1619499   +    %end;
1619500   +%end;
1619502   +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
1619503   +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
1619504   +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
1619505   +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
1619506   +%let _num_input_class =
1619506  !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
1619507   +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
1619509   +%if  &_num_input_total < 2 %then %do;
1619510   +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
1619511   +         %goto ENDLINE;
1619512   +         %end;
1619515   +/*
1619516   +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
1619516  !+%then %do;
1619518   +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
1619520   +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
1619521   +         %let  EMEXCEPTIONSTRING =
1619521  !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
1619522   +               %goto endline;
1619523   +    %end;
1619524   +%end;
1619525   +*/
1619527   +/*------ Training ----------------------*/
1619528   +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
1619529   +    %if (&_targetLevel ne INTERVAL) %then %do;
1619530   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
1619530  !+METADATA=&EM_DATA_VARIABLESET,
1619531   +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
1619531  !+INDEX=Y, INDEXNAME=_OBS_ );
1619532   +    %end;
1619533   +    %else %do;
1619534   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
1619534  !+METADATA=&EM_DATA_VARIABLESET,
1619535   +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
1619535  !+INDEX=Y, INDEXNAME=_OBS_ );
1619536   +    %end;
1619537   +%end;
1619538   +%else %do;
1619539   +data _sample_train;
1619540   +    length _OBS_ 8.;
1619541   +    set &EM_IMPORT_DATA;
1619542   +    _OBS_ = _N_;
1619543   +run;
1619544   +%end;
1619545   +%let _usecgbydefault=;
1619546   +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
1619547   +    %let _usecgbydefault = N;
1619548   +    %getNObs(inds=_sample_train, nobs=_trainnobs);
1619549   +    %if &_trainnobs > 3000   %then %do;
1619550   +    %let _usecgbydefault = Y;
1619551   +   %end;
1619552   +%end;
1619554   +%svm_training(indata=_sample_train,
1619555   +              task=&_PROPERTY_TASK,
1619556   +              classtask =&_PROPERTY_CLASSTASK,
1619557   +              method = &_PROPERTY_METHOD,
1619558   +              outest=&EM_USER_OUTEST,
1619559   +              outfit=&EM_USER_SVMFITSTAT,
1619560   +              outclass=&EM_USER_OUTCLASS,
1619561   +              isValidationSet=&_isValidationSet,
1619562   +              testdata =&_testdata,
1619563   +              testout =&_testout,
1619564   +              validSource=&_validSource,
1619565   +              usecgbydefault=&_usecgbydefault
1619566   +              );
1619567   +run;
1619569   +%svm_score(indata=&EM_IMPORT_DATA,
1619570   +             inest=&EM_USER_OUTEST,
1619571   +             infit=&EM_USER_SVMFITSTAT,
1619572   +             inclass=&EM_USER_OUTCLASS,
1619573   +             outindata=  _tmpTrain ,
1619574   +             outscore = &EM_EXPORT_TRAIN,
1619575   +             targetLevel =&_targetLevel
1619576   +            );
1619578   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
1619579   +  %svm_score(indata=&EM_IMPORT_VALIDATE,
1619580   +             inest=&EM_USER_OUTEST,
1619581   +             infit=&EM_USER_SVMFITSTAT,
1619582   +             inclass=&EM_USER_OUTCLASS,
1619583   +             outindata=_tmpValid,
1619584   +             outscore = &EM_EXPORT_VALIDATE,
1619585   +             targetLevel =&_targetLevel
1619586   +            );
1619588   +%end;
1619589   +%if &EM_IMPORT_TEST  ne  %then %do;
1619590   +  %svm_score(indata=&EM_IMPORT_TEST,
1619591   +             inest=&EM_USER_OUTEST,
1619592   +             infit=&EM_USER_SVMFITSTAT,
1619593   +             inclass=&EM_USER_OUTCLASS,
1619594   +             outindata=_tmpTest,
1619595   +             outscore= &EM_EXPORT_TEST,
1619596   +             targetLevel =&_targetLevel
1619597   +            );
1619599   +%end;
1619601   +/*------------------ run decision codes ----------------------*/
1619603   +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
1619604   +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
1619606   +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
1619607   +filename _sffile_  "&decfile";
1619608   +%if %sysfunc(fexist(_sffile_)) %then
1619609   +%do;
1619610   +    data &EM_EXPORT_TRAIN;
1619611   +       set &EM_EXPORT_TRAIN;
1619612   +           %include _sffile_;
1619613   +    run;
1619614   +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
1619615   +    data &EM_EXPORT_VALIDATE;
1619616   +       set  &EM_EXPORT_VALIDATE;
1619617   +           %include _sffile_;
1619618   +    %end;
1619619   +    %if &EM_IMPORT_TEST  ne  %then %do;
1619620   +        data &EM_EXPORT_TEST;
1619621   +            set  &EM_EXPORT_TEST;
1619622   +            %include _sffile_;
1619623   +        run;
1619624   +    %end;
1619625   +%let rc = %sysfunc(fdelete(_sffile_));
1619626   +%end;
1619627   +filename _sffile_ ;
1619629   +%score_code(TargetLevel =&_targetLevel, type=FLOW);
1619630   +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
1619632   +%makeDeltaCode(TargetLevel =&_targetLevel);
1619635   +/* %put SYSError =  &SYSERR;  */
1619637   +%if &SYSERR > 0 %then %do;
1619638   +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
1619639   +      %goto ENDLINE;
1619640   +%end;
1619642   +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
1619642  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
1619642  !+Cutoff=0.5, Residual=Y)
1619643   +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
1619643  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
1619643  !+Cutoff=0.5, Residual=N)
1619644   +*/
1619647   +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
1619647  !+RESIDUALS=Y);
1619649   +/*------ Make data for report data ----------------*/
1619650   +%makeSVMFitStatDs;
1619652   +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
1619654   +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
1619656   +proc datasets lib = work nolist;
1619657   +      delete _outtrain  _sample_train ;
1619658   +run;
1619660   +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
1619661   +%if &_svnobs < 1   %then %do;
1619662   +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
1619663   +      %goto endline;
1619664   +%end;
1619667   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
1619668   +%makeTunData();
1619669   +%end;
1619672   +%ENDLINE:
1619674   +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.PRINCOMP_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
1619676   +/*------------------------------------------------------------------
1619677   +  MACRO EXPLOREOBS
1619679   +  SUPPORT:  SASDHD - David Duling
1619680   +  PRODUCT:  Enterprise Miner
1619682   +  DESCRIPTION:
1619683   +  Generates maximum and default numbers of observations to
1619684   +  download for visualization depending on the record length.
1619686   +  Values were determined by trial and error using typical
1619687   +  Windows workstation configurations.
1619689   +  Discrete sets of values are returned so that user experience
1619690   +  will be consitent with similar sized data sets.
1619692   +  These macro variables are set:
1619693   +  _exploreobs_max -- maximum number of obs downloadable
1619694   +  _exploreobs_def -- default number of obs to be downloaded
1619695   +  _exploreobs_recl - record length.  Might be useful for reporting.
1619697   +  Use the _exploreobs_max to set limit the GUI selection of
1619698   +  observations for downloading.  The GUI selection for obs
1619699   +  could be reduced to "Default" and "Max".
1619701   +  Parameters
1619702   +  data=   libname.memname of input data
1619703   +  vars=   subset list of variables.
1619704   +          downloading 1 out of 500 really does work like downloading
1619705   +          1 out of 1 vars.  Users may select a subset of vars for
1619706   +                   visualizations.  Pass in the list as space delimited
1619707   +          var names.  If vars is not specified, the record length
1619708   +          of the entire data will be used.
1619709   +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
1619711   +  Control
1619712   +  Users may control the values by entering these macro variables.
1619713   +            EM_EXPLOREOBS_MAX
1619714   +            EM_EXPLOREOBS_DEFAULT
1619715   +  These values override the computed values.
1619717   +  Debugging
1619718   +  %let _exploreobs_debug=1 ;
1619719   +--------------------------------------------------------------------
1619720   +  HISTORY: 20APR2004. sasdhd. pushed.
1619721   +           18DEC2004. sasdhd. S0280556.
1619722   +           07SEP2007. sasdhd. HK1009586
1619723   +--------------------------------------------------------------------*/
1619725   +%macro exploreobs(data=,vars=, nbytes=) ;
1619727   +   /*--- variable definitions ---*/
1619728   +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
1619729   +   %local xobs xvars xlen vlen xi vname vlist ;
1619730   +   %local _exp_source _exp_notes ;
1619732   +   /*--- USER definitions ---*/
1619733   +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
1619735   +   /*--- variable intializations ---*/
1619736   +   %let _exploreobs_max=0 ;
1619737   +   %let _exploreobs_def=0 ;
1619738   +   %let _exploreobs_recl=0 ;
1619739   +   %let xvars= 0 ;
1619740   +   %let xlen = 0 ;
1619741   +   %let xobs = 0 ;
1619743   +   /*--- data error checks ---*/
1619744   +   %if "&data" eq "" %then %do ;
1619745   +            %put NOTE: DATA is not specified. ;
1619746   +            %goto term ;
1619747   +      %end ;
1619749   +   %let dsid=%sysfunc(open(&data)) ;
1619750   +   %if not &dsid %then %do ;
1619751   +            %put NOTE: DATA &data is not available. ;
1619752   +            %goto term ;
1619753   +      %end ;
1619755   +   /*--- if a vars list exists generate a subset ---*/
1619756   +   %if &vars ne %then %do ;
1619757   +         %let dsid=%sysfunc(close(&dsid)) ;
1619758   +         %if &_exploreobs_debug ne 1 %then %do ;
1619759   +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
1619760   +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
1619761   +                  options nosource nonotes ;
1619762   +         %end ;
1619763   +         data _exploreobs_temp_data ;
1619764   +         set &data(obs=0) ;
1619765   +          keep &vars ;
1619766   +         run;
1619767   +         %if &_exploreobs_debug ne 1 %then %do ;
1619768   +                  options &_exp_source &_exp_notes ;
1619769   +         %end ;
1619770   +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
1619771   +         %if &dsid eq 0 %then %do ;
1619772   +                  %put NOTE: Sample is not available.;
1619773   +                  %goto term ;
1619774   +            %end ;
1619775   +      %end ;
1619777   +   /*--- get var attributes ---*/
1619778   +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
1619779   +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
1619780   +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
1619781   +   %let dsid= %sysfunc(close(&dsid)) ;
1619783   +   /*--- set default and max obs ---*/
1619784   +   %let _exploreobs_recl=%eval(&xlen) ;
1619785   +   %if &_exploreobs_recl eq 0 %then %do ;
1619786   +             %let _exploreobs_max= 0 ;
1619787   +             %let _exploreobs_def= 0 ;
1619788   +             %goto term ;
1619790   +   %end ;
1619791   +   %else
1619792   +   %if &_exploreobs_recl le 32 %then %do ;
1619793   +             %let _exploreobs_max=100000 ;
1619794   +             %let _exploreobs_def= 10000 ;
1619795   +   %end ;
1619796   +   %else
1619797   +   %if &_exploreobs_recl le 128 %then %do ;
1619798   +             %let _exploreobs_max=60000 ;
1619799   +             %let _exploreobs_def= 6000 ;
1619800   +   %end ;
1619801   +   %else
1619802   +   %if &_exploreobs_recl lt 1000 %then %do ;
1619803   +             %let _exploreobs_max=20000 ;
1619804   +             %let _exploreobs_def= 2000 ;
1619805   +   %end ;
1619806   +   %else
1619807   +   %if &_exploreobs_recl lt 5000 %then %do ;
1619808   +             %let _exploreobs_max= 10000 ;
1619809   +             %let _exploreobs_def=  1000 ;
1619810   +   %end ;
1619811   +   %else
1619812   +   %if &_exploreobs_recl lt 20000 %then %do ;
1619813   +             %let _exploreobs_max= 5000 ;
1619814   +             %let _exploreobs_def=  500 ;
1619815   +   %end ;
1619816   +   %else %do ;
1619817   +             %let _exploreobs_max= 1000 ;
1619818   +             %let _exploreobs_def=  200 ;
1619819   +   %end ;
1619821   +   /*--- Users options ---*/
1619822   +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
1619823   +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
1619824   +   %end;
1619825   +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
1619826   +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
1619827   +   %end;
1619829   +    /*--- S0868273 ---*/
1619830   +    %if "&NBYTES" ne "" %then %do;
1619831   +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
1619832   +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
1619833   +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
1619833  !+&EM_EXPLOREOBS_MAX));
1619834   +       %end;
1619836   +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
1619837   +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
1619838   +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
1619838  !+&EM_EXPLOREOBS_DEFAULT));
1619839   +          %if ^&_exploreobs_def %then
1619840   +              %let _exploreobs_def = 1;
1619842   +       %end;
1619843   +    %end;
1619845   +   /*--- Terminate ---*/
1619846   +   %term:
1619848   +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
1619848  !+max=&_exploreobs_max : def= &_exploreobs_def ;
1619849   +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.PRINCOMP_TRAIN;
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM6_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM6_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.PRINCOMP_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.PRINCOMP_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.PRINCOMP_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.PRINCOMP_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 
PC_5 PC_6 PC_7 PC_8 PC_9 Year_Birth _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 21 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM6_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM6_SVMFITSTAT outclass= EMWS8.SVM6_OUTCLASS outest= EMWS8.SVM6_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5 
PC_6 PC_7 PC_8 PC_9 Year_Birth
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM6_OUTCLASS has 20 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 18 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
NOTE: At least one element of the (projected) gradient is greater than 1e-3.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 29 variables.
NOTE: The data set EMWS8.SVM6_OUTEST has 5 observations and 23 variables.
NOTE: The data set EMWS8.SVM6_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 62319
*** Time for Optimization: 760
*** Total Processing Time: 760
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM6_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 1397-1401.
NOTE: PROCEDURE SVM used (Total process time):
      real time           12:39.83
      cpu time            12:37.66
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.PRINCOMP_TRAIN inest=EMWS8.SVM6_OUTEST 
infit=EMWS8.SVM6_SVMFITSTAT inclass=EMWS8.SVM6_OUTCLASS 
out=EMWS8.SVM6_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM6_TRAIN has 2374 observations and 68 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 02.13 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM6_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM6_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas.
1619852   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
1619853   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
1619854   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
1619855   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
1619856   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
1619857   +if
1619858   + F_DepVar ne '1'
1619859   +and F_DepVar ne '0'
1619860   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
1619861   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
1619862   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
1619863   +end;
MPRINT(SVM_SCORE):   end;
1619864   +else do;
MPRINT(SVM_SCORE):   else do;
1619865   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
1619866   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
1619867   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
1619868   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
1619869   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
1619870   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
1619871   +end;
MPRINT(SVM_SCORE):   end;
1619872   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM6_TRAIN.
NOTE: The data set EMWS8.SVM6_TRAIN has 2374 observations and 72 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.PRINCOMP_VALIDATE inest=EMWS8.SVM6_OUTEST 
infit=EMWS8.SVM6_SVMFITSTAT inclass=EMWS8.SVM6_OUTCLASS 
out=EMWS8.SVM6_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM6_VALIDATE has 1018 observations and 68 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM6_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 02.13 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM6_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM6_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM6\tmprescode.sas.
1619873   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
1619874   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
1619875   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
1619876   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
1619877   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
1619878   +if
1619879   + F_DepVar ne '1'
1619880   +and F_DepVar ne '0'
1619881   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
1619882   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
1619883   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
1619884   +end;
MPRINT(SVM_SCORE):   end;
1619885   +else do;
MPRINT(SVM_SCORE):   else do;
1619886   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
1619887   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
1619888   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
1619889   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
1619890   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
1619891   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
1619892   +end;
MPRINT(SVM_SCORE):   end;
1619893   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM6_VALIDATE.
NOTE: The data set EMWS8.SVM6_VALIDATE has 1018 observations and 72 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
1619894    data SVM6_SCORE/view=SVM6_SCORE;
MPRINT(EM_DECIDECODE):   data SVM6_SCORE/view=SVM6_SCORE;
1619895    set EMWS8.SVM6_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM6_TRAIN;
1619896    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM6_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM6_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
1619897    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
1619898    * SVM6: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM6: Create decision matrix;
1619899    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
1619900    data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
1619901      length   DepVar                           $  32
1619902               COUNT                                8
1619903               DATAPRIOR                            8
1619904               TRAINPRIOR                           8
1619905               DECPRIOR                             8
1619906               DECISION1                            8
1619907               DECISION2                            8
1619908               ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
1619909    
1619910      label    COUNT="Level Counts"
1619911               DATAPRIOR="Data Proportions"
1619912               TRAINPRIOR="Training Proportions"
1619913               DECPRIOR="Decision Priors"
1619914               DECISION1="1"
1619915               DECISION2="0"
1619916               ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
1619917      format   COUNT 10.
1619918               ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
1619919    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
1619919  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
1619920    output;
MPRINT(EM_DECIDECODE):   output;
1619921    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
1619921  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
1619922    output;
MPRINT(EM_DECIDECODE):   output;
1619923    ;
MPRINT(EM_DECIDECODE):   ;
1619924    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1619925    proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
1619926    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
1619927    label DECISION1= '1';
1619928    label DECISION2= '0';
1619929    run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
1619930    quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

1619931    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
1619932    * SVM6 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM6 Generate decision score code;
1619933    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
1619934    run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM6_OUTEST 
infit=EMWS8.SVM6_SVMFITSTAT inclass=EMWS8.SVM6_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 09.38 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM6_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 23 variables.
1619935    %em_copyfile(infref=#LN14668, outfref=#LN14667, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN14667 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN14668",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN14667 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 09.38 Uhr

NOTE: 48 records were written to the file #LN14667.
      The minimum record length was 1.
      The maximum record length was 195.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
1619936    %em_copyfile(infref=#LN14670, outfref=#LN14669, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN14669 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN14670",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN14669 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=3814,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 09.38 Uhr

NOTE: 65 records were written to the file #LN14669.
      The minimum record length was 1.
      The maximum record length was 198.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 20 observations read from the data set EMWS8.SVM6_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 20 observations and 9 variables.
1619937    %em_copyfile(infref=#LN14672, outfref=#LN14671, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN14671 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN14672",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN14671 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=7180,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 09.38 Uhr

NOTE: 54 records were written to the file #LN14671.
      The minimum record length was 1.
      The maximum record length was 121.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=10033,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=28. April 2016 09.38 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM6\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM6\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 09.38 Uhr,
      Create Time=27. April 2016 22.55 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM6_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM6_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM6_SVMFITSTAT.
NOTE: The data set EMWS8.SVM6_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM6_SVMFITDS out =EMWS8.SVM6_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM6_SVMFITDS.
NOTE: The data set EMWS8.SVM6_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM6_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM6_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM6_SVMFITDS.
NOTE: The data set EMWS8.SVM6_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM6_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM6_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM6_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM6_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM6_TRAIN.
NOTE: The data set EMWS8.SVM6_TRAIN has 2374 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM6_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM6_TRAIN EMWS8.SVM6_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM6_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM6_OUTALPHA.
NOTE: The data set EMWS8.SVM6_TRAIN has 2374 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM6_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM6_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM6_OUTALPHA.
NOTE: The data set EMWS8.SVM6_OUTALPHA has 256 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM6_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 256 observations read from the data set EMWS8.SVM6_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM6_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM6_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM6_TUNINGCRIT.
NOTE: The data set EMWS8.SVM6_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM6;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1619938    
1619939    *------------------------------------------------------------*;
1619940    * End TRAIN: SVM6;
1619941    *------------------------------------------------------------*;

1619942    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1619943    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1619944    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1619945    ;
MPRINT(EM_DIAGRAM):   ;
1619946    ;
MPRINT(EM_DIAGRAM):   ;
1619947    ;
MPRINT(EM_DIAGRAM):   ;
1619948    ;
MPRINT(EM_DIAGRAM):   ;
1619949    quit;
MPRINT(EM_DIAGRAM):   quit;
1619950    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1619951    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1619952    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1619953    /*; *"; *'; */
1619954    ;
MPRINT(EM_DIAGRAM):   ;
1619955    run;
MPRINT(EM_DIAGRAM):   run;
1619956    quit;
MPRINT(EM_DIAGRAM):   quit;
1619957    /* Reset EM Options */
1619958    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1619959    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1619960    goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
