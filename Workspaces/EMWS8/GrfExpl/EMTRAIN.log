MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 
2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H57m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                10 de Março de 2016
Time:                05H57m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TJIV6E 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TJIV6E new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 
2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H57m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 
2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H57m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
61169      proc freq data=EMWS8.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.GrfExpl_VariableSet noprint;
61170      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
61171      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

61172      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
61173      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
61174      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
61174    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
61174    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
61175      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
61176      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
61177      run;

NOTE: There were 6 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

61178      title10;
MPRINT(EM_DIAGRAM):   title10;
61179      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61512      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61513      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
61514      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
61515      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

61516      %let EMEXCEPTIONSTRING=;
61517      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61518      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
61519      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61520      %let EM_ACTION = TRAIN;
61521      %let syscc = 0;
61522      %macro main;
61523         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
61524         %include temp;
61525         filename temp;
61526      
61527         %SetProperties;
61528      
61529         %if %upcase(&EM_ACTION) = CREATE %then %do;
61530      
61531             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
61532             %include temp;
61533             filename temp;
61534             %create;
61535         %end;
61536         %else
61537         %if %upcase(&EM_ACTION) = TRAIN %then %do;
61538      
61539             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
61540             %include temp;
61541             filename temp;
61542             %train;
61543      
61544         %end;
61545         %else
61546         %if %upcase(&EM_ACTION) = REPORT %then %do;
61547      
61548             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
61549             %include temp;
61550             filename temp;
61551      
61552             %report;
61553         %end;
61554      
61555      %mend main;
61556      
61557      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
61558     +%macro SetProperties;
61559     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
61560     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
61561     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
61562     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
61563     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
61564     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
61566     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
61567     +%macro train;
61569     +    %let graphData = &em_import_data;
61570     +    %if "&graphData" eq "" %then
61571     +        %let graphData = &em_import_transaction;
61572     +    %if "&graphData" eq "" %then
61573     +        %let graphData = &em_import_document;
61574     +    %if "&graphData" eq "" %then
61575     +        %let graphData = &em_import_validate;
61576     +    %if "&graphData" eq "" %then
61577     +        %let graphData = &em_import_test;
61578     +    %if "&graphData" eq "" %then
61579     +        %let graphData = &em_import_score;
61581     +    %if "&graphData" eq "" %then %do;
61582     +        %let emexceptionString = exception.server.IMPORT.NODATA;
61583     +        %goto doendm;
61584     +    %end;
61586     +    %em_getname(key=SAMPLE_DATA, type=DATA);
61588     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
61589     +    %include vartemp;
61590     +    filename vartemp;
61592     +    data tempVariableSet;
61593     +       set &em_data_variableset;
61594     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED'
61594    !+and USE in('Y', 'D'));
61595     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then
61595    !+output;
61596     +    run;
61597     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME,
61597    !+nummacro=numVarSample);
61600     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA,
61600    !+METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
61601     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD,
61601    !+SIZE=&EM_PROPERTY_EMSAMPLESIZE,
61602     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
61604     +    %doendm:
61606     +%mend train;
61608     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
61609     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
61610     +   filename macFile catalog 'work.emutil.macro.source';
61611     +   %let _METAOBS = 0;
61613     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
61614     +                   or (&metadata eq ) %then %do;
61615     +       %goto doend;
61616     +   %end;
61617     +   data _null_;
61618     +      length _STRING_ $80;
61619     +      retain _STRING_;
61620     +      set &metadata end=eof;
61621     +      file macFile;
61622     +      %if %nrbquote(&where) ne %then %do;
61623     +          %let whereClause = where (%nrbquote(&where));
61624     +          %unquote(&whereClause);
61625     +      %end;
61626     +      if _N_=1 then do;
61627     +         string = "%"!!"macro &name;";
61628     +         put string;
61629     +      end;
61630     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
61631     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
61632     +         if eof then do;
61633     +            put _STRING_;
61634     +            string = "%"!!"mend &name;";
61635     +            put string;
61636     +            %if (&nummacro ne ) %then %do;
61637     +                string = strip(put(_N_, best.));
61638     +                put "%" "global &nummacro;";
61639     +                put "%" "let &nummacro = " string ";";
61640     +                call symput('_METAOBS', string);
61641     +            %end;
61642     +         end;
61643     +      end;
61644     +      else do;
61645     +         put _STRING_;
61646     +         _string_ = TRIM(&key);
61647     +         if eof then do;
61648     +            put _STRING_;
61649     +            string = "%"!!"mend &name;";
61650     +            put string;
61651     +        end;
61652     +      end;
61653     +      if eof then do;
61654     +         string = strip(put(_N_, best.));
61655     +         call symput('_METAOBS', string);
61656     +         %if (&nummacro ne ) %then %do;
61657     +             put "%" "global &nummacro;";
61658     +             put "%" "let &nummacro = " string ";";
61659     +         %end;
61660     +      end;
61661     +   run;
61663     +   %doend:
61664     +   %if ^&_METAOBS %then %do;
61665     +       data _null_;
61666     +          file macFile;
61667     +          put "%" "macro &name;";
61668     +          put "%" "mend &name;";
61669     +          %if (&nummacro ne ) %then %do;
61670     +              put "%" "global &nummacro;";
61671     +              put "%" "let &nummacro = 0;";
61672     +          %end;
61673     +      run;
61674     +   %end;
61675     +   %inc macFile;
61676     +   filename macFile;
61677     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' 
and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then 
output;
MPRINT(TRAIN):   run;

NOTE: There were 25 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and 
      USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 25 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Quinta-feira, 10 de Março de 2016 05H57m,
      Last Modified=Quinta-feira, 10 de Março de 2016 05H57m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary 
      Files\_TD4608_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 73.
NOTE: There were 25 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
61678     +%macro varSample;
61679     +Age Age_Exmpl2 CatPurchase Clothes Custid DepVar Dependents Education Frq
61680     +Gender HigherEducation HouseKeeping Income Kitchen Marital_Status Mnt
61681     +MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation
61682     +SmallAppliances Toys _dataobs_
61683     +%mend varSample;
61684     +%global numVarSample;
61685     +%let numVarSample = 25 ;
61686     +%global numVarSample;
61687     +%let numVarSample = 25 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
61688     +/*------------------------------------------------------------------
61689     +  MACRO EXPLOREOBS
61691     +  SUPPORT:  SASDHD - David Duling
61692     +  PRODUCT:  Enterprise Miner
61694     +  DESCRIPTION:
61695     +  Generates maximum and default numbers of observations to
61696     +  download for visualization depending on the record length.
61698     +  Values were determined by trial and error using typical
61699     +  Windows workstation configurations.
61701     +  Discrete sets of values are returned so that user experience
61702     +  will be consitent with similar sized data sets.
61704     +  These macro variables are set:
61705     +  _exploreobs_max -- maximum number of obs downloadable
61706     +  _exploreobs_def -- default number of obs to be downloaded
61707     +  _exploreobs_recl - record length.  Might be useful for reporting.
61709     +  Use the _exploreobs_max to set limit the GUI selection of
61710     +  observations for downloading.  The GUI selection for obs
61711     +  could be reduced to "Default" and "Max".
61713     +  Parameters
61714     +  data=   libname.memname of input data
61715     +  vars=   subset list of variables.
61716     +          downloading 1 out of 500 really does work like downloading
61717     +          1 out of 1 vars.  Users may select a subset of vars for
61718     +                   visualizations.  Pass in the list as space delimited
61719     +          var names.  If vars is not specified, the record length
61720     +          of the entire data will be used.
61721     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
61723     +  Control
61724     +  Users may control the values by entering these macro variables.
61725     +            EM_EXPLOREOBS_MAX
61726     +            EM_EXPLOREOBS_DEFAULT
61727     +  These values override the computed values.
61729     +  Debugging
61730     +  %let _exploreobs_debug=1 ;
61731     +--------------------------------------------------------------------
61732     +  HISTORY: 20APR2004. sasdhd. pushed.
61733     +           18DEC2004. sasdhd. S0280556.
61734     +           07SEP2007. sasdhd. HK1009586
61735     +--------------------------------------------------------------------*/
61737     +%macro exploreobs(data=,vars=, nbytes=) ;
61739     +   /*--- variable definitions ---*/
61740     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
61741     +   %local xobs xvars xlen vlen xi vname vlist ;
61742     +   %local _exp_source _exp_notes ;
61744     +   /*--- USER definitions ---*/
61745     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
61747     +   /*--- variable intializations ---*/
61748     +   %let _exploreobs_max=0 ;
61749     +   %let _exploreobs_def=0 ;
61750     +   %let _exploreobs_recl=0 ;
61751     +   %let xvars= 0 ;
61752     +   %let xlen = 0 ;
61753     +   %let xobs = 0 ;
61755     +   /*--- data error checks ---*/
61756     +   %if "&data" eq "" %then %do ;
61757     +            %put NOTE: DATA is not specified. ;
61758     +            %goto term ;
61759     +      %end ;
61761     +   %let dsid=%sysfunc(open(&data)) ;
61762     +   %if not &dsid %then %do ;
61763     +            %put NOTE: DATA &data is not available. ;
61764     +            %goto term ;
61765     +      %end ;
61767     +   /*--- if a vars list exists generate a subset ---*/
61768     +   %if &vars ne %then %do ;
61769     +         %let dsid=%sysfunc(close(&dsid)) ;
61770     +         %if &_exploreobs_debug ne 1 %then %do ;
61771     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
61772     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
61773     +                  options nosource nonotes ;
61774     +         %end ;
61775     +         data _exploreobs_temp_data ;
61776     +         set &data(obs=0) ;
61777     +          keep &vars ;
61778     +         run;
61779     +         %if &_exploreobs_debug ne 1 %then %do ;
61780     +                  options &_exp_source &_exp_notes ;
61781     +         %end ;
61782     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
61783     +         %if &dsid eq 0 %then %do ;
61784     +                  %put NOTE: Sample is not available.;
61785     +                  %goto term ;
61786     +            %end ;
61787     +      %end ;
61789     +   /*--- get var attributes ---*/
61790     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
61791     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
61792     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
61793     +   %let dsid= %sysfunc(close(&dsid)) ;
61795     +   /*--- set default and max obs ---*/
61796     +   %let _exploreobs_recl=%eval(&xlen) ;
61797     +   %if &_exploreobs_recl eq 0 %then %do ;
61798     +             %let _exploreobs_max= 0 ;
61799     +             %let _exploreobs_def= 0 ;
61800     +             %goto term ;
61802     +   %end ;
61803     +   %else
61804     +   %if &_exploreobs_recl le 32 %then %do ;
61805     +             %let _exploreobs_max=100000 ;
61806     +             %let _exploreobs_def= 10000 ;
61807     +   %end ;
61808     +   %else
61809     +   %if &_exploreobs_recl le 128 %then %do ;
61810     +             %let _exploreobs_max=60000 ;
61811     +             %let _exploreobs_def= 6000 ;
61812     +   %end ;
61813     +   %else
61814     +   %if &_exploreobs_recl lt 1000 %then %do ;
61815     +             %let _exploreobs_max=20000 ;
61816     +             %let _exploreobs_def= 2000 ;
61817     +   %end ;
61818     +   %else
61819     +   %if &_exploreobs_recl lt 5000 %then %do ;
61820     +             %let _exploreobs_max= 10000 ;
61821     +             %let _exploreobs_def=  1000 ;
61822     +   %end ;
61823     +   %else
61824     +   %if &_exploreobs_recl lt 20000 %then %do ;
61825     +             %let _exploreobs_max= 5000 ;
61826     +             %let _exploreobs_def=  500 ;
61827     +   %end ;
61828     +   %else %do ;
61829     +             %let _exploreobs_max= 1000 ;
61830     +             %let _exploreobs_def=  200 ;
61831     +   %end ;
61833     +   /*--- Users options ---*/
61834     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
61835     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
61836     +   %end;
61837     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61838     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
61839     +   %end;
61841     +    /*--- S0868273 ---*/
61842     +    %if "&NBYTES" ne "" %then %do;
61843     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
61844     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
61845     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
61845    !+&EM_EXPLOREOBS_MAX));
61846     +       %end;
61848     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61849     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
61850     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
61850    !+&EM_EXPLOREOBS_DEFAULT));
61851     +          %if ^&_exploreobs_def %then
61852     +              %let _exploreobs_def = 1;
61854     +       %end;
61855     +    %end;
61857     +   /*--- Terminate ---*/
61858     +   %term:
61860     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
61860    !+max=&_exploreobs_max : def= &_exploreobs_def ;
61861     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep Age Age_Exmpl2 CatPurchase Clothes Custid DepVar Dependents 
Education Frq Gender HigherEducation HouseKeeping Income Kitchen Marital_Status Mnt 
MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys 
_dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 25 : recl= 200 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=Age Age_Exmpl2 CatPurchase 
Clothes Custid DepVar Dependents Education Frq Gender HigherEducation HouseKeeping Income 
Kitchen Marital_Status Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn 
Recomendation SmallAppliances Toys _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 1631 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
61864     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
61865     +   filename macFile catalog 'work.emutil.macro.source';
61866     +   %let _METAOBS = 0;
61868     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
61869     +                   or (&metadata eq ) %then %do;
61870     +       %goto doend;
61871     +   %end;
61872     +   data _null_;
61873     +      length _STRING_ $80;
61874     +      retain _STRING_;
61875     +      set &metadata end=eof;
61876     +      file macFile;
61877     +      %if %nrbquote(&where) ne %then %do;
61878     +          %let whereClause = where (%nrbquote(&where));
61879     +          %unquote(&whereClause);
61880     +      %end;
61881     +      if _N_=1 then do;
61882     +         string = "%"!!"macro &name;";
61883     +         put string;
61884     +      end;
61885     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
61886     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
61887     +         if eof then do;
61888     +            put _STRING_;
61889     +            string = "%"!!"mend &name;";
61890     +            put string;
61891     +            %if (&nummacro ne ) %then %do;
61892     +                string = strip(put(_N_, best.));
61893     +                put "%" "global &nummacro;";
61894     +                put "%" "let &nummacro = " string ";";
61895     +                call symput('_METAOBS', string);
61896     +            %end;
61897     +         end;
61898     +      end;
61899     +      else do;
61900     +         put _STRING_;
61901     +         _string_ = TRIM(&key);
61902     +         if eof then do;
61903     +            put _STRING_;
61904     +            string = "%"!!"mend &name;";
61905     +            put string;
61906     +        end;
61907     +      end;
61908     +      if eof then do;
61909     +         string = strip(put(_N_, best.));
61910     +         call symput('_METAOBS', string);
61911     +         %if (&nummacro ne ) %then %do;
61912     +             put "%" "global &nummacro;";
61913     +             put "%" "let &nummacro = " string ";";
61914     +         %end;
61915     +      end;
61916     +   run;
61918     +   %doend:
61919     +   %if ^&_METAOBS %then %do;
61920     +       data _null_;
61921     +          file macFile;
61922     +          put "%" "macro &name;";
61923     +          put "%" "mend &name;";
61924     +          %if (&nummacro ne ) %then %do;
61925     +              put "%" "global &nummacro;";
61926     +              put "%" "let &nummacro = 0;";
61927     +          %end;
61928     +      run;
61929     +   %end;
61930     +   %inc macFile;
61931     +   filename macFile;
61932     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' 
and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then 
output;
MPRINT(TRAIN):   run;

NOTE: There were 25 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and 
      USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 25 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Quinta-feira, 10 de Março de 2016 05H57m,
      Last Modified=Quinta-feira, 10 de Março de 2016 05H57m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary 
      Files\_TD4608_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 73.
NOTE: There were 25 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
61933     +%macro varSample;
61934     +Age Age_Exmpl2 CatPurchase Clothes Custid DepVar Dependents Education Frq
61935     +Gender HigherEducation HouseKeeping Income Kitchen Marital_Status Mnt
61936     +MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation
61937     +SmallAppliances Toys _dataobs_
61938     +%mend varSample;
61939     +%global numVarSample;
61940     +%let numVarSample = 25 ;
61941     +%global numVarSample;
61942     +%let numVarSample = 25 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
61943     +/*------------------------------------------------------------------
61944     +  MACRO EXPLOREOBS
61946     +  SUPPORT:  SASDHD - David Duling
61947     +  PRODUCT:  Enterprise Miner
61949     +  DESCRIPTION:
61950     +  Generates maximum and default numbers of observations to
61951     +  download for visualization depending on the record length.
61953     +  Values were determined by trial and error using typical
61954     +  Windows workstation configurations.
61956     +  Discrete sets of values are returned so that user experience
61957     +  will be consitent with similar sized data sets.
61959     +  These macro variables are set:
61960     +  _exploreobs_max -- maximum number of obs downloadable
61961     +  _exploreobs_def -- default number of obs to be downloaded
61962     +  _exploreobs_recl - record length.  Might be useful for reporting.
61964     +  Use the _exploreobs_max to set limit the GUI selection of
61965     +  observations for downloading.  The GUI selection for obs
61966     +  could be reduced to "Default" and "Max".
61968     +  Parameters
61969     +  data=   libname.memname of input data
61970     +  vars=   subset list of variables.
61971     +          downloading 1 out of 500 really does work like downloading
61972     +          1 out of 1 vars.  Users may select a subset of vars for
61973     +                   visualizations.  Pass in the list as space delimited
61974     +          var names.  If vars is not specified, the record length
61975     +          of the entire data will be used.
61976     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
61978     +  Control
61979     +  Users may control the values by entering these macro variables.
61980     +            EM_EXPLOREOBS_MAX
61981     +            EM_EXPLOREOBS_DEFAULT
61982     +  These values override the computed values.
61984     +  Debugging
61985     +  %let _exploreobs_debug=1 ;
61986     +--------------------------------------------------------------------
61987     +  HISTORY: 20APR2004. sasdhd. pushed.
61988     +           18DEC2004. sasdhd. S0280556.
61989     +           07SEP2007. sasdhd. HK1009586
61990     +--------------------------------------------------------------------*/
61992     +%macro exploreobs(data=,vars=, nbytes=) ;
61994     +   /*--- variable definitions ---*/
61995     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
61996     +   %local xobs xvars xlen vlen xi vname vlist ;
61997     +   %local _exp_source _exp_notes ;
61999     +   /*--- USER definitions ---*/
62000     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
62002     +   /*--- variable intializations ---*/
62003     +   %let _exploreobs_max=0 ;
62004     +   %let _exploreobs_def=0 ;
62005     +   %let _exploreobs_recl=0 ;
62006     +   %let xvars= 0 ;
62007     +   %let xlen = 0 ;
62008     +   %let xobs = 0 ;
62010     +   /*--- data error checks ---*/
62011     +   %if "&data" eq "" %then %do ;
62012     +            %put NOTE: DATA is not specified. ;
62013     +            %goto term ;
62014     +      %end ;
62016     +   %let dsid=%sysfunc(open(&data)) ;
62017     +   %if not &dsid %then %do ;
62018     +            %put NOTE: DATA &data is not available. ;
62019     +            %goto term ;
62020     +      %end ;
62022     +   /*--- if a vars list exists generate a subset ---*/
62023     +   %if &vars ne %then %do ;
62024     +         %let dsid=%sysfunc(close(&dsid)) ;
62025     +         %if &_exploreobs_debug ne 1 %then %do ;
62026     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
62027     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
62028     +                  options nosource nonotes ;
62029     +         %end ;
62030     +         data _exploreobs_temp_data ;
62031     +         set &data(obs=0) ;
62032     +          keep &vars ;
62033     +         run;
62034     +         %if &_exploreobs_debug ne 1 %then %do ;
62035     +                  options &_exp_source &_exp_notes ;
62036     +         %end ;
62037     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
62038     +         %if &dsid eq 0 %then %do ;
62039     +                  %put NOTE: Sample is not available.;
62040     +                  %goto term ;
62041     +            %end ;
62042     +      %end ;
62044     +   /*--- get var attributes ---*/
62045     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
62046     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
62047     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
62048     +   %let dsid= %sysfunc(close(&dsid)) ;
62050     +   /*--- set default and max obs ---*/
62051     +   %let _exploreobs_recl=%eval(&xlen) ;
62052     +   %if &_exploreobs_recl eq 0 %then %do ;
62053     +             %let _exploreobs_max= 0 ;
62054     +             %let _exploreobs_def= 0 ;
62055     +             %goto term ;
62057     +   %end ;
62058     +   %else
62059     +   %if &_exploreobs_recl le 32 %then %do ;
62060     +             %let _exploreobs_max=100000 ;
62061     +             %let _exploreobs_def= 10000 ;
62062     +   %end ;
62063     +   %else
62064     +   %if &_exploreobs_recl le 128 %then %do ;
62065     +             %let _exploreobs_max=60000 ;
62066     +             %let _exploreobs_def= 6000 ;
62067     +   %end ;
62068     +   %else
62069     +   %if &_exploreobs_recl lt 1000 %then %do ;
62070     +             %let _exploreobs_max=20000 ;
62071     +             %let _exploreobs_def= 2000 ;
62072     +   %end ;
62073     +   %else
62074     +   %if &_exploreobs_recl lt 5000 %then %do ;
62075     +             %let _exploreobs_max= 10000 ;
62076     +             %let _exploreobs_def=  1000 ;
62077     +   %end ;
62078     +   %else
62079     +   %if &_exploreobs_recl lt 20000 %then %do ;
62080     +             %let _exploreobs_max= 5000 ;
62081     +             %let _exploreobs_def=  500 ;
62082     +   %end ;
62083     +   %else %do ;
62084     +             %let _exploreobs_max= 1000 ;
62085     +             %let _exploreobs_def=  200 ;
62086     +   %end ;
62088     +   /*--- Users options ---*/
62089     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
62090     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
62091     +   %end;
62092     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
62093     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
62094     +   %end;
62096     +    /*--- S0868273 ---*/
62097     +    %if "&NBYTES" ne "" %then %do;
62098     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
62099     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
62100     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
62100    !+&EM_EXPLOREOBS_MAX));
62101     +       %end;
62103     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
62104     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
62105     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
62105    !+&EM_EXPLOREOBS_DEFAULT));
62106     +          %if ^&_exploreobs_def %then
62107     +              %let _exploreobs_def = 1;
62109     +       %end;
62110     +    %end;
62112     +   /*--- Terminate ---*/
62113     +   %term:
62115     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
62115    !+max=&_exploreobs_max : def= &_exploreobs_def ;
62116     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep Age Age_Exmpl2 CatPurchase Clothes Custid DepVar Dependents 
Education Frq Gender HigherEducation HouseKeeping Income Kitchen Marital_Status Mnt 
MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys 
_dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 25 : recl= 200 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=Age Age_Exmpl2 CatPurchase 
Clothes Custid DepVar Dependents Education Frq Gender HigherEducation HouseKeeping Income 
Kitchen Marital_Status Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn 
Recomendation SmallAppliances Toys _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 1631 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62119      *------------------------------------------------------------*;
62120      * End TRAIN: GrfExpl;
62121      *------------------------------------------------------------*;
62122      

62123      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62124      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
62125      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62126      ;
MPRINT(EM_DIAGRAM):   ;
62127      ;
MPRINT(EM_DIAGRAM):   ;
62128      ;
MPRINT(EM_DIAGRAM):   ;
62129      ;
MPRINT(EM_DIAGRAM):   ;
62130      quit;
MPRINT(EM_DIAGRAM):   quit;
62131      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62132      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
62133      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62134      /*; *"; *'; */
62135      ;
MPRINT(EM_DIAGRAM):   ;
62136      run;
MPRINT(EM_DIAGRAM):   run;
62137      quit;
MPRINT(EM_DIAGRAM):   quit;
62138      /* Reset EM Options */
62139      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
62140      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
62141      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
