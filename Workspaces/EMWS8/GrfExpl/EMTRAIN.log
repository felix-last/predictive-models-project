MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.06 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                08.06 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28DVXAB "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28DVXAB new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.06 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.06 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
95076      proc freq data=EMWS8.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.GrfExpl_VariableSet noprint;
95077      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
95078      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95079      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
95080      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
95081      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
95082      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
95083      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
95084      run;

NOTE: There were 6 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 37.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

95085      title10;
MPRINT(EM_DIAGRAM):   title10;
95086      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95429      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
95430      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
95431      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
95432      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

95433      %let EMEXCEPTIONSTRING=;
95434      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
95435      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
95436      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95437      %let EM_ACTION = TRAIN;
95438      %let syscc = 0;
95439      %macro main;
95440         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
95441         %include temp;
95442         filename temp;
95443      
95444         %SetProperties;
95445      
95446         %if %upcase(&EM_ACTION) = CREATE %then %do;
95447      
95448             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
95449             %include temp;
95450             filename temp;
95451             %create;
95452         %end;
95453         %else
95454         %if %upcase(&EM_ACTION) = TRAIN %then %do;
95455      
95456             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
95457             %include temp;
95458             filename temp;
95459             %train;
95460      
95461         %end;
95462         %else
95463         %if %upcase(&EM_ACTION) = REPORT %then %do;
95464      
95465             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
95466             %include temp;
95467             filename temp;
95468      
95469             %report;
95470         %end;
95471      
95472      %mend main;
95473      
95474      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
95475     +%macro SetProperties;
95476     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
95477     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
95478     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
95479     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
95480     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
95481     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
95482     +
95483     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
95484     +%macro train;
95486     +    %let graphData = &em_import_data;
95487     +    %if "&graphData" eq "" %then
95488     +        %let graphData = &em_import_transaction;
95489     +    %if "&graphData" eq "" %then
95490     +        %let graphData = &em_import_document;
95491     +    %if "&graphData" eq "" %then
95492     +        %let graphData = &em_import_validate;
95493     +    %if "&graphData" eq "" %then
95494     +        %let graphData = &em_import_test;
95495     +    %if "&graphData" eq "" %then
95496     +        %let graphData = &em_import_score;
95498     +    %if "&graphData" eq "" %then %do;
95499     +        %let emexceptionString = exception.server.IMPORT.NODATA;
95500     +        %goto doendm;
95501     +    %end;
95503     +    %em_getname(key=SAMPLE_DATA, type=DATA);
95505     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
95506     +    %include vartemp;
95507     +    filename vartemp;
95509     +    data tempVariableSet;
95510     +       set &em_data_variableset;
95511     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
95512     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
95513     +    run;
95514     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
95517     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
95518     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
95519     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
95521     +    %doendm:
95523     +%mend train;
95525     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
95526     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
95527     +   filename macFile catalog 'work.emutil.macro.source';
95528     +   %let _METAOBS = 0;
95530     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
95531     +                   or (&metadata eq ) %then %do;
95532     +       %goto doend;
95533     +   %end;
95534     +   data _null_;
95535     +      length _STRING_ $80;
95536     +      retain _STRING_;
95537     +      set &metadata end=eof;
95538     +      file macFile;
95539     +      %if %nrbquote(&where) ne %then %do;
95540     +          %let whereClause = where (%nrbquote(&where));
95541     +          %unquote(&whereClause);
95542     +      %end;
95543     +      if _N_=1 then do;
95544     +         string = "%"!!"macro &name;";
95545     +         put string;
95546     +      end;
95547     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
95548     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
95549     +         if eof then do;
95550     +            put _STRING_;
95551     +            string = "%"!!"mend &name;";
95552     +            put string;
95553     +            %if (&nummacro ne ) %then %do;
95554     +                string = strip(put(_N_, best.));
95555     +                put "%" "global &nummacro;";
95556     +                put "%" "let &nummacro = " string ";";
95557     +                call symput('_METAOBS', string);
95558     +            %end;
95559     +         end;
95560     +      end;
95561     +      else do;
95562     +         put _STRING_;
95563     +         _string_ = TRIM(&key);
95564     +         if eof then do;
95565     +            put _STRING_;
95566     +            string = "%"!!"mend &name;";
95567     +            put string;
95568     +        end;
95569     +      end;
95570     +      if eof then do;
95571     +         string = strip(put(_N_, best.));
95572     +         call symput('_METAOBS', string);
95573     +         %if (&nummacro ne ) %then %do;
95574     +             put "%" "global &nummacro;";
95575     +             put "%" "let &nummacro = " string ";";
95576     +         %end;
95577     +      end;
95578     +   run;
95580     +   %doend:
95581     +   %if ^&_METAOBS %then %do;
95582     +       data _null_;
95583     +          file macFile;
95584     +          put "%" "macro &name;";
95585     +          put "%" "mend &name;";
95586     +          %if (&nummacro ne ) %then %do;
95587     +              put "%" "global &nummacro;";
95588     +              put "%" "let &nummacro = 0;";
95589     +          %end;
95590     +      run;
95591     +   %end;
95592     +   %inc macFile;
95593     +   filename macFile;
95594     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Donnerstag, 28. April 2016 08.06 Uhr,
      Last Modified=Donnerstag, 28. April 2016 08.06 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD9752_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
95595     +%macro varSample;
95596     +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
95597     +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
95598     +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
95599     +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
95600     +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
95601     +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
95602     +%mend varSample;
95603     +%global numVarSample;
95604     +%let numVarSample = 36 ;
95605     +%global numVarSample;
95606     +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
95607     +/*------------------------------------------------------------------
95608     +  MACRO EXPLOREOBS
95610     +  SUPPORT:  SASDHD - David Duling
95611     +  PRODUCT:  Enterprise Miner
95613     +  DESCRIPTION:
95614     +  Generates maximum and default numbers of observations to
95615     +  download for visualization depending on the record length.
95617     +  Values were determined by trial and error using typical
95618     +  Windows workstation configurations.
95620     +  Discrete sets of values are returned so that user experience
95621     +  will be consitent with similar sized data sets.
95623     +  These macro variables are set:
95624     +  _exploreobs_max -- maximum number of obs downloadable
95625     +  _exploreobs_def -- default number of obs to be downloaded
95626     +  _exploreobs_recl - record length.  Might be useful for reporting.
95628     +  Use the _exploreobs_max to set limit the GUI selection of
95629     +  observations for downloading.  The GUI selection for obs
95630     +  could be reduced to "Default" and "Max".
95632     +  Parameters
95633     +  data=   libname.memname of input data
95634     +  vars=   subset list of variables.
95635     +          downloading 1 out of 500 really does work like downloading
95636     +          1 out of 1 vars.  Users may select a subset of vars for
95637     +                   visualizations.  Pass in the list as space delimited
95638     +          var names.  If vars is not specified, the record length
95639     +          of the entire data will be used.
95640     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
95642     +  Control
95643     +  Users may control the values by entering these macro variables.
95644     +            EM_EXPLOREOBS_MAX
95645     +            EM_EXPLOREOBS_DEFAULT
95646     +  These values override the computed values.
95648     +  Debugging
95649     +  %let _exploreobs_debug=1 ;
95650     +--------------------------------------------------------------------
95651     +  HISTORY: 20APR2004. sasdhd. pushed.
95652     +           18DEC2004. sasdhd. S0280556.
95653     +           07SEP2007. sasdhd. HK1009586
95654     +--------------------------------------------------------------------*/
95656     +%macro exploreobs(data=,vars=, nbytes=) ;
95658     +   /*--- variable definitions ---*/
95659     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
95660     +   %local xobs xvars xlen vlen xi vname vlist ;
95661     +   %local _exp_source _exp_notes ;
95663     +   /*--- USER definitions ---*/
95664     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
95666     +   /*--- variable intializations ---*/
95667     +   %let _exploreobs_max=0 ;
95668     +   %let _exploreobs_def=0 ;
95669     +   %let _exploreobs_recl=0 ;
95670     +   %let xvars= 0 ;
95671     +   %let xlen = 0 ;
95672     +   %let xobs = 0 ;
95674     +   /*--- data error checks ---*/
95675     +   %if "&data" eq "" %then %do ;
95676     +            %put NOTE: DATA is not specified. ;
95677     +            %goto term ;
95678     +      %end ;
95680     +   %let dsid=%sysfunc(open(&data)) ;
95681     +   %if not &dsid %then %do ;
95682     +            %put NOTE: DATA &data is not available. ;
95683     +            %goto term ;
95684     +      %end ;
95686     +   /*--- if a vars list exists generate a subset ---*/
95687     +   %if &vars ne %then %do ;
95688     +         %let dsid=%sysfunc(close(&dsid)) ;
95689     +         %if &_exploreobs_debug ne 1 %then %do ;
95690     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
95691     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
95692     +                  options nosource nonotes ;
95693     +         %end ;
95694     +         data _exploreobs_temp_data ;
95695     +         set &data(obs=0) ;
95696     +          keep &vars ;
95697     +         run;
95698     +         %if &_exploreobs_debug ne 1 %then %do ;
95699     +                  options &_exp_source &_exp_notes ;
95700     +         %end ;
95701     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
95702     +         %if &dsid eq 0 %then %do ;
95703     +                  %put NOTE: Sample is not available.;
95704     +                  %goto term ;
95705     +            %end ;
95706     +      %end ;
95708     +   /*--- get var attributes ---*/
95709     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
95710     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
95711     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
95712     +   %let dsid= %sysfunc(close(&dsid)) ;
95714     +   /*--- set default and max obs ---*/
95715     +   %let _exploreobs_recl=%eval(&xlen) ;
95716     +   %if &_exploreobs_recl eq 0 %then %do ;
95717     +             %let _exploreobs_max= 0 ;
95718     +             %let _exploreobs_def= 0 ;
95719     +             %goto term ;
95721     +   %end ;
95722     +   %else
95723     +   %if &_exploreobs_recl le 32 %then %do ;
95724     +             %let _exploreobs_max=100000 ;
95725     +             %let _exploreobs_def= 10000 ;
95726     +   %end ;
95727     +   %else
95728     +   %if &_exploreobs_recl le 128 %then %do ;
95729     +             %let _exploreobs_max=60000 ;
95730     +             %let _exploreobs_def= 6000 ;
95731     +   %end ;
95732     +   %else
95733     +   %if &_exploreobs_recl lt 1000 %then %do ;
95734     +             %let _exploreobs_max=20000 ;
95735     +             %let _exploreobs_def= 2000 ;
95736     +   %end ;
95737     +   %else
95738     +   %if &_exploreobs_recl lt 5000 %then %do ;
95739     +             %let _exploreobs_max= 10000 ;
95740     +             %let _exploreobs_def=  1000 ;
95741     +   %end ;
95742     +   %else
95743     +   %if &_exploreobs_recl lt 20000 %then %do ;
95744     +             %let _exploreobs_max= 5000 ;
95745     +             %let _exploreobs_def=  500 ;
95746     +   %end ;
95747     +   %else %do ;
95748     +             %let _exploreobs_max= 1000 ;
95749     +             %let _exploreobs_def=  200 ;
95750     +   %end ;
95752     +   /*--- Users options ---*/
95753     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
95754     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
95755     +   %end;
95756     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
95757     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
95758     +   %end;
95760     +    /*--- S0868273 ---*/
95761     +    %if "&NBYTES" ne "" %then %do;
95762     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
95763     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
95764     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
95765     +       %end;
95767     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
95768     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
95769     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
95770     +          %if ^&_exploreobs_def %then
95771     +              %let _exploreobs_def = 1;
95773     +       %end;
95774     +    %end;
95776     +   /*--- Terminate ---*/
95777     +   %term:
95779     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
95780     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
95783     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
95784     +   filename macFile catalog 'work.emutil.macro.source';
95785     +   %let _METAOBS = 0;
95787     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
95788     +                   or (&metadata eq ) %then %do;
95789     +       %goto doend;
95790     +   %end;
95791     +   data _null_;
95792     +      length _STRING_ $80;
95793     +      retain _STRING_;
95794     +      set &metadata end=eof;
95795     +      file macFile;
95796     +      %if %nrbquote(&where) ne %then %do;
95797     +          %let whereClause = where (%nrbquote(&where));
95798     +          %unquote(&whereClause);
95799     +      %end;
95800     +      if _N_=1 then do;
95801     +         string = "%"!!"macro &name;";
95802     +         put string;
95803     +      end;
95804     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
95805     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
95806     +         if eof then do;
95807     +            put _STRING_;
95808     +            string = "%"!!"mend &name;";
95809     +            put string;
95810     +            %if (&nummacro ne ) %then %do;
95811     +                string = strip(put(_N_, best.));
95812     +                put "%" "global &nummacro;";
95813     +                put "%" "let &nummacro = " string ";";
95814     +                call symput('_METAOBS', string);
95815     +            %end;
95816     +         end;
95817     +      end;
95818     +      else do;
95819     +         put _STRING_;
95820     +         _string_ = TRIM(&key);
95821     +         if eof then do;
95822     +            put _STRING_;
95823     +            string = "%"!!"mend &name;";
95824     +            put string;
95825     +        end;
95826     +      end;
95827     +      if eof then do;
95828     +         string = strip(put(_N_, best.));
95829     +         call symput('_METAOBS', string);
95830     +         %if (&nummacro ne ) %then %do;
95831     +             put "%" "global &nummacro;";
95832     +             put "%" "let &nummacro = " string ";";
95833     +         %end;
95834     +      end;
95835     +   run;
95837     +   %doend:
95838     +   %if ^&_METAOBS %then %do;
95839     +       data _null_;
95840     +          file macFile;
95841     +          put "%" "macro &name;";
95842     +          put "%" "mend &name;";
95843     +          %if (&nummacro ne ) %then %do;
95844     +              put "%" "global &nummacro;";
95845     +              put "%" "let &nummacro = 0;";
95846     +          %end;
95847     +      run;
95848     +   %end;
95849     +   %inc macFile;
95850     +   filename macFile;
95851     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Donnerstag, 28. April 2016 08.06 Uhr,
      Last Modified=Donnerstag, 28. April 2016 08.06 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD9752_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
95852     +%macro varSample;
95853     +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
95854     +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
95855     +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
95856     +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
95857     +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
95858     +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
95859     +%mend varSample;
95860     +%global numVarSample;
95861     +%let numVarSample = 36 ;
95862     +%global numVarSample;
95863     +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
95864     +/*------------------------------------------------------------------
95865     +  MACRO EXPLOREOBS
95867     +  SUPPORT:  SASDHD - David Duling
95868     +  PRODUCT:  Enterprise Miner
95870     +  DESCRIPTION:
95871     +  Generates maximum and default numbers of observations to
95872     +  download for visualization depending on the record length.
95874     +  Values were determined by trial and error using typical
95875     +  Windows workstation configurations.
95877     +  Discrete sets of values are returned so that user experience
95878     +  will be consitent with similar sized data sets.
95880     +  These macro variables are set:
95881     +  _exploreobs_max -- maximum number of obs downloadable
95882     +  _exploreobs_def -- default number of obs to be downloaded
95883     +  _exploreobs_recl - record length.  Might be useful for reporting.
95885     +  Use the _exploreobs_max to set limit the GUI selection of
95886     +  observations for downloading.  The GUI selection for obs
95887     +  could be reduced to "Default" and "Max".
95889     +  Parameters
95890     +  data=   libname.memname of input data
95891     +  vars=   subset list of variables.
95892     +          downloading 1 out of 500 really does work like downloading
95893     +          1 out of 1 vars.  Users may select a subset of vars for
95894     +                   visualizations.  Pass in the list as space delimited
95895     +          var names.  If vars is not specified, the record length
95896     +          of the entire data will be used.
95897     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
95899     +  Control
95900     +  Users may control the values by entering these macro variables.
95901     +            EM_EXPLOREOBS_MAX
95902     +            EM_EXPLOREOBS_DEFAULT
95903     +  These values override the computed values.
95905     +  Debugging
95906     +  %let _exploreobs_debug=1 ;
95907     +--------------------------------------------------------------------
95908     +  HISTORY: 20APR2004. sasdhd. pushed.
95909     +           18DEC2004. sasdhd. S0280556.
95910     +           07SEP2007. sasdhd. HK1009586
95911     +--------------------------------------------------------------------*/
95913     +%macro exploreobs(data=,vars=, nbytes=) ;
95915     +   /*--- variable definitions ---*/
95916     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
95917     +   %local xobs xvars xlen vlen xi vname vlist ;
95918     +   %local _exp_source _exp_notes ;
95920     +   /*--- USER definitions ---*/
95921     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
95923     +   /*--- variable intializations ---*/
95924     +   %let _exploreobs_max=0 ;
95925     +   %let _exploreobs_def=0 ;
95926     +   %let _exploreobs_recl=0 ;
95927     +   %let xvars= 0 ;
95928     +   %let xlen = 0 ;
95929     +   %let xobs = 0 ;
95931     +   /*--- data error checks ---*/
95932     +   %if "&data" eq "" %then %do ;
95933     +            %put NOTE: DATA is not specified. ;
95934     +            %goto term ;
95935     +      %end ;
95937     +   %let dsid=%sysfunc(open(&data)) ;
95938     +   %if not &dsid %then %do ;
95939     +            %put NOTE: DATA &data is not available. ;
95940     +            %goto term ;
95941     +      %end ;
95943     +   /*--- if a vars list exists generate a subset ---*/
95944     +   %if &vars ne %then %do ;
95945     +         %let dsid=%sysfunc(close(&dsid)) ;
95946     +         %if &_exploreobs_debug ne 1 %then %do ;
95947     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
95948     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
95949     +                  options nosource nonotes ;
95950     +         %end ;
95951     +         data _exploreobs_temp_data ;
95952     +         set &data(obs=0) ;
95953     +          keep &vars ;
95954     +         run;
95955     +         %if &_exploreobs_debug ne 1 %then %do ;
95956     +                  options &_exp_source &_exp_notes ;
95957     +         %end ;
95958     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
95959     +         %if &dsid eq 0 %then %do ;
95960     +                  %put NOTE: Sample is not available.;
95961     +                  %goto term ;
95962     +            %end ;
95963     +      %end ;
95965     +   /*--- get var attributes ---*/
95966     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
95967     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
95968     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
95969     +   %let dsid= %sysfunc(close(&dsid)) ;
95971     +   /*--- set default and max obs ---*/
95972     +   %let _exploreobs_recl=%eval(&xlen) ;
95973     +   %if &_exploreobs_recl eq 0 %then %do ;
95974     +             %let _exploreobs_max= 0 ;
95975     +             %let _exploreobs_def= 0 ;
95976     +             %goto term ;
95978     +   %end ;
95979     +   %else
95980     +   %if &_exploreobs_recl le 32 %then %do ;
95981     +             %let _exploreobs_max=100000 ;
95982     +             %let _exploreobs_def= 10000 ;
95983     +   %end ;
95984     +   %else
95985     +   %if &_exploreobs_recl le 128 %then %do ;
95986     +             %let _exploreobs_max=60000 ;
95987     +             %let _exploreobs_def= 6000 ;
95988     +   %end ;
95989     +   %else
95990     +   %if &_exploreobs_recl lt 1000 %then %do ;
95991     +             %let _exploreobs_max=20000 ;
95992     +             %let _exploreobs_def= 2000 ;
95993     +   %end ;
95994     +   %else
95995     +   %if &_exploreobs_recl lt 5000 %then %do ;
95996     +             %let _exploreobs_max= 10000 ;
95997     +             %let _exploreobs_def=  1000 ;
95998     +   %end ;
95999     +   %else
96000     +   %if &_exploreobs_recl lt 20000 %then %do ;
96001     +             %let _exploreobs_max= 5000 ;
96002     +             %let _exploreobs_def=  500 ;
96003     +   %end ;
96004     +   %else %do ;
96005     +             %let _exploreobs_max= 1000 ;
96006     +             %let _exploreobs_def=  200 ;
96007     +   %end ;
96009     +   /*--- Users options ---*/
96010     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
96011     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
96012     +   %end;
96013     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
96014     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
96015     +   %end;
96017     +    /*--- S0868273 ---*/
96018     +    %if "&NBYTES" ne "" %then %do;
96019     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
96020     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
96021     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
96022     +       %end;
96024     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
96025     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
96026     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
96027     +          %if ^&_exploreobs_def %then
96028     +              %let _exploreobs_def = 1;
96030     +       %end;
96031     +    %end;
96033     +   /*--- Terminate ---*/
96034     +   %term:
96036     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
96037     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96040      *------------------------------------------------------------*;
96041      * End TRAIN: GrfExpl;
96042      *------------------------------------------------------------*;
96043      

96044      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96045      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
96046      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96047      ;
MPRINT(EM_DIAGRAM):   ;
96048      ;
MPRINT(EM_DIAGRAM):   ;
96049      ;
MPRINT(EM_DIAGRAM):   ;
96050      ;
MPRINT(EM_DIAGRAM):   ;
96051      quit;
MPRINT(EM_DIAGRAM):   quit;
96052      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96053      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
96054      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
The SAS System

96055      /*; *"; *'; */
96056      ;
MPRINT(EM_DIAGRAM):   ;
96057      run;
MPRINT(EM_DIAGRAM):   run;
96058      quit;
MPRINT(EM_DIAGRAM):   quit;
96059      /* Reset EM Options */
96060      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
96061      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
96062      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
