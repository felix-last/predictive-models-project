MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                19. April 2016
Time:                17.21 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0X_F2F7 "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0X_F2F7 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
109328     proc freq data=EMWS8.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.GrfExpl_VariableSet noprint;
109329     table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
109330     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

109331     proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
109332     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
109333     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
109334     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
109335     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
109336     run;

NOTE: There were 6 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 58.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

109337     title10;
MPRINT(EM_DIAGRAM):   title10;
109338     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
109681     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
109682     * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
109683     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
109684     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

109685     %let EMEXCEPTIONSTRING=;
109686     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
109687     * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
109688     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
109689     %let EM_ACTION = TRAIN;
109690     %let syscc = 0;
109691     %macro main;
109692        filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
109693        %include temp;
109694        filename temp;
109695     
109696        %SetProperties;
109697     
109698        %if %upcase(&EM_ACTION) = CREATE %then %do;
109699     
109700            filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
109701            %include temp;
109702            filename temp;
109703            %create;
109704        %end;
109705        %else
109706        %if %upcase(&EM_ACTION) = TRAIN %then %do;
109707     
109708            filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
109709            %include temp;
109710            filename temp;
109711            %train;
109712     
109713        %end;
109714        %else
109715        %if %upcase(&EM_ACTION) = REPORT %then %do;
109716     
109717            filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
109718            %include temp;
109719            filename temp;
109720     
109721            %report;
109722        %end;
109723     
109724     %mend main;
109725     
109726     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
109727    +%macro SetProperties;
109728    +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
109729    +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
109730    +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
109731    +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
109732    +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
109733    +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
109734    +
109735    +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
109736    +%macro train;
109738    +    %let graphData = &em_import_data;
109739    +    %if "&graphData" eq "" %then
109740    +        %let graphData = &em_import_transaction;
109741    +    %if "&graphData" eq "" %then
109742    +        %let graphData = &em_import_document;
109743    +    %if "&graphData" eq "" %then
109744    +        %let graphData = &em_import_validate;
109745    +    %if "&graphData" eq "" %then
109746    +        %let graphData = &em_import_test;
109747    +    %if "&graphData" eq "" %then
109748    +        %let graphData = &em_import_score;
109750    +    %if "&graphData" eq "" %then %do;
109751    +        %let emexceptionString = exception.server.IMPORT.NODATA;
109752    +        %goto doendm;
109753    +    %end;
109755    +    %em_getname(key=SAMPLE_DATA, type=DATA);
109757    +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
109758    +    %include vartemp;
109759    +    filename vartemp;
109761    +    data tempVariableSet;
109762    +       set &em_data_variableset;
109763    +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
109764    +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
109765    +    run;
109766    +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
109769    +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
109770    +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
109771    +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
109773    +    %doendm:
109775    +%mend train;
109777    +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
109778    +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
109779    +   filename macFile catalog 'work.emutil.macro.source';
109780    +   %let _METAOBS = 0;
109782    +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
109783    +                   or (&metadata eq ) %then %do;
109784    +       %goto doend;
109785    +   %end;
109786    +   data _null_;
109787    +      length _STRING_ $80;
109788    +      retain _STRING_;
109789    +      set &metadata end=eof;
109790    +      file macFile;
109791    +      %if %nrbquote(&where) ne %then %do;
109792    +          %let whereClause = where (%nrbquote(&where));
109793    +          %unquote(&whereClause);
109794    +      %end;
109795    +      if _N_=1 then do;
109796    +         string = "%"!!"macro &name;";
109797    +         put string;
109798    +      end;
109799    +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
109800    +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
109801    +         if eof then do;
109802    +            put _STRING_;
109803    +            string = "%"!!"mend &name;";
109804    +            put string;
109805    +            %if (&nummacro ne ) %then %do;
109806    +                string = strip(put(_N_, best.));
109807    +                put "%" "global &nummacro;";
109808    +                put "%" "let &nummacro = " string ";";
109809    +                call symput('_METAOBS', string);
109810    +            %end;
109811    +         end;
109812    +      end;
109813    +      else do;
109814    +         put _STRING_;
109815    +         _string_ = TRIM(&key);
109816    +         if eof then do;
109817    +            put _STRING_;
109818    +            string = "%"!!"mend &name;";
109819    +            put string;
109820    +        end;
109821    +      end;
109822    +      if eof then do;
109823    +         string = strip(put(_N_, best.));
109824    +         call symput('_METAOBS', string);
109825    +         %if (&nummacro ne ) %then %do;
109826    +             put "%" "global &nummacro;";
109827    +             put "%" "let &nummacro = " string ";";
109828    +         %end;
109829    +      end;
109830    +   run;
109832    +   %doend:
109833    +   %if ^&_METAOBS %then %do;
109834    +       data _null_;
109835    +          file macFile;
109836    +          put "%" "macro &name;";
109837    +          put "%" "mend &name;";
109838    +          %if (&nummacro ne ) %then %do;
109839    +              put "%" "global &nummacro;";
109840    +              put "%" "let &nummacro = 0;";
109841    +          %end;
109842    +      run;
109843    +   %end;
109844    +   %inc macFile;
109845    +   filename macFile;
109846    +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Dienstag, 19. April 2016 17.21 Uhr,
      Last Modified=Dienstag, 19. April 2016 17.21 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD15536_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
109847    +%macro varSample;
109848    +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
109849    +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
109850    +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
109851    +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
109852    +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
109853    +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
109854    +%mend varSample;
109855    +%global numVarSample;
109856    +%let numVarSample = 36 ;
109857    +%global numVarSample;
109858    +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
109859    +/*------------------------------------------------------------------
109860    +  MACRO EXPLOREOBS
109862    +  SUPPORT:  SASDHD - David Duling
109863    +  PRODUCT:  Enterprise Miner
109865    +  DESCRIPTION:
109866    +  Generates maximum and default numbers of observations to
109867    +  download for visualization depending on the record length.
109869    +  Values were determined by trial and error using typical
109870    +  Windows workstation configurations.
109872    +  Discrete sets of values are returned so that user experience
109873    +  will be consitent with similar sized data sets.
109875    +  These macro variables are set:
109876    +  _exploreobs_max -- maximum number of obs downloadable
109877    +  _exploreobs_def -- default number of obs to be downloaded
109878    +  _exploreobs_recl - record length.  Might be useful for reporting.
109880    +  Use the _exploreobs_max to set limit the GUI selection of
109881    +  observations for downloading.  The GUI selection for obs
109882    +  could be reduced to "Default" and "Max".
109884    +  Parameters
109885    +  data=   libname.memname of input data
109886    +  vars=   subset list of variables.
109887    +          downloading 1 out of 500 really does work like downloading
109888    +          1 out of 1 vars.  Users may select a subset of vars for
109889    +                   visualizations.  Pass in the list as space delimited
109890    +          var names.  If vars is not specified, the record length
109891    +          of the entire data will be used.
109892    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
109894    +  Control
109895    +  Users may control the values by entering these macro variables.
109896    +            EM_EXPLOREOBS_MAX
109897    +            EM_EXPLOREOBS_DEFAULT
109898    +  These values override the computed values.
109900    +  Debugging
109901    +  %let _exploreobs_debug=1 ;
109902    +--------------------------------------------------------------------
109903    +  HISTORY: 20APR2004. sasdhd. pushed.
109904    +           18DEC2004. sasdhd. S0280556.
109905    +           07SEP2007. sasdhd. HK1009586
109906    +--------------------------------------------------------------------*/
109908    +%macro exploreobs(data=,vars=, nbytes=) ;
109910    +   /*--- variable definitions ---*/
109911    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
109912    +   %local xobs xvars xlen vlen xi vname vlist ;
109913    +   %local _exp_source _exp_notes ;
109915    +   /*--- USER definitions ---*/
109916    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
109918    +   /*--- variable intializations ---*/
109919    +   %let _exploreobs_max=0 ;
109920    +   %let _exploreobs_def=0 ;
109921    +   %let _exploreobs_recl=0 ;
109922    +   %let xvars= 0 ;
109923    +   %let xlen = 0 ;
109924    +   %let xobs = 0 ;
109926    +   /*--- data error checks ---*/
109927    +   %if "&data" eq "" %then %do ;
109928    +            %put NOTE: DATA is not specified. ;
109929    +            %goto term ;
109930    +      %end ;
109932    +   %let dsid=%sysfunc(open(&data)) ;
109933    +   %if not &dsid %then %do ;
109934    +            %put NOTE: DATA &data is not available. ;
109935    +            %goto term ;
109936    +      %end ;
109938    +   /*--- if a vars list exists generate a subset ---*/
109939    +   %if &vars ne %then %do ;
109940    +         %let dsid=%sysfunc(close(&dsid)) ;
109941    +         %if &_exploreobs_debug ne 1 %then %do ;
109942    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
109943    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
109944    +                  options nosource nonotes ;
109945    +         %end ;
109946    +         data _exploreobs_temp_data ;
109947    +         set &data(obs=0) ;
109948    +          keep &vars ;
109949    +         run;
109950    +         %if &_exploreobs_debug ne 1 %then %do ;
109951    +                  options &_exp_source &_exp_notes ;
109952    +         %end ;
109953    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
109954    +         %if &dsid eq 0 %then %do ;
109955    +                  %put NOTE: Sample is not available.;
109956    +                  %goto term ;
109957    +            %end ;
109958    +      %end ;
109960    +   /*--- get var attributes ---*/
109961    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
109962    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
109963    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
109964    +   %let dsid= %sysfunc(close(&dsid)) ;
109966    +   /*--- set default and max obs ---*/
109967    +   %let _exploreobs_recl=%eval(&xlen) ;
109968    +   %if &_exploreobs_recl eq 0 %then %do ;
109969    +             %let _exploreobs_max= 0 ;
109970    +             %let _exploreobs_def= 0 ;
109971    +             %goto term ;
109973    +   %end ;
109974    +   %else
109975    +   %if &_exploreobs_recl le 32 %then %do ;
109976    +             %let _exploreobs_max=100000 ;
109977    +             %let _exploreobs_def= 10000 ;
109978    +   %end ;
109979    +   %else
109980    +   %if &_exploreobs_recl le 128 %then %do ;
109981    +             %let _exploreobs_max=60000 ;
109982    +             %let _exploreobs_def= 6000 ;
109983    +   %end ;
109984    +   %else
109985    +   %if &_exploreobs_recl lt 1000 %then %do ;
109986    +             %let _exploreobs_max=20000 ;
109987    +             %let _exploreobs_def= 2000 ;
109988    +   %end ;
109989    +   %else
109990    +   %if &_exploreobs_recl lt 5000 %then %do ;
109991    +             %let _exploreobs_max= 10000 ;
109992    +             %let _exploreobs_def=  1000 ;
109993    +   %end ;
109994    +   %else
109995    +   %if &_exploreobs_recl lt 20000 %then %do ;
109996    +             %let _exploreobs_max= 5000 ;
109997    +             %let _exploreobs_def=  500 ;
109998    +   %end ;
109999    +   %else %do ;
110000    +             %let _exploreobs_max= 1000 ;
110001    +             %let _exploreobs_def=  200 ;
110002    +   %end ;
110004    +   /*--- Users options ---*/
110005    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
110006    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
110007    +   %end;
110008    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
110009    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
110010    +   %end;
110012    +    /*--- S0868273 ---*/
110013    +    %if "&NBYTES" ne "" %then %do;
110014    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
110015    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
110016    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
110017    +       %end;
110019    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
110020    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
110021    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
110022    +          %if ^&_exploreobs_def %then
110023    +              %let _exploreobs_def = 1;
110025    +       %end;
110026    +    %end;
110028    +   /*--- Terminate ---*/
110029    +   %term:
110031    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
110032    +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
110035    +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
110036    +   filename macFile catalog 'work.emutil.macro.source';
110037    +   %let _METAOBS = 0;
110039    +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
110040    +                   or (&metadata eq ) %then %do;
110041    +       %goto doend;
110042    +   %end;
110043    +   data _null_;
110044    +      length _STRING_ $80;
110045    +      retain _STRING_;
110046    +      set &metadata end=eof;
110047    +      file macFile;
110048    +      %if %nrbquote(&where) ne %then %do;
110049    +          %let whereClause = where (%nrbquote(&where));
110050    +          %unquote(&whereClause);
110051    +      %end;
110052    +      if _N_=1 then do;
110053    +         string = "%"!!"macro &name;";
110054    +         put string;
110055    +      end;
110056    +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
110057    +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
110058    +         if eof then do;
110059    +            put _STRING_;
110060    +            string = "%"!!"mend &name;";
110061    +            put string;
110062    +            %if (&nummacro ne ) %then %do;
110063    +                string = strip(put(_N_, best.));
110064    +                put "%" "global &nummacro;";
110065    +                put "%" "let &nummacro = " string ";";
110066    +                call symput('_METAOBS', string);
110067    +            %end;
110068    +         end;
110069    +      end;
110070    +      else do;
110071    +         put _STRING_;
110072    +         _string_ = TRIM(&key);
110073    +         if eof then do;
110074    +            put _STRING_;
110075    +            string = "%"!!"mend &name;";
110076    +            put string;
110077    +        end;
110078    +      end;
110079    +      if eof then do;
110080    +         string = strip(put(_N_, best.));
110081    +         call symput('_METAOBS', string);
110082    +         %if (&nummacro ne ) %then %do;
110083    +             put "%" "global &nummacro;";
110084    +             put "%" "let &nummacro = " string ";";
110085    +         %end;
110086    +      end;
110087    +   run;
110089    +   %doend:
110090    +   %if ^&_METAOBS %then %do;
110091    +       data _null_;
110092    +          file macFile;
110093    +          put "%" "macro &name;";
110094    +          put "%" "mend &name;";
110095    +          %if (&nummacro ne ) %then %do;
110096    +              put "%" "global &nummacro;";
110097    +              put "%" "let &nummacro = 0;";
110098    +          %end;
110099    +      run;
110100    +   %end;
110101    +   %inc macFile;
110102    +   filename macFile;
110103    +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Dienstag, 19. April 2016 17.21 Uhr,
      Last Modified=Dienstag, 19. April 2016 17.21 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD15536_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
110104    +%macro varSample;
110105    +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
110106    +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
110107    +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
110108    +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
110109    +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
110110    +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
110111    +%mend varSample;
110112    +%global numVarSample;
110113    +%let numVarSample = 36 ;
110114    +%global numVarSample;
110115    +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
110116    +/*------------------------------------------------------------------
110117    +  MACRO EXPLOREOBS
110119    +  SUPPORT:  SASDHD - David Duling
110120    +  PRODUCT:  Enterprise Miner
110122    +  DESCRIPTION:
110123    +  Generates maximum and default numbers of observations to
110124    +  download for visualization depending on the record length.
110126    +  Values were determined by trial and error using typical
110127    +  Windows workstation configurations.
110129    +  Discrete sets of values are returned so that user experience
110130    +  will be consitent with similar sized data sets.
110132    +  These macro variables are set:
110133    +  _exploreobs_max -- maximum number of obs downloadable
110134    +  _exploreobs_def -- default number of obs to be downloaded
110135    +  _exploreobs_recl - record length.  Might be useful for reporting.
110137    +  Use the _exploreobs_max to set limit the GUI selection of
110138    +  observations for downloading.  The GUI selection for obs
110139    +  could be reduced to "Default" and "Max".
110141    +  Parameters
110142    +  data=   libname.memname of input data
110143    +  vars=   subset list of variables.
110144    +          downloading 1 out of 500 really does work like downloading
110145    +          1 out of 1 vars.  Users may select a subset of vars for
110146    +                   visualizations.  Pass in the list as space delimited
110147    +          var names.  If vars is not specified, the record length
110148    +          of the entire data will be used.
110149    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
110151    +  Control
110152    +  Users may control the values by entering these macro variables.
110153    +            EM_EXPLOREOBS_MAX
110154    +            EM_EXPLOREOBS_DEFAULT
110155    +  These values override the computed values.
110157    +  Debugging
110158    +  %let _exploreobs_debug=1 ;
110159    +--------------------------------------------------------------------
110160    +  HISTORY: 20APR2004. sasdhd. pushed.
110161    +           18DEC2004. sasdhd. S0280556.
110162    +           07SEP2007. sasdhd. HK1009586
110163    +--------------------------------------------------------------------*/
110165    +%macro exploreobs(data=,vars=, nbytes=) ;
110167    +   /*--- variable definitions ---*/
110168    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
110169    +   %local xobs xvars xlen vlen xi vname vlist ;
110170    +   %local _exp_source _exp_notes ;
110172    +   /*--- USER definitions ---*/
110173    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
110175    +   /*--- variable intializations ---*/
110176    +   %let _exploreobs_max=0 ;
110177    +   %let _exploreobs_def=0 ;
110178    +   %let _exploreobs_recl=0 ;
110179    +   %let xvars= 0 ;
110180    +   %let xlen = 0 ;
110181    +   %let xobs = 0 ;
110183    +   /*--- data error checks ---*/
110184    +   %if "&data" eq "" %then %do ;
110185    +            %put NOTE: DATA is not specified. ;
110186    +            %goto term ;
110187    +      %end ;
110189    +   %let dsid=%sysfunc(open(&data)) ;
110190    +   %if not &dsid %then %do ;
110191    +            %put NOTE: DATA &data is not available. ;
110192    +            %goto term ;
110193    +      %end ;
110195    +   /*--- if a vars list exists generate a subset ---*/
110196    +   %if &vars ne %then %do ;
110197    +         %let dsid=%sysfunc(close(&dsid)) ;
110198    +         %if &_exploreobs_debug ne 1 %then %do ;
110199    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
110200    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
110201    +                  options nosource nonotes ;
110202    +         %end ;
110203    +         data _exploreobs_temp_data ;
110204    +         set &data(obs=0) ;
110205    +          keep &vars ;
110206    +         run;
110207    +         %if &_exploreobs_debug ne 1 %then %do ;
110208    +                  options &_exp_source &_exp_notes ;
110209    +         %end ;
110210    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
110211    +         %if &dsid eq 0 %then %do ;
110212    +                  %put NOTE: Sample is not available.;
110213    +                  %goto term ;
110214    +            %end ;
110215    +      %end ;
110217    +   /*--- get var attributes ---*/
110218    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
110219    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
110220    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
110221    +   %let dsid= %sysfunc(close(&dsid)) ;
110223    +   /*--- set default and max obs ---*/
110224    +   %let _exploreobs_recl=%eval(&xlen) ;
110225    +   %if &_exploreobs_recl eq 0 %then %do ;
110226    +             %let _exploreobs_max= 0 ;
110227    +             %let _exploreobs_def= 0 ;
110228    +             %goto term ;
110230    +   %end ;
110231    +   %else
110232    +   %if &_exploreobs_recl le 32 %then %do ;
110233    +             %let _exploreobs_max=100000 ;
110234    +             %let _exploreobs_def= 10000 ;
110235    +   %end ;
110236    +   %else
110237    +   %if &_exploreobs_recl le 128 %then %do ;
110238    +             %let _exploreobs_max=60000 ;
110239    +             %let _exploreobs_def= 6000 ;
110240    +   %end ;
110241    +   %else
110242    +   %if &_exploreobs_recl lt 1000 %then %do ;
110243    +             %let _exploreobs_max=20000 ;
110244    +             %let _exploreobs_def= 2000 ;
110245    +   %end ;
110246    +   %else
110247    +   %if &_exploreobs_recl lt 5000 %then %do ;
110248    +             %let _exploreobs_max= 10000 ;
110249    +             %let _exploreobs_def=  1000 ;
110250    +   %end ;
110251    +   %else
110252    +   %if &_exploreobs_recl lt 20000 %then %do ;
110253    +             %let _exploreobs_max= 5000 ;
110254    +             %let _exploreobs_def=  500 ;
110255    +   %end ;
110256    +   %else %do ;
110257    +             %let _exploreobs_max= 1000 ;
110258    +             %let _exploreobs_def=  200 ;
110259    +   %end ;
110261    +   /*--- Users options ---*/
110262    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
110263    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
110264    +   %end;
110265    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
110266    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
110267    +   %end;
110269    +    /*--- S0868273 ---*/
110270    +    %if "&NBYTES" ne "" %then %do;
110271    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
110272    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
110273    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
110274    +       %end;
110276    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
110277    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
110278    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
110279    +          %if ^&_exploreobs_def %then
110280    +              %let _exploreobs_def = 1;
110282    +       %end;
110283    +    %end;
110285    +   /*--- Terminate ---*/
110286    +   %term:
110288    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
110289    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
110292     *------------------------------------------------------------*;
110293     * End TRAIN: GrfExpl;
110294     *------------------------------------------------------------*;
110295     

110296     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
110297     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
110298     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
110299     ;
MPRINT(EM_DIAGRAM):   ;
110300     ;
MPRINT(EM_DIAGRAM):   ;
110301     ;
MPRINT(EM_DIAGRAM):   ;
110302     ;
MPRINT(EM_DIAGRAM):   ;
110303     quit;
MPRINT(EM_DIAGRAM):   quit;
110304     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
110305     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
110306     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
110307     /*; *"; *'; */
110308     ;
MPRINT(EM_DIAGRAM):   ;
110309     run;
MPRINT(EM_DIAGRAM):   run;
110310     quit;
MPRINT(EM_DIAGRAM):   quit;
110311     /* Reset EM Options */
110312     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
110313     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
110314     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
