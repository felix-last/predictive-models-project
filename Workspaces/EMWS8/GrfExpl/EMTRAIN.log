MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16. April 2016
Time:                18.29 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1BA0TC0 "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1BA0TC0 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
60778      proc freq data=EMWS8.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.GrfExpl_VariableSet noprint;
60779      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
60780      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

60781      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
60782      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
60783      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
60784      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60785      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
60786      run;

NOTE: There were 6 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

60787      title10;
MPRINT(EM_DIAGRAM):   title10;
60788      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61131      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61132      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
61133      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
61134      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

61135      %let EMEXCEPTIONSTRING=;
61136      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61137      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
61138      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61139      %let EM_ACTION = TRAIN;
61140      %let syscc = 0;
61141      %macro main;
61142         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
61143         %include temp;
61144         filename temp;
61145      
61146         %SetProperties;
61147      
61148         %if %upcase(&EM_ACTION) = CREATE %then %do;
61149      
61150             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
61151             %include temp;
61152             filename temp;
61153             %create;
61154         %end;
61155         %else
61156         %if %upcase(&EM_ACTION) = TRAIN %then %do;
61157      
61158             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
61159             %include temp;
61160             filename temp;
61161             %train;
61162      
61163         %end;
61164         %else
61165         %if %upcase(&EM_ACTION) = REPORT %then %do;
61166      
61167             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
61168             %include temp;
61169             filename temp;
61170      
61171             %report;
61172         %end;
61173      
61174      %mend main;
61175      
61176      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
61177     +%macro SetProperties;
61178     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
61179     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
61180     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
61181     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
61182     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
61183     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
61184     +
61185     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
61186     +%macro train;
61188     +    %let graphData = &em_import_data;
61189     +    %if "&graphData" eq "" %then
61190     +        %let graphData = &em_import_transaction;
61191     +    %if "&graphData" eq "" %then
61192     +        %let graphData = &em_import_document;
61193     +    %if "&graphData" eq "" %then
61194     +        %let graphData = &em_import_validate;
61195     +    %if "&graphData" eq "" %then
61196     +        %let graphData = &em_import_test;
61197     +    %if "&graphData" eq "" %then
61198     +        %let graphData = &em_import_score;
61200     +    %if "&graphData" eq "" %then %do;
61201     +        %let emexceptionString = exception.server.IMPORT.NODATA;
61202     +        %goto doendm;
61203     +    %end;
61205     +    %em_getname(key=SAMPLE_DATA, type=DATA);
61207     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
61208     +    %include vartemp;
61209     +    filename vartemp;
61211     +    data tempVariableSet;
61212     +       set &em_data_variableset;
61213     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
61214     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
61215     +    run;
61216     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
61219     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
61220     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
61221     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
61223     +    %doendm:
61225     +%mend train;
61227     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
61228     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
61229     +   filename macFile catalog 'work.emutil.macro.source';
61230     +   %let _METAOBS = 0;
61232     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
61233     +                   or (&metadata eq ) %then %do;
61234     +       %goto doend;
61235     +   %end;
61236     +   data _null_;
61237     +      length _STRING_ $80;
61238     +      retain _STRING_;
61239     +      set &metadata end=eof;
61240     +      file macFile;
61241     +      %if %nrbquote(&where) ne %then %do;
61242     +          %let whereClause = where (%nrbquote(&where));
61243     +          %unquote(&whereClause);
61244     +      %end;
61245     +      if _N_=1 then do;
61246     +         string = "%"!!"macro &name;";
61247     +         put string;
61248     +      end;
61249     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
61250     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
61251     +         if eof then do;
61252     +            put _STRING_;
61253     +            string = "%"!!"mend &name;";
61254     +            put string;
61255     +            %if (&nummacro ne ) %then %do;
61256     +                string = strip(put(_N_, best.));
61257     +                put "%" "global &nummacro;";
61258     +                put "%" "let &nummacro = " string ";";
61259     +                call symput('_METAOBS', string);
61260     +            %end;
61261     +         end;
61262     +      end;
61263     +      else do;
61264     +         put _STRING_;
61265     +         _string_ = TRIM(&key);
61266     +         if eof then do;
61267     +            put _STRING_;
61268     +            string = "%"!!"mend &name;";
61269     +            put string;
61270     +        end;
61271     +      end;
61272     +      if eof then do;
61273     +         string = strip(put(_N_, best.));
61274     +         call symput('_METAOBS', string);
61275     +         %if (&nummacro ne ) %then %do;
61276     +             put "%" "global &nummacro;";
61277     +             put "%" "let &nummacro = " string ";";
61278     +         %end;
61279     +      end;
61280     +   run;
61282     +   %doend:
61283     +   %if ^&_METAOBS %then %do;
61284     +       data _null_;
61285     +          file macFile;
61286     +          put "%" "macro &name;";
61287     +          put "%" "mend &name;";
61288     +          %if (&nummacro ne ) %then %do;
61289     +              put "%" "global &nummacro;";
61290     +              put "%" "let &nummacro = 0;";
61291     +          %end;
61292     +      run;
61293     +   %end;
61294     +   %inc macFile;
61295     +   filename macFile;
61296     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Samstag, 16. April 2016 18.29 Uhr,
      Last Modified=Samstag, 16. April 2016 18.29 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD44624_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
61297     +%macro varSample;
61298     +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
61299     +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
61300     +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
61301     +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
61302     +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
61303     +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
61304     +%mend varSample;
61305     +%global numVarSample;
61306     +%let numVarSample = 36 ;
61307     +%global numVarSample;
61308     +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
61309     +/*------------------------------------------------------------------
61310     +  MACRO EXPLOREOBS
61312     +  SUPPORT:  SASDHD - David Duling
61313     +  PRODUCT:  Enterprise Miner
61315     +  DESCRIPTION:
61316     +  Generates maximum and default numbers of observations to
61317     +  download for visualization depending on the record length.
61319     +  Values were determined by trial and error using typical
61320     +  Windows workstation configurations.
61322     +  Discrete sets of values are returned so that user experience
61323     +  will be consitent with similar sized data sets.
61325     +  These macro variables are set:
61326     +  _exploreobs_max -- maximum number of obs downloadable
61327     +  _exploreobs_def -- default number of obs to be downloaded
61328     +  _exploreobs_recl - record length.  Might be useful for reporting.
61330     +  Use the _exploreobs_max to set limit the GUI selection of
61331     +  observations for downloading.  The GUI selection for obs
61332     +  could be reduced to "Default" and "Max".
61334     +  Parameters
61335     +  data=   libname.memname of input data
61336     +  vars=   subset list of variables.
61337     +          downloading 1 out of 500 really does work like downloading
61338     +          1 out of 1 vars.  Users may select a subset of vars for
61339     +                   visualizations.  Pass in the list as space delimited
61340     +          var names.  If vars is not specified, the record length
61341     +          of the entire data will be used.
61342     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
61344     +  Control
61345     +  Users may control the values by entering these macro variables.
61346     +            EM_EXPLOREOBS_MAX
61347     +            EM_EXPLOREOBS_DEFAULT
61348     +  These values override the computed values.
61350     +  Debugging
61351     +  %let _exploreobs_debug=1 ;
61352     +--------------------------------------------------------------------
61353     +  HISTORY: 20APR2004. sasdhd. pushed.
61354     +           18DEC2004. sasdhd. S0280556.
61355     +           07SEP2007. sasdhd. HK1009586
61356     +--------------------------------------------------------------------*/
61358     +%macro exploreobs(data=,vars=, nbytes=) ;
61360     +   /*--- variable definitions ---*/
61361     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
61362     +   %local xobs xvars xlen vlen xi vname vlist ;
61363     +   %local _exp_source _exp_notes ;
61365     +   /*--- USER definitions ---*/
61366     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
61368     +   /*--- variable intializations ---*/
61369     +   %let _exploreobs_max=0 ;
61370     +   %let _exploreobs_def=0 ;
61371     +   %let _exploreobs_recl=0 ;
61372     +   %let xvars= 0 ;
61373     +   %let xlen = 0 ;
61374     +   %let xobs = 0 ;
61376     +   /*--- data error checks ---*/
61377     +   %if "&data" eq "" %then %do ;
61378     +            %put NOTE: DATA is not specified. ;
61379     +            %goto term ;
61380     +      %end ;
61382     +   %let dsid=%sysfunc(open(&data)) ;
61383     +   %if not &dsid %then %do ;
61384     +            %put NOTE: DATA &data is not available. ;
61385     +            %goto term ;
61386     +      %end ;
61388     +   /*--- if a vars list exists generate a subset ---*/
61389     +   %if &vars ne %then %do ;
61390     +         %let dsid=%sysfunc(close(&dsid)) ;
61391     +         %if &_exploreobs_debug ne 1 %then %do ;
61392     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
61393     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
61394     +                  options nosource nonotes ;
61395     +         %end ;
61396     +         data _exploreobs_temp_data ;
61397     +         set &data(obs=0) ;
61398     +          keep &vars ;
61399     +         run;
61400     +         %if &_exploreobs_debug ne 1 %then %do ;
61401     +                  options &_exp_source &_exp_notes ;
61402     +         %end ;
61403     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
61404     +         %if &dsid eq 0 %then %do ;
61405     +                  %put NOTE: Sample is not available.;
61406     +                  %goto term ;
61407     +            %end ;
61408     +      %end ;
61410     +   /*--- get var attributes ---*/
61411     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
61412     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
61413     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
61414     +   %let dsid= %sysfunc(close(&dsid)) ;
61416     +   /*--- set default and max obs ---*/
61417     +   %let _exploreobs_recl=%eval(&xlen) ;
61418     +   %if &_exploreobs_recl eq 0 %then %do ;
61419     +             %let _exploreobs_max= 0 ;
61420     +             %let _exploreobs_def= 0 ;
61421     +             %goto term ;
61423     +   %end ;
61424     +   %else
61425     +   %if &_exploreobs_recl le 32 %then %do ;
61426     +             %let _exploreobs_max=100000 ;
61427     +             %let _exploreobs_def= 10000 ;
61428     +   %end ;
61429     +   %else
61430     +   %if &_exploreobs_recl le 128 %then %do ;
61431     +             %let _exploreobs_max=60000 ;
61432     +             %let _exploreobs_def= 6000 ;
61433     +   %end ;
61434     +   %else
61435     +   %if &_exploreobs_recl lt 1000 %then %do ;
61436     +             %let _exploreobs_max=20000 ;
61437     +             %let _exploreobs_def= 2000 ;
61438     +   %end ;
61439     +   %else
61440     +   %if &_exploreobs_recl lt 5000 %then %do ;
61441     +             %let _exploreobs_max= 10000 ;
61442     +             %let _exploreobs_def=  1000 ;
61443     +   %end ;
61444     +   %else
61445     +   %if &_exploreobs_recl lt 20000 %then %do ;
61446     +             %let _exploreobs_max= 5000 ;
61447     +             %let _exploreobs_def=  500 ;
61448     +   %end ;
61449     +   %else %do ;
61450     +             %let _exploreobs_max= 1000 ;
61451     +             %let _exploreobs_def=  200 ;
61452     +   %end ;
61454     +   /*--- Users options ---*/
61455     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
61456     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
61457     +   %end;
61458     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61459     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
61460     +   %end;
61462     +    /*--- S0868273 ---*/
61463     +    %if "&NBYTES" ne "" %then %do;
61464     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
61465     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
61466     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
61467     +       %end;
61469     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61470     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
61471     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
61472     +          %if ^&_exploreobs_def %then
61473     +              %let _exploreobs_def = 1;
61475     +       %end;
61476     +    %end;
61478     +   /*--- Terminate ---*/
61479     +   %term:
61481     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
61482     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
61485     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
61486     +   filename macFile catalog 'work.emutil.macro.source';
61487     +   %let _METAOBS = 0;
61489     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
61490     +                   or (&metadata eq ) %then %do;
61491     +       %goto doend;
61492     +   %end;
61493     +   data _null_;
61494     +      length _STRING_ $80;
61495     +      retain _STRING_;
61496     +      set &metadata end=eof;
61497     +      file macFile;
61498     +      %if %nrbquote(&where) ne %then %do;
61499     +          %let whereClause = where (%nrbquote(&where));
61500     +          %unquote(&whereClause);
61501     +      %end;
61502     +      if _N_=1 then do;
61503     +         string = "%"!!"macro &name;";
61504     +         put string;
61505     +      end;
61506     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
61507     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
61508     +         if eof then do;
61509     +            put _STRING_;
61510     +            string = "%"!!"mend &name;";
61511     +            put string;
61512     +            %if (&nummacro ne ) %then %do;
61513     +                string = strip(put(_N_, best.));
61514     +                put "%" "global &nummacro;";
61515     +                put "%" "let &nummacro = " string ";";
61516     +                call symput('_METAOBS', string);
61517     +            %end;
61518     +         end;
61519     +      end;
61520     +      else do;
61521     +         put _STRING_;
61522     +         _string_ = TRIM(&key);
61523     +         if eof then do;
61524     +            put _STRING_;
61525     +            string = "%"!!"mend &name;";
61526     +            put string;
61527     +        end;
61528     +      end;
61529     +      if eof then do;
61530     +         string = strip(put(_N_, best.));
61531     +         call symput('_METAOBS', string);
61532     +         %if (&nummacro ne ) %then %do;
61533     +             put "%" "global &nummacro;";
61534     +             put "%" "let &nummacro = " string ";";
61535     +         %end;
61536     +      end;
61537     +   run;
61539     +   %doend:
61540     +   %if ^&_METAOBS %then %do;
61541     +       data _null_;
61542     +          file macFile;
61543     +          put "%" "macro &name;";
61544     +          put "%" "mend &name;";
61545     +          %if (&nummacro ne ) %then %do;
61546     +              put "%" "global &nummacro;";
61547     +              put "%" "let &nummacro = 0;";
61548     +          %end;
61549     +      run;
61550     +   %end;
61551     +   %inc macFile;
61552     +   filename macFile;
61553     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS8.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 36 observations read from the data set EMWS8.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 36 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Samstag, 16. April 2016 18.29 Uhr,
      Last Modified=Samstag, 16. April 2016 18.29 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD44624_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 12 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 79.
NOTE: There were 36 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
61554     +%macro varSample;
61555     +AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
61556     +AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary
61557     +Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
61558     +MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
61559     +NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
61560     +NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_
61561     +%mend varSample;
61562     +%global numVarSample;
61563     +%let numVarSample = 36 ;
61564     +%global numVarSample;
61565     +%let numVarSample = 36 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
61566     +/*------------------------------------------------------------------
61567     +  MACRO EXPLOREOBS
61569     +  SUPPORT:  SASDHD - David Duling
61570     +  PRODUCT:  Enterprise Miner
61572     +  DESCRIPTION:
61573     +  Generates maximum and default numbers of observations to
61574     +  download for visualization depending on the record length.
61576     +  Values were determined by trial and error using typical
61577     +  Windows workstation configurations.
61579     +  Discrete sets of values are returned so that user experience
61580     +  will be consitent with similar sized data sets.
61582     +  These macro variables are set:
61583     +  _exploreobs_max -- maximum number of obs downloadable
61584     +  _exploreobs_def -- default number of obs to be downloaded
61585     +  _exploreobs_recl - record length.  Might be useful for reporting.
61587     +  Use the _exploreobs_max to set limit the GUI selection of
61588     +  observations for downloading.  The GUI selection for obs
61589     +  could be reduced to "Default" and "Max".
61591     +  Parameters
61592     +  data=   libname.memname of input data
61593     +  vars=   subset list of variables.
61594     +          downloading 1 out of 500 really does work like downloading
61595     +          1 out of 1 vars.  Users may select a subset of vars for
61596     +                   visualizations.  Pass in the list as space delimited
61597     +          var names.  If vars is not specified, the record length
61598     +          of the entire data will be used.
61599     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
61601     +  Control
61602     +  Users may control the values by entering these macro variables.
61603     +            EM_EXPLOREOBS_MAX
61604     +            EM_EXPLOREOBS_DEFAULT
61605     +  These values override the computed values.
61607     +  Debugging
61608     +  %let _exploreobs_debug=1 ;
61609     +--------------------------------------------------------------------
61610     +  HISTORY: 20APR2004. sasdhd. pushed.
61611     +           18DEC2004. sasdhd. S0280556.
61612     +           07SEP2007. sasdhd. HK1009586
61613     +--------------------------------------------------------------------*/
61615     +%macro exploreobs(data=,vars=, nbytes=) ;
61617     +   /*--- variable definitions ---*/
61618     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
61619     +   %local xobs xvars xlen vlen xi vname vlist ;
61620     +   %local _exp_source _exp_notes ;
61622     +   /*--- USER definitions ---*/
61623     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
61625     +   /*--- variable intializations ---*/
61626     +   %let _exploreobs_max=0 ;
61627     +   %let _exploreobs_def=0 ;
61628     +   %let _exploreobs_recl=0 ;
61629     +   %let xvars= 0 ;
61630     +   %let xlen = 0 ;
61631     +   %let xobs = 0 ;
61633     +   /*--- data error checks ---*/
61634     +   %if "&data" eq "" %then %do ;
61635     +            %put NOTE: DATA is not specified. ;
61636     +            %goto term ;
61637     +      %end ;
61639     +   %let dsid=%sysfunc(open(&data)) ;
61640     +   %if not &dsid %then %do ;
61641     +            %put NOTE: DATA &data is not available. ;
61642     +            %goto term ;
61643     +      %end ;
61645     +   /*--- if a vars list exists generate a subset ---*/
61646     +   %if &vars ne %then %do ;
61647     +         %let dsid=%sysfunc(close(&dsid)) ;
61648     +         %if &_exploreobs_debug ne 1 %then %do ;
61649     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
61650     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
61651     +                  options nosource nonotes ;
61652     +         %end ;
61653     +         data _exploreobs_temp_data ;
61654     +         set &data(obs=0) ;
61655     +          keep &vars ;
61656     +         run;
61657     +         %if &_exploreobs_debug ne 1 %then %do ;
61658     +                  options &_exp_source &_exp_notes ;
61659     +         %end ;
61660     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
61661     +         %if &dsid eq 0 %then %do ;
61662     +                  %put NOTE: Sample is not available.;
61663     +                  %goto term ;
61664     +            %end ;
61665     +      %end ;
61667     +   /*--- get var attributes ---*/
61668     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
61669     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
61670     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
61671     +   %let dsid= %sysfunc(close(&dsid)) ;
61673     +   /*--- set default and max obs ---*/
61674     +   %let _exploreobs_recl=%eval(&xlen) ;
61675     +   %if &_exploreobs_recl eq 0 %then %do ;
61676     +             %let _exploreobs_max= 0 ;
61677     +             %let _exploreobs_def= 0 ;
61678     +             %goto term ;
61680     +   %end ;
61681     +   %else
61682     +   %if &_exploreobs_recl le 32 %then %do ;
61683     +             %let _exploreobs_max=100000 ;
61684     +             %let _exploreobs_def= 10000 ;
61685     +   %end ;
61686     +   %else
61687     +   %if &_exploreobs_recl le 128 %then %do ;
61688     +             %let _exploreobs_max=60000 ;
61689     +             %let _exploreobs_def= 6000 ;
61690     +   %end ;
61691     +   %else
61692     +   %if &_exploreobs_recl lt 1000 %then %do ;
61693     +             %let _exploreobs_max=20000 ;
61694     +             %let _exploreobs_def= 2000 ;
61695     +   %end ;
61696     +   %else
61697     +   %if &_exploreobs_recl lt 5000 %then %do ;
61698     +             %let _exploreobs_max= 10000 ;
61699     +             %let _exploreobs_def=  1000 ;
61700     +   %end ;
61701     +   %else
61702     +   %if &_exploreobs_recl lt 20000 %then %do ;
61703     +             %let _exploreobs_max= 5000 ;
61704     +             %let _exploreobs_def=  500 ;
61705     +   %end ;
61706     +   %else %do ;
61707     +             %let _exploreobs_max= 1000 ;
61708     +             %let _exploreobs_def=  200 ;
61709     +   %end ;
61711     +   /*--- Users options ---*/
61712     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
61713     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
61714     +   %end;
61715     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61716     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
61717     +   %end;
61719     +    /*--- S0868273 ---*/
61720     +    %if "&NBYTES" ne "" %then %do;
61721     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
61722     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
61723     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
61724     +       %end;
61726     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
61727     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
61728     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
61729     +          %if ^&_exploreobs_def %then
61730     +              %let _exploreobs_def = 1;
61732     +       %end;
61733     +    %end;
61735     +   /*--- Terminate ---*/
61736     +   %term:
61738     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
61739     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS8.Part_TRAIN(obs=0) ;
MPRINT(EXPLOREOBS):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds 
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS8.Part_TRAIN : vars= 36 : recl= 296 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS8.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS8.Part_TRAIN(obs= 2000 Keep=AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain Custid DepVar Education Frq HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts 
MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth _dataobs_ );
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2000 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.GRFEXPL_SAMPLE_DATA has 2000 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61742      *------------------------------------------------------------*;
61743      * End TRAIN: GrfExpl;
61744      *------------------------------------------------------------*;
61745      

61746      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61747      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
61748      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61749      ;
MPRINT(EM_DIAGRAM):   ;
61750      ;
MPRINT(EM_DIAGRAM):   ;
61751      ;
MPRINT(EM_DIAGRAM):   ;
61752      ;
MPRINT(EM_DIAGRAM):   ;
61753      quit;
MPRINT(EM_DIAGRAM):   quit;
61754      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61755      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
61756      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61757      /*; *"; *'; */
61758      ;
MPRINT(EM_DIAGRAM):   ;
61759      run;
MPRINT(EM_DIAGRAM):   run;
61760      quit;
MPRINT(EM_DIAGRAM):   quit;
61761      /* Reset EM Options */
61762      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
61763      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
61764      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
