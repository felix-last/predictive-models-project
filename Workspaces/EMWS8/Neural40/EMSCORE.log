MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.06 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                20.06 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O26M1DC6 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O26M1DC6 new;
MPRINT(EM_DIAGRAM):   run;
843634     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
843635     set EMWS8.Neural40_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural40_OUTKEY;
843636     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
843637     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS8.NEURAL40_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

843638     filename emflow
843638   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural40: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
843639     *------------------------------------------------------------*;
843640     * Neural40: Scoring DATA data;
843641     *------------------------------------------------------------*;
843642     data EMWS8.Neural40_TRAIN
843643     / view=EMWS8.Neural40_TRAIN
843644     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural40_TRAIN / view=EMWS8.Neural40_TRAIN ;
843645     set EMWS8.Meta3_TRAIN
843646     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN ;
843647     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas.
843648    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
843649    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
843650    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
843651    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
843652    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
843653    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
843654    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
843655    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
843656    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
843657    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
843658    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
843659    +LENGTH _WARN_ $4
843660    +      F_DepVar  $ 12
843661    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
843662    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
843663    +
843664    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
843665    +
843666    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
843667    +
843668    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
843669    +
843670    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
843671    +
843672    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
843673    +
843674    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
843675    +
843676    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
843677    +
843678    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
843679    +
843680    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
843681    +
843682    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
843683    +
843684    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
843685    +
843686    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
843687    +
843688    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
843689    +
843690    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
843691    +
843692    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
843693    +
843694    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
843695    +
843696    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
843697    +
843698    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
843699    +
843700    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
843701    +
843702    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
843703    +
843704    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
843705    +
843706    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
843707    +
843708    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
843709    +
843710    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
843711    +
843712    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
843713    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
843714    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
843715    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
843716    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
843717    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
843718    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
843719    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
843720    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
843721    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
843722    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
843723    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
843724    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
843725    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
843726    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
843727    +end;
MPRINT(EM_DIAGRAM):   end;
843728    +else do;
MPRINT(EM_DIAGRAM):   else do;
843729    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
843730    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
843731    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
843732    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
843733    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
843734    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
843735    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
843736    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
843737    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
843738    +         end;
MPRINT(EM_DIAGRAM):   end;
843739    +         else do;
MPRINT(EM_DIAGRAM):   else do;
843740    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
843741    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
843742    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
843743    +            end;
MPRINT(EM_DIAGRAM):   end;
843744    +         end;
MPRINT(EM_DIAGRAM):   end;
843745    +      end;
MPRINT(EM_DIAGRAM):   end;
843746    +      else do;
MPRINT(EM_DIAGRAM):   else do;
843747    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
843748    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
843749    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
843750    +         end;
MPRINT(EM_DIAGRAM):   end;
843751    +      end;
MPRINT(EM_DIAGRAM):   end;
843752    +   end;
MPRINT(EM_DIAGRAM):   end;
843753    +   else do;
MPRINT(EM_DIAGRAM):   else do;
843754    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
843755    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
843756    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
843757    +      end;
MPRINT(EM_DIAGRAM):   end;
843758    +      else do;
MPRINT(EM_DIAGRAM):   else do;
843759    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
843760    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
843761    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
843762    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
843763    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
843764    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
843765    +         end;
MPRINT(EM_DIAGRAM):   end;
843766    +      end;
MPRINT(EM_DIAGRAM):   end;
843767    +   end;
MPRINT(EM_DIAGRAM):   end;
843768    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
843769    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
843770    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
843771    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
843772    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
843773    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
843774    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
843775    +   end;
MPRINT(EM_DIAGRAM):   end;
843776    +end;
MPRINT(EM_DIAGRAM):   end;
843777    +
843778    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843779    +*** Checking missing input Interval
843780    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
843781    +
843782    +IF NMISS(
843783    +   AcceptedCmpTotal ,
843784    +   Frq ,
843785    +   Mnt ,
843786    +   MntMeatProducts ,
843787    +   NumCatalogPurchases ,
843788    +   NumDealsPurchases ,
843789    +   NumWebVisitsMonth ,
843790    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Mnt , MntMeatProducts , 
NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , Recency ) THEN DO;
843791    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
843792    +
843793    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
843794    +END;
MPRINT(EM_DIAGRAM):   END;
843795    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843796    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
843797    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843798    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
843799    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
843800    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
843801    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
843802    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
843803    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
843804    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
843805    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
843806    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
843807    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
843808    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
843809    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
843810    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
843811    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
843812    +END;
MPRINT(EM_DIAGRAM):   END;
843813    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
843814    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
843815    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
843816    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
843817    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
843818    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
843819    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
843820    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
843821    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
843822    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
843823    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
843824    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
843825    +   ELSE S_NumCatalogPurchases
843826    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
843827    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
843828    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
843829    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
843830    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
843831    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
843832    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
843833    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
843834    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
843835    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
843836    +END;
MPRINT(EM_DIAGRAM):   END;
843837    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843838    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
843839    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843840    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843841    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
843842    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843843    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
843844    +   H11  =    -0.50937067326512 * S_AcceptedCmpTotal  +     0.59153604997173 *
843845    +        S_Frq  +     0.35109708191283 * S_Mnt  +    -0.54183123684873 *
843846    +        S_MntMeatProducts  +    -0.50968421326068 * S_NumCatalogPurchases
843847    +          +    -0.19046126117019 * S_NumDealsPurchases
843848    +          +    -0.51033119597715 * S_NumWebVisitsMonth
843849    +          +     0.81837864997249 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.50937067326512 * S_AcceptedCmpTotal + 0.59153604997173 * S_Frq 
+ 0.35109708191283 * S_Mnt + -0.54183123684873 * S_MntMeatProducts + -0.50968421326068 * 
S_NumCatalogPurchases + -0.19046126117019 * S_NumDealsPurchases + -0.51033119597715 * 
S_NumWebVisitsMonth + 0.81837864997249 * S_Recency ;
843850    +   H12  =     0.02025228046339 * S_AcceptedCmpTotal  +     0.99930163787509 *
843851    +        S_Frq  +     1.71070447604488 * S_Mnt  +     0.00262288180651 *
843852    +        S_MntMeatProducts  +    -0.26040107336488 * S_NumCatalogPurchases
843853    +          +     1.79245188553632 * S_NumDealsPurchases
843854    +          +     0.26061762777338 * S_NumWebVisitsMonth
843855    +          +     0.08976701277133 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.02025228046339 * S_AcceptedCmpTotal + 0.99930163787509 * S_Frq + 
1.71070447604488 * S_Mnt + 0.00262288180651 * S_MntMeatProducts + -0.26040107336488 * 
S_NumCatalogPurchases + 1.79245188553632 * S_NumDealsPurchases + 0.26061762777338 * 
S_NumWebVisitsMonth + 0.08976701277133 * S_Recency ;
843856    +   H13  =       0.104381332746 * S_AcceptedCmpTotal  +    -1.51764539772771 *
843857    +        S_Frq  +     0.93148616742855 * S_Mnt  +     2.93767108708116 *
843858    +        S_MntMeatProducts  +     0.79051284359814 * S_NumCatalogPurchases
843859    +          +     0.49339750797451 * S_NumDealsPurchases
843860    +          +    -0.25657630888957 * S_NumWebVisitsMonth
843861    +          +    -0.02783592802322 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.104381332746 * S_AcceptedCmpTotal + -1.51764539772771 * S_Frq + 
0.93148616742855 * S_Mnt + 2.93767108708116 * S_MntMeatProducts + 0.79051284359814 * 
S_NumCatalogPurchases + 0.49339750797451 * S_NumDealsPurchases + -0.25657630888957 * 
S_NumWebVisitsMonth + -0.02783592802322 * S_Recency ;
843862    +   H14  =     0.54135833698612 * S_AcceptedCmpTotal  +     1.35730431022222 *
843863    +        S_Frq  +     0.77200942468842 * S_Mnt  +    -1.51698500454254 *
843864    +        S_MntMeatProducts  +    -0.62605649177998 * S_NumCatalogPurchases
843865    +          +    -0.20841011025614 * S_NumDealsPurchases
843866    +          +    -0.95976462163535 * S_NumWebVisitsMonth
843867    +          +    -0.85153512604579 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.54135833698612 * S_AcceptedCmpTotal + 1.35730431022222 * S_Frq + 
0.77200942468842 * S_Mnt + -1.51698500454254 * S_MntMeatProducts + -0.62605649177998 * 
S_NumCatalogPurchases + -0.20841011025614 * S_NumDealsPurchases + -0.95976462163535 * 
S_NumWebVisitsMonth + -0.85153512604579 * S_Recency ;
843868    +   H15  =     0.45598292592982 * S_AcceptedCmpTotal  +     0.62149856604856 *
843869    +        S_Frq  +    -0.19094507833451 * S_Mnt  +     0.31024365368678 *
843870    +        S_MntMeatProducts  +     0.43336537836455 * S_NumCatalogPurchases
843871    +          +    -0.79330545518211 * S_NumDealsPurchases
843872    +          +     0.31692653945914 * S_NumWebVisitsMonth
843873    +          +    -0.82721510615104 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.45598292592982 * S_AcceptedCmpTotal + 0.62149856604856 * S_Frq + 
-0.19094507833451 * S_Mnt + 0.31024365368678 * S_MntMeatProducts + 0.43336537836455 * 
S_NumCatalogPurchases + -0.79330545518211 * S_NumDealsPurchases + 0.31692653945914 * 
S_NumWebVisitsMonth + -0.82721510615104 * S_Recency ;
843874    +   H11  = H11  +    -0.25100863467838 * Marital_StatusDivorced
843875    +          +     0.15562142019257 * Marital_StatusMarried
843876    +          +    -0.11924929825992 * Marital_StatusSingle
843877    +          +     0.19445161712576 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.25100863467838 * Marital_StatusDivorced + 
0.15562142019257 * Marital_StatusMarried + -0.11924929825992 * Marital_StatusSingle + 
0.19445161712576 * Marital_StatusTogether ;
843878    +   H12  = H12  +     0.58193215591516 * Marital_StatusDivorced
843879    +          +     0.27485963958922 * Marital_StatusMarried
843880    +          +    -0.46136322561544 * Marital_StatusSingle
843881    +          +     1.17785849262888 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.58193215591516 * Marital_StatusDivorced + 0.27485963958922 
* Marital_StatusMarried + -0.46136322561544 * Marital_StatusSingle + 1.17785849262888 * 
Marital_StatusTogether ;
843882    +   H13  = H13  +    -0.55576156297846 * Marital_StatusDivorced
843883    +          +     0.18663773247842 * Marital_StatusMarried
843884    +          +    -0.14692184711639 * Marital_StatusSingle
843885    +          +     0.40795003682635 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.55576156297846 * Marital_StatusDivorced + 
0.18663773247842 * Marital_StatusMarried + -0.14692184711639 * Marital_StatusSingle + 
0.40795003682635 * Marital_StatusTogether ;
843886    +   H14  = H14  +    -1.70154958647134 * Marital_StatusDivorced
843887    +          +     -0.0143065674831 * Marital_StatusMarried
843888    +          +     0.13491720981006 * Marital_StatusSingle
843889    +          +     0.65058537454476 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -1.70154958647134 * Marital_StatusDivorced + 
-0.0143065674831 * Marital_StatusMarried + 0.13491720981006 * Marital_StatusSingle + 
0.65058537454476 * Marital_StatusTogether ;
843890    +   H15  = H15  +    -0.57735977480465 * Marital_StatusDivorced
843891    +          +    -1.18521635425485 * Marital_StatusMarried
843892    +          +     1.27858890561049 * Marital_StatusSingle
843893    +          +    -0.68308863502606 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.57735977480465 * Marital_StatusDivorced + 
-1.18521635425485 * Marital_StatusMarried + 1.27858890561049 * Marital_StatusSingle + 
-0.68308863502606 * Marital_StatusTogether ;
843894    +   H11  =     0.91898399777449 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.91898399777449 + H11 ;
843895    +   H12  =    -0.65172531168643 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.65172531168643 + H12 ;
843896    +   H13  =     2.21950020718323 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 2.21950020718323 + H13 ;
843897    +   H14  =     0.94167989308741 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.94167989308741 + H14 ;
843898    +   H15  =    -2.75049414690283 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.75049414690283 + H15 ;
843899    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
843900    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
843901    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
843902    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
843903    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
843904    +END;
MPRINT(EM_DIAGRAM):   END;
843905    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
843906    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
843907    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
843908    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
843909    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
843910    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
843911    +END;
MPRINT(EM_DIAGRAM):   END;
843912    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843913    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
843914    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843915    +
843916    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
843917    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
843918    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
843919    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
843920    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
843921    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
843922    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
843923    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
843924    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
843925    +end;
MPRINT(EM_DIAGRAM):   end;
843926    +else do;
MPRINT(EM_DIAGRAM):   else do;
843927    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
843928    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
843929    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
843930    +   end;
MPRINT(EM_DIAGRAM):   end;
843931    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
843932    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
843933    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
843934    +   end;
MPRINT(EM_DIAGRAM):   end;
843935    +   else do;
MPRINT(EM_DIAGRAM):   else do;
843936    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
843937    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
843938    +   end;
MPRINT(EM_DIAGRAM):   end;
843939    +end;
MPRINT(EM_DIAGRAM):   end;
843940    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
843941    +   P_DepVar1  =    -7.73278760171706 * H11  +    -1.81420899061277 * H12
843942    +          +      7.8974780725891 * H13  +    -2.47430312661533 * H14
843943    +          +       3.637554312671 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.73278760171706 * H11 + -1.81420899061277 * H12 + 
7.8974780725891 * H13 + -2.47430312661533 * H14 + 3.637554312671 * H15 ;
843944    +   P_DepVar1  =    -2.27177312353398 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.27177312353398 + P_DepVar1 ;
843945    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
843946    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
843947    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
843948    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
843949    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
843950    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
843951    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
843952    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
843953    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
843954    +END;
MPRINT(EM_DIAGRAM):   END;
843955    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
843956    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
843957    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
843958    +END;
MPRINT(EM_DIAGRAM):   END;
843959    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
843960    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
843961    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
843962    +END;
MPRINT(EM_DIAGRAM):   END;
843963    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
843964    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
843965    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
843966    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
843967    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
843968    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
843969    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
843970    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843971    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
843972    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
843973    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
843974    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
843975    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
843976    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
843977    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
843978    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
843979    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
843980    +END;
MPRINT(EM_DIAGRAM):   END;
843981    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
843982    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
843983    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
843984    +drop
843985    +H11
843986    +H12
843987    +H13
843988    +H14
843989    +H15
843990    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
843991    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
843992     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL40_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
843993     quit;
843994     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
843995     filename emflow
843995   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural40: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
843996     *------------------------------------------------------------*;
843997     * Neural40: Scoring VALIDATE data;
843998     *------------------------------------------------------------*;
843999     data EMWS8.Neural40_VALIDATE
844000     / view=EMWS8.Neural40_VALIDATE
844001     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural40_VALIDATE / view=EMWS8.Neural40_VALIDATE ;
844002     set EMWS8.Meta3_VALIDATE
844003     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE ;
844004     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural40\EMFLOWSCORE.sas.
844005    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
844006    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
844007    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
844008    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
844009    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
844010    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
844011    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
844012    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
844013    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
844014    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
844015    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
844016    +LENGTH _WARN_ $4
844017    +      F_DepVar  $ 12
844018    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
844019    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
844020    +
844021    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
844022    +
844023    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
844024    +
844025    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
844026    +
844027    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
844028    +
844029    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
844030    +
844031    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
844032    +
844033    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
844034    +
844035    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
844036    +
844037    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
844038    +
844039    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
844040    +
844041    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
844042    +
844043    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
844044    +
844045    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
844046    +
844047    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
844048    +
844049    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
844050    +
844051    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
844052    +
844053    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
844054    +
844055    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
844056    +
844057    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
844058    +
844059    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
844060    +
844061    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
844062    +
844063    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
844064    +
844065    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
844066    +
844067    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
844068    +
844069    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
844070    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
844071    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
844072    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
844073    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
844074    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
844075    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
844076    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
844077    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
844078    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
844079    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
844080    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
844081    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
844082    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
844083    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
844084    +end;
MPRINT(EM_DIAGRAM):   end;
844085    +else do;
MPRINT(EM_DIAGRAM):   else do;
844086    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
844087    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
844088    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
844089    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
844090    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
844091    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
844092    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
844093    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
844094    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
844095    +         end;
MPRINT(EM_DIAGRAM):   end;
844096    +         else do;
MPRINT(EM_DIAGRAM):   else do;
844097    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
844098    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
844099    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
844100    +            end;
MPRINT(EM_DIAGRAM):   end;
844101    +         end;
MPRINT(EM_DIAGRAM):   end;
844102    +      end;
MPRINT(EM_DIAGRAM):   end;
844103    +      else do;
MPRINT(EM_DIAGRAM):   else do;
844104    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
844105    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
844106    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
844107    +         end;
MPRINT(EM_DIAGRAM):   end;
844108    +      end;
MPRINT(EM_DIAGRAM):   end;
844109    +   end;
MPRINT(EM_DIAGRAM):   end;
844110    +   else do;
MPRINT(EM_DIAGRAM):   else do;
844111    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
844112    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
844113    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
844114    +      end;
MPRINT(EM_DIAGRAM):   end;
844115    +      else do;
MPRINT(EM_DIAGRAM):   else do;
844116    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
844117    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
844118    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
844119    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
844120    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
844121    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
844122    +         end;
MPRINT(EM_DIAGRAM):   end;
844123    +      end;
MPRINT(EM_DIAGRAM):   end;
844124    +   end;
MPRINT(EM_DIAGRAM):   end;
844125    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
844126    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
844127    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
844128    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
844129    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
844130    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
844131    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
844132    +   end;
MPRINT(EM_DIAGRAM):   end;
844133    +end;
MPRINT(EM_DIAGRAM):   end;
844134    +
844135    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844136    +*** Checking missing input Interval
844137    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
844138    +
844139    +IF NMISS(
844140    +   AcceptedCmpTotal ,
844141    +   Frq ,
844142    +   Mnt ,
844143    +   MntMeatProducts ,
844144    +   NumCatalogPurchases ,
844145    +   NumDealsPurchases ,
844146    +   NumWebVisitsMonth ,
844147    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Mnt , MntMeatProducts , 
NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , Recency ) THEN DO;
844148    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
844149    +
844150    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
844151    +END;
MPRINT(EM_DIAGRAM):   END;
844152    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844153    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
844154    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844155    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
844156    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
844157    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
844158    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
844159    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
844160    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
844161    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
844162    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
844163    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
844164    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
844165    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
844166    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
844167    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
844168    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
844169    +END;
MPRINT(EM_DIAGRAM):   END;
844170    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
844171    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
844172    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
844173    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
844174    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
844175    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
844176    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
844177    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
844178    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
844179    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
844180    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
844181    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
844182    +   ELSE S_NumCatalogPurchases
844183    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
844184    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
844185    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
844186    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
844187    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
844188    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
844189    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
844190    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
844191    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
844192    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
844193    +END;
MPRINT(EM_DIAGRAM):   END;
844194    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844195    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
844196    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844197    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844198    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
844199    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844200    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
844201    +   H11  =    -0.50937067326512 * S_AcceptedCmpTotal  +     0.59153604997173 *
844202    +        S_Frq  +     0.35109708191283 * S_Mnt  +    -0.54183123684873 *
844203    +        S_MntMeatProducts  +    -0.50968421326068 * S_NumCatalogPurchases
844204    +          +    -0.19046126117019 * S_NumDealsPurchases
844205    +          +    -0.51033119597715 * S_NumWebVisitsMonth
844206    +          +     0.81837864997249 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.50937067326512 * S_AcceptedCmpTotal + 0.59153604997173 * S_Frq 
+ 0.35109708191283 * S_Mnt + -0.54183123684873 * S_MntMeatProducts + -0.50968421326068 * 
S_NumCatalogPurchases + -0.19046126117019 * S_NumDealsPurchases + -0.51033119597715 * 
S_NumWebVisitsMonth + 0.81837864997249 * S_Recency ;
844207    +   H12  =     0.02025228046339 * S_AcceptedCmpTotal  +     0.99930163787509 *
844208    +        S_Frq  +     1.71070447604488 * S_Mnt  +     0.00262288180651 *
844209    +        S_MntMeatProducts  +    -0.26040107336488 * S_NumCatalogPurchases
844210    +          +     1.79245188553632 * S_NumDealsPurchases
844211    +          +     0.26061762777338 * S_NumWebVisitsMonth
844212    +          +     0.08976701277133 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.02025228046339 * S_AcceptedCmpTotal + 0.99930163787509 * S_Frq + 
1.71070447604488 * S_Mnt + 0.00262288180651 * S_MntMeatProducts + -0.26040107336488 * 
S_NumCatalogPurchases + 1.79245188553632 * S_NumDealsPurchases + 0.26061762777338 * 
S_NumWebVisitsMonth + 0.08976701277133 * S_Recency ;
844213    +   H13  =       0.104381332746 * S_AcceptedCmpTotal  +    -1.51764539772771 *
844214    +        S_Frq  +     0.93148616742855 * S_Mnt  +     2.93767108708116 *
844215    +        S_MntMeatProducts  +     0.79051284359814 * S_NumCatalogPurchases
844216    +          +     0.49339750797451 * S_NumDealsPurchases
844217    +          +    -0.25657630888957 * S_NumWebVisitsMonth
844218    +          +    -0.02783592802322 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.104381332746 * S_AcceptedCmpTotal + -1.51764539772771 * S_Frq + 
0.93148616742855 * S_Mnt + 2.93767108708116 * S_MntMeatProducts + 0.79051284359814 * 
S_NumCatalogPurchases + 0.49339750797451 * S_NumDealsPurchases + -0.25657630888957 * 
S_NumWebVisitsMonth + -0.02783592802322 * S_Recency ;
844219    +   H14  =     0.54135833698612 * S_AcceptedCmpTotal  +     1.35730431022222 *
844220    +        S_Frq  +     0.77200942468842 * S_Mnt  +    -1.51698500454254 *
844221    +        S_MntMeatProducts  +    -0.62605649177998 * S_NumCatalogPurchases
844222    +          +    -0.20841011025614 * S_NumDealsPurchases
844223    +          +    -0.95976462163535 * S_NumWebVisitsMonth
844224    +          +    -0.85153512604579 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.54135833698612 * S_AcceptedCmpTotal + 1.35730431022222 * S_Frq + 
0.77200942468842 * S_Mnt + -1.51698500454254 * S_MntMeatProducts + -0.62605649177998 * 
S_NumCatalogPurchases + -0.20841011025614 * S_NumDealsPurchases + -0.95976462163535 * 
S_NumWebVisitsMonth + -0.85153512604579 * S_Recency ;
844225    +   H15  =     0.45598292592982 * S_AcceptedCmpTotal  +     0.62149856604856 *
844226    +        S_Frq  +    -0.19094507833451 * S_Mnt  +     0.31024365368678 *
844227    +        S_MntMeatProducts  +     0.43336537836455 * S_NumCatalogPurchases
844228    +          +    -0.79330545518211 * S_NumDealsPurchases
844229    +          +     0.31692653945914 * S_NumWebVisitsMonth
844230    +          +    -0.82721510615104 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.45598292592982 * S_AcceptedCmpTotal + 0.62149856604856 * S_Frq + 
-0.19094507833451 * S_Mnt + 0.31024365368678 * S_MntMeatProducts + 0.43336537836455 * 
S_NumCatalogPurchases + -0.79330545518211 * S_NumDealsPurchases + 0.31692653945914 * 
S_NumWebVisitsMonth + -0.82721510615104 * S_Recency ;
844231    +   H11  = H11  +    -0.25100863467838 * Marital_StatusDivorced
844232    +          +     0.15562142019257 * Marital_StatusMarried
844233    +          +    -0.11924929825992 * Marital_StatusSingle
844234    +          +     0.19445161712576 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.25100863467838 * Marital_StatusDivorced + 
0.15562142019257 * Marital_StatusMarried + -0.11924929825992 * Marital_StatusSingle + 
0.19445161712576 * Marital_StatusTogether ;
844235    +   H12  = H12  +     0.58193215591516 * Marital_StatusDivorced
844236    +          +     0.27485963958922 * Marital_StatusMarried
844237    +          +    -0.46136322561544 * Marital_StatusSingle
844238    +          +     1.17785849262888 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.58193215591516 * Marital_StatusDivorced + 0.27485963958922 
* Marital_StatusMarried + -0.46136322561544 * Marital_StatusSingle + 1.17785849262888 * 
Marital_StatusTogether ;
844239    +   H13  = H13  +    -0.55576156297846 * Marital_StatusDivorced
844240    +          +     0.18663773247842 * Marital_StatusMarried
844241    +          +    -0.14692184711639 * Marital_StatusSingle
844242    +          +     0.40795003682635 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.55576156297846 * Marital_StatusDivorced + 
0.18663773247842 * Marital_StatusMarried + -0.14692184711639 * Marital_StatusSingle + 
0.40795003682635 * Marital_StatusTogether ;
844243    +   H14  = H14  +    -1.70154958647134 * Marital_StatusDivorced
844244    +          +     -0.0143065674831 * Marital_StatusMarried
844245    +          +     0.13491720981006 * Marital_StatusSingle
844246    +          +     0.65058537454476 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -1.70154958647134 * Marital_StatusDivorced + 
-0.0143065674831 * Marital_StatusMarried + 0.13491720981006 * Marital_StatusSingle + 
0.65058537454476 * Marital_StatusTogether ;
844247    +   H15  = H15  +    -0.57735977480465 * Marital_StatusDivorced
844248    +          +    -1.18521635425485 * Marital_StatusMarried
844249    +          +     1.27858890561049 * Marital_StatusSingle
844250    +          +    -0.68308863502606 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.57735977480465 * Marital_StatusDivorced + 
-1.18521635425485 * Marital_StatusMarried + 1.27858890561049 * Marital_StatusSingle + 
-0.68308863502606 * Marital_StatusTogether ;
844251    +   H11  =     0.91898399777449 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.91898399777449 + H11 ;
844252    +   H12  =    -0.65172531168643 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.65172531168643 + H12 ;
844253    +   H13  =     2.21950020718323 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 2.21950020718323 + H13 ;
844254    +   H14  =     0.94167989308741 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.94167989308741 + H14 ;
844255    +   H15  =    -2.75049414690283 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.75049414690283 + H15 ;
844256    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
844257    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
844258    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
844259    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
844260    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
844261    +END;
MPRINT(EM_DIAGRAM):   END;
844262    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
844263    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
844264    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
844265    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
844266    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
844267    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
844268    +END;
MPRINT(EM_DIAGRAM):   END;
844269    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844270    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
844271    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844272    +
844273    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
844274    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
844275    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
844276    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
844277    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
844278    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
844279    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
844280    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
844281    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
844282    +end;
MPRINT(EM_DIAGRAM):   end;
844283    +else do;
MPRINT(EM_DIAGRAM):   else do;
844284    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
844285    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
844286    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
844287    +   end;
MPRINT(EM_DIAGRAM):   end;
844288    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
844289    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
844290    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
844291    +   end;
MPRINT(EM_DIAGRAM):   end;
844292    +   else do;
MPRINT(EM_DIAGRAM):   else do;
844293    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
844294    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
844295    +   end;
MPRINT(EM_DIAGRAM):   end;
844296    +end;
MPRINT(EM_DIAGRAM):   end;
844297    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
844298    +   P_DepVar1  =    -7.73278760171706 * H11  +    -1.81420899061277 * H12
844299    +          +      7.8974780725891 * H13  +    -2.47430312661533 * H14
844300    +          +       3.637554312671 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.73278760171706 * H11 + -1.81420899061277 * H12 + 
7.8974780725891 * H13 + -2.47430312661533 * H14 + 3.637554312671 * H15 ;
844301    +   P_DepVar1  =    -2.27177312353398 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.27177312353398 + P_DepVar1 ;
844302    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
844303    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
844304    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
844305    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
844306    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
844307    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
844308    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
844309    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
844310    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
844311    +END;
MPRINT(EM_DIAGRAM):   END;
844312    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
844313    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
844314    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
844315    +END;
MPRINT(EM_DIAGRAM):   END;
844316    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
844317    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
844318    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
844319    +END;
MPRINT(EM_DIAGRAM):   END;
844320    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
844321    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
844322    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
844323    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
844324    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
844325    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
844326    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
844327    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844328    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
844329    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
844330    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
844331    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
844332    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
844333    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
844334    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
844335    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
844336    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
844337    +END;
MPRINT(EM_DIAGRAM):   END;
844338    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
844339    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
844340    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
844341    +drop
844342    +H11
844343    +H12
844344    +H13
844345    +H14
844346    +H15
844347    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
844348    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
844349     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL40_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
844350     quit;
844351     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
844352     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
844353     * Neural40: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural40: Computing metadata for TRAIN data;
844354     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL40_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural40\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural40_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural40_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural40_TRAIN out=WORK.M2O2ZTB0 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O2ZTB0;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O2ZTB0(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O2ZTB0;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O2ZTB0;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1YSO_P8 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RODU_3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YSO_P8;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural40_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural40";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural40";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural40";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural40: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
844666     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
844667     set EMWS8.Neural40_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural40_EMINFO;
844668     where DATA='Neural40' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural40' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
844669     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL40_EMINFO.
      WHERE (DATA='Neural40') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

844670     data EMWS8.Neural40_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural40_EMINFO;
844671     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
844672     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
844673     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
844677     run;
844678     data EMWS8.Neural40_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural40_EMINFO;
844679     set EMWS8.Neural40_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural40_EMINFO WORK.MODELTEMP_INFO;
844680     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL40_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

844681     proc sort data = EMWS8.Neural40_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural40_EMINFO NOTHREADS;
844682     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
844683     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL40_EMINFO.
NOTE: The data set EMWS8.NEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

844684     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
844685     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
844686     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

844687     proc sort data = EMWS8.Neural40_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural40_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
844688     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
844689     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL40_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

844690     data EMWS8.Neural40_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural40_EMINFO;
844691     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
844692     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
844693     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL40_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

844694     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
844695     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
844696     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
844697     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL40_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL40_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
