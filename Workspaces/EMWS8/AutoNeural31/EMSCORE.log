MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.05 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.05 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O243LW5F 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMSCORE.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O243LW5F new;
MPRINT(EM_DIAGRAM):   run;
1123376    filename emflow
1123376  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural31: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1123377    *------------------------------------------------------------*;
1123378    * AutoNeural31: Scoring DATA data;
1123379    *------------------------------------------------------------*;
1123380    data EMWS8.AutoNeural31_TRAIN
1123381    / view=EMWS8.AutoNeural31_TRAIN
1123382    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural31_TRAIN / view=EMWS8.AutoNeural31_TRAIN ;
1123383    set EMWS8.Varsel_TRAIN
1123384    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
1123385    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas.
1123386   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1123387   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1123388   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1123389   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1123390   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1123391   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1123392   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1123393   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1123394   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1123395   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1123396   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1123397   +LENGTH _WARN_ $4
1123398   +      F_DepVar  $ 12
1123399   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1123400   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1123401   +
1123402   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1123403   +
1123404   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1123405   +
1123406   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1123407   +
1123408   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1123409   +
1123410   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1123411   +
1123412   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1123413   +
1123414   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1123415   +
1123416   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1123417   +
1123418   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1123419   +
1123420   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1123421   +
1123422   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1123423   +
1123424   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1123425   +
1123426   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1123427   +
1123428   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1123429   +
1123430   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1123431   +
1123432   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1123433   +
1123434   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1123435   +
1123436   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1123437   +
1123438   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1123439   +
1123440   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1123441   +
1123442   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1123443   +
1123444   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1123445   +
1123446   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1123447   +
1123448   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1123449   +
1123450   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1123451   +
1123452   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1123453   +
1123454   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1123455   +
1123456   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1123457   +
1123458   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1123459   +
1123460   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1123461   +
1123462   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1123463   +
1123464   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1123465   +
1123466   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1123467   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1123468   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1123469   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1123470   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1123471   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1123472   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123473   +end;
MPRINT(EM_DIAGRAM):   end;
1123474   +else do;
MPRINT(EM_DIAGRAM):   else do;
1123475   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1123476   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1123477   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1123478   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1123479   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1123480   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1123481   +   end;
MPRINT(EM_DIAGRAM):   end;
1123482   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1123483   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1123484   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1123485   +   end;
MPRINT(EM_DIAGRAM):   end;
1123486   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1123487   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1123488   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1123489   +   end;
MPRINT(EM_DIAGRAM):   end;
1123490   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1123491   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1123492   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1123493   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1123494   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123495   +   end;
MPRINT(EM_DIAGRAM):   end;
1123496   +end;
MPRINT(EM_DIAGRAM):   end;
1123497   +
1123498   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123499   +*** Checking missing input Interval
1123500   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1123501   +
1123502   +IF NMISS(
1123503   +   AcceptedCmpTotal ,
1123504   +   Frq ,
1123505   +   Income ,
1123506   +   Mnt ,
1123507   +   MntGoldProds ,
1123508   +   MntMeatProducts ,
1123509   +   MntWines ,
1123510   +   NumDistPurchases ,
1123511   +   RFMstat ,
1123512   +   RMntFrq ,
1123513   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1123514   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1123515   +
1123516   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123517   +END;
MPRINT(EM_DIAGRAM):   END;
1123518   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123519   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1123520   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123521   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123522   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1123523   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1123524   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1123525   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1123526   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1123527   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1123528   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1123529   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1123530   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1123531   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1123532   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1123533   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1123534   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1123535   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1123536   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1123537   +END;
MPRINT(EM_DIAGRAM):   END;
1123538   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123539   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1123540   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1123541   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1123542   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1123543   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1123544   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1123545   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1123546   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1123547   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1123548   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1123549   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1123550   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1123551   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1123552   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1123553   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1123554   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1123555   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1123556   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1123557   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1123558   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1123559   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1123560   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1123561   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1123562   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1123563   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1123564   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1123565   +END;
MPRINT(EM_DIAGRAM):   END;
1123566   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123567   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1123568   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123569   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123570   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1123571   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123572   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123573   +   H1x1_1  =     0.03659823017812 * S_AcceptedCmpTotal
1123574   +          +    -1.19763341876145 * S_Frq  +     0.81238202822952 * S_Income
1123575   +          +     1.88011676145119 * S_Mnt  +     0.17620967209108 *
1123576   +        S_MntGoldProds  +    -0.01645582313184 * S_MntMeatProducts
1123577   +          +     0.51002049519212 * S_MntWines  +     0.25222197723244 *
1123578   +        S_NumDistPurchases  +     0.28056722928561 * S_RFMstat
1123579   +          +    -1.12243193103334 * S_RMntFrq  +    -0.37511560424314 *
1123580   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.03659823017812 * S_AcceptedCmpTotal + -1.19763341876145 * 
S_Frq + 0.81238202822952 * S_Income + 1.88011676145119 * S_Mnt + 0.17620967209108 * 
S_MntGoldProds + -0.01645582313184 * S_MntMeatProducts + 0.51002049519212 * S_MntWines + 
0.25222197723244 * S_NumDistPurchases + 0.28056722928561 * S_RFMstat + -1.12243193103334 * 
S_RMntFrq + -0.37511560424314 * S_Recency ;
1123581   +   H1x1_2  =     0.18983412995843 * S_AcceptedCmpTotal
1123582   +          +    -0.36018162246349 * S_Frq  +     0.01068760327542 * S_Income
1123583   +          +    -0.89719147415619 * S_Mnt  +     0.11241727599926 *
1123584   +        S_MntGoldProds  +     0.64236815353055 * S_MntMeatProducts
1123585   +          +     0.36278145113777 * S_MntWines  +     0.34466813565445 *
1123586   +        S_NumDistPurchases  +     0.05359534034679 * S_RFMstat
1123587   +          +     0.02704700607418 * S_RMntFrq  +     -0.3718472688023 *
1123588   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.18983412995843 * S_AcceptedCmpTotal + -0.36018162246349 * 
S_Frq + 0.01068760327542 * S_Income + -0.89719147415619 * S_Mnt + 0.11241727599926 * 
S_MntGoldProds + 0.64236815353055 * S_MntMeatProducts + 0.36278145113777 * S_MntWines + 
0.34466813565445 * S_NumDistPurchases + 0.05359534034679 * S_RFMstat + 0.02704700607418 * 
S_RMntFrq + -0.3718472688023 * S_Recency ;
1123589   +   H1x1_1  = H1x1_1  +     0.40642305557546 * G_Marital_Status0
1123590   +          +     -0.0248646279252 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.40642305557546 * G_Marital_Status0 + 
-0.0248646279252 * G_Marital_Status1 ;
1123591   +   H1x1_2  = H1x1_2  +     0.16115803721995 * G_Marital_Status0
1123592   +          +     0.05904755469144 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.16115803721995 * G_Marital_Status0 + 
0.05904755469144 * G_Marital_Status1 ;
1123593   +   H1x1_1  =     0.33463349044957 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33463349044957 + H1x1_1 ;
1123594   +   H1x1_2  =    -3.62976809107266 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -3.62976809107266 + H1x1_2 ;
1123595   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1123596   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1123597   +END;
MPRINT(EM_DIAGRAM):   END;
1123598   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123599   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1123600   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1123601   +END;
MPRINT(EM_DIAGRAM):   END;
1123602   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123603   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1123604   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123605   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123606   +   H1x2_1  =    -0.36010169192455 * S_AcceptedCmpTotal
1123607   +          +    -0.59887603386433 * S_Frq  +     0.50990837522658 * S_Income
1123608   +          +    -1.11866059151852 * S_Mnt  +     0.36285188228582 *
1123609   +        S_MntGoldProds  +     1.22856170475832 * S_MntMeatProducts
1123610   +          +     1.46123404932164 * S_MntWines  +    -0.01510122045686 *
1123611   +        S_NumDistPurchases  +     0.53310564732407 * S_RFMstat
1123612   +          +    -0.40691094193511 * S_RMntFrq  +     0.45756644061361 *
1123613   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.36010169192455 * S_AcceptedCmpTotal + -0.59887603386433 * 
S_Frq + 0.50990837522658 * S_Income + -1.11866059151852 * S_Mnt + 0.36285188228582 * 
S_MntGoldProds + 1.22856170475832 * S_MntMeatProducts + 1.46123404932164 * S_MntWines + 
-0.01510122045686 * S_NumDistPurchases + 0.53310564732407 * S_RFMstat + -0.40691094193511 * 
S_RMntFrq + 0.45756644061361 * S_Recency ;
1123614   +   H1x2_2  =    -0.17932261343465 * S_AcceptedCmpTotal
1123615   +          +     1.20080978426162 * S_Frq  +     0.18118647708641 * S_Income
1123616   +          +     0.31901116297924 * S_Mnt  +     0.02135897416621 *
1123617   +        S_MntGoldProds  +    -1.12534829348468 * S_MntMeatProducts
1123618   +          +     0.57649851666461 * S_MntWines  +    -1.46542585484816 *
1123619   +        S_NumDistPurchases  +    -0.20960777623629 * S_RFMstat
1123620   +          +      0.6962031545587 * S_RMntFrq  +     0.00840421006739 *
1123621   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.17932261343465 * S_AcceptedCmpTotal + 1.20080978426162 * 
S_Frq + 0.18118647708641 * S_Income + 0.31901116297924 * S_Mnt + 0.02135897416621 * 
S_MntGoldProds + -1.12534829348468 * S_MntMeatProducts + 0.57649851666461 * S_MntWines + 
-1.46542585484816 * S_NumDistPurchases + -0.20960777623629 * S_RFMstat + 0.6962031545587 * 
S_RMntFrq + 0.00840421006739 * S_Recency ;
1123622   +   H1x2_1  = H1x2_1  +    -0.05195034052296 * G_Marital_Status0
1123623   +          +     -0.2774675863976 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -0.05195034052296 * G_Marital_Status0 + 
-0.2774675863976 * G_Marital_Status1 ;
1123624   +   H1x2_2  = H1x2_2  +     0.01901604294952 * G_Marital_Status0
1123625   +          +      -0.277144006775 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + 0.01901604294952 * G_Marital_Status0 + -0.277144006775 
* G_Marital_Status1 ;
1123626   +   H1x2_1  =     1.53233871423223 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.53233871423223 + H1x2_1 ;
1123627   +   H1x2_2  =     1.35238678006556 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.35238678006556 + H1x2_2 ;
1123628   +   H1x2_1  = SIN(H1x2_1 );
MPRINT(EM_DIAGRAM):   H1x2_1 = SIN(H1x2_1 );
1123629   +   H1x2_2  = SIN(H1x2_2 );
MPRINT(EM_DIAGRAM):   H1x2_2 = SIN(H1x2_2 );
1123630   +END;
MPRINT(EM_DIAGRAM):   END;
1123631   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123632   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1123633   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1123634   +END;
MPRINT(EM_DIAGRAM):   END;
1123635   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123636   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1123637   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123638   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123639   +   H1x3_1  =     1.63523210720409 * S_AcceptedCmpTotal
1123640   +          +     0.41751349520438 * S_Frq  +    -0.87449723255309 * S_Income
1123641   +          +    -0.47825070320724 * S_Mnt  +     0.76630810205636 *
1123642   +        S_MntGoldProds  +    -0.35835365889925 * S_MntMeatProducts
1123643   +          +    -1.27333688175297 * S_MntWines  +    -1.52770581313638 *
1123644   +        S_NumDistPurchases  +     0.86851574498866 * S_RFMstat
1123645   +          +     0.84614746872207 * S_RMntFrq  +    -1.64268632744477 *
1123646   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.63523210720409 * S_AcceptedCmpTotal + 0.41751349520438 * 
S_Frq + -0.87449723255309 * S_Income + -0.47825070320724 * S_Mnt + 0.76630810205636 * 
S_MntGoldProds + -0.35835365889925 * S_MntMeatProducts + -1.27333688175297 * S_MntWines + 
-1.52770581313638 * S_NumDistPurchases + 0.86851574498866 * S_RFMstat + 0.84614746872207 * 
S_RMntFrq + -1.64268632744477 * S_Recency ;
1123647   +   H1x3_2  =    -0.18638529120439 * S_AcceptedCmpTotal
1123648   +          +     0.76011175462816 * S_Frq  +     0.58495336465132 * S_Income
1123649   +          +     0.65856698208574 * S_Mnt  +     0.68781212622472 *
1123650   +        S_MntGoldProds  +    -1.09375532907934 * S_MntMeatProducts
1123651   +          +     1.39481639500189 * S_MntWines  +     0.26914802103737 *
1123652   +        S_NumDistPurchases  +    -2.20511156805519 * S_RFMstat
1123653   +          +     1.66705142994155 * S_RMntFrq  +    -0.36249885315985 *
1123654   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.18638529120439 * S_AcceptedCmpTotal + 0.76011175462816 * 
S_Frq + 0.58495336465132 * S_Income + 0.65856698208574 * S_Mnt + 0.68781212622472 * 
S_MntGoldProds + -1.09375532907934 * S_MntMeatProducts + 1.39481639500189 * S_MntWines + 
0.26914802103737 * S_NumDistPurchases + -2.20511156805519 * S_RFMstat + 1.66705142994155 * 
S_RMntFrq + -0.36249885315985 * S_Recency ;
1123655   +   H1x3_1  = H1x3_1  +     -0.2579393569494 * G_Marital_Status0
1123656   +          +    -1.04614665932456 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -0.2579393569494 * G_Marital_Status0 + 
-1.04614665932456 * G_Marital_Status1 ;
1123657   +   H1x3_2  = H1x3_2  +    -1.03096078089306 * G_Marital_Status0
1123658   +          +    -0.71974289565489 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + -1.03096078089306 * G_Marital_Status0 + 
-0.71974289565489 * G_Marital_Status1 ;
1123659   +   H1x3_1  =    -0.91456189694636 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.91456189694636 + H1x3_1 ;
1123660   +   H1x3_2  =    -0.51701043559885 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.51701043559885 + H1x3_2 ;
1123661   +   H1x3_1  = SIN(H1x3_1 );
MPRINT(EM_DIAGRAM):   H1x3_1 = SIN(H1x3_1 );
1123662   +   H1x3_2  = SIN(H1x3_2 );
MPRINT(EM_DIAGRAM):   H1x3_2 = SIN(H1x3_2 );
1123663   +END;
MPRINT(EM_DIAGRAM):   END;
1123664   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123665   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1123666   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1123667   +END;
MPRINT(EM_DIAGRAM):   END;
1123668   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123669   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1123670   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123671   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123672   +   H2x1_1  =     1.47132066677712 * H1x1_1  +      1.2723487532385 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.47132066677712 * H1x1_1 + 1.2723487532385 * H1x1_2 ;
1123673   +   H2x1_2  =     1.58711243971308 * H1x1_1  +      6.5189759089623 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.58711243971308 * H1x1_1 + 6.5189759089623 * H1x1_2 ;
1123674   +   H2x1_1  = H2x1_1  +     1.30878911727231 * H1x2_1
1123675   +          +     2.19496661698373 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.30878911727231 * H1x2_1 + 2.19496661698373 * H1x2_2 ;
1123676   +   H2x1_2  = H2x1_2  +    -3.82744270061369 * H1x2_1
1123677   +          +      1.3090956402929 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -3.82744270061369 * H1x2_1 + 1.3090956402929 * H1x2_2 ;
1123678   +   H2x1_1  = H2x1_1  +    -0.97307968271784 * H1x3_1
1123679   +          +     0.17025511053322 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.97307968271784 * H1x3_1 + 0.17025511053322 * H1x3_2 
;
1123680   +   H2x1_2  = H2x1_2  +    -0.00685159977192 * H1x3_1
1123681   +          +     0.53377830648041 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.00685159977192 * H1x3_1 + 0.53377830648041 * H1x3_2 
;
1123682   +   H2x1_1  =    -2.88828567261654 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -2.88828567261654 + H2x1_1 ;
1123683   +   H2x1_2  =    -0.63666932052712 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.63666932052712 + H2x1_2 ;
1123684   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1123685   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1123686   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1123687   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1123688   +END;
MPRINT(EM_DIAGRAM):   END;
1123689   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123690   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1123691   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1123692   +END;
MPRINT(EM_DIAGRAM):   END;
1123693   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123694   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1123695   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123696   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123697   +   H2x2_1  =     -0.1591646734645 * H1x1_1  +     2.50898584287812 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.1591646734645 * H1x1_1 + 2.50898584287812 * H1x1_2 ;
1123698   +   H2x2_2  =    -1.04022138862095 * H1x1_1  +     -3.2120641538371 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.04022138862095 * H1x1_1 + -3.2120641538371 * H1x1_2 ;
1123699   +   H2x2_1  = H2x2_1  +     0.95364577994168 * H1x2_1
1123700   +          +     0.39917449615996 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.95364577994168 * H1x2_1 + 0.39917449615996 * H1x2_2 ;
1123701   +   H2x2_2  = H2x2_2  +     0.34367752685876 * H1x2_1
1123702   +          +    -0.43345610313251 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.34367752685876 * H1x2_1 + -0.43345610313251 * H1x2_2 
;
1123703   +   H2x2_1  = H2x2_1  +    -0.21053791455319 * H1x3_1
1123704   +          +     1.30320774323126 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21053791455319 * H1x3_1 + 1.30320774323126 * H1x3_2 
;
1123705   +   H2x2_2  = H2x2_2  +    -0.56776778702573 * H1x3_1
1123706   +          +     0.23307461428861 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -0.56776778702573 * H1x3_1 + 0.23307461428861 * H1x3_2 
;
1123707   +   H2x2_1  =    -0.57800274966727 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.57800274966727 + H2x2_1 ;
1123708   +   H2x2_2  =     -0.3490585254981 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -0.3490585254981 + H2x2_2 ;
1123709   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1123710   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1123711   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1123712   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1123713   +END;
MPRINT(EM_DIAGRAM):   END;
1123714   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123715   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1123716   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1123717   +END;
MPRINT(EM_DIAGRAM):   END;
1123718   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123719   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1123720   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123721   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123722   +   H3x1_1  =     2.93892662286754 * H2x1_1  +     4.69530667636314 * H2x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 2.93892662286754 * H2x1_1 + 4.69530667636314 * H2x1_2 ;
1123723   +   H3x1_1  = H3x1_1  +     0.63147427004529 * H2x2_1
1123724   +          +    -3.38971951524722 * H2x2_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.63147427004529 * H2x2_1 + -3.38971951524722 * H2x2_2 
;
1123725   +   H3x1_1  =    -2.10378320265168 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -2.10378320265168 + H3x1_1 ;
1123726   +   H3x1_2  = 0;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0;
1123727   +   _MAX_ = MAX (H3x1_1 , H3x1_2 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 );
1123728   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1123729   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1123730   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1123731   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1123732   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1123733   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1123734   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1123735   +END;
MPRINT(EM_DIAGRAM):   END;
1123736   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123737   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1123738   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1123739   +END;
MPRINT(EM_DIAGRAM):   END;
1123740   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123741   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1123742   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123743   +
1123744   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1123745   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1123746   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1123747   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1123748   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1123749   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1123750   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1123751   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1123752   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1123753   +end;
MPRINT(EM_DIAGRAM):   end;
1123754   +else do;
MPRINT(EM_DIAGRAM):   else do;
1123755   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1123756   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1123757   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1123758   +   end;
MPRINT(EM_DIAGRAM):   end;
1123759   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1123760   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1123761   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1123762   +   end;
MPRINT(EM_DIAGRAM):   end;
1123763   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1123764   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1123765   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1123766   +   end;
MPRINT(EM_DIAGRAM):   end;
1123767   +end;
MPRINT(EM_DIAGRAM):   end;
1123768   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123769   +   P_DepVar1  =    -8.80200545202031 * H3x1_1  +    -0.19646708431763 * H3x1_2
1123770   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.80200545202031 * H3x1_1 + -0.19646708431763 * H3x1_2 ;
1123771   +   P_DepVar1  =     3.75158164611687 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.75158164611687 + P_DepVar1 ;
1123772   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1123773   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1123774   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1123775   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1123776   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1123777   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1123778   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1123779   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1123780   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1123781   +END;
MPRINT(EM_DIAGRAM):   END;
1123782   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123783   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1123784   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1123785   +END;
MPRINT(EM_DIAGRAM):   END;
1123786   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1123787   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1123788   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1123789   +END;
MPRINT(EM_DIAGRAM):   END;
1123790   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1123791   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1123792   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1123793   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1123794   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1123795   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1123796   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1123797   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123798   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1123799   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123800   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1123801   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1123802   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1123803   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1123804   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1123805   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1123806   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1123807   +END;
MPRINT(EM_DIAGRAM):   END;
1123808   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1123809   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1123810   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1123811   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1123812    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL31_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1123813    quit;
1123814    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1123815    filename emflow
1123815  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural31: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1123816    *------------------------------------------------------------*;
1123817    * AutoNeural31: Scoring VALIDATE data;
1123818    *------------------------------------------------------------*;
1123819    data EMWS8.AutoNeural31_VALIDATE
1123820    / view=EMWS8.AutoNeural31_VALIDATE
1123821    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural31_VALIDATE / view=EMWS8.AutoNeural31_VALIDATE ;
1123822    set EMWS8.Varsel_VALIDATE
1123823    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
1123824    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMFLOWSCORE.sas.
1123825   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1123826   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1123827   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1123828   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1123829   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1123830   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1123831   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1123832   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1123833   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1123834   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1123835   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1123836   +LENGTH _WARN_ $4
1123837   +      F_DepVar  $ 12
1123838   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1123839   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1123840   +
1123841   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1123842   +
1123843   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1123844   +
1123845   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1123846   +
1123847   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1123848   +
1123849   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1123850   +
1123851   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1123852   +
1123853   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1123854   +
1123855   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1123856   +
1123857   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1123858   +
1123859   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1123860   +
1123861   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1123862   +
1123863   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1123864   +
1123865   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1123866   +
1123867   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1123868   +
1123869   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1123870   +
1123871   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1123872   +
1123873   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1123874   +
1123875   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1123876   +
1123877   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1123878   +
1123879   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1123880   +
1123881   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1123882   +
1123883   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1123884   +
1123885   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1123886   +
1123887   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1123888   +
1123889   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1123890   +
1123891   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1123892   +
1123893   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1123894   +
1123895   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1123896   +
1123897   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1123898   +
1123899   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1123900   +
1123901   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1123902   +
1123903   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1123904   +
1123905   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1123906   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1123907   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1123908   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1123909   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1123910   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1123911   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123912   +end;
MPRINT(EM_DIAGRAM):   end;
1123913   +else do;
MPRINT(EM_DIAGRAM):   else do;
1123914   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1123915   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1123916   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1123917   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1123918   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1123919   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1123920   +   end;
MPRINT(EM_DIAGRAM):   end;
1123921   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1123922   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1123923   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1123924   +   end;
MPRINT(EM_DIAGRAM):   end;
1123925   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1123926   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1123927   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1123928   +   end;
MPRINT(EM_DIAGRAM):   end;
1123929   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1123930   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1123931   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1123932   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1123933   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123934   +   end;
MPRINT(EM_DIAGRAM):   end;
1123935   +end;
MPRINT(EM_DIAGRAM):   end;
1123936   +
1123937   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123938   +*** Checking missing input Interval
1123939   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1123940   +
1123941   +IF NMISS(
1123942   +   AcceptedCmpTotal ,
1123943   +   Frq ,
1123944   +   Income ,
1123945   +   Mnt ,
1123946   +   MntGoldProds ,
1123947   +   MntMeatProducts ,
1123948   +   MntWines ,
1123949   +   NumDistPurchases ,
1123950   +   RFMstat ,
1123951   +   RMntFrq ,
1123952   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1123953   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1123954   +
1123955   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1123956   +END;
MPRINT(EM_DIAGRAM):   END;
1123957   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123958   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1123959   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1123960   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1123961   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1123962   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1123963   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1123964   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1123965   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1123966   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1123967   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1123968   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1123969   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1123970   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1123971   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1123972   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1123973   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1123974   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1123975   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1123976   +END;
MPRINT(EM_DIAGRAM):   END;
1123977   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1123978   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1123979   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1123980   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1123981   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1123982   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1123983   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1123984   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1123985   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1123986   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1123987   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1123988   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1123989   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1123990   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1123991   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1123992   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1123993   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1123994   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1123995   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1123996   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1123997   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1123998   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1123999   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1124000   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1124001   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1124002   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1124003   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1124004   +END;
MPRINT(EM_DIAGRAM):   END;
1124005   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124006   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1124007   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124008   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124009   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1124010   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124011   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124012   +   H1x1_1  =     0.03659823017812 * S_AcceptedCmpTotal
1124013   +          +    -1.19763341876145 * S_Frq  +     0.81238202822952 * S_Income
1124014   +          +     1.88011676145119 * S_Mnt  +     0.17620967209108 *
1124015   +        S_MntGoldProds  +    -0.01645582313184 * S_MntMeatProducts
1124016   +          +     0.51002049519212 * S_MntWines  +     0.25222197723244 *
1124017   +        S_NumDistPurchases  +     0.28056722928561 * S_RFMstat
1124018   +          +    -1.12243193103334 * S_RMntFrq  +    -0.37511560424314 *
1124019   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.03659823017812 * S_AcceptedCmpTotal + -1.19763341876145 * 
S_Frq + 0.81238202822952 * S_Income + 1.88011676145119 * S_Mnt + 0.17620967209108 * 
S_MntGoldProds + -0.01645582313184 * S_MntMeatProducts + 0.51002049519212 * S_MntWines + 
0.25222197723244 * S_NumDistPurchases + 0.28056722928561 * S_RFMstat + -1.12243193103334 * 
S_RMntFrq + -0.37511560424314 * S_Recency ;
1124020   +   H1x1_2  =     0.18983412995843 * S_AcceptedCmpTotal
1124021   +          +    -0.36018162246349 * S_Frq  +     0.01068760327542 * S_Income
1124022   +          +    -0.89719147415619 * S_Mnt  +     0.11241727599926 *
1124023   +        S_MntGoldProds  +     0.64236815353055 * S_MntMeatProducts
1124024   +          +     0.36278145113777 * S_MntWines  +     0.34466813565445 *
1124025   +        S_NumDistPurchases  +     0.05359534034679 * S_RFMstat
1124026   +          +     0.02704700607418 * S_RMntFrq  +     -0.3718472688023 *
1124027   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.18983412995843 * S_AcceptedCmpTotal + -0.36018162246349 * 
S_Frq + 0.01068760327542 * S_Income + -0.89719147415619 * S_Mnt + 0.11241727599926 * 
S_MntGoldProds + 0.64236815353055 * S_MntMeatProducts + 0.36278145113777 * S_MntWines + 
0.34466813565445 * S_NumDistPurchases + 0.05359534034679 * S_RFMstat + 0.02704700607418 * 
S_RMntFrq + -0.3718472688023 * S_Recency ;
1124028   +   H1x1_1  = H1x1_1  +     0.40642305557546 * G_Marital_Status0
1124029   +          +     -0.0248646279252 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.40642305557546 * G_Marital_Status0 + 
-0.0248646279252 * G_Marital_Status1 ;
1124030   +   H1x1_2  = H1x1_2  +     0.16115803721995 * G_Marital_Status0
1124031   +          +     0.05904755469144 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.16115803721995 * G_Marital_Status0 + 
0.05904755469144 * G_Marital_Status1 ;
1124032   +   H1x1_1  =     0.33463349044957 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33463349044957 + H1x1_1 ;
1124033   +   H1x1_2  =    -3.62976809107266 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -3.62976809107266 + H1x1_2 ;
1124034   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1124035   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1124036   +END;
MPRINT(EM_DIAGRAM):   END;
1124037   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124038   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1124039   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1124040   +END;
MPRINT(EM_DIAGRAM):   END;
1124041   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124042   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1124043   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124044   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124045   +   H1x2_1  =    -0.36010169192455 * S_AcceptedCmpTotal
1124046   +          +    -0.59887603386433 * S_Frq  +     0.50990837522658 * S_Income
1124047   +          +    -1.11866059151852 * S_Mnt  +     0.36285188228582 *
1124048   +        S_MntGoldProds  +     1.22856170475832 * S_MntMeatProducts
1124049   +          +     1.46123404932164 * S_MntWines  +    -0.01510122045686 *
1124050   +        S_NumDistPurchases  +     0.53310564732407 * S_RFMstat
1124051   +          +    -0.40691094193511 * S_RMntFrq  +     0.45756644061361 *
1124052   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.36010169192455 * S_AcceptedCmpTotal + -0.59887603386433 * 
S_Frq + 0.50990837522658 * S_Income + -1.11866059151852 * S_Mnt + 0.36285188228582 * 
S_MntGoldProds + 1.22856170475832 * S_MntMeatProducts + 1.46123404932164 * S_MntWines + 
-0.01510122045686 * S_NumDistPurchases + 0.53310564732407 * S_RFMstat + -0.40691094193511 * 
S_RMntFrq + 0.45756644061361 * S_Recency ;
1124053   +   H1x2_2  =    -0.17932261343465 * S_AcceptedCmpTotal
1124054   +          +     1.20080978426162 * S_Frq  +     0.18118647708641 * S_Income
1124055   +          +     0.31901116297924 * S_Mnt  +     0.02135897416621 *
1124056   +        S_MntGoldProds  +    -1.12534829348468 * S_MntMeatProducts
1124057   +          +     0.57649851666461 * S_MntWines  +    -1.46542585484816 *
1124058   +        S_NumDistPurchases  +    -0.20960777623629 * S_RFMstat
1124059   +          +      0.6962031545587 * S_RMntFrq  +     0.00840421006739 *
1124060   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.17932261343465 * S_AcceptedCmpTotal + 1.20080978426162 * 
S_Frq + 0.18118647708641 * S_Income + 0.31901116297924 * S_Mnt + 0.02135897416621 * 
S_MntGoldProds + -1.12534829348468 * S_MntMeatProducts + 0.57649851666461 * S_MntWines + 
-1.46542585484816 * S_NumDistPurchases + -0.20960777623629 * S_RFMstat + 0.6962031545587 * 
S_RMntFrq + 0.00840421006739 * S_Recency ;
1124061   +   H1x2_1  = H1x2_1  +    -0.05195034052296 * G_Marital_Status0
1124062   +          +     -0.2774675863976 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -0.05195034052296 * G_Marital_Status0 + 
-0.2774675863976 * G_Marital_Status1 ;
1124063   +   H1x2_2  = H1x2_2  +     0.01901604294952 * G_Marital_Status0
1124064   +          +      -0.277144006775 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + 0.01901604294952 * G_Marital_Status0 + -0.277144006775 
* G_Marital_Status1 ;
1124065   +   H1x2_1  =     1.53233871423223 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.53233871423223 + H1x2_1 ;
1124066   +   H1x2_2  =     1.35238678006556 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.35238678006556 + H1x2_2 ;
1124067   +   H1x2_1  = SIN(H1x2_1 );
MPRINT(EM_DIAGRAM):   H1x2_1 = SIN(H1x2_1 );
1124068   +   H1x2_2  = SIN(H1x2_2 );
MPRINT(EM_DIAGRAM):   H1x2_2 = SIN(H1x2_2 );
1124069   +END;
MPRINT(EM_DIAGRAM):   END;
1124070   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124071   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1124072   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1124073   +END;
MPRINT(EM_DIAGRAM):   END;
1124074   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124075   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1124076   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124077   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124078   +   H1x3_1  =     1.63523210720409 * S_AcceptedCmpTotal
1124079   +          +     0.41751349520438 * S_Frq  +    -0.87449723255309 * S_Income
1124080   +          +    -0.47825070320724 * S_Mnt  +     0.76630810205636 *
1124081   +        S_MntGoldProds  +    -0.35835365889925 * S_MntMeatProducts
1124082   +          +    -1.27333688175297 * S_MntWines  +    -1.52770581313638 *
1124083   +        S_NumDistPurchases  +     0.86851574498866 * S_RFMstat
1124084   +          +     0.84614746872207 * S_RMntFrq  +    -1.64268632744477 *
1124085   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.63523210720409 * S_AcceptedCmpTotal + 0.41751349520438 * 
S_Frq + -0.87449723255309 * S_Income + -0.47825070320724 * S_Mnt + 0.76630810205636 * 
S_MntGoldProds + -0.35835365889925 * S_MntMeatProducts + -1.27333688175297 * S_MntWines + 
-1.52770581313638 * S_NumDistPurchases + 0.86851574498866 * S_RFMstat + 0.84614746872207 * 
S_RMntFrq + -1.64268632744477 * S_Recency ;
1124086   +   H1x3_2  =    -0.18638529120439 * S_AcceptedCmpTotal
1124087   +          +     0.76011175462816 * S_Frq  +     0.58495336465132 * S_Income
1124088   +          +     0.65856698208574 * S_Mnt  +     0.68781212622472 *
1124089   +        S_MntGoldProds  +    -1.09375532907934 * S_MntMeatProducts
1124090   +          +     1.39481639500189 * S_MntWines  +     0.26914802103737 *
1124091   +        S_NumDistPurchases  +    -2.20511156805519 * S_RFMstat
1124092   +          +     1.66705142994155 * S_RMntFrq  +    -0.36249885315985 *
1124093   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.18638529120439 * S_AcceptedCmpTotal + 0.76011175462816 * 
S_Frq + 0.58495336465132 * S_Income + 0.65856698208574 * S_Mnt + 0.68781212622472 * 
S_MntGoldProds + -1.09375532907934 * S_MntMeatProducts + 1.39481639500189 * S_MntWines + 
0.26914802103737 * S_NumDistPurchases + -2.20511156805519 * S_RFMstat + 1.66705142994155 * 
S_RMntFrq + -0.36249885315985 * S_Recency ;
1124094   +   H1x3_1  = H1x3_1  +     -0.2579393569494 * G_Marital_Status0
1124095   +          +    -1.04614665932456 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -0.2579393569494 * G_Marital_Status0 + 
-1.04614665932456 * G_Marital_Status1 ;
1124096   +   H1x3_2  = H1x3_2  +    -1.03096078089306 * G_Marital_Status0
1124097   +          +    -0.71974289565489 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + -1.03096078089306 * G_Marital_Status0 + 
-0.71974289565489 * G_Marital_Status1 ;
1124098   +   H1x3_1  =    -0.91456189694636 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.91456189694636 + H1x3_1 ;
1124099   +   H1x3_2  =    -0.51701043559885 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.51701043559885 + H1x3_2 ;
1124100   +   H1x3_1  = SIN(H1x3_1 );
MPRINT(EM_DIAGRAM):   H1x3_1 = SIN(H1x3_1 );
1124101   +   H1x3_2  = SIN(H1x3_2 );
MPRINT(EM_DIAGRAM):   H1x3_2 = SIN(H1x3_2 );
1124102   +END;
MPRINT(EM_DIAGRAM):   END;
1124103   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124104   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1124105   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1124106   +END;
MPRINT(EM_DIAGRAM):   END;
1124107   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124108   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1124109   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124110   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124111   +   H2x1_1  =     1.47132066677712 * H1x1_1  +      1.2723487532385 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.47132066677712 * H1x1_1 + 1.2723487532385 * H1x1_2 ;
1124112   +   H2x1_2  =     1.58711243971308 * H1x1_1  +      6.5189759089623 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.58711243971308 * H1x1_1 + 6.5189759089623 * H1x1_2 ;
1124113   +   H2x1_1  = H2x1_1  +     1.30878911727231 * H1x2_1
1124114   +          +     2.19496661698373 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.30878911727231 * H1x2_1 + 2.19496661698373 * H1x2_2 ;
1124115   +   H2x1_2  = H2x1_2  +    -3.82744270061369 * H1x2_1
1124116   +          +      1.3090956402929 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -3.82744270061369 * H1x2_1 + 1.3090956402929 * H1x2_2 ;
1124117   +   H2x1_1  = H2x1_1  +    -0.97307968271784 * H1x3_1
1124118   +          +     0.17025511053322 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.97307968271784 * H1x3_1 + 0.17025511053322 * H1x3_2 
;
1124119   +   H2x1_2  = H2x1_2  +    -0.00685159977192 * H1x3_1
1124120   +          +     0.53377830648041 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.00685159977192 * H1x3_1 + 0.53377830648041 * H1x3_2 
;
1124121   +   H2x1_1  =    -2.88828567261654 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -2.88828567261654 + H2x1_1 ;
1124122   +   H2x1_2  =    -0.63666932052712 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.63666932052712 + H2x1_2 ;
1124123   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1124124   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1124125   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1124126   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1124127   +END;
MPRINT(EM_DIAGRAM):   END;
1124128   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124129   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1124130   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1124131   +END;
MPRINT(EM_DIAGRAM):   END;
1124132   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124133   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1124134   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124135   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124136   +   H2x2_1  =     -0.1591646734645 * H1x1_1  +     2.50898584287812 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.1591646734645 * H1x1_1 + 2.50898584287812 * H1x1_2 ;
1124137   +   H2x2_2  =    -1.04022138862095 * H1x1_1  +     -3.2120641538371 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.04022138862095 * H1x1_1 + -3.2120641538371 * H1x1_2 ;
1124138   +   H2x2_1  = H2x2_1  +     0.95364577994168 * H1x2_1
1124139   +          +     0.39917449615996 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.95364577994168 * H1x2_1 + 0.39917449615996 * H1x2_2 ;
1124140   +   H2x2_2  = H2x2_2  +     0.34367752685876 * H1x2_1
1124141   +          +    -0.43345610313251 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.34367752685876 * H1x2_1 + -0.43345610313251 * H1x2_2 
;
1124142   +   H2x2_1  = H2x2_1  +    -0.21053791455319 * H1x3_1
1124143   +          +     1.30320774323126 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21053791455319 * H1x3_1 + 1.30320774323126 * H1x3_2 
;
1124144   +   H2x2_2  = H2x2_2  +    -0.56776778702573 * H1x3_1
1124145   +          +     0.23307461428861 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -0.56776778702573 * H1x3_1 + 0.23307461428861 * H1x3_2 
;
1124146   +   H2x2_1  =    -0.57800274966727 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.57800274966727 + H2x2_1 ;
1124147   +   H2x2_2  =     -0.3490585254981 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -0.3490585254981 + H2x2_2 ;
1124148   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1124149   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1124150   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1124151   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1124152   +END;
MPRINT(EM_DIAGRAM):   END;
1124153   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124154   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1124155   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1124156   +END;
MPRINT(EM_DIAGRAM):   END;
1124157   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124158   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1124159   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124160   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124161   +   H3x1_1  =     2.93892662286754 * H2x1_1  +     4.69530667636314 * H2x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 2.93892662286754 * H2x1_1 + 4.69530667636314 * H2x1_2 ;
1124162   +   H3x1_1  = H3x1_1  +     0.63147427004529 * H2x2_1
1124163   +          +    -3.38971951524722 * H2x2_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.63147427004529 * H2x2_1 + -3.38971951524722 * H2x2_2 
;
1124164   +   H3x1_1  =    -2.10378320265168 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -2.10378320265168 + H3x1_1 ;
1124165   +   H3x1_2  = 0;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0;
1124166   +   _MAX_ = MAX (H3x1_1 , H3x1_2 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 );
1124167   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1124168   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1124169   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1124170   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1124171   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1124172   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1124173   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1124174   +END;
MPRINT(EM_DIAGRAM):   END;
1124175   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124176   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1124177   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1124178   +END;
MPRINT(EM_DIAGRAM):   END;
1124179   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124180   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1124181   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124182   +
1124183   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1124184   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1124185   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1124186   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1124187   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1124188   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1124189   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1124190   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1124191   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1124192   +end;
MPRINT(EM_DIAGRAM):   end;
1124193   +else do;
MPRINT(EM_DIAGRAM):   else do;
1124194   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1124195   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1124196   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1124197   +   end;
MPRINT(EM_DIAGRAM):   end;
1124198   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1124199   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1124200   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1124201   +   end;
MPRINT(EM_DIAGRAM):   end;
1124202   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1124203   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1124204   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1124205   +   end;
MPRINT(EM_DIAGRAM):   end;
1124206   +end;
MPRINT(EM_DIAGRAM):   end;
1124207   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1124208   +   P_DepVar1  =    -8.80200545202031 * H3x1_1  +    -0.19646708431763 * H3x1_2
1124209   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.80200545202031 * H3x1_1 + -0.19646708431763 * H3x1_2 ;
1124210   +   P_DepVar1  =     3.75158164611687 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.75158164611687 + P_DepVar1 ;
1124211   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1124212   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1124213   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1124214   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1124215   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1124216   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1124217   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1124218   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1124219   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1124220   +END;
MPRINT(EM_DIAGRAM):   END;
1124221   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1124222   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1124223   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1124224   +END;
MPRINT(EM_DIAGRAM):   END;
1124225   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1124226   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1124227   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1124228   +END;
MPRINT(EM_DIAGRAM):   END;
1124229   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1124230   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1124231   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1124232   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1124233   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1124234   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1124235   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1124236   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124237   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1124238   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1124239   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1124240   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1124241   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1124242   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1124243   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1124244   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1124245   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1124246   +END;
MPRINT(EM_DIAGRAM):   END;
1124247   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1124248   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1124249   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1124250   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1124251    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL31_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1124252    quit;
1124253    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1124254    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1124255    * AutoNeural31: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * AutoNeural31: Computing metadata for TRAIN data;
1124256    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.AUTONEURAL31_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.AutoNeural31_TRAIN out=_tempAdvisor 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.AutoNeural31_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.AutoNeural31_TRAIN out=WORK.M2A182WZ 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A182WZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A182WZ(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A182WZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A182WZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1MJVHE4 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2MUW6HQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MJVHE4;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural31_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "AutoNeural31";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "AutoNeural31";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural31: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1124568    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1124569    set EMWS8.AutoNeural31_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural31_EMINFO;
1124570    where DATA='AutoNeural31' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='AutoNeural31' and KEY ^in('DECDATA', 'DECMETA', 
'IMPORTANCE', 'MODEL');
1124571    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL31_EMINFO.
      WHERE (DATA='AutoNeural31') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1124572    data EMWS8.AutoNeural31_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.AutoNeural31_EMINFO;
1124573    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1124574    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1124575    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.AUTONEURAL31_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
1124579    run;
1124580    data EMWS8.AutoNeural31_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural31_EMINFO;
1124581    set EMWS8.AutoNeural31_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural31_EMINFO WORK.MODELTEMP_INFO;
1124582    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL31_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL31_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1124583    proc sort data = EMWS8.AutoNeural31_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.AutoNeural31_EMINFO NOTHREADS;
1124584    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1124585    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL31_EMINFO.
NOTE: The data set EMWS8.AUTONEURAL31_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1124586    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1124587    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1124588    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1124589    proc sort data = EMWS8.AutoNeural31_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.AutoNeural31_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1124590    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1124591    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL31_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1124592    data EMWS8.AutoNeural31_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural31_EMINFO;
1124593    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1124594    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1124595    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL31_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1124596    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1124597    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1124598    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1124599    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.AUTONEURAL31_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.AUTONEURAL31_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
