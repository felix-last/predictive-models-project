*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                21.10 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21.10 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                21.10 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0NLM9TQ
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0NLM9TQ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21.10 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21.10 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
(FREQ=(WHERE='ROLE = "FREQ"' DEFAULT='Y' RULE=(RULE1=(DESCRIPTION='USEATMOST1FREQ'
VALUES=(VALUE1='Y' )[93647] MAX=1 EXCEEDMAXVALUE='' )[93651] )[93645]
VALIDCHOICES=(CHOICE1='Y' )[93649] )[93933] INPUTREJECT=(WHERE='ROLE in("INPUT", "REJECTED")'
DEFAULT='D' VALIDCHOICES=(CHOICE1='D' )[93655]
RULE=(RULE1=(DESCRIPTION='USEATLEAST1INPUTREJECT' WHERE='(ROLE = "INPUT" and USE in("Y" "D"))
or (ROLE = "REJECTED" and USE = "Y")' MIN=. )[93659] )[93657] )[93653] TARGET=(WHERE='ROLE =
"TARGET"' DEFAULT='Y' VALIDCHOICES=(CHOICE1='Y' CHOICE2='N' )[93663]
RULE=(RULE1=(DESCRIPTION='METADATA.USE1TARGET' VALUES=(VALUE1='Y' )[93669] MIN=1 MAX=1
EXCEEDMAXVALUE='N' )[93667] )[93665] )[93661] )[93643]
143023     proc freq data=EMWS8.Ensmbl10_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Ensmbl10_VariableSet noprint;
143024     table ROLE*LEVEL/out=WORK.Ensmbl10META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Ensmbl10META;
143025     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.ENSMBL10_VARIABLESET.
NOTE: The data set WORK.ENSMBL10META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
143026     proc print data=WORK.Ensmbl10META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl10META label noobs;
143027     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
143028     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
143028   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
143028   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
143029     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
143030     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
143031     run;
 
NOTE: There were 6 observations read from the data set WORK.ENSMBL10META.
NOTE: The PROCEDURE PRINT printed page 40.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143032     title10;
MPRINT(EM_DIAGRAM):   title10;
143033     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.Neural34_TRAIN EMWS8.Neural34_TRAIN
EMWS8.Neural34_TRAIN EMWS8.Neural34_TRAIN EMWS8 Neural34_TRAIN
EMWS8.Neural34_TRAIN EMWS8.Neural34_TRAIN
EMWS8.Neural34_TRAIN EMWS8.Neural34_TRAIN EMWS8 Neural34_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Neural34_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural34_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
143062     data WORK.Ensmbl10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
143063     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
143064     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
143064   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
143064   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
143065        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
143065   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
143065   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
143066     set EMWS8.NEURAL34_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.NEURAL34_DEPVAR_DM( where=(_TYPE_="TARGET"));
143067     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
143068     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
143069     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
143070     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
143071     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
143072     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
143073     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
143074     end;
MPRINT(EM_DIAGRAM):   end;
143075     output;
MPRINT(EM_DIAGRAM):   output;
143076     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL34_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENSMBL10_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
143077     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
143078     proc print data=WORK.Ensmbl10_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl10_EVENT noobs label;
143079     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
143080     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
143081     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
143082     run;
 
NOTE: There were 1 observations read from the data set WORK.ENSMBL10_EVENT.
NOTE: The PROCEDURE PRINT printed page 41.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143083     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
143084     proc print data = EMWS8.Neural34_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Neural34_DepVar_DM noobs label;
143085     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
143086     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
143087     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
143087   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
143087   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
143088     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
143089     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
143090     run;
 
NOTE: There were 7 observations read from the data set EMWS8.NEURAL34_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 42.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143091     title10;
MPRINT(EM_DIAGRAM):   title10;
143092     %let groupid =;
143093     %let endGroupid =;
143094     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
143095     set EMWS8.Neural34_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural34_EMINFO;
143096     where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
143096   ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
143097     if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
143098     else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
143099     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.NEURAL34_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143100     %let groupid =;
143101     %let endGroupid =;
143102     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
143103     set EMWS8.AutoNeural42_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural42_EMINFO;
143104     where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
143104   ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
143105     if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
143106     else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
143107     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL42_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143108     %let groupid =;
143109     %let endGroupid =;
143110     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
143111     set EMWS8.AutoNeural46_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural46_EMINFO;
143112     where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
143112   ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
143113     if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
143114     else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
143115     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL46_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143116     data WORK.Ensmbl10;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl10;
143117     length NodeId $32 Model $64;
MPRINT(EM_DIAGRAM):   length NodeId $32 Model $64;
143118     label Nodeid = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel,  NOQUOTE))" Model
143118   ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeltype,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Nodeid = "Node Id" Model = "rpt_modeltype";
143119     nodeid="NEURAL34";
MPRINT(EM_DIAGRAM):   nodeid="NEURAL34";
143120     model="Neural";
MPRINT(EM_DIAGRAM):   model="Neural";
143121     output;
MPRINT(EM_DIAGRAM):   output;
143122     nodeid="AUTONEURAL42";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL42";
143123     model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
143124     output;
MPRINT(EM_DIAGRAM):   output;
143125     nodeid="AUTONEURAL46";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL46";
143126     model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
143127     output;
MPRINT(EM_DIAGRAM):   output;
143128     ;
MPRINT(EM_DIAGRAM):   ;
143129     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.ENSMBL10 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143130     title;
MPRINT(EM_DIAGRAM):   title;
143131     proc print data=WORK.Ensmbl10 label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl10 label noobs;
143132     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_combinemodels_title,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Imported Models to be Combined";
143133     title10 "Probability Function: Average";
MPRINT(EM_DIAGRAM):   title10 "Probability Function: Average";
MPRINT(EM_DIAGRAM):   run;
143134     run;
 
NOTE: There were 3 observations read from the data set WORK.ENSMBL10.
NOTE: The PROCEDURE PRINT printed page 43.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143135     title9;
MPRINT(EM_DIAGRAM):   title9;
143136     title10;
MPRINT(EM_DIAGRAM):   title10;
143137     data WORK.M0N2_ZC5;
MPRINT(EM_DIAGRAM):    data WORK.M0N2_ZC5;
143138     set WORK.M0N2_ZC5;
MPRINT(EM_DIAGRAM):   set WORK.M0N2_ZC5;
143139     where NAME = "DepVar";
MPRINT(EM_DIAGRAM):   where NAME = "DepVar";
143140     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M0N2_ZC5.
      WHERE NAME='DepVar';
NOTE: The data set WORK.M0N2_ZC5 has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
143141     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
143142     * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
143143     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
143144     %macro DMDBClass;
143145         DepVar(DESC)
143146     %mend DMDBClass;
143147     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
143148     * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
143149     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
143150     %macro DMDBVar;
143151
143152     %mend DMDBVar;
143153     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143154     * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
143155     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143156     proc dmdb batch data=EMWS8.Neural34_TRAIN
143157     dmdbcat=WORK.EM_DMDB
143158     maxlevel = 513
143159     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Neural34_TRAIN dmdbcat=WORK.EM_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   class
143160     class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
143161     target
143162     DepVar
143163     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
143164     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.NEURAL34_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL34_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
143165     quit;
143166     *--- end code ---*;
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21.10 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                21.10 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2OWE63V
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2OWE63V new;
MPRINT(EM_DIAGRAM):   run;
143268     filename emflow
143268   ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring NEURAL34_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143269     *------------------------------------------------------------*;
143270     * Ensmbl10: Scoring NEURAL34_TRAIN data;
143271     *------------------------------------------------------------*;
143272     data EMWS8.Ensmbl10_TRAIN
143273     / view=EMWS8.Ensmbl10_TRAIN
143274     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_TRAIN / view=EMWS8.Ensmbl10_TRAIN ;
143275     set EMWS8.Neural34_TRAIN
143276     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural34_TRAIN ;
143277     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas.
143278    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143279    +* Ensmbl10: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Combine model for DepVar;
143280    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143281    +* Ensmbl10: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 1 of 3;
143282    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143283    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143284    +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
143285    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
143286    +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
143287    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143288    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143289    +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
143290    +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
143291    +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
143292    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143293    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143294    +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
143295    +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
143296    +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
143297    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143298    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143299    +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
143300    +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
143301    +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
143302    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143303    +
143304    +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
143305    +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
143305   !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
143306    +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
143307    +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
143308    +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
143309    +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
143310    +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
143311    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143312    +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
143313    +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
143314    +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
143315    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143316    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143317    +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
143318    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143319    +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
143320    +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
143321    +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
143322    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143323    +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
143324    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
143325    +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
143326    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143327    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143328    +* TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
143329    +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
143330    +* NODE: Meta2;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
143331    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143332    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143333    +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
143334    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
143335    +* NODE: Neural34;
MPRINT(EM_DIAGRAM):   * NODE: Neural34;
143336    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143337    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
143338    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
143339    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
143340    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
143341    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
143342    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
143343    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
143344    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
143345    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
143346    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
143347    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
143348    +LENGTH _WARN_ $4
143349    +      F_DepVar  $ 12
143350    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
143351    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
143352    +
143353    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
143354    +
143355    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
143356    +
143357    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
143358    +
143359    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
143360    +
143361    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
143362    +
143363    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
143364    +
143365    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
143366    +
143367    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
143368    +
143369    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
143370    +
143371    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
143372    +
143373    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
143374    +
143375    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
143376    +
143377    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
143378    +
143379    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
143380    +
143381    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
143382    +
143383    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
143384    +
143385    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
143386    +
143387    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
143388    +
143389    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
143390    +
143391    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
143392    +
143393    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
143394    +
143395    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
143396    +
143397    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
143398    +
143399    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
143400    +
143401    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
143402    +
143403    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
143404    +
143405    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
143406    +
143407    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
143408    +
143409    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
143410    +
143411    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
143412    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
143413    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
143414    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
143415    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
143416    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
143417    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
143418    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
143419    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
143420    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
143421    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
143422    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
143423    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
143424    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
143425    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143426    +end;
MPRINT(EM_DIAGRAM):   end;
143427    +else do;
MPRINT(EM_DIAGRAM):   else do;
143428    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
143429    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
143430    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
143431    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
143432    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
143433    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
143434    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
143435    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
143436    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143437    +         end;
MPRINT(EM_DIAGRAM):   end;
143438    +         else do;
MPRINT(EM_DIAGRAM):   else do;
143439    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
143440    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
143441    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143442    +            end;
MPRINT(EM_DIAGRAM):   end;
143443    +         end;
MPRINT(EM_DIAGRAM):   end;
143444    +      end;
MPRINT(EM_DIAGRAM):   end;
143445    +      else do;
MPRINT(EM_DIAGRAM):   else do;
143446    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
143447    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
143448    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143449    +         end;
MPRINT(EM_DIAGRAM):   end;
143450    +      end;
MPRINT(EM_DIAGRAM):   end;
143451    +   end;
MPRINT(EM_DIAGRAM):   end;
143452    +   else do;
MPRINT(EM_DIAGRAM):   else do;
143453    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
143454    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
143455    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143456    +      end;
MPRINT(EM_DIAGRAM):   end;
143457    +      else do;
MPRINT(EM_DIAGRAM):   else do;
143458    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
143459    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
143460    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
143461    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
143462    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
143463    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143464    +         end;
MPRINT(EM_DIAGRAM):   end;
143465    +      end;
MPRINT(EM_DIAGRAM):   end;
143466    +   end;
MPRINT(EM_DIAGRAM):   end;
143467    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
143468    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
143469    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
143470    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
143471    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
143472    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
143473    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143474    +   end;
MPRINT(EM_DIAGRAM):   end;
143475    +end;
MPRINT(EM_DIAGRAM):   end;
143476    +
143477    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143478    +*** Checking missing input Interval
143479    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
143480    +
143481    +IF NMISS(
143482    +   AcceptedCmpTotal ,
143483    +   Frq ,
143484    +   Income ,
143485    +   Mnt ,
143486    +   MntGoldProds ,
143487    +   MntMeatProducts ,
143488    +   NumCatalogPurchases ,
143489    +   NumDealsPurchases ,
143490    +   NumWebVisitsMonth ,
143491    +   RFMstat ,
143492    +   Recency ,
143493    +   Teenhome ,
143494    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
143495    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
143496    +
143497    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143498    +END;
MPRINT(EM_DIAGRAM):   END;
143499    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143500    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
143501    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143502    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
143503    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
143504    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
143505    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
143506    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
143507    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
143508    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
143509    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
143510    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
143511    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
143512    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
143513    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
143514    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
143515    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
143516    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
143517    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
143518    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
143519    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
143520    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
143521    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
143522    +END;
MPRINT(EM_DIAGRAM):   END;
143523    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
143524    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
143525    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
143526    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
143527    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
143528    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
143529    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
143530    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
143531    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
143532    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
143533    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
143534    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
143535    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
143536    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
143537    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
143538    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
143539    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
143540    +   ELSE S_NumCatalogPurchases
143541    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
143542    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
143543    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
143544    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
143545    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
143546    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
143547    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
143548    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
143549    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
143550    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
143551    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
143552    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
143553    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
143554    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
143555    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
143556    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
143557    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
143558    +END;
MPRINT(EM_DIAGRAM):   END;
143559    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143560    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
143561    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143562    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143563    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
143564    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143565    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
143566    +   H11  =     0.39113138187571 * S_AcceptedCmpTotal  +    -0.61540725344485 *
143567    +        S_Frq  +    -0.39640720965637 * S_Income  +    -0.29779259024925 *
143568    +        S_Mnt  +     0.09159537668687 * S_MntGoldProds
143569    +          +     0.66968861823847 * S_MntMeatProducts
143570    +          +     0.43410284729103 * S_NumCatalogPurchases
143571    +          +     0.38169769247512 * S_NumDealsPurchases
143572    +          +     0.42568124883788 * S_NumWebVisitsMonth
143573    +          +       0.117680996215 * S_RFMstat  +    -0.81755740196945 *
143574    +        S_Recency  +     0.34714100236873 * S_Teenhome
143575    +          +     0.39595885220917 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.39113138187571 * S_AcceptedCmpTotal + -0.61540725344485 * S_Frq
+ -0.39640720965637 * S_Income + -0.29779259024925 * S_Mnt + 0.09159537668687 * S_MntGoldProds
+ 0.66968861823847 * S_MntMeatProducts + 0.43410284729103 * S_NumCatalogPurchases +
0.38169769247512 * S_NumDealsPurchases + 0.42568124883788 * S_NumWebVisitsMonth +
0.117680996215 * S_RFMstat + -0.81755740196945 * S_Recency + 0.34714100236873 * S_Teenhome +
0.39595885220917 * S_Year_Birth ;
143576    +   H12  =    -0.17603311184545 * S_AcceptedCmpTotal  +    -1.87448667460975 *
143577    +        S_Frq  +    -0.13770783826558 * S_Income  +    -0.07794509574546 *
143578    +        S_Mnt  +     -0.0367231623133 * S_MntGoldProds
143579    +          +     0.43468157063779 * S_MntMeatProducts
143580    +          +     1.22287851495207 * S_NumCatalogPurchases
143581    +          +     1.34810668047823 * S_NumDealsPurchases
143582    +          +     0.29744386797792 * S_NumWebVisitsMonth
143583    +          +     0.24598010228595 * S_RFMstat  +     0.45054459604149 *
143584    +        S_Recency  +    -0.31884355104334 * S_Teenhome
143585    +          +    -0.49374494273323 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.17603311184545 * S_AcceptedCmpTotal + -1.87448667460975 * S_Frq
+ -0.13770783826558 * S_Income + -0.07794509574546 * S_Mnt + -0.0367231623133 * S_MntGoldProds
+ 0.43468157063779 * S_MntMeatProducts + 1.22287851495207 * S_NumCatalogPurchases +
1.34810668047823 * S_NumDealsPurchases + 0.29744386797792 * S_NumWebVisitsMonth +
0.24598010228595 * S_RFMstat + 0.45054459604149 * S_Recency + -0.31884355104334 * S_Teenhome +
-0.49374494273323 * S_Year_Birth ;
143586    +   H13  =    -0.35894234681627 * S_AcceptedCmpTotal  +     2.22535530920485 *
143587    +        S_Frq  +    -0.60759993740885 * S_Income  +    -0.19127405324439 *
143588    +        S_Mnt  +     0.13903548885363 * S_MntGoldProds
143589    +          +    -3.08800901663199 * S_MntMeatProducts
143590    +          +    -1.19043292478827 * S_NumCatalogPurchases
143591    +          +    -0.37179794210537 * S_NumDealsPurchases
143592    +          +     0.03624847445355 * S_NumWebVisitsMonth
143593    +          +    -0.62521514183331 * S_RFMstat  +     0.01074839631068 *
143594    +        S_Recency  +     0.08240530440608 * S_Teenhome
143595    +          +    -0.04154769345168 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.35894234681627 * S_AcceptedCmpTotal + 2.22535530920485 * S_Frq
+ -0.60759993740885 * S_Income + -0.19127405324439 * S_Mnt + 0.13903548885363 * S_MntGoldProds
+ -3.08800901663199 * S_MntMeatProducts + -1.19043292478827 * S_NumCatalogPurchases +
-0.37179794210537 * S_NumDealsPurchases + 0.03624847445355 * S_NumWebVisitsMonth +
-0.62521514183331 * S_RFMstat + 0.01074839631068 * S_Recency + 0.08240530440608 * S_Teenhome +
-0.04154769345168 * S_Year_Birth ;
143596    +   H14  =     0.72612390853906 * S_AcceptedCmpTotal  +    -1.03331426863575 *
143597    +        S_Frq  +     0.44630396705527 * S_Income  +    -1.29648064151656 *
143598    +        S_Mnt  +     0.20190465471738 * S_MntGoldProds
143599    +          +     0.78481425439956 * S_MntMeatProducts
143600    +          +      0.6107688367092 * S_NumCatalogPurchases
143601    +          +    -0.39308332306764 * S_NumDealsPurchases
143602    +          +     1.13986700740733 * S_NumWebVisitsMonth
143603    +          +    -0.10095149614189 * S_RFMstat  +    -1.23708147180809 *
143604    +        S_Recency  +    -0.40344648497219 * S_Teenhome
143605    +          +    -0.21455944295735 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.72612390853906 * S_AcceptedCmpTotal + -1.03331426863575 * S_Frq
+ 0.44630396705527 * S_Income + -1.29648064151656 * S_Mnt + 0.20190465471738 * S_MntGoldProds
+ 0.78481425439956 * S_MntMeatProducts + 0.6107688367092 * S_NumCatalogPurchases +
-0.39308332306764 * S_NumDealsPurchases + 1.13986700740733 * S_NumWebVisitsMonth +
-0.10095149614189 * S_RFMstat + -1.23708147180809 * S_Recency + -0.40344648497219 * S_Teenhome
+ -0.21455944295735 * S_Year_Birth ;
143606    +   H15  =    -0.52000103453301 * S_AcceptedCmpTotal  +    -0.14144790393123 *
143607    +        S_Frq  +    -0.47209445285116 * S_Income  +     0.51267592710475 *
143608    +        S_Mnt  +     0.07876708495313 * S_MntGoldProds
143609    +          +    -0.61914125284805 * S_MntMeatProducts
143610    +          +    -0.54746366292992 * S_NumCatalogPurchases
143611    +          +     0.25925395549236 * S_NumDealsPurchases
143612    +          +    -0.60979686139101 * S_NumWebVisitsMonth
143613    +          +     0.08166171339337 * S_RFMstat  +     0.96981534293427 *
143614    +        S_Recency  +     0.36245179070453 * S_Teenhome
143615    +          +    -0.09267442906112 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.52000103453301 * S_AcceptedCmpTotal + -0.14144790393123 * S_Frq
+ -0.47209445285116 * S_Income + 0.51267592710475 * S_Mnt + 0.07876708495313 * S_MntGoldProds
+ -0.61914125284805 * S_MntMeatProducts + -0.54746366292992 * S_NumCatalogPurchases +
0.25925395549236 * S_NumDealsPurchases + -0.60979686139101 * S_NumWebVisitsMonth +
0.08166171339337 * S_RFMstat + 0.96981534293427 * S_Recency + 0.36245179070453 * S_Teenhome +
-0.09267442906112 * S_Year_Birth ;
143616    +   H11  = H11  +     0.01565392034595 * Marital_StatusDivorced
143617    +          +     0.22493072364483 * Marital_StatusMarried
143618    +          +    -0.34177799020181 * Marital_StatusSingle
143619    +          +    -0.04779249269081 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01565392034595 * Marital_StatusDivorced + 0.22493072364483
* Marital_StatusMarried + -0.34177799020181 * Marital_StatusSingle + -0.04779249269081 *
Marital_StatusTogether ;
143620    +   H12  = H12  +     0.58482172427767 * Marital_StatusDivorced
143621    +          +     0.05031503177659 * Marital_StatusMarried
143622    +          +     0.28039335778718 * Marital_StatusSingle
143623    +          +     0.00709736205513 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.58482172427767 * Marital_StatusDivorced + 0.05031503177659
* Marital_StatusMarried + 0.28039335778718 * Marital_StatusSingle + 0.00709736205513 *
Marital_StatusTogether ;
143624    +   H13  = H13  +     0.35081594367456 * Marital_StatusDivorced
143625    +          +    -0.24395984745809 * Marital_StatusMarried
143626    +          +     0.22708224780413 * Marital_StatusSingle
143627    +          +    -0.34334833500124 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.35081594367456 * Marital_StatusDivorced +
-0.24395984745809 * Marital_StatusMarried + 0.22708224780413 * Marital_StatusSingle +
-0.34334833500124 * Marital_StatusTogether ;
143628    +   H14  = H14  +     0.85482961039457 * Marital_StatusDivorced
143629    +          +    -1.06411172500365 * Marital_StatusMarried
143630    +          +     0.57554615813234 * Marital_StatusSingle
143631    +          +    -0.91141797290702 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.85482961039457 * Marital_StatusDivorced +
-1.06411172500365 * Marital_StatusMarried + 0.57554615813234 * Marital_StatusSingle +
-0.91141797290702 * Marital_StatusTogether ;
143632    +   H15  = H15  +      0.2197825206844 * Marital_StatusDivorced
143633    +          +     0.66663600919341 * Marital_StatusMarried
143634    +          +    -0.69696969089357 * Marital_StatusSingle
143635    +          +     0.48232861459141 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2197825206844 * Marital_StatusDivorced + 0.66663600919341
* Marital_StatusMarried + -0.69696969089357 * Marital_StatusSingle + 0.48232861459141 *
Marital_StatusTogether ;
143636    +   H11  =    -1.58463812409211 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.58463812409211 + H11 ;
143637    +   H12  =    -0.59413927784841 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.59413927784841 + H12 ;
143638    +   H13  =    -1.40790569062078 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.40790569062078 + H13 ;
143639    +   H14  =     -0.2073181654495 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.2073181654495 + H14 ;
143640    +   H15  =     1.99108524971007 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.99108524971007 + H15 ;
143641    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
143642    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
143643    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
143644    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
143645    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
143646    +END;
MPRINT(EM_DIAGRAM):   END;
143647    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
143648    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
143649    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
143650    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
143651    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
143652    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
143653    +END;
MPRINT(EM_DIAGRAM):   END;
143654    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143655    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
143656    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143657    +
143658    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
143659    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
143660    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
143661    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
143662    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
143663    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
143664    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
143665    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
143666    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
143667    +end;
MPRINT(EM_DIAGRAM):   end;
143668    +else do;
MPRINT(EM_DIAGRAM):   else do;
143669    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
143670    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
143671    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
143672    +   end;
MPRINT(EM_DIAGRAM):   end;
143673    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
143674    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
143675    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
143676    +   end;
MPRINT(EM_DIAGRAM):   end;
143677    +   else do;
MPRINT(EM_DIAGRAM):   else do;
143678    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
143679    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
143680    +   end;
MPRINT(EM_DIAGRAM):   end;
143681    +end;
MPRINT(EM_DIAGRAM):   end;
143682    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
143683    +   P_DepVar1  =     3.73071630847853 * H11  +     2.94025483165613 * H12
143684    +          +    -3.96191932636925 * H13  +     3.36339025105162 * H14
143685    +          +    -4.82596427081675 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.73071630847853 * H11 + 2.94025483165613 * H12 +
-3.96191932636925 * H13 + 3.36339025105162 * H14 + -4.82596427081675 * H15 ;
143686    +   P_DepVar1  =     0.43428060622858 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.43428060622858 + P_DepVar1 ;
143687    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
143688    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
143689    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
143690    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
143691    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
143692    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
143693    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
143694    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
143695    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
143696    +END;
MPRINT(EM_DIAGRAM):   END;
143697    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
143698    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
143699    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
143700    +END;
MPRINT(EM_DIAGRAM):   END;
143701    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
143702    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
143703    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
143704    +END;
MPRINT(EM_DIAGRAM):   END;
143705    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
143706    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
143707    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
143708    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
143709    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
143710    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
143711    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
143712    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143713    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
143714    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143715    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
143716    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
143717    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
143718    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
143719    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
143720    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
143721    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
143722    +END;
MPRINT(EM_DIAGRAM):   END;
143723    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
143724    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
143725    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
143726    +drop
143727    +H11
143728    +H12
143729    +H13
143730    +H14
143731    +H15
143732    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
143733    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
143734    +* Renaming variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural34;
143735    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143736    +* Renaming Posterior variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural34;
143737    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143738    +drop Neural34_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar1;
143739    +Neural34_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar1 = P_DepVar1;
143740    +drop Neural34_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar0;
143741    +Neural34_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar0 = P_DepVar0;
143742    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143743    +* Renaming _WARN_ variable for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural34;
143744    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143745    +length Neural34_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural34_WARN_ $4;
143746    +drop Neural34_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural34_WARN_;
143747    +Neural34_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural34_WARN_ = _WARN_;
143748    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143749    +* Ensmbl10: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 2 of 3;
143750    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143751    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143752    +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
143753    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
143754    +* NODE: AutoNeural42;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural42;
143755    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
143756    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
143757    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
143758    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
143759    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
143760    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
143761    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
143762    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
143763    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
143764    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
143765    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
143766    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
143767    +LENGTH _WARN_ $4
143768    +      F_DepVar  $ 12
143769    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
143770    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
143771    +
143772    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
143773    +
143774    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
143775    +
143776    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
143777    +
143778    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
143779    +
143780    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
143781    +
143782    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
143783    +
143784    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
143785    +
143786    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
143787    +
143788    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
143789    +
143790    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
143791    +
143792    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
143793    +
143794    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
143795    +
143796    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
143797    +
143798    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
143799    +
143800    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
143801    +
143802    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
143803    +
143804    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
143805    +
143806    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
143807    +
143808    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
143809    +
143810    +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
143811    +
143812    +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
143813    +
143814    +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
143815    +
143816    +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
143817    +
143818    +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
143819    +
143820    +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
143821    +
143822    +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
143823    +
143824    +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
143825    +
143826    +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
143827    +
143828    +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
143829    +
143830    +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
143831    +
143832    +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
143833    +
143834    +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
143835    +
143836    +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
143837    +
143838    +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
143839    +
143840    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
143841    +
143842    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
143843    +
143844    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
143845    +
143846    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
143847    +
143848    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
143849    +
143850    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
143851    +
143852    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
143853    +
143854    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
143855    +
143856    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
143857    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
143858    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
143859    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
143860    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
143861    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
143862    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
143863    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
143864    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
143865    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
143866    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
143867    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
143868    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
143869    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
143870    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143871    +end;
MPRINT(EM_DIAGRAM):   end;
143872    +else do;
MPRINT(EM_DIAGRAM):   else do;
143873    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
143874    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
143875    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
143876    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
143877    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
143878    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
143879    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
143880    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
143881    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143882    +         end;
MPRINT(EM_DIAGRAM):   end;
143883    +         else do;
MPRINT(EM_DIAGRAM):   else do;
143884    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
143885    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
143886    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143887    +            end;
MPRINT(EM_DIAGRAM):   end;
143888    +         end;
MPRINT(EM_DIAGRAM):   end;
143889    +      end;
MPRINT(EM_DIAGRAM):   end;
143890    +      else do;
MPRINT(EM_DIAGRAM):   else do;
143891    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
143892    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
143893    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143894    +         end;
MPRINT(EM_DIAGRAM):   end;
143895    +      end;
MPRINT(EM_DIAGRAM):   end;
143896    +   end;
MPRINT(EM_DIAGRAM):   end;
143897    +   else do;
MPRINT(EM_DIAGRAM):   else do;
143898    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
143899    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
143900    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143901    +      end;
MPRINT(EM_DIAGRAM):   end;
143902    +      else do;
MPRINT(EM_DIAGRAM):   else do;
143903    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
143904    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
143905    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
143906    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
143907    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
143908    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
143909    +         end;
MPRINT(EM_DIAGRAM):   end;
143910    +      end;
MPRINT(EM_DIAGRAM):   end;
143911    +   end;
MPRINT(EM_DIAGRAM):   end;
143912    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
143913    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
143914    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
143915    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
143916    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
143917    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
143918    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143919    +   end;
MPRINT(EM_DIAGRAM):   end;
143920    +end;
MPRINT(EM_DIAGRAM):   end;
143921    +
143922    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143923    +*** Checking missing input Interval
143924    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
143925    +
143926    +IF NMISS(
143927    +   AcceptedCmpTotal ,
143928    +   Frq ,
143929    +   Income ,
143930    +   Mnt ,
143931    +   MntGoldProds ,
143932    +   MntMeatProducts ,
143933    +   NumCatalogPurchases ,
143934    +   NumDealsPurchases ,
143935    +   NumWebVisitsMonth ,
143936    +   RFMstat ,
143937    +   Recency ,
143938    +   Teenhome ,
143939    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
143940    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
143941    +
143942    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
143943    +END;
MPRINT(EM_DIAGRAM):   END;
143944    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143945    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
143946    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
143947    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
143948    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
143949    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
143950    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
143951    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
143952    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
143953    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
143954    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
143955    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
143956    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
143957    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
143958    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
143959    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
143960    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
143961    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
143962    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
143963    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
143964    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
143965    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
143966    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
143967    +END;
MPRINT(EM_DIAGRAM):   END;
143968    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
143969    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
143970    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
143971    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
143972    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
143973    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
143974    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
143975    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
143976    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
143977    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
143978    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
143979    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
143980    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
143981    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
143982    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
143983    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
143984    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
143985    +   ELSE S_NumCatalogPurchases
143986    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
143987    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
143988    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
143989    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
143990    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
143991    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
143992    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
143993    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
143994    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
143995    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
143996    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
143997    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
143998    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
143999    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
144000    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
144001    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
144002    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
144003    +END;
MPRINT(EM_DIAGRAM):   END;
144004    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144005    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
144006    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144007    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144008    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
144009    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144010    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144011    +   H1x1_1  =    -3.92905088817122 * S_AcceptedCmpTotal
144012    +          +    -4.76567955922662 * S_Frq  +    -3.20305851407308 * S_Income
144013    +          +     10.4290156082038 * S_Mnt  +     2.82139196372317 *
144014    +        S_MntGoldProds  +    -4.54749029525518 * S_MntMeatProducts
144015    +          +    -12.1201262560598 * S_NumCatalogPurchases
144016    +          +    -7.64265449386917 * S_NumDealsPurchases
144017    +          +     -0.8154661733691 * S_NumWebVisitsMonth
144018    +          +    -7.34275682075933 * S_RFMstat  +     3.14025498790893 *
144019    +        S_Recency  +     3.79010135100643 * S_Teenhome
144020    +          +    -1.18831354068466 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -3.92905088817122 * S_AcceptedCmpTotal + -4.76567955922662 *
S_Frq + -3.20305851407308 * S_Income + 10.4290156082038 * S_Mnt + 2.82139196372317 *
S_MntGoldProds + -4.54749029525518 * S_MntMeatProducts + -12.1201262560598 *
S_NumCatalogPurchases + -7.64265449386917 * S_NumDealsPurchases + -0.8154661733691 *
S_NumWebVisitsMonth + -7.34275682075933 * S_RFMstat + 3.14025498790893 * S_Recency +
3.79010135100643 * S_Teenhome + -1.18831354068466 * S_Year_Birth ;
144021    +   H1x1_2  =    -4.72019183577823 * S_AcceptedCmpTotal
144022    +          +     5.14902294151494 * S_Frq  +     -2.7967028726716 * S_Income
144023    +          +     7.90170532262596 * S_Mnt  +    -0.27896242131344 *
144024    +        S_MntGoldProds  +    -6.13177486713562 * S_MntMeatProducts
144025    +          +    -5.64377068696071 * S_NumCatalogPurchases
144026    +          +       1.315880732417 * S_NumDealsPurchases
144027    +          +    -7.12689902819995 * S_NumWebVisitsMonth
144028    +          +     -0.1333171344564 * S_RFMstat  +     8.57178329047956 *
144029    +        S_Recency  +     2.42655161118896 * S_Teenhome
144030    +          +     0.41845495922131 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -4.72019183577823 * S_AcceptedCmpTotal + 5.14902294151494 *
S_Frq + -2.7967028726716 * S_Income + 7.90170532262596 * S_Mnt + -0.27896242131344 *
S_MntGoldProds + -6.13177486713562 * S_MntMeatProducts + -5.64377068696071 *
S_NumCatalogPurchases + 1.315880732417 * S_NumDealsPurchases + -7.12689902819995 *
S_NumWebVisitsMonth + -0.1333171344564 * S_RFMstat + 8.57178329047956 * S_Recency +
2.42655161118896 * S_Teenhome + 0.41845495922131 * S_Year_Birth ;
144031    +   H1x1_3  =    -3.47660178529996 * S_AcceptedCmpTotal
144032    +          +     6.36750571377116 * S_Frq  +    -3.65638554203354 * S_Income
144033    +          +     5.03085244876136 * S_Mnt  +    -1.53184712146016 *
144034    +        S_MntGoldProds  +    -11.4803326240536 * S_MntMeatProducts
144035    +          +    -7.71653347900468 * S_NumCatalogPurchases
144036    +          +    -2.29382480020793 * S_NumDealsPurchases
144037    +          +    -3.92350308032578 * S_NumWebVisitsMonth
144038    +          +      0.1666173174602 * S_RFMstat  +      5.5545699438819 *
144039    +        S_Recency  +     1.88830044274756 * S_Teenhome
144040    +          +     0.36177301880441 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.47660178529996 * S_AcceptedCmpTotal + 6.36750571377116 *
S_Frq + -3.65638554203354 * S_Income + 5.03085244876136 * S_Mnt + -1.53184712146016 *
S_MntGoldProds + -11.4803326240536 * S_MntMeatProducts + -7.71653347900468 *
S_NumCatalogPurchases + -2.29382480020793 * S_NumDealsPurchases + -3.92350308032578 *
S_NumWebVisitsMonth + 0.1666173174602 * S_RFMstat + 5.5545699438819 * S_Recency +
1.88830044274756 * S_Teenhome + 0.36177301880441 * S_Year_Birth ;
144041    +   H1x1_4  =     3.46597508500309 * S_AcceptedCmpTotal
144042    +          +    -3.55913679518365 * S_Frq  +     -3.8279864380535 * S_Income
144043    +          +     4.37031319397754 * S_Mnt  +     0.25558899887189 *
144044    +        S_MntGoldProds  +     1.30937005137526 * S_MntMeatProducts
144045    +          +     0.50178849511862 * S_NumCatalogPurchases
144046    +          +     3.33915340676542 * S_NumDealsPurchases
144047    +          +     2.99171363234904 * S_NumWebVisitsMonth
144048    +          +    -1.10860117011224 * S_RFMstat  +     -5.2144291963152 *
144049    +        S_Recency  +     1.84778865722952 * S_Teenhome
144050    +          +     1.48264084751626 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.46597508500309 * S_AcceptedCmpTotal + -3.55913679518365 *
S_Frq + -3.8279864380535 * S_Income + 4.37031319397754 * S_Mnt + 0.25558899887189 *
S_MntGoldProds + 1.30937005137526 * S_MntMeatProducts + 0.50178849511862 *
S_NumCatalogPurchases + 3.33915340676542 * S_NumDealsPurchases + 2.99171363234904 *
S_NumWebVisitsMonth + -1.10860117011224 * S_RFMstat + -5.2144291963152 * S_Recency +
1.84778865722952 * S_Teenhome + 1.48264084751626 * S_Year_Birth ;
144051    +   H1x1_5  =    -3.28077802512331 * S_AcceptedCmpTotal
144052    +          +     3.26112701694144 * S_Frq  +    -3.51257256391539 * S_Income
144053    +          +     -13.277904245629 * S_Mnt  +    -0.08185099069039 *
144054    +        S_MntGoldProds  +      2.6349809613264 * S_MntMeatProducts
144055    +          +    -5.23430097842472 * S_NumCatalogPurchases
144056    +          +    -1.25644862473488 * S_NumDealsPurchases
144057    +          +     -3.0943337340276 * S_NumWebVisitsMonth
144058    +          +     0.96429102250453 * S_RFMstat  +     4.60373013139143 *
144059    +        S_Recency  +     1.52557456336148 * S_Teenhome
144060    +          +     0.00287578113165 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.28077802512331 * S_AcceptedCmpTotal + 3.26112701694144 *
S_Frq + -3.51257256391539 * S_Income + -13.277904245629 * S_Mnt + -0.08185099069039 *
S_MntGoldProds + 2.6349809613264 * S_MntMeatProducts + -5.23430097842472 *
S_NumCatalogPurchases + -1.25644862473488 * S_NumDealsPurchases + -3.0943337340276 *
S_NumWebVisitsMonth + 0.96429102250453 * S_RFMstat + 4.60373013139143 * S_Recency +
1.52557456336148 * S_Teenhome + 0.00287578113165 * S_Year_Birth ;
144061    +   H1x1_1  = H1x1_1  +     1.77432710413329 * Marital_StatusDivorced
144062    +          +     5.12496303990022 * Marital_StatusMarried
144063    +          +    -7.61364369696186 * Marital_StatusSingle
144064    +          +     2.78937374370395 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.77432710413329 * Marital_StatusDivorced +
5.12496303990022 * Marital_StatusMarried + -7.61364369696186 * Marital_StatusSingle +
2.78937374370395 * Marital_StatusTogether ;
144065    +   H1x1_2  = H1x1_2  +    -5.49070434381597 * Marital_StatusDivorced
144066    +          +     7.65332274940308 * Marital_StatusMarried
144067    +          +    -5.13332947688313 * Marital_StatusSingle
144068    +          +     8.25159601985572 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -5.49070434381597 * Marital_StatusDivorced +
7.65332274940308 * Marital_StatusMarried + -5.13332947688313 * Marital_StatusSingle +
8.25159601985572 * Marital_StatusTogether ;
144069    +   H1x1_3  = H1x1_3  +     1.57910552070948 * Marital_StatusDivorced
144070    +          +     7.95162959069432 * Marital_StatusMarried
144071    +          +    -6.10797604390061 * Marital_StatusSingle
144072    +          +     2.98577039618027 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 1.57910552070948 * Marital_StatusDivorced +
7.95162959069432 * Marital_StatusMarried + -6.10797604390061 * Marital_StatusSingle +
2.98577039618027 * Marital_StatusTogether ;
144073    +   H1x1_4  = H1x1_4  +     3.65411081783958 * Marital_StatusDivorced
144074    +          +     5.45977621823616 * Marital_StatusMarried
144075    +          +    -10.3527985391218 * Marital_StatusSingle
144076    +          +     4.66094015963389 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 3.65411081783958 * Marital_StatusDivorced +
5.45977621823616 * Marital_StatusMarried + -10.3527985391218 * Marital_StatusSingle +
4.66094015963389 * Marital_StatusTogether ;
144077    +   H1x1_5  = H1x1_5  +     1.57864743151562 * Marital_StatusDivorced
144078    +          +     8.15909630638185 * Marital_StatusMarried
144079    +          +    -5.88497367282032 * Marital_StatusSingle
144080    +          +     3.05474303626666 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 1.57864743151562 * Marital_StatusDivorced +
8.15909630638185 * Marital_StatusMarried + -5.88497367282032 * Marital_StatusSingle +
3.05474303626666 * Marital_StatusTogether ;
144081    +   H1x1_1  =    -1.55078746609233 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.55078746609233 + H1x1_1 ;
144082    +   H1x1_2  =     5.40474806112383 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 5.40474806112383 + H1x1_2 ;
144083    +   H1x1_3  =     11.2733164995662 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 11.2733164995662 + H1x1_3 ;
144084    +   H1x1_4  =    -7.78487963966384 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.78487963966384 + H1x1_4 ;
144085    +   H1x1_5  =      3.8784406873535 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 3.8784406873535 + H1x1_5 ;
144086    +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
144087    +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
144088    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
144089    +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
144090    +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
144091    +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
144092    +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
144093    +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
144094    +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
144095    +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
144096    +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
144097    +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
144098    +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
144099    +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
144100    +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
144101    +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
144102    +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
144103    +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
144104    +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
144105    +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
144106    +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
144107    +END;
MPRINT(EM_DIAGRAM):   END;
144108    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144109    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
144110    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
144111    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
144112    +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
144113    +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
144114    +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
144115    +END;
MPRINT(EM_DIAGRAM):   END;
144116    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144117    +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
144118    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144119    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144120    +   H1x2_1  =     0.07453146398445 * S_AcceptedCmpTotal
144121    +          +     0.17438368465616 * S_Frq  +     0.97121905855093 * S_Income
144122    +          +    -0.15757686261675 * S_Mnt  +     0.28678754855648 *
144123    +        S_MntGoldProds  +     2.03999655184815 * S_MntMeatProducts
144124    +          +      0.8747576336553 * S_NumCatalogPurchases
144125    +          +    -0.23551985234916 * S_NumDealsPurchases
144126    +          +     0.83901499225112 * S_NumWebVisitsMonth
144127    +          +     -0.7643570473353 * S_RFMstat  +      0.0823609346051 *
144128    +        S_Recency  +    -0.38340703993831 * S_Teenhome
144129    +          +     1.16037573405943 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.07453146398445 * S_AcceptedCmpTotal + 0.17438368465616 *
S_Frq + 0.97121905855093 * S_Income + -0.15757686261675 * S_Mnt + 0.28678754855648 *
S_MntGoldProds + 2.03999655184815 * S_MntMeatProducts + 0.8747576336553 *
S_NumCatalogPurchases + -0.23551985234916 * S_NumDealsPurchases + 0.83901499225112 *
S_NumWebVisitsMonth + -0.7643570473353 * S_RFMstat + 0.0823609346051 * S_Recency +
-0.38340703993831 * S_Teenhome + 1.16037573405943 * S_Year_Birth ;
144130    +   H1x2_2  =      -2.285017059996 * S_AcceptedCmpTotal
144131    +          +    -0.29646095672581 * S_Frq  +     -3.5024410668082 * S_Income
144132    +          +    -2.12091528193185 * S_Mnt  +    -1.48506012188621 *
144133    +        S_MntGoldProds  +    -1.38316375865608 * S_MntMeatProducts
144134    +          +    -0.99107054453387 * S_NumCatalogPurchases
144135    +          +    -0.68379823410573 * S_NumDealsPurchases
144136    +          +    -1.67939872609259 * S_NumWebVisitsMonth
144137    +          +     0.49106697429539 * S_RFMstat  +    -0.01117108974211 *
144138    +        S_Recency  +    -1.65033346710833 * S_Teenhome
144139    +          +    -1.03897054098621 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -2.285017059996 * S_AcceptedCmpTotal + -0.29646095672581 *
S_Frq + -3.5024410668082 * S_Income + -2.12091528193185 * S_Mnt + -1.48506012188621 *
S_MntGoldProds + -1.38316375865608 * S_MntMeatProducts + -0.99107054453387 *
S_NumCatalogPurchases + -0.68379823410573 * S_NumDealsPurchases + -1.67939872609259 *
S_NumWebVisitsMonth + 0.49106697429539 * S_RFMstat + -0.01117108974211 * S_Recency +
-1.65033346710833 * S_Teenhome + -1.03897054098621 * S_Year_Birth ;
144140    +   H1x2_3  =      2.9562672276462 * S_AcceptedCmpTotal
144141    +          +    -0.19531439441895 * S_Frq  +      0.3125078734463 * S_Income
144142    +          +     -1.6099267525002 * S_Mnt  +    -0.36573328507463 *
144143    +        S_MntGoldProds  +     -0.3392853565114 * S_MntMeatProducts
144144    +          +      1.4506330104932 * S_NumCatalogPurchases
144145    +          +     0.20085283861849 * S_NumDealsPurchases
144146    +          +     2.37974383924154 * S_NumWebVisitsMonth
144147    +          +     -0.1106906484364 * S_RFMstat  +    -3.36701384866793 *
144148    +        S_Recency  +     0.60726269989058 * S_Teenhome
144149    +          +     0.51474814816173 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.9562672276462 * S_AcceptedCmpTotal + -0.19531439441895 *
S_Frq + 0.3125078734463 * S_Income + -1.6099267525002 * S_Mnt + -0.36573328507463 *
S_MntGoldProds + -0.3392853565114 * S_MntMeatProducts + 1.4506330104932 *
S_NumCatalogPurchases + 0.20085283861849 * S_NumDealsPurchases + 2.37974383924154 *
S_NumWebVisitsMonth + -0.1106906484364 * S_RFMstat + -3.36701384866793 * S_Recency +
0.60726269989058 * S_Teenhome + 0.51474814816173 * S_Year_Birth ;
144150    +   H1x2_4  =    -3.19375607611292 * S_AcceptedCmpTotal
144151    +          +    -1.28391627024222 * S_Frq  +     1.20886875907222 * S_Income
144152    +          +     0.33241907162962 * S_Mnt  +     0.81131852742978 *
144153    +        S_MntGoldProds  +     0.66955477854362 * S_MntMeatProducts
144154    +          +    -0.79952426911069 * S_NumCatalogPurchases
144155    +          +    -0.70571099772216 * S_NumDealsPurchases
144156    +          +    -0.32158728049114 * S_NumWebVisitsMonth
144157    +          +    -0.83126265863782 * S_RFMstat  +     1.49830148501327 *
144158    +        S_Recency  +     2.29389047813725 * S_Teenhome
144159    +          +     0.04615513391624 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -3.19375607611292 * S_AcceptedCmpTotal + -1.28391627024222 *
S_Frq + 1.20886875907222 * S_Income + 0.33241907162962 * S_Mnt + 0.81131852742978 *
S_MntGoldProds + 0.66955477854362 * S_MntMeatProducts + -0.79952426911069 *
S_NumCatalogPurchases + -0.70571099772216 * S_NumDealsPurchases + -0.32158728049114 *
S_NumWebVisitsMonth + -0.83126265863782 * S_RFMstat + 1.49830148501327 * S_Recency +
2.29389047813725 * S_Teenhome + 0.04615513391624 * S_Year_Birth ;
144160    +   H1x2_5  =     -0.6002425930451 * S_AcceptedCmpTotal
144161    +          +    -0.86762771301251 * S_Frq  +    -0.57793933969656 * S_Income
144162    +          +     0.41975808190408 * S_Mnt  +    -0.13242897225011 *
144163    +        S_MntGoldProds  +    -1.44402585881872 * S_MntMeatProducts
144164    +          +    -0.41491605544255 * S_NumCatalogPurchases
144165    +          +     0.49374983047507 * S_NumDealsPurchases
144166    +          +    -1.38692718220359 * S_NumWebVisitsMonth
144167    +          +    -0.07580803465143 * S_RFMstat  +      0.4152505934779 *
144168    +        S_Recency  +     1.29605991841828 * S_Teenhome
144169    +          +     2.17160180088465 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.6002425930451 * S_AcceptedCmpTotal + -0.86762771301251 *
S_Frq + -0.57793933969656 * S_Income + 0.41975808190408 * S_Mnt + -0.13242897225011 *
S_MntGoldProds + -1.44402585881872 * S_MntMeatProducts + -0.41491605544255 *
S_NumCatalogPurchases + 0.49374983047507 * S_NumDealsPurchases + -1.38692718220359 *
S_NumWebVisitsMonth + -0.07580803465143 * S_RFMstat + 0.4152505934779 * S_Recency +
1.29605991841828 * S_Teenhome + 2.17160180088465 * S_Year_Birth ;
144170    +   H1x2_1  = H1x2_1  +     0.77674448865903 * Marital_StatusDivorced
144171    +          +    -1.29227303709115 * Marital_StatusMarried
144172    +          +     0.71446782242025 * Marital_StatusSingle
144173    +          +     0.55295867102727 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.77674448865903 * Marital_StatusDivorced +
-1.29227303709115 * Marital_StatusMarried + 0.71446782242025 * Marital_StatusSingle +
0.55295867102727 * Marital_StatusTogether ;
144174    +   H1x2_2  = H1x2_2  +     -0.1845223373129 * Marital_StatusDivorced
144175    +          +      2.0815223604364 * Marital_StatusMarried
144176    +          +     0.79462013188709 * Marital_StatusSingle
144177    +          +     0.20668835346022 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.1845223373129 * Marital_StatusDivorced +
2.0815223604364 * Marital_StatusMarried + 0.79462013188709 * Marital_StatusSingle +
0.20668835346022 * Marital_StatusTogether ;
144178    +   H1x2_3  = H1x2_3  +    -1.02774258915556 * Marital_StatusDivorced
144179    +          +     0.44769683627357 * Marital_StatusMarried
144180    +          +     1.09957357551209 * Marital_StatusSingle
144181    +          +     0.98246644516303 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.02774258915556 * Marital_StatusDivorced +
0.44769683627357 * Marital_StatusMarried + 1.09957357551209 * Marital_StatusSingle +
0.98246644516303 * Marital_StatusTogether ;
144182    +   H1x2_4  = H1x2_4  +     1.02578628033933 * Marital_StatusDivorced
144183    +          +    -0.71096069683657 * Marital_StatusMarried
144184    +          +    -0.46849808497503 * Marital_StatusSingle
144185    +          +    -0.50186472808298 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.02578628033933 * Marital_StatusDivorced +
-0.71096069683657 * Marital_StatusMarried + -0.46849808497503 * Marital_StatusSingle +
-0.50186472808298 * Marital_StatusTogether ;
144186    +   H1x2_5  = H1x2_5  +     0.83514340443964 * Marital_StatusDivorced
144187    +          +     0.21000014809177 * Marital_StatusMarried
144188    +          +    -1.05959388759825 * Marital_StatusSingle
144189    +          +     -0.8202251717493 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 0.83514340443964 * Marital_StatusDivorced +
0.21000014809177 * Marital_StatusMarried + -1.05959388759825 * Marital_StatusSingle +
-0.8202251717493 * Marital_StatusTogether ;
144190    +   H1x2_1  =     0.66244588339698 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.66244588339698 + H1x2_1 ;
144191    +   H1x2_2  =     0.36306484617725 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 0.36306484617725 + H1x2_2 ;
144192    +   H1x2_3  =     0.00299288434405 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 0.00299288434405 + H1x2_3 ;
144193    +   H1x2_4  =     0.32206403734945 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.32206403734945 + H1x2_4 ;
144194    +   H1x2_5  =     0.48514364636978 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.48514364636978 + H1x2_5 ;
144195    +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
144196    +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
144197    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
144198    +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
144199    +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
144200    +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
144201    +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
144202    +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
144203    +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
144204    +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
144205    +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
144206    +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
144207    +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
144208    +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
144209    +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
144210    +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
144211    +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
144212    +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
144213    +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
144214    +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
144215    +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
144216    +END;
MPRINT(EM_DIAGRAM):   END;
144217    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144218    +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
144219    +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
144220    +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
144221    +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
144222    +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
144223    +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
144224    +END;
MPRINT(EM_DIAGRAM):   END;
144225    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144226    +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
144227    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144228    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144229    +   H2x1_1  =     5.34062678932931 * H1x1_1  +     7.71604112891627 * H1x1_2
144230    +          +     7.54377937186103 * H1x1_3  +    -5.90943850663966 * H1x1_4
144231    +          +    -6.06522890475814 * H1x1_5  +    -7.94470945127082 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 5.34062678932931 * H1x1_1 + 7.71604112891627 * H1x1_2 +
7.54377937186103 * H1x1_3 + -5.90943850663966 * H1x1_4 + -6.06522890475814 * H1x1_5 +
-7.94470945127082 * H1x1_6 ;
144232    +   H2x1_2  =      1.1479485803131 * H1x1_1  +      1.4482835893576 * H1x1_2
144233    +          +    -0.15220644394866 * H1x1_3  +    -1.30000676790854 * H1x1_4
144234    +          +    -0.49333138568117 * H1x1_5  +    -1.96124154717115 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.1479485803131 * H1x1_1 + 1.4482835893576 * H1x1_2 +
-0.15220644394866 * H1x1_3 + -1.30000676790854 * H1x1_4 + -0.49333138568117 * H1x1_5 +
-1.96124154717115 * H1x1_6 ;
144235    +   H2x1_3  =     2.12915623251937 * H1x1_1  +     4.39530013559682 * H1x1_2
144236    +          +     3.38050961443392 * H1x1_3  +    -5.12182301645649 * H1x1_4
144237    +          +    -3.74697079524831 * H1x1_5  +    -5.26174801543685 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 2.12915623251937 * H1x1_1 + 4.39530013559682 * H1x1_2 +
3.38050961443392 * H1x1_3 + -5.12182301645649 * H1x1_4 + -3.74697079524831 * H1x1_5 +
-5.26174801543685 * H1x1_6 ;
144238    +   H2x1_4  =     0.54854810712303 * H1x1_1  +      1.6486650469525 * H1x1_2
144239    +          +     1.84563084742932 * H1x1_3  +    -2.43710509923951 * H1x1_4
144240    +          +     0.03038093596976 * H1x1_5  +    -1.34566786751269 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = 0.54854810712303 * H1x1_1 + 1.6486650469525 * H1x1_2 +
1.84563084742932 * H1x1_3 + -2.43710509923951 * H1x1_4 + 0.03038093596976 * H1x1_5 +
-1.34566786751269 * H1x1_6 ;
144241    +   H2x1_5  =     0.89845480530178 * H1x1_1  +     3.19967829294268 * H1x1_2
144242    +          +     3.58592569542093 * H1x1_3  +    -3.76417733693485 * H1x1_4
144243    +          +     -4.1568039640005 * H1x1_5  +    -4.42895004794637 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.89845480530178 * H1x1_1 + 3.19967829294268 * H1x1_2 +
3.58592569542093 * H1x1_3 + -3.76417733693485 * H1x1_4 + -4.1568039640005 * H1x1_5 +
-4.42895004794637 * H1x1_6 ;
144244    +   H2x1_1  = H2x1_1  +     0.44545310705069 * H1x2_1
144245    +          +     2.72471946580982 * H1x2_2  +    -1.42856846603531 * H1x2_3
144246    +          +     0.25357521888082 * H1x2_4  +    -1.25902268741411 * H1x2_5
144247    +          +    -1.70956044020454 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.44545310705069 * H1x2_1 + 2.72471946580982 * H1x2_2
+ -1.42856846603531 * H1x2_3 + 0.25357521888082 * H1x2_4 + -1.25902268741411 * H1x2_5 +
-1.70956044020454 * H1x2_6 ;
144248    +   H2x1_2  = H2x1_2  +      0.9465771639497 * H1x2_1
144249    +          +    -0.41110969777104 * H1x2_2  +    -0.92834816798625 * H1x2_3
144250    +          +     -1.7337755087443 * H1x2_4  +     -1.2522448489667 * H1x2_5
144251    +          +    -0.90111756793979 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.9465771639497 * H1x2_1 + -0.41110969777104 * H1x2_2
+ -0.92834816798625 * H1x2_3 + -1.7337755087443 * H1x2_4 + -1.2522448489667 * H1x2_5 +
-0.90111756793979 * H1x2_6 ;
144252    +   H2x1_3  = H2x1_3  +    -0.22355080983787 * H1x2_1
144253    +          +    -0.18918346120545 * H1x2_2  +    -1.50592518382263 * H1x2_3
144254    +          +    -1.00672320426732 * H1x2_4  +    -1.09510249463921 * H1x2_5
144255    +          +     0.83089577154267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.22355080983787 * H1x2_1 + -0.18918346120545 *
H1x2_2 + -1.50592518382263 * H1x2_3 + -1.00672320426732 * H1x2_4 + -1.09510249463921 * H1x2_5
+ 0.83089577154267 * H1x2_6 ;
144256    +   H2x1_4  = H2x1_4  +    -0.74505363577487 * H1x2_1
144257    +          +     0.41544439689687 * H1x2_2  +    -0.11467073820729 * H1x2_3
144258    +          +    -2.16913690278917 * H1x2_4  +     1.07667011067144 * H1x2_5
144259    +          +    -0.21291665093094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.74505363577487 * H1x2_1 + 0.41544439689687 * H1x2_2
+ -0.11467073820729 * H1x2_3 + -2.16913690278917 * H1x2_4 + 1.07667011067144 * H1x2_5 +
-0.21291665093094 * H1x2_6 ;
144260    +   H2x1_5  = H2x1_5  +    -0.22639397151159 * H1x2_1
144261    +          +     0.59976504799464 * H1x2_2  +    -1.19497833953318 * H1x2_3
144262    +          +     0.40681132265012 * H1x2_4  +    -1.18142813082248 * H1x2_5
144263    +          +     0.28627108561279 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.22639397151159 * H1x2_1 + 0.59976504799464 * H1x2_2
+ -1.19497833953318 * H1x2_3 + 0.40681132265012 * H1x2_4 + -1.18142813082248 * H1x2_5 +
0.28627108561279 * H1x2_6 ;
144264    +   H2x1_1  =     0.80837297417824 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.80837297417824 + H2x1_1 ;
144265    +   H2x1_2  =    -3.15918654233626 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -3.15918654233626 + H2x1_2 ;
144266    +   H2x1_3  =     -1.1148455701308 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = -1.1148455701308 + H2x1_3 ;
144267    +   H2x1_4  =    -2.43637271773179 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -2.43637271773179 + H2x1_4 ;
144268    +   H2x1_5  =     -1.5068240097035 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.5068240097035 + H2x1_5 ;
144269    +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
144270    +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
144271    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
144272    +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
144273    +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
144274    +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
144275    +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
144276    +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
144277    +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
144278    +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
144279    +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
144280    +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
144281    +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
144282    +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
144283    +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
144284    +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
144285    +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
144286    +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
144287    +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
144288    +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
144289    +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
144290    +END;
MPRINT(EM_DIAGRAM):   END;
144291    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144292    +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
144293    +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
144294    +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
144295    +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
144296    +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
144297    +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
144298    +END;
MPRINT(EM_DIAGRAM):   END;
144299    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144300    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
144301    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144302    +
144303    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
144304    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
144305    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
144306    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
144307    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
144308    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
144309    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
144310    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
144311    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
144312    +end;
MPRINT(EM_DIAGRAM):   end;
144313    +else do;
MPRINT(EM_DIAGRAM):   else do;
144314    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
144315    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
144316    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
144317    +   end;
MPRINT(EM_DIAGRAM):   end;
144318    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
144319    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
144320    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
144321    +   end;
MPRINT(EM_DIAGRAM):   end;
144322    +   else do;
MPRINT(EM_DIAGRAM):   else do;
144323    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
144324    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
144325    +   end;
MPRINT(EM_DIAGRAM):   end;
144326    +end;
MPRINT(EM_DIAGRAM):   end;
144327    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144328    +   P_DepVar1  =    -14.9408685199347 * H2x1_1  +     1.48309430635242 * H2x1_2
144329    +          +     -4.3496216751271 * H2x1_3  +     0.01239249943556 * H2x1_4
144330    +          +    -6.27169756239783 * H2x1_5  +     2.70843493957574 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -14.9408685199347 * H2x1_1 + 1.48309430635242 * H2x1_2 +
-4.3496216751271 * H2x1_3 + 0.01239249943556 * H2x1_4 + -6.27169756239783 * H2x1_5 +
2.70843493957574 * H2x1_6 ;
144331    +   P_DepVar1  =     5.67267561171469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 5.67267561171469 + P_DepVar1 ;
144332    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
144333    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
144334    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
144335    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
144336    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
144337    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
144338    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
144339    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
144340    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
144341    +END;
MPRINT(EM_DIAGRAM):   END;
144342    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144343    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
144344    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
144345    +END;
MPRINT(EM_DIAGRAM):   END;
144346    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
144347    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
144348    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
144349    +END;
MPRINT(EM_DIAGRAM):   END;
144350    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
144351    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
144352    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
144353    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
144354    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
144355    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
144356    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
144357    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144358    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
144359    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144360    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
144361    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
144362    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
144363    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
144364    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
144365    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
144366    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
144367    +END;
MPRINT(EM_DIAGRAM):   END;
144368    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
144369    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
144370    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
144371    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
144372    +* Renaming variables for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural42;
144373    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144374    +* Renaming Posterior variables for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural42;
144375    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144376    +drop AutoNeural42_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_P_DepVar1;
144377    +AutoNeural42_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural42_P_DepVar1 = P_DepVar1;
144378    +drop AutoNeural42_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_P_DepVar0;
144379    +AutoNeural42_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural42_P_DepVar0 = P_DepVar0;
144380    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144381    +* Renaming _WARN_ variable for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural42;
144382    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144383    +length AutoNeural42_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural42_WARN_ $4;
144384    +drop AutoNeural42_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_WARN_;
144385    +AutoNeural42_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural42_WARN_ = _WARN_;
144386    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144387    +* Ensmbl10: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 3 of 3;
144388    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144389    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144390    +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
144391    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
144392    +* NODE: AutoNeural46;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural46;
144393    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144394    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
144395    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
144396    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
144397    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
144398    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
144399    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
144400    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
144401    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
144402    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
144403    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
144404    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
144405    +LENGTH _WARN_ $4
144406    +      F_DepVar  $ 12
144407    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
144408    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
144409    +
144410    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
144411    +
144412    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
144413    +
144414    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
144415    +
144416    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
144417    +
144418    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
144419    +
144420    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
144421    +
144422    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
144423    +
144424    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
144425    +
144426    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
144427    +
144428    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
144429    +
144430    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
144431    +
144432    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
144433    +
144434    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
144435    +
144436    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
144437    +
144438    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
144439    +
144440    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
144441    +
144442    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
144443    +
144444    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
144445    +
144446    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
144447    +
144448    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
144449    +
144450    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
144451    +
144452    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
144453    +
144454    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
144455    +
144456    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
144457    +
144458    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
144459    +
144460    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
144461    +
144462    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
144463    +
144464    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
144465    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
144466    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
144467    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
144468    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
144469    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
144470    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
144471    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
144472    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
144473    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
144474    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
144475    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
144476    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
144477    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
144478    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
144479    +end;
MPRINT(EM_DIAGRAM):   end;
144480    +else do;
MPRINT(EM_DIAGRAM):   else do;
144481    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
144482    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
144483    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
144484    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
144485    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
144486    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
144487    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
144488    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
144489    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
144490    +         end;
MPRINT(EM_DIAGRAM):   end;
144491    +         else do;
MPRINT(EM_DIAGRAM):   else do;
144492    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
144493    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
144494    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
144495    +            end;
MPRINT(EM_DIAGRAM):   end;
144496    +         end;
MPRINT(EM_DIAGRAM):   end;
144497    +      end;
MPRINT(EM_DIAGRAM):   end;
144498    +      else do;
MPRINT(EM_DIAGRAM):   else do;
144499    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
144500    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
144501    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
144502    +         end;
MPRINT(EM_DIAGRAM):   end;
144503    +      end;
MPRINT(EM_DIAGRAM):   end;
144504    +   end;
MPRINT(EM_DIAGRAM):   end;
144505    +   else do;
MPRINT(EM_DIAGRAM):   else do;
144506    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
144507    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
144508    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
144509    +      end;
MPRINT(EM_DIAGRAM):   end;
144510    +      else do;
MPRINT(EM_DIAGRAM):   else do;
144511    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
144512    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
144513    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
144514    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
144515    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
144516    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
144517    +         end;
MPRINT(EM_DIAGRAM):   end;
144518    +      end;
MPRINT(EM_DIAGRAM):   end;
144519    +   end;
MPRINT(EM_DIAGRAM):   end;
144520    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
144521    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
144522    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
144523    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
144524    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
144525    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
144526    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
144527    +   end;
MPRINT(EM_DIAGRAM):   end;
144528    +end;
MPRINT(EM_DIAGRAM):   end;
144529    +
144530    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144531    +*** Checking missing input Interval
144532    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
144533    +
144534    +IF NMISS(
144535    +   AcceptedCmpTotal ,
144536    +   Frq ,
144537    +   Income ,
144538    +   Mnt ,
144539    +   MntGoldProds ,
144540    +   MntMeatProducts ,
144541    +   NumCatalogPurchases ,
144542    +   NumDealsPurchases ,
144543    +   NumWebVisitsMonth ,
144544    +   RFMstat ,
144545    +   Recency ,
144546    +   Teenhome ,
144547    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
144548    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
144549    +
144550    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
144551    +END;
MPRINT(EM_DIAGRAM):   END;
144552    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144553    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
144554    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144555    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144556    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
144557    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
144558    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
144559    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
144560    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
144561    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
144562    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
144563    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
144564    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
144565    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
144566    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
144567    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
144568    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
144569    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
144570    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
144571    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
144572    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
144573    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
144574    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
144575    +END;
MPRINT(EM_DIAGRAM):   END;
144576    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144577    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
144578    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
144579    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
144580    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
144581    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
144582    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
144583    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
144584    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
144585    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
144586    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
144587    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
144588    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
144589    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
144590    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
144591    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
144592    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
144593    +   ELSE S_NumCatalogPurchases
144594    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
144595    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
144596    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
144597    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
144598    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
144599    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
144600    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
144601    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
144602    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
144603    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
144604    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
144605    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
144606    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
144607    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
144608    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
144609    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
144610    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
144611    +END;
MPRINT(EM_DIAGRAM):   END;
144612    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144613    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
144614    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144615    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144616    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
144617    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144618    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144619    +   H1x1_1  =    -0.10743056275421 * S_AcceptedCmpTotal
144620    +          +     0.03409888241348 * S_Frq  +    -0.00055974837068 * S_Income
144621    +          +       0.134341851096 * S_Mnt  +    -0.00857864409164 *
144622    +        S_MntGoldProds  +      0.4895390061827 * S_MntMeatProducts
144623    +          +    -0.01423451356563 * S_NumCatalogPurchases
144624    +          +     0.06006350655487 * S_NumDealsPurchases
144625    +          +    -0.20885493964335 * S_NumWebVisitsMonth
144626    +          +    -0.01173202621744 * S_RFMstat  +     0.25819909101611 *
144627    +        S_Recency  +    -0.03326479668652 * S_Teenhome
144628    +          +     0.03371888312814 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.10743056275421 * S_AcceptedCmpTotal + 0.03409888241348 *
S_Frq + -0.00055974837068 * S_Income + 0.134341851096 * S_Mnt + -0.00857864409164 *
S_MntGoldProds + 0.4895390061827 * S_MntMeatProducts + -0.01423451356563 *
S_NumCatalogPurchases + 0.06006350655487 * S_NumDealsPurchases + -0.20885493964335 *
S_NumWebVisitsMonth + -0.01173202621744 * S_RFMstat + 0.25819909101611 * S_Recency +
-0.03326479668652 * S_Teenhome + 0.03371888312814 * S_Year_Birth ;
144629    +   H1x1_2  =    -0.03078478134042 * S_AcceptedCmpTotal
144630    +          +    -0.12351766308972 * S_Frq  +     -0.1943406821731 * S_Income
144631    +          +    -0.36027326127049 * S_Mnt  +     0.05117597516658 *
144632    +        S_MntGoldProds  +     0.07931191953223 * S_MntMeatProducts
144633    +          +    -0.03109266966794 * S_NumCatalogPurchases
144634    +          +     0.05524435494328 * S_NumDealsPurchases
144635    +          +     -0.0105802056898 * S_NumWebVisitsMonth
144636    +          +     0.01793771049002 * S_RFMstat  +      0.0322880575902 *
144637    +        S_Recency  +       0.195010707702 * S_Teenhome
144638    +          +     -0.0351563039686 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.03078478134042 * S_AcceptedCmpTotal + -0.12351766308972 *
S_Frq + -0.1943406821731 * S_Income + -0.36027326127049 * S_Mnt + 0.05117597516658 *
S_MntGoldProds + 0.07931191953223 * S_MntMeatProducts + -0.03109266966794 *
S_NumCatalogPurchases + 0.05524435494328 * S_NumDealsPurchases + -0.0105802056898 *
S_NumWebVisitsMonth + 0.01793771049002 * S_RFMstat + 0.0322880575902 * S_Recency +
0.195010707702 * S_Teenhome + -0.0351563039686 * S_Year_Birth ;
144639    +   H1x1_3  =     0.23990987498311 * S_AcceptedCmpTotal
144640    +          +     0.04052411845464 * S_Frq  +    -0.00302331972067 * S_Income
144641    +          +     0.39981531247427 * S_Mnt  +     0.01433011413993 *
144642    +        S_MntGoldProds  +    -0.19955782687502 * S_MntMeatProducts
144643    +          +     0.07777995109144 * S_NumCatalogPurchases
144644    +          +     0.08683394019767 * S_NumDealsPurchases
144645    +          +     0.27328366433987 * S_NumWebVisitsMonth
144646    +          +      0.0263930429288 * S_RFMstat  +    -0.38900647412136 *
144647    +        S_Recency  +      0.0640153287908 * S_Teenhome
144648    +          +     0.07587467002123 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.23990987498311 * S_AcceptedCmpTotal + 0.04052411845464 *
S_Frq + -0.00302331972067 * S_Income + 0.39981531247427 * S_Mnt + 0.01433011413993 *
S_MntGoldProds + -0.19955782687502 * S_MntMeatProducts + 0.07777995109144 *
S_NumCatalogPurchases + 0.08683394019767 * S_NumDealsPurchases + 0.27328366433987 *
S_NumWebVisitsMonth + 0.0263930429288 * S_RFMstat + -0.38900647412136 * S_Recency +
0.0640153287908 * S_Teenhome + 0.07587467002123 * S_Year_Birth ;
144649    +   H1x1_1  = H1x1_1  +    -0.05820552608682 * Marital_StatusDivorced
144650    +          +    -0.02695167777393 * Marital_StatusMarried
144651    +          +    -0.00733864032764 * Marital_StatusSingle
144652    +          +     0.03838747494293 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.05820552608682 * Marital_StatusDivorced +
-0.02695167777393 * Marital_StatusMarried + -0.00733864032764 * Marital_StatusSingle +
0.03838747494293 * Marital_StatusTogether ;
144653    +   H1x1_2  = H1x1_2  +    -0.00853551919442 * Marital_StatusDivorced
144654    +          +     0.42249671001117 * Marital_StatusMarried
144655    +          +    -0.18515416581955 * Marital_StatusSingle
144656    +          +     0.25783473520826 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -0.00853551919442 * Marital_StatusDivorced +
0.42249671001117 * Marital_StatusMarried + -0.18515416581955 * Marital_StatusSingle +
0.25783473520826 * Marital_StatusTogether ;
144657    +   H1x1_3  = H1x1_3  +      0.4175036565076 * Marital_StatusDivorced
144658    +          +     0.45127582934777 * Marital_StatusMarried
144659    +          +       0.358157766485 * Marital_StatusSingle
144660    +          +     0.42627185625497 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.4175036565076 * Marital_StatusDivorced +
0.45127582934777 * Marital_StatusMarried + 0.358157766485 * Marital_StatusSingle +
0.42627185625497 * Marital_StatusTogether ;
144661    +   H1x1_1  =    -1.23226472635566 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.23226472635566 + H1x1_1 ;
144662    +   H1x1_2  =      2.2313165328971 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.2313165328971 + H1x1_2 ;
144663    +   H1x1_3  =     0.09755782095138 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.09755782095138 + H1x1_3 ;
144664    +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
144665    +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
144666    +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
144667    +END;
MPRINT(EM_DIAGRAM):   END;
144668    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144669    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
144670    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
144671    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
144672    +END;
MPRINT(EM_DIAGRAM):   END;
144673    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144674    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
144675    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144676    +
144677    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
144678    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
144679    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
144680    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
144681    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
144682    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
144683    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
144684    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
144685    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
144686    +end;
MPRINT(EM_DIAGRAM):   end;
144687    +else do;
MPRINT(EM_DIAGRAM):   else do;
144688    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
144689    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
144690    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
144691    +   end;
MPRINT(EM_DIAGRAM):   end;
144692    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
144693    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
144694    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
144695    +   end;
MPRINT(EM_DIAGRAM):   end;
144696    +   else do;
MPRINT(EM_DIAGRAM):   else do;
144697    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
144698    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
144699    +   end;
MPRINT(EM_DIAGRAM):   end;
144700    +end;
MPRINT(EM_DIAGRAM):   end;
144701    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
144702    +   P_DepVar1  =     -68.075125441494 * H1x1_1  +    -72.7630361672259 * H1x1_2
144703    +          +    -71.6251597703755 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -68.075125441494 * H1x1_1 + -72.7630361672259 * H1x1_2 +
-71.6251597703755 * H1x1_3 ;
144704    +   P_DepVar1  =    -25.6080957302662 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -25.6080957302662 + P_DepVar1 ;
144705    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
144706    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
144707    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
144708    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
144709    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
144710    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
144711    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
144712    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
144713    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
144714    +END;
MPRINT(EM_DIAGRAM):   END;
144715    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
144716    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
144717    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
144718    +END;
MPRINT(EM_DIAGRAM):   END;
144719    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
144720    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
144721    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
144722    +END;
MPRINT(EM_DIAGRAM):   END;
144723    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
144724    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
144725    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
144726    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
144727    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
144728    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
144729    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
144730    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144731    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
144732    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
144733    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
144734    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
144735    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
144736    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
144737    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
144738    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
144739    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
144740    +END;
MPRINT(EM_DIAGRAM):   END;
144741    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
144742    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
144743    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
144744    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
144745    +* Renaming variables for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural46;
144746    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144747    +* Renaming Posterior variables for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural46;
144748    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144749    +drop AutoNeural46_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_P_DepVar1;
144750    +AutoNeural46_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural46_P_DepVar1 = P_DepVar1;
144751    +drop AutoNeural46_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_P_DepVar0;
144752    +AutoNeural46_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural46_P_DepVar0 = P_DepVar0;
144753    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144754    +* Renaming _WARN_ variable for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural46;
144755    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144756    +length AutoNeural46_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural46_WARN_ $4;
144757    +drop AutoNeural46_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_WARN_;
144758    +AutoNeural46_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural46_WARN_ = _WARN_;
144759    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144760    +* Ensmbl10: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Average Posteriors of 3 models;
144761    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144762    +P_DepVar1 = (
144763    +Neural34_P_DepVar1 +
144764    +AutoNeural42_P_DepVar1 +
144765    +AutoNeural46_P_DepVar1
144766    +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural34_P_DepVar1 + AutoNeural42_P_DepVar1 +
AutoNeural46_P_DepVar1 )/3;
144767    +P_DepVar0 = (
144768    +Neural34_P_DepVar0 +
144769    +AutoNeural42_P_DepVar0 +
144770    +AutoNeural46_P_DepVar0
144771    +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural34_P_DepVar0 + AutoNeural42_P_DepVar0 +
AutoNeural46_P_DepVar0 )/3;
144772    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144773    +* Ensmbl10: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Classification Vars;
144774    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144775    +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
144776    +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
144777    +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
144778    +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
144779    +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
144780    +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
144781    +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
144782    +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
144783    +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
144784    +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
144785    +end;
MPRINT(EM_DIAGRAM):   end;
144786    +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
144787    +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
144788    +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
144789    +end;
MPRINT(EM_DIAGRAM):   end;
144790    +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
144791    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144792    +* Ensmbl10: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Producing Unformatted variable;
144793    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144794    +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
144795    +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
144796    +else
144797    +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
144798    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144799    +* Ensmbl10: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing _WARN_ Variable;
144800    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144801    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
144802    +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
144803    +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
144804    +if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
144804   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
144805    +if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
144805   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
144806    +if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
144806   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
144807    +if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
144807   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
144808    +if index(AUTONEURAL42_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
144808   !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
144809    +if index(AUTONEURAL42_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
144809   !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
144810    +if index(AUTONEURAL42_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
144810   !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
144811    +if index(AUTONEURAL42_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
144811   !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
144812    +if index(AUTONEURAL46_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
144812   !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
144813    +if index(AUTONEURAL46_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
144813   !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
144814    +if index(AUTONEURAL46_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
144814   !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
144815    +if index(AUTONEURAL46_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
144815   !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
144816    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144817    +* Ensmbl10: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Residual Vars;
144818    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144819    +if
144820    +F_DepVar NE '1'
144821    +AND F_DepVar NE '0'
144822    +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
144823    +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
144824    +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
144825    +end;
MPRINT(EM_DIAGRAM):   end;
144826    +else do;
MPRINT(EM_DIAGRAM):   else do;
144827    +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
144828    +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
144829    +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
144830    +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
144831    +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
144832    +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
144833    +END;
MPRINT(EM_DIAGRAM):   END;
144834    +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
144835     run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL34_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
144836     quit;
144837     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
144838     filename emflow
144838   ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring NEURAL34_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144839     *------------------------------------------------------------*;
144840     * Ensmbl10: Scoring NEURAL34_VALIDATE data;
144841     *------------------------------------------------------------*;
144842     data EMWS8.Ensmbl10_VALIDATE
144843     / view=EMWS8.Ensmbl10_VALIDATE
144844     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_VALIDATE / view=EMWS8.Ensmbl10_VALIDATE ;
144845     set EMWS8.Neural34_VALIDATE
144846     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural34_VALIDATE ;
144847     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas.
144848    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144849    +* Ensmbl10: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Combine model for DepVar;
144850    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144851    +* Ensmbl10: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 1 of 3;
144852    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144853    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144854    +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
144855    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
144856    +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
144857    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144858    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144859    +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
144860    +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
144861    +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
144862    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144863    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144864    +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
144865    +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
144866    +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
144867    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144868    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144869    +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
144870    +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
144871    +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
144872    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144873    +
144874    +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
144875    +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
144875   !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
144876    +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
144877    +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
144878    +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
144879    +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
144880    +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
144881    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144882    +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
144883    +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
144884    +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
144885    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144886    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144887    +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
144888    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144889    +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
144890    +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
144891    +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
144892    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144893    +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
144894    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
144895    +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
144896    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144897    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144898    +* TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
144899    +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
144900    +* NODE: Meta2;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
144901    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144902    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144903    +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
144904    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
144905    +* NODE: Neural34;
MPRINT(EM_DIAGRAM):   * NODE: Neural34;
144906    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
144907    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
144908    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
144909    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
144910    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
144911    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
144912    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
144913    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
144914    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
144915    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
144916    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
144917    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
144918    +LENGTH _WARN_ $4
144919    +      F_DepVar  $ 12
144920    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
144921    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
144922    +
144923    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
144924    +
144925    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
144926    +
144927    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
144928    +
144929    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
144930    +
144931    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
144932    +
144933    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
144934    +
144935    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
144936    +
144937    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
144938    +
144939    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
144940    +
144941    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
144942    +
144943    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
144944    +
144945    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
144946    +
144947    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
144948    +
144949    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
144950    +
144951    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
144952    +
144953    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
144954    +
144955    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
144956    +
144957    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
144958    +
144959    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
144960    +
144961    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
144962    +
144963    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
144964    +
144965    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
144966    +
144967    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
144968    +
144969    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
144970    +
144971    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
144972    +
144973    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
144974    +
144975    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
144976    +
144977    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
144978    +
144979    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
144980    +
144981    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
144982    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
144983    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
144984    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
144985    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
144986    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
144987    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
144988    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
144989    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
144990    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
144991    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
144992    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
144993    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
144994    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
144995    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
144996    +end;
MPRINT(EM_DIAGRAM):   end;
144997    +else do;
MPRINT(EM_DIAGRAM):   else do;
144998    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
144999    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
145000    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
145001    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
145002    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
145003    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
145004    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
145005    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
145006    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145007    +         end;
MPRINT(EM_DIAGRAM):   end;
145008    +         else do;
MPRINT(EM_DIAGRAM):   else do;
145009    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
145010    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
145011    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145012    +            end;
MPRINT(EM_DIAGRAM):   end;
145013    +         end;
MPRINT(EM_DIAGRAM):   end;
145014    +      end;
MPRINT(EM_DIAGRAM):   end;
145015    +      else do;
MPRINT(EM_DIAGRAM):   else do;
145016    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
145017    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
145018    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145019    +         end;
MPRINT(EM_DIAGRAM):   end;
145020    +      end;
MPRINT(EM_DIAGRAM):   end;
145021    +   end;
MPRINT(EM_DIAGRAM):   end;
145022    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145023    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
145024    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
145025    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145026    +      end;
MPRINT(EM_DIAGRAM):   end;
145027    +      else do;
MPRINT(EM_DIAGRAM):   else do;
145028    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
145029    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
145030    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
145031    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
145032    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
145033    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145034    +         end;
MPRINT(EM_DIAGRAM):   end;
145035    +      end;
MPRINT(EM_DIAGRAM):   end;
145036    +   end;
MPRINT(EM_DIAGRAM):   end;
145037    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
145038    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
145039    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
145040    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
145041    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
145042    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145043    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145044    +   end;
MPRINT(EM_DIAGRAM):   end;
145045    +end;
MPRINT(EM_DIAGRAM):   end;
145046    +
145047    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145048    +*** Checking missing input Interval
145049    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
145050    +
145051    +IF NMISS(
145052    +   AcceptedCmpTotal ,
145053    +   Frq ,
145054    +   Income ,
145055    +   Mnt ,
145056    +   MntGoldProds ,
145057    +   MntMeatProducts ,
145058    +   NumCatalogPurchases ,
145059    +   NumDealsPurchases ,
145060    +   NumWebVisitsMonth ,
145061    +   RFMstat ,
145062    +   Recency ,
145063    +   Teenhome ,
145064    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
145065    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
145066    +
145067    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145068    +END;
MPRINT(EM_DIAGRAM):   END;
145069    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145070    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
145071    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145072    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145073    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
145074    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
145075    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
145076    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
145077    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
145078    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
145079    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
145080    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
145081    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
145082    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
145083    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
145084    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
145085    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
145086    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
145087    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
145088    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
145089    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
145090    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
145091    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
145092    +END;
MPRINT(EM_DIAGRAM):   END;
145093    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145094    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
145095    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
145096    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
145097    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
145098    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
145099    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
145100    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
145101    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
145102    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
145103    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
145104    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
145105    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
145106    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
145107    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
145108    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
145109    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
145110    +   ELSE S_NumCatalogPurchases
145111    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
145112    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
145113    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
145114    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
145115    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
145116    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
145117    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
145118    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
145119    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
145120    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
145121    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
145122    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
145123    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
145124    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
145125    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
145126    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
145127    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
145128    +END;
MPRINT(EM_DIAGRAM):   END;
145129    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145130    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
145131    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145132    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145133    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
145134    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145135    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145136    +   H11  =     0.39113138187571 * S_AcceptedCmpTotal  +    -0.61540725344485 *
145137    +        S_Frq  +    -0.39640720965637 * S_Income  +    -0.29779259024925 *
145138    +        S_Mnt  +     0.09159537668687 * S_MntGoldProds
145139    +          +     0.66968861823847 * S_MntMeatProducts
145140    +          +     0.43410284729103 * S_NumCatalogPurchases
145141    +          +     0.38169769247512 * S_NumDealsPurchases
145142    +          +     0.42568124883788 * S_NumWebVisitsMonth
145143    +          +       0.117680996215 * S_RFMstat  +    -0.81755740196945 *
145144    +        S_Recency  +     0.34714100236873 * S_Teenhome
145145    +          +     0.39595885220917 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.39113138187571 * S_AcceptedCmpTotal + -0.61540725344485 * S_Frq
+ -0.39640720965637 * S_Income + -0.29779259024925 * S_Mnt + 0.09159537668687 * S_MntGoldProds
+ 0.66968861823847 * S_MntMeatProducts + 0.43410284729103 * S_NumCatalogPurchases +
0.38169769247512 * S_NumDealsPurchases + 0.42568124883788 * S_NumWebVisitsMonth +
0.117680996215 * S_RFMstat + -0.81755740196945 * S_Recency + 0.34714100236873 * S_Teenhome +
0.39595885220917 * S_Year_Birth ;
145146    +   H12  =    -0.17603311184545 * S_AcceptedCmpTotal  +    -1.87448667460975 *
145147    +        S_Frq  +    -0.13770783826558 * S_Income  +    -0.07794509574546 *
145148    +        S_Mnt  +     -0.0367231623133 * S_MntGoldProds
145149    +          +     0.43468157063779 * S_MntMeatProducts
145150    +          +     1.22287851495207 * S_NumCatalogPurchases
145151    +          +     1.34810668047823 * S_NumDealsPurchases
145152    +          +     0.29744386797792 * S_NumWebVisitsMonth
145153    +          +     0.24598010228595 * S_RFMstat  +     0.45054459604149 *
145154    +        S_Recency  +    -0.31884355104334 * S_Teenhome
145155    +          +    -0.49374494273323 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.17603311184545 * S_AcceptedCmpTotal + -1.87448667460975 * S_Frq
+ -0.13770783826558 * S_Income + -0.07794509574546 * S_Mnt + -0.0367231623133 * S_MntGoldProds
+ 0.43468157063779 * S_MntMeatProducts + 1.22287851495207 * S_NumCatalogPurchases +
1.34810668047823 * S_NumDealsPurchases + 0.29744386797792 * S_NumWebVisitsMonth +
0.24598010228595 * S_RFMstat + 0.45054459604149 * S_Recency + -0.31884355104334 * S_Teenhome +
-0.49374494273323 * S_Year_Birth ;
145156    +   H13  =    -0.35894234681627 * S_AcceptedCmpTotal  +     2.22535530920485 *
145157    +        S_Frq  +    -0.60759993740885 * S_Income  +    -0.19127405324439 *
145158    +        S_Mnt  +     0.13903548885363 * S_MntGoldProds
145159    +          +    -3.08800901663199 * S_MntMeatProducts
145160    +          +    -1.19043292478827 * S_NumCatalogPurchases
145161    +          +    -0.37179794210537 * S_NumDealsPurchases
145162    +          +     0.03624847445355 * S_NumWebVisitsMonth
145163    +          +    -0.62521514183331 * S_RFMstat  +     0.01074839631068 *
145164    +        S_Recency  +     0.08240530440608 * S_Teenhome
145165    +          +    -0.04154769345168 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.35894234681627 * S_AcceptedCmpTotal + 2.22535530920485 * S_Frq
+ -0.60759993740885 * S_Income + -0.19127405324439 * S_Mnt + 0.13903548885363 * S_MntGoldProds
+ -3.08800901663199 * S_MntMeatProducts + -1.19043292478827 * S_NumCatalogPurchases +
-0.37179794210537 * S_NumDealsPurchases + 0.03624847445355 * S_NumWebVisitsMonth +
-0.62521514183331 * S_RFMstat + 0.01074839631068 * S_Recency + 0.08240530440608 * S_Teenhome +
-0.04154769345168 * S_Year_Birth ;
145166    +   H14  =     0.72612390853906 * S_AcceptedCmpTotal  +    -1.03331426863575 *
145167    +        S_Frq  +     0.44630396705527 * S_Income  +    -1.29648064151656 *
145168    +        S_Mnt  +     0.20190465471738 * S_MntGoldProds
145169    +          +     0.78481425439956 * S_MntMeatProducts
145170    +          +      0.6107688367092 * S_NumCatalogPurchases
145171    +          +    -0.39308332306764 * S_NumDealsPurchases
145172    +          +     1.13986700740733 * S_NumWebVisitsMonth
145173    +          +    -0.10095149614189 * S_RFMstat  +    -1.23708147180809 *
145174    +        S_Recency  +    -0.40344648497219 * S_Teenhome
145175    +          +    -0.21455944295735 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.72612390853906 * S_AcceptedCmpTotal + -1.03331426863575 * S_Frq
+ 0.44630396705527 * S_Income + -1.29648064151656 * S_Mnt + 0.20190465471738 * S_MntGoldProds
+ 0.78481425439956 * S_MntMeatProducts + 0.6107688367092 * S_NumCatalogPurchases +
-0.39308332306764 * S_NumDealsPurchases + 1.13986700740733 * S_NumWebVisitsMonth +
-0.10095149614189 * S_RFMstat + -1.23708147180809 * S_Recency + -0.40344648497219 * S_Teenhome
+ -0.21455944295735 * S_Year_Birth ;
145176    +   H15  =    -0.52000103453301 * S_AcceptedCmpTotal  +    -0.14144790393123 *
145177    +        S_Frq  +    -0.47209445285116 * S_Income  +     0.51267592710475 *
145178    +        S_Mnt  +     0.07876708495313 * S_MntGoldProds
145179    +          +    -0.61914125284805 * S_MntMeatProducts
145180    +          +    -0.54746366292992 * S_NumCatalogPurchases
145181    +          +     0.25925395549236 * S_NumDealsPurchases
145182    +          +    -0.60979686139101 * S_NumWebVisitsMonth
145183    +          +     0.08166171339337 * S_RFMstat  +     0.96981534293427 *
145184    +        S_Recency  +     0.36245179070453 * S_Teenhome
145185    +          +    -0.09267442906112 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.52000103453301 * S_AcceptedCmpTotal + -0.14144790393123 * S_Frq
+ -0.47209445285116 * S_Income + 0.51267592710475 * S_Mnt + 0.07876708495313 * S_MntGoldProds
+ -0.61914125284805 * S_MntMeatProducts + -0.54746366292992 * S_NumCatalogPurchases +
0.25925395549236 * S_NumDealsPurchases + -0.60979686139101 * S_NumWebVisitsMonth +
0.08166171339337 * S_RFMstat + 0.96981534293427 * S_Recency + 0.36245179070453 * S_Teenhome +
-0.09267442906112 * S_Year_Birth ;
145186    +   H11  = H11  +     0.01565392034595 * Marital_StatusDivorced
145187    +          +     0.22493072364483 * Marital_StatusMarried
145188    +          +    -0.34177799020181 * Marital_StatusSingle
145189    +          +    -0.04779249269081 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01565392034595 * Marital_StatusDivorced + 0.22493072364483
* Marital_StatusMarried + -0.34177799020181 * Marital_StatusSingle + -0.04779249269081 *
Marital_StatusTogether ;
145190    +   H12  = H12  +     0.58482172427767 * Marital_StatusDivorced
145191    +          +     0.05031503177659 * Marital_StatusMarried
145192    +          +     0.28039335778718 * Marital_StatusSingle
145193    +          +     0.00709736205513 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.58482172427767 * Marital_StatusDivorced + 0.05031503177659
* Marital_StatusMarried + 0.28039335778718 * Marital_StatusSingle + 0.00709736205513 *
Marital_StatusTogether ;
145194    +   H13  = H13  +     0.35081594367456 * Marital_StatusDivorced
145195    +          +    -0.24395984745809 * Marital_StatusMarried
145196    +          +     0.22708224780413 * Marital_StatusSingle
145197    +          +    -0.34334833500124 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.35081594367456 * Marital_StatusDivorced +
-0.24395984745809 * Marital_StatusMarried + 0.22708224780413 * Marital_StatusSingle +
-0.34334833500124 * Marital_StatusTogether ;
145198    +   H14  = H14  +     0.85482961039457 * Marital_StatusDivorced
145199    +          +    -1.06411172500365 * Marital_StatusMarried
145200    +          +     0.57554615813234 * Marital_StatusSingle
145201    +          +    -0.91141797290702 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.85482961039457 * Marital_StatusDivorced +
-1.06411172500365 * Marital_StatusMarried + 0.57554615813234 * Marital_StatusSingle +
-0.91141797290702 * Marital_StatusTogether ;
145202    +   H15  = H15  +      0.2197825206844 * Marital_StatusDivorced
145203    +          +     0.66663600919341 * Marital_StatusMarried
145204    +          +    -0.69696969089357 * Marital_StatusSingle
145205    +          +     0.48232861459141 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2197825206844 * Marital_StatusDivorced + 0.66663600919341
* Marital_StatusMarried + -0.69696969089357 * Marital_StatusSingle + 0.48232861459141 *
Marital_StatusTogether ;
145206    +   H11  =    -1.58463812409211 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.58463812409211 + H11 ;
145207    +   H12  =    -0.59413927784841 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.59413927784841 + H12 ;
145208    +   H13  =    -1.40790569062078 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.40790569062078 + H13 ;
145209    +   H14  =     -0.2073181654495 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.2073181654495 + H14 ;
145210    +   H15  =     1.99108524971007 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.99108524971007 + H15 ;
145211    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
145212    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
145213    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
145214    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
145215    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
145216    +END;
MPRINT(EM_DIAGRAM):   END;
145217    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145218    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
145219    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
145220    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
145221    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
145222    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
145223    +END;
MPRINT(EM_DIAGRAM):   END;
145224    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145225    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
145226    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145227    +
145228    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
145229    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
145230    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
145231    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
145232    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
145233    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
145234    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
145235    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
145236    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
145237    +end;
MPRINT(EM_DIAGRAM):   end;
145238    +else do;
MPRINT(EM_DIAGRAM):   else do;
145239    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
145240    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
145241    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
145242    +   end;
MPRINT(EM_DIAGRAM):   end;
145243    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
145244    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
145245    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
145246    +   end;
MPRINT(EM_DIAGRAM):   end;
145247    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145248    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
145249    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
145250    +   end;
MPRINT(EM_DIAGRAM):   end;
145251    +end;
MPRINT(EM_DIAGRAM):   end;
145252    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145253    +   P_DepVar1  =     3.73071630847853 * H11  +     2.94025483165613 * H12
145254    +          +    -3.96191932636925 * H13  +     3.36339025105162 * H14
145255    +          +    -4.82596427081675 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.73071630847853 * H11 + 2.94025483165613 * H12 +
-3.96191932636925 * H13 + 3.36339025105162 * H14 + -4.82596427081675 * H15 ;
145256    +   P_DepVar1  =     0.43428060622858 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.43428060622858 + P_DepVar1 ;
145257    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
145258    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
145259    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
145260    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
145261    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
145262    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
145263    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
145264    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
145265    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
145266    +END;
MPRINT(EM_DIAGRAM):   END;
145267    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145268    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
145269    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
145270    +END;
MPRINT(EM_DIAGRAM):   END;
145271    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
145272    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
145273    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
145274    +END;
MPRINT(EM_DIAGRAM):   END;
145275    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
145276    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
145277    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
145278    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
145279    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
145280    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
145281    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
145282    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145283    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
145284    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145285    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
145286    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
145287    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
145288    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
145289    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
145290    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
145291    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
145292    +END;
MPRINT(EM_DIAGRAM):   END;
145293    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
145294    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
145295    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
145296    +drop
145297    +H11
145298    +H12
145299    +H13
145300    +H14
145301    +H15
145302    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
145303    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
145304    +* Renaming variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural34;
145305    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145306    +* Renaming Posterior variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural34;
145307    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145308    +drop Neural34_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar1;
145309    +Neural34_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar1 = P_DepVar1;
145310    +drop Neural34_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar0;
145311    +Neural34_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar0 = P_DepVar0;
145312    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145313    +* Renaming _WARN_ variable for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural34;
145314    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145315    +length Neural34_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural34_WARN_ $4;
145316    +drop Neural34_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural34_WARN_;
145317    +Neural34_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural34_WARN_ = _WARN_;
145318    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145319    +* Ensmbl10: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 2 of 3;
145320    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145321    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145322    +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
145323    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
145324    +* NODE: AutoNeural42;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural42;
145325    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145326    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
145327    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
145328    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
145329    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
145330    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
145331    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
145332    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
145333    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
145334    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
145335    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
145336    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
145337    +LENGTH _WARN_ $4
145338    +      F_DepVar  $ 12
145339    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
145340    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
145341    +
145342    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
145343    +
145344    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
145345    +
145346    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
145347    +
145348    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
145349    +
145350    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
145351    +
145352    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
145353    +
145354    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
145355    +
145356    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
145357    +
145358    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
145359    +
145360    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
145361    +
145362    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
145363    +
145364    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
145365    +
145366    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
145367    +
145368    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
145369    +
145370    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
145371    +
145372    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
145373    +
145374    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
145375    +
145376    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
145377    +
145378    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
145379    +
145380    +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
145381    +
145382    +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
145383    +
145384    +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
145385    +
145386    +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
145387    +
145388    +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
145389    +
145390    +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
145391    +
145392    +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
145393    +
145394    +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
145395    +
145396    +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
145397    +
145398    +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
145399    +
145400    +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
145401    +
145402    +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
145403    +
145404    +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
145405    +
145406    +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
145407    +
145408    +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
145409    +
145410    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
145411    +
145412    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
145413    +
145414    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
145415    +
145416    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
145417    +
145418    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
145419    +
145420    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
145421    +
145422    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
145423    +
145424    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
145425    +
145426    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
145427    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
145428    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
145429    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
145430    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
145431    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
145432    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
145433    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
145434    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
145435    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
145436    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
145437    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
145438    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
145439    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
145440    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145441    +end;
MPRINT(EM_DIAGRAM):   end;
145442    +else do;
MPRINT(EM_DIAGRAM):   else do;
145443    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
145444    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
145445    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
145446    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
145447    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
145448    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
145449    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
145450    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
145451    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145452    +         end;
MPRINT(EM_DIAGRAM):   end;
145453    +         else do;
MPRINT(EM_DIAGRAM):   else do;
145454    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
145455    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
145456    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145457    +            end;
MPRINT(EM_DIAGRAM):   end;
145458    +         end;
MPRINT(EM_DIAGRAM):   end;
145459    +      end;
MPRINT(EM_DIAGRAM):   end;
145460    +      else do;
MPRINT(EM_DIAGRAM):   else do;
145461    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
145462    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
145463    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145464    +         end;
MPRINT(EM_DIAGRAM):   end;
145465    +      end;
MPRINT(EM_DIAGRAM):   end;
145466    +   end;
MPRINT(EM_DIAGRAM):   end;
145467    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145468    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
145469    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
145470    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145471    +      end;
MPRINT(EM_DIAGRAM):   end;
145472    +      else do;
MPRINT(EM_DIAGRAM):   else do;
145473    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
145474    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
145475    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
145476    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
145477    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
145478    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
145479    +         end;
MPRINT(EM_DIAGRAM):   end;
145480    +      end;
MPRINT(EM_DIAGRAM):   end;
145481    +   end;
MPRINT(EM_DIAGRAM):   end;
145482    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
145483    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
145484    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
145485    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
145486    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
145487    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145488    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145489    +   end;
MPRINT(EM_DIAGRAM):   end;
145490    +end;
MPRINT(EM_DIAGRAM):   end;
145491    +
145492    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145493    +*** Checking missing input Interval
145494    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
145495    +
145496    +IF NMISS(
145497    +   AcceptedCmpTotal ,
145498    +   Frq ,
145499    +   Income ,
145500    +   Mnt ,
145501    +   MntGoldProds ,
145502    +   MntMeatProducts ,
145503    +   NumCatalogPurchases ,
145504    +   NumDealsPurchases ,
145505    +   NumWebVisitsMonth ,
145506    +   RFMstat ,
145507    +   Recency ,
145508    +   Teenhome ,
145509    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
145510    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
145511    +
145512    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145513    +END;
MPRINT(EM_DIAGRAM):   END;
145514    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145515    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
145516    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145517    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145518    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
145519    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
145520    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
145521    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
145522    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
145523    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
145524    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
145525    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
145526    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
145527    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
145528    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
145529    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
145530    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
145531    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
145532    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
145533    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
145534    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
145535    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
145536    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
145537    +END;
MPRINT(EM_DIAGRAM):   END;
145538    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145539    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
145540    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
145541    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
145542    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
145543    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
145544    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
145545    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
145546    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
145547    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
145548    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
145549    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
145550    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
145551    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
145552    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
145553    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
145554    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
145555    +   ELSE S_NumCatalogPurchases
145556    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
145557    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
145558    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
145559    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
145560    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
145561    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
145562    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
145563    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
145564    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
145565    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
145566    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
145567    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
145568    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
145569    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
145570    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
145571    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
145572    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
145573    +END;
MPRINT(EM_DIAGRAM):   END;
145574    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145575    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
145576    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145577    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145578    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
145579    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145580    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145581    +   H1x1_1  =    -3.92905088817122 * S_AcceptedCmpTotal
145582    +          +    -4.76567955922662 * S_Frq  +    -3.20305851407308 * S_Income
145583    +          +     10.4290156082038 * S_Mnt  +     2.82139196372317 *
145584    +        S_MntGoldProds  +    -4.54749029525518 * S_MntMeatProducts
145585    +          +    -12.1201262560598 * S_NumCatalogPurchases
145586    +          +    -7.64265449386917 * S_NumDealsPurchases
145587    +          +     -0.8154661733691 * S_NumWebVisitsMonth
145588    +          +    -7.34275682075933 * S_RFMstat  +     3.14025498790893 *
145589    +        S_Recency  +     3.79010135100643 * S_Teenhome
145590    +          +    -1.18831354068466 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -3.92905088817122 * S_AcceptedCmpTotal + -4.76567955922662 *
S_Frq + -3.20305851407308 * S_Income + 10.4290156082038 * S_Mnt + 2.82139196372317 *
S_MntGoldProds + -4.54749029525518 * S_MntMeatProducts + -12.1201262560598 *
S_NumCatalogPurchases + -7.64265449386917 * S_NumDealsPurchases + -0.8154661733691 *
S_NumWebVisitsMonth + -7.34275682075933 * S_RFMstat + 3.14025498790893 * S_Recency +
3.79010135100643 * S_Teenhome + -1.18831354068466 * S_Year_Birth ;
145591    +   H1x1_2  =    -4.72019183577823 * S_AcceptedCmpTotal
145592    +          +     5.14902294151494 * S_Frq  +     -2.7967028726716 * S_Income
145593    +          +     7.90170532262596 * S_Mnt  +    -0.27896242131344 *
145594    +        S_MntGoldProds  +    -6.13177486713562 * S_MntMeatProducts
145595    +          +    -5.64377068696071 * S_NumCatalogPurchases
145596    +          +       1.315880732417 * S_NumDealsPurchases
145597    +          +    -7.12689902819995 * S_NumWebVisitsMonth
145598    +          +     -0.1333171344564 * S_RFMstat  +     8.57178329047956 *
145599    +        S_Recency  +     2.42655161118896 * S_Teenhome
145600    +          +     0.41845495922131 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -4.72019183577823 * S_AcceptedCmpTotal + 5.14902294151494 *
S_Frq + -2.7967028726716 * S_Income + 7.90170532262596 * S_Mnt + -0.27896242131344 *
S_MntGoldProds + -6.13177486713562 * S_MntMeatProducts + -5.64377068696071 *
S_NumCatalogPurchases + 1.315880732417 * S_NumDealsPurchases + -7.12689902819995 *
S_NumWebVisitsMonth + -0.1333171344564 * S_RFMstat + 8.57178329047956 * S_Recency +
2.42655161118896 * S_Teenhome + 0.41845495922131 * S_Year_Birth ;
145601    +   H1x1_3  =    -3.47660178529996 * S_AcceptedCmpTotal
145602    +          +     6.36750571377116 * S_Frq  +    -3.65638554203354 * S_Income
145603    +          +     5.03085244876136 * S_Mnt  +    -1.53184712146016 *
145604    +        S_MntGoldProds  +    -11.4803326240536 * S_MntMeatProducts
145605    +          +    -7.71653347900468 * S_NumCatalogPurchases
145606    +          +    -2.29382480020793 * S_NumDealsPurchases
145607    +          +    -3.92350308032578 * S_NumWebVisitsMonth
145608    +          +      0.1666173174602 * S_RFMstat  +      5.5545699438819 *
145609    +        S_Recency  +     1.88830044274756 * S_Teenhome
145610    +          +     0.36177301880441 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.47660178529996 * S_AcceptedCmpTotal + 6.36750571377116 *
S_Frq + -3.65638554203354 * S_Income + 5.03085244876136 * S_Mnt + -1.53184712146016 *
S_MntGoldProds + -11.4803326240536 * S_MntMeatProducts + -7.71653347900468 *
S_NumCatalogPurchases + -2.29382480020793 * S_NumDealsPurchases + -3.92350308032578 *
S_NumWebVisitsMonth + 0.1666173174602 * S_RFMstat + 5.5545699438819 * S_Recency +
1.88830044274756 * S_Teenhome + 0.36177301880441 * S_Year_Birth ;
145611    +   H1x1_4  =     3.46597508500309 * S_AcceptedCmpTotal
145612    +          +    -3.55913679518365 * S_Frq  +     -3.8279864380535 * S_Income
145613    +          +     4.37031319397754 * S_Mnt  +     0.25558899887189 *
145614    +        S_MntGoldProds  +     1.30937005137526 * S_MntMeatProducts
145615    +          +     0.50178849511862 * S_NumCatalogPurchases
145616    +          +     3.33915340676542 * S_NumDealsPurchases
145617    +          +     2.99171363234904 * S_NumWebVisitsMonth
145618    +          +    -1.10860117011224 * S_RFMstat  +     -5.2144291963152 *
145619    +        S_Recency  +     1.84778865722952 * S_Teenhome
145620    +          +     1.48264084751626 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.46597508500309 * S_AcceptedCmpTotal + -3.55913679518365 *
S_Frq + -3.8279864380535 * S_Income + 4.37031319397754 * S_Mnt + 0.25558899887189 *
S_MntGoldProds + 1.30937005137526 * S_MntMeatProducts + 0.50178849511862 *
S_NumCatalogPurchases + 3.33915340676542 * S_NumDealsPurchases + 2.99171363234904 *
S_NumWebVisitsMonth + -1.10860117011224 * S_RFMstat + -5.2144291963152 * S_Recency +
1.84778865722952 * S_Teenhome + 1.48264084751626 * S_Year_Birth ;
145621    +   H1x1_5  =    -3.28077802512331 * S_AcceptedCmpTotal
145622    +          +     3.26112701694144 * S_Frq  +    -3.51257256391539 * S_Income
145623    +          +     -13.277904245629 * S_Mnt  +    -0.08185099069039 *
145624    +        S_MntGoldProds  +      2.6349809613264 * S_MntMeatProducts
145625    +          +    -5.23430097842472 * S_NumCatalogPurchases
145626    +          +    -1.25644862473488 * S_NumDealsPurchases
145627    +          +     -3.0943337340276 * S_NumWebVisitsMonth
145628    +          +     0.96429102250453 * S_RFMstat  +     4.60373013139143 *
145629    +        S_Recency  +     1.52557456336148 * S_Teenhome
145630    +          +     0.00287578113165 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.28077802512331 * S_AcceptedCmpTotal + 3.26112701694144 *
S_Frq + -3.51257256391539 * S_Income + -13.277904245629 * S_Mnt + -0.08185099069039 *
S_MntGoldProds + 2.6349809613264 * S_MntMeatProducts + -5.23430097842472 *
S_NumCatalogPurchases + -1.25644862473488 * S_NumDealsPurchases + -3.0943337340276 *
S_NumWebVisitsMonth + 0.96429102250453 * S_RFMstat + 4.60373013139143 * S_Recency +
1.52557456336148 * S_Teenhome + 0.00287578113165 * S_Year_Birth ;
145631    +   H1x1_1  = H1x1_1  +     1.77432710413329 * Marital_StatusDivorced
145632    +          +     5.12496303990022 * Marital_StatusMarried
145633    +          +    -7.61364369696186 * Marital_StatusSingle
145634    +          +     2.78937374370395 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.77432710413329 * Marital_StatusDivorced +
5.12496303990022 * Marital_StatusMarried + -7.61364369696186 * Marital_StatusSingle +
2.78937374370395 * Marital_StatusTogether ;
145635    +   H1x1_2  = H1x1_2  +    -5.49070434381597 * Marital_StatusDivorced
145636    +          +     7.65332274940308 * Marital_StatusMarried
145637    +          +    -5.13332947688313 * Marital_StatusSingle
145638    +          +     8.25159601985572 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -5.49070434381597 * Marital_StatusDivorced +
7.65332274940308 * Marital_StatusMarried + -5.13332947688313 * Marital_StatusSingle +
8.25159601985572 * Marital_StatusTogether ;
145639    +   H1x1_3  = H1x1_3  +     1.57910552070948 * Marital_StatusDivorced
145640    +          +     7.95162959069432 * Marital_StatusMarried
145641    +          +    -6.10797604390061 * Marital_StatusSingle
145642    +          +     2.98577039618027 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 1.57910552070948 * Marital_StatusDivorced +
7.95162959069432 * Marital_StatusMarried + -6.10797604390061 * Marital_StatusSingle +
2.98577039618027 * Marital_StatusTogether ;
145643    +   H1x1_4  = H1x1_4  +     3.65411081783958 * Marital_StatusDivorced
145644    +          +     5.45977621823616 * Marital_StatusMarried
145645    +          +    -10.3527985391218 * Marital_StatusSingle
145646    +          +     4.66094015963389 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 3.65411081783958 * Marital_StatusDivorced +
5.45977621823616 * Marital_StatusMarried + -10.3527985391218 * Marital_StatusSingle +
4.66094015963389 * Marital_StatusTogether ;
145647    +   H1x1_5  = H1x1_5  +     1.57864743151562 * Marital_StatusDivorced
145648    +          +     8.15909630638185 * Marital_StatusMarried
145649    +          +    -5.88497367282032 * Marital_StatusSingle
145650    +          +     3.05474303626666 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 1.57864743151562 * Marital_StatusDivorced +
8.15909630638185 * Marital_StatusMarried + -5.88497367282032 * Marital_StatusSingle +
3.05474303626666 * Marital_StatusTogether ;
145651    +   H1x1_1  =    -1.55078746609233 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.55078746609233 + H1x1_1 ;
145652    +   H1x1_2  =     5.40474806112383 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 5.40474806112383 + H1x1_2 ;
145653    +   H1x1_3  =     11.2733164995662 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 11.2733164995662 + H1x1_3 ;
145654    +   H1x1_4  =    -7.78487963966384 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.78487963966384 + H1x1_4 ;
145655    +   H1x1_5  =      3.8784406873535 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 3.8784406873535 + H1x1_5 ;
145656    +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
145657    +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
145658    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
145659    +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
145660    +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
145661    +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
145662    +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
145663    +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
145664    +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
145665    +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
145666    +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
145667    +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
145668    +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
145669    +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
145670    +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
145671    +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
145672    +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
145673    +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
145674    +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
145675    +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
145676    +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
145677    +END;
MPRINT(EM_DIAGRAM):   END;
145678    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145679    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
145680    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
145681    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
145682    +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
145683    +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
145684    +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
145685    +END;
MPRINT(EM_DIAGRAM):   END;
145686    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145687    +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
145688    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145689    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145690    +   H1x2_1  =     0.07453146398445 * S_AcceptedCmpTotal
145691    +          +     0.17438368465616 * S_Frq  +     0.97121905855093 * S_Income
145692    +          +    -0.15757686261675 * S_Mnt  +     0.28678754855648 *
145693    +        S_MntGoldProds  +     2.03999655184815 * S_MntMeatProducts
145694    +          +      0.8747576336553 * S_NumCatalogPurchases
145695    +          +    -0.23551985234916 * S_NumDealsPurchases
145696    +          +     0.83901499225112 * S_NumWebVisitsMonth
145697    +          +     -0.7643570473353 * S_RFMstat  +      0.0823609346051 *
145698    +        S_Recency  +    -0.38340703993831 * S_Teenhome
145699    +          +     1.16037573405943 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.07453146398445 * S_AcceptedCmpTotal + 0.17438368465616 *
S_Frq + 0.97121905855093 * S_Income + -0.15757686261675 * S_Mnt + 0.28678754855648 *
S_MntGoldProds + 2.03999655184815 * S_MntMeatProducts + 0.8747576336553 *
S_NumCatalogPurchases + -0.23551985234916 * S_NumDealsPurchases + 0.83901499225112 *
S_NumWebVisitsMonth + -0.7643570473353 * S_RFMstat + 0.0823609346051 * S_Recency +
-0.38340703993831 * S_Teenhome + 1.16037573405943 * S_Year_Birth ;
145700    +   H1x2_2  =      -2.285017059996 * S_AcceptedCmpTotal
145701    +          +    -0.29646095672581 * S_Frq  +     -3.5024410668082 * S_Income
145702    +          +    -2.12091528193185 * S_Mnt  +    -1.48506012188621 *
145703    +        S_MntGoldProds  +    -1.38316375865608 * S_MntMeatProducts
145704    +          +    -0.99107054453387 * S_NumCatalogPurchases
145705    +          +    -0.68379823410573 * S_NumDealsPurchases
145706    +          +    -1.67939872609259 * S_NumWebVisitsMonth
145707    +          +     0.49106697429539 * S_RFMstat  +    -0.01117108974211 *
145708    +        S_Recency  +    -1.65033346710833 * S_Teenhome
145709    +          +    -1.03897054098621 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -2.285017059996 * S_AcceptedCmpTotal + -0.29646095672581 *
S_Frq + -3.5024410668082 * S_Income + -2.12091528193185 * S_Mnt + -1.48506012188621 *
S_MntGoldProds + -1.38316375865608 * S_MntMeatProducts + -0.99107054453387 *
S_NumCatalogPurchases + -0.68379823410573 * S_NumDealsPurchases + -1.67939872609259 *
S_NumWebVisitsMonth + 0.49106697429539 * S_RFMstat + -0.01117108974211 * S_Recency +
-1.65033346710833 * S_Teenhome + -1.03897054098621 * S_Year_Birth ;
145710    +   H1x2_3  =      2.9562672276462 * S_AcceptedCmpTotal
145711    +          +    -0.19531439441895 * S_Frq  +      0.3125078734463 * S_Income
145712    +          +     -1.6099267525002 * S_Mnt  +    -0.36573328507463 *
145713    +        S_MntGoldProds  +     -0.3392853565114 * S_MntMeatProducts
145714    +          +      1.4506330104932 * S_NumCatalogPurchases
145715    +          +     0.20085283861849 * S_NumDealsPurchases
145716    +          +     2.37974383924154 * S_NumWebVisitsMonth
145717    +          +     -0.1106906484364 * S_RFMstat  +    -3.36701384866793 *
145718    +        S_Recency  +     0.60726269989058 * S_Teenhome
145719    +          +     0.51474814816173 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.9562672276462 * S_AcceptedCmpTotal + -0.19531439441895 *
S_Frq + 0.3125078734463 * S_Income + -1.6099267525002 * S_Mnt + -0.36573328507463 *
S_MntGoldProds + -0.3392853565114 * S_MntMeatProducts + 1.4506330104932 *
S_NumCatalogPurchases + 0.20085283861849 * S_NumDealsPurchases + 2.37974383924154 *
S_NumWebVisitsMonth + -0.1106906484364 * S_RFMstat + -3.36701384866793 * S_Recency +
0.60726269989058 * S_Teenhome + 0.51474814816173 * S_Year_Birth ;
145720    +   H1x2_4  =    -3.19375607611292 * S_AcceptedCmpTotal
145721    +          +    -1.28391627024222 * S_Frq  +     1.20886875907222 * S_Income
145722    +          +     0.33241907162962 * S_Mnt  +     0.81131852742978 *
145723    +        S_MntGoldProds  +     0.66955477854362 * S_MntMeatProducts
145724    +          +    -0.79952426911069 * S_NumCatalogPurchases
145725    +          +    -0.70571099772216 * S_NumDealsPurchases
145726    +          +    -0.32158728049114 * S_NumWebVisitsMonth
145727    +          +    -0.83126265863782 * S_RFMstat  +     1.49830148501327 *
145728    +        S_Recency  +     2.29389047813725 * S_Teenhome
145729    +          +     0.04615513391624 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -3.19375607611292 * S_AcceptedCmpTotal + -1.28391627024222 *
S_Frq + 1.20886875907222 * S_Income + 0.33241907162962 * S_Mnt + 0.81131852742978 *
S_MntGoldProds + 0.66955477854362 * S_MntMeatProducts + -0.79952426911069 *
S_NumCatalogPurchases + -0.70571099772216 * S_NumDealsPurchases + -0.32158728049114 *
S_NumWebVisitsMonth + -0.83126265863782 * S_RFMstat + 1.49830148501327 * S_Recency +
2.29389047813725 * S_Teenhome + 0.04615513391624 * S_Year_Birth ;
145730    +   H1x2_5  =     -0.6002425930451 * S_AcceptedCmpTotal
145731    +          +    -0.86762771301251 * S_Frq  +    -0.57793933969656 * S_Income
145732    +          +     0.41975808190408 * S_Mnt  +    -0.13242897225011 *
145733    +        S_MntGoldProds  +    -1.44402585881872 * S_MntMeatProducts
145734    +          +    -0.41491605544255 * S_NumCatalogPurchases
145735    +          +     0.49374983047507 * S_NumDealsPurchases
145736    +          +    -1.38692718220359 * S_NumWebVisitsMonth
145737    +          +    -0.07580803465143 * S_RFMstat  +      0.4152505934779 *
145738    +        S_Recency  +     1.29605991841828 * S_Teenhome
145739    +          +     2.17160180088465 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.6002425930451 * S_AcceptedCmpTotal + -0.86762771301251 *
S_Frq + -0.57793933969656 * S_Income + 0.41975808190408 * S_Mnt + -0.13242897225011 *
S_MntGoldProds + -1.44402585881872 * S_MntMeatProducts + -0.41491605544255 *
S_NumCatalogPurchases + 0.49374983047507 * S_NumDealsPurchases + -1.38692718220359 *
S_NumWebVisitsMonth + -0.07580803465143 * S_RFMstat + 0.4152505934779 * S_Recency +
1.29605991841828 * S_Teenhome + 2.17160180088465 * S_Year_Birth ;
145740    +   H1x2_1  = H1x2_1  +     0.77674448865903 * Marital_StatusDivorced
145741    +          +    -1.29227303709115 * Marital_StatusMarried
145742    +          +     0.71446782242025 * Marital_StatusSingle
145743    +          +     0.55295867102727 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.77674448865903 * Marital_StatusDivorced +
-1.29227303709115 * Marital_StatusMarried + 0.71446782242025 * Marital_StatusSingle +
0.55295867102727 * Marital_StatusTogether ;
145744    +   H1x2_2  = H1x2_2  +     -0.1845223373129 * Marital_StatusDivorced
145745    +          +      2.0815223604364 * Marital_StatusMarried
145746    +          +     0.79462013188709 * Marital_StatusSingle
145747    +          +     0.20668835346022 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.1845223373129 * Marital_StatusDivorced +
2.0815223604364 * Marital_StatusMarried + 0.79462013188709 * Marital_StatusSingle +
0.20668835346022 * Marital_StatusTogether ;
145748    +   H1x2_3  = H1x2_3  +    -1.02774258915556 * Marital_StatusDivorced
145749    +          +     0.44769683627357 * Marital_StatusMarried
145750    +          +     1.09957357551209 * Marital_StatusSingle
145751    +          +     0.98246644516303 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.02774258915556 * Marital_StatusDivorced +
0.44769683627357 * Marital_StatusMarried + 1.09957357551209 * Marital_StatusSingle +
0.98246644516303 * Marital_StatusTogether ;
145752    +   H1x2_4  = H1x2_4  +     1.02578628033933 * Marital_StatusDivorced
145753    +          +    -0.71096069683657 * Marital_StatusMarried
145754    +          +    -0.46849808497503 * Marital_StatusSingle
145755    +          +    -0.50186472808298 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.02578628033933 * Marital_StatusDivorced +
-0.71096069683657 * Marital_StatusMarried + -0.46849808497503 * Marital_StatusSingle +
-0.50186472808298 * Marital_StatusTogether ;
145756    +   H1x2_5  = H1x2_5  +     0.83514340443964 * Marital_StatusDivorced
145757    +          +     0.21000014809177 * Marital_StatusMarried
145758    +          +    -1.05959388759825 * Marital_StatusSingle
145759    +          +     -0.8202251717493 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 0.83514340443964 * Marital_StatusDivorced +
0.21000014809177 * Marital_StatusMarried + -1.05959388759825 * Marital_StatusSingle +
-0.8202251717493 * Marital_StatusTogether ;
145760    +   H1x2_1  =     0.66244588339698 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.66244588339698 + H1x2_1 ;
145761    +   H1x2_2  =     0.36306484617725 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 0.36306484617725 + H1x2_2 ;
145762    +   H1x2_3  =     0.00299288434405 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 0.00299288434405 + H1x2_3 ;
145763    +   H1x2_4  =     0.32206403734945 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.32206403734945 + H1x2_4 ;
145764    +   H1x2_5  =     0.48514364636978 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.48514364636978 + H1x2_5 ;
145765    +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
145766    +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
145767    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
145768    +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
145769    +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
145770    +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
145771    +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
145772    +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
145773    +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
145774    +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
145775    +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
145776    +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
145777    +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
145778    +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
145779    +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
145780    +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
145781    +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
145782    +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
145783    +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
145784    +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
145785    +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
145786    +END;
MPRINT(EM_DIAGRAM):   END;
145787    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145788    +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
145789    +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
145790    +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
145791    +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
145792    +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
145793    +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
145794    +END;
MPRINT(EM_DIAGRAM):   END;
145795    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145796    +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
145797    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145798    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145799    +   H2x1_1  =     5.34062678932931 * H1x1_1  +     7.71604112891627 * H1x1_2
145800    +          +     7.54377937186103 * H1x1_3  +    -5.90943850663966 * H1x1_4
145801    +          +    -6.06522890475814 * H1x1_5  +    -7.94470945127082 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 5.34062678932931 * H1x1_1 + 7.71604112891627 * H1x1_2 +
7.54377937186103 * H1x1_3 + -5.90943850663966 * H1x1_4 + -6.06522890475814 * H1x1_5 +
-7.94470945127082 * H1x1_6 ;
145802    +   H2x1_2  =      1.1479485803131 * H1x1_1  +      1.4482835893576 * H1x1_2
145803    +          +    -0.15220644394866 * H1x1_3  +    -1.30000676790854 * H1x1_4
145804    +          +    -0.49333138568117 * H1x1_5  +    -1.96124154717115 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.1479485803131 * H1x1_1 + 1.4482835893576 * H1x1_2 +
-0.15220644394866 * H1x1_3 + -1.30000676790854 * H1x1_4 + -0.49333138568117 * H1x1_5 +
-1.96124154717115 * H1x1_6 ;
145805    +   H2x1_3  =     2.12915623251937 * H1x1_1  +     4.39530013559682 * H1x1_2
145806    +          +     3.38050961443392 * H1x1_3  +    -5.12182301645649 * H1x1_4
145807    +          +    -3.74697079524831 * H1x1_5  +    -5.26174801543685 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 2.12915623251937 * H1x1_1 + 4.39530013559682 * H1x1_2 +
3.38050961443392 * H1x1_3 + -5.12182301645649 * H1x1_4 + -3.74697079524831 * H1x1_5 +
-5.26174801543685 * H1x1_6 ;
145808    +   H2x1_4  =     0.54854810712303 * H1x1_1  +      1.6486650469525 * H1x1_2
145809    +          +     1.84563084742932 * H1x1_3  +    -2.43710509923951 * H1x1_4
145810    +          +     0.03038093596976 * H1x1_5  +    -1.34566786751269 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = 0.54854810712303 * H1x1_1 + 1.6486650469525 * H1x1_2 +
1.84563084742932 * H1x1_3 + -2.43710509923951 * H1x1_4 + 0.03038093596976 * H1x1_5 +
-1.34566786751269 * H1x1_6 ;
145811    +   H2x1_5  =     0.89845480530178 * H1x1_1  +     3.19967829294268 * H1x1_2
145812    +          +     3.58592569542093 * H1x1_3  +    -3.76417733693485 * H1x1_4
145813    +          +     -4.1568039640005 * H1x1_5  +    -4.42895004794637 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.89845480530178 * H1x1_1 + 3.19967829294268 * H1x1_2 +
3.58592569542093 * H1x1_3 + -3.76417733693485 * H1x1_4 + -4.1568039640005 * H1x1_5 +
-4.42895004794637 * H1x1_6 ;
145814    +   H2x1_1  = H2x1_1  +     0.44545310705069 * H1x2_1
145815    +          +     2.72471946580982 * H1x2_2  +    -1.42856846603531 * H1x2_3
145816    +          +     0.25357521888082 * H1x2_4  +    -1.25902268741411 * H1x2_5
145817    +          +    -1.70956044020454 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.44545310705069 * H1x2_1 + 2.72471946580982 * H1x2_2
+ -1.42856846603531 * H1x2_3 + 0.25357521888082 * H1x2_4 + -1.25902268741411 * H1x2_5 +
-1.70956044020454 * H1x2_6 ;
145818    +   H2x1_2  = H2x1_2  +      0.9465771639497 * H1x2_1
145819    +          +    -0.41110969777104 * H1x2_2  +    -0.92834816798625 * H1x2_3
145820    +          +     -1.7337755087443 * H1x2_4  +     -1.2522448489667 * H1x2_5
145821    +          +    -0.90111756793979 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.9465771639497 * H1x2_1 + -0.41110969777104 * H1x2_2
+ -0.92834816798625 * H1x2_3 + -1.7337755087443 * H1x2_4 + -1.2522448489667 * H1x2_5 +
-0.90111756793979 * H1x2_6 ;
145822    +   H2x1_3  = H2x1_3  +    -0.22355080983787 * H1x2_1
145823    +          +    -0.18918346120545 * H1x2_2  +    -1.50592518382263 * H1x2_3
145824    +          +    -1.00672320426732 * H1x2_4  +    -1.09510249463921 * H1x2_5
145825    +          +     0.83089577154267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.22355080983787 * H1x2_1 + -0.18918346120545 *
H1x2_2 + -1.50592518382263 * H1x2_3 + -1.00672320426732 * H1x2_4 + -1.09510249463921 * H1x2_5
+ 0.83089577154267 * H1x2_6 ;
145826    +   H2x1_4  = H2x1_4  +    -0.74505363577487 * H1x2_1
145827    +          +     0.41544439689687 * H1x2_2  +    -0.11467073820729 * H1x2_3
145828    +          +    -2.16913690278917 * H1x2_4  +     1.07667011067144 * H1x2_5
145829    +          +    -0.21291665093094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.74505363577487 * H1x2_1 + 0.41544439689687 * H1x2_2
+ -0.11467073820729 * H1x2_3 + -2.16913690278917 * H1x2_4 + 1.07667011067144 * H1x2_5 +
-0.21291665093094 * H1x2_6 ;
145830    +   H2x1_5  = H2x1_5  +    -0.22639397151159 * H1x2_1
145831    +          +     0.59976504799464 * H1x2_2  +    -1.19497833953318 * H1x2_3
145832    +          +     0.40681132265012 * H1x2_4  +    -1.18142813082248 * H1x2_5
145833    +          +     0.28627108561279 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.22639397151159 * H1x2_1 + 0.59976504799464 * H1x2_2
+ -1.19497833953318 * H1x2_3 + 0.40681132265012 * H1x2_4 + -1.18142813082248 * H1x2_5 +
0.28627108561279 * H1x2_6 ;
145834    +   H2x1_1  =     0.80837297417824 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.80837297417824 + H2x1_1 ;
145835    +   H2x1_2  =    -3.15918654233626 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -3.15918654233626 + H2x1_2 ;
145836    +   H2x1_3  =     -1.1148455701308 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = -1.1148455701308 + H2x1_3 ;
145837    +   H2x1_4  =    -2.43637271773179 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -2.43637271773179 + H2x1_4 ;
145838    +   H2x1_5  =     -1.5068240097035 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.5068240097035 + H2x1_5 ;
145839    +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
145840    +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
145841    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
145842    +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
145843    +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
145844    +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
145845    +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
145846    +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
145847    +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
145848    +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
145849    +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
145850    +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
145851    +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
145852    +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
145853    +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
145854    +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
145855    +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
145856    +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
145857    +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
145858    +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
145859    +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
145860    +END;
MPRINT(EM_DIAGRAM):   END;
145861    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145862    +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
145863    +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
145864    +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
145865    +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
145866    +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
145867    +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
145868    +END;
MPRINT(EM_DIAGRAM):   END;
145869    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145870    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
145871    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145872    +
145873    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
145874    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
145875    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
145876    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
145877    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
145878    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
145879    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
145880    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
145881    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
145882    +end;
MPRINT(EM_DIAGRAM):   end;
145883    +else do;
MPRINT(EM_DIAGRAM):   else do;
145884    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
145885    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
145886    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
145887    +   end;
MPRINT(EM_DIAGRAM):   end;
145888    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
145889    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
145890    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
145891    +   end;
MPRINT(EM_DIAGRAM):   end;
145892    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145893    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
145894    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
145895    +   end;
MPRINT(EM_DIAGRAM):   end;
145896    +end;
MPRINT(EM_DIAGRAM):   end;
145897    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
145898    +   P_DepVar1  =    -14.9408685199347 * H2x1_1  +     1.48309430635242 * H2x1_2
145899    +          +     -4.3496216751271 * H2x1_3  +     0.01239249943556 * H2x1_4
145900    +          +    -6.27169756239783 * H2x1_5  +     2.70843493957574 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -14.9408685199347 * H2x1_1 + 1.48309430635242 * H2x1_2 +
-4.3496216751271 * H2x1_3 + 0.01239249943556 * H2x1_4 + -6.27169756239783 * H2x1_5 +
2.70843493957574 * H2x1_6 ;
145901    +   P_DepVar1  =     5.67267561171469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 5.67267561171469 + P_DepVar1 ;
145902    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
145903    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
145904    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
145905    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
145906    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
145907    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
145908    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
145909    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
145910    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
145911    +END;
MPRINT(EM_DIAGRAM):   END;
145912    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
145913    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
145914    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
145915    +END;
MPRINT(EM_DIAGRAM):   END;
145916    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
145917    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
145918    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
145919    +END;
MPRINT(EM_DIAGRAM):   END;
145920    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
145921    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
145922    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
145923    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
145924    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
145925    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
145926    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
145927    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145928    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
145929    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
145930    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
145931    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
145932    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
145933    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
145934    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
145935    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
145936    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
145937    +END;
MPRINT(EM_DIAGRAM):   END;
145938    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
145939    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
145940    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
145941    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
145942    +* Renaming variables for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural42;
145943    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145944    +* Renaming Posterior variables for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural42;
145945    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145946    +drop AutoNeural42_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_P_DepVar1;
145947    +AutoNeural42_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural42_P_DepVar1 = P_DepVar1;
145948    +drop AutoNeural42_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_P_DepVar0;
145949    +AutoNeural42_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural42_P_DepVar0 = P_DepVar0;
145950    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145951    +* Renaming _WARN_ variable for AutoNeural42;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural42;
145952    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145953    +length AutoNeural42_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural42_WARN_ $4;
145954    +drop AutoNeural42_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural42_WARN_;
145955    +AutoNeural42_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural42_WARN_ = _WARN_;
145956    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145957    +* Ensmbl10: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 3 of 3;
145958    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145959    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145960    +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
145961    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
145962    +* NODE: AutoNeural46;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural46;
145963    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145964    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
145965    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
145966    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
145967    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
145968    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
145969    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
145970    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
145971    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
145972    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
145973    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
145974    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
145975    +LENGTH _WARN_ $4
145976    +      F_DepVar  $ 12
145977    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
145978    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
145979    +
145980    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
145981    +
145982    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
145983    +
145984    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
145985    +
145986    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
145987    +
145988    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
145989    +
145990    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
145991    +
145992    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
145993    +
145994    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
145995    +
145996    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
145997    +
145998    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
145999    +
146000    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
146001    +
146002    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
146003    +
146004    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
146005    +
146006    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
146007    +
146008    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
146009    +
146010    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
146011    +
146012    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
146013    +
146014    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
146015    +
146016    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
146017    +
146018    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
146019    +
146020    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
146021    +
146022    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
146023    +
146024    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
146025    +
146026    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
146027    +
146028    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
146029    +
146030    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
146031    +
146032    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
146033    +
146034    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
146035    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
146036    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
146037    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
146038    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
146039    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
146040    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
146041    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
146042    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
146043    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
146044    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
146045    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
146046    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
146047    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
146048    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146049    +end;
MPRINT(EM_DIAGRAM):   end;
146050    +else do;
MPRINT(EM_DIAGRAM):   else do;
146051    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
146052    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
146053    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
146054    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
146055    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
146056    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
146057    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
146058    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
146059    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146060    +         end;
MPRINT(EM_DIAGRAM):   end;
146061    +         else do;
MPRINT(EM_DIAGRAM):   else do;
146062    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
146063    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
146064    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146065    +            end;
MPRINT(EM_DIAGRAM):   end;
146066    +         end;
MPRINT(EM_DIAGRAM):   end;
146067    +      end;
MPRINT(EM_DIAGRAM):   end;
146068    +      else do;
MPRINT(EM_DIAGRAM):   else do;
146069    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
146070    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
146071    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146072    +         end;
MPRINT(EM_DIAGRAM):   end;
146073    +      end;
MPRINT(EM_DIAGRAM):   end;
146074    +   end;
MPRINT(EM_DIAGRAM):   end;
146075    +   else do;
MPRINT(EM_DIAGRAM):   else do;
146076    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
146077    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
146078    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146079    +      end;
MPRINT(EM_DIAGRAM):   end;
146080    +      else do;
MPRINT(EM_DIAGRAM):   else do;
146081    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
146082    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
146083    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
146084    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
146085    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
146086    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146087    +         end;
MPRINT(EM_DIAGRAM):   end;
146088    +      end;
MPRINT(EM_DIAGRAM):   end;
146089    +   end;
MPRINT(EM_DIAGRAM):   end;
146090    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
146091    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
146092    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
146093    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
146094    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
146095    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
146096    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146097    +   end;
MPRINT(EM_DIAGRAM):   end;
146098    +end;
MPRINT(EM_DIAGRAM):   end;
146099    +
146100    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146101    +*** Checking missing input Interval
146102    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
146103    +
146104    +IF NMISS(
146105    +   AcceptedCmpTotal ,
146106    +   Frq ,
146107    +   Income ,
146108    +   Mnt ,
146109    +   MntGoldProds ,
146110    +   MntMeatProducts ,
146111    +   NumCatalogPurchases ,
146112    +   NumDealsPurchases ,
146113    +   NumWebVisitsMonth ,
146114    +   RFMstat ,
146115    +   Recency ,
146116    +   Teenhome ,
146117    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
146118    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
146119    +
146120    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146121    +END;
MPRINT(EM_DIAGRAM):   END;
146122    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146123    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
146124    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146125    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146126    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
146127    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
146128    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
146129    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
146130    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
146131    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
146132    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
146133    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
146134    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
146135    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
146136    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
146137    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
146138    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
146139    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
146140    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
146141    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
146142    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
146143    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
146144    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
146145    +END;
MPRINT(EM_DIAGRAM):   END;
146146    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146147    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
146148    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
146149    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
146150    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
146151    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
146152    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
146153    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
146154    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
146155    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
146156    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
146157    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
146158    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
146159    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
146160    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
146161    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
146162    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
146163    +   ELSE S_NumCatalogPurchases
146164    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
146165    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
146166    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
146167    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
146168    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
146169    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
146170    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
146171    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
146172    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
146173    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
146174    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
146175    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
146176    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
146177    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
146178    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
146179    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
146180    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
146181    +END;
MPRINT(EM_DIAGRAM):   END;
146182    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146183    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
146184    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146185    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146186    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
146187    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146188    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146189    +   H1x1_1  =    -0.10743056275421 * S_AcceptedCmpTotal
146190    +          +     0.03409888241348 * S_Frq  +    -0.00055974837068 * S_Income
146191    +          +       0.134341851096 * S_Mnt  +    -0.00857864409164 *
146192    +        S_MntGoldProds  +      0.4895390061827 * S_MntMeatProducts
146193    +          +    -0.01423451356563 * S_NumCatalogPurchases
146194    +          +     0.06006350655487 * S_NumDealsPurchases
146195    +          +    -0.20885493964335 * S_NumWebVisitsMonth
146196    +          +    -0.01173202621744 * S_RFMstat  +     0.25819909101611 *
146197    +        S_Recency  +    -0.03326479668652 * S_Teenhome
146198    +          +     0.03371888312814 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.10743056275421 * S_AcceptedCmpTotal + 0.03409888241348 *
S_Frq + -0.00055974837068 * S_Income + 0.134341851096 * S_Mnt + -0.00857864409164 *
S_MntGoldProds + 0.4895390061827 * S_MntMeatProducts + -0.01423451356563 *
S_NumCatalogPurchases + 0.06006350655487 * S_NumDealsPurchases + -0.20885493964335 *
S_NumWebVisitsMonth + -0.01173202621744 * S_RFMstat + 0.25819909101611 * S_Recency +
-0.03326479668652 * S_Teenhome + 0.03371888312814 * S_Year_Birth ;
146199    +   H1x1_2  =    -0.03078478134042 * S_AcceptedCmpTotal
146200    +          +    -0.12351766308972 * S_Frq  +     -0.1943406821731 * S_Income
146201    +          +    -0.36027326127049 * S_Mnt  +     0.05117597516658 *
146202    +        S_MntGoldProds  +     0.07931191953223 * S_MntMeatProducts
146203    +          +    -0.03109266966794 * S_NumCatalogPurchases
146204    +          +     0.05524435494328 * S_NumDealsPurchases
146205    +          +     -0.0105802056898 * S_NumWebVisitsMonth
146206    +          +     0.01793771049002 * S_RFMstat  +      0.0322880575902 *
146207    +        S_Recency  +       0.195010707702 * S_Teenhome
146208    +          +     -0.0351563039686 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.03078478134042 * S_AcceptedCmpTotal + -0.12351766308972 *
S_Frq + -0.1943406821731 * S_Income + -0.36027326127049 * S_Mnt + 0.05117597516658 *
S_MntGoldProds + 0.07931191953223 * S_MntMeatProducts + -0.03109266966794 *
S_NumCatalogPurchases + 0.05524435494328 * S_NumDealsPurchases + -0.0105802056898 *
S_NumWebVisitsMonth + 0.01793771049002 * S_RFMstat + 0.0322880575902 * S_Recency +
0.195010707702 * S_Teenhome + -0.0351563039686 * S_Year_Birth ;
146209    +   H1x1_3  =     0.23990987498311 * S_AcceptedCmpTotal
146210    +          +     0.04052411845464 * S_Frq  +    -0.00302331972067 * S_Income
146211    +          +     0.39981531247427 * S_Mnt  +     0.01433011413993 *
146212    +        S_MntGoldProds  +    -0.19955782687502 * S_MntMeatProducts
146213    +          +     0.07777995109144 * S_NumCatalogPurchases
146214    +          +     0.08683394019767 * S_NumDealsPurchases
146215    +          +     0.27328366433987 * S_NumWebVisitsMonth
146216    +          +      0.0263930429288 * S_RFMstat  +    -0.38900647412136 *
146217    +        S_Recency  +      0.0640153287908 * S_Teenhome
146218    +          +     0.07587467002123 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.23990987498311 * S_AcceptedCmpTotal + 0.04052411845464 *
S_Frq + -0.00302331972067 * S_Income + 0.39981531247427 * S_Mnt + 0.01433011413993 *
S_MntGoldProds + -0.19955782687502 * S_MntMeatProducts + 0.07777995109144 *
S_NumCatalogPurchases + 0.08683394019767 * S_NumDealsPurchases + 0.27328366433987 *
S_NumWebVisitsMonth + 0.0263930429288 * S_RFMstat + -0.38900647412136 * S_Recency +
0.0640153287908 * S_Teenhome + 0.07587467002123 * S_Year_Birth ;
146219    +   H1x1_1  = H1x1_1  +    -0.05820552608682 * Marital_StatusDivorced
146220    +          +    -0.02695167777393 * Marital_StatusMarried
146221    +          +    -0.00733864032764 * Marital_StatusSingle
146222    +          +     0.03838747494293 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.05820552608682 * Marital_StatusDivorced +
-0.02695167777393 * Marital_StatusMarried + -0.00733864032764 * Marital_StatusSingle +
0.03838747494293 * Marital_StatusTogether ;
146223    +   H1x1_2  = H1x1_2  +    -0.00853551919442 * Marital_StatusDivorced
146224    +          +     0.42249671001117 * Marital_StatusMarried
146225    +          +    -0.18515416581955 * Marital_StatusSingle
146226    +          +     0.25783473520826 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -0.00853551919442 * Marital_StatusDivorced +
0.42249671001117 * Marital_StatusMarried + -0.18515416581955 * Marital_StatusSingle +
0.25783473520826 * Marital_StatusTogether ;
146227    +   H1x1_3  = H1x1_3  +      0.4175036565076 * Marital_StatusDivorced
146228    +          +     0.45127582934777 * Marital_StatusMarried
146229    +          +       0.358157766485 * Marital_StatusSingle
146230    +          +     0.42627185625497 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.4175036565076 * Marital_StatusDivorced +
0.45127582934777 * Marital_StatusMarried + 0.358157766485 * Marital_StatusSingle +
0.42627185625497 * Marital_StatusTogether ;
146231    +   H1x1_1  =    -1.23226472635566 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.23226472635566 + H1x1_1 ;
146232    +   H1x1_2  =      2.2313165328971 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.2313165328971 + H1x1_2 ;
146233    +   H1x1_3  =     0.09755782095138 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.09755782095138 + H1x1_3 ;
146234    +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
146235    +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
146236    +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
146237    +END;
MPRINT(EM_DIAGRAM):   END;
146238    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146239    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
146240    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
146241    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
146242    +END;
MPRINT(EM_DIAGRAM):   END;
146243    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146244    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
146245    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146246    +
146247    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
146248    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
146249    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
146250    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
146251    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
146252    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
146253    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
146254    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
146255    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
146256    +end;
MPRINT(EM_DIAGRAM):   end;
146257    +else do;
MPRINT(EM_DIAGRAM):   else do;
146258    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
146259    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
146260    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
146261    +   end;
MPRINT(EM_DIAGRAM):   end;
146262    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
146263    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
146264    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
146265    +   end;
MPRINT(EM_DIAGRAM):   end;
146266    +   else do;
MPRINT(EM_DIAGRAM):   else do;
146267    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
146268    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
146269    +   end;
MPRINT(EM_DIAGRAM):   end;
146270    +end;
MPRINT(EM_DIAGRAM):   end;
146271    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146272    +   P_DepVar1  =     -68.075125441494 * H1x1_1  +    -72.7630361672259 * H1x1_2
146273    +          +    -71.6251597703755 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -68.075125441494 * H1x1_1 + -72.7630361672259 * H1x1_2 +
-71.6251597703755 * H1x1_3 ;
146274    +   P_DepVar1  =    -25.6080957302662 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -25.6080957302662 + P_DepVar1 ;
146275    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
146276    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
146277    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
146278    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
146279    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
146280    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
146281    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
146282    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
146283    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
146284    +END;
MPRINT(EM_DIAGRAM):   END;
146285    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146286    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
146287    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
146288    +END;
MPRINT(EM_DIAGRAM):   END;
146289    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
146290    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
146291    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
146292    +END;
MPRINT(EM_DIAGRAM):   END;
146293    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
146294    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
146295    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
146296    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
146297    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
146298    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
146299    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
146300    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146301    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
146302    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146303    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
146304    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
146305    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
146306    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
146307    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
146308    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
146309    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
146310    +END;
MPRINT(EM_DIAGRAM):   END;
146311    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
146312    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
146313    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
146314    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
146315    +* Renaming variables for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural46;
146316    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146317    +* Renaming Posterior variables for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural46;
146318    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146319    +drop AutoNeural46_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_P_DepVar1;
146320    +AutoNeural46_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural46_P_DepVar1 = P_DepVar1;
146321    +drop AutoNeural46_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_P_DepVar0;
146322    +AutoNeural46_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural46_P_DepVar0 = P_DepVar0;
146323    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146324    +* Renaming _WARN_ variable for AutoNeural46;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural46;
146325    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146326    +length AutoNeural46_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural46_WARN_ $4;
146327    +drop AutoNeural46_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural46_WARN_;
146328    +AutoNeural46_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural46_WARN_ = _WARN_;
146329    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146330    +* Ensmbl10: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Average Posteriors of 3 models;
146331    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146332    +P_DepVar1 = (
146333    +Neural34_P_DepVar1 +
146334    +AutoNeural42_P_DepVar1 +
146335    +AutoNeural46_P_DepVar1
146336    +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural34_P_DepVar1 + AutoNeural42_P_DepVar1 +
AutoNeural46_P_DepVar1 )/3;
146337    +P_DepVar0 = (
146338    +Neural34_P_DepVar0 +
146339    +AutoNeural42_P_DepVar0 +
146340    +AutoNeural46_P_DepVar0
146341    +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural34_P_DepVar0 + AutoNeural42_P_DepVar0 +
AutoNeural46_P_DepVar0 )/3;
146342    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146343    +* Ensmbl10: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Classification Vars;
146344    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146345    +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
146346    +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
146347    +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
146348    +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
146349    +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
146350    +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
146351    +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
146352    +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
146353    +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
146354    +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
146355    +end;
MPRINT(EM_DIAGRAM):   end;
146356    +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
146357    +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
146358    +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
146359    +end;
MPRINT(EM_DIAGRAM):   end;
146360    +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146361    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146362    +* Ensmbl10: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Producing Unformatted variable;
146363    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146364    +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
146365    +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
146366    +else
146367    +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
146368    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146369    +* Ensmbl10: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing _WARN_ Variable;
146370    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146371    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
146372    +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
146373    +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
146374    +if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
146374   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
146375    +if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
146375   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
146376    +if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
146376   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
146377    +if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
146377   !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
146378    +if index(AUTONEURAL42_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
146378   !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
146379    +if index(AUTONEURAL42_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
146379   !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
146380    +if index(AUTONEURAL42_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
146380   !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
146381    +if index(AUTONEURAL42_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
146381   !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL42_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
146382    +if index(AUTONEURAL46_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
146382   !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
146383    +if index(AUTONEURAL46_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
146383   !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
146384    +if index(AUTONEURAL46_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
146384   !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
146385    +if index(AUTONEURAL46_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
146385   !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL46_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
146386    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146387    +* Ensmbl10: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Residual Vars;
146388    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146389    +if
146390    +F_DepVar NE '1'
146391    +AND F_DepVar NE '0'
146392    +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
146393    +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
146394    +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
146395    +end;
MPRINT(EM_DIAGRAM):   end;
146396    +else do;
MPRINT(EM_DIAGRAM):   else do;
146397    +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
146398    +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
146399    +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
146400    +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
146401    +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
146402    +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
146403    +END;
MPRINT(EM_DIAGRAM):   END;
146404    +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
146405     run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL10_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL34_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
146406     quit;
146407     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl10_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl10_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Ensmbl10_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
146467     filename _pref
146467   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas";
146468     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
146469     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas.
146470    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
146471    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
146472    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
146473    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
146474    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
146475    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
146476    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
146477    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
146478    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
146479    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
146480    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
146481    +LENGTH _WARN_ $4
146482    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
146483    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
146484    +
146485    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
146486    +
146487    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
146488    +
146489    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
146490    +
146491    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
146492    +
146493    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
146494    +
146495    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
146496    +
146497    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
146498    +
146499    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
146500    +
146501    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
146502    +
146503    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
146504    +
146505    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
146506    +
146507    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
146508    +
146509    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
146510    +
146511    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
146512    +
146513    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
146514    +
146515    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
146516    +
146517    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
146518    +
146519    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
146520    +
146521    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
146522    +
146523    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
146524    +
146525    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
146526    +
146527    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
146528    +
146529    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
146530    +
146531    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
146532    +
146533    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
146534    +
146535    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
146536    +
146537    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
146538    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
146539    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
146540    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
146541    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
146542    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
146543    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
146544    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
146545    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
146546    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
146547    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
146548    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
146549    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
146550    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
146551    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146552    +end;
MPRINT(EM_DIAGRAM):   end;
146553    +else do;
MPRINT(EM_DIAGRAM):   else do;
146554    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
146555    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
146556    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
146557    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
146558    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
146559    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
146560    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
146561    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
146562    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146563    +         end;
MPRINT(EM_DIAGRAM):   end;
146564    +         else do;
MPRINT(EM_DIAGRAM):   else do;
146565    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
146566    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
146567    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146568    +            end;
MPRINT(EM_DIAGRAM):   end;
146569    +         end;
MPRINT(EM_DIAGRAM):   end;
146570    +      end;
MPRINT(EM_DIAGRAM):   end;
146571    +      else do;
MPRINT(EM_DIAGRAM):   else do;
146572    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
146573    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
146574    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146575    +         end;
MPRINT(EM_DIAGRAM):   end;
146576    +      end;
MPRINT(EM_DIAGRAM):   end;
146577    +   end;
MPRINT(EM_DIAGRAM):   end;
146578    +   else do;
MPRINT(EM_DIAGRAM):   else do;
146579    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
146580    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
146581    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146582    +      end;
MPRINT(EM_DIAGRAM):   end;
146583    +      else do;
MPRINT(EM_DIAGRAM):   else do;
146584    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
146585    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
146586    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
146587    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
146588    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
146589    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
146590    +         end;
MPRINT(EM_DIAGRAM):   end;
146591    +      end;
MPRINT(EM_DIAGRAM):   end;
146592    +   end;
MPRINT(EM_DIAGRAM):   end;
146593    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
146594    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
146595    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
146596    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
146597    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
146598    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
146599    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146600    +   end;
MPRINT(EM_DIAGRAM):   end;
146601    +end;
MPRINT(EM_DIAGRAM):   end;
146602    +
146603    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146604    +*** Checking missing input Interval
146605    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
146606    +
146607    +IF NMISS(
146608    +   AcceptedCmpTotal ,
146609    +   Frq ,
146610    +   Income ,
146611    +   Mnt ,
146612    +   MntGoldProds ,
146613    +   MntMeatProducts ,
146614    +   NumCatalogPurchases ,
146615    +   NumDealsPurchases ,
146616    +   NumWebVisitsMonth ,
146617    +   RFMstat ,
146618    +   Recency ,
146619    +   Teenhome ,
146620    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
146621    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
146622    +
146623    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
146624    +END;
MPRINT(EM_DIAGRAM):   END;
146625    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146626    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
146627    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146628    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146629    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
146630    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
146631    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
146632    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
146633    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
146634    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
146635    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
146636    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
146637    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
146638    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
146639    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
146640    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
146641    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
146642    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
146643    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
146644    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
146645    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
146646    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
146647    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
146648    +END;
MPRINT(EM_DIAGRAM):   END;
146649    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146650    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
146651    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
146652    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
146653    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
146654    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
146655    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
146656    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
146657    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
146658    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
146659    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
146660    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
146661    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
146662    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
146663    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
146664    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
146665    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
146666    +   ELSE S_NumCatalogPurchases
146667    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
146668    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
146669    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
146670    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
146671    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
146672    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
146673    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
146674    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
146675    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
146676    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
146677    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
146678    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
146679    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
146680    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
146681    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
146682    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
146683    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
146684    +END;
MPRINT(EM_DIAGRAM):   END;
146685    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146686    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
146687    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146688    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146689    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
146690    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146691    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146692    +   H11  =     0.39113138187571 * S_AcceptedCmpTotal  +    -0.61540725344485 *
146693    +        S_Frq  +    -0.39640720965637 * S_Income  +    -0.29779259024925 *
146694    +        S_Mnt  +     0.09159537668687 * S_MntGoldProds
146695    +          +     0.66968861823847 * S_MntMeatProducts
146696    +          +     0.43410284729103 * S_NumCatalogPurchases
146697    +          +     0.38169769247512 * S_NumDealsPurchases
146698    +          +     0.42568124883788 * S_NumWebVisitsMonth
146699    +          +       0.117680996215 * S_RFMstat  +    -0.81755740196945 *
146700    +        S_Recency  +     0.34714100236873 * S_Teenhome
146701    +          +     0.39595885220917 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.39113138187571 * S_AcceptedCmpTotal + -0.61540725344485 * S_Frq
+ -0.39640720965637 * S_Income + -0.29779259024925 * S_Mnt + 0.09159537668687 * S_MntGoldProds
+ 0.66968861823847 * S_MntMeatProducts + 0.43410284729103 * S_NumCatalogPurchases +
0.38169769247512 * S_NumDealsPurchases + 0.42568124883788 * S_NumWebVisitsMonth +
0.117680996215 * S_RFMstat + -0.81755740196945 * S_Recency + 0.34714100236873 * S_Teenhome +
0.39595885220917 * S_Year_Birth ;
146702    +   H12  =    -0.17603311184545 * S_AcceptedCmpTotal  +    -1.87448667460975 *
146703    +        S_Frq  +    -0.13770783826558 * S_Income  +    -0.07794509574546 *
146704    +        S_Mnt  +     -0.0367231623133 * S_MntGoldProds
146705    +          +     0.43468157063779 * S_MntMeatProducts
146706    +          +     1.22287851495207 * S_NumCatalogPurchases
146707    +          +     1.34810668047823 * S_NumDealsPurchases
146708    +          +     0.29744386797792 * S_NumWebVisitsMonth
146709    +          +     0.24598010228595 * S_RFMstat  +     0.45054459604149 *
146710    +        S_Recency  +    -0.31884355104334 * S_Teenhome
146711    +          +    -0.49374494273323 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.17603311184545 * S_AcceptedCmpTotal + -1.87448667460975 * S_Frq
+ -0.13770783826558 * S_Income + -0.07794509574546 * S_Mnt + -0.0367231623133 * S_MntGoldProds
+ 0.43468157063779 * S_MntMeatProducts + 1.22287851495207 * S_NumCatalogPurchases +
1.34810668047823 * S_NumDealsPurchases + 0.29744386797792 * S_NumWebVisitsMonth +
0.24598010228595 * S_RFMstat + 0.45054459604149 * S_Recency + -0.31884355104334 * S_Teenhome +
-0.49374494273323 * S_Year_Birth ;
146712    +   H13  =    -0.35894234681627 * S_AcceptedCmpTotal  +     2.22535530920485 *
146713    +        S_Frq  +    -0.60759993740885 * S_Income  +    -0.19127405324439 *
146714    +        S_Mnt  +     0.13903548885363 * S_MntGoldProds
146715    +          +    -3.08800901663199 * S_MntMeatProducts
146716    +          +    -1.19043292478827 * S_NumCatalogPurchases
146717    +          +    -0.37179794210537 * S_NumDealsPurchases
146718    +          +     0.03624847445355 * S_NumWebVisitsMonth
146719    +          +    -0.62521514183331 * S_RFMstat  +     0.01074839631068 *
146720    +        S_Recency  +     0.08240530440608 * S_Teenhome
146721    +          +    -0.04154769345168 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.35894234681627 * S_AcceptedCmpTotal + 2.22535530920485 * S_Frq
+ -0.60759993740885 * S_Income + -0.19127405324439 * S_Mnt + 0.13903548885363 * S_MntGoldProds
+ -3.08800901663199 * S_MntMeatProducts + -1.19043292478827 * S_NumCatalogPurchases +
-0.37179794210537 * S_NumDealsPurchases + 0.03624847445355 * S_NumWebVisitsMonth +
-0.62521514183331 * S_RFMstat + 0.01074839631068 * S_Recency + 0.08240530440608 * S_Teenhome +
-0.04154769345168 * S_Year_Birth ;
146722    +   H14  =     0.72612390853906 * S_AcceptedCmpTotal  +    -1.03331426863575 *
146723    +        S_Frq  +     0.44630396705527 * S_Income  +    -1.29648064151656 *
146724    +        S_Mnt  +     0.20190465471738 * S_MntGoldProds
146725    +          +     0.78481425439956 * S_MntMeatProducts
146726    +          +      0.6107688367092 * S_NumCatalogPurchases
146727    +          +    -0.39308332306764 * S_NumDealsPurchases
146728    +          +     1.13986700740733 * S_NumWebVisitsMonth
146729    +          +    -0.10095149614189 * S_RFMstat  +    -1.23708147180809 *
146730    +        S_Recency  +    -0.40344648497219 * S_Teenhome
146731    +          +    -0.21455944295735 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.72612390853906 * S_AcceptedCmpTotal + -1.03331426863575 * S_Frq
+ 0.44630396705527 * S_Income + -1.29648064151656 * S_Mnt + 0.20190465471738 * S_MntGoldProds
+ 0.78481425439956 * S_MntMeatProducts + 0.6107688367092 * S_NumCatalogPurchases +
-0.39308332306764 * S_NumDealsPurchases + 1.13986700740733 * S_NumWebVisitsMonth +
-0.10095149614189 * S_RFMstat + -1.23708147180809 * S_Recency + -0.40344648497219 * S_Teenhome
+ -0.21455944295735 * S_Year_Birth ;
146732    +   H15  =    -0.52000103453301 * S_AcceptedCmpTotal  +    -0.14144790393123 *
146733    +        S_Frq  +    -0.47209445285116 * S_Income  +     0.51267592710475 *
146734    +        S_Mnt  +     0.07876708495313 * S_MntGoldProds
146735    +          +    -0.61914125284805 * S_MntMeatProducts
146736    +          +    -0.54746366292992 * S_NumCatalogPurchases
146737    +          +     0.25925395549236 * S_NumDealsPurchases
146738    +          +    -0.60979686139101 * S_NumWebVisitsMonth
146739    +          +     0.08166171339337 * S_RFMstat  +     0.96981534293427 *
146740    +        S_Recency  +     0.36245179070453 * S_Teenhome
146741    +          +    -0.09267442906112 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.52000103453301 * S_AcceptedCmpTotal + -0.14144790393123 * S_Frq
+ -0.47209445285116 * S_Income + 0.51267592710475 * S_Mnt + 0.07876708495313 * S_MntGoldProds
+ -0.61914125284805 * S_MntMeatProducts + -0.54746366292992 * S_NumCatalogPurchases +
0.25925395549236 * S_NumDealsPurchases + -0.60979686139101 * S_NumWebVisitsMonth +
0.08166171339337 * S_RFMstat + 0.96981534293427 * S_Recency + 0.36245179070453 * S_Teenhome +
-0.09267442906112 * S_Year_Birth ;
146742    +   H11  = H11  +     0.01565392034595 * Marital_StatusDivorced
146743    +          +     0.22493072364483 * Marital_StatusMarried
146744    +          +    -0.34177799020181 * Marital_StatusSingle
146745    +          +    -0.04779249269081 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01565392034595 * Marital_StatusDivorced + 0.22493072364483
* Marital_StatusMarried + -0.34177799020181 * Marital_StatusSingle + -0.04779249269081 *
Marital_StatusTogether ;
146746    +   H12  = H12  +     0.58482172427767 * Marital_StatusDivorced
146747    +          +     0.05031503177659 * Marital_StatusMarried
146748    +          +     0.28039335778718 * Marital_StatusSingle
146749    +          +     0.00709736205513 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.58482172427767 * Marital_StatusDivorced + 0.05031503177659
* Marital_StatusMarried + 0.28039335778718 * Marital_StatusSingle + 0.00709736205513 *
Marital_StatusTogether ;
146750    +   H13  = H13  +     0.35081594367456 * Marital_StatusDivorced
146751    +          +    -0.24395984745809 * Marital_StatusMarried
146752    +          +     0.22708224780413 * Marital_StatusSingle
146753    +          +    -0.34334833500124 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.35081594367456 * Marital_StatusDivorced +
-0.24395984745809 * Marital_StatusMarried + 0.22708224780413 * Marital_StatusSingle +
-0.34334833500124 * Marital_StatusTogether ;
146754    +   H14  = H14  +     0.85482961039457 * Marital_StatusDivorced
146755    +          +    -1.06411172500365 * Marital_StatusMarried
146756    +          +     0.57554615813234 * Marital_StatusSingle
146757    +          +    -0.91141797290702 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.85482961039457 * Marital_StatusDivorced +
-1.06411172500365 * Marital_StatusMarried + 0.57554615813234 * Marital_StatusSingle +
-0.91141797290702 * Marital_StatusTogether ;
146758    +   H15  = H15  +      0.2197825206844 * Marital_StatusDivorced
146759    +          +     0.66663600919341 * Marital_StatusMarried
146760    +          +    -0.69696969089357 * Marital_StatusSingle
146761    +          +     0.48232861459141 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2197825206844 * Marital_StatusDivorced + 0.66663600919341
* Marital_StatusMarried + -0.69696969089357 * Marital_StatusSingle + 0.48232861459141 *
Marital_StatusTogether ;
146762    +   H11  =    -1.58463812409211 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.58463812409211 + H11 ;
146763    +   H12  =    -0.59413927784841 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.59413927784841 + H12 ;
146764    +   H13  =    -1.40790569062078 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.40790569062078 + H13 ;
146765    +   H14  =     -0.2073181654495 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.2073181654495 + H14 ;
146766    +   H15  =     1.99108524971007 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.99108524971007 + H15 ;
146767    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
146768    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
146769    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
146770    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
146771    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
146772    +END;
MPRINT(EM_DIAGRAM):   END;
146773    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146774    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
146775    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
146776    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
146777    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
146778    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
146779    +END;
MPRINT(EM_DIAGRAM):   END;
146780    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146781    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
146782    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146783    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
146784    +   P_DepVar1  =     3.73071630847853 * H11  +     2.94025483165613 * H12
146785    +          +    -3.96191932636925 * H13  +     3.36339025105162 * H14
146786    +          +    -4.82596427081675 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.73071630847853 * H11 + 2.94025483165613 * H12 +
-3.96191932636925 * H13 + 3.36339025105162 * H14 + -4.82596427081675 * H15 ;
146787    +   P_DepVar1  =     0.43428060622858 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.43428060622858 + P_DepVar1 ;
146788    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
146789    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
146790    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
146791    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
146792    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
146793    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
146794    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
146795    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
146796    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
146797    +END;
MPRINT(EM_DIAGRAM):   END;
146798    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
146799    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
146800    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
146801    +END;
MPRINT(EM_DIAGRAM):   END;
146802    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
146803    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
146804    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
146805    +END;
MPRINT(EM_DIAGRAM):   END;
146806    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146807    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
146808    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
146809    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
146810    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
146811    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
146812    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
146813    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
146814    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
146815    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
146816    +END;
MPRINT(EM_DIAGRAM):   END;
146817    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
146818    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
146819    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
146820    +drop
146821    +H11
146822    +H12
146823    +H13
146824    +H14
146825    +H15
146826    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
146827    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
146828     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
146829     quit;
146830     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
146831     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
146832     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
146833     retain ID 2 Node "Neural34";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural34";
146834     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
146835     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1140 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1140 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146836     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
146837     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146838     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1140 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1140 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146839     proc sort data=EMWS8.Neural34_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural34_variableset out=_temp2(keep=NAME CREATOR);
146840     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146841     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.NEURAL34_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146842     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146843     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
146844     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
146845     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146846     proc contents data=EMWS8.Neural34_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural34_train out=_meta(keep=NAME) noprint;
146847     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
146848     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
146849     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146850     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146851     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146852     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
146853     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146854     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146855     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
146856     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
146856   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
The SAS System
 
NOTE: Table WORK._TEMPX created, with 516 rows and 5 columns.
 
146857     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146858     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
146859     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 516 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 516 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146860     filename _pref
146860   ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
146861     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
146862     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
146863    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146864    +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
146865    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
146866    +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
146867    +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
146868    +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
146869     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
146870     quit;
146871     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
146872     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
146873     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
146874     retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
146875     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
146876     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146877     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
146878     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146879     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146880     proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
146881     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146882     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146883     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146884     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
146885     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
146886     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146887     proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
146888     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
146889     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
146890     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146891     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146892     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146893     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
146894     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146895     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146896     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
146897     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
146897   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
146898     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146899     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
146900     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 520 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146901     filename _pref
146901   ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
146902     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
146903     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
146904    +
146905    +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
146906    +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
146906   !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
146907    +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
146908    +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
146909    +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
146910    +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
146911    +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
146912     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
146913     quit;
146914     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
146915     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
146916     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
146917     retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
146918     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
146919     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146920     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
146921     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146922     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146923     proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
146924     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146925     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146926     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146927     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
146928     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
146929     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146930     proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
146931     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146932     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
146933     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146934     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146935     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
146936     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
146937     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146938     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146939     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
146940     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
146940   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
146941     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146942     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
146943     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 559 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146944     filename _pref
146944   ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
146945     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
146946     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
146947    +
146948    +
146949    +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
146950    +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
146951    +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
146952    +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
146953    +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
146954    +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146955    +
146956    +
146957    +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
146958    +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
146959    +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
146960    +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
146961    +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
146962    +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146963    +
146964    +
146965    +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
146966    +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
146967    +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
146968    +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
146969    +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
146970    +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146971    +
146972    +
146973    +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
146974    +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
146975    +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
146976    +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
146977    +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
146978    +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146979    +
146980    +
146981    +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
146982    +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
146983    +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
146984    +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
146985    +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
146986    +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146987    +
146988    +
146989    +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
146990    +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
146991    +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
146992    +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
146993    +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
146994    +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
146995    +
146996    +
146997    +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
146998    +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
146999    +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
147000    +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
147001    +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
147002    +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147003    +
147004    +
147005    +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
147006    +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
147007    +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
147008    +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
147009    +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
147010    +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147011    +if
147012    +_FILTERNORM1 not in ( '.')
147013    + and
147014    +_FILTERNORM2 not in ( '.')
147015    + and
147016    +_FILTERNORM3 not in ( '.')
147017    + and
147018    +_FILTERNORM4 not in ( '.')
147019    + and
147020    +_FILTERNORM5 not in ( '.')
147021    + and
147022    +_FILTERNORM6 not in ( '.')
147023    + and
147024    +_FILTERNORM7 not in ( ' ')
147025    + and
147026    +_FILTERNORM8 not in ( ' ')
147027    +and
147028    +( Dt_Customer ne .)
147029    +and ( Income ne . and (Income<=107000))
147030    +and ( Kidhome ne .)
147031    +and ( MntFishProducts ne .)
147032    +and ( MntFruits ne .)
147033    +and ( MntGoldProds ne .)
147034    +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
147035    +and ( MntSweetProducts ne .)
147036    +and ( MntWines ne .)
147037    +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
147038    +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
147039    +and ( NumStorePurchases ne .)
147040    +and ( NumWebPurchases ne .)
147041    +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
147042    +and ( Recency ne .)
147043    +and ( Teenhome ne .)
147044    +and ( Year_Birth ne .)
147045    +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
147046    +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
147047    +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
147048    +end;
MPRINT(EM_DIAGRAM):   end;
147049    +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
147050    +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
147051     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
147052     quit;
147053     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
147054     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
147055     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
147056     retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
147057     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
147058     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147059     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
147060     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147061     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147062     proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
147063     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147064     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147065     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147066     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
147067     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
147068     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147069     proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
147070     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
147071     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
147072     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147073     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147074     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147075     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
147076     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147077     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147078     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
147079     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
147079   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
147080     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147081     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
147082     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 625 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147083     %macro varDept(fcmpdata=,id=);
147084     %global nobs&id scoreFlag&id;
147085     %let scoreFlag&id = 0;
147086     %if &id=1 or ^&fcmpStart %then %do;
147087     proc sort data=&fcmpdata out=_temp&id nodupkey;
147088     by NAME;
147089     where id=&id and LHS in( %let j=1;
147090     %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
147091     %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
147092     "&var" %let j = %eval(&j+1);
147093     %end;
147094     );
147095     run;
147096     %let dsid = %sysfunc(open(_temp&id));
147097     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
147098     %let dsid = %sysfunc(close(&dsid));
147099     %if &&nobs&id %then %do;
147100     %let scoreFlag&id = 1;
147101     %let fcmpStart = 1;
147102     %end;
147103     %else %let fcmpStart = 0;
147104     %end;
147105     %else %do;
147106     proc sort data=&fcmpdata out=_tempid;
147107     where id=&id;
147108     by LHS;
147109     run;
147110     %let dsid = %sysfunc(open(_tempid));
147111     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
147112     %let dsid = %sysfunc(close(&dsid));
147113     %if ^&&nobs&id %then %do;
147114     proc datasets lib=work nolist;
147115     delete _tempid;
147116     run;
147117     quit;
147118     %end;
147119     %else %do;
147120     data _tempAll;
147121     set %let j=%eval(&id-1);
147122     %do x=1 %to &j;
147123     %if &&nobs&x %then %do;
147124     _temp&x %end;
147125     %end;
147126     ;
147127     run;
147128     proc sql;
147129     create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
147129   ! work._tempid p2 where p.name=p2.lhs;
147130     quit;
147131     data _temp&id;
147132     set _temp&id;
147133     where LHS ne '' and NAME ne '' and Node ne '';
147134     run;
147135     proc datasets lib=work nolist;
147136     delete _tempAll;
147137     run;
147138     %let dsid = %sysfunc(open(_temp&id));
147139     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
147140     %let dsid = %sysfunc(close(&dsid));
147141     %if ^&&nobs&id %then %do;
147142     proc datasets lib=work nolist;
147143     delete _temp&id;
147144     run;
147145     quit;
147146     %end;
147147     %else %do;
147148     %let scoreFlag&id = 1;
147149     data _temp&id;
147150     set _temp&id;
147151     where LHS ne NAME and node ne '';
147152     run;
147153     %let dsid = %sysfunc(open(_temp&id));
147154     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
147155     %let dsid = %sysfunc(close(&dsid));
147156     %if ^&&nobs&id %then %do;
147157     proc datasets lib=work nolist;
147158     delete _temp&id;
147159     run;
147160     quit;
147161     %end;
147162     %else %do;
147163     proc sort data=_temp&id nodupkey;
147164     by LHS NAME;
147165     run;
147166     %end;
147167     %end;
147168     %end;
147169     %end;
147170     %mend varDept;
147171     %macro optCode(outdata=fcmpdata);
147172     %global fcmpStart;
147173     %let fcmpStart = 0;
147174     %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
147175     %let NumNodes=9;
147176     %do k=1 %to &NumNodes;
147177     %vardept(fcmpdata=&outdata, id=&k);
147178     %end;
147179     %mend optCode;
147180     %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 62 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 46 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 16 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 16 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 16 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 16 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 16 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 26 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 16 observations read from the data set WORK._TEMP2.
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 42 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
147181     filename _pref
147181   ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural42\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural42\EMPUBLISHSCORE.sas";
147182     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
147183     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural42\EMPUBLISHSCORE.sas.
147184    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
147185    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
147186    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
147187    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
147188    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
147189    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
147190    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
147191    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
147192    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
147193    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
147194    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
147195    +LENGTH _WARN_ $4
147196    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
147197    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
147198    +
147199    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
147200    +
147201    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
147202    +
147203    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
147204    +
147205    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
147206    +
147207    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
147208    +
147209    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
147210    +
147211    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
147212    +
147213    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
147214    +
147215    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
147216    +
147217    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
147218    +
147219    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
147220    +
147221    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
147222    +
147223    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
147224    +
147225    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
147226    +
147227    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
147228    +
147229    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
147230    +
147231    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
147232    +
147233    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
147234    +
147235    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
147236    +
147237    +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
147238    +
147239    +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
147240    +
147241    +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
147242    +
147243    +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
147244    +
147245    +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
147246    +
147247    +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
147248    +
147249    +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
147250    +
147251    +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
147252    +
147253    +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
147254    +
147255    +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
147256    +
147257    +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
147258    +
147259    +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
147260    +
147261    +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
147262    +
147263    +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
147264    +
147265    +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
147266    +
147267    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
147268    +
147269    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
147270    +
147271    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
147272    +
147273    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
147274    +
147275    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
147276    +
147277    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
147278    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
147279    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
147280    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
147281    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
147282    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
147283    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
147284    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
147285    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
147286    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
147287    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
147288    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
147289    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
147290    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
147291    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
147292    +end;
MPRINT(EM_DIAGRAM):   end;
147293    +else do;
MPRINT(EM_DIAGRAM):   else do;
147294    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
147295    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
147296    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
147297    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
147298    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
147299    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
147300    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
147301    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
147302    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
147303    +         end;
MPRINT(EM_DIAGRAM):   end;
147304    +         else do;
MPRINT(EM_DIAGRAM):   else do;
147305    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
147306    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
147307    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
147308    +            end;
MPRINT(EM_DIAGRAM):   end;
147309    +         end;
MPRINT(EM_DIAGRAM):   end;
147310    +      end;
MPRINT(EM_DIAGRAM):   end;
147311    +      else do;
MPRINT(EM_DIAGRAM):   else do;
147312    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
147313    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
147314    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
147315    +         end;
MPRINT(EM_DIAGRAM):   end;
147316    +      end;
MPRINT(EM_DIAGRAM):   end;
147317    +   end;
MPRINT(EM_DIAGRAM):   end;
147318    +   else do;
MPRINT(EM_DIAGRAM):   else do;
147319    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
147320    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
147321    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
147322    +      end;
MPRINT(EM_DIAGRAM):   end;
147323    +      else do;
MPRINT(EM_DIAGRAM):   else do;
147324    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
147325    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
147326    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
147327    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
147328    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
147329    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
147330    +         end;
MPRINT(EM_DIAGRAM):   end;
147331    +      end;
MPRINT(EM_DIAGRAM):   end;
147332    +   end;
MPRINT(EM_DIAGRAM):   end;
147333    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
147334    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
147335    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
147336    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
147337    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
147338    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
147339    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
147340    +   end;
MPRINT(EM_DIAGRAM):   end;
147341    +end;
MPRINT(EM_DIAGRAM):   end;
147342    +
147343    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147344    +*** Checking missing input Interval
147345    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
147346    +
147347    +IF NMISS(
147348    +   AcceptedCmpTotal ,
147349    +   Frq ,
147350    +   Income ,
147351    +   Mnt ,
147352    +   MntGoldProds ,
147353    +   MntMeatProducts ,
147354    +   NumCatalogPurchases ,
147355    +   NumDealsPurchases ,
147356    +   NumWebVisitsMonth ,
147357    +   RFMstat ,
147358    +   Recency ,
147359    +   Teenhome ,
147360    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
147361    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
147362    +
147363    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
147364    +END;
MPRINT(EM_DIAGRAM):   END;
147365    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147366    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
147367    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147368    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
147369    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
147370    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
147371    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
147372    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
147373    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
147374    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
147375    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
147376    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
147377    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
147378    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
147379    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
147380    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
147381    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
147382    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
147383    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
147384    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
147385    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
147386    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
147387    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
147388    +END;
MPRINT(EM_DIAGRAM):   END;
147389    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
147390    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
147391    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
147392    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
147393    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
147394    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
147395    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
147396    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
147397    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
147398    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
147399    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
147400    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
147401    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
147402    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
147403    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
147404    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
147405    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
147406    +   ELSE S_NumCatalogPurchases
147407    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
147408    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
147409    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
147410    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
147411    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
147412    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
147413    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
147414    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
147415    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
147416    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
147417    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
147418    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
147419    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
147420    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
147421    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
147422    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
147423    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
147424    +END;
MPRINT(EM_DIAGRAM):   END;
147425    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147426    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
147427    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147428    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147429    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
147430    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147431    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
147432    +   H1x1_1  =    -3.92905088817122 * S_AcceptedCmpTotal
147433    +          +    -4.76567955922662 * S_Frq  +    -3.20305851407308 * S_Income
147434    +          +     10.4290156082038 * S_Mnt  +     2.82139196372317 *
147435    +        S_MntGoldProds  +    -4.54749029525518 * S_MntMeatProducts
147436    +          +    -12.1201262560598 * S_NumCatalogPurchases
147437    +          +    -7.64265449386917 * S_NumDealsPurchases
147438    +          +     -0.8154661733691 * S_NumWebVisitsMonth
147439    +          +    -7.34275682075933 * S_RFMstat  +     3.14025498790893 *
147440    +        S_Recency  +     3.79010135100643 * S_Teenhome
147441    +          +    -1.18831354068466 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -3.92905088817122 * S_AcceptedCmpTotal + -4.76567955922662 *
S_Frq + -3.20305851407308 * S_Income + 10.4290156082038 * S_Mnt + 2.82139196372317 *
S_MntGoldProds + -4.54749029525518 * S_MntMeatProducts + -12.1201262560598 *
S_NumCatalogPurchases + -7.64265449386917 * S_NumDealsPurchases + -0.8154661733691 *
S_NumWebVisitsMonth + -7.34275682075933 * S_RFMstat + 3.14025498790893 * S_Recency +
3.79010135100643 * S_Teenhome + -1.18831354068466 * S_Year_Birth ;
147442    +   H1x1_2  =    -4.72019183577823 * S_AcceptedCmpTotal
147443    +          +     5.14902294151494 * S_Frq  +     -2.7967028726716 * S_Income
147444    +          +     7.90170532262596 * S_Mnt  +    -0.27896242131344 *
147445    +        S_MntGoldProds  +    -6.13177486713562 * S_MntMeatProducts
147446    +          +    -5.64377068696071 * S_NumCatalogPurchases
147447    +          +       1.315880732417 * S_NumDealsPurchases
147448    +          +    -7.12689902819995 * S_NumWebVisitsMonth
147449    +          +     -0.1333171344564 * S_RFMstat  +     8.57178329047956 *
147450    +        S_Recency  +     2.42655161118896 * S_Teenhome
147451    +          +     0.41845495922131 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -4.72019183577823 * S_AcceptedCmpTotal + 5.14902294151494 *
S_Frq + -2.7967028726716 * S_Income + 7.90170532262596 * S_Mnt + -0.27896242131344 *
S_MntGoldProds + -6.13177486713562 * S_MntMeatProducts + -5.64377068696071 *
S_NumCatalogPurchases + 1.315880732417 * S_NumDealsPurchases + -7.12689902819995 *
S_NumWebVisitsMonth + -0.1333171344564 * S_RFMstat + 8.57178329047956 * S_Recency +
2.42655161118896 * S_Teenhome + 0.41845495922131 * S_Year_Birth ;
147452    +   H1x1_3  =    -3.47660178529996 * S_AcceptedCmpTotal
147453    +          +     6.36750571377116 * S_Frq  +    -3.65638554203354 * S_Income
147454    +          +     5.03085244876136 * S_Mnt  +    -1.53184712146016 *
147455    +        S_MntGoldProds  +    -11.4803326240536 * S_MntMeatProducts
147456    +          +    -7.71653347900468 * S_NumCatalogPurchases
147457    +          +    -2.29382480020793 * S_NumDealsPurchases
147458    +          +    -3.92350308032578 * S_NumWebVisitsMonth
147459    +          +      0.1666173174602 * S_RFMstat  +      5.5545699438819 *
147460    +        S_Recency  +     1.88830044274756 * S_Teenhome
147461    +          +     0.36177301880441 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -3.47660178529996 * S_AcceptedCmpTotal + 6.36750571377116 *
S_Frq + -3.65638554203354 * S_Income + 5.03085244876136 * S_Mnt + -1.53184712146016 *
S_MntGoldProds + -11.4803326240536 * S_MntMeatProducts + -7.71653347900468 *
S_NumCatalogPurchases + -2.29382480020793 * S_NumDealsPurchases + -3.92350308032578 *
S_NumWebVisitsMonth + 0.1666173174602 * S_RFMstat + 5.5545699438819 * S_Recency +
1.88830044274756 * S_Teenhome + 0.36177301880441 * S_Year_Birth ;
147462    +   H1x1_4  =     3.46597508500309 * S_AcceptedCmpTotal
147463    +          +    -3.55913679518365 * S_Frq  +     -3.8279864380535 * S_Income
147464    +          +     4.37031319397754 * S_Mnt  +     0.25558899887189 *
147465    +        S_MntGoldProds  +     1.30937005137526 * S_MntMeatProducts
147466    +          +     0.50178849511862 * S_NumCatalogPurchases
147467    +          +     3.33915340676542 * S_NumDealsPurchases
147468    +          +     2.99171363234904 * S_NumWebVisitsMonth
147469    +          +    -1.10860117011224 * S_RFMstat  +     -5.2144291963152 *
147470    +        S_Recency  +     1.84778865722952 * S_Teenhome
147471    +          +     1.48264084751626 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.46597508500309 * S_AcceptedCmpTotal + -3.55913679518365 *
S_Frq + -3.8279864380535 * S_Income + 4.37031319397754 * S_Mnt + 0.25558899887189 *
S_MntGoldProds + 1.30937005137526 * S_MntMeatProducts + 0.50178849511862 *
S_NumCatalogPurchases + 3.33915340676542 * S_NumDealsPurchases + 2.99171363234904 *
S_NumWebVisitsMonth + -1.10860117011224 * S_RFMstat + -5.2144291963152 * S_Recency +
1.84778865722952 * S_Teenhome + 1.48264084751626 * S_Year_Birth ;
147472    +   H1x1_5  =    -3.28077802512331 * S_AcceptedCmpTotal
147473    +          +     3.26112701694144 * S_Frq  +    -3.51257256391539 * S_Income
147474    +          +     -13.277904245629 * S_Mnt  +    -0.08185099069039 *
147475    +        S_MntGoldProds  +      2.6349809613264 * S_MntMeatProducts
147476    +          +    -5.23430097842472 * S_NumCatalogPurchases
147477    +          +    -1.25644862473488 * S_NumDealsPurchases
147478    +          +     -3.0943337340276 * S_NumWebVisitsMonth
147479    +          +     0.96429102250453 * S_RFMstat  +     4.60373013139143 *
147480    +        S_Recency  +     1.52557456336148 * S_Teenhome
147481    +          +     0.00287578113165 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -3.28077802512331 * S_AcceptedCmpTotal + 3.26112701694144 *
S_Frq + -3.51257256391539 * S_Income + -13.277904245629 * S_Mnt + -0.08185099069039 *
S_MntGoldProds + 2.6349809613264 * S_MntMeatProducts + -5.23430097842472 *
S_NumCatalogPurchases + -1.25644862473488 * S_NumDealsPurchases + -3.0943337340276 *
S_NumWebVisitsMonth + 0.96429102250453 * S_RFMstat + 4.60373013139143 * S_Recency +
1.52557456336148 * S_Teenhome + 0.00287578113165 * S_Year_Birth ;
147482    +   H1x1_1  = H1x1_1  +     1.77432710413329 * Marital_StatusDivorced
147483    +          +     5.12496303990022 * Marital_StatusMarried
147484    +          +    -7.61364369696186 * Marital_StatusSingle
147485    +          +     2.78937374370395 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.77432710413329 * Marital_StatusDivorced +
5.12496303990022 * Marital_StatusMarried + -7.61364369696186 * Marital_StatusSingle +
2.78937374370395 * Marital_StatusTogether ;
147486    +   H1x1_2  = H1x1_2  +    -5.49070434381597 * Marital_StatusDivorced
147487    +          +     7.65332274940308 * Marital_StatusMarried
147488    +          +    -5.13332947688313 * Marital_StatusSingle
147489    +          +     8.25159601985572 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -5.49070434381597 * Marital_StatusDivorced +
7.65332274940308 * Marital_StatusMarried + -5.13332947688313 * Marital_StatusSingle +
8.25159601985572 * Marital_StatusTogether ;
147490    +   H1x1_3  = H1x1_3  +     1.57910552070948 * Marital_StatusDivorced
147491    +          +     7.95162959069432 * Marital_StatusMarried
147492    +          +    -6.10797604390061 * Marital_StatusSingle
147493    +          +     2.98577039618027 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 1.57910552070948 * Marital_StatusDivorced +
7.95162959069432 * Marital_StatusMarried + -6.10797604390061 * Marital_StatusSingle +
2.98577039618027 * Marital_StatusTogether ;
147494    +   H1x1_4  = H1x1_4  +     3.65411081783958 * Marital_StatusDivorced
147495    +          +     5.45977621823616 * Marital_StatusMarried
147496    +          +    -10.3527985391218 * Marital_StatusSingle
147497    +          +     4.66094015963389 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 3.65411081783958 * Marital_StatusDivorced +
5.45977621823616 * Marital_StatusMarried + -10.3527985391218 * Marital_StatusSingle +
4.66094015963389 * Marital_StatusTogether ;
147498    +   H1x1_5  = H1x1_5  +     1.57864743151562 * Marital_StatusDivorced
147499    +          +     8.15909630638185 * Marital_StatusMarried
147500    +          +    -5.88497367282032 * Marital_StatusSingle
147501    +          +     3.05474303626666 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 1.57864743151562 * Marital_StatusDivorced +
8.15909630638185 * Marital_StatusMarried + -5.88497367282032 * Marital_StatusSingle +
3.05474303626666 * Marital_StatusTogether ;
147502    +   H1x1_1  =    -1.55078746609233 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.55078746609233 + H1x1_1 ;
147503    +   H1x1_2  =     5.40474806112383 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 5.40474806112383 + H1x1_2 ;
147504    +   H1x1_3  =     11.2733164995662 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 11.2733164995662 + H1x1_3 ;
147505    +   H1x1_4  =    -7.78487963966384 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.78487963966384 + H1x1_4 ;
147506    +   H1x1_5  =      3.8784406873535 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 3.8784406873535 + H1x1_5 ;
147507    +   H1x1_6  = 0;
MPRINT(EM_DIAGRAM):   H1x1_6 = 0;
147508    +   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 , H1x1_4 , H1x1_5 , H1x1_6 );
147509    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
147510    +   H1x1_1  = EXP(H1x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_1 = EXP(H1x1_1 - _MAX_);
147511    +   _SUM_ = _SUM_ + H1x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_1 ;
147512    +   H1x1_2  = EXP(H1x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_2 = EXP(H1x1_2 - _MAX_);
147513    +   _SUM_ = _SUM_ + H1x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_2 ;
147514    +   H1x1_3  = EXP(H1x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_3 = EXP(H1x1_3 - _MAX_);
147515    +   _SUM_ = _SUM_ + H1x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_3 ;
147516    +   H1x1_4  = EXP(H1x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_4 = EXP(H1x1_4 - _MAX_);
147517    +   _SUM_ = _SUM_ + H1x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_4 ;
147518    +   H1x1_5  = EXP(H1x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_5 = EXP(H1x1_5 - _MAX_);
147519    +   _SUM_ = _SUM_ + H1x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_5 ;
147520    +   H1x1_6  = EXP(H1x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x1_6 = EXP(H1x1_6 - _MAX_);
147521    +   _SUM_ = _SUM_ + H1x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x1_6 ;
147522    +   H1x1_1  = H1x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 / _SUM_;
147523    +   H1x1_2  = H1x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 / _SUM_;
147524    +   H1x1_3  = H1x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 / _SUM_;
147525    +   H1x1_4  = H1x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 / _SUM_;
147526    +   H1x1_5  = H1x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 / _SUM_;
147527    +   H1x1_6  = H1x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 / _SUM_;
147528    +END;
MPRINT(EM_DIAGRAM):   END;
147529    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
147530    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
147531    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
147532    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
147533    +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
147534    +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
147535    +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
147536    +END;
MPRINT(EM_DIAGRAM):   END;
147537    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147538    +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
147539    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147540    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
147541    +   H1x2_1  =     0.07453146398445 * S_AcceptedCmpTotal
147542    +          +     0.17438368465616 * S_Frq  +     0.97121905855093 * S_Income
147543    +          +    -0.15757686261675 * S_Mnt  +     0.28678754855648 *
147544    +        S_MntGoldProds  +     2.03999655184815 * S_MntMeatProducts
147545    +          +      0.8747576336553 * S_NumCatalogPurchases
147546    +          +    -0.23551985234916 * S_NumDealsPurchases
147547    +          +     0.83901499225112 * S_NumWebVisitsMonth
147548    +          +     -0.7643570473353 * S_RFMstat  +      0.0823609346051 *
147549    +        S_Recency  +    -0.38340703993831 * S_Teenhome
147550    +          +     1.16037573405943 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.07453146398445 * S_AcceptedCmpTotal + 0.17438368465616 *
S_Frq + 0.97121905855093 * S_Income + -0.15757686261675 * S_Mnt + 0.28678754855648 *
S_MntGoldProds + 2.03999655184815 * S_MntMeatProducts + 0.8747576336553 *
S_NumCatalogPurchases + -0.23551985234916 * S_NumDealsPurchases + 0.83901499225112 *
S_NumWebVisitsMonth + -0.7643570473353 * S_RFMstat + 0.0823609346051 * S_Recency +
-0.38340703993831 * S_Teenhome + 1.16037573405943 * S_Year_Birth ;
147551    +   H1x2_2  =      -2.285017059996 * S_AcceptedCmpTotal
147552    +          +    -0.29646095672581 * S_Frq  +     -3.5024410668082 * S_Income
147553    +          +    -2.12091528193185 * S_Mnt  +    -1.48506012188621 *
147554    +        S_MntGoldProds  +    -1.38316375865608 * S_MntMeatProducts
147555    +          +    -0.99107054453387 * S_NumCatalogPurchases
147556    +          +    -0.68379823410573 * S_NumDealsPurchases
147557    +          +    -1.67939872609259 * S_NumWebVisitsMonth
147558    +          +     0.49106697429539 * S_RFMstat  +    -0.01117108974211 *
147559    +        S_Recency  +    -1.65033346710833 * S_Teenhome
147560    +          +    -1.03897054098621 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -2.285017059996 * S_AcceptedCmpTotal + -0.29646095672581 *
S_Frq + -3.5024410668082 * S_Income + -2.12091528193185 * S_Mnt + -1.48506012188621 *
S_MntGoldProds + -1.38316375865608 * S_MntMeatProducts + -0.99107054453387 *
S_NumCatalogPurchases + -0.68379823410573 * S_NumDealsPurchases + -1.67939872609259 *
S_NumWebVisitsMonth + 0.49106697429539 * S_RFMstat + -0.01117108974211 * S_Recency +
-1.65033346710833 * S_Teenhome + -1.03897054098621 * S_Year_Birth ;
147561    +   H1x2_3  =      2.9562672276462 * S_AcceptedCmpTotal
147562    +          +    -0.19531439441895 * S_Frq  +      0.3125078734463 * S_Income
147563    +          +     -1.6099267525002 * S_Mnt  +    -0.36573328507463 *
147564    +        S_MntGoldProds  +     -0.3392853565114 * S_MntMeatProducts
147565    +          +      1.4506330104932 * S_NumCatalogPurchases
147566    +          +     0.20085283861849 * S_NumDealsPurchases
147567    +          +     2.37974383924154 * S_NumWebVisitsMonth
147568    +          +     -0.1106906484364 * S_RFMstat  +    -3.36701384866793 *
147569    +        S_Recency  +     0.60726269989058 * S_Teenhome
147570    +          +     0.51474814816173 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 2.9562672276462 * S_AcceptedCmpTotal + -0.19531439441895 *
S_Frq + 0.3125078734463 * S_Income + -1.6099267525002 * S_Mnt + -0.36573328507463 *
S_MntGoldProds + -0.3392853565114 * S_MntMeatProducts + 1.4506330104932 *
S_NumCatalogPurchases + 0.20085283861849 * S_NumDealsPurchases + 2.37974383924154 *
S_NumWebVisitsMonth + -0.1106906484364 * S_RFMstat + -3.36701384866793 * S_Recency +
0.60726269989058 * S_Teenhome + 0.51474814816173 * S_Year_Birth ;
147571    +   H1x2_4  =    -3.19375607611292 * S_AcceptedCmpTotal
147572    +          +    -1.28391627024222 * S_Frq  +     1.20886875907222 * S_Income
147573    +          +     0.33241907162962 * S_Mnt  +     0.81131852742978 *
147574    +        S_MntGoldProds  +     0.66955477854362 * S_MntMeatProducts
147575    +          +    -0.79952426911069 * S_NumCatalogPurchases
147576    +          +    -0.70571099772216 * S_NumDealsPurchases
147577    +          +    -0.32158728049114 * S_NumWebVisitsMonth
147578    +          +    -0.83126265863782 * S_RFMstat  +     1.49830148501327 *
147579    +        S_Recency  +     2.29389047813725 * S_Teenhome
147580    +          +     0.04615513391624 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -3.19375607611292 * S_AcceptedCmpTotal + -1.28391627024222 *
S_Frq + 1.20886875907222 * S_Income + 0.33241907162962 * S_Mnt + 0.81131852742978 *
S_MntGoldProds + 0.66955477854362 * S_MntMeatProducts + -0.79952426911069 *
S_NumCatalogPurchases + -0.70571099772216 * S_NumDealsPurchases + -0.32158728049114 *
S_NumWebVisitsMonth + -0.83126265863782 * S_RFMstat + 1.49830148501327 * S_Recency +
2.29389047813725 * S_Teenhome + 0.04615513391624 * S_Year_Birth ;
147581    +   H1x2_5  =     -0.6002425930451 * S_AcceptedCmpTotal
147582    +          +    -0.86762771301251 * S_Frq  +    -0.57793933969656 * S_Income
147583    +          +     0.41975808190408 * S_Mnt  +    -0.13242897225011 *
147584    +        S_MntGoldProds  +    -1.44402585881872 * S_MntMeatProducts
147585    +          +    -0.41491605544255 * S_NumCatalogPurchases
147586    +          +     0.49374983047507 * S_NumDealsPurchases
147587    +          +    -1.38692718220359 * S_NumWebVisitsMonth
147588    +          +    -0.07580803465143 * S_RFMstat  +      0.4152505934779 *
147589    +        S_Recency  +     1.29605991841828 * S_Teenhome
147590    +          +     2.17160180088465 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.6002425930451 * S_AcceptedCmpTotal + -0.86762771301251 *
S_Frq + -0.57793933969656 * S_Income + 0.41975808190408 * S_Mnt + -0.13242897225011 *
S_MntGoldProds + -1.44402585881872 * S_MntMeatProducts + -0.41491605544255 *
S_NumCatalogPurchases + 0.49374983047507 * S_NumDealsPurchases + -1.38692718220359 *
S_NumWebVisitsMonth + -0.07580803465143 * S_RFMstat + 0.4152505934779 * S_Recency +
1.29605991841828 * S_Teenhome + 2.17160180088465 * S_Year_Birth ;
147591    +   H1x2_1  = H1x2_1  +     0.77674448865903 * Marital_StatusDivorced
147592    +          +    -1.29227303709115 * Marital_StatusMarried
147593    +          +     0.71446782242025 * Marital_StatusSingle
147594    +          +     0.55295867102727 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.77674448865903 * Marital_StatusDivorced +
-1.29227303709115 * Marital_StatusMarried + 0.71446782242025 * Marital_StatusSingle +
0.55295867102727 * Marital_StatusTogether ;
147595    +   H1x2_2  = H1x2_2  +     -0.1845223373129 * Marital_StatusDivorced
147596    +          +      2.0815223604364 * Marital_StatusMarried
147597    +          +     0.79462013188709 * Marital_StatusSingle
147598    +          +     0.20668835346022 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.1845223373129 * Marital_StatusDivorced +
2.0815223604364 * Marital_StatusMarried + 0.79462013188709 * Marital_StatusSingle +
0.20668835346022 * Marital_StatusTogether ;
147599    +   H1x2_3  = H1x2_3  +    -1.02774258915556 * Marital_StatusDivorced
147600    +          +     0.44769683627357 * Marital_StatusMarried
147601    +          +     1.09957357551209 * Marital_StatusSingle
147602    +          +     0.98246644516303 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.02774258915556 * Marital_StatusDivorced +
0.44769683627357 * Marital_StatusMarried + 1.09957357551209 * Marital_StatusSingle +
0.98246644516303 * Marital_StatusTogether ;
147603    +   H1x2_4  = H1x2_4  +     1.02578628033933 * Marital_StatusDivorced
147604    +          +    -0.71096069683657 * Marital_StatusMarried
147605    +          +    -0.46849808497503 * Marital_StatusSingle
147606    +          +    -0.50186472808298 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.02578628033933 * Marital_StatusDivorced +
-0.71096069683657 * Marital_StatusMarried + -0.46849808497503 * Marital_StatusSingle +
-0.50186472808298 * Marital_StatusTogether ;
147607    +   H1x2_5  = H1x2_5  +     0.83514340443964 * Marital_StatusDivorced
147608    +          +     0.21000014809177 * Marital_StatusMarried
147609    +          +    -1.05959388759825 * Marital_StatusSingle
147610    +          +     -0.8202251717493 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 0.83514340443964 * Marital_StatusDivorced +
0.21000014809177 * Marital_StatusMarried + -1.05959388759825 * Marital_StatusSingle +
-0.8202251717493 * Marital_StatusTogether ;
147611    +   H1x2_1  =     0.66244588339698 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.66244588339698 + H1x2_1 ;
147612    +   H1x2_2  =     0.36306484617725 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 0.36306484617725 + H1x2_2 ;
147613    +   H1x2_3  =     0.00299288434405 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 0.00299288434405 + H1x2_3 ;
147614    +   H1x2_4  =     0.32206403734945 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 0.32206403734945 + H1x2_4 ;
147615    +   H1x2_5  =     0.48514364636978 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.48514364636978 + H1x2_5 ;
147616    +   H1x2_6  = 0;
MPRINT(EM_DIAGRAM):   H1x2_6 = 0;
147617    +   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 , H1x2_4 , H1x2_5 , H1x2_6 );
147618    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
147619    +   H1x2_1  = EXP(H1x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_1 = EXP(H1x2_1 - _MAX_);
147620    +   _SUM_ = _SUM_ + H1x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_1 ;
147621    +   H1x2_2  = EXP(H1x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_2 = EXP(H1x2_2 - _MAX_);
147622    +   _SUM_ = _SUM_ + H1x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_2 ;
147623    +   H1x2_3  = EXP(H1x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_3 = EXP(H1x2_3 - _MAX_);
147624    +   _SUM_ = _SUM_ + H1x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_3 ;
147625    +   H1x2_4  = EXP(H1x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_4 = EXP(H1x2_4 - _MAX_);
147626    +   _SUM_ = _SUM_ + H1x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_4 ;
147627    +   H1x2_5  = EXP(H1x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_5 = EXP(H1x2_5 - _MAX_);
147628    +   _SUM_ = _SUM_ + H1x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_5 ;
147629    +   H1x2_6  = EXP(H1x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H1x2_6 = EXP(H1x2_6 - _MAX_);
147630    +   _SUM_ = _SUM_ + H1x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H1x2_6 ;
147631    +   H1x2_1  = H1x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 / _SUM_;
147632    +   H1x2_2  = H1x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 / _SUM_;
147633    +   H1x2_3  = H1x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 / _SUM_;
147634    +   H1x2_4  = H1x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 / _SUM_;
147635    +   H1x2_5  = H1x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 / _SUM_;
147636    +   H1x2_6  = H1x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 / _SUM_;
147637    +END;
MPRINT(EM_DIAGRAM):   END;
147638    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
147639    +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
147640    +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
147641    +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
147642    +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
147643    +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
147644    +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
147645    +END;
MPRINT(EM_DIAGRAM):   END;
147646    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147647    +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
147648    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147649    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
147650    +   H2x1_1  =     5.34062678932931 * H1x1_1  +     7.71604112891627 * H1x1_2
147651    +          +     7.54377937186103 * H1x1_3  +    -5.90943850663966 * H1x1_4
147652    +          +    -6.06522890475814 * H1x1_5  +    -7.94470945127082 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 5.34062678932931 * H1x1_1 + 7.71604112891627 * H1x1_2 +
7.54377937186103 * H1x1_3 + -5.90943850663966 * H1x1_4 + -6.06522890475814 * H1x1_5 +
-7.94470945127082 * H1x1_6 ;
147653    +   H2x1_2  =      1.1479485803131 * H1x1_1  +      1.4482835893576 * H1x1_2
147654    +          +    -0.15220644394866 * H1x1_3  +    -1.30000676790854 * H1x1_4
147655    +          +    -0.49333138568117 * H1x1_5  +    -1.96124154717115 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.1479485803131 * H1x1_1 + 1.4482835893576 * H1x1_2 +
-0.15220644394866 * H1x1_3 + -1.30000676790854 * H1x1_4 + -0.49333138568117 * H1x1_5 +
-1.96124154717115 * H1x1_6 ;
147656    +   H2x1_3  =     2.12915623251937 * H1x1_1  +     4.39530013559682 * H1x1_2
147657    +          +     3.38050961443392 * H1x1_3  +    -5.12182301645649 * H1x1_4
147658    +          +    -3.74697079524831 * H1x1_5  +    -5.26174801543685 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 2.12915623251937 * H1x1_1 + 4.39530013559682 * H1x1_2 +
3.38050961443392 * H1x1_3 + -5.12182301645649 * H1x1_4 + -3.74697079524831 * H1x1_5 +
-5.26174801543685 * H1x1_6 ;
147659    +   H2x1_4  =     0.54854810712303 * H1x1_1  +      1.6486650469525 * H1x1_2
147660    +          +     1.84563084742932 * H1x1_3  +    -2.43710509923951 * H1x1_4
147661    +          +     0.03038093596976 * H1x1_5  +    -1.34566786751269 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = 0.54854810712303 * H1x1_1 + 1.6486650469525 * H1x1_2 +
1.84563084742932 * H1x1_3 + -2.43710509923951 * H1x1_4 + 0.03038093596976 * H1x1_5 +
-1.34566786751269 * H1x1_6 ;
147662    +   H2x1_5  =     0.89845480530178 * H1x1_1  +     3.19967829294268 * H1x1_2
147663    +          +     3.58592569542093 * H1x1_3  +    -3.76417733693485 * H1x1_4
147664    +          +     -4.1568039640005 * H1x1_5  +    -4.42895004794637 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 0.89845480530178 * H1x1_1 + 3.19967829294268 * H1x1_2 +
3.58592569542093 * H1x1_3 + -3.76417733693485 * H1x1_4 + -4.1568039640005 * H1x1_5 +
-4.42895004794637 * H1x1_6 ;
147665    +   H2x1_1  = H2x1_1  +     0.44545310705069 * H1x2_1
147666    +          +     2.72471946580982 * H1x2_2  +    -1.42856846603531 * H1x2_3
147667    +          +     0.25357521888082 * H1x2_4  +    -1.25902268741411 * H1x2_5
147668    +          +    -1.70956044020454 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.44545310705069 * H1x2_1 + 2.72471946580982 * H1x2_2
+ -1.42856846603531 * H1x2_3 + 0.25357521888082 * H1x2_4 + -1.25902268741411 * H1x2_5 +
-1.70956044020454 * H1x2_6 ;
147669    +   H2x1_2  = H2x1_2  +      0.9465771639497 * H1x2_1
147670    +          +    -0.41110969777104 * H1x2_2  +    -0.92834816798625 * H1x2_3
147671    +          +     -1.7337755087443 * H1x2_4  +     -1.2522448489667 * H1x2_5
147672    +          +    -0.90111756793979 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.9465771639497 * H1x2_1 + -0.41110969777104 * H1x2_2
+ -0.92834816798625 * H1x2_3 + -1.7337755087443 * H1x2_4 + -1.2522448489667 * H1x2_5 +
-0.90111756793979 * H1x2_6 ;
147673    +   H2x1_3  = H2x1_3  +    -0.22355080983787 * H1x2_1
147674    +          +    -0.18918346120545 * H1x2_2  +    -1.50592518382263 * H1x2_3
147675    +          +    -1.00672320426732 * H1x2_4  +    -1.09510249463921 * H1x2_5
147676    +          +     0.83089577154267 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.22355080983787 * H1x2_1 + -0.18918346120545 *
H1x2_2 + -1.50592518382263 * H1x2_3 + -1.00672320426732 * H1x2_4 + -1.09510249463921 * H1x2_5
+ 0.83089577154267 * H1x2_6 ;
147677    +   H2x1_4  = H2x1_4  +    -0.74505363577487 * H1x2_1
147678    +          +     0.41544439689687 * H1x2_2  +    -0.11467073820729 * H1x2_3
147679    +          +    -2.16913690278917 * H1x2_4  +     1.07667011067144 * H1x2_5
147680    +          +    -0.21291665093094 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.74505363577487 * H1x2_1 + 0.41544439689687 * H1x2_2
+ -0.11467073820729 * H1x2_3 + -2.16913690278917 * H1x2_4 + 1.07667011067144 * H1x2_5 +
-0.21291665093094 * H1x2_6 ;
147681    +   H2x1_5  = H2x1_5  +    -0.22639397151159 * H1x2_1
147682    +          +     0.59976504799464 * H1x2_2  +    -1.19497833953318 * H1x2_3
147683    +          +     0.40681132265012 * H1x2_4  +    -1.18142813082248 * H1x2_5
147684    +          +     0.28627108561279 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.22639397151159 * H1x2_1 + 0.59976504799464 * H1x2_2
+ -1.19497833953318 * H1x2_3 + 0.40681132265012 * H1x2_4 + -1.18142813082248 * H1x2_5 +
0.28627108561279 * H1x2_6 ;
147685    +   H2x1_1  =     0.80837297417824 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 0.80837297417824 + H2x1_1 ;
147686    +   H2x1_2  =    -3.15918654233626 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -3.15918654233626 + H2x1_2 ;
147687    +   H2x1_3  =     -1.1148455701308 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = -1.1148455701308 + H2x1_3 ;
147688    +   H2x1_4  =    -2.43637271773179 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -2.43637271773179 + H2x1_4 ;
147689    +   H2x1_5  =     -1.5068240097035 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.5068240097035 + H2x1_5 ;
147690    +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
147691    +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
147692    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
147693    +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
147694    +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
147695    +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
147696    +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
147697    +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
147698    +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
147699    +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
147700    +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
147701    +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
147702    +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
147703    +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
147704    +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
147705    +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
147706    +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
147707    +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
147708    +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
147709    +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
147710    +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
147711    +END;
MPRINT(EM_DIAGRAM):   END;
147712    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
147713    +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
147714    +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
147715    +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
147716    +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
147717    +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
147718    +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
147719    +END;
MPRINT(EM_DIAGRAM):   END;
147720    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147721    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
147722    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147723    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
147724    +   P_DepVar1  =    -14.9408685199347 * H2x1_1  +     1.48309430635242 * H2x1_2
147725    +          +     -4.3496216751271 * H2x1_3  +     0.01239249943556 * H2x1_4
147726    +          +    -6.27169756239783 * H2x1_5  +     2.70843493957574 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -14.9408685199347 * H2x1_1 + 1.48309430635242 * H2x1_2 +
-4.3496216751271 * H2x1_3 + 0.01239249943556 * H2x1_4 + -6.27169756239783 * H2x1_5 +
2.70843493957574 * H2x1_6 ;
147727    +   P_DepVar1  =     5.67267561171469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 5.67267561171469 + P_DepVar1 ;
147728    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
147729    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
147730    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
147731    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
147732    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
147733    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
147734    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
147735    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
147736    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
147737    +END;
MPRINT(EM_DIAGRAM):   END;
147738    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
147739    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
147740    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
147741    +END;
MPRINT(EM_DIAGRAM):   END;
147742    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
147743    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
147744    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
147745    +END;
MPRINT(EM_DIAGRAM):   END;
147746    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147747    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
147748    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
147749    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
147750    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
147751    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
147752    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
147753    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
147754    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
147755    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
147756    +END;
MPRINT(EM_DIAGRAM):   END;
147757    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
147758    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
147759    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
147760    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
147761     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
147762     quit;
147763     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
147764     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
147765     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
147766     retain ID 2 Node "AutoNeural42";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural42";
147767     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
147768     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3812 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 3812 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147769     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
147770     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147771     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3812 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 3812 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147772     proc sort data=EMWS8.AutoNeural42_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural42_variableset out=_temp2(keep=NAME
CREATOR);
147773     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147774     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.AUTONEURAL42_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147775     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147776     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
147777     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
147778     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147779     proc contents data=EMWS8.AutoNeural42_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural42_train out=_meta(keep=NAME) noprint;
147780     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 71 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
147781     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
147782     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147783     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 71 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 71 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147784     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147785     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
147786     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147787     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 71 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 71 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147788     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
147789     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
147789   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 1780 rows and 5 columns.
 
147790     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147791     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
147792     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1780 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1780 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147793     filename _pref
147793   ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
147794     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
147795     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
147796    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
147797    +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
147798    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
147799    +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
147800    +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
147801    +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
147802     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
147803     quit;
147804     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
147805     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
147806     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
147807     retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
147808     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
147809     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147810     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
147811     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147812     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147813     proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
147814     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147815     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147816     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147817     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
147818     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
147819     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147820     proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
147821     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
147822     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
147823     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147824     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147825     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147826     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
147827     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147828     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147829     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
147830     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
147830   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
147831     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147832     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
147833     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1784 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147834     filename _pref
147834   ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
147835     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
147836     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
147837    +
147838    +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
147839    +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
147839   !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
147840    +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
147841    +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
147842    +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
147843    +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
147844    +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
147845     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
147846     quit;
147847     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
147848     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
147849     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
147850     retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
147851     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
147852     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147853     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
147854     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147855     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147856     proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
147857     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147858     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147859     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147860     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
147861     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
147862     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147863     proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
147864     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147865     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
147866     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147867     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147868     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147869     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
147870     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147871     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
147872     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
147873     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
147873   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
147874     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147875     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
147876     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1823 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147877     filename _pref
147877   ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
147878     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
147879     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
147880    +
147881    +
147882    +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
147883    +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
147884    +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
147885    +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
147886    +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
147887    +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147888    +
147889    +
147890    +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
147891    +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
147892    +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
147893    +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
147894    +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
147895    +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147896    +
147897    +
147898    +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
147899    +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
147900    +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
147901    +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
147902    +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
147903    +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147904    +
147905    +
147906    +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
147907    +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
147908    +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
147909    +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
147910    +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
147911    +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147912    +
147913    +
147914    +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
147915    +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
147916    +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
147917    +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
147918    +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
147919    +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147920    +
147921    +
147922    +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
147923    +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
147924    +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
147925    +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
147926    +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
147927    +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147928    +
147929    +
147930    +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
147931    +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
147932    +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
147933    +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
147934    +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
147935    +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147936    +
147937    +
147938    +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
147939    +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
147940    +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
147941    +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
147942    +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
147943    +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
147944    +if
147945    +_FILTERNORM1 not in ( '.')
147946    + and
147947    +_FILTERNORM2 not in ( '.')
147948    + and
147949    +_FILTERNORM3 not in ( '.')
147950    + and
147951    +_FILTERNORM4 not in ( '.')
147952    + and
147953    +_FILTERNORM5 not in ( '.')
147954    + and
147955    +_FILTERNORM6 not in ( '.')
147956    + and
147957    +_FILTERNORM7 not in ( ' ')
147958    + and
147959    +_FILTERNORM8 not in ( ' ')
147960    +and
147961    +( Dt_Customer ne .)
147962    +and ( Income ne . and (Income<=107000))
147963    +and ( Kidhome ne .)
147964    +and ( MntFishProducts ne .)
147965    +and ( MntFruits ne .)
147966    +and ( MntGoldProds ne .)
147967    +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
147968    +and ( MntSweetProducts ne .)
147969    +and ( MntWines ne .)
147970    +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
147971    +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
147972    +and ( NumStorePurchases ne .)
147973    +and ( NumWebPurchases ne .)
147974    +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
147975    +and ( Recency ne .)
147976    +and ( Teenhome ne .)
147977    +and ( Year_Birth ne .)
147978    +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
147979    +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
147980    +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
147981    +end;
MPRINT(EM_DIAGRAM):   end;
147982    +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
147983    +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
147984     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
147985     quit;
147986     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
147987     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
147988     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
147989     retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
147990     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
147991     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147992     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
147993     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147994     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147995     proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
147996     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
147997     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
147998     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
147999     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
148000     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
148001     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148002     proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
148003     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
148004     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
148005     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148006     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148007     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148008     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
148009     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148010     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
148011     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
148012     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
148012   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
148013     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148014     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
148015     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1889 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148016     %macro varDept(fcmpdata=,id=);
148017     %global nobs&id scoreFlag&id;
148018     %let scoreFlag&id = 0;
148019     %if &id=1 or ^&fcmpStart %then %do;
148020     proc sort data=&fcmpdata out=_temp&id nodupkey;
148021     by NAME;
148022     where id=&id and LHS in( %let j=1;
148023     %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
148024     %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
148025     "&var" %let j = %eval(&j+1);
148026     %end;
148027     );
148028     run;
148029     %let dsid = %sysfunc(open(_temp&id));
148030     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148031     %let dsid = %sysfunc(close(&dsid));
148032     %if &&nobs&id %then %do;
148033     %let scoreFlag&id = 1;
148034     %let fcmpStart = 1;
148035     %end;
148036     %else %let fcmpStart = 0;
148037     %end;
148038     %else %do;
148039     proc sort data=&fcmpdata out=_tempid;
148040     where id=&id;
148041     by LHS;
148042     run;
148043     %let dsid = %sysfunc(open(_tempid));
148044     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148045     %let dsid = %sysfunc(close(&dsid));
148046     %if ^&&nobs&id %then %do;
148047     proc datasets lib=work nolist;
148048     delete _tempid;
148049     run;
148050     quit;
148051     %end;
148052     %else %do;
148053     data _tempAll;
148054     set %let j=%eval(&id-1);
148055     %do x=1 %to &j;
148056     %if &&nobs&x %then %do;
148057     _temp&x %end;
148058     %end;
148059     ;
148060     run;
148061     proc sql;
148062     create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
148062   ! work._tempid p2 where p.name=p2.lhs;
148063     quit;
148064     data _temp&id;
148065     set _temp&id;
148066     where LHS ne '' and NAME ne '' and Node ne '';
148067     run;
148068     proc datasets lib=work nolist;
148069     delete _tempAll;
148070     run;
148071     %let dsid = %sysfunc(open(_temp&id));
148072     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148073     %let dsid = %sysfunc(close(&dsid));
148074     %if ^&&nobs&id %then %do;
148075     proc datasets lib=work nolist;
148076     delete _temp&id;
148077     run;
148078     quit;
148079     %end;
148080     %else %do;
148081     %let scoreFlag&id = 1;
148082     data _temp&id;
148083     set _temp&id;
148084     where LHS ne NAME and node ne '';
148085     run;
148086     %let dsid = %sysfunc(open(_temp&id));
148087     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148088     %let dsid = %sysfunc(close(&dsid));
148089     %if ^&&nobs&id %then %do;
148090     proc datasets lib=work nolist;
148091     delete _temp&id;
148092     run;
148093     quit;
148094     %end;
148095     %else %do;
148096     proc sort data=_temp&id nodupkey;
148097     by LHS NAME;
148098     run;
148099     %end;
148100     %end;
148101     %end;
148102     %end;
148103     %mend varDept;
148104     %macro optCode(outdata=fcmpdata);
148105     %global fcmpStart;
148106     %let fcmpStart = 0;
148107     %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
148108     %let NumNodes=9;
148109     %do k=1 %to &NumNodes;
148110     %vardept(fcmpdata=&outdata, id=&k);
148111     %end;
148112     %mend optCode;
148113     %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 116 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 82 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 34 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 34 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 34 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 26 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 60 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
148114     filename _pref
148114   ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural46\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural46\EMPUBLISHSCORE.sas";
148115     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
148116     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural46\EMPUBLISHSCORE.sas.
148117    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
148118    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
148119    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
148120    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
148121    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
148122    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
148123    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
148124    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
148125    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
148126    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
148127    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
148128    +LENGTH _WARN_ $4
148129    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
148130    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
148131    +
148132    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
148133    +
148134    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
148135    +
148136    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
148137    +
148138    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
148139    +
148140    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
148141    +
148142    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
148143    +
148144    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
148145    +
148146    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
148147    +
148148    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
148149    +
148150    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
148151    +
148152    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
148153    +
148154    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
148155    +
148156    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
148157    +
148158    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
148159    +
148160    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
148161    +
148162    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
148163    +
148164    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
148165    +
148166    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
148167    +
148168    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
148169    +
148170    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
148171    +
148172    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
148173    +
148174    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
148175    +
148176    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
148177    +
148178    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
148179    +
148180    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
148181    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
148182    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
148183    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
148184    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
148185    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
148186    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
148187    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
148188    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
148189    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
148190    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
148191    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
148192    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
148193    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
148194    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
148195    +end;
MPRINT(EM_DIAGRAM):   end;
148196    +else do;
MPRINT(EM_DIAGRAM):   else do;
148197    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
148198    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
148199    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
148200    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
148201    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
148202    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
148203    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
148204    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
148205    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
148206    +         end;
MPRINT(EM_DIAGRAM):   end;
148207    +         else do;
MPRINT(EM_DIAGRAM):   else do;
148208    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
148209    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
148210    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
148211    +            end;
MPRINT(EM_DIAGRAM):   end;
148212    +         end;
MPRINT(EM_DIAGRAM):   end;
148213    +      end;
MPRINT(EM_DIAGRAM):   end;
148214    +      else do;
MPRINT(EM_DIAGRAM):   else do;
148215    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
148216    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
148217    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
148218    +         end;
MPRINT(EM_DIAGRAM):   end;
148219    +      end;
MPRINT(EM_DIAGRAM):   end;
148220    +   end;
MPRINT(EM_DIAGRAM):   end;
148221    +   else do;
MPRINT(EM_DIAGRAM):   else do;
148222    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
148223    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
148224    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
148225    +      end;
MPRINT(EM_DIAGRAM):   end;
148226    +      else do;
MPRINT(EM_DIAGRAM):   else do;
148227    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
148228    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
148229    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
148230    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
148231    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
148232    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
148233    +         end;
MPRINT(EM_DIAGRAM):   end;
148234    +      end;
MPRINT(EM_DIAGRAM):   end;
148235    +   end;
MPRINT(EM_DIAGRAM):   end;
148236    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
148237    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
148238    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
148239    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
148240    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
148241    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
148242    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
148243    +   end;
MPRINT(EM_DIAGRAM):   end;
148244    +end;
MPRINT(EM_DIAGRAM):   end;
148245    +
148246    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148247    +*** Checking missing input Interval
148248    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
148249    +
148250    +IF NMISS(
148251    +   AcceptedCmpTotal ,
148252    +   Frq ,
148253    +   Income ,
148254    +   Mnt ,
148255    +   MntGoldProds ,
148256    +   MntMeatProducts ,
148257    +   NumCatalogPurchases ,
148258    +   NumDealsPurchases ,
148259    +   NumWebVisitsMonth ,
148260    +   RFMstat ,
148261    +   Recency ,
148262    +   Teenhome ,
148263    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , RFMstat ,
Recency , Teenhome , Year_Birth ) THEN DO;
148264    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
148265    +
148266    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
148267    +END;
MPRINT(EM_DIAGRAM):   END;
148268    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148269    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
148270    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148271    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
148272    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
148273    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
148274    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
148275    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
148276    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
148277    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
148278    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
148279    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
148280    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
148281    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
148282    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
148283    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
148284    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
148285    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
148286    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
148287    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
148288    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
148289    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
148290    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
148291    +END;
MPRINT(EM_DIAGRAM):   END;
148292    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
148293    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
148294    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
148295    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
148296    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
148297    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
148298    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
148299    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
148300    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
148301    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
148302    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
148303    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
148304    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
148305    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
148306    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
148307    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
148308    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
148309    +   ELSE S_NumCatalogPurchases
148310    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
148311    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
148312    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
148313    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
148314    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
148315    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
148316    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
148317    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
148318    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
148319    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
148320    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
148321    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
148322    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
148323    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
148324    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
148325    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
148326    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
148327    +END;
MPRINT(EM_DIAGRAM):   END;
148328    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148329    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
148330    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148331    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148332    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
148333    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148334    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
148335    +   H1x1_1  =    -0.10743056275421 * S_AcceptedCmpTotal
148336    +          +     0.03409888241348 * S_Frq  +    -0.00055974837068 * S_Income
148337    +          +       0.134341851096 * S_Mnt  +    -0.00857864409164 *
148338    +        S_MntGoldProds  +      0.4895390061827 * S_MntMeatProducts
148339    +          +    -0.01423451356563 * S_NumCatalogPurchases
148340    +          +     0.06006350655487 * S_NumDealsPurchases
148341    +          +    -0.20885493964335 * S_NumWebVisitsMonth
148342    +          +    -0.01173202621744 * S_RFMstat  +     0.25819909101611 *
148343    +        S_Recency  +    -0.03326479668652 * S_Teenhome
148344    +          +     0.03371888312814 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.10743056275421 * S_AcceptedCmpTotal + 0.03409888241348 *
S_Frq + -0.00055974837068 * S_Income + 0.134341851096 * S_Mnt + -0.00857864409164 *
S_MntGoldProds + 0.4895390061827 * S_MntMeatProducts + -0.01423451356563 *
S_NumCatalogPurchases + 0.06006350655487 * S_NumDealsPurchases + -0.20885493964335 *
S_NumWebVisitsMonth + -0.01173202621744 * S_RFMstat + 0.25819909101611 * S_Recency +
-0.03326479668652 * S_Teenhome + 0.03371888312814 * S_Year_Birth ;
148345    +   H1x1_2  =    -0.03078478134042 * S_AcceptedCmpTotal
148346    +          +    -0.12351766308972 * S_Frq  +     -0.1943406821731 * S_Income
148347    +          +    -0.36027326127049 * S_Mnt  +     0.05117597516658 *
148348    +        S_MntGoldProds  +     0.07931191953223 * S_MntMeatProducts
148349    +          +    -0.03109266966794 * S_NumCatalogPurchases
148350    +          +     0.05524435494328 * S_NumDealsPurchases
148351    +          +     -0.0105802056898 * S_NumWebVisitsMonth
148352    +          +     0.01793771049002 * S_RFMstat  +      0.0322880575902 *
148353    +        S_Recency  +       0.195010707702 * S_Teenhome
148354    +          +     -0.0351563039686 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.03078478134042 * S_AcceptedCmpTotal + -0.12351766308972 *
S_Frq + -0.1943406821731 * S_Income + -0.36027326127049 * S_Mnt + 0.05117597516658 *
S_MntGoldProds + 0.07931191953223 * S_MntMeatProducts + -0.03109266966794 *
S_NumCatalogPurchases + 0.05524435494328 * S_NumDealsPurchases + -0.0105802056898 *
S_NumWebVisitsMonth + 0.01793771049002 * S_RFMstat + 0.0322880575902 * S_Recency +
0.195010707702 * S_Teenhome + -0.0351563039686 * S_Year_Birth ;
148355    +   H1x1_3  =     0.23990987498311 * S_AcceptedCmpTotal
148356    +          +     0.04052411845464 * S_Frq  +    -0.00302331972067 * S_Income
148357    +          +     0.39981531247427 * S_Mnt  +     0.01433011413993 *
148358    +        S_MntGoldProds  +    -0.19955782687502 * S_MntMeatProducts
148359    +          +     0.07777995109144 * S_NumCatalogPurchases
148360    +          +     0.08683394019767 * S_NumDealsPurchases
148361    +          +     0.27328366433987 * S_NumWebVisitsMonth
148362    +          +      0.0263930429288 * S_RFMstat  +    -0.38900647412136 *
148363    +        S_Recency  +      0.0640153287908 * S_Teenhome
148364    +          +     0.07587467002123 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.23990987498311 * S_AcceptedCmpTotal + 0.04052411845464 *
S_Frq + -0.00302331972067 * S_Income + 0.39981531247427 * S_Mnt + 0.01433011413993 *
S_MntGoldProds + -0.19955782687502 * S_MntMeatProducts + 0.07777995109144 *
S_NumCatalogPurchases + 0.08683394019767 * S_NumDealsPurchases + 0.27328366433987 *
S_NumWebVisitsMonth + 0.0263930429288 * S_RFMstat + -0.38900647412136 * S_Recency +
0.0640153287908 * S_Teenhome + 0.07587467002123 * S_Year_Birth ;
148365    +   H1x1_1  = H1x1_1  +    -0.05820552608682 * Marital_StatusDivorced
148366    +          +    -0.02695167777393 * Marital_StatusMarried
148367    +          +    -0.00733864032764 * Marital_StatusSingle
148368    +          +     0.03838747494293 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.05820552608682 * Marital_StatusDivorced +
-0.02695167777393 * Marital_StatusMarried + -0.00733864032764 * Marital_StatusSingle +
0.03838747494293 * Marital_StatusTogether ;
148369    +   H1x1_2  = H1x1_2  +    -0.00853551919442 * Marital_StatusDivorced
148370    +          +     0.42249671001117 * Marital_StatusMarried
148371    +          +    -0.18515416581955 * Marital_StatusSingle
148372    +          +     0.25783473520826 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -0.00853551919442 * Marital_StatusDivorced +
0.42249671001117 * Marital_StatusMarried + -0.18515416581955 * Marital_StatusSingle +
0.25783473520826 * Marital_StatusTogether ;
148373    +   H1x1_3  = H1x1_3  +      0.4175036565076 * Marital_StatusDivorced
148374    +          +     0.45127582934777 * Marital_StatusMarried
148375    +          +       0.358157766485 * Marital_StatusSingle
148376    +          +     0.42627185625497 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.4175036565076 * Marital_StatusDivorced +
0.45127582934777 * Marital_StatusMarried + 0.358157766485 * Marital_StatusSingle +
0.42627185625497 * Marital_StatusTogether ;
148377    +   H1x1_1  =    -1.23226472635566 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.23226472635566 + H1x1_1 ;
148378    +   H1x1_2  =      2.2313165328971 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.2313165328971 + H1x1_2 ;
148379    +   H1x1_3  =     0.09755782095138 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.09755782095138 + H1x1_3 ;
148380    +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
148381    +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
148382    +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
148383    +END;
MPRINT(EM_DIAGRAM):   END;
148384    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
148385    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
148386    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
148387    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
148388    +END;
MPRINT(EM_DIAGRAM):   END;
148389    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148390    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
148391    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148392    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
148393    +   P_DepVar1  =     -68.075125441494 * H1x1_1  +    -72.7630361672259 * H1x1_2
148394    +          +    -71.6251597703755 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -68.075125441494 * H1x1_1 + -72.7630361672259 * H1x1_2 +
-71.6251597703755 * H1x1_3 ;
148395    +   P_DepVar1  =    -25.6080957302662 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -25.6080957302662 + P_DepVar1 ;
148396    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
148397    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
148398    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
148399    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
148400    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
148401    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
148402    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
148403    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
148404    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
148405    +END;
MPRINT(EM_DIAGRAM):   END;
148406    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
148407    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
148408    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
148409    +END;
MPRINT(EM_DIAGRAM):   END;
148410    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
148411    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
148412    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
148413    +END;
MPRINT(EM_DIAGRAM):   END;
148414    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148415    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
148416    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
148417    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
148418    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
148419    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
148420    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
148421    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
148422    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
148423    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
148424    +END;
MPRINT(EM_DIAGRAM):   END;
148425    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
148426    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
148427    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
148428    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
148429     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
148430     quit;
148431     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
148432     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
148433     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
148434     retain ID 2 Node "AutoNeural46";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural46";
148435     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
148436     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 956 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 956 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148437     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
148438     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148439     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 956 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 956 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148440     proc sort data=EMWS8.AutoNeural46_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural46_variableset out=_temp2(keep=NAME
CREATOR);
148441     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148442     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.AUTONEURAL46_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148443     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148444     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
148445     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
148446     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148447     proc contents data=EMWS8.AutoNeural46_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural46_train out=_meta(keep=NAME) noprint;
148448     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 56 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
148449     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
148450     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148451     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 56 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148452     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148453     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
148454     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148455     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 56 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 56 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148456     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
148457     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
148457   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 496 rows and 5 columns.
 
148458     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148459     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
148460     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 496 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 496 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148461     filename _pref
148461   ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
148462     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
148463     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
148464    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
148465    +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
148466    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
148467    +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
148468    +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
148469    +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
148470     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
148471     quit;
148472     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
148473     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
148474     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
148475     retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
148476     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
148477     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148478     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
148479     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148480     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
148481     proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
148482     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148483     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148484     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148485     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
148486     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
148487     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148488     proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
148489     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
148490     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
148491     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148492     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148493     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148494     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
148495     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148496     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148497     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
148498     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
148498   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
148499     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148500     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
148501     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 500 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148502     filename _pref
148502   ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
148503     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
148504     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
148505    +
148506    +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
148507    +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
148507   !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
148508    +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
148509    +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
148510    +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
148511    +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
148512    +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
148513     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
148514     quit;
148515     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
148516     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
148517     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
148518     retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
148519     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
148520     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148521     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
148522     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148523     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148524     proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
148525     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148526     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
148527     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148528     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
148529     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
148530     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148531     proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
148532     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148533     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
148534     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148535     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
148536     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148537     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
148538     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148539     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148540     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
148541     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
148541   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
148542     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148543     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
148544     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 539 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148545     filename _pref
148545   ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
148546     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
148547     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
148548    +
148549    +
148550    +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
148551    +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
148552    +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
148553    +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
148554    +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
148555    +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148556    +
148557    +
148558    +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
148559    +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
148560    +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
148561    +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
148562    +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
148563    +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148564    +
148565    +
148566    +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
148567    +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
148568    +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
148569    +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
148570    +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
148571    +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148572    +
148573    +
148574    +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
148575    +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
148576    +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
148577    +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
148578    +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
148579    +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148580    +
148581    +
148582    +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
148583    +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
148584    +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
148585    +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
148586    +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
148587    +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148588    +
148589    +
148590    +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
148591    +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
148592    +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
148593    +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
148594    +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
148595    +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148596    +
148597    +
148598    +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
148599    +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
148600    +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
148601    +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
148602    +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
148603    +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148604    +
148605    +
148606    +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
148607    +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
148608    +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
148609    +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
148610    +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
148611    +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
148612    +if
148613    +_FILTERNORM1 not in ( '.')
148614    + and
148615    +_FILTERNORM2 not in ( '.')
148616    + and
148617    +_FILTERNORM3 not in ( '.')
148618    + and
148619    +_FILTERNORM4 not in ( '.')
148620    + and
148621    +_FILTERNORM5 not in ( '.')
148622    + and
148623    +_FILTERNORM6 not in ( '.')
148624    + and
148625    +_FILTERNORM7 not in ( ' ')
148626    + and
148627    +_FILTERNORM8 not in ( ' ')
148628    +and
148629    +( Dt_Customer ne .)
148630    +and ( Income ne . and (Income<=107000))
148631    +and ( Kidhome ne .)
148632    +and ( MntFishProducts ne .)
148633    +and ( MntFruits ne .)
148634    +and ( MntGoldProds ne .)
148635    +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
148636    +and ( MntSweetProducts ne .)
148637    +and ( MntWines ne .)
148638    +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
148639    +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
148640    +and ( NumStorePurchases ne .)
148641    +and ( NumWebPurchases ne .)
148642    +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
148643    +and ( Recency ne .)
148644    +and ( Teenhome ne .)
148645    +and ( Year_Birth ne .)
148646    +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
148647    +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
148648    +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
148649    +end;
MPRINT(EM_DIAGRAM):   end;
148650    +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
148651    +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
148652     run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
148653     quit;
148654     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
148655     data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
148656     length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
148657     retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
148658     set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
148659     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148660     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
148661     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148662     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
148663     proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
148664     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148665     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148666     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148667     length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
148668     set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
148669     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148670     proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
148671     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
148672     proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
148673     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148674     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
148675     data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
148676     merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
148677     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
148678     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148679     proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
148680     create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
148680   ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
148681     quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148682     proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
148683     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 605 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
148684     %macro varDept(fcmpdata=,id=);
148685     %global nobs&id scoreFlag&id;
148686     %let scoreFlag&id = 0;
148687     %if &id=1 or ^&fcmpStart %then %do;
148688     proc sort data=&fcmpdata out=_temp&id nodupkey;
148689     by NAME;
148690     where id=&id and LHS in( %let j=1;
148691     %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
148692     %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
148693     "&var" %let j = %eval(&j+1);
148694     %end;
148695     );
148696     run;
148697     %let dsid = %sysfunc(open(_temp&id));
148698     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148699     %let dsid = %sysfunc(close(&dsid));
148700     %if &&nobs&id %then %do;
148701     %let scoreFlag&id = 1;
148702     %let fcmpStart = 1;
148703     %end;
148704     %else %let fcmpStart = 0;
148705     %end;
148706     %else %do;
148707     proc sort data=&fcmpdata out=_tempid;
148708     where id=&id;
148709     by LHS;
148710     run;
148711     %let dsid = %sysfunc(open(_tempid));
148712     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148713     %let dsid = %sysfunc(close(&dsid));
148714     %if ^&&nobs&id %then %do;
148715     proc datasets lib=work nolist;
148716     delete _tempid;
148717     run;
148718     quit;
148719     %end;
148720     %else %do;
148721     data _tempAll;
148722     set %let j=%eval(&id-1);
148723     %do x=1 %to &j;
148724     %if &&nobs&x %then %do;
148725     _temp&x %end;
148726     %end;
148727     ;
148728     run;
148729     proc sql;
148730     create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
148730   ! work._tempid p2 where p.name=p2.lhs;
148731     quit;
148732     data _temp&id;
148733     set _temp&id;
148734     where LHS ne '' and NAME ne '' and Node ne '';
148735     run;
148736     proc datasets lib=work nolist;
148737     delete _tempAll;
148738     run;
148739     %let dsid = %sysfunc(open(_temp&id));
148740     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148741     %let dsid = %sysfunc(close(&dsid));
148742     %if ^&&nobs&id %then %do;
148743     proc datasets lib=work nolist;
148744     delete _temp&id;
148745     run;
148746     quit;
148747     %end;
148748     %else %do;
148749     %let scoreFlag&id = 1;
148750     data _temp&id;
148751     set _temp&id;
148752     where LHS ne NAME and node ne '';
148753     run;
148754     %let dsid = %sysfunc(open(_temp&id));
148755     %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
148756     %let dsid = %sysfunc(close(&dsid));
148757     %if ^&&nobs&id %then %do;
148758     proc datasets lib=work nolist;
148759     delete _temp&id;
148760     run;
148761     quit;
148762     %end;
148763     %else %do;
148764     proc sort data=_temp&id nodupkey;
148765     by LHS NAME;
148766     run;
148767     %end;
148768     %end;
148769     %end;
148770     %end;
148771     %mend varDept;
148772     %macro optCode(outdata=fcmpdata);
148773     %global fcmpStart;
148774     %let fcmpStart = 0;
148775     %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
148776     %let NumNodes=9;
148777     %do k=1 %to &NumNodes;
148778     %vardept(fcmpdata=&outdata, id=&k);
148779     %end;
148780     %mend optCode;
148781     %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 71 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 52 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 19 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 19 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 19 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 26 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: There were 26 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 45 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
148782     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
148783     * Ensmbl10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing metadata for TRAIN data;
148784     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.ENSMBL10_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Ensmbl10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Ensmbl10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Ensmbl10_TRAIN out=WORK.M0SH0R2W noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SH0R2W;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SH0R2W(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SH0R2W;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SH0R2W;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M389L_ZQ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05S36D3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   set WORK.M389L_ZQ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural34_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural34_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Ensmbl10";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME in( "I_DepVar" "F_DepVar" "U_DepVar" "_WARN_" "P_DepVar1"
"P_DepVar0" "R_DepVar1" "R_DepVar0" ) then CREATOR="Ensmbl10";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
149104     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
149105     set EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMINFO;
149106     where DATA='Ensmbl10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Ensmbl10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
149107     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_EMINFO.
      WHERE (DATA='Ensmbl10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
149108     data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMINFO;
149109     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
149110     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
149111     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
149115     run;
149116     data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMINFO;
149117     set EMWS8.Ensmbl10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMINFO WORK.MODELTEMP_INFO;
149118     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149119     proc sort data = EMWS8.Ensmbl10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Ensmbl10_EMINFO NOTHREADS;
149120     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
149121     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149122     proc sort data = EMWS8.Neural34_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural34_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
149123     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
149124     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.NEURAL34_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149125     proc sort data = EMWS8.Ensmbl10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Ensmbl10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
149126     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
149127     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
149128     data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMINFO;
149129     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
149130     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
149131     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149132     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
149133     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
149134     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
149135     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.ENSMBL10_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS8.ENSMBL10_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21.10 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                21.10 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O186N8H6
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O186N8H6 new;
MPRINT(EM_DIAGRAM):   run;
149159     data EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMOUTFIT;
149160     set EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMOUTFIT;
149161     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
149162     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
149162   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
149163     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
149164     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL10_EMOUTFIT.
NOTE: The data set EMWS8.ENSMBL10_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
149165     proc sort data=EMWS8.Ensmbl10_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl10_EMREPORTFIT nothreads;
149166     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
149167     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL10_EMREPORTFIT.
NOTE: The data set EMWS8.ENSMBL10_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
149168     %let _EMwarndup = 0;
149169     %let _EMtargetdup =;
149170     %let _EMASEtargetdup =;
149171     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
149172     set EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMOUTFIT;
149173     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
149174     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
149175     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
149176     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
149177     end;
MPRINT(EM_DIAGRAM):   end;
149178     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL10_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149179     proc sort data=EMWS8.Neural34_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural34_CMeta_TRAIN out=WORK.SUBSETINMETA;
149180     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
149181     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set EMWS8.NEURAL34_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 44 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149182     proc sort data=EMWS8.Ensmbl10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Ensmbl10_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
149183     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
149184     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.ENSMBL10_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149185     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
149186     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
149187     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
149188     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 34 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 44 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
149189     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
149190     set EMWS8.Ensmbl10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_CMeta_TRAIN;
149191     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
149191   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
149192     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
149193     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
149194     set EMWS8.Ensmbl10_TRAIN(keep=
149195     F_DepVar
149196     I_DepVar
149197     P_DepVar0
149198     P_DepVar1
149199     R_DepVar0
149200     R_DepVar1
149201     U_DepVar
149202     _WARN_
149203     DepVar
149204     );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
149205     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: View EMWS8.ENSMBL10_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL34_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.ENSMBL10_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl10_1W57IU_ nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl10_1W57IU_;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl10_1W57IU_(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl10_1W57IU_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl10_1W57IU_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural34_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000315803 OVLMAX 0.9998878471 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
153471     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
153472     set EMWS8.Ensmbl10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_CMeta_TRAIN;
153473     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
153473   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
153474     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
153475     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
153476     set EMWS8.Ensmbl10_VALIDATE(keep=
153477     F_DepVar
153478     I_DepVar
153479     P_DepVar0
153480     P_DepVar1
153481     R_DepVar0
153482     R_DepVar1
153483     U_DepVar
153484     _WARN_
153485     DepVar
153486     );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
153487     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.META2_VALIDATE.
NOTE: View EMWS8.ENSMBL10_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.NEURAL34_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.ENSMBL10_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl10_29FV3KF nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl10_29FV3KF;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl10_29FV3KF(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMCLASSIFICATION WORK.Ensmbl10_29FV3KF;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl10_29FV3KF;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural34_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000315827 OVLMAX 0.9993884048 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
157762     %let _cn = %sysfunc(getoption(CENTER));
157763     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
157764     proc print data=EMWS8.Ensmbl10_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl10_EMREPORTFIT noobs label;
157765     var STAT LABEL TRAIN
157766     VALIDATE
157767     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
157768     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
157769     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
157770     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
157771     run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL10_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 44.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
157772     title10;
MPRINT(EM_DIAGRAM):   title10;
157773     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
157774     proc sort data=EMWS8.Ensmbl10_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl10_EMCLASSIFICATION nothreads;
157775     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
157776     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.ENSMBL10_EMCLASSIFICATION.
NOTE: The data set EMWS8.ENSMBL10_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
157777     %let _cn = %sysfunc(getoption(CENTER));
157778     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
157779     proc print data=EMWS8.Ensmbl10_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl10_EMCLASSIFICATION noobs label;
157780     var from into pct_row pct_col count percent
157781     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
157782     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
157783     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
157784     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
157785     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
157786     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
157787     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
157788     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
157789     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
157790     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
157791     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
157792     run;
 
NOTE: There were 7 observations read from the data set EMWS8.ENSMBL10_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 45.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
157793     title9;
MPRINT(EM_DIAGRAM):   title9;
157794     title10;
MPRINT(EM_DIAGRAM):   title10;
157795     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
157796     %let _cn = %sysfunc(getoption(CENTER));
157797     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
157798     data EMWS8.Ensmbl10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMEVENTREPORT;
157799     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
157799   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
157800     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
157800   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
157800   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
157800   ! FALSEEVENT
157801     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
157801   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
157801   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
157802        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
157803     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
157804     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
157805     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
157806     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
157807     set EMWS8.Ensmbl10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMEVENTREPORT;
157808     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL10_EMEVENTREPORT.
NOTE: The data set EMWS8.ENSMBL10_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
157809     proc print data=EMWS8.Ensmbl10_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl10_EMEVENTREPORT noobs label;
157810     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
157811     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
157812     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
157813     run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL10_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 46.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
157814     title10;
MPRINT(EM_DIAGRAM):   title10;
157815     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
157816     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
157817     modify Ensmbl10_EMRANK;
MPRINT(EM_DIAGRAM):   modify Ensmbl10_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
157818     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
157819     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
157819   ! ;
MPRINT(EM_DIAGRAM):   run;
157820     run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL10_EMRANK.DATA.
157821     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
157822     %let _cn = %sysfunc(getoption(CENTER));
157823     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
157824     proc print data=EMWS8.Ensmbl10_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl10_EMRANK label noobs;
157825     var
157826     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
157827     by
157828     notsorted DATAROLE
157829     notsorted TARGET
157830     notsorted TARGETLABEL
157831     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
157832     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
157833     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
157834     run;
 
NOTE: There were 40 observations read from the data set EMWS8.ENSMBL10_EMRANK.
NOTE: The PROCEDURE PRINT printed page 47.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
157835     title10;
MPRINT(EM_DIAGRAM):   title10;
157836     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
157837     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
157838     modify Ensmbl10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Ensmbl10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
157839     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
157839   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
157840     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
157840   ! ;
MPRINT(EM_DIAGRAM):   run;
157841     run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL10_EMSCOREDIST.DATA.
157842     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl10_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
