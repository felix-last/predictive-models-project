MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.35 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.35 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2TEM2RA 
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2TEM2RA new;
MPRINT(EM_DIAGRAM):   run;
2000361    filename emflow
2000361  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring NEURAL35_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000362    *------------------------------------------------------------*;
2000363    * Ensmbl10: Scoring NEURAL35_TRAIN data;
2000364    *------------------------------------------------------------*;
2000365    data EMWS8.Ensmbl10_TRAIN
2000366    / view=EMWS8.Ensmbl10_TRAIN
2000367    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_TRAIN / view=EMWS8.Ensmbl10_TRAIN ;
2000368    set EMWS8.Neural35_TRAIN
2000369    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural35_TRAIN ;
2000370    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas.
2000371   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000372   +* Ensmbl10: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Combine model for DepVar;
2000373   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000374   +* Ensmbl10: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 1 of 3;
2000375   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000376   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000377   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
2000378   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
2000379   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
2000380   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000381   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000382   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
2000383   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
2000384   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
2000385   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000386   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000387   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
2000388   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
2000389   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
2000390   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000391   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000392   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
2000393   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
2000394   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
2000395   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000396   +
2000397   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
2000398   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
2000398  !+es;
MPRINT(EM_DIAGRAM):   
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
2000399   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
2000400   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
2000401   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
2000402   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
2000403   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
2000404   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000405   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
2000406   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
2000407   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
2000408   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000409   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000410   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
2000411   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000412   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
2000413   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
2000414   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
2000415   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000416   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
2000417   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
2000418   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
2000419   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000420   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000421   +* TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
2000422   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
2000423   +* NODE: Meta2;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
2000424   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000425   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000426   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2000427   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2000428   +* NODE: Neural35;
MPRINT(EM_DIAGRAM):   * NODE: Neural35;
2000429   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2000430   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2000431   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2000432   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2000433   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2000434   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2000435   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2000436   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2000437   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2000438   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2000439   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2000440   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2000441   +LENGTH _WARN_ $4
2000442   +      F_DepVar  $ 12
2000443   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2000444   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2000445   +
2000446   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2000447   +
2000448   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2000449   +
2000450   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2000451   +
2000452   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2000453   +
2000454   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2000455   +
2000456   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2000457   +
2000458   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2000459   +
2000460   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2000461   +
2000462   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2000463   +
2000464   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2000465   +
2000466   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2000467   +
2000468   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2000469   +
2000470   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2000471   +
2000472   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2000473   +
2000474   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2000475   +
2000476   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2000477   +
2000478   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2000479   +
2000480   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2000481   +
2000482   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2000483   +
2000484   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2000485   +
2000486   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2000487   +
2000488   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2000489   +
2000490   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2000491   +
2000492   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2000493   +
2000494   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2000495   +
2000496   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2000497   +
2000498   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2000499   +
2000500   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2000501   +
2000502   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2000503   +
2000504   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2000505   +
2000506   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2000507   +
2000508   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2000509   +
2000510   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2000511   +
2000512   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
2000513   +
2000514   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2000515   +
2000516   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2000517   +
2000518   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2000519   +
2000520   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2000521   +
2000522   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2000523   +
2000524   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2000525   +
2000526   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2000527   +
2000528   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2000529   +
2000530   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2000531   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2000532   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2000533   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2000534   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000535   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000536   +end;
MPRINT(EM_DIAGRAM):   end;
2000537   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000538   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000539   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2000540   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000541   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000542   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2000543   +   end;
MPRINT(EM_DIAGRAM):   end;
2000544   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000545   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2000546   +   end;
MPRINT(EM_DIAGRAM):   end;
2000547   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000548   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2000549   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000550   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000551   +   end;
MPRINT(EM_DIAGRAM):   end;
2000552   +end;
MPRINT(EM_DIAGRAM):   end;
2000553   +
2000554   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2000555   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2000556   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2000557   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2000558   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000559   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000560   +end;
MPRINT(EM_DIAGRAM):   end;
2000561   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000562   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000563   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2000564   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000565   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000566   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2000567   +   end;
MPRINT(EM_DIAGRAM):   end;
2000568   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000569   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2000570   +   end;
MPRINT(EM_DIAGRAM):   end;
2000571   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000572   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2000573   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000574   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000575   +   end;
MPRINT(EM_DIAGRAM):   end;
2000576   +end;
MPRINT(EM_DIAGRAM):   end;
2000577   +
2000578   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2000579   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2000580   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2000581   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2000582   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000583   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000584   +end;
MPRINT(EM_DIAGRAM):   end;
2000585   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000586   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000587   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2000588   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000589   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000590   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2000591   +   end;
MPRINT(EM_DIAGRAM):   end;
2000592   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000593   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2000594   +   end;
MPRINT(EM_DIAGRAM):   end;
2000595   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000596   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2000597   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000598   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000599   +   end;
MPRINT(EM_DIAGRAM):   end;
2000600   +end;
MPRINT(EM_DIAGRAM):   end;
2000601   +
2000602   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2000603   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2000604   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2000605   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2000606   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000607   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000608   +end;
MPRINT(EM_DIAGRAM):   end;
2000609   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000610   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000611   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2000612   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000613   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000614   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2000615   +   end;
MPRINT(EM_DIAGRAM):   end;
2000616   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000617   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2000618   +   end;
MPRINT(EM_DIAGRAM):   end;
2000619   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000620   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2000621   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000622   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000623   +   end;
MPRINT(EM_DIAGRAM):   end;
2000624   +end;
MPRINT(EM_DIAGRAM):   end;
2000625   +
2000626   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2000627   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2000628   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2000629   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2000630   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000631   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000632   +end;
MPRINT(EM_DIAGRAM):   end;
2000633   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000634   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000635   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2000636   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000637   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000638   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2000639   +   end;
MPRINT(EM_DIAGRAM):   end;
2000640   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000641   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2000642   +   end;
MPRINT(EM_DIAGRAM):   end;
2000643   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000644   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2000645   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000646   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000647   +   end;
MPRINT(EM_DIAGRAM):   end;
2000648   +end;
MPRINT(EM_DIAGRAM):   end;
2000649   +
2000650   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2000651   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2000652   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2000653   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2000654   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000655   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000656   +end;
MPRINT(EM_DIAGRAM):   end;
2000657   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000658   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2000659   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2000660   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000661   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2000662   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2000663   +   end;
MPRINT(EM_DIAGRAM):   end;
2000664   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2000665   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2000666   +   end;
MPRINT(EM_DIAGRAM):   end;
2000667   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000668   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2000669   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000670   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000671   +   end;
MPRINT(EM_DIAGRAM):   end;
2000672   +end;
MPRINT(EM_DIAGRAM):   end;
2000673   +
2000674   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2000675   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2000676   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2000677   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2000678   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2000679   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2000680   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2000681   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2000682   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2000683   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2000684   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2000685   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2000686   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000687   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000688   +end;
MPRINT(EM_DIAGRAM):   end;
2000689   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000690   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2000691   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2000692   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000693   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2000694   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2000695   +   end;
MPRINT(EM_DIAGRAM):   end;
2000696   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2000697   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2000698   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2000699   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2000700   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2000701   +   end;
MPRINT(EM_DIAGRAM):   end;
2000702   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2000703   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2000704   +   end;
MPRINT(EM_DIAGRAM):   end;
2000705   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2000706   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2000707   +   end;
MPRINT(EM_DIAGRAM):   end;
2000708   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2000709   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2000710   +   end;
MPRINT(EM_DIAGRAM):   end;
2000711   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000712   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2000713   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2000714   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2000715   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2000716   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000717   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000718   +   end;
MPRINT(EM_DIAGRAM):   end;
2000719   +end;
MPRINT(EM_DIAGRAM):   end;
2000720   +
2000721   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2000722   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2000723   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2000724   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2000725   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2000726   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2000727   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2000728   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2000729   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2000730   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2000731   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2000732   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2000733   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2000734   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2000735   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000736   +end;
MPRINT(EM_DIAGRAM):   end;
2000737   +else do;
MPRINT(EM_DIAGRAM):   else do;
2000738   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2000739   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2000740   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2000741   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2000742   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2000743   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2000744   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2000745   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2000746   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2000747   +         end;
MPRINT(EM_DIAGRAM):   end;
2000748   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2000749   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2000750   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2000751   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2000752   +            end;
MPRINT(EM_DIAGRAM):   end;
2000753   +         end;
MPRINT(EM_DIAGRAM):   end;
2000754   +      end;
MPRINT(EM_DIAGRAM):   end;
2000755   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2000756   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2000757   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2000758   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2000759   +         end;
MPRINT(EM_DIAGRAM):   end;
2000760   +      end;
MPRINT(EM_DIAGRAM):   end;
2000761   +   end;
MPRINT(EM_DIAGRAM):   end;
2000762   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2000763   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2000764   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2000765   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2000766   +      end;
MPRINT(EM_DIAGRAM):   end;
2000767   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2000768   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2000769   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2000770   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2000771   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2000772   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2000773   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2000774   +         end;
MPRINT(EM_DIAGRAM):   end;
2000775   +      end;
MPRINT(EM_DIAGRAM):   end;
2000776   +   end;
MPRINT(EM_DIAGRAM):   end;
2000777   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2000778   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2000779   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2000780   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2000781   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2000782   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2000783   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000784   +   end;
MPRINT(EM_DIAGRAM):   end;
2000785   +end;
MPRINT(EM_DIAGRAM):   end;
2000786   +
2000787   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000788   +*** Checking missing input Interval
2000789   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2000790   +
2000791   +IF NMISS(
2000792   +   Income ,
2000793   +   Kidhome ,
2000794   +   MntFishProducts ,
2000795   +   MntFruits ,
2000796   +   MntGoldProds ,
2000797   +   MntMeatProducts ,
2000798   +   MntSweetProducts ,
2000799   +   MntWines ,
2000800   +   NumCatalogPurchases ,
2000801   +   NumDealsPurchases ,
2000802   +   NumStorePurchases ,
2000803   +   NumWebPurchases ,
2000804   +   NumWebVisitsMonth ,
2000805   +   Recency ,
2000806   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2000807   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2000808   +
2000809   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2000810   +END;
MPRINT(EM_DIAGRAM):   END;
2000811   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000812   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2000813   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000814   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2000815   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2000816   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2000817   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2000818   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2000819   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2000820   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
The SAS System

2000821   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2000822   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2000823   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2000824   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2000825   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2000826   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2000827   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2000828   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2000829   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2000830   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2000831   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2000832   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2000833   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2000834   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2000835   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2000836   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2000837   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2000838   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2000839   +END;
MPRINT(EM_DIAGRAM):   END;
2000840   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2000841   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2000842   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2000843   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2000844   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2000845   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2000846   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2000847   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2000848   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2000849   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2000850   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2000851   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2000852   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2000853   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2000854   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2000855   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2000856   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2000857   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2000858   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2000859   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2000860   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2000861   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2000862   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2000863   +   ELSE S_NumCatalogPurchases
2000864   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2000865   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2000866   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2000867   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2000868   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2000869   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2000870   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2000871   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2000872   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2000873   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2000874   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2000875   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2000876   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2000877   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2000878   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2000879   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2000880   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2000881   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2000882   +END;
MPRINT(EM_DIAGRAM):   END;
2000883   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000884   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2000885   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000886   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000887   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2000888   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000889   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000890   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2000891   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2000892   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2000893   +   H11  =     0.87660114046125 * S_Income  +     -0.7994451897827 * S_Kidhome
2000894   +          +    -0.08967295716195 * S_MntFishProducts
2000895   +          +     0.03184635437516 * S_MntFruits  +    -0.13860895575438 *
2000896   +        S_MntGoldProds  +     0.55790460748169 * S_MntMeatProducts
2000897   +          +    -0.02806094557115 * S_MntSweetProducts
2000898   +          +    -0.14537763592724 * S_MntWines  +     0.76891266523847 *
2000899   +        S_NumCatalogPurchases  +     0.16842007461305 * S_NumDealsPurchases
2000900   +          +     0.25137876058262 * S_NumStorePurchases
2000901   +          +    -0.07865442401292 * S_NumWebPurchases
2000902   +          +     1.03197398967259 * S_NumWebVisitsMonth
2000903   +          +    -1.26907156503759 * S_Recency  +    -0.76016893316351 *
2000904   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 0.87660114046125 * S_Income + -0.7994451897827 * S_Kidhome + 
-0.08967295716195 * S_MntFishProducts + 0.03184635437516 * S_MntFruits + -0.13860895575438 * 
S_MntGoldProds + 0.55790460748169 * S_MntMeatProducts + -0.02806094557115 * S_MntSweetProducts 
+ -0.14537763592724 * S_MntWines + 0.76891266523847 * S_NumCatalogPurchases + 0.16842007461305 
* S_NumDealsPurchases + 0.25137876058262 * S_NumStorePurchases + -0.07865442401292 * 
S_NumWebPurchases + 1.03197398967259 * S_NumWebVisitsMonth + -1.26907156503759 * S_Recency + 
-0.76016893316351 * S_Teenhome ;
2000905   +   H12  =     0.37295000114468 * S_Income  +    -0.12834211496575 * S_Kidhome
2000906   +          +     0.19312392388912 * S_MntFishProducts
2000907   +          +      0.1561688289137 * S_MntFruits  +     0.04004810938796 *
2000908   +        S_MntGoldProds  +     0.32599201739588 * S_MntMeatProducts
2000909   +          +       0.204174263605 * S_MntSweetProducts
2000910   +          +    -0.11560784817014 * S_MntWines  +     0.12255073568725 *
2000911   +        S_NumCatalogPurchases  +    -0.05543734180218 * S_NumDealsPurchases
2000912   +          +     0.07747830335769 * S_NumStorePurchases
2000913   +          +     0.07960837555191 * S_NumWebPurchases
2000914   +          +     0.02351602389122 * S_NumWebVisitsMonth
2000915   +          +     -0.2840853952427 * S_Recency  +    -0.47421627761687 *
2000916   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.37295000114468 * S_Income + -0.12834211496575 * S_Kidhome + 
0.19312392388912 * S_MntFishProducts + 0.1561688289137 * S_MntFruits + 0.04004810938796 * 
S_MntGoldProds + 0.32599201739588 * S_MntMeatProducts + 0.204174263605 * S_MntSweetProducts + 
-0.11560784817014 * S_MntWines + 0.12255073568725 * S_NumCatalogPurchases + -0.05543734180218 
* S_NumDealsPurchases + 0.07747830335769 * S_NumStorePurchases + 0.07960837555191 * 
S_NumWebPurchases + 0.02351602389122 * S_NumWebVisitsMonth + -0.2840853952427 * S_Recency + 
-0.47421627761687 * S_Teenhome ;
2000917   +   H13  =    -0.33428925248315 * S_Income  +    -0.03845622730742 * S_Kidhome
2000918   +          +     0.18733919794636 * S_MntFishProducts
2000919   +          +     0.45907982190052 * S_MntFruits  +    -0.48776616433719 *
2000920   +        S_MntGoldProds  +    -0.41340481007204 * S_MntMeatProducts
2000921   +          +     0.42514606159239 * S_MntSweetProducts
2000922   +          +     0.20038001368787 * S_MntWines  +    -1.21708501803782 *
2000923   +        S_NumCatalogPurchases  +    -1.06820061274533 * S_NumDealsPurchases
2000924   +          +     0.36582106462789 * S_NumStorePurchases
2000925   +          +     0.04244777020435 * S_NumWebPurchases
2000926   +          +    -0.24296342902503 * S_NumWebVisitsMonth
2000927   +          +     0.27451716762947 * S_Recency  +     0.13110477325277 *
2000928   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.33428925248315 * S_Income + -0.03845622730742 * S_Kidhome + 
0.18733919794636 * S_MntFishProducts + 0.45907982190052 * S_MntFruits + -0.48776616433719 * 
S_MntGoldProds + -0.41340481007204 * S_MntMeatProducts + 0.42514606159239 * S_MntSweetProducts 
+ 0.20038001368787 * S_MntWines + -1.21708501803782 * S_NumCatalogPurchases + 
-1.06820061274533 * S_NumDealsPurchases + 0.36582106462789 * S_NumStorePurchases + 
0.04244777020435 * S_NumWebPurchases + -0.24296342902503 * S_NumWebVisitsMonth + 
0.27451716762947 * S_Recency + 0.13110477325277 * S_Teenhome ;
2000929   +   H14  =    -0.70493412542585 * S_Income  +     0.41202796606799 * S_Kidhome
2000930   +          +     0.05986489897572 * S_MntFishProducts
2000931   +          +    -0.05040531715469 * S_MntFruits  +       0.051068387592 *
2000932   +        S_MntGoldProds  +    -0.13581881662481 * S_MntMeatProducts
2000933   +          +    -0.05513370461072 * S_MntSweetProducts
2000934   +          +     0.77472084468819 * S_MntWines  +    -0.03211788969126 *
2000935   +        S_NumCatalogPurchases  +    -0.24097486430988 * S_NumDealsPurchases
2000936   +          +     0.64364674828841 * S_NumStorePurchases
2000937   +          +     0.15084748708424 * S_NumWebPurchases
2000938   +          +    -0.94144998356377 * S_NumWebVisitsMonth
2000939   +          +     1.16778338364599 * S_Recency  +     0.32089861635238 *
2000940   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = -0.70493412542585 * S_Income + 0.41202796606799 * S_Kidhome + 
0.05986489897572 * S_MntFishProducts + -0.05040531715469 * S_MntFruits + 0.051068387592 * 
S_MntGoldProds + -0.13581881662481 * S_MntMeatProducts + -0.05513370461072 * 
S_MntSweetProducts + 0.77472084468819 * S_MntWines + -0.03211788969126 * S_NumCatalogPurchases 
+ -0.24097486430988 * S_NumDealsPurchases + 0.64364674828841 * S_NumStorePurchases + 
0.15084748708424 * S_NumWebPurchases + -0.94144998356377 * S_NumWebVisitsMonth + 
1.16778338364599 * S_Recency + 0.32089861635238 * S_Teenhome ;
2000941   +   H15  =    -0.15703510827879 * S_Income  +    -0.30977841002562 * S_Kidhome
2000942   +          +    -0.14543196273578 * S_MntFishProducts
2000943   +          +     0.32223695896711 * S_MntFruits  +    -0.31846203211698 *
2000944   +        S_MntGoldProds  +     -1.4125160823105 * S_MntMeatProducts
2000945   +          +     0.49374793444169 * S_MntSweetProducts
2000946   +          +     0.39699716010219 * S_MntWines  +    -0.88140331687645 *
2000947   +        S_NumCatalogPurchases  +    -0.87657222813687 * S_NumDealsPurchases
2000948   +          +     1.23754786782746 * S_NumStorePurchases
2000949   +          +     1.11316667348511 * S_NumWebPurchases
2000950   +          +    -1.08592446439781 * S_NumWebVisitsMonth
2000951   +          +     0.66958517589542 * S_Recency  +     0.06799032788481 *
2000952   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.15703510827879 * S_Income + -0.30977841002562 * S_Kidhome + 
-0.14543196273578 * S_MntFishProducts + 0.32223695896711 * S_MntFruits + -0.31846203211698 * 
S_MntGoldProds + -1.4125160823105 * S_MntMeatProducts + 0.49374793444169 * S_MntSweetProducts 
+ 0.39699716010219 * S_MntWines + -0.88140331687645 * S_NumCatalogPurchases + 
-0.87657222813687 * S_NumDealsPurchases + 1.23754786782746 * S_NumStorePurchases + 
1.11316667348511 * S_NumWebPurchases + -1.08592446439781 * S_NumWebVisitsMonth + 
0.66958517589542 * S_Recency + 0.06799032788481 * S_Teenhome ;
2000953   +   H16  =    -0.10360901553583 * S_Income  +     0.39257497240865 * S_Kidhome
2000954   +          +     0.29549884005341 * S_MntFishProducts
2000955   +          +     0.04922491353914 * S_MntFruits  +     -0.1412659458221 *
2000956   +        S_MntGoldProds  +    -0.12361454534126 * S_MntMeatProducts
2000957   +          +    -0.11909215986981 * S_MntSweetProducts
2000958   +          +     0.11430484977092 * S_MntWines  +    -0.66235553839539 *
2000959   +        S_NumCatalogPurchases  +     0.17261763180198 * S_NumDealsPurchases
2000960   +          +     0.30109334594548 * S_NumStorePurchases
2000961   +          +     0.01985762767489 * S_NumWebPurchases
2000962   +          +     0.44965133281333 * S_NumWebVisitsMonth
2000963   +          +     0.32338634259192 * S_Recency  +    -0.04032956941805 *
2000964   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H16 = -0.10360901553583 * S_Income + 0.39257497240865 * S_Kidhome + 
0.29549884005341 * S_MntFishProducts + 0.04922491353914 * S_MntFruits + -0.1412659458221 * 
S_MntGoldProds + -0.12361454534126 * S_MntMeatProducts + -0.11909215986981 * 
S_MntSweetProducts + 0.11430484977092 * S_MntWines + -0.66235553839539 * S_NumCatalogPurchases 
+ 0.17261763180198 * S_NumDealsPurchases + 0.30109334594548 * S_NumStorePurchases + 
0.01985762767489 * S_NumWebPurchases + 0.44965133281333 * S_NumWebVisitsMonth + 
0.32338634259192 * S_Recency + -0.04032956941805 * S_Teenhome ;
2000965   +   H11  = H11  +    -0.23026310289024 * AcceptedCmp10
2000966   +          +    -0.82550012364234 * AcceptedCmp20  +    -0.67764228269441 *
2000967   +        AcceptedCmp30  +    -0.51547666117685 * AcceptedCmp40
2000968   +          +    -0.36424958084824 * AcceptedCmp50  +       0.119862855783 *
2000969   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.23026310289024 * AcceptedCmp10 + -0.82550012364234 * 
AcceptedCmp20 + -0.67764228269441 * AcceptedCmp30 + -0.51547666117685 * AcceptedCmp40 + 
-0.36424958084824 * AcceptedCmp50 + 0.119862855783 * Complain0 ;
2000970   +   H12  = H12  +     0.02722288857426 * AcceptedCmp10
2000971   +          +      0.1236576068539 * AcceptedCmp20  +    -0.31265425960737 *
2000972   +        AcceptedCmp30  +    -0.25076565034266 * AcceptedCmp40
2000973   +          +    -0.20158659730872 * AcceptedCmp50  +    -0.43687103612629 *
2000974   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.02722288857426 * AcceptedCmp10 + 0.1236576068539 * 
AcceptedCmp20 + -0.31265425960737 * AcceptedCmp30 + -0.25076565034266 * AcceptedCmp40 + 
-0.20158659730872 * AcceptedCmp50 + -0.43687103612629 * Complain0 ;
2000975   +   H13  = H13  +     0.21852176280571 * AcceptedCmp10
2000976   +          +     0.01727991436107 * AcceptedCmp20  +     0.19303261094625 *
2000977   +        AcceptedCmp30  +    -0.65492191560509 * AcceptedCmp40
2000978   +          +    -0.09636750660684 * AcceptedCmp50  +     0.07579128571046 *
2000979   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.21852176280571 * AcceptedCmp10 + 0.01727991436107 * 
AcceptedCmp20 + 0.19303261094625 * AcceptedCmp30 + -0.65492191560509 * AcceptedCmp40 + 
-0.09636750660684 * AcceptedCmp50 + 0.07579128571046 * Complain0 ;
2000980   +   H14  = H14  +     0.20819294353855 * AcceptedCmp10
2000981   +          +      0.5159102831901 * AcceptedCmp20  +     0.55295587458643 *
2000982   +        AcceptedCmp30  +     0.80682431419623 * AcceptedCmp40
2000983   +          +     0.74007057798158 * AcceptedCmp50  +     -0.4573052390807 *
2000984   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.20819294353855 * AcceptedCmp10 + 0.5159102831901 * 
AcceptedCmp20 + 0.55295587458643 * AcceptedCmp30 + 0.80682431419623 * AcceptedCmp40 + 
0.74007057798158 * AcceptedCmp50 + -0.4573052390807 * Complain0 ;
2000985   +   H15  = H15  +     1.26330939420524 * AcceptedCmp10
2000986   +          +     0.29494505935793 * AcceptedCmp20  +     0.25561322032419 *
2000987   +        AcceptedCmp30  +     0.50102236777897 * AcceptedCmp40
2000988   +          +     0.20696267245027 * AcceptedCmp50  +    -0.00849145233901 *
2000989   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 1.26330939420524 * AcceptedCmp10 + 0.29494505935793 * 
AcceptedCmp20 + 0.25561322032419 * AcceptedCmp30 + 0.50102236777897 * AcceptedCmp40 + 
0.20696267245027 * AcceptedCmp50 + -0.00849145233901 * Complain0 ;
2000990   +   H16  = H16  +     0.03638428330381 * AcceptedCmp10
2000991   +          +     0.27994215452657 * AcceptedCmp20  +    -0.03861840445025 *
2000992   +        AcceptedCmp30  +      0.3398057347433 * AcceptedCmp40
2000993   +          +    -0.00738335957724 * AcceptedCmp50  +      0.0447804375799 *
2000994   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.03638428330381 * AcceptedCmp10 + 0.27994215452657 * 
AcceptedCmp20 + -0.03861840445025 * AcceptedCmp30 + 0.3398057347433 * AcceptedCmp40 + 
-0.00738335957724 * AcceptedCmp50 + 0.0447804375799 * Complain0 ;
2000995   +   H11  = H11  +     0.27482405283962 * Education2n_Cycle
2000996   +          +     0.11084012456612 * EducationBasic  +    -0.23835071987159 *
2000997   +        EducationGraduation  +    -0.10167082180552 * EducationMaster
2000998   +          +     0.51015833145636 * Marital_StatusDivorced
2000999   +          +     -1.1653662063616 * Marital_StatusMarried
2001000   +          +     1.19396547750441 * Marital_StatusSingle
2001001   +          +    -0.99605751789992 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27482405283962 * Education2n_Cycle + 0.11084012456612 * 
EducationBasic + -0.23835071987159 * EducationGraduation + -0.10167082180552 * EducationMaster 
+ 0.51015833145636 * Marital_StatusDivorced + -1.1653662063616 * Marital_StatusMarried + 
1.19396547750441 * Marital_StatusSingle + -0.99605751789992 * Marital_StatusTogether ;
2001002   +   H12  = H12  +    -0.05268347704739 * Education2n_Cycle
2001003   +          +     0.19362065968028 * EducationBasic  +    -0.26784257195414 *
2001004   +        EducationGraduation  +     0.16650577465959 * EducationMaster
2001005   +          +     0.09154288513995 * Marital_StatusDivorced
2001006   +          +     0.06725684628382 * Marital_StatusMarried
2001007   +          +     0.11327659191494 * Marital_StatusSingle
2001008   +          +     0.01793778876811 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.05268347704739 * Education2n_Cycle + 0.19362065968028 * 
EducationBasic + -0.26784257195414 * EducationGraduation + 0.16650577465959 * EducationMaster 
+ 0.09154288513995 * Marital_StatusDivorced + 0.06725684628382 * Marital_StatusMarried + 
0.11327659191494 * Marital_StatusSingle + 0.01793778876811 * Marital_StatusTogether ;
2001009   +   H13  = H13  +     -0.1027084329077 * Education2n_Cycle
2001010   +          +    -0.01342449140757 * EducationBasic  +    -0.35627920427273 *
2001011   +        EducationGraduation  +    -0.05554656531793 * EducationMaster
2001012   +          +     0.37591653615852 * Marital_StatusDivorced
2001013   +          +    -0.05024236790132 * Marital_StatusMarried
2001014   +          +    -0.28317154997144 * Marital_StatusSingle
2001015   +          +    -0.19247490223101 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1027084329077 * Education2n_Cycle + -0.01342449140757 * 
EducationBasic + -0.35627920427273 * EducationGraduation + -0.05554656531793 * EducationMaster 
+ 0.37591653615852 * Marital_StatusDivorced + -0.05024236790132 * Marital_StatusMarried + 
-0.28317154997144 * Marital_StatusSingle + -0.19247490223101 * Marital_StatusTogether ;
2001016   +   H14  = H14  +     -0.4162491480577 * Education2n_Cycle
2001017   +          +     0.38075572764074 * EducationBasic  +    -0.28169469529121 *
2001018   +        EducationGraduation  +       0.638986138084 * EducationMaster
2001019   +          +    -0.44885292450558 * Marital_StatusDivorced
2001020   +          +     0.78958791519299 * Marital_StatusMarried
2001021   +          +    -0.09688714431356 * Marital_StatusSingle
2001022   +          +     0.84239030196202 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.4162491480577 * Education2n_Cycle + 0.38075572764074 * 
EducationBasic + -0.28169469529121 * EducationGraduation + 0.638986138084 * EducationMaster + 
-0.44885292450558 * Marital_StatusDivorced + 0.78958791519299 * Marital_StatusMarried + 
-0.09688714431356 * Marital_StatusSingle + 0.84239030196202 * Marital_StatusTogether ;
2001023   +   H15  = H15  +     0.33126657974568 * Education2n_Cycle
2001024   +          +     0.44539039262703 * EducationBasic  +    -0.09154902903865 *
2001025   +        EducationGraduation  +    -0.26400363440725 * EducationMaster
2001026   +          +    -0.30801073895989 * Marital_StatusDivorced
2001027   +          +     -0.1285150749223 * Marital_StatusMarried
2001028   +          +     0.06775542164414 * Marital_StatusSingle
2001029   +          +    -0.13032366945766 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.33126657974568 * Education2n_Cycle + 0.44539039262703 * 
EducationBasic + -0.09154902903865 * EducationGraduation + -0.26400363440725 * EducationMaster 
+ -0.30801073895989 * Marital_StatusDivorced + -0.1285150749223 * Marital_StatusMarried + 
0.06775542164414 * Marital_StatusSingle + -0.13032366945766 * Marital_StatusTogether ;
2001030   +   H16  = H16  +     0.02030175222681 * Education2n_Cycle
2001031   +          +    -0.19579401096879 * EducationBasic  +      0.2070703930869 *
2001032   +        EducationGraduation  +    -0.40706983167068 * EducationMaster
2001033   +          +     0.22193599090368 * Marital_StatusDivorced
2001034   +          +    -0.54544672042168 * Marital_StatusMarried
2001035   +          +    -0.02237436019864 * Marital_StatusSingle
2001036   +          +    -0.21979468164854 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.02030175222681 * Education2n_Cycle + -0.19579401096879 * 
EducationBasic + 0.2070703930869 * EducationGraduation + -0.40706983167068 * EducationMaster + 
0.22193599090368 * Marital_StatusDivorced + -0.54544672042168 * Marital_StatusMarried + 
-0.02237436019864 * Marital_StatusSingle + -0.21979468164854 * Marital_StatusTogether ;
2001037   +   H11  =    -1.24550293901788 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.24550293901788 + H11 ;
2001038   +   H12  =     0.36762263942809 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.36762263942809 + H12 ;
2001039   +   H13  =     0.07010867577103 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.07010867577103 + H13 ;
2001040   +   H14  =    -1.94014549272156 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.94014549272156 + H14 ;
2001041   +   H15  =     0.17666656180153 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 0.17666656180153 + H15 ;
2001042   +   H16  =    -1.64626406576709 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.64626406576709 + H16 ;
2001043   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2001044   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2001045   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2001046   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2001047   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2001048   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
2001049   +END;
MPRINT(EM_DIAGRAM):   END;
2001050   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2001051   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2001052   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2001053   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2001054   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2001055   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2001056   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
2001057   +END;
MPRINT(EM_DIAGRAM):   END;
2001058   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001059   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2001060   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001061   +
2001062   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2001063   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2001064   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2001065   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2001066   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2001067   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001068   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2001069   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2001070   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2001071   +end;
MPRINT(EM_DIAGRAM):   end;
2001072   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001073   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2001074   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2001075   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2001076   +   end;
MPRINT(EM_DIAGRAM):   end;
2001077   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2001078   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2001079   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2001080   +   end;
MPRINT(EM_DIAGRAM):   end;
2001081   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001082   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2001083   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2001084   +   end;
MPRINT(EM_DIAGRAM):   end;
2001085   +end;
MPRINT(EM_DIAGRAM):   end;
2001086   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2001087   +   P_DepVar1  =     4.21126046696691 * H11  +      0.6565061288056 * H12
2001088   +          +    -1.92484011508628 * H13  +    -3.74020722142387 * H14
2001089   +          +    -3.27353026762143 * H15  +     -1.2596922869974 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.21126046696691 * H11 + 0.6565061288056 * H12 + 
-1.92484011508628 * H13 + -3.74020722142387 * H14 + -3.27353026762143 * H15 + -1.2596922869974 
* H16 ;
2001090   +   P_DepVar1  =    -1.36806658950323 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.36806658950323 + P_DepVar1 ;
2001091   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2001092   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2001093   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2001094   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2001095   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2001096   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2001097   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2001098   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2001099   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2001100   +END;
MPRINT(EM_DIAGRAM):   END;
2001101   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2001102   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2001103   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2001104   +END;
MPRINT(EM_DIAGRAM):   END;
2001105   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2001106   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2001107   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2001108   +END;
MPRINT(EM_DIAGRAM):   END;
2001109   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2001110   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2001111   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2001112   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2001113   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2001114   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2001115   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2001116   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001117   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2001118   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001119   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2001120   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2001121   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2001122   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2001123   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2001124   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2001125   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2001126   +END;
MPRINT(EM_DIAGRAM):   END;
2001127   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2001128   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2001129   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2001130   +drop
2001131   +H11
2001132   +H12
2001133   +H13
2001134   +H14
2001135   +H15
2001136   +H16
2001137   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
2001138   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2001139   +* Renaming variables for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural35;
2001140   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001141   +* Renaming Posterior variables for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural35;
2001142   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001143   +drop Neural35_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural35_P_DepVar1;
2001144   +Neural35_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural35_P_DepVar1 = P_DepVar1;
2001145   +drop Neural35_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural35_P_DepVar0;
2001146   +Neural35_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural35_P_DepVar0 = P_DepVar0;
2001147   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001148   +* Renaming _WARN_ variable for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural35;
2001149   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001150   +length Neural35_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural35_WARN_ $4;
2001151   +drop Neural35_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural35_WARN_;
2001152   +Neural35_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural35_WARN_ = _WARN_;
2001153   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001154   +* Ensmbl10: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 2 of 3;
2001155   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001156   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001157   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2001158   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2001159   +* NODE: Neural34;
MPRINT(EM_DIAGRAM):   * NODE: Neural34;
2001160   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001161   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2001162   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2001163   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2001164   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2001165   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2001166   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2001167   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2001168   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2001169   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2001170   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2001171   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2001172   +LENGTH _WARN_ $4
2001173   +      F_DepVar  $ 12
2001174   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2001175   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2001176   +
2001177   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2001178   +
2001179   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2001180   +
2001181   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2001182   +
2001183   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2001184   +
2001185   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2001186   +
2001187   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2001188   +
2001189   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2001190   +
2001191   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2001192   +
2001193   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2001194   +
2001195   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2001196   +
2001197   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2001198   +
2001199   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2001200   +
2001201   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2001202   +
2001203   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2001204   +
2001205   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2001206   +
2001207   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2001208   +
2001209   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2001210   +
2001211   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2001212   +
2001213   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2001214   +
2001215   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2001216   +
2001217   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2001218   +
2001219   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2001220   +
2001221   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2001222   +
2001223   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2001224   +
2001225   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2001226   +
2001227   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2001228   +
2001229   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2001230   +
2001231   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2001232   +
2001233   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2001234   +
2001235   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2001236   +
2001237   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2001238   +
2001239   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2001240   +
2001241   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2001242   +
2001243   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2001244   +
2001245   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2001246   +
2001247   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2001248   +
2001249   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2001250   +
2001251   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2001252   +
2001253   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2001254   +
2001255   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2001256   +
2001257   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2001258   +
2001259   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2001260   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2001261   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2001262   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2001263   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001264   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001265   +end;
MPRINT(EM_DIAGRAM):   end;
2001266   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001267   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001268   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2001269   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001270   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001271   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2001272   +   end;
MPRINT(EM_DIAGRAM):   end;
2001273   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001274   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2001275   +   end;
MPRINT(EM_DIAGRAM):   end;
2001276   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001277   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2001278   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001279   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001280   +   end;
MPRINT(EM_DIAGRAM):   end;
2001281   +end;
MPRINT(EM_DIAGRAM):   end;
2001282   +
2001283   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2001284   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2001285   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2001286   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2001287   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001288   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001289   +end;
MPRINT(EM_DIAGRAM):   end;
2001290   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001291   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001292   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2001293   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001294   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001295   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2001296   +   end;
MPRINT(EM_DIAGRAM):   end;
2001297   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001298   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2001299   +   end;
MPRINT(EM_DIAGRAM):   end;
2001300   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001301   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2001302   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001303   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001304   +   end;
MPRINT(EM_DIAGRAM):   end;
2001305   +end;
MPRINT(EM_DIAGRAM):   end;
2001306   +
2001307   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2001308   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2001309   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2001310   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2001311   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001312   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001313   +end;
MPRINT(EM_DIAGRAM):   end;
2001314   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001315   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001316   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2001317   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001318   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001319   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2001320   +   end;
MPRINT(EM_DIAGRAM):   end;
2001321   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001322   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2001323   +   end;
MPRINT(EM_DIAGRAM):   end;
2001324   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001325   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2001326   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001327   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001328   +   end;
MPRINT(EM_DIAGRAM):   end;
2001329   +end;
MPRINT(EM_DIAGRAM):   end;
2001330   +
2001331   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2001332   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2001333   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2001334   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2001335   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001336   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001337   +end;
MPRINT(EM_DIAGRAM):   end;
2001338   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001339   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001340   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2001341   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001342   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001343   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2001344   +   end;
MPRINT(EM_DIAGRAM):   end;
2001345   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001346   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2001347   +   end;
MPRINT(EM_DIAGRAM):   end;
2001348   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001349   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2001350   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001351   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001352   +   end;
MPRINT(EM_DIAGRAM):   end;
2001353   +end;
MPRINT(EM_DIAGRAM):   end;
2001354   +
2001355   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2001356   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2001357   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2001358   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2001359   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001360   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001361   +end;
MPRINT(EM_DIAGRAM):   end;
2001362   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001363   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001364   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2001365   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001366   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001367   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2001368   +   end;
MPRINT(EM_DIAGRAM):   end;
2001369   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001370   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2001371   +   end;
MPRINT(EM_DIAGRAM):   end;
2001372   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001373   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2001374   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001375   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001376   +   end;
MPRINT(EM_DIAGRAM):   end;
2001377   +end;
MPRINT(EM_DIAGRAM):   end;
2001378   +
2001379   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2001380   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2001381   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2001382   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2001383   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001384   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001385   +end;
MPRINT(EM_DIAGRAM):   end;
2001386   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001387   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001388   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2001389   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001390   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001391   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2001392   +   end;
MPRINT(EM_DIAGRAM):   end;
2001393   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001394   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2001395   +   end;
MPRINT(EM_DIAGRAM):   end;
2001396   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001397   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2001398   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001399   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001400   +   end;
MPRINT(EM_DIAGRAM):   end;
2001401   +end;
MPRINT(EM_DIAGRAM):   end;
2001402   +
2001403   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2001404   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2001405   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2001406   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2001407   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2001408   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2001409   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2001410   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2001411   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2001412   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2001413   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2001414   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2001415   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001416   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001417   +end;
MPRINT(EM_DIAGRAM):   end;
2001418   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001419   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2001420   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2001421   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001422   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2001423   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2001424   +   end;
MPRINT(EM_DIAGRAM):   end;
2001425   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2001426   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2001427   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2001428   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2001429   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2001430   +   end;
MPRINT(EM_DIAGRAM):   end;
2001431   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2001432   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2001433   +   end;
MPRINT(EM_DIAGRAM):   end;
2001434   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2001435   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2001436   +   end;
MPRINT(EM_DIAGRAM):   end;
2001437   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2001438   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2001439   +   end;
MPRINT(EM_DIAGRAM):   end;
2001440   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001441   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2001442   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2001443   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2001444   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2001445   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001446   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001447   +   end;
MPRINT(EM_DIAGRAM):   end;
2001448   +end;
MPRINT(EM_DIAGRAM):   end;
2001449   +
2001450   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2001451   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2001452   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2001453   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2001454   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2001455   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2001456   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2001457   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2001458   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2001459   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2001460   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2001461   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2001462   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2001463   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001464   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001465   +end;
MPRINT(EM_DIAGRAM):   end;
2001466   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001467   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2001468   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2001469   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001470   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2001471   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2001472   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2001473   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2001474   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2001475   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2001476   +         end;
MPRINT(EM_DIAGRAM):   end;
2001477   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2001478   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2001479   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2001480   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2001481   +            end;
MPRINT(EM_DIAGRAM):   end;
2001482   +         end;
MPRINT(EM_DIAGRAM):   end;
2001483   +      end;
MPRINT(EM_DIAGRAM):   end;
2001484   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2001485   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2001486   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2001487   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2001488   +         end;
MPRINT(EM_DIAGRAM):   end;
2001489   +      end;
MPRINT(EM_DIAGRAM):   end;
2001490   +   end;
MPRINT(EM_DIAGRAM):   end;
2001491   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001492   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2001493   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2001494   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2001495   +      end;
MPRINT(EM_DIAGRAM):   end;
2001496   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2001497   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2001498   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2001499   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2001500   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2001501   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2001502   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2001503   +         end;
MPRINT(EM_DIAGRAM):   end;
2001504   +      end;
MPRINT(EM_DIAGRAM):   end;
2001505   +   end;
MPRINT(EM_DIAGRAM):   end;
2001506   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2001507   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2001508   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2001509   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2001510   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2001511   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001512   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001513   +   end;
MPRINT(EM_DIAGRAM):   end;
2001514   +end;
MPRINT(EM_DIAGRAM):   end;
2001515   +
2001516   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001517   +*** Checking missing input Interval
2001518   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2001519   +
2001520   +IF NMISS(
2001521   +   Income ,
2001522   +   Kidhome ,
2001523   +   MntFishProducts ,
2001524   +   MntFruits ,
2001525   +   MntGoldProds ,
2001526   +   MntMeatProducts ,
2001527   +   MntSweetProducts ,
2001528   +   MntWines ,
2001529   +   NumCatalogPurchases ,
2001530   +   NumDealsPurchases ,
2001531   +   NumStorePurchases ,
2001532   +   NumWebPurchases ,
2001533   +   NumWebVisitsMonth ,
2001534   +   Recency ,
2001535   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2001536   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2001537   +
2001538   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001539   +END;
MPRINT(EM_DIAGRAM):   END;
2001540   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001541   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2001542   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001543   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2001544   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2001545   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2001546   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2001547   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2001548   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2001549   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2001550   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2001551   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2001552   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2001553   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2001554   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2001555   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2001556   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2001557   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2001558   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2001559   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2001560   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2001561   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2001562   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2001563   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2001564   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2001565   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2001566   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2001567   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2001568   +END;
MPRINT(EM_DIAGRAM):   END;
2001569   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2001570   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2001571   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2001572   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2001573   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2001574   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2001575   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2001576   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2001577   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2001578   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2001579   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2001580   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2001581   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2001582   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2001583   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2001584   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2001585   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2001586   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2001587   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2001588   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2001589   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2001590   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2001591   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2001592   +   ELSE S_NumCatalogPurchases
2001593   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2001594   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2001595   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2001596   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2001597   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2001598   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2001599   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2001600   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2001601   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2001602   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2001603   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2001604   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2001605   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2001606   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2001607   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2001608   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2001609   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2001610   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2001611   +END;
MPRINT(EM_DIAGRAM):   END;
2001612   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001613   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2001614   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001615   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001616   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2001617   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001618   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001619   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2001620   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001621   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2001622   +   H11  =    -0.81572379016921 * S_Income  +    -0.07670946585348 * S_Kidhome
2001623   +          +     0.24367603598167 * S_MntFishProducts
2001624   +          +     0.19692980127348 * S_MntFruits  +    -0.03926738185333 *
2001625   +        S_MntGoldProds  +    -0.20900804333353 * S_MntMeatProducts
2001626   +          +     0.34054806441484 * S_MntSweetProducts
2001627   +          +     0.65956211369383 * S_MntWines  +    -0.95375334578522 *
2001628   +        S_NumCatalogPurchases  +    -0.73124740368567 * S_NumDealsPurchases
2001629   +          +     0.98942946974575 * S_NumStorePurchases
2001630   +          +     0.89701206630103 * S_NumWebPurchases
2001631   +          +    -1.22878611472154 * S_NumWebVisitsMonth
2001632   +          +     1.44981870978354 * S_Recency  +     0.47533125686411 *
2001633   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = -0.81572379016921 * S_Income + -0.07670946585348 * S_Kidhome + 
0.24367603598167 * S_MntFishProducts + 0.19692980127348 * S_MntFruits + -0.03926738185333 * 
S_MntGoldProds + -0.20900804333353 * S_MntMeatProducts + 0.34054806441484 * S_MntSweetProducts 
+ 0.65956211369383 * S_MntWines + -0.95375334578522 * S_NumCatalogPurchases + 
-0.73124740368567 * S_NumDealsPurchases + 0.98942946974575 * S_NumStorePurchases + 
0.89701206630103 * S_NumWebPurchases + -1.22878611472154 * S_NumWebVisitsMonth + 
1.44981870978354 * S_Recency + 0.47533125686411 * S_Teenhome ;
2001634   +   H12  =    -0.18875145195495 * S_Income  +     0.42230998482453 * S_Kidhome
2001635   +          +     0.16683404689723 * S_MntFishProducts
2001636   +          +     0.32072658929401 * S_MntFruits  +    -0.12341748032201 *
2001637   +        S_MntGoldProds  +    -1.56478754527255 * S_MntMeatProducts
2001638   +          +     0.20389084548968 * S_MntSweetProducts
2001639   +          +     0.95592931625509 * S_MntWines  +    -0.69996817353755 *
2001640   +        S_NumCatalogPurchases  +    -0.92709806328697 * S_NumDealsPurchases
2001641   +          +     1.27164659640366 * S_NumStorePurchases
2001642   +          +     1.02122194207802 * S_NumWebPurchases
2001643   +          +     -1.5111033436803 * S_NumWebVisitsMonth
2001644   +          +     1.63712814901544 * S_Recency  +     0.14205116840572 *
2001645   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = -0.18875145195495 * S_Income + 0.42230998482453 * S_Kidhome + 
0.16683404689723 * S_MntFishProducts + 0.32072658929401 * S_MntFruits + -0.12341748032201 * 
S_MntGoldProds + -1.56478754527255 * S_MntMeatProducts + 0.20389084548968 * S_MntSweetProducts 
+ 0.95592931625509 * S_MntWines + -0.69996817353755 * S_NumCatalogPurchases + 
-0.92709806328697 * S_NumDealsPurchases + 1.27164659640366 * S_NumStorePurchases + 
1.02122194207802 * S_NumWebPurchases + -1.5111033436803 * S_NumWebVisitsMonth + 
1.63712814901544 * S_Recency + 0.14205116840572 * S_Teenhome ;
2001646   +   H13  =     1.02798705354163 * S_Income  +    -0.94411708781921 * S_Kidhome
2001647   +          +    -0.03345077166544 * S_MntFishProducts
2001648   +          +     0.00038440809349 * S_MntFruits  +    -0.05068379715712 *
2001649   +        S_MntGoldProds  +     1.00464705307582 * S_MntMeatProducts
2001650   +          +    -0.11948662500951 * S_MntSweetProducts
2001651   +          +    -0.52438819731252 * S_MntWines  +     0.98586904866769 *
2001652   +        S_NumCatalogPurchases  +     0.09015295226839 * S_NumDealsPurchases
2001653   +          +     0.22401914357376 * S_NumStorePurchases
2001654   +          +     0.04219877865976 * S_NumWebPurchases
2001655   +          +     1.21753334166036 * S_NumWebVisitsMonth
2001656   +          +    -1.33712212110081 * S_Recency  +    -0.47582856683655 *
2001657   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = 1.02798705354163 * S_Income + -0.94411708781921 * S_Kidhome + 
-0.03345077166544 * S_MntFishProducts + 0.00038440809349 * S_MntFruits + -0.05068379715712 * 
S_MntGoldProds + 1.00464705307582 * S_MntMeatProducts + -0.11948662500951 * S_MntSweetProducts 
+ -0.52438819731252 * S_MntWines + 0.98586904866769 * S_NumCatalogPurchases + 0.09015295226839 
* S_NumDealsPurchases + 0.22401914357376 * S_NumStorePurchases + 0.04219877865976 * 
S_NumWebPurchases + 1.21753334166036 * S_NumWebVisitsMonth + -1.33712212110081 * S_Recency + 
-0.47582856683655 * S_Teenhome ;
2001658   +   H14  =     0.91431429848834 * S_Income  +    -1.16289676557574 * S_Kidhome
2001659   +          +     0.31175257038578 * S_MntFishProducts
2001660   +          +     0.08080436076271 * S_MntFruits  +     0.15252288175851 *
2001661   +        S_MntGoldProds  +     0.21603546207654 * S_MntMeatProducts
2001662   +          +      0.0927253053382 * S_MntSweetProducts
2001663   +          +     0.05865323888304 * S_MntWines  +    -0.23426953728277 *
2001664   +        S_NumCatalogPurchases  +    -0.46451908614085 * S_NumDealsPurchases
2001665   +          +    -0.12667606349662 * S_NumStorePurchases
2001666   +          +     0.30148374518724 * S_NumWebPurchases
2001667   +          +     0.48934229701658 * S_NumWebVisitsMonth
2001668   +          +    -0.83754390793251 * S_Recency  +     -0.4576645462819 *
2001669   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = 0.91431429848834 * S_Income + -1.16289676557574 * S_Kidhome + 
0.31175257038578 * S_MntFishProducts + 0.08080436076271 * S_MntFruits + 0.15252288175851 * 
S_MntGoldProds + 0.21603546207654 * S_MntMeatProducts + 0.0927253053382 * S_MntSweetProducts + 
0.05865323888304 * S_MntWines + -0.23426953728277 * S_NumCatalogPurchases + -0.46451908614085 
* S_NumDealsPurchases + -0.12667606349662 * S_NumStorePurchases + 0.30148374518724 * 
S_NumWebPurchases + 0.48934229701658 * S_NumWebVisitsMonth + -0.83754390793251 * S_Recency + 
-0.4576645462819 * S_Teenhome ;
2001670   +   H15  =    -0.58161501095664 * S_Income  +     -1.0333658128614 * S_Kidhome
2001671   +          +     0.42646725119177 * S_MntFishProducts
2001672   +          +     -0.3264621401658 * S_MntFruits  +    -0.74616728524532 *
2001673   +        S_MntGoldProds  +    -0.97572068716712 * S_MntMeatProducts
2001674   +          +    -0.01493605582616 * S_MntSweetProducts
2001675   +          +      0.0311636632685 * S_MntWines  +    -1.68599903767191 *
2001676   +        S_NumCatalogPurchases  +    -1.25052648798307 * S_NumDealsPurchases
2001677   +          +     0.54256744091258 * S_NumStorePurchases
2001678   +          +     0.43065931458468 * S_NumWebPurchases
2001679   +          +      0.5935561420466 * S_NumWebVisitsMonth
2001680   +          +    -0.45183418369624 * S_Recency  +     0.19260512629844 *
2001681   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.58161501095664 * S_Income + -1.0333658128614 * S_Kidhome + 
0.42646725119177 * S_MntFishProducts + -0.3264621401658 * S_MntFruits + -0.74616728524532 * 
S_MntGoldProds + -0.97572068716712 * S_MntMeatProducts + -0.01493605582616 * 
S_MntSweetProducts + 0.0311636632685 * S_MntWines + -1.68599903767191 * S_NumCatalogPurchases 
+ -1.25052648798307 * S_NumDealsPurchases + 0.54256744091258 * S_NumStorePurchases + 
0.43065931458468 * S_NumWebPurchases + 0.5935561420466 * S_NumWebVisitsMonth + 
-0.45183418369624 * S_Recency + 0.19260512629844 * S_Teenhome ;
2001682   +   H11  = H11  +     0.61503950219838 * AcceptedCmp10
2001683   +          +     0.02945207091619 * AcceptedCmp20  +     0.99151950769472 *
2001684   +        AcceptedCmp30  +     1.08987060401718 * AcceptedCmp40
2001685   +          +     0.45427753773024 * AcceptedCmp50  +    -1.03533951966815 *
2001686   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.61503950219838 * AcceptedCmp10 + 0.02945207091619 * 
AcceptedCmp20 + 0.99151950769472 * AcceptedCmp30 + 1.08987060401718 * AcceptedCmp40 + 
0.45427753773024 * AcceptedCmp50 + -1.03533951966815 * Complain0 ;
2001687   +   H12  = H12  +     0.83823476190401 * AcceptedCmp10
2001688   +          +      1.0793719601418 * AcceptedCmp20  +     0.68538854946581 *
2001689   +        AcceptedCmp30  +     1.00297565893339 * AcceptedCmp40
2001690   +          +     0.24586379991786 * AcceptedCmp50  +     0.15471251255301 *
2001691   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.83823476190401 * AcceptedCmp10 + 1.0793719601418 * 
AcceptedCmp20 + 0.68538854946581 * AcceptedCmp30 + 1.00297565893339 * AcceptedCmp40 + 
0.24586379991786 * AcceptedCmp50 + 0.15471251255301 * Complain0 ;
2001692   +   H13  = H13  +    -0.41486094438907 * AcceptedCmp10
2001693   +          +    -0.76586628449839 * AcceptedCmp20  +    -0.59695459523693 *
2001694   +        AcceptedCmp30  +    -0.30262159911837 * AcceptedCmp40
2001695   +          +    -0.61141171124182 * AcceptedCmp50  +    -0.01086235188835 *
2001696   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.41486094438907 * AcceptedCmp10 + -0.76586628449839 * 
AcceptedCmp20 + -0.59695459523693 * AcceptedCmp30 + -0.30262159911837 * AcceptedCmp40 + 
-0.61141171124182 * AcceptedCmp50 + -0.01086235188835 * Complain0 ;
2001697   +   H14  = H14  +    -0.09662858884082 * AcceptedCmp10
2001698   +          +    -0.48515652524171 * AcceptedCmp20  +    -0.37421451374399 *
2001699   +        AcceptedCmp30  +    -0.52889523891817 * AcceptedCmp40
2001700   +          +    -0.73518448275357 * AcceptedCmp50  +    -0.36065830718672 *
2001701   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.09662858884082 * AcceptedCmp10 + -0.48515652524171 * 
AcceptedCmp20 + -0.37421451374399 * AcceptedCmp30 + -0.52889523891817 * AcceptedCmp40 + 
-0.73518448275357 * AcceptedCmp50 + -0.36065830718672 * Complain0 ;
2001702   +   H15  = H15  +      0.2985143092641 * AcceptedCmp10
2001703   +          +    -0.06881934778393 * AcceptedCmp20  +    -0.02609197044604 *
2001704   +        AcceptedCmp30  +    -0.79105657447885 * AcceptedCmp40
2001705   +          +    -0.02286855144948 * AcceptedCmp50  +     0.02884650192784 *
2001706   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2985143092641 * AcceptedCmp10 + -0.06881934778393 * 
AcceptedCmp20 + -0.02609197044604 * AcceptedCmp30 + -0.79105657447885 * AcceptedCmp40 + 
-0.02286855144948 * AcceptedCmp50 + 0.02884650192784 * Complain0 ;
2001707   +   H11  = H11  +    -0.41169946146301 * Education2n_Cycle
2001708   +          +      0.8448273504441 * EducationBasic  +    -1.02497956377347 *
2001709   +        EducationGraduation  +     0.43998321745211 * EducationMaster
2001710   +          +    -0.85912688909911 * Marital_StatusDivorced
2001711   +          +     0.81561401465875 * Marital_StatusMarried
2001712   +          +    -0.58324403081542 * Marital_StatusSingle
2001713   +          +      0.9348017085106 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.41169946146301 * Education2n_Cycle + 0.8448273504441 * 
EducationBasic + -1.02497956377347 * EducationGraduation + 0.43998321745211 * EducationMaster 
+ -0.85912688909911 * Marital_StatusDivorced + 0.81561401465875 * Marital_StatusMarried + 
-0.58324403081542 * Marital_StatusSingle + 0.9348017085106 * Marital_StatusTogether ;
2001714   +   H12  = H12  +     0.22828129841893 * Education2n_Cycle
2001715   +          +     0.47579227804033 * EducationBasic  +    -0.18165301263195 *
2001716   +        EducationGraduation  +    -0.16143431016405 * EducationMaster
2001717   +          +    -0.34784695867287 * Marital_StatusDivorced
2001718   +          +    -0.18194022182247 * Marital_StatusMarried
2001719   +          +    -0.10633185904164 * Marital_StatusSingle
2001720   +          +     0.13136125361628 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.22828129841893 * Education2n_Cycle + 0.47579227804033 * 
EducationBasic + -0.18165301263195 * EducationGraduation + -0.16143431016405 * EducationMaster 
+ -0.34784695867287 * Marital_StatusDivorced + -0.18194022182247 * Marital_StatusMarried + 
-0.10633185904164 * Marital_StatusSingle + 0.13136125361628 * Marital_StatusTogether ;
2001721   +   H13  = H13  +     0.38705901043652 * Education2n_Cycle
2001722   +          +     0.19703188370189 * EducationBasic  +    -0.48062640599976 *
2001723   +        EducationGraduation  +     -0.3646621736273 * EducationMaster
2001724   +          +     0.61058752124466 * Marital_StatusDivorced
2001725   +          +    -1.38793808025141 * Marital_StatusMarried
2001726   +          +     1.10060737810944 * Marital_StatusSingle
2001727   +          +    -1.21250219018366 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.38705901043652 * Education2n_Cycle + 0.19703188370189 * 
EducationBasic + -0.48062640599976 * EducationGraduation + -0.3646621736273 * EducationMaster 
+ 0.61058752124466 * Marital_StatusDivorced + -1.38793808025141 * Marital_StatusMarried + 
1.10060737810944 * Marital_StatusSingle + -1.21250219018366 * Marital_StatusTogether ;
2001728   +   H14  = H14  +    -0.20576658115662 * Education2n_Cycle
2001729   +          +    -0.09185472034614 * EducationBasic  +    -0.43674210064447 *
2001730   +        EducationGraduation  +    -0.18154054746298 * EducationMaster
2001731   +          +     0.11973800573581 * Marital_StatusDivorced
2001732   +          +      -0.294635257911 * Marital_StatusMarried
2001733   +          +    -0.05399659601172 * Marital_StatusSingle
2001734   +          +     0.34207780606239 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.20576658115662 * Education2n_Cycle + -0.09185472034614 * 
EducationBasic + -0.43674210064447 * EducationGraduation + -0.18154054746298 * EducationMaster 
+ 0.11973800573581 * Marital_StatusDivorced + -0.294635257911 * Marital_StatusMarried + 
-0.05399659601172 * Marital_StatusSingle + 0.34207780606239 * Marital_StatusTogether ;
2001735   +   H15  = H15  +    -0.05553093684862 * Education2n_Cycle
2001736   +          +    -0.12898006732329 * EducationBasic  +    -0.16064118923518 *
2001737   +        EducationGraduation  +     -0.6431539624694 * EducationMaster
2001738   +          +     0.42838191659864 * Marital_StatusDivorced
2001739   +          +    -0.09150349181363 * Marital_StatusMarried
2001740   +          +    -0.33520164145276 * Marital_StatusSingle
2001741   +          +    -0.15253738713197 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.05553093684862 * Education2n_Cycle + -0.12898006732329 * 
EducationBasic + -0.16064118923518 * EducationGraduation + -0.6431539624694 * EducationMaster 
+ 0.42838191659864 * Marital_StatusDivorced + -0.09150349181363 * Marital_StatusMarried + 
-0.33520164145276 * Marital_StatusSingle + -0.15253738713197 * Marital_StatusTogether ;
2001742   +   H11  =     -1.5079478405973 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.5079478405973 + H11 ;
2001743   +   H12  =     0.03014958331993 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.03014958331993 + H12 ;
2001744   +   H13  =    -1.78098671165572 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.78098671165572 + H13 ;
2001745   +   H14  =     0.22179429743277 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.22179429743277 + H14 ;
2001746   +   H15  =    -2.06602107857898 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.06602107857898 + H15 ;
2001747   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2001748   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2001749   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2001750   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2001751   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2001752   +END;
MPRINT(EM_DIAGRAM):   END;
2001753   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2001754   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2001755   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2001756   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2001757   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2001758   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2001759   +END;
MPRINT(EM_DIAGRAM):   END;
2001760   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001761   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2001762   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001763   +
2001764   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2001765   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2001766   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2001767   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2001768   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2001769   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001770   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2001771   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2001772   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2001773   +end;
MPRINT(EM_DIAGRAM):   end;
2001774   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001775   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2001776   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2001777   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2001778   +   end;
MPRINT(EM_DIAGRAM):   end;
2001779   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2001780   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2001781   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2001782   +   end;
MPRINT(EM_DIAGRAM):   end;
2001783   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001784   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2001785   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2001786   +   end;
MPRINT(EM_DIAGRAM):   end;
2001787   +end;
MPRINT(EM_DIAGRAM):   end;
2001788   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2001789   +   P_DepVar1  =    -4.55666337815854 * H11  +    -4.04792544554995 * H12
2001790   +          +     4.56148127429284 * H13  +     2.36841344452371 * H14
2001791   +          +    -3.07371010011749 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.55666337815854 * H11 + -4.04792544554995 * H12 + 
4.56148127429284 * H13 + 2.36841344452371 * H14 + -3.07371010011749 * H15 ;
2001792   +   P_DepVar1  =    -0.83283406236136 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.83283406236136 + P_DepVar1 ;
2001793   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2001794   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2001795   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2001796   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2001797   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2001798   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2001799   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2001800   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2001801   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2001802   +END;
MPRINT(EM_DIAGRAM):   END;
2001803   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2001804   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2001805   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2001806   +END;
MPRINT(EM_DIAGRAM):   END;
2001807   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2001808   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2001809   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2001810   +END;
MPRINT(EM_DIAGRAM):   END;
2001811   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2001812   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2001813   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2001814   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2001815   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2001816   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2001817   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2001818   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001819   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2001820   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2001821   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2001822   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2001823   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2001824   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2001825   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2001826   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2001827   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2001828   +END;
MPRINT(EM_DIAGRAM):   END;
2001829   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2001830   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2001831   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2001832   +drop
2001833   +H11
2001834   +H12
2001835   +H13
2001836   +H14
2001837   +H15
2001838   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
2001839   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2001840   +* Renaming variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural34;
2001841   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001842   +* Renaming Posterior variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural34;
2001843   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001844   +drop Neural34_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar1;
2001845   +Neural34_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar1 = P_DepVar1;
2001846   +drop Neural34_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar0;
2001847   +Neural34_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar0 = P_DepVar0;
2001848   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001849   +* Renaming _WARN_ variable for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural34;
2001850   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001851   +length Neural34_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural34_WARN_ $4;
2001852   +drop Neural34_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural34_WARN_;
2001853   +Neural34_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural34_WARN_ = _WARN_;
2001854   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001855   +* Ensmbl10: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 3 of 3;
2001856   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001857   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001858   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2001859   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2001860   +* NODE: Neural32;
MPRINT(EM_DIAGRAM):   * NODE: Neural32;
2001861   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2001862   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2001863   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2001864   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2001865   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2001866   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2001867   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2001868   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2001869   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2001870   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2001871   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2001872   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2001873   +LENGTH _WARN_ $4
2001874   +      F_DepVar  $ 12
2001875   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2001876   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2001877   +
2001878   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2001879   +
2001880   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2001881   +
2001882   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2001883   +
2001884   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2001885   +
2001886   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2001887   +
2001888   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2001889   +
2001890   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2001891   +
2001892   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2001893   +
2001894   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2001895   +
2001896   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2001897   +
2001898   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2001899   +
2001900   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2001901   +
2001902   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2001903   +
2001904   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2001905   +
2001906   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2001907   +
2001908   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2001909   +
2001910   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2001911   +
2001912   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2001913   +
2001914   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2001915   +
2001916   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2001917   +
2001918   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2001919   +
2001920   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2001921   +
2001922   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2001923   +
2001924   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2001925   +
2001926   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2001927   +
2001928   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2001929   +
2001930   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2001931   +
2001932   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2001933   +
2001934   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2001935   +
2001936   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2001937   +
2001938   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2001939   +
2001940   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2001941   +
2001942   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2001943   +
2001944   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2001945   +
2001946   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2001947   +
2001948   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2001949   +
2001950   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2001951   +
2001952   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2001953   +
2001954   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2001955   +
2001956   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2001957   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2001958   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2001959   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2001960   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001961   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001962   +end;
MPRINT(EM_DIAGRAM):   end;
2001963   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001964   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001965   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2001966   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001967   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001968   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2001969   +   end;
MPRINT(EM_DIAGRAM):   end;
2001970   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001971   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2001972   +   end;
MPRINT(EM_DIAGRAM):   end;
2001973   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001974   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2001975   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2001976   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001977   +   end;
MPRINT(EM_DIAGRAM):   end;
2001978   +end;
MPRINT(EM_DIAGRAM):   end;
2001979   +
2001980   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2001981   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2001982   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2001983   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2001984   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2001985   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2001986   +end;
MPRINT(EM_DIAGRAM):   end;
2001987   +else do;
MPRINT(EM_DIAGRAM):   else do;
2001988   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2001989   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2001990   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2001991   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2001992   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2001993   +   end;
MPRINT(EM_DIAGRAM):   end;
2001994   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2001995   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2001996   +   end;
MPRINT(EM_DIAGRAM):   end;
2001997   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2001998   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2001999   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002000   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002001   +   end;
MPRINT(EM_DIAGRAM):   end;
2002002   +end;
MPRINT(EM_DIAGRAM):   end;
2002003   +
2002004   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2002005   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2002006   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2002007   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2002008   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002009   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002010   +end;
MPRINT(EM_DIAGRAM):   end;
2002011   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002012   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002013   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2002014   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002015   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002016   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2002017   +   end;
MPRINT(EM_DIAGRAM):   end;
2002018   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002019   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2002020   +   end;
MPRINT(EM_DIAGRAM):   end;
2002021   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002022   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2002023   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002024   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002025   +   end;
MPRINT(EM_DIAGRAM):   end;
2002026   +end;
MPRINT(EM_DIAGRAM):   end;
2002027   +
2002028   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2002029   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2002030   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2002031   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2002032   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002033   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002034   +end;
MPRINT(EM_DIAGRAM):   end;
2002035   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002036   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002037   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2002038   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002039   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002040   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2002041   +   end;
MPRINT(EM_DIAGRAM):   end;
2002042   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002043   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2002044   +   end;
MPRINT(EM_DIAGRAM):   end;
2002045   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002046   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2002047   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002048   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002049   +   end;
MPRINT(EM_DIAGRAM):   end;
2002050   +end;
MPRINT(EM_DIAGRAM):   end;
2002051   +
2002052   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2002053   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2002054   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2002055   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2002056   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002057   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002058   +end;
MPRINT(EM_DIAGRAM):   end;
2002059   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002060   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002061   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2002062   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002063   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002064   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2002065   +   end;
MPRINT(EM_DIAGRAM):   end;
2002066   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002067   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2002068   +   end;
MPRINT(EM_DIAGRAM):   end;
2002069   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002070   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2002071   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002072   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002073   +   end;
MPRINT(EM_DIAGRAM):   end;
2002074   +end;
MPRINT(EM_DIAGRAM):   end;
2002075   +
2002076   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2002077   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2002078   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2002079   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2002080   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002081   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002082   +end;
MPRINT(EM_DIAGRAM):   end;
2002083   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002084   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002085   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2002086   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002087   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002088   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2002089   +   end;
MPRINT(EM_DIAGRAM):   end;
2002090   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002091   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2002092   +   end;
MPRINT(EM_DIAGRAM):   end;
2002093   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002094   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2002095   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002096   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002097   +   end;
MPRINT(EM_DIAGRAM):   end;
2002098   +end;
MPRINT(EM_DIAGRAM):   end;
2002099   +
2002100   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2002101   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2002102   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2002103   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2002104   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2002105   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2002106   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2002107   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2002108   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2002109   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2002110   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2002111   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2002112   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002113   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002114   +end;
MPRINT(EM_DIAGRAM):   end;
2002115   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002116   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2002117   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2002118   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002119   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2002120   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2002121   +   end;
MPRINT(EM_DIAGRAM):   end;
2002122   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2002123   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2002124   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2002125   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2002126   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2002127   +   end;
MPRINT(EM_DIAGRAM):   end;
2002128   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2002129   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2002130   +   end;
MPRINT(EM_DIAGRAM):   end;
2002131   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2002132   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2002133   +   end;
MPRINT(EM_DIAGRAM):   end;
2002134   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2002135   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2002136   +   end;
MPRINT(EM_DIAGRAM):   end;
2002137   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002138   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2002139   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2002140   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2002141   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2002142   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002143   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002144   +   end;
MPRINT(EM_DIAGRAM):   end;
2002145   +end;
MPRINT(EM_DIAGRAM):   end;
2002146   +
2002147   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2002148   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2002149   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2002150   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2002151   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2002152   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2002153   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2002154   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2002155   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2002156   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2002157   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2002158   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2002159   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2002160   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002161   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002162   +end;
MPRINT(EM_DIAGRAM):   end;
2002163   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002164   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2002165   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2002166   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002167   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2002168   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2002169   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2002170   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2002171   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2002172   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002173   +         end;
MPRINT(EM_DIAGRAM):   end;
2002174   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2002175   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2002176   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2002177   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002178   +            end;
MPRINT(EM_DIAGRAM):   end;
2002179   +         end;
MPRINT(EM_DIAGRAM):   end;
2002180   +      end;
MPRINT(EM_DIAGRAM):   end;
2002181   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2002182   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2002183   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2002184   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002185   +         end;
MPRINT(EM_DIAGRAM):   end;
2002186   +      end;
MPRINT(EM_DIAGRAM):   end;
2002187   +   end;
MPRINT(EM_DIAGRAM):   end;
2002188   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002189   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2002190   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2002191   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002192   +      end;
MPRINT(EM_DIAGRAM):   end;
2002193   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2002194   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2002195   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2002196   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2002197   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2002198   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2002199   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002200   +         end;
MPRINT(EM_DIAGRAM):   end;
2002201   +      end;
MPRINT(EM_DIAGRAM):   end;
2002202   +   end;
MPRINT(EM_DIAGRAM):   end;
2002203   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2002204   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2002205   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2002206   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2002207   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2002208   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002209   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002210   +   end;
MPRINT(EM_DIAGRAM):   end;
2002211   +end;
MPRINT(EM_DIAGRAM):   end;
2002212   +
2002213   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002214   +*** Checking missing input Interval
2002215   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2002216   +
2002217   +IF NMISS(
2002218   +   Income ,
2002219   +   Kidhome ,
2002220   +   MntFishProducts ,
2002221   +   MntFruits ,
2002222   +   MntGoldProds ,
2002223   +   MntMeatProducts ,
2002224   +   MntSweetProducts ,
2002225   +   MntWines ,
2002226   +   NumCatalogPurchases ,
2002227   +   NumDealsPurchases ,
2002228   +   NumStorePurchases ,
2002229   +   NumWebPurchases ,
2002230   +   NumWebVisitsMonth ,
2002231   +   Recency ,
2002232   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2002233   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2002234   +
2002235   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002236   +END;
MPRINT(EM_DIAGRAM):   END;
2002237   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002238   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2002239   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002240   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2002241   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2002242   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2002243   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2002244   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2002245   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2002246   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2002247   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2002248   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2002249   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2002250   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2002251   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2002252   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2002253   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2002254   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2002255   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2002256   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2002257   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2002258   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2002259   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2002260   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2002261   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2002262   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2002263   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2002264   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2002265   +END;
MPRINT(EM_DIAGRAM):   END;
2002266   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2002267   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2002268   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2002269   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2002270   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2002271   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2002272   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2002273   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2002274   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2002275   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2002276   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2002277   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2002278   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2002279   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2002280   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2002281   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2002282   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2002283   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2002284   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2002285   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2002286   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2002287   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2002288   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2002289   +   ELSE S_NumCatalogPurchases
2002290   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2002291   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2002292   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2002293   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2002294   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2002295   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2002296   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2002297   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2002298   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2002299   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2002300   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2002301   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2002302   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2002303   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2002304   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2002305   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2002306   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2002307   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2002308   +END;
MPRINT(EM_DIAGRAM):   END;
2002309   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002310   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2002311   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002312   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002313   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2002314   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002315   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002316   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2002317   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002318   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2002319   +   H11  =     1.40261108800308 * S_Income  +     -0.8062097507842 * S_Kidhome
2002320   +          +    -0.12974862644982 * S_MntFishProducts
2002321   +          +     0.08065642800368 * S_MntFruits  +    -0.12102130003972 *
2002322   +        S_MntGoldProds  +     0.19226249622126 * S_MntMeatProducts
2002323   +          +    -0.12290326901613 * S_MntSweetProducts
2002324   +          +     0.07790241176978 * S_MntWines  +     0.36123042724896 *
2002325   +        S_NumCatalogPurchases  +    -0.01034406765754 * S_NumDealsPurchases
2002326   +          +     0.09738032540137 * S_NumStorePurchases
2002327   +          +     0.44459515215205 * S_NumWebPurchases
2002328   +          +      0.8471075994578 * S_NumWebVisitsMonth
2002329   +          +    -1.10667985160899 * S_Recency  +    -0.88509832868515 *
2002330   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 1.40261108800308 * S_Income + -0.8062097507842 * S_Kidhome + 
-0.12974862644982 * S_MntFishProducts + 0.08065642800368 * S_MntFruits + -0.12102130003972 * 
S_MntGoldProds + 0.19226249622126 * S_MntMeatProducts + -0.12290326901613 * S_MntSweetProducts 
+ 0.07790241176978 * S_MntWines + 0.36123042724896 * S_NumCatalogPurchases + -0.01034406765754 
* S_NumDealsPurchases + 0.09738032540137 * S_NumStorePurchases + 0.44459515215205 * 
S_NumWebPurchases + 0.8471075994578 * S_NumWebVisitsMonth + -1.10667985160899 * S_Recency + 
-0.88509832868515 * S_Teenhome ;
2002331   +   H12  =     0.51266936686642 * S_Income  +     0.26909433357851 * S_Kidhome
2002332   +          +     0.02406077596811 * S_MntFishProducts
2002333   +          +    -0.57443793453522 * S_MntFruits  +     0.36824731232149 *
2002334   +        S_MntGoldProds  +     0.40177289143061 * S_MntMeatProducts
2002335   +          +     -0.1147507059349 * S_MntSweetProducts
2002336   +          +    -0.66379351187459 * S_MntWines  +     1.33407347415468 *
2002337   +        S_NumCatalogPurchases  +     1.00633891197299 * S_NumDealsPurchases
2002338   +          +    -0.23920969262322 * S_NumStorePurchases
2002339   +          +     -0.6008837862932 * S_NumWebPurchases
2002340   +          +     0.26759743722885 * S_NumWebVisitsMonth
2002341   +          +    -0.42755419464125 * S_Recency  +    -0.14471776361394 *
2002342   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.51266936686642 * S_Income + 0.26909433357851 * S_Kidhome + 
0.02406077596811 * S_MntFishProducts + -0.57443793453522 * S_MntFruits + 0.36824731232149 * 
S_MntGoldProds + 0.40177289143061 * S_MntMeatProducts + -0.1147507059349 * S_MntSweetProducts 
+ -0.66379351187459 * S_MntWines + 1.33407347415468 * S_NumCatalogPurchases + 1.00633891197299 
* S_NumDealsPurchases + -0.23920969262322 * S_NumStorePurchases + -0.6008837862932 * 
S_NumWebPurchases + 0.26759743722885 * S_NumWebVisitsMonth + -0.42755419464125 * S_Recency + 
-0.14471776361394 * S_Teenhome ;
2002343   +   H13  =    -0.19807308698832 * S_Income  +     0.25934675474849 * S_Kidhome
2002344   +          +     0.04398331533724 * S_MntFishProducts
2002345   +          +    -0.00090357598988 * S_MntFruits  +     0.05139545341773 *
2002346   +        S_MntGoldProds  +    -0.74617114336019 * S_MntMeatProducts
2002347   +          +     0.00552488718744 * S_MntSweetProducts
2002348   +          +     0.47194407197012 * S_MntWines  +    -0.35149551848487 *
2002349   +        S_NumCatalogPurchases  +    -0.30232522133093 * S_NumDealsPurchases
2002350   +          +     0.60058189155105 * S_NumStorePurchases
2002351   +          +     0.51423374855856 * S_NumWebPurchases
2002352   +          +     -0.9075304423321 * S_NumWebVisitsMonth
2002353   +          +     0.83597739226791 * S_Recency  +     0.15783202762709 *
2002354   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.19807308698832 * S_Income + 0.25934675474849 * S_Kidhome + 
0.04398331533724 * S_MntFishProducts + -0.00090357598988 * S_MntFruits + 0.05139545341773 * 
S_MntGoldProds + -0.74617114336019 * S_MntMeatProducts + 0.00552488718744 * S_MntSweetProducts 
+ 0.47194407197012 * S_MntWines + -0.35149551848487 * S_NumCatalogPurchases + 
-0.30232522133093 * S_NumDealsPurchases + 0.60058189155105 * S_NumStorePurchases + 
0.51423374855856 * S_NumWebPurchases + -0.9075304423321 * S_NumWebVisitsMonth + 
0.83597739226791 * S_Recency + 0.15783202762709 * S_Teenhome ;
2002355   +   H11  = H11  +    -0.26274045665457 * AcceptedCmp10
2002356   +          +    -0.86105702939371 * AcceptedCmp20  +    -0.50476270558977 *
2002357   +        AcceptedCmp30  +    -0.84284126473343 * AcceptedCmp40
2002358   +          +     0.19764907691314 * AcceptedCmp50  +    -0.29305577412263 *
2002359   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.26274045665457 * AcceptedCmp10 + -0.86105702939371 * 
AcceptedCmp20 + -0.50476270558977 * AcceptedCmp30 + -0.84284126473343 * AcceptedCmp40 + 
0.19764907691314 * AcceptedCmp50 + -0.29305577412263 * Complain0 ;
2002360   +   H12  = H12  +    -0.27394139847883 * AcceptedCmp10
2002361   +          +    -0.14688750266104 * AcceptedCmp20  +    -0.27982299242327 *
2002362   +        AcceptedCmp30  +    -0.10465140408787 * AcceptedCmp40
2002363   +          +    -0.81681330244218 * AcceptedCmp50  +    -0.28152730217644 *
2002364   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.27394139847883 * AcceptedCmp10 + -0.14688750266104 * 
AcceptedCmp20 + -0.27982299242327 * AcceptedCmp30 + -0.10465140408787 * AcceptedCmp40 + 
-0.81681330244218 * AcceptedCmp50 + -0.28152730217644 * Complain0 ;
2002365   +   H13  = H13  +     0.42310780831005 * AcceptedCmp10
2002366   +          +     0.41337614261155 * AcceptedCmp20  +     0.41436520641821 *
2002367   +        AcceptedCmp30  +     0.08914989208239 * AcceptedCmp40
2002368   +          +     0.54013759697695 * AcceptedCmp50  +    -0.19478210268955 *
2002369   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.42310780831005 * AcceptedCmp10 + 0.41337614261155 * 
AcceptedCmp20 + 0.41436520641821 * AcceptedCmp30 + 0.08914989208239 * AcceptedCmp40 + 
0.54013759697695 * AcceptedCmp50 + -0.19478210268955 * Complain0 ;
2002370   +   H11  = H11  +     0.40331200702699 * Education2n_Cycle
2002371   +          +     0.17202421641945 * EducationBasic  +    -0.29654161092174 *
2002372   +        EducationGraduation  +     -0.4835104183635 * EducationMaster
2002373   +          +     0.52129580188513 * Marital_StatusDivorced
2002374   +          +     -1.5224490339553 * Marital_StatusMarried
2002375   +          +     1.05062906057771 * Marital_StatusSingle
2002376   +          +    -1.16420887937635 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.40331200702699 * Education2n_Cycle + 0.17202421641945 * 
EducationBasic + -0.29654161092174 * EducationGraduation + -0.4835104183635 * EducationMaster 
+ 0.52129580188513 * Marital_StatusDivorced + -1.5224490339553 * Marital_StatusMarried + 
1.05062906057771 * Marital_StatusSingle + -1.16420887937635 * Marital_StatusTogether ;
2002377   +   H12  = H12  +     -0.3488928858263 * Education2n_Cycle
2002378   +          +     0.38279680594423 * EducationBasic  +     0.20376044836519 *
2002379   +        EducationGraduation  +     0.20697694670185 * EducationMaster
2002380   +          +    -0.14428158063317 * Marital_StatusDivorced
2002381   +          +     0.22396926143356 * Marital_StatusMarried
2002382   +          +    -0.12980854818876 * Marital_StatusSingle
2002383   +          +     0.32607015627906 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.3488928858263 * Education2n_Cycle + 0.38279680594423 * 
EducationBasic + 0.20376044836519 * EducationGraduation + 0.20697694670185 * EducationMaster + 
-0.14428158063317 * Marital_StatusDivorced + 0.22396926143356 * Marital_StatusMarried + 
-0.12980854818876 * Marital_StatusSingle + 0.32607015627906 * Marital_StatusTogether ;
2002384   +   H13  = H13  +    -0.18351418824199 * Education2n_Cycle
2002385   +          +     0.53417952447263 * EducationBasic  +    -0.14333929289628 *
2002386   +        EducationGraduation  +     0.04513004774082 * EducationMaster
2002387   +          +    -0.25615797303064 * Marital_StatusDivorced
2002388   +          +     0.18825506199046 * Marital_StatusMarried
2002389   +          +    -0.24607556819871 * Marital_StatusSingle
2002390   +          +     0.29531673844201 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.18351418824199 * Education2n_Cycle + 0.53417952447263 * 
EducationBasic + -0.14333929289628 * EducationGraduation + 0.04513004774082 * EducationMaster 
+ -0.25615797303064 * Marital_StatusDivorced + 0.18825506199046 * Marital_StatusMarried + 
-0.24607556819871 * Marital_StatusSingle + 0.29531673844201 * Marital_StatusTogether ;
2002391   +   H11  =    -1.29289362679377 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.29289362679377 + H11 ;
2002392   +   H12  =     0.88724419151235 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.88724419151235 + H12 ;
2002393   +   H13  =    -0.51194544699467 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.51194544699467 + H13 ;
2002394   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2002395   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2002396   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2002397   +END;
MPRINT(EM_DIAGRAM):   END;
2002398   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2002399   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2002400   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2002401   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2002402   +END;
MPRINT(EM_DIAGRAM):   END;
2002403   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002404   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2002405   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002406   +
2002407   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2002408   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2002409   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2002410   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2002411   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2002412   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002413   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2002414   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2002415   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2002416   +end;
MPRINT(EM_DIAGRAM):   end;
2002417   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002418   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2002419   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2002420   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2002421   +   end;
MPRINT(EM_DIAGRAM):   end;
2002422   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2002423   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2002424   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2002425   +   end;
MPRINT(EM_DIAGRAM):   end;
2002426   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002427   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2002428   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2002429   +   end;
MPRINT(EM_DIAGRAM):   end;
2002430   +end;
MPRINT(EM_DIAGRAM):   end;
2002431   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2002432   +   P_DepVar1  =     4.44251020865882 * H11  +     2.67139161773156 * H12
2002433   +          +    -4.73549395111184 * H13 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.44251020865882 * H11 + 2.67139161773156 * H12 + 
-4.73549395111184 * H13 ;
2002434   +   P_DepVar1  =     0.45492690116644 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.45492690116644 + P_DepVar1 ;
2002435   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2002436   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2002437   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2002438   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2002439   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2002440   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2002441   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2002442   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2002443   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2002444   +END;
MPRINT(EM_DIAGRAM):   END;
2002445   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2002446   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2002447   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2002448   +END;
MPRINT(EM_DIAGRAM):   END;
2002449   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2002450   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2002451   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2002452   +END;
MPRINT(EM_DIAGRAM):   END;
2002453   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2002454   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2002455   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2002456   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2002457   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2002458   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2002459   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2002460   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002461   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2002462   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2002463   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2002464   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2002465   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2002466   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2002467   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2002468   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2002469   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2002470   +END;
MPRINT(EM_DIAGRAM):   END;
2002471   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2002472   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2002473   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2002474   +drop
2002475   +H11
2002476   +H12
2002477   +H13
2002478   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
2002479   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2002480   +* Renaming variables for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural32;
2002481   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002482   +* Renaming Posterior variables for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural32;
2002483   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002484   +drop Neural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural32_P_DepVar1;
2002485   +Neural32_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural32_P_DepVar1 = P_DepVar1;
2002486   +drop Neural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural32_P_DepVar0;
2002487   +Neural32_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural32_P_DepVar0 = P_DepVar0;
2002488   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002489   +* Renaming _WARN_ variable for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural32;
2002490   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002491   +length Neural32_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural32_WARN_ $4;
2002492   +drop Neural32_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural32_WARN_;
2002493   +Neural32_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural32_WARN_ = _WARN_;
2002494   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002495   +* Ensmbl10: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Average Posteriors of 3 models;
2002496   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002497   +P_DepVar1 = (
2002498   +Neural35_P_DepVar1 +
2002499   +Neural34_P_DepVar1 +
2002500   +Neural32_P_DepVar1
2002501   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural35_P_DepVar1 + Neural34_P_DepVar1 + 
Neural32_P_DepVar1 )/3;
2002502   +P_DepVar0 = (
2002503   +Neural35_P_DepVar0 +
2002504   +Neural34_P_DepVar0 +
2002505   +Neural32_P_DepVar0
2002506   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural35_P_DepVar0 + Neural34_P_DepVar0 + 
Neural32_P_DepVar0 )/3;
2002507   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002508   +* Ensmbl10: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Classification Vars;
2002509   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002510   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
2002511   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
2002512   +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
2002513   +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
2002514   +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
2002515   +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
2002516   +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
2002517   +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
2002518   +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
2002519   +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
2002520   +end;
MPRINT(EM_DIAGRAM):   end;
2002521   +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
2002522   +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
2002523   +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
2002524   +end;
MPRINT(EM_DIAGRAM):   end;
2002525   +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2002526   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002527   +* Ensmbl10: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Producing Unformatted variable;
2002528   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002529   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
2002530   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
2002531   +else
2002532   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
2002533   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002534   +* Ensmbl10: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing _WARN_ Variable;
2002535   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002536   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
2002537   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
2002538   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
2002539   +if index(NEURAL35_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2002539  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2002540   +if index(NEURAL35_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2002540  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2002541   +if index(NEURAL35_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2002541  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2002542   +if index(NEURAL35_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2002542  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2002543   +if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2002543  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2002544   +if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2002544  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2002545   +if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2002545  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2002546   +if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2002546  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2002547   +if index(NEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2002547  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2002548   +if index(NEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2002548  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2002549   +if index(NEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2002549  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2002550   +if index(NEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2002550  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2002551   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002552   +* Ensmbl10: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Residual Vars;
2002553   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002554   +if
2002555   +F_DepVar NE '1'
2002556   +AND F_DepVar NE '0'
2002557   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
2002558   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
2002559   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
2002560   +end;
MPRINT(EM_DIAGRAM):   end;
2002561   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002562   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
2002563   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
2002564   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
2002565   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
2002566   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
2002567   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
2002568   +END;
MPRINT(EM_DIAGRAM):   END;
2002569   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2002570    run;

NOTE: DATA STEP view saved on file EMWS8.ENSMBL10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL35_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2002571    quit;
2002572    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
2002573    filename emflow
2002573  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring NEURAL35_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002574    *------------------------------------------------------------*;
2002575    * Ensmbl10: Scoring NEURAL35_VALIDATE data;
2002576    *------------------------------------------------------------*;
2002577    data EMWS8.Ensmbl10_VALIDATE
2002578    / view=EMWS8.Ensmbl10_VALIDATE
2002579    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_VALIDATE / view=EMWS8.Ensmbl10_VALIDATE ;
2002580    set EMWS8.Neural35_VALIDATE
2002581    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural35_VALIDATE ;
2002582    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\EMFLOWSCORE.sas.
2002583   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002584   +* Ensmbl10: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Combine model for DepVar;
2002585   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002586   +* Ensmbl10: Scoring Code of model 1 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 1 of 3;
2002587   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002588   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002589   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
2002590   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
2002591   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
2002592   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002593   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002594   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
2002595   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
2002596   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
2002597   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002598   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002599   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
2002600   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
2002601   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
2002602   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002603   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002604   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
2002605   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
2002606   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
2002607   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002608   +
2002609   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
2002610   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
2002610  !+es;
MPRINT(EM_DIAGRAM):   
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
2002611   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
2002612   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
2002613   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
2002614   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
2002615   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
2002616   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002617   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
2002618   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
2002619   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
2002620   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002621   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002622   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
2002623   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002624   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
2002625   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
2002626   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
2002627   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002628   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
2002629   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
2002630   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
2002631   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002632   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002633   +* TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
2002634   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
2002635   +* NODE: Meta2;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
2002636   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002637   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002638   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2002639   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2002640   +* NODE: Neural35;
MPRINT(EM_DIAGRAM):   * NODE: Neural35;
2002641   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2002642   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2002643   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2002644   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2002645   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2002646   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2002647   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2002648   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2002649   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2002650   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2002651   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2002652   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2002653   +LENGTH _WARN_ $4
2002654   +      F_DepVar  $ 12
2002655   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2002656   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2002657   +
2002658   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2002659   +
2002660   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2002661   +
2002662   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2002663   +
2002664   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2002665   +
2002666   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2002667   +
2002668   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2002669   +
2002670   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2002671   +
2002672   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2002673   +
2002674   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2002675   +
2002676   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2002677   +
2002678   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2002679   +
2002680   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2002681   +
2002682   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2002683   +
2002684   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2002685   +
2002686   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2002687   +
2002688   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2002689   +
2002690   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2002691   +
2002692   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2002693   +
2002694   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2002695   +
2002696   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2002697   +
2002698   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2002699   +
2002700   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2002701   +
2002702   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2002703   +
2002704   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2002705   +
2002706   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2002707   +
2002708   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2002709   +
2002710   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2002711   +
2002712   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2002713   +
2002714   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2002715   +
2002716   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2002717   +
2002718   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2002719   +
2002720   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2002721   +
2002722   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2002723   +
2002724   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
2002725   +
2002726   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2002727   +
2002728   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2002729   +
2002730   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2002731   +
2002732   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2002733   +
2002734   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2002735   +
2002736   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2002737   +
2002738   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2002739   +
2002740   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2002741   +
2002742   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2002743   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2002744   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2002745   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2002746   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002747   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002748   +end;
MPRINT(EM_DIAGRAM):   end;
2002749   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002750   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002751   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2002752   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002753   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002754   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2002755   +   end;
MPRINT(EM_DIAGRAM):   end;
2002756   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002757   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2002758   +   end;
MPRINT(EM_DIAGRAM):   end;
2002759   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002760   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2002761   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002762   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002763   +   end;
MPRINT(EM_DIAGRAM):   end;
2002764   +end;
MPRINT(EM_DIAGRAM):   end;
2002765   +
2002766   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2002767   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2002768   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2002769   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2002770   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002771   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002772   +end;
MPRINT(EM_DIAGRAM):   end;
2002773   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002774   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002775   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2002776   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002777   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002778   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2002779   +   end;
MPRINT(EM_DIAGRAM):   end;
2002780   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002781   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2002782   +   end;
MPRINT(EM_DIAGRAM):   end;
2002783   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002784   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2002785   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002786   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002787   +   end;
MPRINT(EM_DIAGRAM):   end;
2002788   +end;
MPRINT(EM_DIAGRAM):   end;
2002789   +
2002790   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2002791   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2002792   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2002793   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2002794   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002795   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002796   +end;
MPRINT(EM_DIAGRAM):   end;
2002797   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002798   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002799   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2002800   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002801   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002802   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2002803   +   end;
MPRINT(EM_DIAGRAM):   end;
2002804   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002805   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2002806   +   end;
MPRINT(EM_DIAGRAM):   end;
2002807   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002808   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2002809   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002810   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002811   +   end;
MPRINT(EM_DIAGRAM):   end;
2002812   +end;
MPRINT(EM_DIAGRAM):   end;
2002813   +
2002814   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2002815   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2002816   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2002817   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2002818   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002819   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002820   +end;
MPRINT(EM_DIAGRAM):   end;
2002821   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002822   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002823   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2002824   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002825   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002826   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2002827   +   end;
MPRINT(EM_DIAGRAM):   end;
2002828   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002829   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2002830   +   end;
MPRINT(EM_DIAGRAM):   end;
2002831   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002832   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2002833   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002834   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002835   +   end;
MPRINT(EM_DIAGRAM):   end;
2002836   +end;
MPRINT(EM_DIAGRAM):   end;
2002837   +
2002838   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2002839   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2002840   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2002841   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2002842   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002843   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002844   +end;
MPRINT(EM_DIAGRAM):   end;
2002845   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002846   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002847   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2002848   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002849   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002850   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2002851   +   end;
MPRINT(EM_DIAGRAM):   end;
2002852   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002853   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2002854   +   end;
MPRINT(EM_DIAGRAM):   end;
2002855   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002856   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2002857   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002858   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002859   +   end;
MPRINT(EM_DIAGRAM):   end;
2002860   +end;
MPRINT(EM_DIAGRAM):   end;
2002861   +
2002862   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2002863   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2002864   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2002865   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2002866   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002867   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002868   +end;
MPRINT(EM_DIAGRAM):   end;
2002869   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002870   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2002871   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2002872   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002873   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2002874   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2002875   +   end;
MPRINT(EM_DIAGRAM):   end;
2002876   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2002877   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2002878   +   end;
MPRINT(EM_DIAGRAM):   end;
2002879   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002880   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2002881   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002882   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002883   +   end;
MPRINT(EM_DIAGRAM):   end;
2002884   +end;
MPRINT(EM_DIAGRAM):   end;
2002885   +
2002886   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2002887   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2002888   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2002889   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2002890   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2002891   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2002892   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2002893   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2002894   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2002895   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2002896   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2002897   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2002898   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002899   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002900   +end;
MPRINT(EM_DIAGRAM):   end;
2002901   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002902   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2002903   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2002904   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002905   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2002906   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2002907   +   end;
MPRINT(EM_DIAGRAM):   end;
2002908   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2002909   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2002910   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2002911   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2002912   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2002913   +   end;
MPRINT(EM_DIAGRAM):   end;
2002914   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2002915   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2002916   +   end;
MPRINT(EM_DIAGRAM):   end;
2002917   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2002918   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2002919   +   end;
MPRINT(EM_DIAGRAM):   end;
2002920   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2002921   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2002922   +   end;
MPRINT(EM_DIAGRAM):   end;
2002923   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002924   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2002925   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2002926   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2002927   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2002928   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002929   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002930   +   end;
MPRINT(EM_DIAGRAM):   end;
2002931   +end;
MPRINT(EM_DIAGRAM):   end;
2002932   +
2002933   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2002934   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2002935   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2002936   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2002937   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2002938   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2002939   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2002940   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2002941   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2002942   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2002943   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2002944   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2002945   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2002946   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2002947   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002948   +end;
MPRINT(EM_DIAGRAM):   end;
2002949   +else do;
MPRINT(EM_DIAGRAM):   else do;
2002950   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2002951   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2002952   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2002953   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2002954   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2002955   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2002956   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2002957   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2002958   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002959   +         end;
MPRINT(EM_DIAGRAM):   end;
2002960   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2002961   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2002962   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2002963   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002964   +            end;
MPRINT(EM_DIAGRAM):   end;
2002965   +         end;
MPRINT(EM_DIAGRAM):   end;
2002966   +      end;
MPRINT(EM_DIAGRAM):   end;
2002967   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2002968   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2002969   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2002970   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002971   +         end;
MPRINT(EM_DIAGRAM):   end;
2002972   +      end;
MPRINT(EM_DIAGRAM):   end;
2002973   +   end;
MPRINT(EM_DIAGRAM):   end;
2002974   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2002975   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2002976   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2002977   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002978   +      end;
MPRINT(EM_DIAGRAM):   end;
2002979   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2002980   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2002981   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2002982   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2002983   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2002984   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2002985   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2002986   +         end;
MPRINT(EM_DIAGRAM):   end;
2002987   +      end;
MPRINT(EM_DIAGRAM):   end;
2002988   +   end;
MPRINT(EM_DIAGRAM):   end;
2002989   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2002990   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2002991   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2002992   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2002993   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2002994   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2002995   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2002996   +   end;
MPRINT(EM_DIAGRAM):   end;
2002997   +end;
MPRINT(EM_DIAGRAM):   end;
2002998   +
2002999   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003000   +*** Checking missing input Interval
2003001   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2003002   +
2003003   +IF NMISS(
2003004   +   Income ,
2003005   +   Kidhome ,
2003006   +   MntFishProducts ,
2003007   +   MntFruits ,
2003008   +   MntGoldProds ,
2003009   +   MntMeatProducts ,
2003010   +   MntSweetProducts ,
2003011   +   MntWines ,
2003012   +   NumCatalogPurchases ,
2003013   +   NumDealsPurchases ,
2003014   +   NumStorePurchases ,
2003015   +   NumWebPurchases ,
2003016   +   NumWebVisitsMonth ,
2003017   +   Recency ,
2003018   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2003019   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2003020   +
2003021   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003022   +END;
MPRINT(EM_DIAGRAM):   END;
2003023   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003024   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2003025   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003026   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2003027   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2003028   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2003029   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2003030   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2003031   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2003032   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2003033   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2003034   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2003035   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2003036   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2003037   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2003038   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2003039   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2003040   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2003041   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2003042   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2003043   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2003044   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2003045   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2003046   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2003047   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2003048   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2003049   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2003050   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2003051   +END;
MPRINT(EM_DIAGRAM):   END;
2003052   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2003053   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2003054   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2003055   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2003056   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2003057   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2003058   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2003059   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2003060   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2003061   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2003062   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2003063   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2003064   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2003065   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2003066   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2003067   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2003068   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2003069   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2003070   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2003071   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2003072   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2003073   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2003074   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2003075   +   ELSE S_NumCatalogPurchases
2003076   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2003077   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2003078   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2003079   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2003080   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2003081   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2003082   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2003083   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2003084   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2003085   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2003086   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2003087   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2003088   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2003089   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2003090   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2003091   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2003092   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2003093   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2003094   +END;
MPRINT(EM_DIAGRAM):   END;
2003095   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003096   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2003097   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003098   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003099   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2003100   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003101   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003102   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2003103   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003104   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2003105   +   H11  =     0.87660114046125 * S_Income  +     -0.7994451897827 * S_Kidhome
2003106   +          +    -0.08967295716195 * S_MntFishProducts
2003107   +          +     0.03184635437516 * S_MntFruits  +    -0.13860895575438 *
2003108   +        S_MntGoldProds  +     0.55790460748169 * S_MntMeatProducts
2003109   +          +    -0.02806094557115 * S_MntSweetProducts
2003110   +          +    -0.14537763592724 * S_MntWines  +     0.76891266523847 *
2003111   +        S_NumCatalogPurchases  +     0.16842007461305 * S_NumDealsPurchases
2003112   +          +     0.25137876058262 * S_NumStorePurchases
2003113   +          +    -0.07865442401292 * S_NumWebPurchases
2003114   +          +     1.03197398967259 * S_NumWebVisitsMonth
2003115   +          +    -1.26907156503759 * S_Recency  +    -0.76016893316351 *
2003116   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 0.87660114046125 * S_Income + -0.7994451897827 * S_Kidhome + 
-0.08967295716195 * S_MntFishProducts + 0.03184635437516 * S_MntFruits + -0.13860895575438 * 
S_MntGoldProds + 0.55790460748169 * S_MntMeatProducts + -0.02806094557115 * S_MntSweetProducts 
+ -0.14537763592724 * S_MntWines + 0.76891266523847 * S_NumCatalogPurchases + 0.16842007461305 
* S_NumDealsPurchases + 0.25137876058262 * S_NumStorePurchases + -0.07865442401292 * 
S_NumWebPurchases + 1.03197398967259 * S_NumWebVisitsMonth + -1.26907156503759 * S_Recency + 
-0.76016893316351 * S_Teenhome ;
2003117   +   H12  =     0.37295000114468 * S_Income  +    -0.12834211496575 * S_Kidhome
2003118   +          +     0.19312392388912 * S_MntFishProducts
2003119   +          +      0.1561688289137 * S_MntFruits  +     0.04004810938796 *
2003120   +        S_MntGoldProds  +     0.32599201739588 * S_MntMeatProducts
2003121   +          +       0.204174263605 * S_MntSweetProducts
2003122   +          +    -0.11560784817014 * S_MntWines  +     0.12255073568725 *
2003123   +        S_NumCatalogPurchases  +    -0.05543734180218 * S_NumDealsPurchases
2003124   +          +     0.07747830335769 * S_NumStorePurchases
2003125   +          +     0.07960837555191 * S_NumWebPurchases
2003126   +          +     0.02351602389122 * S_NumWebVisitsMonth
2003127   +          +     -0.2840853952427 * S_Recency  +    -0.47421627761687 *
2003128   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.37295000114468 * S_Income + -0.12834211496575 * S_Kidhome + 
0.19312392388912 * S_MntFishProducts + 0.1561688289137 * S_MntFruits + 0.04004810938796 * 
S_MntGoldProds + 0.32599201739588 * S_MntMeatProducts + 0.204174263605 * S_MntSweetProducts + 
-0.11560784817014 * S_MntWines + 0.12255073568725 * S_NumCatalogPurchases + -0.05543734180218 
* S_NumDealsPurchases + 0.07747830335769 * S_NumStorePurchases + 0.07960837555191 * 
S_NumWebPurchases + 0.02351602389122 * S_NumWebVisitsMonth + -0.2840853952427 * S_Recency + 
-0.47421627761687 * S_Teenhome ;
2003129   +   H13  =    -0.33428925248315 * S_Income  +    -0.03845622730742 * S_Kidhome
2003130   +          +     0.18733919794636 * S_MntFishProducts
2003131   +          +     0.45907982190052 * S_MntFruits  +    -0.48776616433719 *
2003132   +        S_MntGoldProds  +    -0.41340481007204 * S_MntMeatProducts
2003133   +          +     0.42514606159239 * S_MntSweetProducts
2003134   +          +     0.20038001368787 * S_MntWines  +    -1.21708501803782 *
2003135   +        S_NumCatalogPurchases  +    -1.06820061274533 * S_NumDealsPurchases
2003136   +          +     0.36582106462789 * S_NumStorePurchases
2003137   +          +     0.04244777020435 * S_NumWebPurchases
2003138   +          +    -0.24296342902503 * S_NumWebVisitsMonth
2003139   +          +     0.27451716762947 * S_Recency  +     0.13110477325277 *
2003140   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.33428925248315 * S_Income + -0.03845622730742 * S_Kidhome + 
0.18733919794636 * S_MntFishProducts + 0.45907982190052 * S_MntFruits + -0.48776616433719 * 
S_MntGoldProds + -0.41340481007204 * S_MntMeatProducts + 0.42514606159239 * S_MntSweetProducts 
+ 0.20038001368787 * S_MntWines + -1.21708501803782 * S_NumCatalogPurchases + 
-1.06820061274533 * S_NumDealsPurchases + 0.36582106462789 * S_NumStorePurchases + 
0.04244777020435 * S_NumWebPurchases + -0.24296342902503 * S_NumWebVisitsMonth + 
0.27451716762947 * S_Recency + 0.13110477325277 * S_Teenhome ;
2003141   +   H14  =    -0.70493412542585 * S_Income  +     0.41202796606799 * S_Kidhome
2003142   +          +     0.05986489897572 * S_MntFishProducts
2003143   +          +    -0.05040531715469 * S_MntFruits  +       0.051068387592 *
2003144   +        S_MntGoldProds  +    -0.13581881662481 * S_MntMeatProducts
2003145   +          +    -0.05513370461072 * S_MntSweetProducts
2003146   +          +     0.77472084468819 * S_MntWines  +    -0.03211788969126 *
2003147   +        S_NumCatalogPurchases  +    -0.24097486430988 * S_NumDealsPurchases
2003148   +          +     0.64364674828841 * S_NumStorePurchases
2003149   +          +     0.15084748708424 * S_NumWebPurchases
2003150   +          +    -0.94144998356377 * S_NumWebVisitsMonth
2003151   +          +     1.16778338364599 * S_Recency  +     0.32089861635238 *
2003152   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = -0.70493412542585 * S_Income + 0.41202796606799 * S_Kidhome + 
0.05986489897572 * S_MntFishProducts + -0.05040531715469 * S_MntFruits + 0.051068387592 * 
S_MntGoldProds + -0.13581881662481 * S_MntMeatProducts + -0.05513370461072 * 
S_MntSweetProducts + 0.77472084468819 * S_MntWines + -0.03211788969126 * S_NumCatalogPurchases 
+ -0.24097486430988 * S_NumDealsPurchases + 0.64364674828841 * S_NumStorePurchases + 
0.15084748708424 * S_NumWebPurchases + -0.94144998356377 * S_NumWebVisitsMonth + 
1.16778338364599 * S_Recency + 0.32089861635238 * S_Teenhome ;
2003153   +   H15  =    -0.15703510827879 * S_Income  +    -0.30977841002562 * S_Kidhome
2003154   +          +    -0.14543196273578 * S_MntFishProducts
2003155   +          +     0.32223695896711 * S_MntFruits  +    -0.31846203211698 *
2003156   +        S_MntGoldProds  +     -1.4125160823105 * S_MntMeatProducts
2003157   +          +     0.49374793444169 * S_MntSweetProducts
2003158   +          +     0.39699716010219 * S_MntWines  +    -0.88140331687645 *
2003159   +        S_NumCatalogPurchases  +    -0.87657222813687 * S_NumDealsPurchases
2003160   +          +     1.23754786782746 * S_NumStorePurchases
2003161   +          +     1.11316667348511 * S_NumWebPurchases
2003162   +          +    -1.08592446439781 * S_NumWebVisitsMonth
2003163   +          +     0.66958517589542 * S_Recency  +     0.06799032788481 *
2003164   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.15703510827879 * S_Income + -0.30977841002562 * S_Kidhome + 
-0.14543196273578 * S_MntFishProducts + 0.32223695896711 * S_MntFruits + -0.31846203211698 * 
S_MntGoldProds + -1.4125160823105 * S_MntMeatProducts + 0.49374793444169 * S_MntSweetProducts 
+ 0.39699716010219 * S_MntWines + -0.88140331687645 * S_NumCatalogPurchases + 
-0.87657222813687 * S_NumDealsPurchases + 1.23754786782746 * S_NumStorePurchases + 
1.11316667348511 * S_NumWebPurchases + -1.08592446439781 * S_NumWebVisitsMonth + 
0.66958517589542 * S_Recency + 0.06799032788481 * S_Teenhome ;
2003165   +   H16  =    -0.10360901553583 * S_Income  +     0.39257497240865 * S_Kidhome
2003166   +          +     0.29549884005341 * S_MntFishProducts
2003167   +          +     0.04922491353914 * S_MntFruits  +     -0.1412659458221 *
2003168   +        S_MntGoldProds  +    -0.12361454534126 * S_MntMeatProducts
2003169   +          +    -0.11909215986981 * S_MntSweetProducts
2003170   +          +     0.11430484977092 * S_MntWines  +    -0.66235553839539 *
2003171   +        S_NumCatalogPurchases  +     0.17261763180198 * S_NumDealsPurchases
2003172   +          +     0.30109334594548 * S_NumStorePurchases
2003173   +          +     0.01985762767489 * S_NumWebPurchases
2003174   +          +     0.44965133281333 * S_NumWebVisitsMonth
2003175   +          +     0.32338634259192 * S_Recency  +    -0.04032956941805 *
2003176   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H16 = -0.10360901553583 * S_Income + 0.39257497240865 * S_Kidhome + 
0.29549884005341 * S_MntFishProducts + 0.04922491353914 * S_MntFruits + -0.1412659458221 * 
S_MntGoldProds + -0.12361454534126 * S_MntMeatProducts + -0.11909215986981 * 
S_MntSweetProducts + 0.11430484977092 * S_MntWines + -0.66235553839539 * S_NumCatalogPurchases 
+ 0.17261763180198 * S_NumDealsPurchases + 0.30109334594548 * S_NumStorePurchases + 
0.01985762767489 * S_NumWebPurchases + 0.44965133281333 * S_NumWebVisitsMonth + 
0.32338634259192 * S_Recency + -0.04032956941805 * S_Teenhome ;
2003177   +   H11  = H11  +    -0.23026310289024 * AcceptedCmp10
2003178   +          +    -0.82550012364234 * AcceptedCmp20  +    -0.67764228269441 *
2003179   +        AcceptedCmp30  +    -0.51547666117685 * AcceptedCmp40
2003180   +          +    -0.36424958084824 * AcceptedCmp50  +       0.119862855783 *
2003181   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.23026310289024 * AcceptedCmp10 + -0.82550012364234 * 
AcceptedCmp20 + -0.67764228269441 * AcceptedCmp30 + -0.51547666117685 * AcceptedCmp40 + 
-0.36424958084824 * AcceptedCmp50 + 0.119862855783 * Complain0 ;
2003182   +   H12  = H12  +     0.02722288857426 * AcceptedCmp10
2003183   +          +      0.1236576068539 * AcceptedCmp20  +    -0.31265425960737 *
2003184   +        AcceptedCmp30  +    -0.25076565034266 * AcceptedCmp40
2003185   +          +    -0.20158659730872 * AcceptedCmp50  +    -0.43687103612629 *
2003186   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.02722288857426 * AcceptedCmp10 + 0.1236576068539 * 
AcceptedCmp20 + -0.31265425960737 * AcceptedCmp30 + -0.25076565034266 * AcceptedCmp40 + 
-0.20158659730872 * AcceptedCmp50 + -0.43687103612629 * Complain0 ;
2003187   +   H13  = H13  +     0.21852176280571 * AcceptedCmp10
2003188   +          +     0.01727991436107 * AcceptedCmp20  +     0.19303261094625 *
2003189   +        AcceptedCmp30  +    -0.65492191560509 * AcceptedCmp40
2003190   +          +    -0.09636750660684 * AcceptedCmp50  +     0.07579128571046 *
2003191   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.21852176280571 * AcceptedCmp10 + 0.01727991436107 * 
AcceptedCmp20 + 0.19303261094625 * AcceptedCmp30 + -0.65492191560509 * AcceptedCmp40 + 
-0.09636750660684 * AcceptedCmp50 + 0.07579128571046 * Complain0 ;
2003192   +   H14  = H14  +     0.20819294353855 * AcceptedCmp10
2003193   +          +      0.5159102831901 * AcceptedCmp20  +     0.55295587458643 *
2003194   +        AcceptedCmp30  +     0.80682431419623 * AcceptedCmp40
2003195   +          +     0.74007057798158 * AcceptedCmp50  +     -0.4573052390807 *
2003196   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.20819294353855 * AcceptedCmp10 + 0.5159102831901 * 
AcceptedCmp20 + 0.55295587458643 * AcceptedCmp30 + 0.80682431419623 * AcceptedCmp40 + 
0.74007057798158 * AcceptedCmp50 + -0.4573052390807 * Complain0 ;
2003197   +   H15  = H15  +     1.26330939420524 * AcceptedCmp10
2003198   +          +     0.29494505935793 * AcceptedCmp20  +     0.25561322032419 *
2003199   +        AcceptedCmp30  +     0.50102236777897 * AcceptedCmp40
2003200   +          +     0.20696267245027 * AcceptedCmp50  +    -0.00849145233901 *
2003201   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 1.26330939420524 * AcceptedCmp10 + 0.29494505935793 * 
AcceptedCmp20 + 0.25561322032419 * AcceptedCmp30 + 0.50102236777897 * AcceptedCmp40 + 
0.20696267245027 * AcceptedCmp50 + -0.00849145233901 * Complain0 ;
2003202   +   H16  = H16  +     0.03638428330381 * AcceptedCmp10
2003203   +          +     0.27994215452657 * AcceptedCmp20  +    -0.03861840445025 *
2003204   +        AcceptedCmp30  +      0.3398057347433 * AcceptedCmp40
2003205   +          +    -0.00738335957724 * AcceptedCmp50  +      0.0447804375799 *
2003206   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.03638428330381 * AcceptedCmp10 + 0.27994215452657 * 
AcceptedCmp20 + -0.03861840445025 * AcceptedCmp30 + 0.3398057347433 * AcceptedCmp40 + 
-0.00738335957724 * AcceptedCmp50 + 0.0447804375799 * Complain0 ;
2003207   +   H11  = H11  +     0.27482405283962 * Education2n_Cycle
2003208   +          +     0.11084012456612 * EducationBasic  +    -0.23835071987159 *
2003209   +        EducationGraduation  +    -0.10167082180552 * EducationMaster
2003210   +          +     0.51015833145636 * Marital_StatusDivorced
2003211   +          +     -1.1653662063616 * Marital_StatusMarried
2003212   +          +     1.19396547750441 * Marital_StatusSingle
2003213   +          +    -0.99605751789992 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27482405283962 * Education2n_Cycle + 0.11084012456612 * 
EducationBasic + -0.23835071987159 * EducationGraduation + -0.10167082180552 * EducationMaster 
+ 0.51015833145636 * Marital_StatusDivorced + -1.1653662063616 * Marital_StatusMarried + 
1.19396547750441 * Marital_StatusSingle + -0.99605751789992 * Marital_StatusTogether ;
2003214   +   H12  = H12  +    -0.05268347704739 * Education2n_Cycle
2003215   +          +     0.19362065968028 * EducationBasic  +    -0.26784257195414 *
2003216   +        EducationGraduation  +     0.16650577465959 * EducationMaster
2003217   +          +     0.09154288513995 * Marital_StatusDivorced
2003218   +          +     0.06725684628382 * Marital_StatusMarried
2003219   +          +     0.11327659191494 * Marital_StatusSingle
2003220   +          +     0.01793778876811 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.05268347704739 * Education2n_Cycle + 0.19362065968028 * 
EducationBasic + -0.26784257195414 * EducationGraduation + 0.16650577465959 * EducationMaster 
+ 0.09154288513995 * Marital_StatusDivorced + 0.06725684628382 * Marital_StatusMarried + 
0.11327659191494 * Marital_StatusSingle + 0.01793778876811 * Marital_StatusTogether ;
2003221   +   H13  = H13  +     -0.1027084329077 * Education2n_Cycle
2003222   +          +    -0.01342449140757 * EducationBasic  +    -0.35627920427273 *
2003223   +        EducationGraduation  +    -0.05554656531793 * EducationMaster
2003224   +          +     0.37591653615852 * Marital_StatusDivorced
2003225   +          +    -0.05024236790132 * Marital_StatusMarried
2003226   +          +    -0.28317154997144 * Marital_StatusSingle
2003227   +          +    -0.19247490223101 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1027084329077 * Education2n_Cycle + -0.01342449140757 * 
EducationBasic + -0.35627920427273 * EducationGraduation + -0.05554656531793 * EducationMaster 
+ 0.37591653615852 * Marital_StatusDivorced + -0.05024236790132 * Marital_StatusMarried + 
-0.28317154997144 * Marital_StatusSingle + -0.19247490223101 * Marital_StatusTogether ;
2003228   +   H14  = H14  +     -0.4162491480577 * Education2n_Cycle
2003229   +          +     0.38075572764074 * EducationBasic  +    -0.28169469529121 *
2003230   +        EducationGraduation  +       0.638986138084 * EducationMaster
2003231   +          +    -0.44885292450558 * Marital_StatusDivorced
2003232   +          +     0.78958791519299 * Marital_StatusMarried
2003233   +          +    -0.09688714431356 * Marital_StatusSingle
2003234   +          +     0.84239030196202 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.4162491480577 * Education2n_Cycle + 0.38075572764074 * 
EducationBasic + -0.28169469529121 * EducationGraduation + 0.638986138084 * EducationMaster + 
-0.44885292450558 * Marital_StatusDivorced + 0.78958791519299 * Marital_StatusMarried + 
-0.09688714431356 * Marital_StatusSingle + 0.84239030196202 * Marital_StatusTogether ;
2003235   +   H15  = H15  +     0.33126657974568 * Education2n_Cycle
2003236   +          +     0.44539039262703 * EducationBasic  +    -0.09154902903865 *
2003237   +        EducationGraduation  +    -0.26400363440725 * EducationMaster
2003238   +          +    -0.30801073895989 * Marital_StatusDivorced
2003239   +          +     -0.1285150749223 * Marital_StatusMarried
2003240   +          +     0.06775542164414 * Marital_StatusSingle
2003241   +          +    -0.13032366945766 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.33126657974568 * Education2n_Cycle + 0.44539039262703 * 
EducationBasic + -0.09154902903865 * EducationGraduation + -0.26400363440725 * EducationMaster 
+ -0.30801073895989 * Marital_StatusDivorced + -0.1285150749223 * Marital_StatusMarried + 
0.06775542164414 * Marital_StatusSingle + -0.13032366945766 * Marital_StatusTogether ;
2003242   +   H16  = H16  +     0.02030175222681 * Education2n_Cycle
2003243   +          +    -0.19579401096879 * EducationBasic  +      0.2070703930869 *
2003244   +        EducationGraduation  +    -0.40706983167068 * EducationMaster
2003245   +          +     0.22193599090368 * Marital_StatusDivorced
2003246   +          +    -0.54544672042168 * Marital_StatusMarried
2003247   +          +    -0.02237436019864 * Marital_StatusSingle
2003248   +          +    -0.21979468164854 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.02030175222681 * Education2n_Cycle + -0.19579401096879 * 
EducationBasic + 0.2070703930869 * EducationGraduation + -0.40706983167068 * EducationMaster + 
0.22193599090368 * Marital_StatusDivorced + -0.54544672042168 * Marital_StatusMarried + 
-0.02237436019864 * Marital_StatusSingle + -0.21979468164854 * Marital_StatusTogether ;
2003249   +   H11  =    -1.24550293901788 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.24550293901788 + H11 ;
2003250   +   H12  =     0.36762263942809 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.36762263942809 + H12 ;
2003251   +   H13  =     0.07010867577103 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.07010867577103 + H13 ;
2003252   +   H14  =    -1.94014549272156 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.94014549272156 + H14 ;
2003253   +   H15  =     0.17666656180153 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 0.17666656180153 + H15 ;
2003254   +   H16  =    -1.64626406576709 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.64626406576709 + H16 ;
2003255   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2003256   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2003257   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2003258   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2003259   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2003260   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
2003261   +END;
MPRINT(EM_DIAGRAM):   END;
2003262   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2003263   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2003264   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2003265   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2003266   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2003267   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2003268   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
2003269   +END;
MPRINT(EM_DIAGRAM):   END;
2003270   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003271   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2003272   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003273   +
2003274   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2003275   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2003276   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2003277   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2003278   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2003279   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003280   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2003281   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2003282   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2003283   +end;
MPRINT(EM_DIAGRAM):   end;
2003284   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003285   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2003286   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2003287   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2003288   +   end;
MPRINT(EM_DIAGRAM):   end;
2003289   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2003290   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2003291   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2003292   +   end;
MPRINT(EM_DIAGRAM):   end;
2003293   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003294   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2003295   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2003296   +   end;
MPRINT(EM_DIAGRAM):   end;
2003297   +end;
MPRINT(EM_DIAGRAM):   end;
2003298   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2003299   +   P_DepVar1  =     4.21126046696691 * H11  +      0.6565061288056 * H12
2003300   +          +    -1.92484011508628 * H13  +    -3.74020722142387 * H14
2003301   +          +    -3.27353026762143 * H15  +     -1.2596922869974 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.21126046696691 * H11 + 0.6565061288056 * H12 + 
-1.92484011508628 * H13 + -3.74020722142387 * H14 + -3.27353026762143 * H15 + -1.2596922869974 
* H16 ;
2003302   +   P_DepVar1  =    -1.36806658950323 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.36806658950323 + P_DepVar1 ;
2003303   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2003304   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2003305   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2003306   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2003307   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2003308   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2003309   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2003310   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2003311   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2003312   +END;
MPRINT(EM_DIAGRAM):   END;
2003313   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2003314   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2003315   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2003316   +END;
MPRINT(EM_DIAGRAM):   END;
2003317   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2003318   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2003319   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2003320   +END;
MPRINT(EM_DIAGRAM):   END;
2003321   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2003322   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2003323   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2003324   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2003325   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2003326   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2003327   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2003328   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003329   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2003330   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003331   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2003332   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2003333   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2003334   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2003335   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2003336   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2003337   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2003338   +END;
MPRINT(EM_DIAGRAM):   END;
2003339   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2003340   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2003341   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2003342   +drop
2003343   +H11
2003344   +H12
2003345   +H13
2003346   +H14
2003347   +H15
2003348   +H16
2003349   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
2003350   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2003351   +* Renaming variables for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural35;
2003352   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003353   +* Renaming Posterior variables for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural35;
2003354   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003355   +drop Neural35_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural35_P_DepVar1;
2003356   +Neural35_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural35_P_DepVar1 = P_DepVar1;
2003357   +drop Neural35_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural35_P_DepVar0;
2003358   +Neural35_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural35_P_DepVar0 = P_DepVar0;
2003359   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003360   +* Renaming _WARN_ variable for Neural35;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural35;
2003361   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003362   +length Neural35_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural35_WARN_ $4;
2003363   +drop Neural35_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural35_WARN_;
2003364   +Neural35_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural35_WARN_ = _WARN_;
2003365   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003366   +* Ensmbl10: Scoring Code of model 2 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 2 of 3;
2003367   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003368   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003369   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2003370   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2003371   +* NODE: Neural34;
MPRINT(EM_DIAGRAM):   * NODE: Neural34;
2003372   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2003373   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2003374   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2003375   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2003376   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2003377   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2003378   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2003379   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2003380   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2003381   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2003382   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2003383   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2003384   +LENGTH _WARN_ $4
2003385   +      F_DepVar  $ 12
2003386   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2003387   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2003388   +
2003389   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2003390   +
2003391   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2003392   +
2003393   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2003394   +
2003395   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2003396   +
2003397   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2003398   +
2003399   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2003400   +
2003401   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2003402   +
2003403   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2003404   +
2003405   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2003406   +
2003407   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2003408   +
2003409   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2003410   +
2003411   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2003412   +
2003413   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2003414   +
2003415   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2003416   +
2003417   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2003418   +
2003419   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2003420   +
2003421   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2003422   +
2003423   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2003424   +
2003425   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2003426   +
2003427   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2003428   +
2003429   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2003430   +
2003431   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2003432   +
2003433   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2003434   +
2003435   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2003436   +
2003437   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2003438   +
2003439   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2003440   +
2003441   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2003442   +
2003443   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2003444   +
2003445   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2003446   +
2003447   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2003448   +
2003449   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2003450   +
2003451   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2003452   +
2003453   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2003454   +
2003455   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2003456   +
2003457   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2003458   +
2003459   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2003460   +
2003461   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2003462   +
2003463   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2003464   +
2003465   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2003466   +
2003467   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2003468   +
2003469   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2003470   +
2003471   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2003472   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2003473   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2003474   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2003475   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003476   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003477   +end;
MPRINT(EM_DIAGRAM):   end;
2003478   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003479   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003480   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2003481   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003482   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003483   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2003484   +   end;
MPRINT(EM_DIAGRAM):   end;
2003485   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003486   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2003487   +   end;
MPRINT(EM_DIAGRAM):   end;
2003488   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003489   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2003490   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003491   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003492   +   end;
MPRINT(EM_DIAGRAM):   end;
2003493   +end;
MPRINT(EM_DIAGRAM):   end;
2003494   +
2003495   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2003496   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2003497   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2003498   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2003499   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003500   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003501   +end;
MPRINT(EM_DIAGRAM):   end;
2003502   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003503   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003504   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2003505   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003506   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003507   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2003508   +   end;
MPRINT(EM_DIAGRAM):   end;
2003509   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003510   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2003511   +   end;
MPRINT(EM_DIAGRAM):   end;
2003512   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003513   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2003514   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003515   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003516   +   end;
MPRINT(EM_DIAGRAM):   end;
2003517   +end;
MPRINT(EM_DIAGRAM):   end;
2003518   +
2003519   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2003520   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2003521   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2003522   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2003523   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003524   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003525   +end;
MPRINT(EM_DIAGRAM):   end;
2003526   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003527   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003528   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2003529   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003530   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003531   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2003532   +   end;
MPRINT(EM_DIAGRAM):   end;
2003533   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003534   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2003535   +   end;
MPRINT(EM_DIAGRAM):   end;
2003536   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003537   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2003538   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003539   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003540   +   end;
MPRINT(EM_DIAGRAM):   end;
2003541   +end;
MPRINT(EM_DIAGRAM):   end;
2003542   +
2003543   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2003544   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2003545   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2003546   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2003547   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003548   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003549   +end;
MPRINT(EM_DIAGRAM):   end;
2003550   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003551   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003552   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2003553   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003554   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003555   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2003556   +   end;
MPRINT(EM_DIAGRAM):   end;
2003557   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003558   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2003559   +   end;
MPRINT(EM_DIAGRAM):   end;
2003560   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003561   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2003562   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003563   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003564   +   end;
MPRINT(EM_DIAGRAM):   end;
2003565   +end;
MPRINT(EM_DIAGRAM):   end;
2003566   +
2003567   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2003568   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2003569   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2003570   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2003571   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003572   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003573   +end;
MPRINT(EM_DIAGRAM):   end;
2003574   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003575   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003576   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2003577   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003578   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003579   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2003580   +   end;
MPRINT(EM_DIAGRAM):   end;
2003581   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003582   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2003583   +   end;
MPRINT(EM_DIAGRAM):   end;
2003584   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003585   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2003586   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003587   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003588   +   end;
MPRINT(EM_DIAGRAM):   end;
2003589   +end;
MPRINT(EM_DIAGRAM):   end;
2003590   +
2003591   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2003592   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2003593   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2003594   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2003595   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003596   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003597   +end;
MPRINT(EM_DIAGRAM):   end;
2003598   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003599   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2003600   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2003601   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003602   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2003603   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2003604   +   end;
MPRINT(EM_DIAGRAM):   end;
2003605   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2003606   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2003607   +   end;
MPRINT(EM_DIAGRAM):   end;
2003608   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003609   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2003610   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003611   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003612   +   end;
MPRINT(EM_DIAGRAM):   end;
2003613   +end;
MPRINT(EM_DIAGRAM):   end;
2003614   +
2003615   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2003616   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2003617   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2003618   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2003619   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2003620   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2003621   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2003622   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2003623   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2003624   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2003625   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2003626   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2003627   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003628   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003629   +end;
MPRINT(EM_DIAGRAM):   end;
2003630   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003631   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2003632   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2003633   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003634   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2003635   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2003636   +   end;
MPRINT(EM_DIAGRAM):   end;
2003637   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2003638   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2003639   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2003640   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2003641   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2003642   +   end;
MPRINT(EM_DIAGRAM):   end;
2003643   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2003644   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2003645   +   end;
MPRINT(EM_DIAGRAM):   end;
2003646   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2003647   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2003648   +   end;
MPRINT(EM_DIAGRAM):   end;
2003649   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2003650   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2003651   +   end;
MPRINT(EM_DIAGRAM):   end;
2003652   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003653   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2003654   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2003655   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2003656   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2003657   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003658   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003659   +   end;
MPRINT(EM_DIAGRAM):   end;
2003660   +end;
MPRINT(EM_DIAGRAM):   end;
2003661   +
2003662   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2003663   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2003664   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2003665   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2003666   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2003667   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2003668   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2003669   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2003670   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2003671   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2003672   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2003673   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2003674   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2003675   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2003676   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003677   +end;
MPRINT(EM_DIAGRAM):   end;
2003678   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003679   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2003680   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2003681   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003682   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2003683   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2003684   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2003685   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2003686   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2003687   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2003688   +         end;
MPRINT(EM_DIAGRAM):   end;
2003689   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2003690   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2003691   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2003692   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2003693   +            end;
MPRINT(EM_DIAGRAM):   end;
2003694   +         end;
MPRINT(EM_DIAGRAM):   end;
2003695   +      end;
MPRINT(EM_DIAGRAM):   end;
2003696   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2003697   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2003698   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2003699   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2003700   +         end;
MPRINT(EM_DIAGRAM):   end;
2003701   +      end;
MPRINT(EM_DIAGRAM):   end;
2003702   +   end;
MPRINT(EM_DIAGRAM):   end;
2003703   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003704   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2003705   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2003706   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2003707   +      end;
MPRINT(EM_DIAGRAM):   end;
2003708   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2003709   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2003710   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2003711   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2003712   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2003713   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2003714   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2003715   +         end;
MPRINT(EM_DIAGRAM):   end;
2003716   +      end;
MPRINT(EM_DIAGRAM):   end;
2003717   +   end;
MPRINT(EM_DIAGRAM):   end;
2003718   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2003719   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2003720   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2003721   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2003722   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2003723   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2003724   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003725   +   end;
MPRINT(EM_DIAGRAM):   end;
2003726   +end;
MPRINT(EM_DIAGRAM):   end;
2003727   +
2003728   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003729   +*** Checking missing input Interval
2003730   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2003731   +
2003732   +IF NMISS(
2003733   +   Income ,
2003734   +   Kidhome ,
2003735   +   MntFishProducts ,
2003736   +   MntFruits ,
2003737   +   MntGoldProds ,
2003738   +   MntMeatProducts ,
2003739   +   MntSweetProducts ,
2003740   +   MntWines ,
2003741   +   NumCatalogPurchases ,
2003742   +   NumDealsPurchases ,
2003743   +   NumStorePurchases ,
2003744   +   NumWebPurchases ,
2003745   +   NumWebVisitsMonth ,
2003746   +   Recency ,
2003747   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2003748   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2003749   +
2003750   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2003751   +END;
MPRINT(EM_DIAGRAM):   END;
2003752   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003753   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2003754   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003755   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2003756   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2003757   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2003758   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2003759   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2003760   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2003761   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2003762   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2003763   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2003764   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2003765   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2003766   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2003767   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2003768   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2003769   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2003770   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2003771   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2003772   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2003773   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2003774   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2003775   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2003776   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2003777   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2003778   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2003779   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2003780   +END;
MPRINT(EM_DIAGRAM):   END;
2003781   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2003782   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2003783   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2003784   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2003785   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2003786   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2003787   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2003788   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2003789   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2003790   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2003791   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2003792   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2003793   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2003794   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2003795   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2003796   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2003797   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2003798   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2003799   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2003800   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2003801   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2003802   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2003803   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2003804   +   ELSE S_NumCatalogPurchases
2003805   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2003806   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2003807   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2003808   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2003809   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2003810   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2003811   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2003812   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2003813   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2003814   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2003815   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2003816   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2003817   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2003818   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2003819   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2003820   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2003821   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2003822   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2003823   +END;
MPRINT(EM_DIAGRAM):   END;
2003824   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003825   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2003826   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003827   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003828   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2003829   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003830   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003831   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2003832   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003833   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2003834   +   H11  =    -0.81572379016921 * S_Income  +    -0.07670946585348 * S_Kidhome
2003835   +          +     0.24367603598167 * S_MntFishProducts
2003836   +          +     0.19692980127348 * S_MntFruits  +    -0.03926738185333 *
2003837   +        S_MntGoldProds  +    -0.20900804333353 * S_MntMeatProducts
2003838   +          +     0.34054806441484 * S_MntSweetProducts
2003839   +          +     0.65956211369383 * S_MntWines  +    -0.95375334578522 *
2003840   +        S_NumCatalogPurchases  +    -0.73124740368567 * S_NumDealsPurchases
2003841   +          +     0.98942946974575 * S_NumStorePurchases
2003842   +          +     0.89701206630103 * S_NumWebPurchases
2003843   +          +    -1.22878611472154 * S_NumWebVisitsMonth
2003844   +          +     1.44981870978354 * S_Recency  +     0.47533125686411 *
2003845   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = -0.81572379016921 * S_Income + -0.07670946585348 * S_Kidhome + 
0.24367603598167 * S_MntFishProducts + 0.19692980127348 * S_MntFruits + -0.03926738185333 * 
S_MntGoldProds + -0.20900804333353 * S_MntMeatProducts + 0.34054806441484 * S_MntSweetProducts 
+ 0.65956211369383 * S_MntWines + -0.95375334578522 * S_NumCatalogPurchases + 
-0.73124740368567 * S_NumDealsPurchases + 0.98942946974575 * S_NumStorePurchases + 
0.89701206630103 * S_NumWebPurchases + -1.22878611472154 * S_NumWebVisitsMonth + 
1.44981870978354 * S_Recency + 0.47533125686411 * S_Teenhome ;
2003846   +   H12  =    -0.18875145195495 * S_Income  +     0.42230998482453 * S_Kidhome
2003847   +          +     0.16683404689723 * S_MntFishProducts
2003848   +          +     0.32072658929401 * S_MntFruits  +    -0.12341748032201 *
2003849   +        S_MntGoldProds  +    -1.56478754527255 * S_MntMeatProducts
2003850   +          +     0.20389084548968 * S_MntSweetProducts
2003851   +          +     0.95592931625509 * S_MntWines  +    -0.69996817353755 *
2003852   +        S_NumCatalogPurchases  +    -0.92709806328697 * S_NumDealsPurchases
2003853   +          +     1.27164659640366 * S_NumStorePurchases
2003854   +          +     1.02122194207802 * S_NumWebPurchases
2003855   +          +     -1.5111033436803 * S_NumWebVisitsMonth
2003856   +          +     1.63712814901544 * S_Recency  +     0.14205116840572 *
2003857   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = -0.18875145195495 * S_Income + 0.42230998482453 * S_Kidhome + 
0.16683404689723 * S_MntFishProducts + 0.32072658929401 * S_MntFruits + -0.12341748032201 * 
S_MntGoldProds + -1.56478754527255 * S_MntMeatProducts + 0.20389084548968 * S_MntSweetProducts 
+ 0.95592931625509 * S_MntWines + -0.69996817353755 * S_NumCatalogPurchases + 
-0.92709806328697 * S_NumDealsPurchases + 1.27164659640366 * S_NumStorePurchases + 
1.02122194207802 * S_NumWebPurchases + -1.5111033436803 * S_NumWebVisitsMonth + 
1.63712814901544 * S_Recency + 0.14205116840572 * S_Teenhome ;
2003858   +   H13  =     1.02798705354163 * S_Income  +    -0.94411708781921 * S_Kidhome
2003859   +          +    -0.03345077166544 * S_MntFishProducts
2003860   +          +     0.00038440809349 * S_MntFruits  +    -0.05068379715712 *
2003861   +        S_MntGoldProds  +     1.00464705307582 * S_MntMeatProducts
2003862   +          +    -0.11948662500951 * S_MntSweetProducts
2003863   +          +    -0.52438819731252 * S_MntWines  +     0.98586904866769 *
2003864   +        S_NumCatalogPurchases  +     0.09015295226839 * S_NumDealsPurchases
2003865   +          +     0.22401914357376 * S_NumStorePurchases
2003866   +          +     0.04219877865976 * S_NumWebPurchases
2003867   +          +     1.21753334166036 * S_NumWebVisitsMonth
2003868   +          +    -1.33712212110081 * S_Recency  +    -0.47582856683655 *
2003869   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = 1.02798705354163 * S_Income + -0.94411708781921 * S_Kidhome + 
-0.03345077166544 * S_MntFishProducts + 0.00038440809349 * S_MntFruits + -0.05068379715712 * 
S_MntGoldProds + 1.00464705307582 * S_MntMeatProducts + -0.11948662500951 * S_MntSweetProducts 
+ -0.52438819731252 * S_MntWines + 0.98586904866769 * S_NumCatalogPurchases + 0.09015295226839 
* S_NumDealsPurchases + 0.22401914357376 * S_NumStorePurchases + 0.04219877865976 * 
S_NumWebPurchases + 1.21753334166036 * S_NumWebVisitsMonth + -1.33712212110081 * S_Recency + 
-0.47582856683655 * S_Teenhome ;
2003870   +   H14  =     0.91431429848834 * S_Income  +    -1.16289676557574 * S_Kidhome
2003871   +          +     0.31175257038578 * S_MntFishProducts
2003872   +          +     0.08080436076271 * S_MntFruits  +     0.15252288175851 *
2003873   +        S_MntGoldProds  +     0.21603546207654 * S_MntMeatProducts
2003874   +          +      0.0927253053382 * S_MntSweetProducts
2003875   +          +     0.05865323888304 * S_MntWines  +    -0.23426953728277 *
2003876   +        S_NumCatalogPurchases  +    -0.46451908614085 * S_NumDealsPurchases
2003877   +          +    -0.12667606349662 * S_NumStorePurchases
2003878   +          +     0.30148374518724 * S_NumWebPurchases
2003879   +          +     0.48934229701658 * S_NumWebVisitsMonth
2003880   +          +    -0.83754390793251 * S_Recency  +     -0.4576645462819 *
2003881   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = 0.91431429848834 * S_Income + -1.16289676557574 * S_Kidhome + 
0.31175257038578 * S_MntFishProducts + 0.08080436076271 * S_MntFruits + 0.15252288175851 * 
S_MntGoldProds + 0.21603546207654 * S_MntMeatProducts + 0.0927253053382 * S_MntSweetProducts + 
0.05865323888304 * S_MntWines + -0.23426953728277 * S_NumCatalogPurchases + -0.46451908614085 
* S_NumDealsPurchases + -0.12667606349662 * S_NumStorePurchases + 0.30148374518724 * 
S_NumWebPurchases + 0.48934229701658 * S_NumWebVisitsMonth + -0.83754390793251 * S_Recency + 
-0.4576645462819 * S_Teenhome ;
2003882   +   H15  =    -0.58161501095664 * S_Income  +     -1.0333658128614 * S_Kidhome
2003883   +          +     0.42646725119177 * S_MntFishProducts
2003884   +          +     -0.3264621401658 * S_MntFruits  +    -0.74616728524532 *
2003885   +        S_MntGoldProds  +    -0.97572068716712 * S_MntMeatProducts
2003886   +          +    -0.01493605582616 * S_MntSweetProducts
2003887   +          +      0.0311636632685 * S_MntWines  +    -1.68599903767191 *
2003888   +        S_NumCatalogPurchases  +    -1.25052648798307 * S_NumDealsPurchases
2003889   +          +     0.54256744091258 * S_NumStorePurchases
2003890   +          +     0.43065931458468 * S_NumWebPurchases
2003891   +          +      0.5935561420466 * S_NumWebVisitsMonth
2003892   +          +    -0.45183418369624 * S_Recency  +     0.19260512629844 *
2003893   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.58161501095664 * S_Income + -1.0333658128614 * S_Kidhome + 
0.42646725119177 * S_MntFishProducts + -0.3264621401658 * S_MntFruits + -0.74616728524532 * 
S_MntGoldProds + -0.97572068716712 * S_MntMeatProducts + -0.01493605582616 * 
S_MntSweetProducts + 0.0311636632685 * S_MntWines + -1.68599903767191 * S_NumCatalogPurchases 
+ -1.25052648798307 * S_NumDealsPurchases + 0.54256744091258 * S_NumStorePurchases + 
0.43065931458468 * S_NumWebPurchases + 0.5935561420466 * S_NumWebVisitsMonth + 
-0.45183418369624 * S_Recency + 0.19260512629844 * S_Teenhome ;
2003894   +   H11  = H11  +     0.61503950219838 * AcceptedCmp10
2003895   +          +     0.02945207091619 * AcceptedCmp20  +     0.99151950769472 *
2003896   +        AcceptedCmp30  +     1.08987060401718 * AcceptedCmp40
2003897   +          +     0.45427753773024 * AcceptedCmp50  +    -1.03533951966815 *
2003898   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.61503950219838 * AcceptedCmp10 + 0.02945207091619 * 
AcceptedCmp20 + 0.99151950769472 * AcceptedCmp30 + 1.08987060401718 * AcceptedCmp40 + 
0.45427753773024 * AcceptedCmp50 + -1.03533951966815 * Complain0 ;
2003899   +   H12  = H12  +     0.83823476190401 * AcceptedCmp10
2003900   +          +      1.0793719601418 * AcceptedCmp20  +     0.68538854946581 *
2003901   +        AcceptedCmp30  +     1.00297565893339 * AcceptedCmp40
2003902   +          +     0.24586379991786 * AcceptedCmp50  +     0.15471251255301 *
2003903   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.83823476190401 * AcceptedCmp10 + 1.0793719601418 * 
AcceptedCmp20 + 0.68538854946581 * AcceptedCmp30 + 1.00297565893339 * AcceptedCmp40 + 
0.24586379991786 * AcceptedCmp50 + 0.15471251255301 * Complain0 ;
2003904   +   H13  = H13  +    -0.41486094438907 * AcceptedCmp10
2003905   +          +    -0.76586628449839 * AcceptedCmp20  +    -0.59695459523693 *
2003906   +        AcceptedCmp30  +    -0.30262159911837 * AcceptedCmp40
2003907   +          +    -0.61141171124182 * AcceptedCmp50  +    -0.01086235188835 *
2003908   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.41486094438907 * AcceptedCmp10 + -0.76586628449839 * 
AcceptedCmp20 + -0.59695459523693 * AcceptedCmp30 + -0.30262159911837 * AcceptedCmp40 + 
-0.61141171124182 * AcceptedCmp50 + -0.01086235188835 * Complain0 ;
2003909   +   H14  = H14  +    -0.09662858884082 * AcceptedCmp10
2003910   +          +    -0.48515652524171 * AcceptedCmp20  +    -0.37421451374399 *
2003911   +        AcceptedCmp30  +    -0.52889523891817 * AcceptedCmp40
2003912   +          +    -0.73518448275357 * AcceptedCmp50  +    -0.36065830718672 *
2003913   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.09662858884082 * AcceptedCmp10 + -0.48515652524171 * 
AcceptedCmp20 + -0.37421451374399 * AcceptedCmp30 + -0.52889523891817 * AcceptedCmp40 + 
-0.73518448275357 * AcceptedCmp50 + -0.36065830718672 * Complain0 ;
2003914   +   H15  = H15  +      0.2985143092641 * AcceptedCmp10
2003915   +          +    -0.06881934778393 * AcceptedCmp20  +    -0.02609197044604 *
2003916   +        AcceptedCmp30  +    -0.79105657447885 * AcceptedCmp40
2003917   +          +    -0.02286855144948 * AcceptedCmp50  +     0.02884650192784 *
2003918   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2985143092641 * AcceptedCmp10 + -0.06881934778393 * 
AcceptedCmp20 + -0.02609197044604 * AcceptedCmp30 + -0.79105657447885 * AcceptedCmp40 + 
-0.02286855144948 * AcceptedCmp50 + 0.02884650192784 * Complain0 ;
2003919   +   H11  = H11  +    -0.41169946146301 * Education2n_Cycle
2003920   +          +      0.8448273504441 * EducationBasic  +    -1.02497956377347 *
2003921   +        EducationGraduation  +     0.43998321745211 * EducationMaster
2003922   +          +    -0.85912688909911 * Marital_StatusDivorced
2003923   +          +     0.81561401465875 * Marital_StatusMarried
2003924   +          +    -0.58324403081542 * Marital_StatusSingle
2003925   +          +      0.9348017085106 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.41169946146301 * Education2n_Cycle + 0.8448273504441 * 
EducationBasic + -1.02497956377347 * EducationGraduation + 0.43998321745211 * EducationMaster 
+ -0.85912688909911 * Marital_StatusDivorced + 0.81561401465875 * Marital_StatusMarried + 
-0.58324403081542 * Marital_StatusSingle + 0.9348017085106 * Marital_StatusTogether ;
2003926   +   H12  = H12  +     0.22828129841893 * Education2n_Cycle
2003927   +          +     0.47579227804033 * EducationBasic  +    -0.18165301263195 *
2003928   +        EducationGraduation  +    -0.16143431016405 * EducationMaster
2003929   +          +    -0.34784695867287 * Marital_StatusDivorced
2003930   +          +    -0.18194022182247 * Marital_StatusMarried
2003931   +          +    -0.10633185904164 * Marital_StatusSingle
2003932   +          +     0.13136125361628 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.22828129841893 * Education2n_Cycle + 0.47579227804033 * 
EducationBasic + -0.18165301263195 * EducationGraduation + -0.16143431016405 * EducationMaster 
+ -0.34784695867287 * Marital_StatusDivorced + -0.18194022182247 * Marital_StatusMarried + 
-0.10633185904164 * Marital_StatusSingle + 0.13136125361628 * Marital_StatusTogether ;
2003933   +   H13  = H13  +     0.38705901043652 * Education2n_Cycle
2003934   +          +     0.19703188370189 * EducationBasic  +    -0.48062640599976 *
2003935   +        EducationGraduation  +     -0.3646621736273 * EducationMaster
2003936   +          +     0.61058752124466 * Marital_StatusDivorced
2003937   +          +    -1.38793808025141 * Marital_StatusMarried
2003938   +          +     1.10060737810944 * Marital_StatusSingle
2003939   +          +    -1.21250219018366 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.38705901043652 * Education2n_Cycle + 0.19703188370189 * 
EducationBasic + -0.48062640599976 * EducationGraduation + -0.3646621736273 * EducationMaster 
+ 0.61058752124466 * Marital_StatusDivorced + -1.38793808025141 * Marital_StatusMarried + 
1.10060737810944 * Marital_StatusSingle + -1.21250219018366 * Marital_StatusTogether ;
2003940   +   H14  = H14  +    -0.20576658115662 * Education2n_Cycle
2003941   +          +    -0.09185472034614 * EducationBasic  +    -0.43674210064447 *
2003942   +        EducationGraduation  +    -0.18154054746298 * EducationMaster
2003943   +          +     0.11973800573581 * Marital_StatusDivorced
2003944   +          +      -0.294635257911 * Marital_StatusMarried
2003945   +          +    -0.05399659601172 * Marital_StatusSingle
2003946   +          +     0.34207780606239 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.20576658115662 * Education2n_Cycle + -0.09185472034614 * 
EducationBasic + -0.43674210064447 * EducationGraduation + -0.18154054746298 * EducationMaster 
+ 0.11973800573581 * Marital_StatusDivorced + -0.294635257911 * Marital_StatusMarried + 
-0.05399659601172 * Marital_StatusSingle + 0.34207780606239 * Marital_StatusTogether ;
2003947   +   H15  = H15  +    -0.05553093684862 * Education2n_Cycle
2003948   +          +    -0.12898006732329 * EducationBasic  +    -0.16064118923518 *
2003949   +        EducationGraduation  +     -0.6431539624694 * EducationMaster
2003950   +          +     0.42838191659864 * Marital_StatusDivorced
2003951   +          +    -0.09150349181363 * Marital_StatusMarried
2003952   +          +    -0.33520164145276 * Marital_StatusSingle
2003953   +          +    -0.15253738713197 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.05553093684862 * Education2n_Cycle + -0.12898006732329 * 
EducationBasic + -0.16064118923518 * EducationGraduation + -0.6431539624694 * EducationMaster 
+ 0.42838191659864 * Marital_StatusDivorced + -0.09150349181363 * Marital_StatusMarried + 
-0.33520164145276 * Marital_StatusSingle + -0.15253738713197 * Marital_StatusTogether ;
2003954   +   H11  =     -1.5079478405973 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.5079478405973 + H11 ;
2003955   +   H12  =     0.03014958331993 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.03014958331993 + H12 ;
2003956   +   H13  =    -1.78098671165572 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.78098671165572 + H13 ;
2003957   +   H14  =     0.22179429743277 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.22179429743277 + H14 ;
2003958   +   H15  =    -2.06602107857898 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.06602107857898 + H15 ;
2003959   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2003960   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2003961   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2003962   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2003963   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2003964   +END;
MPRINT(EM_DIAGRAM):   END;
2003965   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2003966   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2003967   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2003968   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2003969   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2003970   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2003971   +END;
MPRINT(EM_DIAGRAM):   END;
2003972   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003973   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2003974   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2003975   +
2003976   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2003977   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2003978   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2003979   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2003980   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2003981   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2003982   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2003983   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2003984   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2003985   +end;
MPRINT(EM_DIAGRAM):   end;
2003986   +else do;
MPRINT(EM_DIAGRAM):   else do;
2003987   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2003988   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2003989   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2003990   +   end;
MPRINT(EM_DIAGRAM):   end;
2003991   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2003992   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2003993   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2003994   +   end;
MPRINT(EM_DIAGRAM):   end;
2003995   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2003996   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2003997   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2003998   +   end;
MPRINT(EM_DIAGRAM):   end;
2003999   +end;
MPRINT(EM_DIAGRAM):   end;
2004000   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2004001   +   P_DepVar1  =    -4.55666337815854 * H11  +    -4.04792544554995 * H12
2004002   +          +     4.56148127429284 * H13  +     2.36841344452371 * H14
2004003   +          +    -3.07371010011749 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.55666337815854 * H11 + -4.04792544554995 * H12 + 
4.56148127429284 * H13 + 2.36841344452371 * H14 + -3.07371010011749 * H15 ;
2004004   +   P_DepVar1  =    -0.83283406236136 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.83283406236136 + P_DepVar1 ;
2004005   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2004006   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2004007   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2004008   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2004009   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2004010   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2004011   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2004012   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2004013   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2004014   +END;
MPRINT(EM_DIAGRAM):   END;
2004015   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2004016   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2004017   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2004018   +END;
MPRINT(EM_DIAGRAM):   END;
2004019   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2004020   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2004021   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2004022   +END;
MPRINT(EM_DIAGRAM):   END;
2004023   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2004024   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2004025   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2004026   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2004027   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2004028   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2004029   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2004030   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004031   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2004032   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004033   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2004034   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2004035   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2004036   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2004037   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2004038   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2004039   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2004040   +END;
MPRINT(EM_DIAGRAM):   END;
2004041   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2004042   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2004043   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2004044   +drop
2004045   +H11
2004046   +H12
2004047   +H13
2004048   +H14
2004049   +H15
2004050   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
2004051   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2004052   +* Renaming variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural34;
2004053   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004054   +* Renaming Posterior variables for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural34;
2004055   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004056   +drop Neural34_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar1;
2004057   +Neural34_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar1 = P_DepVar1;
2004058   +drop Neural34_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural34_P_DepVar0;
2004059   +Neural34_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural34_P_DepVar0 = P_DepVar0;
2004060   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004061   +* Renaming _WARN_ variable for Neural34;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural34;
2004062   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004063   +length Neural34_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural34_WARN_ $4;
2004064   +drop Neural34_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural34_WARN_;
2004065   +Neural34_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural34_WARN_ = _WARN_;
2004066   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004067   +* Ensmbl10: Scoring Code of model 3 of 3;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Scoring Code of model 3 of 3;
2004068   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004069   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004070   +* TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
2004071   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
2004072   +* NODE: Neural32;
MPRINT(EM_DIAGRAM):   * NODE: Neural32;
2004073   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004074   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2004075   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2004076   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2004077   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2004078   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2004079   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2004080   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2004081   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2004082   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2004083   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2004084   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2004085   +LENGTH _WARN_ $4
2004086   +      F_DepVar  $ 12
2004087   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
2004088   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2004089   +
2004090   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2004091   +
2004092   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2004093   +
2004094   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2004095   +
2004096   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2004097   +
2004098   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2004099   +
2004100   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2004101   +
2004102   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2004103   +
2004104   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2004105   +
2004106   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2004107   +
2004108   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2004109   +
2004110   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2004111   +
2004112   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2004113   +
2004114   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2004115   +
2004116   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2004117   +
2004118   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2004119   +
2004120   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2004121   +
2004122   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2004123   +
2004124   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2004125   +
2004126   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2004127   +
2004128   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2004129   +
2004130   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2004131   +
2004132   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2004133   +
2004134   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2004135   +
2004136   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2004137   +
2004138   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2004139   +
2004140   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2004141   +
2004142   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2004143   +
2004144   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2004145   +
2004146   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2004147   +
2004148   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2004149   +
2004150   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2004151   +
2004152   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2004153   +
2004154   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2004155   +
2004156   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2004157   +
2004158   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2004159   +
2004160   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
2004161   +
2004162   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2004163   +
2004164   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
2004165   +
2004166   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2004167   +
2004168   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2004169   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2004170   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2004171   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2004172   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004173   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004174   +end;
MPRINT(EM_DIAGRAM):   end;
2004175   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004176   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004177   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2004178   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004179   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004180   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2004181   +   end;
MPRINT(EM_DIAGRAM):   end;
2004182   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004183   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2004184   +   end;
MPRINT(EM_DIAGRAM):   end;
2004185   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004186   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2004187   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004188   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004189   +   end;
MPRINT(EM_DIAGRAM):   end;
2004190   +end;
MPRINT(EM_DIAGRAM):   end;
2004191   +
2004192   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2004193   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2004194   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2004195   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2004196   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004197   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004198   +end;
MPRINT(EM_DIAGRAM):   end;
2004199   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004200   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004201   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2004202   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004203   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004204   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2004205   +   end;
MPRINT(EM_DIAGRAM):   end;
2004206   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004207   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2004208   +   end;
MPRINT(EM_DIAGRAM):   end;
2004209   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004210   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2004211   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004212   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004213   +   end;
MPRINT(EM_DIAGRAM):   end;
2004214   +end;
MPRINT(EM_DIAGRAM):   end;
2004215   +
2004216   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2004217   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2004218   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2004219   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2004220   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004221   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004222   +end;
MPRINT(EM_DIAGRAM):   end;
2004223   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004224   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004225   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2004226   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004227   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004228   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2004229   +   end;
MPRINT(EM_DIAGRAM):   end;
2004230   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004231   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2004232   +   end;
MPRINT(EM_DIAGRAM):   end;
2004233   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004234   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2004235   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004236   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004237   +   end;
MPRINT(EM_DIAGRAM):   end;
2004238   +end;
MPRINT(EM_DIAGRAM):   end;
2004239   +
2004240   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2004241   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2004242   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2004243   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2004244   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004245   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004246   +end;
MPRINT(EM_DIAGRAM):   end;
2004247   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004248   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004249   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2004250   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004251   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004252   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2004253   +   end;
MPRINT(EM_DIAGRAM):   end;
2004254   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004255   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2004256   +   end;
MPRINT(EM_DIAGRAM):   end;
2004257   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004258   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2004259   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004260   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004261   +   end;
MPRINT(EM_DIAGRAM):   end;
2004262   +end;
MPRINT(EM_DIAGRAM):   end;
2004263   +
2004264   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2004265   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2004266   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2004267   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2004268   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004269   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004270   +end;
MPRINT(EM_DIAGRAM):   end;
2004271   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004272   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004273   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2004274   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004275   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004276   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2004277   +   end;
MPRINT(EM_DIAGRAM):   end;
2004278   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004279   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2004280   +   end;
MPRINT(EM_DIAGRAM):   end;
2004281   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004282   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2004283   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004284   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004285   +   end;
MPRINT(EM_DIAGRAM):   end;
2004286   +end;
MPRINT(EM_DIAGRAM):   end;
2004287   +
2004288   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2004289   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2004290   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2004291   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2004292   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004293   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004294   +end;
MPRINT(EM_DIAGRAM):   end;
2004295   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004296   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004297   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2004298   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004299   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004300   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2004301   +   end;
MPRINT(EM_DIAGRAM):   end;
2004302   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004303   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2004304   +   end;
MPRINT(EM_DIAGRAM):   end;
2004305   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004306   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2004307   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004308   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004309   +   end;
MPRINT(EM_DIAGRAM):   end;
2004310   +end;
MPRINT(EM_DIAGRAM):   end;
2004311   +
2004312   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2004313   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2004314   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2004315   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2004316   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2004317   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2004318   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2004319   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2004320   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2004321   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2004322   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2004323   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2004324   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004325   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004326   +end;
MPRINT(EM_DIAGRAM):   end;
2004327   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004328   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2004329   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2004330   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004331   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2004332   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2004333   +   end;
MPRINT(EM_DIAGRAM):   end;
2004334   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2004335   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2004336   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2004337   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2004338   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2004339   +   end;
MPRINT(EM_DIAGRAM):   end;
2004340   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2004341   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2004342   +   end;
MPRINT(EM_DIAGRAM):   end;
2004343   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2004344   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2004345   +   end;
MPRINT(EM_DIAGRAM):   end;
2004346   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2004347   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2004348   +   end;
MPRINT(EM_DIAGRAM):   end;
2004349   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004350   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2004351   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2004352   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2004353   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2004354   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004355   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004356   +   end;
MPRINT(EM_DIAGRAM):   end;
2004357   +end;
MPRINT(EM_DIAGRAM):   end;
2004358   +
2004359   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2004360   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2004361   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2004362   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2004363   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2004364   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2004365   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2004366   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2004367   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2004368   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2004369   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2004370   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2004371   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2004372   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004373   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004374   +end;
MPRINT(EM_DIAGRAM):   end;
2004375   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004376   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2004377   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2004378   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004379   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2004380   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2004381   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2004382   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2004383   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2004384   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2004385   +         end;
MPRINT(EM_DIAGRAM):   end;
2004386   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2004387   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2004388   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2004389   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2004390   +            end;
MPRINT(EM_DIAGRAM):   end;
2004391   +         end;
MPRINT(EM_DIAGRAM):   end;
2004392   +      end;
MPRINT(EM_DIAGRAM):   end;
2004393   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2004394   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2004395   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2004396   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2004397   +         end;
MPRINT(EM_DIAGRAM):   end;
2004398   +      end;
MPRINT(EM_DIAGRAM):   end;
2004399   +   end;
MPRINT(EM_DIAGRAM):   end;
2004400   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004401   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2004402   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2004403   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2004404   +      end;
MPRINT(EM_DIAGRAM):   end;
2004405   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2004406   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2004407   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2004408   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2004409   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2004410   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2004411   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2004412   +         end;
MPRINT(EM_DIAGRAM):   end;
2004413   +      end;
MPRINT(EM_DIAGRAM):   end;
2004414   +   end;
MPRINT(EM_DIAGRAM):   end;
2004415   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2004416   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2004417   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2004418   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2004419   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2004420   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004421   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004422   +   end;
MPRINT(EM_DIAGRAM):   end;
2004423   +end;
MPRINT(EM_DIAGRAM):   end;
2004424   +
2004425   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004426   +*** Checking missing input Interval
2004427   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2004428   +
2004429   +IF NMISS(
2004430   +   Income ,
2004431   +   Kidhome ,
2004432   +   MntFishProducts ,
2004433   +   MntFruits ,
2004434   +   MntGoldProds ,
2004435   +   MntMeatProducts ,
2004436   +   MntSweetProducts ,
2004437   +   MntWines ,
2004438   +   NumCatalogPurchases ,
2004439   +   NumDealsPurchases ,
2004440   +   NumStorePurchases ,
2004441   +   NumWebPurchases ,
2004442   +   NumWebVisitsMonth ,
2004443   +   Recency ,
2004444   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2004445   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2004446   +
2004447   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004448   +END;
MPRINT(EM_DIAGRAM):   END;
2004449   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004450   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2004451   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004452   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2004453   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2004454   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2004455   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2004456   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2004457   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2004458   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2004459   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2004460   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2004461   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2004462   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2004463   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2004464   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2004465   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2004466   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2004467   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2004468   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2004469   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2004470   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2004471   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2004472   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2004473   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2004474   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2004475   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2004476   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2004477   +END;
MPRINT(EM_DIAGRAM):   END;
2004478   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2004479   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2004480   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2004481   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2004482   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2004483   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2004484   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2004485   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2004486   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2004487   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2004488   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2004489   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2004490   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2004491   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2004492   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2004493   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2004494   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2004495   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2004496   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2004497   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2004498   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2004499   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2004500   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2004501   +   ELSE S_NumCatalogPurchases
2004502   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2004503   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2004504   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2004505   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2004506   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2004507   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2004508   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2004509   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2004510   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2004511   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2004512   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2004513   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2004514   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2004515   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2004516   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2004517   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2004518   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2004519   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2004520   +END;
MPRINT(EM_DIAGRAM):   END;
2004521   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004522   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2004523   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004524   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004525   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2004526   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004527   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004528   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2004529   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004530   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2004531   +   H11  =     1.40261108800308 * S_Income  +     -0.8062097507842 * S_Kidhome
2004532   +          +    -0.12974862644982 * S_MntFishProducts
2004533   +          +     0.08065642800368 * S_MntFruits  +    -0.12102130003972 *
2004534   +        S_MntGoldProds  +     0.19226249622126 * S_MntMeatProducts
2004535   +          +    -0.12290326901613 * S_MntSweetProducts
2004536   +          +     0.07790241176978 * S_MntWines  +     0.36123042724896 *
2004537   +        S_NumCatalogPurchases  +    -0.01034406765754 * S_NumDealsPurchases
2004538   +          +     0.09738032540137 * S_NumStorePurchases
2004539   +          +     0.44459515215205 * S_NumWebPurchases
2004540   +          +      0.8471075994578 * S_NumWebVisitsMonth
2004541   +          +    -1.10667985160899 * S_Recency  +    -0.88509832868515 *
2004542   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 1.40261108800308 * S_Income + -0.8062097507842 * S_Kidhome + 
-0.12974862644982 * S_MntFishProducts + 0.08065642800368 * S_MntFruits + -0.12102130003972 * 
S_MntGoldProds + 0.19226249622126 * S_MntMeatProducts + -0.12290326901613 * S_MntSweetProducts 
+ 0.07790241176978 * S_MntWines + 0.36123042724896 * S_NumCatalogPurchases + -0.01034406765754 
* S_NumDealsPurchases + 0.09738032540137 * S_NumStorePurchases + 0.44459515215205 * 
S_NumWebPurchases + 0.8471075994578 * S_NumWebVisitsMonth + -1.10667985160899 * S_Recency + 
-0.88509832868515 * S_Teenhome ;
2004543   +   H12  =     0.51266936686642 * S_Income  +     0.26909433357851 * S_Kidhome
2004544   +          +     0.02406077596811 * S_MntFishProducts
2004545   +          +    -0.57443793453522 * S_MntFruits  +     0.36824731232149 *
2004546   +        S_MntGoldProds  +     0.40177289143061 * S_MntMeatProducts
2004547   +          +     -0.1147507059349 * S_MntSweetProducts
2004548   +          +    -0.66379351187459 * S_MntWines  +     1.33407347415468 *
2004549   +        S_NumCatalogPurchases  +     1.00633891197299 * S_NumDealsPurchases
2004550   +          +    -0.23920969262322 * S_NumStorePurchases
2004551   +          +     -0.6008837862932 * S_NumWebPurchases
2004552   +          +     0.26759743722885 * S_NumWebVisitsMonth
2004553   +          +    -0.42755419464125 * S_Recency  +    -0.14471776361394 *
2004554   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.51266936686642 * S_Income + 0.26909433357851 * S_Kidhome + 
0.02406077596811 * S_MntFishProducts + -0.57443793453522 * S_MntFruits + 0.36824731232149 * 
S_MntGoldProds + 0.40177289143061 * S_MntMeatProducts + -0.1147507059349 * S_MntSweetProducts 
+ -0.66379351187459 * S_MntWines + 1.33407347415468 * S_NumCatalogPurchases + 1.00633891197299 
* S_NumDealsPurchases + -0.23920969262322 * S_NumStorePurchases + -0.6008837862932 * 
S_NumWebPurchases + 0.26759743722885 * S_NumWebVisitsMonth + -0.42755419464125 * S_Recency + 
-0.14471776361394 * S_Teenhome ;
2004555   +   H13  =    -0.19807308698832 * S_Income  +     0.25934675474849 * S_Kidhome
2004556   +          +     0.04398331533724 * S_MntFishProducts
2004557   +          +    -0.00090357598988 * S_MntFruits  +     0.05139545341773 *
2004558   +        S_MntGoldProds  +    -0.74617114336019 * S_MntMeatProducts
2004559   +          +     0.00552488718744 * S_MntSweetProducts
2004560   +          +     0.47194407197012 * S_MntWines  +    -0.35149551848487 *
2004561   +        S_NumCatalogPurchases  +    -0.30232522133093 * S_NumDealsPurchases
2004562   +          +     0.60058189155105 * S_NumStorePurchases
2004563   +          +     0.51423374855856 * S_NumWebPurchases
2004564   +          +     -0.9075304423321 * S_NumWebVisitsMonth
2004565   +          +     0.83597739226791 * S_Recency  +     0.15783202762709 *
2004566   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.19807308698832 * S_Income + 0.25934675474849 * S_Kidhome + 
0.04398331533724 * S_MntFishProducts + -0.00090357598988 * S_MntFruits + 0.05139545341773 * 
S_MntGoldProds + -0.74617114336019 * S_MntMeatProducts + 0.00552488718744 * S_MntSweetProducts 
+ 0.47194407197012 * S_MntWines + -0.35149551848487 * S_NumCatalogPurchases + 
-0.30232522133093 * S_NumDealsPurchases + 0.60058189155105 * S_NumStorePurchases + 
0.51423374855856 * S_NumWebPurchases + -0.9075304423321 * S_NumWebVisitsMonth + 
0.83597739226791 * S_Recency + 0.15783202762709 * S_Teenhome ;
2004567   +   H11  = H11  +    -0.26274045665457 * AcceptedCmp10
2004568   +          +    -0.86105702939371 * AcceptedCmp20  +    -0.50476270558977 *
2004569   +        AcceptedCmp30  +    -0.84284126473343 * AcceptedCmp40
2004570   +          +     0.19764907691314 * AcceptedCmp50  +    -0.29305577412263 *
2004571   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.26274045665457 * AcceptedCmp10 + -0.86105702939371 * 
AcceptedCmp20 + -0.50476270558977 * AcceptedCmp30 + -0.84284126473343 * AcceptedCmp40 + 
0.19764907691314 * AcceptedCmp50 + -0.29305577412263 * Complain0 ;
2004572   +   H12  = H12  +    -0.27394139847883 * AcceptedCmp10
2004573   +          +    -0.14688750266104 * AcceptedCmp20  +    -0.27982299242327 *
2004574   +        AcceptedCmp30  +    -0.10465140408787 * AcceptedCmp40
2004575   +          +    -0.81681330244218 * AcceptedCmp50  +    -0.28152730217644 *
2004576   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.27394139847883 * AcceptedCmp10 + -0.14688750266104 * 
AcceptedCmp20 + -0.27982299242327 * AcceptedCmp30 + -0.10465140408787 * AcceptedCmp40 + 
-0.81681330244218 * AcceptedCmp50 + -0.28152730217644 * Complain0 ;
2004577   +   H13  = H13  +     0.42310780831005 * AcceptedCmp10
2004578   +          +     0.41337614261155 * AcceptedCmp20  +     0.41436520641821 *
2004579   +        AcceptedCmp30  +     0.08914989208239 * AcceptedCmp40
2004580   +          +     0.54013759697695 * AcceptedCmp50  +    -0.19478210268955 *
2004581   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.42310780831005 * AcceptedCmp10 + 0.41337614261155 * 
AcceptedCmp20 + 0.41436520641821 * AcceptedCmp30 + 0.08914989208239 * AcceptedCmp40 + 
0.54013759697695 * AcceptedCmp50 + -0.19478210268955 * Complain0 ;
2004582   +   H11  = H11  +     0.40331200702699 * Education2n_Cycle
2004583   +          +     0.17202421641945 * EducationBasic  +    -0.29654161092174 *
2004584   +        EducationGraduation  +     -0.4835104183635 * EducationMaster
2004585   +          +     0.52129580188513 * Marital_StatusDivorced
2004586   +          +     -1.5224490339553 * Marital_StatusMarried
2004587   +          +     1.05062906057771 * Marital_StatusSingle
2004588   +          +    -1.16420887937635 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.40331200702699 * Education2n_Cycle + 0.17202421641945 * 
EducationBasic + -0.29654161092174 * EducationGraduation + -0.4835104183635 * EducationMaster 
+ 0.52129580188513 * Marital_StatusDivorced + -1.5224490339553 * Marital_StatusMarried + 
1.05062906057771 * Marital_StatusSingle + -1.16420887937635 * Marital_StatusTogether ;
2004589   +   H12  = H12  +     -0.3488928858263 * Education2n_Cycle
2004590   +          +     0.38279680594423 * EducationBasic  +     0.20376044836519 *
2004591   +        EducationGraduation  +     0.20697694670185 * EducationMaster
2004592   +          +    -0.14428158063317 * Marital_StatusDivorced
2004593   +          +     0.22396926143356 * Marital_StatusMarried
2004594   +          +    -0.12980854818876 * Marital_StatusSingle
2004595   +          +     0.32607015627906 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.3488928858263 * Education2n_Cycle + 0.38279680594423 * 
EducationBasic + 0.20376044836519 * EducationGraduation + 0.20697694670185 * EducationMaster + 
-0.14428158063317 * Marital_StatusDivorced + 0.22396926143356 * Marital_StatusMarried + 
-0.12980854818876 * Marital_StatusSingle + 0.32607015627906 * Marital_StatusTogether ;
2004596   +   H13  = H13  +    -0.18351418824199 * Education2n_Cycle
2004597   +          +     0.53417952447263 * EducationBasic  +    -0.14333929289628 *
2004598   +        EducationGraduation  +     0.04513004774082 * EducationMaster
2004599   +          +    -0.25615797303064 * Marital_StatusDivorced
2004600   +          +     0.18825506199046 * Marital_StatusMarried
2004601   +          +    -0.24607556819871 * Marital_StatusSingle
2004602   +          +     0.29531673844201 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.18351418824199 * Education2n_Cycle + 0.53417952447263 * 
EducationBasic + -0.14333929289628 * EducationGraduation + 0.04513004774082 * EducationMaster 
+ -0.25615797303064 * Marital_StatusDivorced + 0.18825506199046 * Marital_StatusMarried + 
-0.24607556819871 * Marital_StatusSingle + 0.29531673844201 * Marital_StatusTogether ;
2004603   +   H11  =    -1.29289362679377 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.29289362679377 + H11 ;
2004604   +   H12  =     0.88724419151235 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.88724419151235 + H12 ;
2004605   +   H13  =    -0.51194544699467 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.51194544699467 + H13 ;
2004606   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2004607   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2004608   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2004609   +END;
MPRINT(EM_DIAGRAM):   END;
2004610   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2004611   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2004612   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2004613   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2004614   +END;
MPRINT(EM_DIAGRAM):   END;
2004615   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004616   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2004617   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004618   +
2004619   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
2004620   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
2004621   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
2004622   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
2004623   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
2004624   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004625   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
2004626   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2004627   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2004628   +end;
MPRINT(EM_DIAGRAM):   end;
2004629   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004630   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
2004631   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
2004632   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
2004633   +   end;
MPRINT(EM_DIAGRAM):   end;
2004634   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
2004635   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
2004636   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
2004637   +   end;
MPRINT(EM_DIAGRAM):   end;
2004638   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004639   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
2004640   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
2004641   +   end;
MPRINT(EM_DIAGRAM):   end;
2004642   +end;
MPRINT(EM_DIAGRAM):   end;
2004643   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2004644   +   P_DepVar1  =     4.44251020865882 * H11  +     2.67139161773156 * H12
2004645   +          +    -4.73549395111184 * H13 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.44251020865882 * H11 + 2.67139161773156 * H12 + 
-4.73549395111184 * H13 ;
2004646   +   P_DepVar1  =     0.45492690116644 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.45492690116644 + P_DepVar1 ;
2004647   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2004648   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2004649   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2004650   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2004651   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2004652   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2004653   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2004654   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2004655   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2004656   +END;
MPRINT(EM_DIAGRAM):   END;
2004657   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2004658   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2004659   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2004660   +END;
MPRINT(EM_DIAGRAM):   END;
2004661   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2004662   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2004663   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2004664   +END;
MPRINT(EM_DIAGRAM):   END;
2004665   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
2004666   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
2004667   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
2004668   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
2004669   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
2004670   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
2004671   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
2004672   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004673   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2004674   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2004675   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2004676   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2004677   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2004678   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2004679   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2004680   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2004681   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2004682   +END;
MPRINT(EM_DIAGRAM):   END;
2004683   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2004684   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2004685   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2004686   +drop
2004687   +H11
2004688   +H12
2004689   +H13
2004690   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
2004691   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
2004692   +* Renaming variables for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming variables for Neural32;
2004693   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004694   +* Renaming Posterior variables for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for Neural32;
2004695   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004696   +drop Neural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop Neural32_P_DepVar1;
2004697   +Neural32_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   Neural32_P_DepVar1 = P_DepVar1;
2004698   +drop Neural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop Neural32_P_DepVar0;
2004699   +Neural32_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   Neural32_P_DepVar0 = P_DepVar0;
2004700   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004701   +* Renaming _WARN_ variable for Neural32;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for Neural32;
2004702   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004703   +length Neural32_WARN_ $4;
MPRINT(EM_DIAGRAM):   length Neural32_WARN_ $4;
2004704   +drop Neural32_WARN_;
MPRINT(EM_DIAGRAM):   drop Neural32_WARN_;
2004705   +Neural32_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   Neural32_WARN_ = _WARN_;
2004706   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004707   +* Ensmbl10: Average Posteriors of 3 models;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Average Posteriors of 3 models;
2004708   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004709   +P_DepVar1 = (
2004710   +Neural35_P_DepVar1 +
2004711   +Neural34_P_DepVar1 +
2004712   +Neural32_P_DepVar1
2004713   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar1 = ( Neural35_P_DepVar1 + Neural34_P_DepVar1 + 
Neural32_P_DepVar1 )/3;
2004714   +P_DepVar0 = (
2004715   +Neural35_P_DepVar0 +
2004716   +Neural34_P_DepVar0 +
2004717   +Neural32_P_DepVar0
2004718   +)/3;
MPRINT(EM_DIAGRAM):   P_DepVar0 = ( Neural35_P_DepVar0 + Neural34_P_DepVar0 + 
Neural32_P_DepVar0 )/3;
2004719   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004720   +* Ensmbl10: Computing Classification Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Classification Vars;
2004721   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004722   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
2004723   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
2004724   +length _format $200;
MPRINT(EM_DIAGRAM):   length _format $200;
2004725   +drop _format;
MPRINT(EM_DIAGRAM):   drop _format;
2004726   +_format= ' ';
MPRINT(EM_DIAGRAM):   _format= ' ';
2004727   +_p_= 0;
MPRINT(EM_DIAGRAM):   _p_= 0;
2004728   +drop _p_;
MPRINT(EM_DIAGRAM):   drop _p_;
2004729   +if P_DepVar1 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar1 > _p_ then do;
2004730   +_p_= P_DepVar1;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar1;
2004731   +_format= '1';
MPRINT(EM_DIAGRAM):   _format= '1';
2004732   +end;
MPRINT(EM_DIAGRAM):   end;
2004733   +if P_DepVar0 > _p_ then do;
MPRINT(EM_DIAGRAM):   if P_DepVar0 > _p_ then do;
2004734   +_p_= P_DepVar0;
MPRINT(EM_DIAGRAM):   _p_= P_DepVar0;
2004735   +_format= '0';
MPRINT(EM_DIAGRAM):   _format= '0';
2004736   +end;
MPRINT(EM_DIAGRAM):   end;
2004737   +%DMNORMCP(_format,I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(_format,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2004738   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004739   +* Ensmbl10: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Producing Unformatted variable;
2004740   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004741   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
2004742   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
2004743   +else
2004744   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
2004745   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004746   +* Ensmbl10: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing _WARN_ Variable;
2004747   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004748   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
2004749   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
2004750   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
2004751   +if index(NEURAL35_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2004751  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2004752   +if index(NEURAL35_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2004752  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2004753   +if index(NEURAL35_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2004753  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2004754   +if index(NEURAL35_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2004754  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL35_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2004755   +if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2004755  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2004756   +if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2004756  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2004757   +if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2004757  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2004758   +if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2004758  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL34_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2004759   +if index(NEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M'
2004759  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then 
substr(_WARN_, 1, 1) ='M';
2004760   +if index(NEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U'
2004760  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then 
substr(_WARN_, 2, 1) ='U';
2004761   +if index(NEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P'
2004761  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then 
substr(_WARN_, 3, 1) ='P';
2004762   +if index(NEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C'
2004762  !+;
MPRINT(EM_DIAGRAM):   if index(NEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then 
substr(_WARN_, 4, 1) ='C';
2004763   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004764   +* Ensmbl10: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing Residual Vars;
2004765   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2004766   +if
2004767   +F_DepVar NE '1'
2004768   +AND F_DepVar NE '0'
2004769   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
2004770   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
2004771   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
2004772   +end;
MPRINT(EM_DIAGRAM):   end;
2004773   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004774   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
2004775   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
2004776   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
2004777   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
2004778   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
2004779   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
2004780   +END;
MPRINT(EM_DIAGRAM):   END;
2004781   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2004782    run;

NOTE: DATA STEP view saved on file EMWS8.ENSMBL10_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.NEURAL35_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2004783    quit;
2004784    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):   
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ 
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl10_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ 
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of 
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" 
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_= 
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: 
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ 
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ 
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl10_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ 
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of 
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error" 
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_= 
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid: 
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ 
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Ensmbl10_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
2004844    filename _pref
2004844  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural35\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural35\EMPUBLISHSCORE.sas";
2004845    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2004846    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural35\EMPUBLISHSCORE.sas.
2004847   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2004848   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2004849   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2004850   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2004851   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2004852   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2004853   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2004854   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2004855   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2004856   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2004857   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2004858   +LENGTH _WARN_ $4
2004859   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
2004860   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2004861   +
2004862   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2004863   +
2004864   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2004865   +
2004866   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2004867   +
2004868   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2004869   +
2004870   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2004871   +
2004872   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2004873   +
2004874   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2004875   +
2004876   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2004877   +
2004878   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2004879   +
2004880   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2004881   +
2004882   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2004883   +
2004884   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2004885   +
2004886   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2004887   +
2004888   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2004889   +
2004890   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2004891   +
2004892   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2004893   +
2004894   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2004895   +
2004896   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2004897   +
2004898   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2004899   +
2004900   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2004901   +
2004902   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2004903   +
2004904   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2004905   +
2004906   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2004907   +
2004908   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2004909   +
2004910   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2004911   +
2004912   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2004913   +
2004914   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2004915   +
2004916   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2004917   +
2004918   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2004919   +
2004920   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2004921   +
2004922   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2004923   +
2004924   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2004925   +
2004926   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2004927   +
2004928   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
2004929   +
2004930   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2004931   +
2004932   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2004933   +
2004934   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2004935   +
2004936   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2004937   +
2004938   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2004939   +
2004940   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2004941   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2004942   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2004943   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2004944   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004945   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004946   +end;
MPRINT(EM_DIAGRAM):   end;
2004947   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004948   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004949   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2004950   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004951   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004952   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2004953   +   end;
MPRINT(EM_DIAGRAM):   end;
2004954   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004955   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2004956   +   end;
MPRINT(EM_DIAGRAM):   end;
2004957   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004958   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2004959   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004960   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004961   +   end;
MPRINT(EM_DIAGRAM):   end;
2004962   +end;
MPRINT(EM_DIAGRAM):   end;
2004963   +
2004964   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2004965   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2004966   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2004967   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2004968   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004969   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004970   +end;
MPRINT(EM_DIAGRAM):   end;
2004971   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004972   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004973   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2004974   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004975   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2004976   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2004977   +   end;
MPRINT(EM_DIAGRAM):   end;
2004978   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2004979   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2004980   +   end;
MPRINT(EM_DIAGRAM):   end;
2004981   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2004982   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2004983   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2004984   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004985   +   end;
MPRINT(EM_DIAGRAM):   end;
2004986   +end;
MPRINT(EM_DIAGRAM):   end;
2004987   +
2004988   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2004989   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2004990   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2004991   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2004992   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2004993   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2004994   +end;
MPRINT(EM_DIAGRAM):   end;
2004995   +else do;
MPRINT(EM_DIAGRAM):   else do;
2004996   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2004997   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2004998   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2004999   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2005000   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2005001   +   end;
MPRINT(EM_DIAGRAM):   end;
2005002   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2005003   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2005004   +   end;
MPRINT(EM_DIAGRAM):   end;
2005005   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005006   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2005007   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005008   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005009   +   end;
MPRINT(EM_DIAGRAM):   end;
2005010   +end;
MPRINT(EM_DIAGRAM):   end;
2005011   +
2005012   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2005013   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2005014   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2005015   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2005016   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005017   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005018   +end;
MPRINT(EM_DIAGRAM):   end;
2005019   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005020   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2005021   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2005022   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005023   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2005024   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2005025   +   end;
MPRINT(EM_DIAGRAM):   end;
2005026   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2005027   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2005028   +   end;
MPRINT(EM_DIAGRAM):   end;
2005029   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005030   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2005031   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005032   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005033   +   end;
MPRINT(EM_DIAGRAM):   end;
2005034   +end;
MPRINT(EM_DIAGRAM):   end;
2005035   +
2005036   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2005037   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2005038   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2005039   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2005040   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005041   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005042   +end;
MPRINT(EM_DIAGRAM):   end;
2005043   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005044   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2005045   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2005046   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005047   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2005048   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2005049   +   end;
MPRINT(EM_DIAGRAM):   end;
2005050   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2005051   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2005052   +   end;
MPRINT(EM_DIAGRAM):   end;
2005053   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005054   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2005055   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005056   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005057   +   end;
MPRINT(EM_DIAGRAM):   end;
2005058   +end;
MPRINT(EM_DIAGRAM):   end;
2005059   +
2005060   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2005061   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2005062   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2005063   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2005064   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005065   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005066   +end;
MPRINT(EM_DIAGRAM):   end;
2005067   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005068   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2005069   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2005070   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005071   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2005072   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2005073   +   end;
MPRINT(EM_DIAGRAM):   end;
2005074   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2005075   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2005076   +   end;
MPRINT(EM_DIAGRAM):   end;
2005077   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005078   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2005079   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005080   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005081   +   end;
MPRINT(EM_DIAGRAM):   end;
2005082   +end;
MPRINT(EM_DIAGRAM):   end;
2005083   +
2005084   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2005085   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2005086   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2005087   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2005088   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2005089   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2005090   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2005091   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2005092   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2005093   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2005094   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2005095   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2005096   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005097   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005098   +end;
MPRINT(EM_DIAGRAM):   end;
2005099   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005100   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2005101   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2005102   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005103   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2005104   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2005105   +   end;
MPRINT(EM_DIAGRAM):   end;
2005106   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2005107   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2005108   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2005109   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2005110   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2005111   +   end;
MPRINT(EM_DIAGRAM):   end;
2005112   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2005113   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2005114   +   end;
MPRINT(EM_DIAGRAM):   end;
2005115   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2005116   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2005117   +   end;
MPRINT(EM_DIAGRAM):   end;
2005118   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2005119   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2005120   +   end;
MPRINT(EM_DIAGRAM):   end;
2005121   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005122   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2005123   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2005124   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2005125   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2005126   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005127   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005128   +   end;
MPRINT(EM_DIAGRAM):   end;
2005129   +end;
MPRINT(EM_DIAGRAM):   end;
2005130   +
2005131   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2005132   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2005133   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2005134   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2005135   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2005136   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2005137   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2005138   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2005139   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2005140   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2005141   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2005142   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2005143   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2005144   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005145   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005146   +end;
MPRINT(EM_DIAGRAM):   end;
2005147   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005148   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2005149   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2005150   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005151   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2005152   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2005153   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2005154   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2005155   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2005156   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2005157   +         end;
MPRINT(EM_DIAGRAM):   end;
2005158   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2005159   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2005160   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2005161   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2005162   +            end;
MPRINT(EM_DIAGRAM):   end;
2005163   +         end;
MPRINT(EM_DIAGRAM):   end;
2005164   +      end;
MPRINT(EM_DIAGRAM):   end;
2005165   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2005166   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2005167   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2005168   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2005169   +         end;
MPRINT(EM_DIAGRAM):   end;
2005170   +      end;
MPRINT(EM_DIAGRAM):   end;
2005171   +   end;
MPRINT(EM_DIAGRAM):   end;
2005172   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005173   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2005174   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2005175   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2005176   +      end;
MPRINT(EM_DIAGRAM):   end;
2005177   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2005178   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2005179   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2005180   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2005181   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2005182   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2005183   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2005184   +         end;
MPRINT(EM_DIAGRAM):   end;
2005185   +      end;
MPRINT(EM_DIAGRAM):   end;
2005186   +   end;
MPRINT(EM_DIAGRAM):   end;
2005187   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2005188   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2005189   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2005190   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2005191   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2005192   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005193   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005194   +   end;
MPRINT(EM_DIAGRAM):   end;
2005195   +end;
MPRINT(EM_DIAGRAM):   end;
2005196   +
2005197   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005198   +*** Checking missing input Interval
2005199   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2005200   +
2005201   +IF NMISS(
2005202   +   Income ,
2005203   +   Kidhome ,
2005204   +   MntFishProducts ,
2005205   +   MntFruits ,
2005206   +   MntGoldProds ,
2005207   +   MntMeatProducts ,
2005208   +   MntSweetProducts ,
2005209   +   MntWines ,
2005210   +   NumCatalogPurchases ,
2005211   +   NumDealsPurchases ,
2005212   +   NumStorePurchases ,
2005213   +   NumWebPurchases ,
2005214   +   NumWebVisitsMonth ,
2005215   +   Recency ,
2005216   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2005217   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2005218   +
2005219   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005220   +END;
MPRINT(EM_DIAGRAM):   END;
2005221   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005222   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2005223   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005224   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2005225   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2005226   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2005227   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2005228   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2005229   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2005230   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2005231   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2005232   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2005233   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2005234   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2005235   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2005236   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2005237   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2005238   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2005239   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2005240   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2005241   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2005242   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2005243   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2005244   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2005245   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2005246   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2005247   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2005248   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2005249   +END;
MPRINT(EM_DIAGRAM):   END;
2005250   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2005251   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2005252   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2005253   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2005254   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2005255   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2005256   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2005257   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2005258   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2005259   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2005260   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2005261   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2005262   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2005263   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2005264   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2005265   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2005266   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2005267   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2005268   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2005269   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2005270   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2005271   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2005272   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2005273   +   ELSE S_NumCatalogPurchases
2005274   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2005275   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2005276   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2005277   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2005278   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2005279   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2005280   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2005281   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2005282   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2005283   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2005284   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2005285   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2005286   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2005287   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2005288   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2005289   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2005290   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2005291   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2005292   +END;
MPRINT(EM_DIAGRAM):   END;
2005293   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005294   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2005295   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005296   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005297   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2005298   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005299   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005300   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2005301   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005302   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2005303   +   H11  =     0.87660114046125 * S_Income  +     -0.7994451897827 * S_Kidhome
2005304   +          +    -0.08967295716195 * S_MntFishProducts
2005305   +          +     0.03184635437516 * S_MntFruits  +    -0.13860895575438 *
2005306   +        S_MntGoldProds  +     0.55790460748169 * S_MntMeatProducts
2005307   +          +    -0.02806094557115 * S_MntSweetProducts
2005308   +          +    -0.14537763592724 * S_MntWines  +     0.76891266523847 *
2005309   +        S_NumCatalogPurchases  +     0.16842007461305 * S_NumDealsPurchases
2005310   +          +     0.25137876058262 * S_NumStorePurchases
2005311   +          +    -0.07865442401292 * S_NumWebPurchases
2005312   +          +     1.03197398967259 * S_NumWebVisitsMonth
2005313   +          +    -1.26907156503759 * S_Recency  +    -0.76016893316351 *
2005314   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 0.87660114046125 * S_Income + -0.7994451897827 * S_Kidhome + 
-0.08967295716195 * S_MntFishProducts + 0.03184635437516 * S_MntFruits + -0.13860895575438 * 
S_MntGoldProds + 0.55790460748169 * S_MntMeatProducts + -0.02806094557115 * S_MntSweetProducts 
+ -0.14537763592724 * S_MntWines + 0.76891266523847 * S_NumCatalogPurchases + 0.16842007461305 
* S_NumDealsPurchases + 0.25137876058262 * S_NumStorePurchases + -0.07865442401292 * 
S_NumWebPurchases + 1.03197398967259 * S_NumWebVisitsMonth + -1.26907156503759 * S_Recency + 
-0.76016893316351 * S_Teenhome ;
2005315   +   H12  =     0.37295000114468 * S_Income  +    -0.12834211496575 * S_Kidhome
2005316   +          +     0.19312392388912 * S_MntFishProducts
2005317   +          +      0.1561688289137 * S_MntFruits  +     0.04004810938796 *
2005318   +        S_MntGoldProds  +     0.32599201739588 * S_MntMeatProducts
2005319   +          +       0.204174263605 * S_MntSweetProducts
2005320   +          +    -0.11560784817014 * S_MntWines  +     0.12255073568725 *
2005321   +        S_NumCatalogPurchases  +    -0.05543734180218 * S_NumDealsPurchases
2005322   +          +     0.07747830335769 * S_NumStorePurchases
2005323   +          +     0.07960837555191 * S_NumWebPurchases
2005324   +          +     0.02351602389122 * S_NumWebVisitsMonth
2005325   +          +     -0.2840853952427 * S_Recency  +    -0.47421627761687 *
2005326   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.37295000114468 * S_Income + -0.12834211496575 * S_Kidhome + 
0.19312392388912 * S_MntFishProducts + 0.1561688289137 * S_MntFruits + 0.04004810938796 * 
S_MntGoldProds + 0.32599201739588 * S_MntMeatProducts + 0.204174263605 * S_MntSweetProducts + 
-0.11560784817014 * S_MntWines + 0.12255073568725 * S_NumCatalogPurchases + -0.05543734180218 
* S_NumDealsPurchases + 0.07747830335769 * S_NumStorePurchases + 0.07960837555191 * 
S_NumWebPurchases + 0.02351602389122 * S_NumWebVisitsMonth + -0.2840853952427 * S_Recency + 
-0.47421627761687 * S_Teenhome ;
2005327   +   H13  =    -0.33428925248315 * S_Income  +    -0.03845622730742 * S_Kidhome
2005328   +          +     0.18733919794636 * S_MntFishProducts
2005329   +          +     0.45907982190052 * S_MntFruits  +    -0.48776616433719 *
2005330   +        S_MntGoldProds  +    -0.41340481007204 * S_MntMeatProducts
2005331   +          +     0.42514606159239 * S_MntSweetProducts
2005332   +          +     0.20038001368787 * S_MntWines  +    -1.21708501803782 *
2005333   +        S_NumCatalogPurchases  +    -1.06820061274533 * S_NumDealsPurchases
2005334   +          +     0.36582106462789 * S_NumStorePurchases
2005335   +          +     0.04244777020435 * S_NumWebPurchases
2005336   +          +    -0.24296342902503 * S_NumWebVisitsMonth
2005337   +          +     0.27451716762947 * S_Recency  +     0.13110477325277 *
2005338   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.33428925248315 * S_Income + -0.03845622730742 * S_Kidhome + 
0.18733919794636 * S_MntFishProducts + 0.45907982190052 * S_MntFruits + -0.48776616433719 * 
S_MntGoldProds + -0.41340481007204 * S_MntMeatProducts + 0.42514606159239 * S_MntSweetProducts 
+ 0.20038001368787 * S_MntWines + -1.21708501803782 * S_NumCatalogPurchases + 
-1.06820061274533 * S_NumDealsPurchases + 0.36582106462789 * S_NumStorePurchases + 
0.04244777020435 * S_NumWebPurchases + -0.24296342902503 * S_NumWebVisitsMonth + 
0.27451716762947 * S_Recency + 0.13110477325277 * S_Teenhome ;
2005339   +   H14  =    -0.70493412542585 * S_Income  +     0.41202796606799 * S_Kidhome
2005340   +          +     0.05986489897572 * S_MntFishProducts
2005341   +          +    -0.05040531715469 * S_MntFruits  +       0.051068387592 *
2005342   +        S_MntGoldProds  +    -0.13581881662481 * S_MntMeatProducts
2005343   +          +    -0.05513370461072 * S_MntSweetProducts
2005344   +          +     0.77472084468819 * S_MntWines  +    -0.03211788969126 *
2005345   +        S_NumCatalogPurchases  +    -0.24097486430988 * S_NumDealsPurchases
2005346   +          +     0.64364674828841 * S_NumStorePurchases
2005347   +          +     0.15084748708424 * S_NumWebPurchases
2005348   +          +    -0.94144998356377 * S_NumWebVisitsMonth
2005349   +          +     1.16778338364599 * S_Recency  +     0.32089861635238 *
2005350   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = -0.70493412542585 * S_Income + 0.41202796606799 * S_Kidhome + 
0.05986489897572 * S_MntFishProducts + -0.05040531715469 * S_MntFruits + 0.051068387592 * 
S_MntGoldProds + -0.13581881662481 * S_MntMeatProducts + -0.05513370461072 * 
S_MntSweetProducts + 0.77472084468819 * S_MntWines + -0.03211788969126 * S_NumCatalogPurchases 
+ -0.24097486430988 * S_NumDealsPurchases + 0.64364674828841 * S_NumStorePurchases + 
0.15084748708424 * S_NumWebPurchases + -0.94144998356377 * S_NumWebVisitsMonth + 
1.16778338364599 * S_Recency + 0.32089861635238 * S_Teenhome ;
2005351   +   H15  =    -0.15703510827879 * S_Income  +    -0.30977841002562 * S_Kidhome
2005352   +          +    -0.14543196273578 * S_MntFishProducts
2005353   +          +     0.32223695896711 * S_MntFruits  +    -0.31846203211698 *
2005354   +        S_MntGoldProds  +     -1.4125160823105 * S_MntMeatProducts
2005355   +          +     0.49374793444169 * S_MntSweetProducts
2005356   +          +     0.39699716010219 * S_MntWines  +    -0.88140331687645 *
2005357   +        S_NumCatalogPurchases  +    -0.87657222813687 * S_NumDealsPurchases
2005358   +          +     1.23754786782746 * S_NumStorePurchases
2005359   +          +     1.11316667348511 * S_NumWebPurchases
2005360   +          +    -1.08592446439781 * S_NumWebVisitsMonth
2005361   +          +     0.66958517589542 * S_Recency  +     0.06799032788481 *
2005362   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.15703510827879 * S_Income + -0.30977841002562 * S_Kidhome + 
-0.14543196273578 * S_MntFishProducts + 0.32223695896711 * S_MntFruits + -0.31846203211698 * 
S_MntGoldProds + -1.4125160823105 * S_MntMeatProducts + 0.49374793444169 * S_MntSweetProducts 
+ 0.39699716010219 * S_MntWines + -0.88140331687645 * S_NumCatalogPurchases + 
-0.87657222813687 * S_NumDealsPurchases + 1.23754786782746 * S_NumStorePurchases + 
1.11316667348511 * S_NumWebPurchases + -1.08592446439781 * S_NumWebVisitsMonth + 
0.66958517589542 * S_Recency + 0.06799032788481 * S_Teenhome ;
2005363   +   H16  =    -0.10360901553583 * S_Income  +     0.39257497240865 * S_Kidhome
2005364   +          +     0.29549884005341 * S_MntFishProducts
2005365   +          +     0.04922491353914 * S_MntFruits  +     -0.1412659458221 *
2005366   +        S_MntGoldProds  +    -0.12361454534126 * S_MntMeatProducts
2005367   +          +    -0.11909215986981 * S_MntSweetProducts
2005368   +          +     0.11430484977092 * S_MntWines  +    -0.66235553839539 *
2005369   +        S_NumCatalogPurchases  +     0.17261763180198 * S_NumDealsPurchases
2005370   +          +     0.30109334594548 * S_NumStorePurchases
2005371   +          +     0.01985762767489 * S_NumWebPurchases
2005372   +          +     0.44965133281333 * S_NumWebVisitsMonth
2005373   +          +     0.32338634259192 * S_Recency  +    -0.04032956941805 *
2005374   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H16 = -0.10360901553583 * S_Income + 0.39257497240865 * S_Kidhome + 
0.29549884005341 * S_MntFishProducts + 0.04922491353914 * S_MntFruits + -0.1412659458221 * 
S_MntGoldProds + -0.12361454534126 * S_MntMeatProducts + -0.11909215986981 * 
S_MntSweetProducts + 0.11430484977092 * S_MntWines + -0.66235553839539 * S_NumCatalogPurchases 
+ 0.17261763180198 * S_NumDealsPurchases + 0.30109334594548 * S_NumStorePurchases + 
0.01985762767489 * S_NumWebPurchases + 0.44965133281333 * S_NumWebVisitsMonth + 
0.32338634259192 * S_Recency + -0.04032956941805 * S_Teenhome ;
2005375   +   H11  = H11  +    -0.23026310289024 * AcceptedCmp10
2005376   +          +    -0.82550012364234 * AcceptedCmp20  +    -0.67764228269441 *
2005377   +        AcceptedCmp30  +    -0.51547666117685 * AcceptedCmp40
2005378   +          +    -0.36424958084824 * AcceptedCmp50  +       0.119862855783 *
2005379   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.23026310289024 * AcceptedCmp10 + -0.82550012364234 * 
AcceptedCmp20 + -0.67764228269441 * AcceptedCmp30 + -0.51547666117685 * AcceptedCmp40 + 
-0.36424958084824 * AcceptedCmp50 + 0.119862855783 * Complain0 ;
2005380   +   H12  = H12  +     0.02722288857426 * AcceptedCmp10
2005381   +          +      0.1236576068539 * AcceptedCmp20  +    -0.31265425960737 *
2005382   +        AcceptedCmp30  +    -0.25076565034266 * AcceptedCmp40
2005383   +          +    -0.20158659730872 * AcceptedCmp50  +    -0.43687103612629 *
2005384   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.02722288857426 * AcceptedCmp10 + 0.1236576068539 * 
AcceptedCmp20 + -0.31265425960737 * AcceptedCmp30 + -0.25076565034266 * AcceptedCmp40 + 
-0.20158659730872 * AcceptedCmp50 + -0.43687103612629 * Complain0 ;
2005385   +   H13  = H13  +     0.21852176280571 * AcceptedCmp10
2005386   +          +     0.01727991436107 * AcceptedCmp20  +     0.19303261094625 *
2005387   +        AcceptedCmp30  +    -0.65492191560509 * AcceptedCmp40
2005388   +          +    -0.09636750660684 * AcceptedCmp50  +     0.07579128571046 *
2005389   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.21852176280571 * AcceptedCmp10 + 0.01727991436107 * 
AcceptedCmp20 + 0.19303261094625 * AcceptedCmp30 + -0.65492191560509 * AcceptedCmp40 + 
-0.09636750660684 * AcceptedCmp50 + 0.07579128571046 * Complain0 ;
2005390   +   H14  = H14  +     0.20819294353855 * AcceptedCmp10
2005391   +          +      0.5159102831901 * AcceptedCmp20  +     0.55295587458643 *
2005392   +        AcceptedCmp30  +     0.80682431419623 * AcceptedCmp40
2005393   +          +     0.74007057798158 * AcceptedCmp50  +     -0.4573052390807 *
2005394   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.20819294353855 * AcceptedCmp10 + 0.5159102831901 * 
AcceptedCmp20 + 0.55295587458643 * AcceptedCmp30 + 0.80682431419623 * AcceptedCmp40 + 
0.74007057798158 * AcceptedCmp50 + -0.4573052390807 * Complain0 ;
2005395   +   H15  = H15  +     1.26330939420524 * AcceptedCmp10
2005396   +          +     0.29494505935793 * AcceptedCmp20  +     0.25561322032419 *
2005397   +        AcceptedCmp30  +     0.50102236777897 * AcceptedCmp40
2005398   +          +     0.20696267245027 * AcceptedCmp50  +    -0.00849145233901 *
2005399   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 1.26330939420524 * AcceptedCmp10 + 0.29494505935793 * 
AcceptedCmp20 + 0.25561322032419 * AcceptedCmp30 + 0.50102236777897 * AcceptedCmp40 + 
0.20696267245027 * AcceptedCmp50 + -0.00849145233901 * Complain0 ;
2005400   +   H16  = H16  +     0.03638428330381 * AcceptedCmp10
2005401   +          +     0.27994215452657 * AcceptedCmp20  +    -0.03861840445025 *
2005402   +        AcceptedCmp30  +      0.3398057347433 * AcceptedCmp40
2005403   +          +    -0.00738335957724 * AcceptedCmp50  +      0.0447804375799 *
2005404   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.03638428330381 * AcceptedCmp10 + 0.27994215452657 * 
AcceptedCmp20 + -0.03861840445025 * AcceptedCmp30 + 0.3398057347433 * AcceptedCmp40 + 
-0.00738335957724 * AcceptedCmp50 + 0.0447804375799 * Complain0 ;
2005405   +   H11  = H11  +     0.27482405283962 * Education2n_Cycle
2005406   +          +     0.11084012456612 * EducationBasic  +    -0.23835071987159 *
2005407   +        EducationGraduation  +    -0.10167082180552 * EducationMaster
2005408   +          +     0.51015833145636 * Marital_StatusDivorced
2005409   +          +     -1.1653662063616 * Marital_StatusMarried
2005410   +          +     1.19396547750441 * Marital_StatusSingle
2005411   +          +    -0.99605751789992 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27482405283962 * Education2n_Cycle + 0.11084012456612 * 
EducationBasic + -0.23835071987159 * EducationGraduation + -0.10167082180552 * EducationMaster 
+ 0.51015833145636 * Marital_StatusDivorced + -1.1653662063616 * Marital_StatusMarried + 
1.19396547750441 * Marital_StatusSingle + -0.99605751789992 * Marital_StatusTogether ;
2005412   +   H12  = H12  +    -0.05268347704739 * Education2n_Cycle
2005413   +          +     0.19362065968028 * EducationBasic  +    -0.26784257195414 *
2005414   +        EducationGraduation  +     0.16650577465959 * EducationMaster
2005415   +          +     0.09154288513995 * Marital_StatusDivorced
2005416   +          +     0.06725684628382 * Marital_StatusMarried
2005417   +          +     0.11327659191494 * Marital_StatusSingle
2005418   +          +     0.01793778876811 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.05268347704739 * Education2n_Cycle + 0.19362065968028 * 
EducationBasic + -0.26784257195414 * EducationGraduation + 0.16650577465959 * EducationMaster 
+ 0.09154288513995 * Marital_StatusDivorced + 0.06725684628382 * Marital_StatusMarried + 
0.11327659191494 * Marital_StatusSingle + 0.01793778876811 * Marital_StatusTogether ;
2005419   +   H13  = H13  +     -0.1027084329077 * Education2n_Cycle
2005420   +          +    -0.01342449140757 * EducationBasic  +    -0.35627920427273 *
2005421   +        EducationGraduation  +    -0.05554656531793 * EducationMaster
2005422   +          +     0.37591653615852 * Marital_StatusDivorced
2005423   +          +    -0.05024236790132 * Marital_StatusMarried
2005424   +          +    -0.28317154997144 * Marital_StatusSingle
2005425   +          +    -0.19247490223101 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1027084329077 * Education2n_Cycle + -0.01342449140757 * 
EducationBasic + -0.35627920427273 * EducationGraduation + -0.05554656531793 * EducationMaster 
+ 0.37591653615852 * Marital_StatusDivorced + -0.05024236790132 * Marital_StatusMarried + 
-0.28317154997144 * Marital_StatusSingle + -0.19247490223101 * Marital_StatusTogether ;
2005426   +   H14  = H14  +     -0.4162491480577 * Education2n_Cycle
2005427   +          +     0.38075572764074 * EducationBasic  +    -0.28169469529121 *
2005428   +        EducationGraduation  +       0.638986138084 * EducationMaster
2005429   +          +    -0.44885292450558 * Marital_StatusDivorced
2005430   +          +     0.78958791519299 * Marital_StatusMarried
2005431   +          +    -0.09688714431356 * Marital_StatusSingle
2005432   +          +     0.84239030196202 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.4162491480577 * Education2n_Cycle + 0.38075572764074 * 
EducationBasic + -0.28169469529121 * EducationGraduation + 0.638986138084 * EducationMaster + 
-0.44885292450558 * Marital_StatusDivorced + 0.78958791519299 * Marital_StatusMarried + 
-0.09688714431356 * Marital_StatusSingle + 0.84239030196202 * Marital_StatusTogether ;
2005433   +   H15  = H15  +     0.33126657974568 * Education2n_Cycle
2005434   +          +     0.44539039262703 * EducationBasic  +    -0.09154902903865 *
2005435   +        EducationGraduation  +    -0.26400363440725 * EducationMaster
2005436   +          +    -0.30801073895989 * Marital_StatusDivorced
2005437   +          +     -0.1285150749223 * Marital_StatusMarried
2005438   +          +     0.06775542164414 * Marital_StatusSingle
2005439   +          +    -0.13032366945766 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.33126657974568 * Education2n_Cycle + 0.44539039262703 * 
EducationBasic + -0.09154902903865 * EducationGraduation + -0.26400363440725 * EducationMaster 
+ -0.30801073895989 * Marital_StatusDivorced + -0.1285150749223 * Marital_StatusMarried + 
0.06775542164414 * Marital_StatusSingle + -0.13032366945766 * Marital_StatusTogether ;
2005440   +   H16  = H16  +     0.02030175222681 * Education2n_Cycle
2005441   +          +    -0.19579401096879 * EducationBasic  +      0.2070703930869 *
2005442   +        EducationGraduation  +    -0.40706983167068 * EducationMaster
2005443   +          +     0.22193599090368 * Marital_StatusDivorced
2005444   +          +    -0.54544672042168 * Marital_StatusMarried
2005445   +          +    -0.02237436019864 * Marital_StatusSingle
2005446   +          +    -0.21979468164854 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.02030175222681 * Education2n_Cycle + -0.19579401096879 * 
EducationBasic + 0.2070703930869 * EducationGraduation + -0.40706983167068 * EducationMaster + 
0.22193599090368 * Marital_StatusDivorced + -0.54544672042168 * Marital_StatusMarried + 
-0.02237436019864 * Marital_StatusSingle + -0.21979468164854 * Marital_StatusTogether ;
2005447   +   H11  =    -1.24550293901788 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.24550293901788 + H11 ;
2005448   +   H12  =     0.36762263942809 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.36762263942809 + H12 ;
2005449   +   H13  =     0.07010867577103 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.07010867577103 + H13 ;
2005450   +   H14  =    -1.94014549272156 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.94014549272156 + H14 ;
2005451   +   H15  =     0.17666656180153 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 0.17666656180153 + H15 ;
2005452   +   H16  =    -1.64626406576709 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.64626406576709 + H16 ;
2005453   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2005454   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2005455   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2005456   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2005457   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2005458   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
2005459   +END;
MPRINT(EM_DIAGRAM):   END;
2005460   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2005461   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2005462   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2005463   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2005464   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2005465   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2005466   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
2005467   +END;
MPRINT(EM_DIAGRAM):   END;
2005468   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005469   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2005470   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005471   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2005472   +   P_DepVar1  =     4.21126046696691 * H11  +      0.6565061288056 * H12
2005473   +          +    -1.92484011508628 * H13  +    -3.74020722142387 * H14
2005474   +          +    -3.27353026762143 * H15  +     -1.2596922869974 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.21126046696691 * H11 + 0.6565061288056 * H12 + 
-1.92484011508628 * H13 + -3.74020722142387 * H14 + -3.27353026762143 * H15 + -1.2596922869974 
* H16 ;
2005475   +   P_DepVar1  =    -1.36806658950323 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.36806658950323 + P_DepVar1 ;
2005476   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2005477   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2005478   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2005479   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2005480   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2005481   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2005482   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2005483   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2005484   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2005485   +END;
MPRINT(EM_DIAGRAM):   END;
2005486   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2005487   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2005488   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2005489   +END;
MPRINT(EM_DIAGRAM):   END;
2005490   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2005491   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2005492   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2005493   +END;
MPRINT(EM_DIAGRAM):   END;
2005494   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005495   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2005496   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2005497   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2005498   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2005499   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2005500   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2005501   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2005502   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2005503   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2005504   +END;
MPRINT(EM_DIAGRAM):   END;
2005505   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2005506   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2005507   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2005508   +drop
2005509   +H11
2005510   +H12
2005511   +H13
2005512   +H14
2005513   +H15
2005514   +H16
2005515   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
2005516   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2005517    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2005518    quit;
2005519    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2005520    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2005521    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2005522    retain ID 2 Node "Neural35";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural35";
2005523    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2005524    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2016 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 2016 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005525    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2005526    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005527    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2016 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 2016 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005528    proc sort data=EMWS8.Neural35_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural35_variableset out=_temp2(keep=NAME CREATOR);
2005529    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005530    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.NEURAL35_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005531    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005532    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2005533    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2005534    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005535    proc contents data=EMWS8.Neural35_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural35_train out=_meta(keep=NAME) noprint;
2005536    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds
      

2005537    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2005538    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005539    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 53 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005540    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005541    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2005542    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005543    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005544    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2005545    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2005545  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 970 rows and 5 columns.

2005546    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005547    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2005548    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 970 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 970 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005549    filename _pref
2005549  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
2005550    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2005551    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
2005552   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2005553   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
2005554   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2005555   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
2005556   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
2005557   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2005558    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2005559    quit;
2005560    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2005561    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2005562    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2005563    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
2005564    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2005565    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005566    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2005567    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005568    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005569    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
2005570    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005571    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005572    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005573    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2005574    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2005575    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005576    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
2005577    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

2005578    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2005579    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005580    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005581    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005582    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2005583    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005584    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005585    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2005586    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2005586  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.

2005587    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005588    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2005589    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 974 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005590    filename _pref
2005590  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
2005591    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2005592    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
2005593   +
2005594   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
2005595   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
2005595  !+es;
MPRINT(EM_DIAGRAM):   
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
2005596   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
2005597   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
2005598   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
2005599   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
2005600   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2005601    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2005602    quit;
2005603    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2005604    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2005605    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2005606    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
2005607    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2005608    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005609    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2005610    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005611    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005612    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
2005613    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005614    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005615    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005616    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2005617    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2005618    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005619    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
2005620    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005621    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2005622    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005623    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005624    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005625    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2005626    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005627    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005628    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2005629    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2005629  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.

2005630    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005631    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2005632    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1013 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005633    filename _pref
2005633  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
2005634    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2005635    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
2005636   +
2005637   +
2005638   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
2005639   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
2005640   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
2005641   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
2005642   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
2005643   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005644   +
2005645   +
2005646   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
2005647   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
2005648   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
2005649   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
2005650   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
2005651   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005652   +
2005653   +
2005654   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
2005655   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
2005656   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
2005657   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
2005658   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
2005659   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005660   +
2005661   +
2005662   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
2005663   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
2005664   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
2005665   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
2005666   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
2005667   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005668   +
2005669   +
2005670   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
2005671   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
2005672   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
2005673   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
2005674   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
2005675   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005676   +
2005677   +
2005678   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
2005679   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
2005680   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
2005681   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
2005682   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
2005683   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005684   +
2005685   +
2005686   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
2005687   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
2005688   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
2005689   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
2005690   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
2005691   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005692   +
2005693   +
2005694   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
2005695   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
2005696   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
2005697   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
2005698   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
2005699   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2005700   +if
2005701   +_FILTERNORM1 not in ( '.')
2005702   + and
2005703   +_FILTERNORM2 not in ( '.')
2005704   + and
2005705   +_FILTERNORM3 not in ( '.')
2005706   + and
2005707   +_FILTERNORM4 not in ( '.')
2005708   + and
2005709   +_FILTERNORM5 not in ( '.')
2005710   + and
2005711   +_FILTERNORM6 not in ( '.')
2005712   + and
2005713   +_FILTERNORM7 not in ( ' ')
2005714   + and
2005715   +_FILTERNORM8 not in ( ' ')
2005716   +and
2005717   +( Dt_Customer ne .)
2005718   +and ( Income ne . and (Income<=107000))
2005719   +and ( Kidhome ne .)
2005720   +and ( MntFishProducts ne .)
2005721   +and ( MntFruits ne .)
2005722   +and ( MntGoldProds ne .)
2005723   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
2005724   +and ( MntSweetProducts ne .)
2005725   +and ( MntWines ne .)
2005726   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
2005727   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
2005728   +and ( NumStorePurchases ne .)
2005729   +and ( NumWebPurchases ne .)
2005730   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
2005731   +and ( Recency ne .)
2005732   +and ( Teenhome ne .)
2005733   +and ( Year_Birth ne .)
2005734   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and 
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and 
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and ( 
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and ( 
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne 
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and ( 
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and 
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and ( 
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne 
.) and ( Year_Birth ne .) then do;
2005735   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
2005736   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
2005737   +end;
MPRINT(EM_DIAGRAM):   end;
2005738   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
2005739   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2005740    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2005741    quit;
2005742    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2005743    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2005744    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2005745    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
2005746    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2005747    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005748    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2005749    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005750    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005751    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
2005752    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005753    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005754    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005755    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2005756    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2005757    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005758    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
2005759    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

2005760    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2005761    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005762    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005763    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2005764    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2005765    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2005766    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005767    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2005768    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2005768  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.

2005769    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2005770    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2005771    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1079 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2005772    %macro varDept(fcmpdata=,id=);
2005773    %global nobs&id scoreFlag&id;
2005774    %let scoreFlag&id = 0;
2005775    %if &id=1 or ^&fcmpStart %then %do;
2005776    proc sort data=&fcmpdata out=_temp&id nodupkey;
2005777    by NAME;
2005778    where id=&id and LHS in( %let j=1;
2005779    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
2005780    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
2005781    "&var" %let j = %eval(&j+1);
2005782    %end;
2005783    );
2005784    run;
2005785    %let dsid = %sysfunc(open(_temp&id));
2005786    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2005787    %let dsid = %sysfunc(close(&dsid));
2005788    %if &&nobs&id %then %do;
2005789    %let scoreFlag&id = 1;
2005790    %let fcmpStart = 1;
2005791    %end;
2005792    %else %let fcmpStart = 0;
2005793    %end;
2005794    %else %do;
2005795    proc sort data=&fcmpdata out=_tempid;
2005796    where id=&id;
2005797    by LHS;
2005798    run;
2005799    %let dsid = %sysfunc(open(_tempid));
2005800    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2005801    %let dsid = %sysfunc(close(&dsid));
2005802    %if ^&&nobs&id %then %do;
2005803    proc datasets lib=work nolist;
2005804    delete _tempid;
2005805    run;
2005806    quit;
2005807    %end;
2005808    %else %do;
2005809    data _tempAll;
2005810    set %let j=%eval(&id-1);
2005811    %do x=1 %to &j;
2005812    %if &&nobs&x %then %do;
2005813    _temp&x %end;
2005814    %end;
2005815    ;
2005816    run;
2005817    proc sql;
2005818    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
2005818  ! work._tempid p2 where p.name=p2.lhs;
2005819    quit;
2005820    data _temp&id;
2005821    set _temp&id;
2005822    where LHS ne '' and NAME ne '' and Node ne '';
2005823    run;
2005824    proc datasets lib=work nolist;
2005825    delete _tempAll;
2005826    run;
2005827    %let dsid = %sysfunc(open(_temp&id));
2005828    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2005829    %let dsid = %sysfunc(close(&dsid));
2005830    %if ^&&nobs&id %then %do;
2005831    proc datasets lib=work nolist;
2005832    delete _temp&id;
2005833    run;
2005834    quit;
2005835    %end;
2005836    %else %do;
2005837    %let scoreFlag&id = 1;
2005838    data _temp&id;
2005839    set _temp&id;
2005840    where LHS ne NAME and node ne '';
2005841    run;
2005842    %let dsid = %sysfunc(open(_temp&id));
2005843    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2005844    %let dsid = %sysfunc(close(&dsid));
2005845    %if ^&&nobs&id %then %do;
2005846    proc datasets lib=work nolist;
2005847    delete _temp&id;
2005848    run;
2005849    quit;
2005850    %end;
2005851    %else %do;
2005852    proc sort data=_temp&id nodupkey;
2005853    by LHS NAME;
2005854    run;
2005855    %end;
2005856    %end;
2005857    %end;
2005858    %end;
2005859    %mend varDept;
2005860    %macro optCode(outdata=fcmpdata);
2005861    %global fcmpStart;
2005862    %let fcmpStart = 0;
2005863    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
2005864    %let NumNodes=9;
2005865    %do k=1 %to &NumNodes;
2005866    %vardept(fcmpdata=&outdata, id=&k);
2005867    %end;
2005868    %mend optCode;
2005869    %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: There were 98 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 73 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 25 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp6;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP6 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
The SAS System

MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

2005870    filename _pref
2005870  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas";
2005871    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2005872    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural34\EMPUBLISHSCORE.sas.
2005873   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2005874   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2005875   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2005876   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2005877   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2005878   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2005879   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2005880   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2005881   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2005882   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2005883   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2005884   +LENGTH _WARN_ $4
2005885   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
2005886   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2005887   +
2005888   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2005889   +
2005890   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2005891   +
2005892   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2005893   +
2005894   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2005895   +
2005896   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2005897   +
2005898   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2005899   +
2005900   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2005901   +
2005902   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2005903   +
2005904   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2005905   +
2005906   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2005907   +
2005908   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2005909   +
2005910   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2005911   +
2005912   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2005913   +
2005914   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2005915   +
2005916   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2005917   +
2005918   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2005919   +
2005920   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2005921   +
2005922   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2005923   +
2005924   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2005925   +
2005926   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2005927   +
2005928   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2005929   +
2005930   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2005931   +
2005932   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2005933   +
2005934   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2005935   +
2005936   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2005937   +
2005938   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2005939   +
2005940   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2005941   +
2005942   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2005943   +
2005944   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2005945   +
2005946   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2005947   +
2005948   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2005949   +
2005950   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
2005951   +
2005952   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
2005953   +
2005954   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2005955   +
2005956   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2005957   +
2005958   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2005959   +
2005960   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2005961   +
2005962   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2005963   +
2005964   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2005965   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2005966   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2005967   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2005968   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005969   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005970   +end;
MPRINT(EM_DIAGRAM):   end;
2005971   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005972   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2005973   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2005974   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005975   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2005976   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2005977   +   end;
MPRINT(EM_DIAGRAM):   end;
2005978   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2005979   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2005980   +   end;
MPRINT(EM_DIAGRAM):   end;
2005981   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2005982   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2005983   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2005984   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005985   +   end;
MPRINT(EM_DIAGRAM):   end;
2005986   +end;
MPRINT(EM_DIAGRAM):   end;
2005987   +
2005988   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2005989   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2005990   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2005991   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2005992   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2005993   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2005994   +end;
MPRINT(EM_DIAGRAM):   end;
2005995   +else do;
MPRINT(EM_DIAGRAM):   else do;
2005996   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2005997   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2005998   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2005999   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006000   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2006001   +   end;
MPRINT(EM_DIAGRAM):   end;
2006002   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006003   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2006004   +   end;
MPRINT(EM_DIAGRAM):   end;
2006005   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006006   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2006007   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006008   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006009   +   end;
MPRINT(EM_DIAGRAM):   end;
2006010   +end;
MPRINT(EM_DIAGRAM):   end;
2006011   +
2006012   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2006013   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2006014   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2006015   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2006016   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006017   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006018   +end;
MPRINT(EM_DIAGRAM):   end;
2006019   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006020   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006021   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2006022   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006023   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006024   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2006025   +   end;
MPRINT(EM_DIAGRAM):   end;
2006026   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006027   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2006028   +   end;
MPRINT(EM_DIAGRAM):   end;
2006029   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006030   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2006031   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006032   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006033   +   end;
MPRINT(EM_DIAGRAM):   end;
2006034   +end;
MPRINT(EM_DIAGRAM):   end;
2006035   +
2006036   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2006037   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2006038   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2006039   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2006040   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006041   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006042   +end;
MPRINT(EM_DIAGRAM):   end;
2006043   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006044   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006045   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2006046   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006047   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006048   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2006049   +   end;
MPRINT(EM_DIAGRAM):   end;
2006050   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006051   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2006052   +   end;
MPRINT(EM_DIAGRAM):   end;
2006053   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006054   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2006055   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006056   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006057   +   end;
MPRINT(EM_DIAGRAM):   end;
2006058   +end;
MPRINT(EM_DIAGRAM):   end;
2006059   +
2006060   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2006061   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2006062   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2006063   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2006064   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006065   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006066   +end;
MPRINT(EM_DIAGRAM):   end;
2006067   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006068   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006069   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2006070   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006071   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006072   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2006073   +   end;
MPRINT(EM_DIAGRAM):   end;
2006074   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006075   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2006076   +   end;
MPRINT(EM_DIAGRAM):   end;
2006077   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006078   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2006079   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006080   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006081   +   end;
MPRINT(EM_DIAGRAM):   end;
2006082   +end;
MPRINT(EM_DIAGRAM):   end;
2006083   +
2006084   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2006085   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2006086   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2006087   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2006088   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006089   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006090   +end;
MPRINT(EM_DIAGRAM):   end;
2006091   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006092   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006093   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2006094   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006095   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006096   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2006097   +   end;
MPRINT(EM_DIAGRAM):   end;
2006098   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006099   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2006100   +   end;
MPRINT(EM_DIAGRAM):   end;
2006101   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006102   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2006103   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006104   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006105   +   end;
MPRINT(EM_DIAGRAM):   end;
2006106   +end;
MPRINT(EM_DIAGRAM):   end;
2006107   +
2006108   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2006109   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2006110   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2006111   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2006112   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2006113   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2006114   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2006115   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2006116   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2006117   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2006118   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2006119   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2006120   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006121   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006122   +end;
MPRINT(EM_DIAGRAM):   end;
2006123   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006124   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2006125   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2006126   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006127   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2006128   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2006129   +   end;
MPRINT(EM_DIAGRAM):   end;
2006130   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2006131   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2006132   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2006133   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2006134   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2006135   +   end;
MPRINT(EM_DIAGRAM):   end;
2006136   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2006137   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2006138   +   end;
MPRINT(EM_DIAGRAM):   end;
2006139   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2006140   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2006141   +   end;
MPRINT(EM_DIAGRAM):   end;
2006142   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2006143   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2006144   +   end;
MPRINT(EM_DIAGRAM):   end;
2006145   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006146   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2006147   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2006148   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2006149   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2006150   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006151   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006152   +   end;
MPRINT(EM_DIAGRAM):   end;
2006153   +end;
MPRINT(EM_DIAGRAM):   end;
2006154   +
2006155   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2006156   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2006157   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2006158   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2006159   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2006160   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2006161   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2006162   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2006163   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2006164   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2006165   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2006166   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2006167   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2006168   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006169   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006170   +end;
MPRINT(EM_DIAGRAM):   end;
2006171   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006172   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2006173   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2006174   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006175   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2006176   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2006177   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2006178   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2006179   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2006180   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2006181   +         end;
MPRINT(EM_DIAGRAM):   end;
2006182   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2006183   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2006184   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2006185   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2006186   +            end;
MPRINT(EM_DIAGRAM):   end;
2006187   +         end;
MPRINT(EM_DIAGRAM):   end;
2006188   +      end;
MPRINT(EM_DIAGRAM):   end;
2006189   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2006190   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2006191   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2006192   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2006193   +         end;
MPRINT(EM_DIAGRAM):   end;
2006194   +      end;
MPRINT(EM_DIAGRAM):   end;
2006195   +   end;
MPRINT(EM_DIAGRAM):   end;
2006196   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006197   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2006198   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2006199   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2006200   +      end;
MPRINT(EM_DIAGRAM):   end;
2006201   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2006202   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2006203   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2006204   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2006205   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2006206   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2006207   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2006208   +         end;
MPRINT(EM_DIAGRAM):   end;
2006209   +      end;
MPRINT(EM_DIAGRAM):   end;
2006210   +   end;
MPRINT(EM_DIAGRAM):   end;
2006211   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2006212   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2006213   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2006214   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2006215   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2006216   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006217   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006218   +   end;
MPRINT(EM_DIAGRAM):   end;
2006219   +end;
MPRINT(EM_DIAGRAM):   end;
2006220   +
2006221   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006222   +*** Checking missing input Interval
2006223   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2006224   +
2006225   +IF NMISS(
2006226   +   Income ,
2006227   +   Kidhome ,
2006228   +   MntFishProducts ,
2006229   +   MntFruits ,
2006230   +   MntGoldProds ,
2006231   +   MntMeatProducts ,
2006232   +   MntSweetProducts ,
2006233   +   MntWines ,
2006234   +   NumCatalogPurchases ,
2006235   +   NumDealsPurchases ,
2006236   +   NumStorePurchases ,
2006237   +   NumWebPurchases ,
2006238   +   NumWebVisitsMonth ,
2006239   +   Recency ,
2006240   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2006241   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2006242   +
2006243   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006244   +END;
MPRINT(EM_DIAGRAM):   END;
2006245   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006246   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2006247   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006248   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2006249   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2006250   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2006251   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2006252   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2006253   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2006254   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2006255   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2006256   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2006257   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2006258   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2006259   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2006260   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2006261   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2006262   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2006263   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2006264   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2006265   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2006266   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2006267   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2006268   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2006269   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2006270   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2006271   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2006272   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2006273   +END;
MPRINT(EM_DIAGRAM):   END;
2006274   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2006275   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2006276   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2006277   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2006278   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2006279   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2006280   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2006281   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2006282   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2006283   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2006284   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2006285   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2006286   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2006287   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2006288   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2006289   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2006290   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2006291   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2006292   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2006293   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2006294   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2006295   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2006296   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2006297   +   ELSE S_NumCatalogPurchases
2006298   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2006299   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2006300   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2006301   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2006302   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2006303   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2006304   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2006305   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2006306   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2006307   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2006308   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2006309   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2006310   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2006311   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2006312   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2006313   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2006314   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2006315   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2006316   +END;
MPRINT(EM_DIAGRAM):   END;
2006317   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006318   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2006319   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006320   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006321   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2006322   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006323   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006324   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2006325   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006326   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2006327   +   H11  =    -0.81572379016921 * S_Income  +    -0.07670946585348 * S_Kidhome
2006328   +          +     0.24367603598167 * S_MntFishProducts
2006329   +          +     0.19692980127348 * S_MntFruits  +    -0.03926738185333 *
2006330   +        S_MntGoldProds  +    -0.20900804333353 * S_MntMeatProducts
2006331   +          +     0.34054806441484 * S_MntSweetProducts
2006332   +          +     0.65956211369383 * S_MntWines  +    -0.95375334578522 *
2006333   +        S_NumCatalogPurchases  +    -0.73124740368567 * S_NumDealsPurchases
2006334   +          +     0.98942946974575 * S_NumStorePurchases
2006335   +          +     0.89701206630103 * S_NumWebPurchases
2006336   +          +    -1.22878611472154 * S_NumWebVisitsMonth
2006337   +          +     1.44981870978354 * S_Recency  +     0.47533125686411 *
2006338   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = -0.81572379016921 * S_Income + -0.07670946585348 * S_Kidhome + 
0.24367603598167 * S_MntFishProducts + 0.19692980127348 * S_MntFruits + -0.03926738185333 * 
S_MntGoldProds + -0.20900804333353 * S_MntMeatProducts + 0.34054806441484 * S_MntSweetProducts 
+ 0.65956211369383 * S_MntWines + -0.95375334578522 * S_NumCatalogPurchases + 
-0.73124740368567 * S_NumDealsPurchases + 0.98942946974575 * S_NumStorePurchases + 
0.89701206630103 * S_NumWebPurchases + -1.22878611472154 * S_NumWebVisitsMonth + 
1.44981870978354 * S_Recency + 0.47533125686411 * S_Teenhome ;
2006339   +   H12  =    -0.18875145195495 * S_Income  +     0.42230998482453 * S_Kidhome
2006340   +          +     0.16683404689723 * S_MntFishProducts
2006341   +          +     0.32072658929401 * S_MntFruits  +    -0.12341748032201 *
2006342   +        S_MntGoldProds  +    -1.56478754527255 * S_MntMeatProducts
2006343   +          +     0.20389084548968 * S_MntSweetProducts
2006344   +          +     0.95592931625509 * S_MntWines  +    -0.69996817353755 *
2006345   +        S_NumCatalogPurchases  +    -0.92709806328697 * S_NumDealsPurchases
2006346   +          +     1.27164659640366 * S_NumStorePurchases
2006347   +          +     1.02122194207802 * S_NumWebPurchases
2006348   +          +     -1.5111033436803 * S_NumWebVisitsMonth
2006349   +          +     1.63712814901544 * S_Recency  +     0.14205116840572 *
2006350   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = -0.18875145195495 * S_Income + 0.42230998482453 * S_Kidhome + 
0.16683404689723 * S_MntFishProducts + 0.32072658929401 * S_MntFruits + -0.12341748032201 * 
S_MntGoldProds + -1.56478754527255 * S_MntMeatProducts + 0.20389084548968 * S_MntSweetProducts 
+ 0.95592931625509 * S_MntWines + -0.69996817353755 * S_NumCatalogPurchases + 
-0.92709806328697 * S_NumDealsPurchases + 1.27164659640366 * S_NumStorePurchases + 
1.02122194207802 * S_NumWebPurchases + -1.5111033436803 * S_NumWebVisitsMonth + 
1.63712814901544 * S_Recency + 0.14205116840572 * S_Teenhome ;
2006351   +   H13  =     1.02798705354163 * S_Income  +    -0.94411708781921 * S_Kidhome
2006352   +          +    -0.03345077166544 * S_MntFishProducts
2006353   +          +     0.00038440809349 * S_MntFruits  +    -0.05068379715712 *
2006354   +        S_MntGoldProds  +     1.00464705307582 * S_MntMeatProducts
2006355   +          +    -0.11948662500951 * S_MntSweetProducts
2006356   +          +    -0.52438819731252 * S_MntWines  +     0.98586904866769 *
2006357   +        S_NumCatalogPurchases  +     0.09015295226839 * S_NumDealsPurchases
2006358   +          +     0.22401914357376 * S_NumStorePurchases
2006359   +          +     0.04219877865976 * S_NumWebPurchases
2006360   +          +     1.21753334166036 * S_NumWebVisitsMonth
2006361   +          +    -1.33712212110081 * S_Recency  +    -0.47582856683655 *
2006362   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = 1.02798705354163 * S_Income + -0.94411708781921 * S_Kidhome + 
-0.03345077166544 * S_MntFishProducts + 0.00038440809349 * S_MntFruits + -0.05068379715712 * 
S_MntGoldProds + 1.00464705307582 * S_MntMeatProducts + -0.11948662500951 * S_MntSweetProducts 
+ -0.52438819731252 * S_MntWines + 0.98586904866769 * S_NumCatalogPurchases + 0.09015295226839 
* S_NumDealsPurchases + 0.22401914357376 * S_NumStorePurchases + 0.04219877865976 * 
S_NumWebPurchases + 1.21753334166036 * S_NumWebVisitsMonth + -1.33712212110081 * S_Recency + 
-0.47582856683655 * S_Teenhome ;
2006363   +   H14  =     0.91431429848834 * S_Income  +    -1.16289676557574 * S_Kidhome
2006364   +          +     0.31175257038578 * S_MntFishProducts
2006365   +          +     0.08080436076271 * S_MntFruits  +     0.15252288175851 *
2006366   +        S_MntGoldProds  +     0.21603546207654 * S_MntMeatProducts
2006367   +          +      0.0927253053382 * S_MntSweetProducts
2006368   +          +     0.05865323888304 * S_MntWines  +    -0.23426953728277 *
2006369   +        S_NumCatalogPurchases  +    -0.46451908614085 * S_NumDealsPurchases
2006370   +          +    -0.12667606349662 * S_NumStorePurchases
2006371   +          +     0.30148374518724 * S_NumWebPurchases
2006372   +          +     0.48934229701658 * S_NumWebVisitsMonth
2006373   +          +    -0.83754390793251 * S_Recency  +     -0.4576645462819 *
2006374   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = 0.91431429848834 * S_Income + -1.16289676557574 * S_Kidhome + 
0.31175257038578 * S_MntFishProducts + 0.08080436076271 * S_MntFruits + 0.15252288175851 * 
S_MntGoldProds + 0.21603546207654 * S_MntMeatProducts + 0.0927253053382 * S_MntSweetProducts + 
0.05865323888304 * S_MntWines + -0.23426953728277 * S_NumCatalogPurchases + -0.46451908614085 
* S_NumDealsPurchases + -0.12667606349662 * S_NumStorePurchases + 0.30148374518724 * 
S_NumWebPurchases + 0.48934229701658 * S_NumWebVisitsMonth + -0.83754390793251 * S_Recency + 
-0.4576645462819 * S_Teenhome ;
2006375   +   H15  =    -0.58161501095664 * S_Income  +     -1.0333658128614 * S_Kidhome
2006376   +          +     0.42646725119177 * S_MntFishProducts
2006377   +          +     -0.3264621401658 * S_MntFruits  +    -0.74616728524532 *
2006378   +        S_MntGoldProds  +    -0.97572068716712 * S_MntMeatProducts
2006379   +          +    -0.01493605582616 * S_MntSweetProducts
2006380   +          +      0.0311636632685 * S_MntWines  +    -1.68599903767191 *
2006381   +        S_NumCatalogPurchases  +    -1.25052648798307 * S_NumDealsPurchases
2006382   +          +     0.54256744091258 * S_NumStorePurchases
2006383   +          +     0.43065931458468 * S_NumWebPurchases
2006384   +          +      0.5935561420466 * S_NumWebVisitsMonth
2006385   +          +    -0.45183418369624 * S_Recency  +     0.19260512629844 *
2006386   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = -0.58161501095664 * S_Income + -1.0333658128614 * S_Kidhome + 
0.42646725119177 * S_MntFishProducts + -0.3264621401658 * S_MntFruits + -0.74616728524532 * 
S_MntGoldProds + -0.97572068716712 * S_MntMeatProducts + -0.01493605582616 * 
S_MntSweetProducts + 0.0311636632685 * S_MntWines + -1.68599903767191 * S_NumCatalogPurchases 
+ -1.25052648798307 * S_NumDealsPurchases + 0.54256744091258 * S_NumStorePurchases + 
0.43065931458468 * S_NumWebPurchases + 0.5935561420466 * S_NumWebVisitsMonth + 
-0.45183418369624 * S_Recency + 0.19260512629844 * S_Teenhome ;
2006387   +   H11  = H11  +     0.61503950219838 * AcceptedCmp10
2006388   +          +     0.02945207091619 * AcceptedCmp20  +     0.99151950769472 *
2006389   +        AcceptedCmp30  +     1.08987060401718 * AcceptedCmp40
2006390   +          +     0.45427753773024 * AcceptedCmp50  +    -1.03533951966815 *
2006391   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.61503950219838 * AcceptedCmp10 + 0.02945207091619 * 
AcceptedCmp20 + 0.99151950769472 * AcceptedCmp30 + 1.08987060401718 * AcceptedCmp40 + 
0.45427753773024 * AcceptedCmp50 + -1.03533951966815 * Complain0 ;
2006392   +   H12  = H12  +     0.83823476190401 * AcceptedCmp10
2006393   +          +      1.0793719601418 * AcceptedCmp20  +     0.68538854946581 *
2006394   +        AcceptedCmp30  +     1.00297565893339 * AcceptedCmp40
2006395   +          +     0.24586379991786 * AcceptedCmp50  +     0.15471251255301 *
2006396   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.83823476190401 * AcceptedCmp10 + 1.0793719601418 * 
AcceptedCmp20 + 0.68538854946581 * AcceptedCmp30 + 1.00297565893339 * AcceptedCmp40 + 
0.24586379991786 * AcceptedCmp50 + 0.15471251255301 * Complain0 ;
2006397   +   H13  = H13  +    -0.41486094438907 * AcceptedCmp10
2006398   +          +    -0.76586628449839 * AcceptedCmp20  +    -0.59695459523693 *
2006399   +        AcceptedCmp30  +    -0.30262159911837 * AcceptedCmp40
2006400   +          +    -0.61141171124182 * AcceptedCmp50  +    -0.01086235188835 *
2006401   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.41486094438907 * AcceptedCmp10 + -0.76586628449839 * 
AcceptedCmp20 + -0.59695459523693 * AcceptedCmp30 + -0.30262159911837 * AcceptedCmp40 + 
-0.61141171124182 * AcceptedCmp50 + -0.01086235188835 * Complain0 ;
2006402   +   H14  = H14  +    -0.09662858884082 * AcceptedCmp10
2006403   +          +    -0.48515652524171 * AcceptedCmp20  +    -0.37421451374399 *
2006404   +        AcceptedCmp30  +    -0.52889523891817 * AcceptedCmp40
2006405   +          +    -0.73518448275357 * AcceptedCmp50  +    -0.36065830718672 *
2006406   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.09662858884082 * AcceptedCmp10 + -0.48515652524171 * 
AcceptedCmp20 + -0.37421451374399 * AcceptedCmp30 + -0.52889523891817 * AcceptedCmp40 + 
-0.73518448275357 * AcceptedCmp50 + -0.36065830718672 * Complain0 ;
2006407   +   H15  = H15  +      0.2985143092641 * AcceptedCmp10
2006408   +          +    -0.06881934778393 * AcceptedCmp20  +    -0.02609197044604 *
2006409   +        AcceptedCmp30  +    -0.79105657447885 * AcceptedCmp40
2006410   +          +    -0.02286855144948 * AcceptedCmp50  +     0.02884650192784 *
2006411   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.2985143092641 * AcceptedCmp10 + -0.06881934778393 * 
AcceptedCmp20 + -0.02609197044604 * AcceptedCmp30 + -0.79105657447885 * AcceptedCmp40 + 
-0.02286855144948 * AcceptedCmp50 + 0.02884650192784 * Complain0 ;
2006412   +   H11  = H11  +    -0.41169946146301 * Education2n_Cycle
2006413   +          +      0.8448273504441 * EducationBasic  +    -1.02497956377347 *
2006414   +        EducationGraduation  +     0.43998321745211 * EducationMaster
2006415   +          +    -0.85912688909911 * Marital_StatusDivorced
2006416   +          +     0.81561401465875 * Marital_StatusMarried
2006417   +          +    -0.58324403081542 * Marital_StatusSingle
2006418   +          +      0.9348017085106 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.41169946146301 * Education2n_Cycle + 0.8448273504441 * 
EducationBasic + -1.02497956377347 * EducationGraduation + 0.43998321745211 * EducationMaster 
+ -0.85912688909911 * Marital_StatusDivorced + 0.81561401465875 * Marital_StatusMarried + 
-0.58324403081542 * Marital_StatusSingle + 0.9348017085106 * Marital_StatusTogether ;
2006419   +   H12  = H12  +     0.22828129841893 * Education2n_Cycle
2006420   +          +     0.47579227804033 * EducationBasic  +    -0.18165301263195 *
2006421   +        EducationGraduation  +    -0.16143431016405 * EducationMaster
2006422   +          +    -0.34784695867287 * Marital_StatusDivorced
2006423   +          +    -0.18194022182247 * Marital_StatusMarried
2006424   +          +    -0.10633185904164 * Marital_StatusSingle
2006425   +          +     0.13136125361628 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.22828129841893 * Education2n_Cycle + 0.47579227804033 * 
EducationBasic + -0.18165301263195 * EducationGraduation + -0.16143431016405 * EducationMaster 
+ -0.34784695867287 * Marital_StatusDivorced + -0.18194022182247 * Marital_StatusMarried + 
-0.10633185904164 * Marital_StatusSingle + 0.13136125361628 * Marital_StatusTogether ;
2006426   +   H13  = H13  +     0.38705901043652 * Education2n_Cycle
2006427   +          +     0.19703188370189 * EducationBasic  +    -0.48062640599976 *
2006428   +        EducationGraduation  +     -0.3646621736273 * EducationMaster
2006429   +          +     0.61058752124466 * Marital_StatusDivorced
2006430   +          +    -1.38793808025141 * Marital_StatusMarried
2006431   +          +     1.10060737810944 * Marital_StatusSingle
2006432   +          +    -1.21250219018366 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.38705901043652 * Education2n_Cycle + 0.19703188370189 * 
EducationBasic + -0.48062640599976 * EducationGraduation + -0.3646621736273 * EducationMaster 
+ 0.61058752124466 * Marital_StatusDivorced + -1.38793808025141 * Marital_StatusMarried + 
1.10060737810944 * Marital_StatusSingle + -1.21250219018366 * Marital_StatusTogether ;
2006433   +   H14  = H14  +    -0.20576658115662 * Education2n_Cycle
2006434   +          +    -0.09185472034614 * EducationBasic  +    -0.43674210064447 *
2006435   +        EducationGraduation  +    -0.18154054746298 * EducationMaster
2006436   +          +     0.11973800573581 * Marital_StatusDivorced
2006437   +          +      -0.294635257911 * Marital_StatusMarried
2006438   +          +    -0.05399659601172 * Marital_StatusSingle
2006439   +          +     0.34207780606239 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.20576658115662 * Education2n_Cycle + -0.09185472034614 * 
EducationBasic + -0.43674210064447 * EducationGraduation + -0.18154054746298 * EducationMaster 
+ 0.11973800573581 * Marital_StatusDivorced + -0.294635257911 * Marital_StatusMarried + 
-0.05399659601172 * Marital_StatusSingle + 0.34207780606239 * Marital_StatusTogether ;
2006440   +   H15  = H15  +    -0.05553093684862 * Education2n_Cycle
2006441   +          +    -0.12898006732329 * EducationBasic  +    -0.16064118923518 *
2006442   +        EducationGraduation  +     -0.6431539624694 * EducationMaster
2006443   +          +     0.42838191659864 * Marital_StatusDivorced
2006444   +          +    -0.09150349181363 * Marital_StatusMarried
2006445   +          +    -0.33520164145276 * Marital_StatusSingle
2006446   +          +    -0.15253738713197 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.05553093684862 * Education2n_Cycle + -0.12898006732329 * 
EducationBasic + -0.16064118923518 * EducationGraduation + -0.6431539624694 * EducationMaster 
+ 0.42838191659864 * Marital_StatusDivorced + -0.09150349181363 * Marital_StatusMarried + 
-0.33520164145276 * Marital_StatusSingle + -0.15253738713197 * Marital_StatusTogether ;
2006447   +   H11  =     -1.5079478405973 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.5079478405973 + H11 ;
2006448   +   H12  =     0.03014958331993 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.03014958331993 + H12 ;
2006449   +   H13  =    -1.78098671165572 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.78098671165572 + H13 ;
2006450   +   H14  =     0.22179429743277 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.22179429743277 + H14 ;
2006451   +   H15  =    -2.06602107857898 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.06602107857898 + H15 ;
2006452   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2006453   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2006454   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2006455   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
2006456   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
2006457   +END;
MPRINT(EM_DIAGRAM):   END;
2006458   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2006459   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2006460   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2006461   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2006462   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
2006463   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
2006464   +END;
MPRINT(EM_DIAGRAM):   END;
2006465   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006466   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2006467   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006468   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2006469   +   P_DepVar1  =    -4.55666337815854 * H11  +    -4.04792544554995 * H12
2006470   +          +     4.56148127429284 * H13  +     2.36841344452371 * H14
2006471   +          +    -3.07371010011749 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.55666337815854 * H11 + -4.04792544554995 * H12 + 
4.56148127429284 * H13 + 2.36841344452371 * H14 + -3.07371010011749 * H15 ;
2006472   +   P_DepVar1  =    -0.83283406236136 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.83283406236136 + P_DepVar1 ;
2006473   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2006474   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2006475   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2006476   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2006477   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2006478   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2006479   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2006480   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2006481   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2006482   +END;
MPRINT(EM_DIAGRAM):   END;
2006483   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2006484   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2006485   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2006486   +END;
MPRINT(EM_DIAGRAM):   END;
2006487   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2006488   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2006489   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2006490   +END;
MPRINT(EM_DIAGRAM):   END;
2006491   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006492   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2006493   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2006494   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2006495   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2006496   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2006497   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2006498   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2006499   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2006500   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2006501   +END;
MPRINT(EM_DIAGRAM):   END;
2006502   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2006503   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2006504   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2006505   +drop
2006506   +H11
2006507   +H12
2006508   +H13
2006509   +H14
2006510   +H15
2006511   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
2006512   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2006513    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2006514    quit;
2006515    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2006516    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2006517    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2006518    retain ID 2 Node "Neural34";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural34";
2006519    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2006520    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1878 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1878 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006521    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2006522    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006523    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1878 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1878 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006524    proc sort data=EMWS8.Neural34_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural34_variableset out=_temp2(keep=NAME CREATOR);
2006525    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006526    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.NEURAL34_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006527    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006528    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2006529    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2006530    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006531    proc contents data=EMWS8.Neural34_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural34_train out=_meta(keep=NAME) noprint;
2006532    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

2006533    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2006534    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006535    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 53 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006536    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006537    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2006538    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006539    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006540    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2006541    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2006541  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 924 rows and 5 columns.

2006542    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006543    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2006544    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 924 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 924 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006545    filename _pref
2006545  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
2006546    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2006547    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
2006548   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2006549   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
2006550   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2006551   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
2006552   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
2006553   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2006554    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2006555    quit;
2006556    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2006557    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2006558    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2006559    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
2006560    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2006561    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006562    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2006563    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006564    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006565    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
2006566    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006567    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006568    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006569    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2006570    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2006571    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006572    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
2006573    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

2006574    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2006575    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006576    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006577    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006578    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2006579    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006580    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006581    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2006582    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2006582  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.

2006583    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006584    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2006585    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 928 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006586    filename _pref
2006586  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
2006587    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2006588    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
2006589   +
2006590   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
2006591   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
2006591  !+es;
MPRINT(EM_DIAGRAM):   
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
2006592   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
2006593   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
2006594   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
2006595   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
2006596   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2006597    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2006598    quit;
2006599    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2006600    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2006601    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2006602    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
2006603    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2006604    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006605    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2006606    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006607    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006608    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
2006609    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006610    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006611    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006612    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2006613    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2006614    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006615    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
2006616    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006617    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2006618    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006619    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006620    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006621    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2006622    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006623    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006624    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2006625    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2006625  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.

2006626    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006627    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2006628    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 967 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006629    filename _pref
2006629  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
2006630    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2006631    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
2006632   +
2006633   +
2006634   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
2006635   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
2006636   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
2006637   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
2006638   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
2006639   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006640   +
2006641   +
2006642   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
2006643   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
2006644   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
2006645   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
2006646   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
2006647   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006648   +
2006649   +
2006650   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
2006651   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
2006652   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
2006653   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
2006654   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
2006655   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006656   +
2006657   +
2006658   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
2006659   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
2006660   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
2006661   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
2006662   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
2006663   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006664   +
2006665   +
2006666   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
2006667   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
2006668   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
2006669   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
2006670   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
2006671   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006672   +
2006673   +
2006674   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
2006675   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
2006676   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
2006677   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
2006678   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
2006679   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006680   +
2006681   +
2006682   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
2006683   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
2006684   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
2006685   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
2006686   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
2006687   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006688   +
2006689   +
2006690   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
2006691   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
2006692   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
2006693   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
2006694   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
2006695   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2006696   +if
2006697   +_FILTERNORM1 not in ( '.')
2006698   + and
2006699   +_FILTERNORM2 not in ( '.')
2006700   + and
2006701   +_FILTERNORM3 not in ( '.')
2006702   + and
2006703   +_FILTERNORM4 not in ( '.')
2006704   + and
2006705   +_FILTERNORM5 not in ( '.')
2006706   + and
2006707   +_FILTERNORM6 not in ( '.')
2006708   + and
2006709   +_FILTERNORM7 not in ( ' ')
2006710   + and
2006711   +_FILTERNORM8 not in ( ' ')
2006712   +and
2006713   +( Dt_Customer ne .)
2006714   +and ( Income ne . and (Income<=107000))
2006715   +and ( Kidhome ne .)
2006716   +and ( MntFishProducts ne .)
2006717   +and ( MntFruits ne .)
2006718   +and ( MntGoldProds ne .)
2006719   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
2006720   +and ( MntSweetProducts ne .)
2006721   +and ( MntWines ne .)
2006722   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
2006723   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
2006724   +and ( NumStorePurchases ne .)
2006725   +and ( NumWebPurchases ne .)
2006726   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
2006727   +and ( Recency ne .)
2006728   +and ( Teenhome ne .)
2006729   +and ( Year_Birth ne .)
2006730   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and 
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and 
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and ( 
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and ( 
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne 
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and ( 
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and 
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and ( 
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne 
.) and ( Year_Birth ne .) then do;
2006731   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
2006732   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
2006733   +end;
MPRINT(EM_DIAGRAM):   end;
2006734   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
2006735   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2006736    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2006737    quit;
2006738    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2006739    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2006740    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2006741    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
2006742    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2006743    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006744    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2006745    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006746    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006747    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
2006748    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006749    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006750    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006751    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2006752    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2006753    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006754    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
2006755    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

2006756    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2006757    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006758    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006759    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2006760    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2006761    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2006762    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006763    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2006764    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2006764  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.

2006765    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2006766    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2006767    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 1033 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2006768    %macro varDept(fcmpdata=,id=);
2006769    %global nobs&id scoreFlag&id;
2006770    %let scoreFlag&id = 0;
2006771    %if &id=1 or ^&fcmpStart %then %do;
2006772    proc sort data=&fcmpdata out=_temp&id nodupkey;
2006773    by NAME;
2006774    where id=&id and LHS in( %let j=1;
2006775    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
2006776    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
2006777    "&var" %let j = %eval(&j+1);
2006778    %end;
2006779    );
2006780    run;
2006781    %let dsid = %sysfunc(open(_temp&id));
2006782    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2006783    %let dsid = %sysfunc(close(&dsid));
2006784    %if &&nobs&id %then %do;
2006785    %let scoreFlag&id = 1;
2006786    %let fcmpStart = 1;
2006787    %end;
2006788    %else %let fcmpStart = 0;
2006789    %end;
2006790    %else %do;
2006791    proc sort data=&fcmpdata out=_tempid;
2006792    where id=&id;
2006793    by LHS;
2006794    run;
2006795    %let dsid = %sysfunc(open(_tempid));
2006796    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2006797    %let dsid = %sysfunc(close(&dsid));
2006798    %if ^&&nobs&id %then %do;
2006799    proc datasets lib=work nolist;
2006800    delete _tempid;
2006801    run;
2006802    quit;
2006803    %end;
2006804    %else %do;
2006805    data _tempAll;
2006806    set %let j=%eval(&id-1);
2006807    %do x=1 %to &j;
2006808    %if &&nobs&x %then %do;
2006809    _temp&x %end;
2006810    %end;
2006811    ;
2006812    run;
2006813    proc sql;
2006814    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
2006814  ! work._tempid p2 where p.name=p2.lhs;
2006815    quit;
2006816    data _temp&id;
2006817    set _temp&id;
2006818    where LHS ne '' and NAME ne '' and Node ne '';
2006819    run;
2006820    proc datasets lib=work nolist;
2006821    delete _tempAll;
2006822    run;
2006823    %let dsid = %sysfunc(open(_temp&id));
2006824    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2006825    %let dsid = %sysfunc(close(&dsid));
2006826    %if ^&&nobs&id %then %do;
2006827    proc datasets lib=work nolist;
2006828    delete _temp&id;
2006829    run;
2006830    quit;
2006831    %end;
2006832    %else %do;
2006833    %let scoreFlag&id = 1;
2006834    data _temp&id;
2006835    set _temp&id;
2006836    where LHS ne NAME and node ne '';
2006837    run;
2006838    %let dsid = %sysfunc(open(_temp&id));
2006839    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2006840    %let dsid = %sysfunc(close(&dsid));
2006841    %if ^&&nobs&id %then %do;
2006842    proc datasets lib=work nolist;
2006843    delete _temp&id;
2006844    run;
2006845    quit;
2006846    %end;
2006847    %else %do;
2006848    proc sort data=_temp&id nodupkey;
2006849    by LHS NAME;
2006850    run;
2006851    %end;
2006852    %end;
2006853    %end;
2006854    %end;
2006855    %mend varDept;
2006856    %macro optCode(outdata=fcmpdata);
2006857    %global fcmpStart;
2006858    %let fcmpStart = 0;
2006859    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
2006860    %let NumNodes=9;
2006861    %do k=1 %to &NumNodes;
2006862    %vardept(fcmpdata=&outdata, id=&k);
2006863    %end;
2006864    %mend optCode;
2006865    %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: There were 98 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 73 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 25 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp6;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP6 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

2006866    filename _pref
2006866  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural32\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural32\EMPUBLISHSCORE.sas";
2006867    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2006868    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural32\EMPUBLISHSCORE.sas.
2006869   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2006870   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
2006871   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
2006872   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
2006873   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
2006874   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
2006875   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
2006876   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
2006877   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
2006878   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
2006879   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
2006880   +LENGTH _WARN_ $4
2006881   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
2006882   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
2006883   +
2006884   +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
2006885   +
2006886   +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
2006887   +
2006888   +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
2006889   +
2006890   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
2006891   +
2006892   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
2006893   +
2006894   +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
2006895   +
2006896   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
2006897   +
2006898   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
2006899   +
2006900   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
2006901   +
2006902   +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
2006903   +
2006904   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
2006905   +
2006906   +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
2006907   +
2006908   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
2006909   +
2006910   +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
2006911   +
2006912   +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
2006913   +
2006914   +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
2006915   +
2006916   +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
2006917   +
2006918   +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
2006919   +
2006920   +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
2006921   +
2006922   +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
2006923   +
2006924   +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
2006925   +
2006926   +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
2006927   +
2006928   +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
2006929   +
2006930   +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
2006931   +
2006932   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
2006933   +
2006934   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
2006935   +
2006936   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
2006937   +
2006938   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
2006939   +
2006940   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
2006941   +
2006942   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
2006943   +
2006944   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
2006945   +
2006946   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
2006947   +
2006948   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
2006949   +
2006950   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
2006951   +
2006952   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
2006953   +
2006954   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
2006955   +
2006956   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
2006957   +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
2006958   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
2006959   +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2006960   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006961   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006962   +end;
MPRINT(EM_DIAGRAM):   end;
2006963   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006964   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006965   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
2006966   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006967   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006968   +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
2006969   +   end;
MPRINT(EM_DIAGRAM):   end;
2006970   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006971   +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
2006972   +   end;
MPRINT(EM_DIAGRAM):   end;
2006973   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006974   +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
2006975   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2006976   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006977   +   end;
MPRINT(EM_DIAGRAM):   end;
2006978   +end;
MPRINT(EM_DIAGRAM):   end;
2006979   +
2006980   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
2006981   +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
2006982   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
2006983   +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2006984   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2006985   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2006986   +end;
MPRINT(EM_DIAGRAM):   end;
2006987   +else do;
MPRINT(EM_DIAGRAM):   else do;
2006988   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2006989   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
2006990   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2006991   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2006992   +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
2006993   +   end;
MPRINT(EM_DIAGRAM):   end;
2006994   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2006995   +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
2006996   +   end;
MPRINT(EM_DIAGRAM):   end;
2006997   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2006998   +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
2006999   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007000   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007001   +   end;
MPRINT(EM_DIAGRAM):   end;
2007002   +end;
MPRINT(EM_DIAGRAM):   end;
2007003   +
2007004   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
2007005   +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
2007006   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
2007007   +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2007008   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007009   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007010   +end;
MPRINT(EM_DIAGRAM):   end;
2007011   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007012   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2007013   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
2007014   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007015   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2007016   +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
2007017   +   end;
MPRINT(EM_DIAGRAM):   end;
2007018   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2007019   +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
2007020   +   end;
MPRINT(EM_DIAGRAM):   end;
2007021   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007022   +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
2007023   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007024   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007025   +   end;
MPRINT(EM_DIAGRAM):   end;
2007026   +end;
MPRINT(EM_DIAGRAM):   end;
2007027   +
2007028   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
2007029   +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
2007030   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
2007031   +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2007032   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007033   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007034   +end;
MPRINT(EM_DIAGRAM):   end;
2007035   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007036   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2007037   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
2007038   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007039   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2007040   +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
2007041   +   end;
MPRINT(EM_DIAGRAM):   end;
2007042   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2007043   +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
2007044   +   end;
MPRINT(EM_DIAGRAM):   end;
2007045   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007046   +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
2007047   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007048   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007049   +   end;
MPRINT(EM_DIAGRAM):   end;
2007050   +end;
MPRINT(EM_DIAGRAM):   end;
2007051   +
2007052   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
2007053   +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
2007054   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
2007055   +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2007056   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007057   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007058   +end;
MPRINT(EM_DIAGRAM):   end;
2007059   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007060   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2007061   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
2007062   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007063   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2007064   +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
2007065   +   end;
MPRINT(EM_DIAGRAM):   end;
2007066   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2007067   +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
2007068   +   end;
MPRINT(EM_DIAGRAM):   end;
2007069   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007070   +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
2007071   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007072   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007073   +   end;
MPRINT(EM_DIAGRAM):   end;
2007074   +end;
MPRINT(EM_DIAGRAM):   end;
2007075   +
2007076   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
2007077   +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
2007078   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
2007079   +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2007080   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007081   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007082   +end;
MPRINT(EM_DIAGRAM):   end;
2007083   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007084   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
2007085   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
2007086   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007087   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
2007088   +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
2007089   +   end;
MPRINT(EM_DIAGRAM):   end;
2007090   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
2007091   +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
2007092   +   end;
MPRINT(EM_DIAGRAM):   end;
2007093   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007094   +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
2007095   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007096   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007097   +   end;
MPRINT(EM_DIAGRAM):   end;
2007098   +end;
MPRINT(EM_DIAGRAM):   end;
2007099   +
2007100   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
2007101   +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation 
EducationMaster ;
2007102   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2007103   +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
2007104   +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
2007105   +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
2007106   +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
2007107   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
2007108   +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2007109   +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2007110   +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2007111   +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2007112   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007113   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007114   +end;
MPRINT(EM_DIAGRAM):   end;
2007115   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007116   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
2007117   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
2007118   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007119   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
2007120   +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
2007121   +   end;
MPRINT(EM_DIAGRAM):   end;
2007122   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
2007123   +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
2007124   +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
2007125   +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
2007126   +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
2007127   +   end;
MPRINT(EM_DIAGRAM):   end;
2007128   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
2007129   +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
2007130   +   end;
MPRINT(EM_DIAGRAM):   end;
2007131   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
2007132   +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
2007133   +   end;
MPRINT(EM_DIAGRAM):   end;
2007134   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
2007135   +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
2007136   +   end;
MPRINT(EM_DIAGRAM):   end;
2007137   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007138   +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
2007139   +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
2007140   +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
2007141   +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
2007142   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007143   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007144   +   end;
MPRINT(EM_DIAGRAM):   end;
2007145   +end;
MPRINT(EM_DIAGRAM):   end;
2007146   +
2007147   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
2007148   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
2007149   +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
2007150   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
2007151   +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
2007152   +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
2007153   +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
2007154   +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
2007155   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
2007156   +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2007157   +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2007158   +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2007159   +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2007160   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
2007161   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007162   +end;
MPRINT(EM_DIAGRAM):   end;
2007163   +else do;
MPRINT(EM_DIAGRAM):   else do;
2007164   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
2007165   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
2007166   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
2007167   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
2007168   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
2007169   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
2007170   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
2007171   +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
2007172   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2007173   +         end;
MPRINT(EM_DIAGRAM):   end;
2007174   +         else do;
MPRINT(EM_DIAGRAM):   else do;
2007175   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
2007176   +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
2007177   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2007178   +            end;
MPRINT(EM_DIAGRAM):   end;
2007179   +         end;
MPRINT(EM_DIAGRAM):   end;
2007180   +      end;
MPRINT(EM_DIAGRAM):   end;
2007181   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2007182   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
2007183   +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
2007184   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2007185   +         end;
MPRINT(EM_DIAGRAM):   end;
2007186   +      end;
MPRINT(EM_DIAGRAM):   end;
2007187   +   end;
MPRINT(EM_DIAGRAM):   end;
2007188   +   else do;
MPRINT(EM_DIAGRAM):   else do;
2007189   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
2007190   +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
2007191   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2007192   +      end;
MPRINT(EM_DIAGRAM):   end;
2007193   +      else do;
MPRINT(EM_DIAGRAM):   else do;
2007194   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
2007195   +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
2007196   +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
2007197   +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
2007198   +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
2007199   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
2007200   +         end;
MPRINT(EM_DIAGRAM):   end;
2007201   +      end;
MPRINT(EM_DIAGRAM):   end;
2007202   +   end;
MPRINT(EM_DIAGRAM):   end;
2007203   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
2007204   +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
2007205   +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
2007206   +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
2007207   +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
2007208   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
2007209   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007210   +   end;
MPRINT(EM_DIAGRAM):   end;
2007211   +end;
MPRINT(EM_DIAGRAM):   end;
2007212   +
2007213   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007214   +*** Checking missing input Interval
2007215   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
2007216   +
2007217   +IF NMISS(
2007218   +   Income ,
2007219   +   Kidhome ,
2007220   +   MntFishProducts ,
2007221   +   MntFruits ,
2007222   +   MntGoldProds ,
2007223   +   MntMeatProducts ,
2007224   +   MntSweetProducts ,
2007225   +   MntWines ,
2007226   +   NumCatalogPurchases ,
2007227   +   NumDealsPurchases ,
2007228   +   NumStorePurchases ,
2007229   +   NumWebPurchases ,
2007230   +   NumWebVisitsMonth ,
2007231   +   Recency ,
2007232   +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Income , Kidhome , MntFishProducts , MntFruits , MntGoldProds 
, MntMeatProducts , MntSweetProducts , MntWines , NumCatalogPurchases , NumDealsPurchases , 
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , Recency , Teenhome ) THEN DO;
2007233   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
2007234   +
2007235   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
2007236   +END;
MPRINT(EM_DIAGRAM):   END;
2007237   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007238   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
2007239   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007240   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2007241   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2007242   +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2007243   +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2007244   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2007245   +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2007246   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2007247   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
2007248   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2007249   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2007250   +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2007251   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2007252   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2007253   +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
2007254   +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2007255   +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2007256   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2007257   +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2007258   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2007259   +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2007260   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2007261   +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2007262   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2007263   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2007264   +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2007265   +END;
MPRINT(EM_DIAGRAM):   END;
2007266   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2007267   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
2007268   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
2007269   +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
2007270   +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
2007271   +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
2007272   +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
2007273   +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 * 
MntFishProducts ;
2007274   +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
2007275   +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
2007276   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
2007277   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
2007278   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
2007279   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
2007280   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
2007281   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
2007282   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
2007283   +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
2007284   +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
2007285   +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
2007286   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
2007287   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
2007288   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
2007289   +   ELSE S_NumCatalogPurchases
2007290   +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
2007291   +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
2007292   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
2007293   +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
2007294   +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
2007295   +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
2007296   +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
2007297   +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 * 
NumStorePurchases ;
2007298   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
2007299   +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
2007300   +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
2007301   +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
2007302   +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
2007303   +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
2007304   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
2007305   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
2007306   +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
2007307   +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
2007308   +END;
MPRINT(EM_DIAGRAM):   END;
2007309   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007310   +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
2007311   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007312   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007313   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
2007314   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007315   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007316   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
2007317   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007318   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2007319   +   H11  =     1.40261108800308 * S_Income  +     -0.8062097507842 * S_Kidhome
2007320   +          +    -0.12974862644982 * S_MntFishProducts
2007321   +          +     0.08065642800368 * S_MntFruits  +    -0.12102130003972 *
2007322   +        S_MntGoldProds  +     0.19226249622126 * S_MntMeatProducts
2007323   +          +    -0.12290326901613 * S_MntSweetProducts
2007324   +          +     0.07790241176978 * S_MntWines  +     0.36123042724896 *
2007325   +        S_NumCatalogPurchases  +    -0.01034406765754 * S_NumDealsPurchases
2007326   +          +     0.09738032540137 * S_NumStorePurchases
2007327   +          +     0.44459515215205 * S_NumWebPurchases
2007328   +          +      0.8471075994578 * S_NumWebVisitsMonth
2007329   +          +    -1.10667985160899 * S_Recency  +    -0.88509832868515 *
2007330   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = 1.40261108800308 * S_Income + -0.8062097507842 * S_Kidhome + 
-0.12974862644982 * S_MntFishProducts + 0.08065642800368 * S_MntFruits + -0.12102130003972 * 
S_MntGoldProds + 0.19226249622126 * S_MntMeatProducts + -0.12290326901613 * S_MntSweetProducts 
+ 0.07790241176978 * S_MntWines + 0.36123042724896 * S_NumCatalogPurchases + -0.01034406765754 
* S_NumDealsPurchases + 0.09738032540137 * S_NumStorePurchases + 0.44459515215205 * 
S_NumWebPurchases + 0.8471075994578 * S_NumWebVisitsMonth + -1.10667985160899 * S_Recency + 
-0.88509832868515 * S_Teenhome ;
2007331   +   H12  =     0.51266936686642 * S_Income  +     0.26909433357851 * S_Kidhome
2007332   +          +     0.02406077596811 * S_MntFishProducts
2007333   +          +    -0.57443793453522 * S_MntFruits  +     0.36824731232149 *
2007334   +        S_MntGoldProds  +     0.40177289143061 * S_MntMeatProducts
2007335   +          +     -0.1147507059349 * S_MntSweetProducts
2007336   +          +    -0.66379351187459 * S_MntWines  +     1.33407347415468 *
2007337   +        S_NumCatalogPurchases  +     1.00633891197299 * S_NumDealsPurchases
2007338   +          +    -0.23920969262322 * S_NumStorePurchases
2007339   +          +     -0.6008837862932 * S_NumWebPurchases
2007340   +          +     0.26759743722885 * S_NumWebVisitsMonth
2007341   +          +    -0.42755419464125 * S_Recency  +    -0.14471776361394 *
2007342   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = 0.51266936686642 * S_Income + 0.26909433357851 * S_Kidhome + 
0.02406077596811 * S_MntFishProducts + -0.57443793453522 * S_MntFruits + 0.36824731232149 * 
S_MntGoldProds + 0.40177289143061 * S_MntMeatProducts + -0.1147507059349 * S_MntSweetProducts 
+ -0.66379351187459 * S_MntWines + 1.33407347415468 * S_NumCatalogPurchases + 1.00633891197299 
* S_NumDealsPurchases + -0.23920969262322 * S_NumStorePurchases + -0.6008837862932 * 
S_NumWebPurchases + 0.26759743722885 * S_NumWebVisitsMonth + -0.42755419464125 * S_Recency + 
-0.14471776361394 * S_Teenhome ;
2007343   +   H13  =    -0.19807308698832 * S_Income  +     0.25934675474849 * S_Kidhome
2007344   +          +     0.04398331533724 * S_MntFishProducts
2007345   +          +    -0.00090357598988 * S_MntFruits  +     0.05139545341773 *
2007346   +        S_MntGoldProds  +    -0.74617114336019 * S_MntMeatProducts
2007347   +          +     0.00552488718744 * S_MntSweetProducts
2007348   +          +     0.47194407197012 * S_MntWines  +    -0.35149551848487 *
2007349   +        S_NumCatalogPurchases  +    -0.30232522133093 * S_NumDealsPurchases
2007350   +          +     0.60058189155105 * S_NumStorePurchases
2007351   +          +     0.51423374855856 * S_NumWebPurchases
2007352   +          +     -0.9075304423321 * S_NumWebVisitsMonth
2007353   +          +     0.83597739226791 * S_Recency  +     0.15783202762709 *
2007354   +        S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.19807308698832 * S_Income + 0.25934675474849 * S_Kidhome + 
0.04398331533724 * S_MntFishProducts + -0.00090357598988 * S_MntFruits + 0.05139545341773 * 
S_MntGoldProds + -0.74617114336019 * S_MntMeatProducts + 0.00552488718744 * S_MntSweetProducts 
+ 0.47194407197012 * S_MntWines + -0.35149551848487 * S_NumCatalogPurchases + 
-0.30232522133093 * S_NumDealsPurchases + 0.60058189155105 * S_NumStorePurchases + 
0.51423374855856 * S_NumWebPurchases + -0.9075304423321 * S_NumWebVisitsMonth + 
0.83597739226791 * S_Recency + 0.15783202762709 * S_Teenhome ;
2007355   +   H11  = H11  +    -0.26274045665457 * AcceptedCmp10
2007356   +          +    -0.86105702939371 * AcceptedCmp20  +    -0.50476270558977 *
2007357   +        AcceptedCmp30  +    -0.84284126473343 * AcceptedCmp40
2007358   +          +     0.19764907691314 * AcceptedCmp50  +    -0.29305577412263 *
2007359   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.26274045665457 * AcceptedCmp10 + -0.86105702939371 * 
AcceptedCmp20 + -0.50476270558977 * AcceptedCmp30 + -0.84284126473343 * AcceptedCmp40 + 
0.19764907691314 * AcceptedCmp50 + -0.29305577412263 * Complain0 ;
2007360   +   H12  = H12  +    -0.27394139847883 * AcceptedCmp10
2007361   +          +    -0.14688750266104 * AcceptedCmp20  +    -0.27982299242327 *
2007362   +        AcceptedCmp30  +    -0.10465140408787 * AcceptedCmp40
2007363   +          +    -0.81681330244218 * AcceptedCmp50  +    -0.28152730217644 *
2007364   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.27394139847883 * AcceptedCmp10 + -0.14688750266104 * 
AcceptedCmp20 + -0.27982299242327 * AcceptedCmp30 + -0.10465140408787 * AcceptedCmp40 + 
-0.81681330244218 * AcceptedCmp50 + -0.28152730217644 * Complain0 ;
2007365   +   H13  = H13  +     0.42310780831005 * AcceptedCmp10
2007366   +          +     0.41337614261155 * AcceptedCmp20  +     0.41436520641821 *
2007367   +        AcceptedCmp30  +     0.08914989208239 * AcceptedCmp40
2007368   +          +     0.54013759697695 * AcceptedCmp50  +    -0.19478210268955 *
2007369   +        Complain0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.42310780831005 * AcceptedCmp10 + 0.41337614261155 * 
AcceptedCmp20 + 0.41436520641821 * AcceptedCmp30 + 0.08914989208239 * AcceptedCmp40 + 
0.54013759697695 * AcceptedCmp50 + -0.19478210268955 * Complain0 ;
2007370   +   H11  = H11  +     0.40331200702699 * Education2n_Cycle
2007371   +          +     0.17202421641945 * EducationBasic  +    -0.29654161092174 *
2007372   +        EducationGraduation  +     -0.4835104183635 * EducationMaster
2007373   +          +     0.52129580188513 * Marital_StatusDivorced
2007374   +          +     -1.5224490339553 * Marital_StatusMarried
2007375   +          +     1.05062906057771 * Marital_StatusSingle
2007376   +          +    -1.16420887937635 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.40331200702699 * Education2n_Cycle + 0.17202421641945 * 
EducationBasic + -0.29654161092174 * EducationGraduation + -0.4835104183635 * EducationMaster 
+ 0.52129580188513 * Marital_StatusDivorced + -1.5224490339553 * Marital_StatusMarried + 
1.05062906057771 * Marital_StatusSingle + -1.16420887937635 * Marital_StatusTogether ;
2007377   +   H12  = H12  +     -0.3488928858263 * Education2n_Cycle
2007378   +          +     0.38279680594423 * EducationBasic  +     0.20376044836519 *
2007379   +        EducationGraduation  +     0.20697694670185 * EducationMaster
2007380   +          +    -0.14428158063317 * Marital_StatusDivorced
2007381   +          +     0.22396926143356 * Marital_StatusMarried
2007382   +          +    -0.12980854818876 * Marital_StatusSingle
2007383   +          +     0.32607015627906 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.3488928858263 * Education2n_Cycle + 0.38279680594423 * 
EducationBasic + 0.20376044836519 * EducationGraduation + 0.20697694670185 * EducationMaster + 
-0.14428158063317 * Marital_StatusDivorced + 0.22396926143356 * Marital_StatusMarried + 
-0.12980854818876 * Marital_StatusSingle + 0.32607015627906 * Marital_StatusTogether ;
2007384   +   H13  = H13  +    -0.18351418824199 * Education2n_Cycle
2007385   +          +     0.53417952447263 * EducationBasic  +    -0.14333929289628 *
2007386   +        EducationGraduation  +     0.04513004774082 * EducationMaster
2007387   +          +    -0.25615797303064 * Marital_StatusDivorced
2007388   +          +     0.18825506199046 * Marital_StatusMarried
2007389   +          +    -0.24607556819871 * Marital_StatusSingle
2007390   +          +     0.29531673844201 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.18351418824199 * Education2n_Cycle + 0.53417952447263 * 
EducationBasic + -0.14333929289628 * EducationGraduation + 0.04513004774082 * EducationMaster 
+ -0.25615797303064 * Marital_StatusDivorced + 0.18825506199046 * Marital_StatusMarried + 
-0.24607556819871 * Marital_StatusSingle + 0.29531673844201 * Marital_StatusTogether ;
2007391   +   H11  =    -1.29289362679377 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.29289362679377 + H11 ;
2007392   +   H12  =     0.88724419151235 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.88724419151235 + H12 ;
2007393   +   H13  =    -0.51194544699467 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.51194544699467 + H13 ;
2007394   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
2007395   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
2007396   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
2007397   +END;
MPRINT(EM_DIAGRAM):   END;
2007398   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2007399   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
2007400   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
2007401   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
2007402   +END;
MPRINT(EM_DIAGRAM):   END;
2007403   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007404   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
2007405   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007406   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
2007407   +   P_DepVar1  =     4.44251020865882 * H11  +     2.67139161773156 * H12
2007408   +          +    -4.73549395111184 * H13 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 4.44251020865882 * H11 + 2.67139161773156 * H12 + 
-4.73549395111184 * H13 ;
2007409   +   P_DepVar1  =     0.45492690116644 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.45492690116644 + P_DepVar1 ;
2007410   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
2007411   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
2007412   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
2007413   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
2007414   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
2007415   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
2007416   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
2007417   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
2007418   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
2007419   +END;
MPRINT(EM_DIAGRAM):   END;
2007420   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
2007421   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
2007422   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
2007423   +END;
MPRINT(EM_DIAGRAM):   END;
2007424   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
2007425   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
2007426   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
2007427   +END;
MPRINT(EM_DIAGRAM):   END;
2007428   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007429   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
2007430   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
2007431   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
2007432   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
2007433   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
2007434   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
2007435   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
2007436   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
2007437   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
2007438   +END;
MPRINT(EM_DIAGRAM):   END;
2007439   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2007440   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
2007441   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
2007442   +drop
2007443   +H11
2007444   +H12
2007445   +H13
2007446   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
2007447   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2007448    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2007449    quit;
2007450    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2007451    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2007452    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2007453    retain ID 2 Node "Neural32";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural32";
2007454    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2007455    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1602 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1602 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007456    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2007457    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007458    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1602 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1602 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007459    proc sort data=EMWS8.Neural32_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural32_variableset out=_temp2(keep=NAME CREATOR);
2007460    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007461    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.NEURAL32_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007462    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007463    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2007464    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2007465    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007466    proc contents data=EMWS8.Neural32_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural32_train out=_meta(keep=NAME) noprint;
2007467    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

2007468    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2007469    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007470    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 53 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 53 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007471    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007472    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2007473    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007474    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 53 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007475    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2007476    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2007476  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 832 rows and 5 columns.

2007477    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007478    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2007479    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 832 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 832 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007480    filename _pref
2007480  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
2007481    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2007482    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
2007483   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2007484   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
2007485   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2007486   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
2007487   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
2007488   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2007489    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2007490    quit;
2007491    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2007492    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2007493    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2007494    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
2007495    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2007496    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007497    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2007498    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007499    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007500    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
2007501    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007502    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007503    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007504    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2007505    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2007506    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007507    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
2007508    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

2007509    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2007510    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007511    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007512    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007513    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2007514    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007515    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007516    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2007517    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2007517  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.

2007518    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007519    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2007520    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 836 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007521    filename _pref
2007521  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
2007522    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2007523    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
2007524   +
2007525   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
2007526   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
2007526  !+es;
MPRINT(EM_DIAGRAM):   
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
2007527   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
2007528   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
2007529   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
2007530   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
2007531   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2007532    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2007533    quit;
2007534    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2007535    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2007536    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2007537    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
2007538    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2007539    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007540    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2007541    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007542    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007543    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
2007544    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007545    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007546    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007547    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2007548    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2007549    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007550    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
2007551    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007552    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2007553    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007554    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007555    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007556    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2007557    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007558    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007559    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2007560    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2007560  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.

2007561    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007562    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2007563    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 875 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007564    filename _pref
2007564  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref 
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
2007565    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
2007566    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
2007567   +
2007568   +
2007569   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
2007570   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
2007571   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
2007572   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
2007573   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
2007574   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007575   +
2007576   +
2007577   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
2007578   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
2007579   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
2007580   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
2007581   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
2007582   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007583   +
2007584   +
2007585   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
2007586   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
2007587   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
2007588   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
2007589   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
2007590   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007591   +
2007592   +
2007593   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
2007594   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
2007595   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
2007596   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
2007597   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
2007598   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007599   +
2007600   +
2007601   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
2007602   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
2007603   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
2007604   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
2007605   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
2007606   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007607   +
2007608   +
2007609   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
2007610   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
2007611   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
2007612   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
2007613   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
2007614   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007615   +
2007616   +
2007617   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
2007618   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
2007619   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
2007620   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
2007621   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
2007622   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007623   +
2007624   +
2007625   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
2007626   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
2007627   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
2007628   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
2007629   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
2007630   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
2007631   +if
2007632   +_FILTERNORM1 not in ( '.')
2007633   + and
2007634   +_FILTERNORM2 not in ( '.')
2007635   + and
2007636   +_FILTERNORM3 not in ( '.')
2007637   + and
2007638   +_FILTERNORM4 not in ( '.')
2007639   + and
2007640   +_FILTERNORM5 not in ( '.')
2007641   + and
2007642   +_FILTERNORM6 not in ( '.')
2007643   + and
2007644   +_FILTERNORM7 not in ( ' ')
2007645   + and
2007646   +_FILTERNORM8 not in ( ' ')
2007647   +and
2007648   +( Dt_Customer ne .)
2007649   +and ( Income ne . and (Income<=107000))
2007650   +and ( Kidhome ne .)
2007651   +and ( MntFishProducts ne .)
2007652   +and ( MntFruits ne .)
2007653   +and ( MntGoldProds ne .)
2007654   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
2007655   +and ( MntSweetProducts ne .)
2007656   +and ( MntWines ne .)
2007657   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
2007658   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
2007659   +and ( NumStorePurchases ne .)
2007660   +and ( NumWebPurchases ne .)
2007661   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
2007662   +and ( Recency ne .)
2007663   +and ( Teenhome ne .)
2007664   +and ( Year_Birth ne .)
2007665   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and 
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and 
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and ( 
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and ( 
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne 
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and ( 
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and 
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and ( 
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne 
.) and ( Year_Birth ne .) then do;
2007666   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
2007667   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
2007668   +end;
MPRINT(EM_DIAGRAM):   end;
2007669   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
2007670   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
2007671    run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
2007672    quit;
2007673    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
2007674    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
2007675    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
2007676    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
2007677    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
2007678    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007679    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
2007680    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007681    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007682    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
2007683    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007684    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2007685    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007686    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
2007687    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
2007688    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007689    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
2007690    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

2007691    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
2007692    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007693    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007694    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
2007695    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
2007696    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
2007697    run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may 
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007698    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
2007699    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
2007699  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.

2007700    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007701    proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl10_FCMP data=_tempx;
2007702    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL10_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL10_FCMP has 941 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2007703    %macro varDept(fcmpdata=,id=);
2007704    %global nobs&id scoreFlag&id;
2007705    %let scoreFlag&id = 0;
2007706    %if &id=1 or ^&fcmpStart %then %do;
2007707    proc sort data=&fcmpdata out=_temp&id nodupkey;
2007708    by NAME;
2007709    where id=&id and LHS in( %let j=1;
2007710    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
2007711    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
2007712    "&var" %let j = %eval(&j+1);
2007713    %end;
2007714    );
2007715    run;
2007716    %let dsid = %sysfunc(open(_temp&id));
2007717    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2007718    %let dsid = %sysfunc(close(&dsid));
2007719    %if &&nobs&id %then %do;
2007720    %let scoreFlag&id = 1;
2007721    %let fcmpStart = 1;
2007722    %end;
2007723    %else %let fcmpStart = 0;
2007724    %end;
2007725    %else %do;
2007726    proc sort data=&fcmpdata out=_tempid;
2007727    where id=&id;
2007728    by LHS;
2007729    run;
2007730    %let dsid = %sysfunc(open(_tempid));
2007731    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2007732    %let dsid = %sysfunc(close(&dsid));
2007733    %if ^&&nobs&id %then %do;
2007734    proc datasets lib=work nolist;
2007735    delete _tempid;
2007736    run;
2007737    quit;
2007738    %end;
2007739    %else %do;
2007740    data _tempAll;
2007741    set %let j=%eval(&id-1);
2007742    %do x=1 %to &j;
2007743    %if &&nobs&x %then %do;
2007744    _temp&x %end;
2007745    %end;
2007746    ;
2007747    run;
2007748    proc sql;
2007749    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
2007749  ! work._tempid p2 where p.name=p2.lhs;
2007750    quit;
2007751    data _temp&id;
2007752    set _temp&id;
2007753    where LHS ne '' and NAME ne '' and Node ne '';
2007754    run;
2007755    proc datasets lib=work nolist;
2007756    delete _tempAll;
2007757    run;
2007758    %let dsid = %sysfunc(open(_temp&id));
2007759    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2007760    %let dsid = %sysfunc(close(&dsid));
2007761    %if ^&&nobs&id %then %do;
2007762    proc datasets lib=work nolist;
2007763    delete _temp&id;
2007764    run;
2007765    quit;
2007766    %end;
2007767    %else %do;
2007768    %let scoreFlag&id = 1;
2007769    data _temp&id;
2007770    set _temp&id;
2007771    where LHS ne NAME and node ne '';
2007772    run;
2007773    %let dsid = %sysfunc(open(_temp&id));
2007774    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
2007775    %let dsid = %sysfunc(close(&dsid));
2007776    %if ^&&nobs&id %then %do;
2007777    proc datasets lib=work nolist;
2007778    delete _temp&id;
2007779    run;
2007780    quit;
2007781    %end;
2007782    %else %do;
2007783    proc sort data=_temp&id nodupkey;
2007784    by LHS NAME;
2007785    run;
2007786    %end;
2007787    %end;
2007788    %end;
2007789    %end;
2007790    %mend varDept;
2007791    %macro optCode(outdata=fcmpdata);
2007792    %global fcmpStart;
2007793    %let fcmpStart = 0;
2007794    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
2007795    %let NumNodes=9;
2007796    %do k=1 %to &NumNodes;
2007797    %vardept(fcmpdata=&outdata, id=&k);
2007798    %end;
2007799    %mend optCode;
2007800    %optcode(outData=EMWS8.Ensmbl10_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;

NOTE: There were 98 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 73 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 25 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 4 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp6;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP6 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 66 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 25 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.20 seconds
      cpu time            0.04 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl10_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

2007801    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2007802    * Ensmbl10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Computing metadata for TRAIN data;
2007803    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.ENSMBL10_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Ensmbl10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Ensmbl10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Ensmbl10_TRAIN out=WORK.M2VHZV0_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VHZV0_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VHZV0_(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VHZV0_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VHZV0_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M04YPHCV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JSO7K1(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   set WORK.M04YPHCV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Neural35_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural35_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Ensmbl10";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Ensmbl10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME in( "I_DepVar" "F_DepVar" "U_DepVar" "_WARN_" "P_DepVar1" 
"P_DepVar0" "R_DepVar1" "R_DepVar0" ) then CREATOR="Ensmbl10";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
2008123    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
2008124    set EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMINFO;
2008125    where DATA='Ensmbl10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Ensmbl10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
2008126    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.ENSMBL10_EMINFO.
      WHERE (DATA='Ensmbl10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2008127    data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl10_EMINFO;
2008128    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
2008129    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
2008130    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
2008134    run;
2008135    data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMINFO;
2008136    set EMWS8.Ensmbl10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl10_EMINFO WORK.MODELTEMP_INFO;
2008137    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2008138    proc sort data = EMWS8.Ensmbl10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Ensmbl10_EMINFO NOTHREADS;
2008139    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
2008140    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2008141    proc sort data = EMWS8.Neural35_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural35_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
2008142    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
2008143    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS8.NEURAL35_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2008144    proc sort data = EMWS8.Ensmbl10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Ensmbl10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
2008145    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
2008146    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2008147    data EMWS8.Ensmbl10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl10_EMINFO;
2008148    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
2008149    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
2008150    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.ENSMBL10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2008151    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
2008152    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
2008153    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
2008154    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

NOTE: View EMWS8.ENSMBL10_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.ENSMBL10_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
