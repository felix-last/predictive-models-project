MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.17 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                19.17 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2E9EYVU 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2E9EYVU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.17 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.17 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\Boost5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
69944      proc freq data=EMWS8.Boost5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Boost5_VariableSet noprint;
69945      table ROLE*LEVEL/out=WORK.Boost5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Boost5META;
69946      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BOOST5_VARIABLESET.
NOTE: The data set WORK.BOOST5META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69947      proc print data=WORK.Boost5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost5META label noobs;
69948      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
69949      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
69949    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
69949    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
69950      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
69951      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
69952      run;

NOTE: There were 8 observations read from the data set WORK.BOOST5META.
NOTE: The PROCEDURE PRINT printed page 59.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69953      title10;
MPRINT(EM_DIAGRAM):   title10;
69954      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta2_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Boost5_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost5_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Boost5_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Boost5_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost5_DepVar_DD 
out=EMWS8.Boost5_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
70001      data WORK.Boost5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
70002      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
70003      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
70003    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
70003    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
70004         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
70004    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
70004    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
70005      set EMWS8.BOOST5_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.BOOST5_DEPVAR_DM( where=(_TYPE_="TARGET"));
70006      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
70007      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
70008      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
70009      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
70010      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
70011      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
70012      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
70013      end;
MPRINT(EM_DIAGRAM):   end;
70014      output;
MPRINT(EM_DIAGRAM):   output;
70015      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.BOOST5_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST5_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70016      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
70017      proc print data=WORK.Boost5_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost5_EVENT noobs label;
70018      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
70019      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
70020      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
70021      run;

NOTE: There were 1 observations read from the data set WORK.BOOST5_EVENT.
NOTE: The PROCEDURE PRINT printed page 60.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70022      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
70023      proc print data = EMWS8.Boost5_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Boost5_DepVar_DM noobs label;
70024      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
70025      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
70026      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
70026    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
70026    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
70027      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
70028      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
70029      run;

NOTE: There were 7 observations read from the data set EMWS8.BOOST5_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 61.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70030      title10;
MPRINT(EM_DIAGRAM):   title10;
70031      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost5: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost5: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
70508      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
70509      * Boost5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost5: Generation of macros and macro variables;
70510      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
70511      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

70512      %let EMEXCEPTIONSTRING=;
70513      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
70514      * TRAIN: Boost5;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost5;
70515      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70516      %let EM_ACTION = TRAIN;
70517      %let syscc = 0;
70518      %macro main;
70519      
70520        filename temp catalog 'sashelp.emmodl.boost_macros.source';
70521        %include temp;
70522        filename temp;
70523      
70524        %setProperties;
70525      
70526        %if %upcase(&EM_ACTION) = CREATE %then %do;
70527          filename temp catalog 'sashelp.emmodl.boost_create.source';
70528          %include temp;
70529          filename temp;
70530      
70531          %create;
70532        %end;
70533      
70534         %else
70535         %if %upcase(&EM_ACTION) = TRAIN %then %do;
70536      
70537             filename temp catalog 'sashelp.emmodl.boost_train.source';
70538             %include temp;
70539             filename temp;
70540             %train;
70541         %end;
70542      
70543        %else
70544        %if %upcase(&EM_ACTION) = SCORE %then %do;
70545          filename temp catalog 'sashelp.emmodl.boost_score.source';
70546          %include temp;
70547          filename temp;
70548      
70549          %score;
70550      
70551        %end;
70552      
70553        %else
70554        %if %upcase(&EM_ACTION) = REPORT %then %do;
70555      
70556             filename temp catalog 'sashelp.emmodl.boost_report.source';
70557             %include temp;
70558             filename temp;
70559      
70560             %report;
70561         %end;
70562      
70563         %doendm:
70564      %mend main;
70565      
70566      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
70568     +%macro SetProperties;
70570     +     /* boost options */
70571     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
70572     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
70573     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
70574     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
70575     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
70576     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
70577     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
70578     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
70579     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
70580     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
70581     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
70582     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
70584     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
70585     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
70586     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
70587     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
70588     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
70589     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
70590     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
70591     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
70593     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
70594     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
70595     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
70596     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
70598     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
70599     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
70600     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
70602     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
70606     +%macro train;
70608     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
70609     +   %include temp;
70610     +   filename temp;
70612     +   %if &EM_IMPORT_DATA eq %then %do;
70613     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
70614     +       %put &em_codebar;
70615     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
70615    !+NOQUOTE));
70616     +       %put &errormsg;
70617     +       %put &em_codebar;
70618     +       %goto doendm;
70619     +   %end;
70620     +   %else
70621     +       %let EMEXCEPTIONSTRING =;
70623     +   %if  &EM_NUM_TARGET ne 1 %then %do;
70624     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
70625     +        %put &em_codebar;
70626     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
70626    !+NOQUOTE));
70627     +        %put &errormsg;
70628     +        %put &em_codebar;
70629     +        %goto doendm;
70630     +   %end;
70632     +   %let target_level = %EM_TARGET_LEVEL;
70633     +   %let target_var = %EM_TARGET;
70635     +   /* check actual num of target levels */
70636     +   %if (&target_Level eq BINARY) %then %do;
70637     +      %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&target_Var,
70638     +                              nLevel=_nTargetLevel );
70639     +      %if &_nTargetLevel  > 2 %then %do;
70640     +        %let EMEXCEPTIONSTRING =
70640    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
70641     +        %put &em_codebar;
70642     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
70642    !+NOQUOTE));
70643     +        %put &errormsg;
70644     +        %put &em_codebar;
70645     +        %goto doendm;
70646     +      %end;
70647     +   %end;
70649     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
70649    !+(&EM_NUM_ORDINAL_INPUT < 1)
70650     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
70651     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
70652     +        %put &em_codebar;
70653     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
70653    !+;
70654     +        %put &errormsg;
70655     +        %put &em_codebar;
70656     +        %goto doendm;
70657     +   %end;
70659     +   /* Initialize property macro variables */
70660     +   %SetProperties;
70662     +   /* data sets */
70663     +   %EM_GETNAME(key=MODEL, type=DATA);
70664     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
70665     +   %EM_GETNAME(key=SUBFIT, type=DATA);
70666     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
70668     +   /* files
70669     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
70671     +   /* retrieve target information */
70672     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
70674     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
70675     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
70676     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
70677     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
70678     +   %do %while(^ %sysfunc(fetch(&dsid)));
70679     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
70680     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
70681     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
70682     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
70683     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
70684     +   %end;
70685     +   %let dsid = %sysfunc(close(&dsid));
70687     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
70687    !+support ordinal target */
70688     +   %if &Target_Level eq ORDINAL %then %do;
70689     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
70690     +        %put &em_codebar;
70691     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
70691    !+error_invalidordinaltarget_note, NOQUOTE));
70692     +        %put &errormsg;
70693     +        %put &em_codebar;
70694     +        %goto doendm;
70695     +   %end;
70697     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
70697    !+thrown */
70698     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
70698    !+)) %then %do;
70699     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
70700     +        %put &em_codebar;
70701     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
70701    !+NOQUOTE));
70702     +        %put &errormsg;
70703     +        %put &em_codebar;
70704     +        %goto doendm;
70705     +   %end;
70707     +   %runBoostProcedure;
70710     +   %doendm:
70711     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
70712     +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
70713     +  %global &nLevel;
70714     +  proc dmdb batch data=&indata
70715     +    classout=_tmp_dmdbout;
70716     +    class &target;
70717     +  run;
70718     +  data _tmp_dmdbout;
70719     +    set _tmp_dmdbout;
70720     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
70721     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
70722     +  run;
70723     +  data _null_;
70724     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
70725     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
70726     +    %let dsid = %sysfunc(close(&dsid));
70727     +     call symput("&nLevel", put(&_obs, Best12.));
70728     +  run;
70730     +  proc datasets lib=work nolist;
70731     +     delete _tmp_dmdbout;
70732     +  run;
70733     +  quit;
70734     +%Mend CheckBinaryTargetLevel;
70737     +%macro runBoostProcedure;
70739     +  proc sql;
70740     +    reset noprint;
70741     +    select count(*) into :nobs from &EM_IMPORT_DATA;
70742     +  quit;
70744     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
70746     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
70747     +      iterations = &EM_PROPERTY_ITERATIONS
70748     +    %end;
70750     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
70751     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
70752     +       trainproportion = &tprop
70753     +    %end;
70755     +    %if &EM_PROPERTY_SEED ne %then %do;
70756     +       seed = &EM_PROPERTY_SEED
70757     +    %end;
70759     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
70760     +       shrinkage = &EM_PROPERTY_SHRINKAGE
70761     +    %end;
70763     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
70764     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
70765     +    %end;
70767     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
70768     +    %if &splitsize ge &nobs %then %do;
70769     +       %let splitsize= .;
70770     +    %end;
70771     +    %if &splitsize ne . %then %do;
70772     +      splitsize = &splitsize
70773     +    %end;
70775     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
70776     +      mincatsize = &EM_PROPERTY_MINCATSIZE
70777     +    %end;
70779     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
70780     +       maxbranch = &EM_PROPERTY_MAXBRANCH
70781     +    %end;
70783     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
70784     +       maxdepth = &EM_PROPERTY_MAXDEPTH
70785     +    %end;
70787     +    %let nsurrs = ;
70788     +    %if &EM_PROPERTY_NSURRS ne %then %do;
70789     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
70789    !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
70790     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
70791     +      maxsurrs = &nsurrs
70792     +    %end;
70794     +    %if &EM_PROPERTY_MISSING ne %then %do;
70795     +      Missing = &EM_PROPERTY_MISSING
70796     +    %end;
70798     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
70799     +      reusevar = &EM_PROPERTY_REUSEVAR
70800     +    %end;
70801     +/*
70802     +    %if &EM_PROPERTY_PRECISION ne %then %do;
70803     +      intervaldecimals=&EM_PROPERTY_PRECISION
70804     +    %end;
70805     +*/
70806     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
70807     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
70808     +    %end;
70810     +    %if &Target_Event ne %then %do;
70811     +      Event="&Target_Event"
70812     +    %end;
70814     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
70815     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
70816     +    %end;
70818     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
70819     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
70820     +    %end;
70822     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
70823     +      %if &EM_PROPERTY_HUBER ne %then %do;
70824     +        Huber=&EM_PROPERTY_HUBER
70825     +      %end;
70826     +    %end;
70827     +    ;
70829     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
70830     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
70831     +    %end;
70833     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
70833    !+ne  %then %do;
70834     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
70834    !+%EM_NOMINAL_REJECTED / level = nominal;
70835     +    %end;
70837     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
70838     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
70839     +    %end;
70841     +    %if %EM_FREQ ne %then %do;
70842     +       freq %EM_FREQ;
70843     +    %end;
70845     +    target %EM_TARGET / level = &TARGET_LEVEL;
70847     +    &EM_DEC_STATEMENT;
70849     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
70850     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
70851     +    %end;
70852     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
70853     +       nodesize = &EM_PROPERTY_NODESIZE
70854     +    %end;
70855     +    ;
70856     +    save model=&EM_USER_MODEL;
70857     +  run;
70858     +  quit;
70859     +  %em_checkerror();
70861     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta2_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS8.Meta2_TRAIN;
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS8.Meta2_TRAIN iterations = 
1000 trainproportion = 1 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 20 
maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 15 Exhaustive = 5000 
Event="1                               " CategoricalBins = 100 IntervalBins = 300 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Frq Income Mnt MntGoldProds MntMeatProducts 
NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth RFMstat Recency Teenhome Year_Birth
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Marital_Status
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(RUNBOOSTPROCEDURE):   / level = BINARY;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = RAM nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS8.Boost5_MODEL;
NOTE: 1568866 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 109196288 bytes.
NOTE: Passed training data 5000 times.
NOTE: Current TREEBOOST model contains 1000 trees.
NOTE: Training used 905024 bytes of work memory.
NOTE: The data set EMWS8.BOOST5_MODEL has 128942 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           15.18 seconds
      cpu time            15.11 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           15.18 seconds
      cpu time            15.11 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

70864      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70865      
70866      *------------------------------------------------------------*;
70867      * End TRAIN: Boost5;
70868      *------------------------------------------------------------*;

70869      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
70870      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
70871      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70872      ;
MPRINT(EM_DIAGRAM):   ;
70873      ;
MPRINT(EM_DIAGRAM):   ;
70874      ;
MPRINT(EM_DIAGRAM):   ;
70875      ;
MPRINT(EM_DIAGRAM):   ;
70876      quit;
MPRINT(EM_DIAGRAM):   quit;
70877      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70878      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
70879      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70880      /*; *"; *'; */
70881      ;
MPRINT(EM_DIAGRAM):   ;
70882      run;
MPRINT(EM_DIAGRAM):   run;
70883      quit;
MPRINT(EM_DIAGRAM):   quit;
70884      /* Reset EM Options */
70885      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
70886      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
70887      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
