*------------------------------------------------------------*
User:                Lukas Fahr
Date:                21. April 2016
Time:                18.52 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O27E64DM
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O27E64DM new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
759256     proc freq data=EMWS8.Reg7_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Reg7_VariableSet noprint;
759257     table ROLE*LEVEL/out=WORK.Reg7META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Reg7META;
759258     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set EMWS8.REG7_VARIABLESET.
NOTE: The data set WORK.REG7META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759259     proc print data=WORK.Reg7META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg7META label noobs;
759260     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
759261     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
759261   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
759261   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
759262     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
759263     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
759264     run;
 
NOTE: There were 6 observations read from the data set WORK.REG7META.
NOTE: The PROCEDURE PRINT printed page 837.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759265     title10;
MPRINT(EM_DIAGRAM):   title10;
759266     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.BINNING_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg7_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Reg7_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg7_DepVar_DD
out=EMWS8.Reg7_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
759313     data WORK.Reg7_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg7_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
759314     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
759315     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
759315   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
759315   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
759316        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
759316   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
759316   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
759317     set EMWS8.REG7_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.REG7_DEPVAR_DM( where=(_TYPE_="TARGET"));
759318     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
759319     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
759320     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
759321     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
759322     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
759323     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
759324     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
759325     end;
MPRINT(EM_DIAGRAM):   end;
759326     output;
MPRINT(EM_DIAGRAM):   output;
759327     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG7_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG7_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759328     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
759329     proc print data=WORK.Reg7_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg7_EVENT noobs label;
759330     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
759331     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
759332     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
759333     run;
 
NOTE: There were 1 observations read from the data set WORK.REG7_EVENT.
NOTE: The PROCEDURE PRINT printed page 838.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759334     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
759335     proc print data = EMWS8.Reg7_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Reg7_DepVar_DM noobs label;
759336     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
759337     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
759338     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
759338   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
759338   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
759339     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
759340     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
759341     run;
 
NOTE: There were 7 observations read from the data set EMWS8.REG7_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 839.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759342     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg7: Preparing metadata for Training
*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0DENQC9;
MPRINT(EM_DIAGRAM):   set WORK.M0DENQC9;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
759352     data WORK.M0DENQC9;
MPRINT(EM_DIAGRAM):    data WORK.M0DENQC9;
759353     set WORK.M0DENQC9 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0DENQC9 end=eof;
759354     output;
MPRINT(EM_DIAGRAM):   output;
759355     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
759356     NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
759357     ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
759358     LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
759359     TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
759360     output;
MPRINT(EM_DIAGRAM):   output;
759361     end;
MPRINT(EM_DIAGRAM):   end;
759362     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.M0DENQC9.
NOTE: The data set WORK.M0DENQC9 has 17 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.REG7_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
759363     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
759364     * Reg7: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg7: Create decision matrix;
759365     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759366     data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
759367       length   DepVar                           $  32
759368                COUNT                                8
759369                DATAPRIOR                            8
759370                TRAINPRIOR                           8
759371                DECPRIOR                             8
759372                DECISION1                            8
759373                DECISION2                            8
759374                ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
759375
759376       label    COUNT="Level Counts"
759377                DATAPRIOR="Data Proportions"
759378                TRAINPRIOR="Training Proportions"
759379                DECPRIOR="Decision Priors"
759380                DECISION1="1"
759381                DECISION2="0"
759382                ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
759383       format   COUNT 10.
759384                ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
759385     DepVar="1"; COUNT=359; DATAPRIOR=0.0643642072; TRAINPRIOR=0.15122156697556;
759385   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0643642072;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
759386     output;
MPRINT(EM_DIAGRAM):   output;
759387     DepVar="0"; COUNT=2015; DATAPRIOR=0.9356357928; TRAINPRIOR=0.84877843302443;
759387   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.9356357928;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
759388     output;
MPRINT(EM_DIAGRAM):   output;
759389     ;
MPRINT(EM_DIAGRAM):   ;
759390     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759391     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
759392     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
759393     label DECISION1= '1';
759394     label DECISION2= '0';
759395     run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
759396     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
759397     data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
759398     set EMWS8.BINNING_TRAIN(keep=
759399     DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts
759400     GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases
759401     GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency
759402     Year_Birth );
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN(keep= DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income
GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines
GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq
GRP_Recency Year_Birth );
759403     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg7: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
759404     *------------------------------------------------------------* ;
759405     * Reg7: DMDBClass Macro ;
759406     *------------------------------------------------------------* ;
759407     %macro DMDBClass;
759408         DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_Frq(ASC) GRP_Income(ASC) GRP_Mnt(ASC)
759409        GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC) GRP_MntMeatProducts(ASC)
759410        GRP_MntWines(ASC) GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC)
759411        GRP_NumWebPurchases(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
759412     %mend DMDBClass;
759413     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
759414     * Reg7: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg7: DMDBVar Macro ;
759415     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
759416     %macro DMDBVar;
759417         Year_Birth
759418     %mend DMDBVar;
759419     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759420     * Reg7: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg7: Create DMDB;
759421     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759422     proc dmdb batch data=WORK.EM_DMREG
759423     dmdbcat=WORK.Reg7_DMDB
759424     maxlevel = 513
759425     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg7_DMDB maxlevel = 513
;
MPRINT(EM_DIAGRAM):   class
759426     class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_Frq(ASC) GRP_Income(ASC)
GRP_Mnt(ASC) GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC) GRP_MntMeatProducts(ASC)
GRP_MntWines(ASC) GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC)
GRP_NumWebPurchases(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
759427     var %DMDBVar;
MPRINT(DMDBVAR):   Year_Birth
MPRINT(EM_DIAGRAM):  ;
759428     target
759429     DepVar
759430     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
759431     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
759432     quit;
759433     *--- end code ---*;
 
759434     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
759435     * Reg7: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg7: Run DMREG procedure;
759436     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759437     proc dmreg data=EM_DMREG dmdbcat=WORK.Reg7_DMDB
759438     validata = EMWS8.BINNING_VALIDATE
759439     outest = EMWS8.Reg7_EMESTIMATE
759440     outterms = EMWS8.Reg7_OUTTERMS
759441     outmap= EMWS8.Reg7_MAPDS namelen=200
759442     ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg7_DMDB validata =
EMWS8.BINNING_VALIDATE outest = EMWS8.Reg7_EMESTIMATE outterms = EMWS8.Reg7_OUTTERMS outmap=
EMWS8.Reg7_MAPDS namelen=200 ;
759443     class
759444     DepVar
759445     GRP_AcceptedCmp5
759446     GRP_Frq
759447     GRP_Income
759448     GRP_Mnt
759449     GRP_MntFishProducts
759450     GRP_MntGoldProds
759451     GRP_MntMeatProducts
759452     GRP_MntWines
759453     GRP_NumCatalogPurchases
759454     GRP_NumDistPurchases
759455     GRP_NumWebPurchases
759456     GRP_RFMstat
759457     GRP_RMntFrq
759458     GRP_Recency
759459     ;
MPRINT(EM_DIAGRAM):   class DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt
GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases
GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency ;
759460     model DepVar =
759461     GRP_AcceptedCmp5
759462     GRP_Frq
759463     GRP_Income
759464     GRP_Mnt
759465     GRP_MntFishProducts
759466     GRP_MntGoldProds
759467     GRP_MntMeatProducts
759468     GRP_MntWines
759469     GRP_NumCatalogPurchases
759470     GRP_NumDistPurchases
759471     GRP_NumWebPurchases
759472     GRP_RFMstat
759473     GRP_RMntFrq
759474     GRP_Recency
759475     Year_Birth
759476     /error=binomial link=PROBIT
759477     coding=DEVIATION
759478     nodesignprint
759479     selection=STEPWISE choose=NONE
759480     Hierarchy=CLASS
759481     Rule=NONE
759482     ;
MPRINT(EM_DIAGRAM):   model DepVar = GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt
GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases
GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency Year_Birth
/error=binomial link=PROBIT coding=DEVIATION nodesignprint selection=STEPWISE choose=NONE
Hierarchy=CLASS Rule=NONE ;
759483     ;
MPRINT(EM_DIAGRAM):   ;
759484     code file="C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMPUBLISHSCORE.sas"
759485     group=Reg7
759486     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMPUBLISHSCORE.sas" group=Reg7 ;
759487     code file="C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas"
759488     group=Reg7
759489     residual
759490     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas" group=Reg7 residual
;
759491     run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that DepVar='1'.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMPUBLISHSCORE.sas
      opened.
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas opened.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.75 seconds
      cpu time            0.73 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.79 seconds
      cpu time            0.76 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1018 observations read from the data set EMWS8.BINNING_VALIDATE.
NOTE: The data set EMWS8.REG7_EMESTIMATE has 45 observations and 77 variables.
NOTE: The data set EMWS8.REG7_OUTTERMS has 29 observations and 6 variables.
NOTE: The data set EMWS8.REG7_MAPDS has 2 observations and 42 variables.
NOTE: The PROCEDURE DMREG printed pages 840-854.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.81 seconds
      cpu time            0.78 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
759492     quit;
 
759493     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
759494     delete Reg7_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg7_DMDB;
759495     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG7_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
759496     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
759497     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
759498     delete Reg7_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg7_DMDB / memtype=catalog;
759499     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG7_DMDB (memtype=CATALOG).
759500     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.39 seconds
      cpu time            0.03 seconds
 
 
759501     data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
759502     length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
759503     set EMWS8.Reg7_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMESTIMATE;
759504     drop _AIC_--_VMISC_;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_;
759505     where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
759506     drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
759507     select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
759508     when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
759509     when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
759510     when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
759511     otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
759512     end;
MPRINT(EM_DIAGRAM):   end;
759513     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG7_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759514     proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE
out=WORK.ESTIMATE(rename=(_NAME_=Effect));
759515     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 41 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759516     proc transpose data=EMWS8.Reg7_MAPDS out=WORK.MAP(rename=(_NAME_=Effect
759516   ! INPUT=Variable
759517     ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg7_MAPDS out=WORK.MAP(rename=(_NAME_=Effect
INPUT=Variable ));
759518     var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
MPRINT(EM_DIAGRAM):   var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
759519     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG7_MAPDS.
NOTE: The data set WORK.MAP has 40 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759520     proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
759521     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
759522     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 40 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759523     proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
759524     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
759525     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 41 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759526     data EMWS8.Reg7_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EFFECTS(rename=(_LABEL_=EffectLabel));
759527     length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
759528     merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
759529     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
759530     label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))"
759530   ! Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign =
759530   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
759531        "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient =
759531   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient =
759531   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
759532        "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE =
759532   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel =
"Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect
Label" CODE = "Score Code Variable";
759533     label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))"
759533   !  abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
759533   ! PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P
Value";
759534     abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
759535     if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
759536     variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
759537     classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
759538     end;
MPRINT(EM_DIAGRAM):   end;
759539     if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
759540     if length(effect)>length(variable) then classlevel = substr(Effect,
759540   ! length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect,
length(variable)+1);
759541     end;
MPRINT(EM_DIAGRAM):   end;
759542     if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
759543     if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
759544     else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
759545     abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
759546     if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
759547     if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
759548     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      12 at 759534:13   12 at 759545:18
NOTE: There were 41 observations read from the data set WORK.ESTIMATE.
NOTE: There were 40 observations read from the data set WORK.MAP.
NOTE: The data set EMWS8.REG7_EFFECTS has 29 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
759549     proc sort data =EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS8.Reg7_EFFECTS;
759550     by
759551     descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
759552     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS8.REG7_EFFECTS.
NOTE: The data set EMWS8.REG7_EFFECTS has 29 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759553     data EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EFFECTS;
759554     set EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EFFECTS;
759555     format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
759556     label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))"
759556   ! ;
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
759557     retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
759558     TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
759559     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS8.REG7_EFFECTS.
NOTE: The data set EMWS8.REG7_EFFECTS has 29 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759560     proc sort data =EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS8.Reg7_EFFECTS;
759561     by
759562     descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
759563     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS8.REG7_EFFECTS.
NOTE: The data set EMWS8.REG7_EFFECTS has 29 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759564     data EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EFFECTS;
759565     set EMWS8.Reg7_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EFFECTS;
759566     format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
759567     label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
759568     retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
759569     EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
759570     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS8.REG7_EFFECTS.
NOTE: The data set EMWS8.REG7_EFFECTS has 29 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759571     proc transpose data=EMWS8.Reg7_EMESTIMATE
759571   ! out=EMWS8.Reg7_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect
759571   ! _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg7_EMESTIMATE
out=EMWS8.Reg7_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect
_LABEL_=EffectLabel));
759572     where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
759573     var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
MPRINT(EM_DIAGRAM):   var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
759574     by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
759575     id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
759576     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 42 observations read from the data set EMWS8.REG7_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS8.REG7_ESTIMATEGRID has 560 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759577     data EMWS8.Reg7_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_ESTIMATEGRID;
759578     set EMWS8.Reg7_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_ESTIMATEGRID;
759579     if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
759580     label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel,
759580   ! NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))"
759580   ! Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel,
759580   ! NOQUOTE))"
759581        Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))"
759581   ! tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))"
759581   ! abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
759581   ! PValue =
759582        "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient =
"Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute
T-value" PValue = "P Value";
759583     AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
759584     AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
759585     where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
759586     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 184 observations read from the data set EMWS8.REG7_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS8.REG7_ESTIMATEGRID has 184 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2Z4TA21
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2Z4TA21 new;
MPRINT(EM_DIAGRAM):   run;
759688     proc transpose data=EMWS8.Reg7_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg7_EMESTIMATE out=WORK.TEMPREG;
759689     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
759690     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG7_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 74 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759691     proc transpose data=EMWS8.Reg7_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg7_MAPDS out=WORK.TEMPREG2;
759692     var "GRP_AcceptedCmp52"n--"Year_Birth"n;
MPRINT(EM_DIAGRAM):   var "GRP_AcceptedCmp52"n--"Year_Birth"n;
759693     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG7_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 40 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759694     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
759695     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
759696     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 74 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 74 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759697     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
759698     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
759699     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 40 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759700     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
759701     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
759702     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
759703     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
759704     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 74 observations read from the data set WORK.TEMPREG.
NOTE: There were 40 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 28 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
759705     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
759706     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
759707     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
759708     i=1;
MPRINT(EM_DIAGRAM):   i=1;
759709     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
759710     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
759711     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
759712     output;
MPRINT(EM_DIAGRAM):   output;
759713     end;
MPRINT(EM_DIAGRAM):   end;
759714     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 28 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759715     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
759716     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
759717     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.TEMPREG3.
NOTE: 17 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 11 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
759718     filename emflow
759718   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg7: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759719     *------------------------------------------------------------*;
759720     * Reg7: Scoring DATA data;
759721     *------------------------------------------------------------*;
759722     data EMWS8.Reg7_TRAIN
759723     / view=EMWS8.Reg7_TRAIN
759724     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_TRAIN / view=EMWS8.Reg7_TRAIN ;
759725     set EMWS8.BINNING_TRAIN
759726     ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN ;
759727     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas.
759728    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
759729    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
759730    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
759731    +
759732    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
759733    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
759734    +
759735    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
759736    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
759737    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
759738    +array REG7DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG7DRF [2] $12 _temporary_ ('1' '0' );
759739    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
759740    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
759741    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
759742    +ARRAY REG7DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG7DRU[2] _TEMPORARY_ (1 0);
759743    +
759744    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
759745    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
759746    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
759747    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
759748    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
759749    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759750    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
759751    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
759752    +end;
MPRINT(EM_DIAGRAM):   end;
759753    +else do;
MPRINT(EM_DIAGRAM):   else do;
759754    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
759755    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
759756    +   end;
MPRINT(EM_DIAGRAM):   end;
759757    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
759758    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
759759    +   end;
MPRINT(EM_DIAGRAM):   end;
759760    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759761    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
759762    +   end;
MPRINT(EM_DIAGRAM):   end;
759763    +end;
MPRINT(EM_DIAGRAM):   end;
759764    +
759765    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
759766    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
759767    +
759768    +*** Check Year_Birth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Year_Birth for missing values ;
759769    +if missing( Year_Birth ) then do;
MPRINT(EM_DIAGRAM):   if missing( Year_Birth ) then do;
759770    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759771    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759772    +end;
MPRINT(EM_DIAGRAM):   end;
759773    +
759774    +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
759775    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
759776    +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
759777    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
759778    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759779    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759780    +end;
MPRINT(EM_DIAGRAM):   end;
759781    +else do;
MPRINT(EM_DIAGRAM):   else do;
759782    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759783    +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
759784    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759785    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
759786    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
759787    +   end;
MPRINT(EM_DIAGRAM):   end;
759788    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
759789    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
759790    +   end;
MPRINT(EM_DIAGRAM):   end;
759791    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759792    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
759793    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
759794    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759795    +   end;
MPRINT(EM_DIAGRAM):   end;
759796    +end;
MPRINT(EM_DIAGRAM):   end;
759797    +
759798    +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
759799    +drop _2_0 _2_1 _2_2 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 ;
759800    +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
759801    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
759802    +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
759803    +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
759804    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759805    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759806    +end;
MPRINT(EM_DIAGRAM):   end;
759807    +else do;
MPRINT(EM_DIAGRAM):   else do;
759808    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759809    +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
759810    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759811    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
759812    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
759813    +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
759814    +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
759815    +   end;
MPRINT(EM_DIAGRAM):   end;
759816    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
759817    +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
759818    +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
759819    +      _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
759820    +   end;
MPRINT(EM_DIAGRAM):   end;
759821    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
759822    +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
759823    +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
759824    +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
759825    +   end;
MPRINT(EM_DIAGRAM):   end;
759826    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
759827    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
759828    +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
759829    +      _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
759830    +   end;
MPRINT(EM_DIAGRAM):   end;
759831    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759832    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
759833    +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
759834    +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
759835    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
759836    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759837    +   end;
MPRINT(EM_DIAGRAM):   end;
759838    +end;
MPRINT(EM_DIAGRAM):   end;
759839    +
759840    +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
759841    +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
759842    +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
759843    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
759844    +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
759845    +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
759846    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759847    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759848    +end;
MPRINT(EM_DIAGRAM):   end;
759849    +else do;
MPRINT(EM_DIAGRAM):   else do;
759850    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759851    +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
759852    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759853    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
759854    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
759855    +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
759856    +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
759857    +   end;
MPRINT(EM_DIAGRAM):   end;
759858    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
759859    +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
759860    +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
759861    +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
759862    +   end;
MPRINT(EM_DIAGRAM):   end;
759863    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
759864    +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
759865    +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
759866    +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
759867    +   end;
MPRINT(EM_DIAGRAM):   end;
759868    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
759869    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
759870    +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
759871    +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
759872    +   end;
MPRINT(EM_DIAGRAM):   end;
759873    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759874    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
759875    +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
759876    +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
759877    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
759878    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759879    +   end;
MPRINT(EM_DIAGRAM):   end;
759880    +end;
MPRINT(EM_DIAGRAM):   end;
759881    +
759882    +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
759883    +drop _5_0 _5_1 _5_2 ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 ;
759884    +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
759885    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
759886    +   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
759887    +   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
759888    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759889    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759890    +end;
MPRINT(EM_DIAGRAM):   end;
759891    +else do;
MPRINT(EM_DIAGRAM):   else do;
759892    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759893    +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
759894    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759895    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
759896    +      _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
759897    +      _5_1 = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
759898    +      _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
759899    +   end;
MPRINT(EM_DIAGRAM):   end;
759900    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
759901    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
759902    +      _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
759903    +      _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
759904    +   end;
MPRINT(EM_DIAGRAM):   end;
759905    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
759906    +      _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
759907    +      _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
759908    +      _5_2 = 1;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
759909    +   end;
MPRINT(EM_DIAGRAM):   end;
759910    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
759911    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
759912    +      _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
759913    +      _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
759914    +   end;
MPRINT(EM_DIAGRAM):   end;
759915    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759916    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
759917    +      _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
759918    +      _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
759919    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
759920    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759921    +   end;
MPRINT(EM_DIAGRAM):   end;
759922    +end;
MPRINT(EM_DIAGRAM):   end;
759923    +
759924    +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
759925    +drop _7_0 _7_1 _7_2 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 ;
759926    +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
759927    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
759928    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
759929    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
759930    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759931    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759932    +end;
MPRINT(EM_DIAGRAM):   end;
759933    +else do;
MPRINT(EM_DIAGRAM):   else do;
759934    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759935    +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
759936    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759937    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
759938    +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
759939    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
759940    +      _7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
759941    +   end;
MPRINT(EM_DIAGRAM):   end;
759942    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
759943    +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
759944    +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
759945    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
759946    +   end;
MPRINT(EM_DIAGRAM):   end;
759947    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
759948    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
759949    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
759950    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
759951    +   end;
MPRINT(EM_DIAGRAM):   end;
759952    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
759953    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
759954    +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
759955    +      _7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
759956    +   end;
MPRINT(EM_DIAGRAM):   end;
759957    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759958    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
759959    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
759960    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
759961    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
759962    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759963    +   end;
MPRINT(EM_DIAGRAM):   end;
759964    +end;
MPRINT(EM_DIAGRAM):   end;
759965    +
759966    +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
759967    +drop _8_0 _8_1 _8_2 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 ;
759968    +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
759969    +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
759970    +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
759971    +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
759972    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
759973    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759974    +end;
MPRINT(EM_DIAGRAM):   end;
759975    +else do;
MPRINT(EM_DIAGRAM):   else do;
759976    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
759977    +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
759978    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759979    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
759980    +      _8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
759981    +      _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
759982    +      _8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
759983    +   end;
MPRINT(EM_DIAGRAM):   end;
759984    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
759985    +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
759986    +      _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
759987    +      _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
759988    +   end;
MPRINT(EM_DIAGRAM):   end;
759989    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
759990    +      _8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
759991    +      _8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
759992    +      _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
759993    +   end;
MPRINT(EM_DIAGRAM):   end;
759994    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
759995    +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
759996    +      _8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
759997    +      _8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
759998    +   end;
MPRINT(EM_DIAGRAM):   end;
759999    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760000    +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
760001    +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
760002    +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
760003    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760004    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760005    +   end;
MPRINT(EM_DIAGRAM):   end;
760006    +end;
MPRINT(EM_DIAGRAM):   end;
760007    +
760008    +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
760009    +drop _9_0 _9_1 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 ;
760010    +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
760011    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
760012    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
760013    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760014    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760015    +end;
MPRINT(EM_DIAGRAM):   end;
760016    +else do;
MPRINT(EM_DIAGRAM):   else do;
760017    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760018    +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
760019    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760020    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760021    +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
760022    +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
760023    +   end;
MPRINT(EM_DIAGRAM):   end;
760024    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760025    +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
760026    +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
760027    +   end;
MPRINT(EM_DIAGRAM):   end;
760028    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760029    +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
760030    +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
760031    +   end;
MPRINT(EM_DIAGRAM):   end;
760032    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760033    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
760034    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
760035    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760036    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760037    +   end;
MPRINT(EM_DIAGRAM):   end;
760038    +end;
MPRINT(EM_DIAGRAM):   end;
760039    +
760040    +*** Generate dummy variables for GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumDistPurchases ;
760041    +drop _10_0 _10_1 _10_2 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 ;
760042    +if missing( GRP_NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumDistPurchases ) then do;
760043    +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
760044    +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
760045    +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
760046    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760047    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760048    +end;
MPRINT(EM_DIAGRAM):   end;
760049    +else do;
MPRINT(EM_DIAGRAM):   else do;
760050    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760051    +   _dm12 = put( GRP_NumDistPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumDistPurchases , BEST12. );
760052    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760053    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760054    +      _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
760055    +      _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
760056    +      _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
760057    +   end;
MPRINT(EM_DIAGRAM):   end;
760058    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760059    +      _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
760060    +      _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
760061    +      _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
760062    +   end;
MPRINT(EM_DIAGRAM):   end;
760063    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760064    +      _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
760065    +      _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
760066    +      _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
760067    +   end;
MPRINT(EM_DIAGRAM):   end;
760068    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760069    +      _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
760070    +      _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
760071    +      _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
760072    +   end;
MPRINT(EM_DIAGRAM):   end;
760073    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760074    +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
760075    +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
760076    +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
760077    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760078    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760079    +   end;
MPRINT(EM_DIAGRAM):   end;
760080    +end;
MPRINT(EM_DIAGRAM):   end;
760081    +
760082    +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
760083    +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
760084    +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
760085    +   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
760086    +   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
760087    +   _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
760088    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760089    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760090    +end;
MPRINT(EM_DIAGRAM):   end;
760091    +else do;
MPRINT(EM_DIAGRAM):   else do;
760092    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760093    +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
760094    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760095    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760096    +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
760097    +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
760098    +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
760099    +   end;
MPRINT(EM_DIAGRAM):   end;
760100    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760101    +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
760102    +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
760103    +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
760104    +   end;
MPRINT(EM_DIAGRAM):   end;
760105    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760106    +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
760107    +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
760108    +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
760109    +   end;
MPRINT(EM_DIAGRAM):   end;
760110    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760111    +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
760112    +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
760113    +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
760114    +   end;
MPRINT(EM_DIAGRAM):   end;
760115    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760116    +      _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
760117    +      _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
760118    +      _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
760119    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760120    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760121    +   end;
MPRINT(EM_DIAGRAM):   end;
760122    +end;
MPRINT(EM_DIAGRAM):   end;
760123    +
760124    +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
760125    +drop _14_0 _14_1 _14_2 ;
MPRINT(EM_DIAGRAM):   drop _14_0 _14_1 _14_2 ;
760126    +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
760127    +   _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
760128    +   _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
760129    +   _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
760130    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760131    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760132    +end;
MPRINT(EM_DIAGRAM):   end;
760133    +else do;
MPRINT(EM_DIAGRAM):   else do;
760134    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760135    +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
760136    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760137    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760138    +      _14_0 = -1;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
760139    +      _14_1 = -1;
MPRINT(EM_DIAGRAM):   _14_1 = -1;
760140    +      _14_2 = -1;
MPRINT(EM_DIAGRAM):   _14_2 = -1;
760141    +   end;
MPRINT(EM_DIAGRAM):   end;
760142    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760143    +      _14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
760144    +      _14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
760145    +      _14_2 = 1;
MPRINT(EM_DIAGRAM):   _14_2 = 1;
760146    +   end;
MPRINT(EM_DIAGRAM):   end;
760147    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760148    +      _14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
760149    +      _14_1 = 1;
MPRINT(EM_DIAGRAM):   _14_1 = 1;
760150    +      _14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
760151    +   end;
MPRINT(EM_DIAGRAM):   end;
760152    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760153    +      _14_0 = 1;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
760154    +      _14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
760155    +      _14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
760156    +   end;
MPRINT(EM_DIAGRAM):   end;
760157    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760158    +      _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
760159    +      _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
760160    +      _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
760161    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760162    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760163    +   end;
MPRINT(EM_DIAGRAM):   end;
760164    +end;
MPRINT(EM_DIAGRAM):   end;
760165    +
760166    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
760167    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
760168    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
760169    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
760170    +   goto REG7DR1;
MPRINT(EM_DIAGRAM):   goto REG7DR1;
760171    +end;
MPRINT(EM_DIAGRAM):   end;
760172    +
760173    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
760174    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
760175    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
760176    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
760177    +
760178    +***  Effect: GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmp5 ;
760179    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760180    +_LP0 = _LP0 + (    -0.5862337869734) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.5862337869734) * _TEMP * _1_0;
760181    +
760182    +***  Effect: GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Frq ;
760183    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760184    +_LP0 = _LP0 + (     1.0565693238421) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.0565693238421) * _TEMP * _2_0;
760185    +_LP0 = _LP0 + (     0.0911336121088) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0911336121088) * _TEMP * _2_1;
760186    +_LP0 = _LP0 + (   -0.37448220273968) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.37448220273968) * _TEMP * _2_2;
760187    +
760188    +***  Effect: GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Income ;
760189    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760190    +_LP0 = _LP0 + (    0.51658584340625) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.51658584340625) * _TEMP * _3_0;
760191    +_LP0 = _LP0 + (    0.48505772489262) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.48505772489262) * _TEMP * _3_1;
760192    +_LP0 = _LP0 + (   -0.50854630566525) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.50854630566525) * _TEMP * _3_2;
760193    +
760194    +***  Effect: GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntFishProducts ;
760195    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760196    +_LP0 = _LP0 + (    0.38994498659965) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38994498659965) * _TEMP * _5_0;
760197    +_LP0 = _LP0 + (    0.03146325606998) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03146325606998) * _TEMP * _5_1;
760198    +_LP0 = _LP0 + (   -0.05372169204837) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05372169204837) * _TEMP * _5_2;
760199    +
760200    +***  Effect: GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntMeatProducts ;
760201    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760202    +_LP0 = _LP0 + (   -0.79733877870259) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79733877870259) * _TEMP * _7_0;
760203    +_LP0 = _LP0 + (   -0.15003183676105) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15003183676105) * _TEMP * _7_1;
760204    +_LP0 = _LP0 + (    0.31191597751128) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.31191597751128) * _TEMP * _7_2;
760205    +
760206    +***  Effect: GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntWines ;
760207    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760208    +_LP0 = _LP0 + (    0.53434964580952) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53434964580952) * _TEMP * _8_0;
760209    +_LP0 = _LP0 + (    0.22167667253067) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.22167667253067) * _TEMP * _8_1;
760210    +_LP0 = _LP0 + (     -0.305489910536) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.305489910536) * _TEMP * _8_2;
760211    +
760212    +***  Effect: GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumCatalogPurchases ;
760213    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760214    +_LP0 = _LP0 + (     -0.629899271763) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.629899271763) * _TEMP * _9_0;
760215    +_LP0 = _LP0 + (    0.03240844395355) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03240844395355) * _TEMP * _9_1;
760216    +
760217    +***  Effect: GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumDistPurchases ;
760218    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760219    +_LP0 = _LP0 + (   -1.42622019893988) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.42622019893988) * _TEMP * _10_0;
760220    +_LP0 = _LP0 + (    0.05466498093201) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05466498093201) * _TEMP * _10_1;
760221    +_LP0 = _LP0 + (    0.25182489000571) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.25182489000571) * _TEMP * _10_2;
760222    +
760223    +***  Effect: GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_RMntFrq ;
760224    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760225    +_LP0 = _LP0 + (   -0.14979245852204) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14979245852204) * _TEMP * _13_0;
760226    +_LP0 = _LP0 + (     0.0056028143187) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0056028143187) * _TEMP * _13_1;
760227    +_LP0 = _LP0 + (   -0.23315930182624) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23315930182624) * _TEMP * _13_2;
760228    +
760229    +***  Effect: GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Recency ;
760230    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760231    +_LP0 = _LP0 + (    1.06974976023651) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.06974976023651) * _TEMP * _14_0;
760232    +_LP0 = _LP0 + (    0.29139327664531) * _TEMP * _14_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.29139327664531) * _TEMP * _14_1;
760233    +_LP0 = _LP0 + (   -0.34742570667526) * _TEMP * _14_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.34742570667526) * _TEMP * _14_2;
760234    +
760235    +***  Effect: Year_Birth ;
MPRINT(EM_DIAGRAM):   *** Effect: Year_Birth ;
760236    +_TEMP = Year_Birth ;
MPRINT(EM_DIAGRAM):   _TEMP = Year_Birth ;
760237    +_LP0 = _LP0 + (    0.01045707390649 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01045707390649 * _TEMP);
760238    +
760239    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
760240    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
760241    +_P0 = probnorm((   -21.5603180840073) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -21.5603180840073) + _LP0);
760242    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
760243    +
760244    +REG7DR1:
760245    +
760246    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG7DR1: *** Residuals;
760247    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
760248    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
760249    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
760250    +end;
MPRINT(EM_DIAGRAM):   end;
760251    +else do;
MPRINT(EM_DIAGRAM):   else do;
760252    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
760253    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
760254    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
760255    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
760256    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
760257    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
760258    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
760259    +   end;
MPRINT(EM_DIAGRAM):   end;
760260    +end;
MPRINT(EM_DIAGRAM):   end;
760261    +
760262    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
760263    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
760264    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
760265    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
760266    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
760267    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
760268    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
760269    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
760270    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
760271    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
760272    +end;
MPRINT(EM_DIAGRAM):   end;
760273    +I_DepVar = REG7DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG7DRF[_IY];
760274    +U_DepVar = REG7DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG7DRU[_IY];
760275    +
760276    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
760277    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
760278    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
760279     run;
 
NOTE: DATA STEP view saved on file EMWS8.REG7_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
760280     quit;
760281     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
760282     filename emflow
760282   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg7: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
760283     *------------------------------------------------------------*;
760284     * Reg7: Scoring VALIDATE data;
760285     *------------------------------------------------------------*;
760286     data EMWS8.Reg7_VALIDATE
760287     / view=EMWS8.Reg7_VALIDATE
760288     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_VALIDATE / view=EMWS8.Reg7_VALIDATE ;
760289     set EMWS8.BINNING_VALIDATE
760290     ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_VALIDATE ;
760291     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMFLOWSCORE.sas.
760292    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
760293    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
760294    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
760295    +
760296    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
760297    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
760298    +
760299    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
760300    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
760301    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
760302    +array REG7DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG7DRF [2] $12 _temporary_ ('1' '0' );
760303    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
760304    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
760305    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
760306    +ARRAY REG7DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG7DRU[2] _TEMPORARY_ (1 0);
760307    +
760308    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
760309    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
760310    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
760311    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
760312    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
760313    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760314    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
760315    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
760316    +end;
MPRINT(EM_DIAGRAM):   end;
760317    +else do;
MPRINT(EM_DIAGRAM):   else do;
760318    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
760319    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
760320    +   end;
MPRINT(EM_DIAGRAM):   end;
760321    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
760322    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
760323    +   end;
MPRINT(EM_DIAGRAM):   end;
760324    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760325    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
760326    +   end;
MPRINT(EM_DIAGRAM):   end;
760327    +end;
MPRINT(EM_DIAGRAM):   end;
760328    +
760329    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
760330    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
760331    +
760332    +*** Check Year_Birth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Year_Birth for missing values ;
The SAS System
 
760333    +if missing( Year_Birth ) then do;
MPRINT(EM_DIAGRAM):   if missing( Year_Birth ) then do;
760334    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760335    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760336    +end;
MPRINT(EM_DIAGRAM):   end;
760337    +
760338    +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
760339    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
760340    +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
760341    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
760342    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760343    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760344    +end;
MPRINT(EM_DIAGRAM):   end;
760345    +else do;
MPRINT(EM_DIAGRAM):   else do;
760346    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760347    +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
760348    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760349    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
760350    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
760351    +   end;
MPRINT(EM_DIAGRAM):   end;
760352    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760353    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
760354    +   end;
MPRINT(EM_DIAGRAM):   end;
760355    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760356    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
760357    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760358    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760359    +   end;
MPRINT(EM_DIAGRAM):   end;
760360    +end;
MPRINT(EM_DIAGRAM):   end;
760361    +
760362    +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
760363    +drop _2_0 _2_1 _2_2 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 ;
760364    +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
760365    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
760366    +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
760367    +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
760368    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760369    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760370    +end;
MPRINT(EM_DIAGRAM):   end;
760371    +else do;
MPRINT(EM_DIAGRAM):   else do;
760372    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760373    +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
760374    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760375    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760376    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
760377    +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
760378    +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
760379    +   end;
MPRINT(EM_DIAGRAM):   end;
760380    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760381    +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
760382    +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
760383    +      _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
760384    +   end;
MPRINT(EM_DIAGRAM):   end;
760385    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760386    +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
760387    +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
760388    +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
760389    +   end;
MPRINT(EM_DIAGRAM):   end;
760390    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760391    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
760392    +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
760393    +      _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
760394    +   end;
MPRINT(EM_DIAGRAM):   end;
760395    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760396    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
760397    +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
760398    +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
760399    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760400    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760401    +   end;
MPRINT(EM_DIAGRAM):   end;
760402    +end;
MPRINT(EM_DIAGRAM):   end;
760403    +
760404    +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
760405    +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
760406    +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
760407    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
760408    +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
760409    +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
760410    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760411    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760412    +end;
MPRINT(EM_DIAGRAM):   end;
760413    +else do;
MPRINT(EM_DIAGRAM):   else do;
760414    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760415    +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
760416    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760417    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760418    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
760419    +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
760420    +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
760421    +   end;
MPRINT(EM_DIAGRAM):   end;
760422    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760423    +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
760424    +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
760425    +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
760426    +   end;
MPRINT(EM_DIAGRAM):   end;
760427    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760428    +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
760429    +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
760430    +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
760431    +   end;
MPRINT(EM_DIAGRAM):   end;
760432    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760433    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
760434    +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
760435    +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
760436    +   end;
MPRINT(EM_DIAGRAM):   end;
760437    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760438    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
760439    +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
760440    +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
760441    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760442    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760443    +   end;
MPRINT(EM_DIAGRAM):   end;
760444    +end;
MPRINT(EM_DIAGRAM):   end;
760445    +
760446    +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
760447    +drop _5_0 _5_1 _5_2 ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 ;
760448    +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
760449    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
760450    +   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
760451    +   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
760452    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760453    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760454    +end;
MPRINT(EM_DIAGRAM):   end;
760455    +else do;
MPRINT(EM_DIAGRAM):   else do;
760456    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760457    +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
760458    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760459    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760460    +      _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
760461    +      _5_1 = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
760462    +      _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
760463    +   end;
MPRINT(EM_DIAGRAM):   end;
760464    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760465    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
760466    +      _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
760467    +      _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
760468    +   end;
MPRINT(EM_DIAGRAM):   end;
760469    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760470    +      _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
760471    +      _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
760472    +      _5_2 = 1;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
760473    +   end;
MPRINT(EM_DIAGRAM):   end;
760474    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760475    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
760476    +      _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
760477    +      _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
760478    +   end;
MPRINT(EM_DIAGRAM):   end;
760479    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760480    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
760481    +      _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
760482    +      _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
760483    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760484    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760485    +   end;
MPRINT(EM_DIAGRAM):   end;
760486    +end;
MPRINT(EM_DIAGRAM):   end;
760487    +
760488    +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
760489    +drop _7_0 _7_1 _7_2 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 ;
760490    +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
760491    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
760492    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
760493    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
760494    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760495    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760496    +end;
MPRINT(EM_DIAGRAM):   end;
760497    +else do;
MPRINT(EM_DIAGRAM):   else do;
760498    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760499    +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
760500    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760501    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760502    +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
760503    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
760504    +      _7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
760505    +   end;
MPRINT(EM_DIAGRAM):   end;
760506    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760507    +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
760508    +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
760509    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
760510    +   end;
MPRINT(EM_DIAGRAM):   end;
760511    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760512    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
760513    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
760514    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
760515    +   end;
MPRINT(EM_DIAGRAM):   end;
760516    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760517    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
760518    +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
760519    +      _7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
760520    +   end;
MPRINT(EM_DIAGRAM):   end;
760521    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760522    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
760523    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
760524    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
760525    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760526    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760527    +   end;
MPRINT(EM_DIAGRAM):   end;
760528    +end;
MPRINT(EM_DIAGRAM):   end;
760529    +
760530    +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
760531    +drop _8_0 _8_1 _8_2 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 ;
760532    +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
760533    +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
760534    +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
760535    +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
760536    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760537    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760538    +end;
MPRINT(EM_DIAGRAM):   end;
760539    +else do;
MPRINT(EM_DIAGRAM):   else do;
760540    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760541    +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
760542    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760543    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760544    +      _8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
760545    +      _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
760546    +      _8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
760547    +   end;
MPRINT(EM_DIAGRAM):   end;
760548    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760549    +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
760550    +      _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
760551    +      _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
760552    +   end;
MPRINT(EM_DIAGRAM):   end;
760553    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760554    +      _8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
760555    +      _8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
760556    +      _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
760557    +   end;
MPRINT(EM_DIAGRAM):   end;
760558    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760559    +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
760560    +      _8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
760561    +      _8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
760562    +   end;
MPRINT(EM_DIAGRAM):   end;
760563    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760564    +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
760565    +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
760566    +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
760567    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760568    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760569    +   end;
MPRINT(EM_DIAGRAM):   end;
760570    +end;
MPRINT(EM_DIAGRAM):   end;
760571    +
760572    +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
760573    +drop _9_0 _9_1 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 ;
760574    +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
760575    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
760576    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
760577    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760578    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760579    +end;
MPRINT(EM_DIAGRAM):   end;
760580    +else do;
MPRINT(EM_DIAGRAM):   else do;
760581    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760582    +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
760583    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760584    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760585    +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
760586    +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
760587    +   end;
MPRINT(EM_DIAGRAM):   end;
760588    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760589    +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
760590    +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
760591    +   end;
MPRINT(EM_DIAGRAM):   end;
760592    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760593    +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
760594    +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
760595    +   end;
MPRINT(EM_DIAGRAM):   end;
760596    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760597    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
760598    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
760599    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760600    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760601    +   end;
MPRINT(EM_DIAGRAM):   end;
760602    +end;
MPRINT(EM_DIAGRAM):   end;
760603    +
760604    +*** Generate dummy variables for GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumDistPurchases ;
760605    +drop _10_0 _10_1 _10_2 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 ;
760606    +if missing( GRP_NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumDistPurchases ) then do;
760607    +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
760608    +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
760609    +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
760610    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760611    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760612    +end;
MPRINT(EM_DIAGRAM):   end;
760613    +else do;
MPRINT(EM_DIAGRAM):   else do;
760614    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760615    +   _dm12 = put( GRP_NumDistPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumDistPurchases , BEST12. );
760616    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760617    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760618    +      _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
760619    +      _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
760620    +      _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
760621    +   end;
MPRINT(EM_DIAGRAM):   end;
760622    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760623    +      _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
760624    +      _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
760625    +      _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
760626    +   end;
MPRINT(EM_DIAGRAM):   end;
760627    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760628    +      _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
760629    +      _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
760630    +      _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
760631    +   end;
MPRINT(EM_DIAGRAM):   end;
760632    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760633    +      _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
760634    +      _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
760635    +      _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
760636    +   end;
MPRINT(EM_DIAGRAM):   end;
760637    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760638    +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
760639    +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
760640    +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
760641    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760642    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760643    +   end;
MPRINT(EM_DIAGRAM):   end;
760644    +end;
MPRINT(EM_DIAGRAM):   end;
760645    +
760646    +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
760647    +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
760648    +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
760649    +   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
760650    +   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
760651    +   _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
760652    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760653    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760654    +end;
MPRINT(EM_DIAGRAM):   end;
760655    +else do;
MPRINT(EM_DIAGRAM):   else do;
760656    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760657    +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
760658    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760659    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
760660    +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
760661    +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
760662    +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
760663    +   end;
MPRINT(EM_DIAGRAM):   end;
760664    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
760665    +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
760666    +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
760667    +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
760668    +   end;
MPRINT(EM_DIAGRAM):   end;
760669    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760670    +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
760671    +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
760672    +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
760673    +   end;
MPRINT(EM_DIAGRAM):   end;
760674    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760675    +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
760676    +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
760677    +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
760678    +   end;
MPRINT(EM_DIAGRAM):   end;
760679    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760680    +      _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
760681    +      _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
760682    +      _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
760683    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760684    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760685    +   end;
MPRINT(EM_DIAGRAM):   end;
760686    +end;
MPRINT(EM_DIAGRAM):   end;
760687    +
760688    +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
760689    +drop _14_0 _14_1 _14_2 ;
MPRINT(EM_DIAGRAM):   drop _14_0 _14_1 _14_2 ;
760690    +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
760691    +   _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
760692    +   _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
760693    +   _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
760694    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
760695    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760696    +end;
MPRINT(EM_DIAGRAM):   end;
760697    +else do;
MPRINT(EM_DIAGRAM):   else do;
760698    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
760699    +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
760700    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760701    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
760702    +      _14_0 = -1;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
760703    +      _14_1 = -1;
MPRINT(EM_DIAGRAM):   _14_1 = -1;
760704    +      _14_2 = -1;
MPRINT(EM_DIAGRAM):   _14_2 = -1;
760705    +   end;
MPRINT(EM_DIAGRAM):   end;
760706    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
760707    +      _14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
760708    +      _14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
760709    +      _14_2 = 1;
MPRINT(EM_DIAGRAM):   _14_2 = 1;
760710    +   end;
MPRINT(EM_DIAGRAM):   end;
760711    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
760712    +      _14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
760713    +      _14_1 = 1;
MPRINT(EM_DIAGRAM):   _14_1 = 1;
760714    +      _14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
760715    +   end;
MPRINT(EM_DIAGRAM):   end;
760716    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
760717    +      _14_0 = 1;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
760718    +      _14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
760719    +      _14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
760720    +   end;
MPRINT(EM_DIAGRAM):   end;
760721    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760722    +      _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
760723    +      _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
760724    +      _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
760725    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
760726    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
760727    +   end;
MPRINT(EM_DIAGRAM):   end;
760728    +end;
MPRINT(EM_DIAGRAM):   end;
760729    +
760730    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
760731    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
760732    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
760733    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
760734    +   goto REG7DR1;
MPRINT(EM_DIAGRAM):   goto REG7DR1;
760735    +end;
MPRINT(EM_DIAGRAM):   end;
760736    +
760737    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
760738    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
760739    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
760740    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
760741    +
760742    +***  Effect: GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmp5 ;
760743    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760744    +_LP0 = _LP0 + (    -0.5862337869734) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.5862337869734) * _TEMP * _1_0;
760745    +
760746    +***  Effect: GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Frq ;
760747    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760748    +_LP0 = _LP0 + (     1.0565693238421) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.0565693238421) * _TEMP * _2_0;
760749    +_LP0 = _LP0 + (     0.0911336121088) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0911336121088) * _TEMP * _2_1;
760750    +_LP0 = _LP0 + (   -0.37448220273968) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.37448220273968) * _TEMP * _2_2;
760751    +
760752    +***  Effect: GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Income ;
760753    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760754    +_LP0 = _LP0 + (    0.51658584340625) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.51658584340625) * _TEMP * _3_0;
760755    +_LP0 = _LP0 + (    0.48505772489262) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.48505772489262) * _TEMP * _3_1;
760756    +_LP0 = _LP0 + (   -0.50854630566525) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.50854630566525) * _TEMP * _3_2;
760757    +
760758    +***  Effect: GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntFishProducts ;
760759    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760760    +_LP0 = _LP0 + (    0.38994498659965) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38994498659965) * _TEMP * _5_0;
760761    +_LP0 = _LP0 + (    0.03146325606998) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03146325606998) * _TEMP * _5_1;
760762    +_LP0 = _LP0 + (   -0.05372169204837) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05372169204837) * _TEMP * _5_2;
760763    +
760764    +***  Effect: GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntMeatProducts ;
760765    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760766    +_LP0 = _LP0 + (   -0.79733877870259) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79733877870259) * _TEMP * _7_0;
760767    +_LP0 = _LP0 + (   -0.15003183676105) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15003183676105) * _TEMP * _7_1;
760768    +_LP0 = _LP0 + (    0.31191597751128) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.31191597751128) * _TEMP * _7_2;
760769    +
760770    +***  Effect: GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntWines ;
760771    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760772    +_LP0 = _LP0 + (    0.53434964580952) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53434964580952) * _TEMP * _8_0;
760773    +_LP0 = _LP0 + (    0.22167667253067) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.22167667253067) * _TEMP * _8_1;
760774    +_LP0 = _LP0 + (     -0.305489910536) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.305489910536) * _TEMP * _8_2;
760775    +
760776    +***  Effect: GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumCatalogPurchases ;
760777    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760778    +_LP0 = _LP0 + (     -0.629899271763) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.629899271763) * _TEMP * _9_0;
760779    +_LP0 = _LP0 + (    0.03240844395355) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03240844395355) * _TEMP * _9_1;
760780    +
760781    +***  Effect: GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumDistPurchases ;
760782    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760783    +_LP0 = _LP0 + (   -1.42622019893988) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.42622019893988) * _TEMP * _10_0;
760784    +_LP0 = _LP0 + (    0.05466498093201) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05466498093201) * _TEMP * _10_1;
760785    +_LP0 = _LP0 + (    0.25182489000571) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.25182489000571) * _TEMP * _10_2;
760786    +
760787    +***  Effect: GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_RMntFrq ;
760788    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760789    +_LP0 = _LP0 + (   -0.14979245852204) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14979245852204) * _TEMP * _13_0;
760790    +_LP0 = _LP0 + (     0.0056028143187) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0056028143187) * _TEMP * _13_1;
760791    +_LP0 = _LP0 + (   -0.23315930182624) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23315930182624) * _TEMP * _13_2;
760792    +
760793    +***  Effect: GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Recency ;
760794    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
760795    +_LP0 = _LP0 + (    1.06974976023651) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.06974976023651) * _TEMP * _14_0;
760796    +_LP0 = _LP0 + (    0.29139327664531) * _TEMP * _14_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.29139327664531) * _TEMP * _14_1;
760797    +_LP0 = _LP0 + (   -0.34742570667526) * _TEMP * _14_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.34742570667526) * _TEMP * _14_2;
760798    +
760799    +***  Effect: Year_Birth ;
MPRINT(EM_DIAGRAM):   *** Effect: Year_Birth ;
760800    +_TEMP = Year_Birth ;
MPRINT(EM_DIAGRAM):   _TEMP = Year_Birth ;
760801    +_LP0 = _LP0 + (    0.01045707390649 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01045707390649 * _TEMP);
760802    +
760803    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
760804    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
760805    +_P0 = probnorm((   -21.5603180840073) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -21.5603180840073) + _LP0);
760806    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
760807    +
760808    +REG7DR1:
760809    +
760810    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG7DR1: *** Residuals;
760811    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
760812    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
760813    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
760814    +end;
MPRINT(EM_DIAGRAM):   end;
760815    +else do;
MPRINT(EM_DIAGRAM):   else do;
760816    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
760817    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
760818    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
760819    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
760820    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
760821    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
760822    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
760823    +   end;
MPRINT(EM_DIAGRAM):   end;
760824    +end;
MPRINT(EM_DIAGRAM):   end;
760825    +
760826    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
760827    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
760828    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
760829    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
760830    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
760831    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
760832    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
760833    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
760834    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
760835    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
760836    +end;
MPRINT(EM_DIAGRAM):   end;
760837    +I_DepVar = REG7DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG7DRF[_IY];
760838    +U_DepVar = REG7DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG7DRU[_IY];
760839    +
760840    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
760841    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
760842    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
760843     run;
 
NOTE: DATA STEP view saved on file EMWS8.REG7_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
760844     quit;
760845     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
760846     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
760847     * Reg7: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg7: Computing metadata for TRAIN data;
760848     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.REG7_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg7_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg7_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg7_TRAIN out=WORK.M20X7YGE noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M20X7YGE;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M20X7YGE(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M20X7YGE;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M20X7YGE;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1XXD7VO NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RZ4XCX(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XXD7VO;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg7";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg7";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg7";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg7: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'GRP_ACCEPTEDCMP5' 'GRP_FRQ' 'GRP_INCOME'
'GRP_MNTFISHPRODUCTS' 'GRP_MNTMEATPRODUCTS' 'GRP_MNTWINES' 'GRP_NUMCATALOGPURCHASES'
'GRP_NUMDISTPURCHASES' 'GRP_RMNTFRQ' 'GRP_RECENCY' 'YEAR_BIRTH' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg7: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
761179     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
761180     set EMWS8.Reg7_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMINFO;
761181     where DATA='Reg7' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg7' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
761182     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.REG7_EMINFO.
      WHERE (DATA='Reg7') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
761183     data EMWS8.Reg7_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMINFO;
761184     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
761185     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
761186     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.REG7_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
761190     run;
761191     data EMWS8.Reg7_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMINFO;
761192     set EMWS8.Reg7_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMINFO WORK.MODELTEMP_INFO;
761193     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG7_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG7_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761194     proc sort data = EMWS8.Reg7_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg7_EMINFO NOTHREADS;
761195     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
761196     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG7_EMINFO.
NOTE: The data set EMWS8.REG7_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
761197     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
761198     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
761199     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761200     proc sort data = EMWS8.Reg7_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg7_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
761201     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
761202     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG7_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761203     data EMWS8.Reg7_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMINFO;
761204     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
761205     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
761206     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG7_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
761207     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
761208     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
761209     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
761210     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.REG7_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS8.REG7_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2SDUXMY
"C:\\predictive-models-project\Workspaces\EMWS8\Reg7\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2SDUXMY new;
MPRINT(EM_DIAGRAM):   run;
761234     data EMWS8.Reg7_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMOUTFIT;
761235     length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
761236     set EMWS8.Reg7_EMESTIMATE end=eof;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMESTIMATE end=eof;
761237     where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
761238     drop _STEP_--Year_Birth;
MPRINT(EM_DIAGRAM):   drop _STEP_--Year_Birth;
761239     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
761240     TARGET = "DepVar";
MPRINT(EM_DIAGRAM):   TARGET = "DepVar";
761241     output;
MPRINT(EM_DIAGRAM):   output;
761242     end;
MPRINT(EM_DIAGRAM):   end;
761243     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS8.REG7_EMESTIMATE.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS8.REG7_EMOUTFIT has 1 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761244     data EMWS8.Reg7_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMOUTFIT;
761245     set EMWS8.Reg7_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMOUTFIT;
761246     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
761247     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
761247   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
761248     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
761249     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG7_EMOUTFIT.
NOTE: The data set EMWS8.REG7_EMOUTFIT has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761250     proc sort data=EMWS8.Reg7_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Reg7_EMREPORTFIT nothreads;
761251     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
761252     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS8.REG7_EMREPORTFIT.
NOTE: The data set EMWS8.REG7_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761253     %let _EMwarndup = 0;
761254     %let _EMtargetdup =;
761255     %let _EMASEtargetdup =;
761256     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
761257     set EMWS8.Reg7_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMOUTFIT;
761258     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
761259     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
761260     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
761261     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
761262     end;
MPRINT(EM_DIAGRAM):   end;
761263     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG7_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761264     proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
761265     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
761266     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set EMWS8.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 50 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761267     proc sort data=EMWS8.Reg7_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg7_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
761268     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
761269     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set EMWS8.REG7_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 48 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
761270     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
761271     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
761272     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
761273     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 48 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 50 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
761274     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
761275     set EMWS8.Reg7_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_CMeta_TRAIN;
761276     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
761276   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
761277     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG7_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
761278     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
761279     set EMWS8.Reg7_TRAIN(keep=
761280     F_DepVar
761281     I_DepVar
761282     P_DepVar0
761283     P_DepVar1
761284     R_DepVar0
761285     R_DepVar1
761286     U_DepVar
761287     _WARN_
761288     DepVar
761289     );
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
761290     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.REG7_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.REG7_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Reg7_25JZ_OH nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg7_25JZ_OH;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg7_25JZ_OH(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg7_25JZ_OH;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg7_25JZ_OH;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 4.7541361E-9 OVLMAX 0.9864870784 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
765556     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
765557     set EMWS8.Reg7_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_CMeta_TRAIN;
765558     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
765558   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
765559     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG7_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
765560     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
765561     set EMWS8.Reg7_VALIDATE(keep=
765562     F_DepVar
765563     I_DepVar
765564     P_DepVar0
765565     P_DepVar1
765566     R_DepVar0
765567     R_DepVar1
765568     U_DepVar
765569     _WARN_
765570     DepVar
765571     );
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
765572     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.REG7_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.BINNING_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.REG7_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Reg7_2Q2GZX4 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg7_2Q2GZX4;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg7_2Q2GZX4(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMCLASSIFICATION WORK.Reg7_2Q2GZX4;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg7_2Q2GZX4;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg7_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 5.8816328E-8 OVLMAX 0.9853628583 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
769847     %let _cn = %sysfunc(getoption(CENTER));
769848     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
769849     proc print data=EMWS8.Reg7_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg7_EMREPORTFIT noobs label;
769850     var STAT LABEL TRAIN
769851     VALIDATE
769852     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
769853     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
769854     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
769855     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
769856     run;
 
NOTE: There were 20 observations read from the data set EMWS8.REG7_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 855.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
769857     title10;
MPRINT(EM_DIAGRAM):   title10;
769858     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
769859     proc sort data=EMWS8.Reg7_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Reg7_EMCLASSIFICATION nothreads;
769860     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
769861     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG7_EMCLASSIFICATION.
NOTE: The data set EMWS8.REG7_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
769862     %let _cn = %sysfunc(getoption(CENTER));
769863     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
769864     proc print data=EMWS8.Reg7_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg7_EMCLASSIFICATION noobs label;
769865     var from into pct_row pct_col count percent
769866     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
769867     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
769868     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
769869     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
769870     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
769871     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
769872     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
769873     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
769874     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
769875     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
769876     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
769877     run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG7_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 856.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
769878     title9;
MPRINT(EM_DIAGRAM):   title9;
769879     title10;
MPRINT(EM_DIAGRAM):   title10;
769880     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
769881     %let _cn = %sysfunc(getoption(CENTER));
769882     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
769883     data EMWS8.Reg7_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg7_EMEVENTREPORT;
769884     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
769884   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
769885     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
769885   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
769885   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
769885   ! FALSEEVENT
769886     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
769886   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
769886   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
769887        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
769888     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
769889     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
769890     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
769891     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
769892     set EMWS8.Reg7_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg7_EMEVENTREPORT;
769893     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG7_EMEVENTREPORT.
NOTE: The data set EMWS8.REG7_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
769894     proc print data=EMWS8.Reg7_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg7_EMEVENTREPORT noobs label;
769895     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
769896     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
769897     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
769898     run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG7_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 857.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
769899     title10;
MPRINT(EM_DIAGRAM):   title10;
769900     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
769901     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
769902     modify Reg7_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg7_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
769903     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
769904     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
769904   ! ;
MPRINT(EM_DIAGRAM):   run;
769905     run;
 
NOTE: MODIFY was successful for EMWS8.REG7_EMRANK.DATA.
769906     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
769907     %let _cn = %sysfunc(getoption(CENTER));
769908     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
769909     proc print data=EMWS8.Reg7_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg7_EMRANK label noobs;
769910     var
769911     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
769912     by
769913     notsorted DATAROLE
769914     notsorted TARGET
769915     notsorted TARGETLABEL
769916     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
769917     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
769918     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
769919     run;
 
NOTE: There were 40 observations read from the data set EMWS8.REG7_EMRANK.
NOTE: The PROCEDURE PRINT printed page 858.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
769920     title10;
MPRINT(EM_DIAGRAM):   title10;
769921     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
769922     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
769923     modify Reg7_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg7_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
769924     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
769924   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
769925     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
769925   ! ;
MPRINT(EM_DIAGRAM):   run;
769926     run;
 
NOTE: MODIFY was successful for EMWS8.REG7_EMSCOREDIST.DATA.
769927     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg7_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
