*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                12.22 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                12.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0NXLT1W
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0NXLT1W new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.22 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.22 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
(FREQ=(WHERE='ROLE = "FREQ"' DEFAULT='Y' RULE=(RULE1=(DESCRIPTION='USEATMOST1FREQ'
VALUES=(VALUE1='Y' )[92565] MAX=1 EXCEEDMAXVALUE='' )[92561] )[92567]
VALIDCHOICES=(CHOICE1='Y' )[92569] )[92067] INPUTREJECT=(WHERE='ROLE in("INPUT", "REJECTED")'
DEFAULT='D' VALIDCHOICES=(CHOICE1='D' )[92563]
RULE=(RULE1=(DESCRIPTION='USEATLEAST1INPUTREJECT' WHERE='(ROLE = "INPUT" and USE in("Y" "D"))
or (ROLE = "REJECTED" and USE = "Y")' MIN=. )[92545] )[92547] )[92559] TARGET=(WHERE='ROLE =
"TARGET"' DEFAULT='Y' VALIDCHOICES=(CHOICE1='Y' CHOICE2='N' )[92555]
RULE=(RULE1=(DESCRIPTION='METADATA.USE1TARGET' VALUES=(VALUE1='Y' )[92549] MIN=1 MAX=1
EXCEEDMAXVALUE='N' )[92551] )[92553] )[92557] )[91267]
1072802    proc freq data=EMWS8.Ensmbl53_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Ensmbl53_VariableSet noprint;
1072803    table ROLE*LEVEL/out=WORK.Ensmbl53META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Ensmbl53META;
1072804    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS8.ENSMBL53_VARIABLESET.
NOTE: The data set WORK.ENSMBL53META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1072805    proc print data=WORK.Ensmbl53META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl53META label noobs;
1072806    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1072807    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1072807  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1072807  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1072808    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1072809    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1072810    run;
 
NOTE: There were 3 observations read from the data set WORK.ENSMBL53META.
NOTE: The PROCEDURE PRINT printed page 54.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072811    title10;
MPRINT(EM_DIAGRAM):   title10;
1072812    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.AutoNeural29_TRAIN EMWS8.AutoNeural29_TRAIN
EMWS8.AutoNeural29_TRAIN EMWS8.AutoNeural29_TRAIN EMWS8 AutoNeural29_TRAIN
EMWS8.AutoNeural29_TRAIN EMWS8.AutoNeural29_TRAIN
EMWS8.AutoNeural29_TRAIN EMWS8.AutoNeural29_TRAIN EMWS8 AutoNeural29_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.AutoNeural29_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.AutoNeural29_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
1072841    data WORK.Ensmbl53_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl53_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
1072842    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1072843    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1072843  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1072843  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1072844       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1072844  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1072844  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1072845    set EMWS8.AUTONEURAL29_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.AUTONEURAL29_DEPVAR_DM( where=(_TYPE_="TARGET"));
1072846    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1072847    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1072848    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1072849    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1072850    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1072851    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1072852    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1072853    end;
MPRINT(EM_DIAGRAM):   end;
1072854    output;
MPRINT(EM_DIAGRAM):   output;
1072855    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.AUTONEURAL29_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENSMBL53_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072856    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1072857    proc print data=WORK.Ensmbl53_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl53_EVENT noobs label;
1072858    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1072859    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1072860    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1072861    run;
 
NOTE: There were 1 observations read from the data set WORK.ENSMBL53_EVENT.
NOTE: The PROCEDURE PRINT printed page 55.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1072862    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1072863    proc print data = EMWS8.AutoNeural29_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.AutoNeural29_DepVar_DM noobs label;
1072864    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1072865    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1072866    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1072866  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1072866  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1072867    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1072868    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1072869    run;
 
NOTE: There were 7 observations read from the data set EMWS8.AUTONEURAL29_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 56.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072870    title10;
MPRINT(EM_DIAGRAM):   title10;
1072871    %let groupid =;
1072872    %let endGroupid =;
1072873    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072874    set EMWS8.AutoNeural29_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural29_EMINFO;
1072875    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072875  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072876    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072877    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072878    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL29_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072879    %let groupid =;
1072880    %let endGroupid =;
1072881    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072882    set EMWS8.AutoNeural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural28_EMINFO;
1072883    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072883  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072884    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072885    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072886    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL28_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072887    %let groupid =;
1072888    %let endGroupid =;
1072889    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072890    set EMWS8.AutoNeural27_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural27_EMINFO;
1072891    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072891  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072892    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072893    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072894    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL27_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072895    %let groupid =;
1072896    %let endGroupid =;
1072897    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072898    set EMWS8.AutoNeural33_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural33_EMINFO;
1072899    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072899  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072900    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072901    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072902    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL33_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072903    %let groupid =;
1072904    %let endGroupid =;
1072905    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072906    set EMWS8.AutoNeural32_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural32_EMINFO;
1072907    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072907  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072908    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072909    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072910    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL32_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072911    %let groupid =;
1072912    %let endGroupid =;
1072913    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072914    set EMWS8.AutoNeural31_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural31_EMINFO;
1072915    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072915  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072916    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072917    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072918    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL31_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072919    %let groupid =;
1072920    %let endGroupid =;
1072921    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1072922    set EMWS8.AutoNeural30_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural30_EMINFO;
1072923    where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO',
1072923  ! 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where key in('ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO',
'TARGETINFO', 'INDEXINFO');
1072924    if key = 'ENDGROUP' then call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   if key = 'ENDGROUP' then call symput('endGroupId', DATA);
1072925    else call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   else call symput('groupId', DATA);
1072926    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL30_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'INDEXINFO',
      'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072927    data WORK.Ensmbl53;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl53;
1072928    length NodeId $32 Model $64;
MPRINT(EM_DIAGRAM):   length NodeId $32 Model $64;
1072929    label Nodeid = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel,  NOQUOTE))" Model
1072929  ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeltype,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Nodeid = "Node Id" Model = "rpt_modeltype";
1072930    nodeid="AUTONEURAL29";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL29";
1072931    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072932    output;
MPRINT(EM_DIAGRAM):   output;
1072933    nodeid="AUTONEURAL28";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL28";
1072934    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072935    output;
MPRINT(EM_DIAGRAM):   output;
1072936    nodeid="AUTONEURAL27";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL27";
1072937    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072938    output;
MPRINT(EM_DIAGRAM):   output;
1072939    nodeid="AUTONEURAL33";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL33";
1072940    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072941    output;
MPRINT(EM_DIAGRAM):   output;
1072942    nodeid="AUTONEURAL32";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL32";
1072943    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072944    output;
MPRINT(EM_DIAGRAM):   output;
1072945    nodeid="AUTONEURAL31";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL31";
1072946    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072947    output;
MPRINT(EM_DIAGRAM):   output;
1072948    nodeid="AUTONEURAL30";
MPRINT(EM_DIAGRAM):   nodeid="AUTONEURAL30";
1072949    model="AutoNeural";
MPRINT(EM_DIAGRAM):   model="AutoNeural";
1072950    output;
MPRINT(EM_DIAGRAM):   output;
1072951    ;
MPRINT(EM_DIAGRAM):   ;
1072952    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.ENSMBL53 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072953    title;
MPRINT(EM_DIAGRAM):   title;
1072954    proc print data=WORK.Ensmbl53 label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Ensmbl53 label noobs;
1072955    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_combinemodels_title,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Imported Models to be Combined";
1072956    title10 "Probability Function: Voting";
MPRINT(EM_DIAGRAM):   title10 "Probability Function: Voting";
MPRINT(EM_DIAGRAM):   run;
1072957    run;
 
NOTE: There were 7 observations read from the data set WORK.ENSMBL53.
NOTE: The PROCEDURE PRINT printed page 57.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072958    title9;
MPRINT(EM_DIAGRAM):   title9;
1072959    title10;
MPRINT(EM_DIAGRAM):   title10;
1072960    data WORK.M0PMHLQE;
MPRINT(EM_DIAGRAM):    data WORK.M0PMHLQE;
1072961    set WORK.M0PMHLQE;
MPRINT(EM_DIAGRAM):   set WORK.M0PMHLQE;
1072962    where NAME = "DepVar";
MPRINT(EM_DIAGRAM):   where NAME = "DepVar";
1072963    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M0PMHLQE.
      WHERE NAME='DepVar';
NOTE: The data set WORK.M0PMHLQE has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1072964    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
1072965    * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
1072966    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1072967    %macro DMDBClass;
1072968        DepVar(DESC)
1072969    %mend DMDBClass;
1072970    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1072971    * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
1072972    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1072973    %macro DMDBVar;
1072974
1072975    %mend DMDBVar;
1072976    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1072977    * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
1072978    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1072979    proc dmdb batch data=EMWS8.AutoNeural29_TRAIN
1072980    dmdbcat=WORK.EM_DMDB
1072981    maxlevel = 513
1072982    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.AutoNeural29_TRAIN dmdbcat=WORK.EM_DMDB
maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
1072983    class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
1072984    target
1072985    DepVar
1072986    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
1072987    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.AUTONEURAL29_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.AUTONEURAL29_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
1072988    quit;
1072989    *--- end code ---*;
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                12.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1IXVZ4I
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1IXVZ4I new;
MPRINT(EM_DIAGRAM):   run;
1073091    filename emflow
1073091  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring AUTONEURAL29_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073092    *------------------------------------------------------------*;
1073093    * Ensmbl53: Scoring AUTONEURAL29_TRAIN data;
1073094    *------------------------------------------------------------*;
1073095    data EMWS8.Ensmbl53_TRAIN
1073096    / view=EMWS8.Ensmbl53_TRAIN
1073097    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_TRAIN / view=EMWS8.Ensmbl53_TRAIN ;
1073098    set EMWS8.AutoNeural29_TRAIN
1073099    ;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural29_TRAIN ;
1073100    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas.
1073101   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073102   +* Ensmbl53: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Combine model for DepVar;
1073103   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073104   +* Ensmbl53: Scoring Code of model 1 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 1 of 7;
1073105   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073106   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073107   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
1073108   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1073109   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
1073110   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073111   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073112   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
1073113   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1073114   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
1073115   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073116   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073117   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
1073118   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1073119   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
1073120   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073121   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073122   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
1073123   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
1073124   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
1073125   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073126   +
1073127   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1073128   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1073128  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1073129   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1073130   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1073131   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1073132   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1073133   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
1073134   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073135   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
1073136   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1073137   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
1073138   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073139   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073140   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1073141   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073142   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1073143   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1073144   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
1073145   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073146   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
1073147   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1073148   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
1073149   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073150   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073151   +* TOOL: Variable selection Class;
MPRINT(EM_DIAGRAM):   * TOOL: Variable selection Class;
1073152   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1073153   +* NODE: Varsel;
MPRINT(EM_DIAGRAM):   * NODE: Varsel;
1073154   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073155   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1073156   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1073157   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1073158   +
1073159   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1073160   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1073161   +
1073162   +
1073163   +/*----G_Marital_Status begin----*/
1073164   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   length _NORM8 $ 8;
1073165   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1073166   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1073167   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1073168   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1073169   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1073170   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1073171   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1073172   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1073173   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1073174   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1073175   +end;
MPRINT(EM_DIAGRAM):   end;
1073176   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status= "Grouped Levels for Marital_Status";
1073177   +/*----G_Marital_Status end----*/
1073178   +
1073179   +
1073180   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1073181   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1073182   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1073183   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073184   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1073185   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1073186   +* NODE: AutoNeural29;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural29;
1073187   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073188   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1073189   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1073190   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1073191   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1073192   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1073193   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1073194   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1073195   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1073196   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1073197   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1073198   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1073199   +LENGTH _WARN_ $4
1073200   +      F_DepVar  $ 12
1073201   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1073202   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1073203   +
1073204   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1073205   +
1073206   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1073207   +
1073208   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1073209   +
1073210   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1073211   +
1073212   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1073213   +
1073214   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1073215   +
1073216   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1073217   +
1073218   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1073219   +
1073220   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1073221   +
1073222   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1073223   +
1073224   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1073225   +
1073226   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1073227   +
1073228   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1073229   +
1073230   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1073231   +
1073232   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1073233   +
1073234   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1073235   +
1073236   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1073237   +
1073238   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1073239   +
1073240   +      label H1x1_7 = 'Hidden: H1x1_=7' ;
MPRINT(EM_DIAGRAM):   label H1x1_7 = 'Hidden: H1x1_=7' ;
1073241   +
1073242   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1073243   +
1073244   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1073245   +
1073246   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1073247   +
1073248   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1073249   +
1073250   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1073251   +
1073252   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1073253   +
1073254   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1073255   +
1073256   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1073257   +
1073258   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1073259   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1073260   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1073261   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1073262   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1073263   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1073264   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073265   +end;
MPRINT(EM_DIAGRAM):   end;
1073266   +else do;
MPRINT(EM_DIAGRAM):   else do;
1073267   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1073268   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1073269   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1073270   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1073271   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1073272   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1073273   +   end;
MPRINT(EM_DIAGRAM):   end;
1073274   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1073275   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1073276   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1073277   +   end;
MPRINT(EM_DIAGRAM):   end;
1073278   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1073279   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1073280   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1073281   +   end;
MPRINT(EM_DIAGRAM):   end;
1073282   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1073283   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1073284   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1073285   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1073286   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073287   +   end;
MPRINT(EM_DIAGRAM):   end;
1073288   +end;
MPRINT(EM_DIAGRAM):   end;
1073289   +
1073290   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073291   +*** Checking missing input Interval
1073292   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1073293   +
1073294   +IF NMISS(
1073295   +   AcceptedCmpTotal ,
1073296   +   Frq ,
1073297   +   Income ,
1073298   +   Mnt ,
1073299   +   MntGoldProds ,
1073300   +   MntMeatProducts ,
1073301   +   MntWines ,
1073302   +   NumDistPurchases ,
1073303   +   RFMstat ,
1073304   +   RMntFrq ,
1073305   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1073306   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1073307   +
1073308   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073309   +END;
MPRINT(EM_DIAGRAM):   END;
1073310   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073311   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1073312   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073313   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073314   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1073315   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1073316   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1073317   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1073318   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1073319   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1073320   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1073321   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1073322   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1073323   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1073324   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1073325   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1073326   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1073327   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1073328   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1073329   +END;
MPRINT(EM_DIAGRAM):   END;
1073330   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1073331   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1073332   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1073333   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1073334   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1073335   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1073336   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1073337   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1073338   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1073339   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1073340   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1073341   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1073342   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1073343   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1073344   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1073345   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1073346   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1073347   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1073348   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1073349   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1073350   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1073351   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1073352   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1073353   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1073354   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1073355   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1073356   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1073357   +END;
MPRINT(EM_DIAGRAM):   END;
1073358   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073359   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1073360   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073361   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073362   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1073363   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073364   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073365   +   H1x1_1  =    -1.99300782242957 * S_AcceptedCmpTotal
1073366   +          +     2.12004224248217 * S_Frq  +     3.86828667262904 * S_Income
1073367   +          +     2.77648198770608 * S_Mnt  +    -2.27326773671069 *
1073368   +        S_MntGoldProds  +    -0.27399687657599 * S_MntMeatProducts
1073369   +          +     2.26137957922507 * S_MntWines  +     0.14135280902221 *
1073370   +        S_NumDistPurchases  +     1.12048709605553 * S_RFMstat
1073371   +          +     0.99315934409036 * S_RMntFrq  +     1.21818826467727 *
1073372   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.99300782242957 * S_AcceptedCmpTotal + 2.12004224248217 *
S_Frq + 3.86828667262904 * S_Income + 2.77648198770608 * S_Mnt + -2.27326773671069 *
S_MntGoldProds + -0.27399687657599 * S_MntMeatProducts + 2.26137957922507 * S_MntWines +
0.14135280902221 * S_NumDistPurchases + 1.12048709605553 * S_RFMstat + 0.99315934409036 *
S_RMntFrq + 1.21818826467727 * S_Recency ;
1073373   +   H1x1_2  =    -0.46080527925139 * S_AcceptedCmpTotal
1073374   +          +     1.22986184660358 * S_Frq  +     1.25416218398238 * S_Income
1073375   +          +      0.7698101051046 * S_Mnt  +    -0.24851515302824 *
1073376   +        S_MntGoldProds  +    -1.02206883329868 * S_MntMeatProducts
1073377   +          +    -2.60436726665032 * S_MntWines  +     1.42856046102253 *
1073378   +        S_NumDistPurchases  +     0.23036228891547 * S_RFMstat
1073379   +          +    -0.44196680894425 * S_RMntFrq  +     1.47726327092789 *
1073380   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.46080527925139 * S_AcceptedCmpTotal + 1.22986184660358 *
S_Frq + 1.25416218398238 * S_Income + 0.7698101051046 * S_Mnt + -0.24851515302824 *
S_MntGoldProds + -1.02206883329868 * S_MntMeatProducts + -2.60436726665032 * S_MntWines +
1.42856046102253 * S_NumDistPurchases + 0.23036228891547 * S_RFMstat + -0.44196680894425 *
S_RMntFrq + 1.47726327092789 * S_Recency ;
1073381   +   H1x1_3  =    -2.72041257472943 * S_AcceptedCmpTotal
1073382   +          +     2.18007007875237 * S_Frq  +    -3.41389425682735 * S_Income
1073383   +          +     1.22111404132155 * S_Mnt  +     0.13965132551243 *
1073384   +        S_MntGoldProds  +    -1.44679609979492 * S_MntMeatProducts
1073385   +          +     1.32449625366546 * S_MntWines  +     0.71474658567846 *
1073386   +        S_NumDistPurchases  +    -1.11377169665392 * S_RFMstat
1073387   +          +    -0.23272811318878 * S_RMntFrq  +     3.38352057173892 *
1073388   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -2.72041257472943 * S_AcceptedCmpTotal + 2.18007007875237 *
S_Frq + -3.41389425682735 * S_Income + 1.22111404132155 * S_Mnt + 0.13965132551243 *
S_MntGoldProds + -1.44679609979492 * S_MntMeatProducts + 1.32449625366546 * S_MntWines +
0.71474658567846 * S_NumDistPurchases + -1.11377169665392 * S_RFMstat + -0.23272811318878 *
S_RMntFrq + 3.38352057173892 * S_Recency ;
1073389   +   H1x1_4  =    -0.53914082027029 * S_AcceptedCmpTotal
1073390   +          +     3.52541527909413 * S_Frq  +     0.47386294116539 * S_Income
1073391   +          +     1.74856835081997 * S_Mnt  +    -0.31608698854628 *
1073392   +        S_MntGoldProds  +    -4.08585161438784 * S_MntMeatProducts
1073393   +          +     1.11934057687184 * S_MntWines  +    -4.23069217087257 *
1073394   +        S_NumDistPurchases  +    -0.45058242594518 * S_RFMstat
1073395   +          +     2.24526854282726 * S_RMntFrq  +     0.46541621801996 *
1073396   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -0.53914082027029 * S_AcceptedCmpTotal + 3.52541527909413 *
S_Frq + 0.47386294116539 * S_Income + 1.74856835081997 * S_Mnt + -0.31608698854628 *
S_MntGoldProds + -4.08585161438784 * S_MntMeatProducts + 1.11934057687184 * S_MntWines +
-4.23069217087257 * S_NumDistPurchases + -0.45058242594518 * S_RFMstat + 2.24526854282726 *
S_RMntFrq + 0.46541621801996 * S_Recency ;
1073397   +   H1x1_5  =     0.16652182962256 * S_AcceptedCmpTotal
1073398   +          +    -2.34082830868767 * S_Frq  +     0.06017749299853 * S_Income
1073399   +          +    -3.61434433922311 * S_Mnt  +    -0.15794212009402 *
1073400   +        S_MntGoldProds  +     5.32833368617196 * S_MntMeatProducts
1073401   +          +     1.70496933504273 * S_MntWines  +     2.85445845094536 *
1073402   +        S_NumDistPurchases  +     1.88219523605925 * S_RFMstat
1073403   +          +     0.75869801637089 * S_RMntFrq  +     0.08064297106734 *
1073404   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.16652182962256 * S_AcceptedCmpTotal + -2.34082830868767 *
S_Frq + 0.06017749299853 * S_Income + -3.61434433922311 * S_Mnt + -0.15794212009402 *
S_MntGoldProds + 5.32833368617196 * S_MntMeatProducts + 1.70496933504273 * S_MntWines +
2.85445845094536 * S_NumDistPurchases + 1.88219523605925 * S_RFMstat + 0.75869801637089 *
S_RMntFrq + 0.08064297106734 * S_Recency ;
1073405   +   H1x1_6  =     1.97422379745385 * S_AcceptedCmpTotal
1073406   +          +    -0.18806921540808 * S_Frq  +    -1.45393613178942 * S_Income
1073407   +          +    -1.71382589206496 * S_Mnt  +    -0.86398659373382 *
1073408   +        S_MntGoldProds  +    -0.55933907393534 * S_MntMeatProducts
1073409   +          +    -2.04088833388184 * S_MntWines  +     1.33825297425801 *
1073410   +        S_NumDistPurchases  +    -1.84916943620006 * S_RFMstat
1073411   +          +     1.10268410707441 * S_RMntFrq  +    -3.24538880603902 *
1073412   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.97422379745385 * S_AcceptedCmpTotal + -0.18806921540808 *
S_Frq + -1.45393613178942 * S_Income + -1.71382589206496 * S_Mnt + -0.86398659373382 *
S_MntGoldProds + -0.55933907393534 * S_MntMeatProducts + -2.04088833388184 * S_MntWines +
1.33825297425801 * S_NumDistPurchases + -1.84916943620006 * S_RFMstat + 1.10268410707441 *
S_RMntFrq + -3.24538880603902 * S_Recency ;
1073413   +   H1x1_7  =    -0.04334303258083 * S_AcceptedCmpTotal
1073414   +          +      1.2911623736286 * S_Frq  +    -2.28992194197276 * S_Income
1073415   +          +    -0.46322849796029 * S_Mnt  +    -0.61987255353555 *
1073416   +        S_MntGoldProds  +    -0.70448430141235 * S_MntMeatProducts
1073417   +          +    -2.07867791807129 * S_MntWines  +    -1.36577325340948 *
1073418   +        S_NumDistPurchases  +    -1.20867908080733 * S_RFMstat
1073419   +          +     1.13377434281641 * S_RMntFrq  +     0.49995615625441 *
1073420   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_7 = -0.04334303258083 * S_AcceptedCmpTotal + 1.2911623736286 *
S_Frq + -2.28992194197276 * S_Income + -0.46322849796029 * S_Mnt + -0.61987255353555 *
S_MntGoldProds + -0.70448430141235 * S_MntMeatProducts + -2.07867791807129 * S_MntWines +
-1.36577325340948 * S_NumDistPurchases + -1.20867908080733 * S_RFMstat + 1.13377434281641 *
S_RMntFrq + 0.49995615625441 * S_Recency ;
1073421   +   H1x1_1  = H1x1_1  +     -1.7035629341514 * G_Marital_Status0
1073422   +          +    -0.88839271772433 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -1.7035629341514 * G_Marital_Status0 +
-0.88839271772433 * G_Marital_Status1 ;
1073423   +   H1x1_2  = H1x1_2  +     0.47234648810132 * G_Marital_Status0
1073424   +          +     0.49781009278812 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47234648810132 * G_Marital_Status0 +
0.49781009278812 * G_Marital_Status1 ;
1073425   +   H1x1_3  = H1x1_3  +     0.04803102756566 * G_Marital_Status0
1073426   +          +     3.45859276392218 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.04803102756566 * G_Marital_Status0 +
3.45859276392218 * G_Marital_Status1 ;
1073427   +   H1x1_4  = H1x1_4  +    -0.00794915276466 * G_Marital_Status0
1073428   +          +    -0.88877093101914 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.00794915276466 * G_Marital_Status0 +
-0.88877093101914 * G_Marital_Status1 ;
1073429   +   H1x1_5  = H1x1_5  +     0.17344052282277 * G_Marital_Status0
1073430   +          +     0.07512544812374 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 0.17344052282277 * G_Marital_Status0 +
0.07512544812374 * G_Marital_Status1 ;
1073431   +   H1x1_6  = H1x1_6  +     0.69797087079749 * G_Marital_Status0
1073432   +          +     1.99160337429042 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + 0.69797087079749 * G_Marital_Status0 +
1.99160337429042 * G_Marital_Status1 ;
1073433   +   H1x1_7  = H1x1_7  +    -1.90814013352903 * G_Marital_Status0
1073434   +          +    -0.58260071621307 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = H1x1_7 + -1.90814013352903 * G_Marital_Status0 +
-0.58260071621307 * G_Marital_Status1 ;
1073435   +   H1x1_1  =      0.4509613443627 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.4509613443627 + H1x1_1 ;
1073436   +   H1x1_2  =     3.28102437302443 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 3.28102437302443 + H1x1_2 ;
1073437   +   H1x1_3  =    -0.59732076258377 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.59732076258377 + H1x1_3 ;
1073438   +   H1x1_4  =     3.04302174126598 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.04302174126598 + H1x1_4 ;
1073439   +   H1x1_5  =     4.11173403634453 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 4.11173403634453 + H1x1_5 ;
1073440   +   H1x1_6  =     4.51964221881808 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 4.51964221881808 + H1x1_6 ;
1073441   +   H1x1_7  =     7.27061205819069 + H1x1_7 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = 7.27061205819069 + H1x1_7 ;
1073442   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1073443   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1073444   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1073445   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1073446   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1073447   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1073448   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1073449   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1073450   +   H1x1_7  = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_7 = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
1073451   +END;
MPRINT(EM_DIAGRAM):   END;
1073452   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1073453   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1073454   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1073455   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1073456   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1073457   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1073458   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1073459   +   H1x1_7  = .;
MPRINT(EM_DIAGRAM):   H1x1_7 = .;
1073460   +END;
MPRINT(EM_DIAGRAM):   END;
1073461   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073462   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1073463   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073464   +
1073465   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1073466   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1073467   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1073468   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1073469   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1073470   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1073471   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1073472   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1073473   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1073474   +end;
MPRINT(EM_DIAGRAM):   end;
1073475   +else do;
MPRINT(EM_DIAGRAM):   else do;
1073476   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1073477   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1073478   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1073479   +   end;
MPRINT(EM_DIAGRAM):   end;
1073480   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1073481   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1073482   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1073483   +   end;
MPRINT(EM_DIAGRAM):   end;
1073484   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1073485   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1073486   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1073487   +   end;
MPRINT(EM_DIAGRAM):   end;
1073488   +end;
MPRINT(EM_DIAGRAM):   end;
1073489   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073490   +   P_DepVar1  =    -3.49358340904307 * H1x1_1  +    -5.28251662728987 * H1x1_2
1073491   +          +    -4.11876057817011 * H1x1_3  +    -7.73777326204979 * H1x1_4
1073492   +          +     12.8932497890238 * H1x1_5  +     6.88694832857203 * H1x1_6
1073493   +          +    -8.47048075234366 * H1x1_7 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.49358340904307 * H1x1_1 + -5.28251662728987 * H1x1_2 +
-4.11876057817011 * H1x1_3 + -7.73777326204979 * H1x1_4 + 12.8932497890238 * H1x1_5 +
6.88694832857203 * H1x1_6 + -8.47048075234366 * H1x1_7 ;
1073494   +   P_DepVar1  =     1.65092540834245 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.65092540834245 + P_DepVar1 ;
1073495   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1073496   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1073497   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1073498   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1073499   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1073500   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1073501   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1073502   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1073503   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1073504   +END;
MPRINT(EM_DIAGRAM):   END;
1073505   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1073506   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1073507   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1073508   +END;
MPRINT(EM_DIAGRAM):   END;
1073509   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1073510   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1073511   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1073512   +END;
MPRINT(EM_DIAGRAM):   END;
1073513   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1073514   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1073515   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1073516   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1073517   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1073518   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1073519   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1073520   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073521   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1073522   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073523   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1073524   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1073525   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1073526   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1073527   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1073528   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1073529   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1073530   +END;
MPRINT(EM_DIAGRAM):   END;
1073531   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1073532   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1073533   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1073534   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1073535   +* Renaming variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural29;
1073536   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073537   +* Renaming Posterior variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural29;
1073538   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073539   +drop AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_P_DepVar1;
1073540   +AutoNeural29_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural29_P_DepVar1 = P_DepVar1;
1073541   +drop AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_P_DepVar0;
1073542   +AutoNeural29_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural29_P_DepVar0 = P_DepVar0;
1073543   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073544   +* Renaming Into variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural29;
1073545   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073546   +length AutoNeural29_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural29_I_DepVar $32;
1073547   +drop AutoNeural29_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_I_DepVar;
1073548   +AutoNeural29_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural29_I_DepVar = I_DepVar;
1073549   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073550   +* Renaming _WARN_ variable for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural29;
1073551   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073552   +length AutoNeural29_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural29_WARN_ $4;
1073553   +drop AutoNeural29_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_WARN_;
1073554   +AutoNeural29_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural29_WARN_ = _WARN_;
1073555   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073556   +* Ensmbl53: Scoring Code of model 2 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 2 of 7;
1073557   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073558   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073559   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1073560   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1073561   +* NODE: AutoNeural28;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural28;
1073562   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1073563   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1073564   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1073565   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1073566   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1073567   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1073568   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1073569   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1073570   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1073571   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1073572   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1073573   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1073574   +LENGTH _WARN_ $4
1073575   +      F_DepVar  $ 12
1073576   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1073577   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1073578   +
1073579   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1073580   +
1073581   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1073582   +
1073583   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1073584   +
1073585   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1073586   +
1073587   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1073588   +
1073589   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1073590   +
1073591   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1073592   +
1073593   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1073594   +
1073595   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1073596   +
1073597   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1073598   +
1073599   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1073600   +
1073601   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1073602   +
1073603   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1073604   +
1073605   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1073606   +
1073607   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1073608   +
1073609   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1073610   +
1073611   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1073612   +
1073613   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1073614   +
1073615   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1073616   +
1073617   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1073618   +
1073619   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1073620   +
1073621   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1073622   +
1073623   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1073624   +
1073625   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1073626   +
1073627   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1073628   +
1073629   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1073630   +
1073631   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1073632   +
1073633   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1073634   +
1073635   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1073636   +
1073637   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1073638   +
1073639   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1073640   +
1073641   +      label H1x4_2 = 'Hidden: H1x4_=2' ;
MPRINT(EM_DIAGRAM):   label H1x4_2 = 'Hidden: H1x4_=2' ;
1073642   +
1073643   +      label H1x4_3 = 'Hidden: H1x4_=3' ;
MPRINT(EM_DIAGRAM):   label H1x4_3 = 'Hidden: H1x4_=3' ;
1073644   +
1073645   +      label H1x4_4 = 'Hidden: H1x4_=4' ;
MPRINT(EM_DIAGRAM):   label H1x4_4 = 'Hidden: H1x4_=4' ;
1073646   +
1073647   +      label H1x4_5 = 'Hidden: H1x4_=5' ;
MPRINT(EM_DIAGRAM):   label H1x4_5 = 'Hidden: H1x4_=5' ;
1073648   +
1073649   +      label H1x4_6 = 'Hidden: H1x4_=6' ;
MPRINT(EM_DIAGRAM):   label H1x4_6 = 'Hidden: H1x4_=6' ;
1073650   +
1073651   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1073652   +
1073653   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1073654   +
1073655   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1073656   +
1073657   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1073658   +
1073659   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1073660   +
1073661   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1073662   +
1073663   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1073664   +
1073665   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1073666   +
1073667   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1073668   +
1073669   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1073670   +
1073671   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1073672   +
1073673   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1073674   +
1073675   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1073676   +
1073677   +      label H2x3_2 = 'Hidden: H2x3_=2' ;
MPRINT(EM_DIAGRAM):   label H2x3_2 = 'Hidden: H2x3_=2' ;
1073678   +
1073679   +      label H2x3_3 = 'Hidden: H2x3_=3' ;
MPRINT(EM_DIAGRAM):   label H2x3_3 = 'Hidden: H2x3_=3' ;
1073680   +
1073681   +      label H2x3_4 = 'Hidden: H2x3_=4' ;
MPRINT(EM_DIAGRAM):   label H2x3_4 = 'Hidden: H2x3_=4' ;
1073682   +
1073683   +      label H2x3_5 = 'Hidden: H2x3_=5' ;
MPRINT(EM_DIAGRAM):   label H2x3_5 = 'Hidden: H2x3_=5' ;
1073684   +
1073685   +      label H2x3_6 = 'Hidden: H2x3_=6' ;
MPRINT(EM_DIAGRAM):   label H2x3_6 = 'Hidden: H2x3_=6' ;
1073686   +
1073687   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1073688   +
1073689   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1073690   +
1073691   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1073692   +
1073693   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1073694   +
1073695   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1073696   +
1073697   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1073698   +
1073699   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1073700   +
1073701   +      label H3x2_2 = 'Hidden: H3x2_=2' ;
MPRINT(EM_DIAGRAM):   label H3x2_2 = 'Hidden: H3x2_=2' ;
1073702   +
1073703   +      label H3x2_3 = 'Hidden: H3x2_=3' ;
MPRINT(EM_DIAGRAM):   label H3x2_3 = 'Hidden: H3x2_=3' ;
1073704   +
1073705   +      label H3x2_4 = 'Hidden: H3x2_=4' ;
MPRINT(EM_DIAGRAM):   label H3x2_4 = 'Hidden: H3x2_=4' ;
1073706   +
1073707   +      label H3x2_5 = 'Hidden: H3x2_=5' ;
MPRINT(EM_DIAGRAM):   label H3x2_5 = 'Hidden: H3x2_=5' ;
1073708   +
1073709   +      label H3x2_6 = 'Hidden: H3x2_=6' ;
MPRINT(EM_DIAGRAM):   label H3x2_6 = 'Hidden: H3x2_=6' ;
1073710   +
1073711   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1073712   +
1073713   +      label H4x1_2 = 'Hidden: H4x1_=2' ;
MPRINT(EM_DIAGRAM):   label H4x1_2 = 'Hidden: H4x1_=2' ;
1073714   +
1073715   +      label H4x1_3 = 'Hidden: H4x1_=3' ;
MPRINT(EM_DIAGRAM):   label H4x1_3 = 'Hidden: H4x1_=3' ;
1073716   +
1073717   +      label H4x1_4 = 'Hidden: H4x1_=4' ;
MPRINT(EM_DIAGRAM):   label H4x1_4 = 'Hidden: H4x1_=4' ;
1073718   +
1073719   +      label H4x1_5 = 'Hidden: H4x1_=5' ;
MPRINT(EM_DIAGRAM):   label H4x1_5 = 'Hidden: H4x1_=5' ;
1073720   +
1073721   +      label H4x1_6 = 'Hidden: H4x1_=6' ;
MPRINT(EM_DIAGRAM):   label H4x1_6 = 'Hidden: H4x1_=6' ;
1073722   +
1073723   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1073724   +
1073725   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1073726   +
1073727   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1073728   +
1073729   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1073730   +
1073731   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1073732   +
1073733   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1073734   +
1073735   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1073736   +
1073737   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1073738   +
1073739   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1073740   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1073741   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1073742   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1073743   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1073744   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1073745   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073746   +end;
MPRINT(EM_DIAGRAM):   end;
1073747   +else do;
MPRINT(EM_DIAGRAM):   else do;
1073748   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1073749   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1073750   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1073751   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1073752   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1073753   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1073754   +   end;
MPRINT(EM_DIAGRAM):   end;
1073755   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1073756   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1073757   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1073758   +   end;
MPRINT(EM_DIAGRAM):   end;
1073759   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1073760   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1073761   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1073762   +   end;
MPRINT(EM_DIAGRAM):   end;
1073763   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1073764   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1073765   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1073766   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1073767   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073768   +   end;
MPRINT(EM_DIAGRAM):   end;
1073769   +end;
MPRINT(EM_DIAGRAM):   end;
1073770   +
1073771   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073772   +*** Checking missing input Interval
1073773   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1073774   +
1073775   +IF NMISS(
1073776   +   AcceptedCmpTotal ,
1073777   +   Frq ,
1073778   +   Income ,
1073779   +   Mnt ,
1073780   +   MntGoldProds ,
1073781   +   MntMeatProducts ,
1073782   +   MntWines ,
1073783   +   NumDistPurchases ,
1073784   +   RFMstat ,
1073785   +   RMntFrq ,
1073786   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1073787   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1073788   +
1073789   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1073790   +END;
MPRINT(EM_DIAGRAM):   END;
1073791   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073792   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1073793   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073794   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073795   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1073796   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1073797   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1073798   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1073799   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1073800   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1073801   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1073802   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1073803   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1073804   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1073805   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1073806   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1073807   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1073808   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1073809   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1073810   +END;
MPRINT(EM_DIAGRAM):   END;
1073811   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1073812   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1073813   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1073814   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1073815   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1073816   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1073817   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1073818   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1073819   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1073820   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1073821   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1073822   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1073823   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1073824   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1073825   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1073826   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1073827   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1073828   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1073829   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1073830   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1073831   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1073832   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1073833   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1073834   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1073835   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1073836   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1073837   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1073838   +END;
MPRINT(EM_DIAGRAM):   END;
1073839   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073840   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1073841   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073842   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073843   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1073844   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073845   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073846   +   H1x1_1  =     3.15417213555791 * S_AcceptedCmpTotal
1073847   +          +    -2.48200966202064 * S_Frq  +     1.79801309624052 * S_Income
1073848   +          +    -1.96453924225923 * S_Mnt  +    -0.73447750078211 *
1073849   +        S_MntGoldProds  +    -1.52540613833145 * S_MntMeatProducts
1073850   +          +    -2.34651136428537 * S_MntWines  +     1.78713249203795 *
1073851   +        S_NumDistPurchases  +    -1.89877446252459 * S_RFMstat
1073852   +          +     0.40523847190984 * S_RMntFrq  +    -5.00157954960261 *
1073853   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 3.15417213555791 * S_AcceptedCmpTotal + -2.48200966202064 *
S_Frq + 1.79801309624052 * S_Income + -1.96453924225923 * S_Mnt + -0.73447750078211 *
S_MntGoldProds + -1.52540613833145 * S_MntMeatProducts + -2.34651136428537 * S_MntWines +
1.78713249203795 * S_NumDistPurchases + -1.89877446252459 * S_RFMstat + 0.40523847190984 *
S_RMntFrq + -5.00157954960261 * S_Recency ;
1073854   +   H1x1_2  =     -0.4296332791258 * S_AcceptedCmpTotal
1073855   +          +     1.69454720747031 * S_Frq  +     0.65291994437462 * S_Income
1073856   +          +     4.94289741649285 * S_Mnt  +    -0.74724168333375 *
1073857   +        S_MntGoldProds  +    -4.37885511745275 * S_MntMeatProducts
1073858   +          +    -0.79918604028406 * S_MntWines  +    -2.55554908870931 *
1073859   +        S_NumDistPurchases  +      -0.357509020401 * S_RFMstat
1073860   +          +     2.81206015252461 * S_RMntFrq  +       0.376849190211 *
1073861   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.4296332791258 * S_AcceptedCmpTotal + 1.69454720747031 *
S_Frq + 0.65291994437462 * S_Income + 4.94289741649285 * S_Mnt + -0.74724168333375 *
S_MntGoldProds + -4.37885511745275 * S_MntMeatProducts + -0.79918604028406 * S_MntWines +
-2.55554908870931 * S_NumDistPurchases + -0.357509020401 * S_RFMstat + 2.81206015252461 *
S_RMntFrq + 0.376849190211 * S_Recency ;
1073862   +   H1x1_3  =     0.22275326994217 * S_AcceptedCmpTotal
1073863   +          +     1.30327962429821 * S_Frq  +     8.11675617892245 * S_Income
1073864   +          +     1.26763916951276 * S_Mnt  +     -0.2686825897259 *
1073865   +        S_MntGoldProds  +    -1.42114074651211 * S_MntMeatProducts
1073866   +          +    -1.76821642666458 * S_MntWines  +    -1.91323522505912 *
1073867   +        S_NumDistPurchases  +    -0.12369288380556 * S_RFMstat
1073868   +          +     -0.5961110037328 * S_RMntFrq  +     1.45489277444882 *
1073869   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.22275326994217 * S_AcceptedCmpTotal + 1.30327962429821 *
S_Frq + 8.11675617892245 * S_Income + 1.26763916951276 * S_Mnt + -0.2686825897259 *
S_MntGoldProds + -1.42114074651211 * S_MntMeatProducts + -1.76821642666458 * S_MntWines +
-1.91323522505912 * S_NumDistPurchases + -0.12369288380556 * S_RFMstat + -0.5961110037328 *
S_RMntFrq + 1.45489277444882 * S_Recency ;
1073870   +   H1x1_4  =     0.65694888778783 * S_AcceptedCmpTotal
1073871   +          +    -2.46645772884275 * S_Frq  +     2.56090496460471 * S_Income
1073872   +          +     1.47469720902355 * S_Mnt  +    -0.23044042020952 *
1073873   +        S_MntGoldProds  +     1.09436190473143 * S_MntMeatProducts
1073874   +          +    -0.07872477007968 * S_MntWines  +     2.35913880285028 *
1073875   +        S_NumDistPurchases  +     0.36553596420262 * S_RFMstat
1073876   +          +    -1.52014700293876 * S_RMntFrq  +    -1.62001903467763 *
1073877   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.65694888778783 * S_AcceptedCmpTotal + -2.46645772884275 *
S_Frq + 2.56090496460471 * S_Income + 1.47469720902355 * S_Mnt + -0.23044042020952 *
S_MntGoldProds + 1.09436190473143 * S_MntMeatProducts + -0.07872477007968 * S_MntWines +
2.35913880285028 * S_NumDistPurchases + 0.36553596420262 * S_RFMstat + -1.52014700293876 *
S_RMntFrq + -1.62001903467763 * S_Recency ;
1073878   +   H1x1_5  =    -0.06045586654134 * S_AcceptedCmpTotal
1073879   +          +    -1.51896554067022 * S_Frq  +    -0.77690899609172 * S_Income
1073880   +          +    -3.83443076797312 * S_Mnt  +    -0.49066287190692 *
1073881   +        S_MntGoldProds  +     7.74304126889741 * S_MntMeatProducts
1073882   +          +     0.97717560040665 * S_MntWines  +     2.55833904797689 *
1073883   +        S_NumDistPurchases  +     3.33552253786577 * S_RFMstat
1073884   +          +     2.15128325510301 * S_RMntFrq  +     0.51475149451235 *
1073885   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.06045586654134 * S_AcceptedCmpTotal + -1.51896554067022 *
S_Frq + -0.77690899609172 * S_Income + -3.83443076797312 * S_Mnt + -0.49066287190692 *
S_MntGoldProds + 7.74304126889741 * S_MntMeatProducts + 0.97717560040665 * S_MntWines +
2.55833904797689 * S_NumDistPurchases + 3.33552253786577 * S_RFMstat + 2.15128325510301 *
S_RMntFrq + 0.51475149451235 * S_Recency ;
1073886   +   H1x1_6  =    -2.00102225492393 * S_AcceptedCmpTotal
1073887   +          +    -0.55313430858805 * S_Frq  +    -2.80039880440251 * S_Income
1073888   +          +    -0.52613628819852 * S_Mnt  +    -1.25580169134654 *
1073889   +        S_MntGoldProds  +    -1.44511464402737 * S_MntMeatProducts
1073890   +          +    -0.66744558284147 * S_MntWines  +     3.15612301024597 *
1073891   +        S_NumDistPurchases  +    -0.57805918326136 * S_RFMstat
1073892   +          +     0.13349014037678 * S_RMntFrq  +    -1.97053621157132 *
1073893   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = -2.00102225492393 * S_AcceptedCmpTotal + -0.55313430858805 *
S_Frq + -2.80039880440251 * S_Income + -0.52613628819852 * S_Mnt + -1.25580169134654 *
S_MntGoldProds + -1.44511464402737 * S_MntMeatProducts + -0.66744558284147 * S_MntWines +
3.15612301024597 * S_NumDistPurchases + -0.57805918326136 * S_RFMstat + 0.13349014037678 *
S_RMntFrq + -1.97053621157132 * S_Recency ;
1073894   +   H1x1_1  = H1x1_1  +     1.38825657874217 * G_Marital_Status0
1073895   +          +     0.90195662603521 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.38825657874217 * G_Marital_Status0 +
0.90195662603521 * G_Marital_Status1 ;
1073896   +   H1x1_2  = H1x1_2  +     0.88138395159348 * G_Marital_Status0
1073897   +          +    -0.49019446056296 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.88138395159348 * G_Marital_Status0 +
-0.49019446056296 * G_Marital_Status1 ;
1073898   +   H1x1_3  = H1x1_3  +     0.30990330359421 * G_Marital_Status0
1073899   +          +     1.10544938214372 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.30990330359421 * G_Marital_Status0 +
1.10544938214372 * G_Marital_Status1 ;
1073900   +   H1x1_4  = H1x1_4  +     1.70251598227875 * G_Marital_Status0
1073901   +          +     0.87683669160259 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 1.70251598227875 * G_Marital_Status0 +
0.87683669160259 * G_Marital_Status1 ;
1073902   +   H1x1_5  = H1x1_5  +    -0.14678805736317 * G_Marital_Status0
1073903   +          +    -0.13246180955576 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.14678805736317 * G_Marital_Status0 +
-0.13246180955576 * G_Marital_Status1 ;
1073904   +   H1x1_6  = H1x1_6  +     -0.6511155024316 * G_Marital_Status0
1073905   +          +     0.24707257141342 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + -0.6511155024316 * G_Marital_Status0 +
0.24707257141342 * G_Marital_Status1 ;
1073906   +   H1x1_1  =     4.82277728923766 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 4.82277728923766 + H1x1_1 ;
1073907   +   H1x1_2  =     2.49777705822347 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.49777705822347 + H1x1_2 ;
1073908   +   H1x1_3  =    -0.93289135595041 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.93289135595041 + H1x1_3 ;
1073909   +   H1x1_4  =    -7.80421802944398 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.80421802944398 + H1x1_4 ;
1073910   +   H1x1_5  =     6.46115064589724 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 6.46115064589724 + H1x1_5 ;
1073911   +   H1x1_6  =     3.21096596966888 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 3.21096596966888 + H1x1_6 ;
1073912   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1073913   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1073914   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1073915   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1073916   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1073917   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1073918   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1073919   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1073920   +END;
MPRINT(EM_DIAGRAM):   END;
1073921   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1073922   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1073923   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1073924   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1073925   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1073926   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1073927   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1073928   +END;
MPRINT(EM_DIAGRAM):   END;
1073929   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073930   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1073931   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1073932   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1073933   +   H1x2_1  =    -0.30711239275958 * S_AcceptedCmpTotal
1073934   +          +    -1.45395291114633 * S_Frq  +     0.87594950917085 * S_Income
1073935   +          +    -0.72639274085105 * S_Mnt  +    -2.47797355837112 *
1073936   +        S_MntGoldProds  +     0.68384082088335 * S_MntMeatProducts
1073937   +          +     0.65600644755641 * S_MntWines  +      0.8163360453447 *
1073938   +        S_NumDistPurchases  +    -1.09587924440912 * S_RFMstat
1073939   +          +     1.48347762248449 * S_RMntFrq  +      0.2335216261547 *
1073940   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.30711239275958 * S_AcceptedCmpTotal + -1.45395291114633 *
S_Frq + 0.87594950917085 * S_Income + -0.72639274085105 * S_Mnt + -2.47797355837112 *
S_MntGoldProds + 0.68384082088335 * S_MntMeatProducts + 0.65600644755641 * S_MntWines +
0.8163360453447 * S_NumDistPurchases + -1.09587924440912 * S_RFMstat + 1.48347762248449 *
S_RMntFrq + 0.2335216261547 * S_Recency ;
1073941   +   H1x2_2  =     2.57777770372275 * S_AcceptedCmpTotal
1073942   +          +    -0.08699050003337 * S_Frq  +      0.9048262025585 * S_Income
1073943   +          +     0.80716409242733 * S_Mnt  +     0.92862088643502 *
1073944   +        S_MntGoldProds  +     1.28722996014956 * S_MntMeatProducts
1073945   +          +    -0.78107065942411 * S_MntWines  +     2.29787925805392 *
1073946   +        S_NumDistPurchases  +     -0.7095984076797 * S_RFMstat
1073947   +          +    -0.75276407747323 * S_RMntFrq  +    -2.14859674388241 *
1073948   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 2.57777770372275 * S_AcceptedCmpTotal + -0.08699050003337 *
S_Frq + 0.9048262025585 * S_Income + 0.80716409242733 * S_Mnt + 0.92862088643502 *
S_MntGoldProds + 1.28722996014956 * S_MntMeatProducts + -0.78107065942411 * S_MntWines +
2.29787925805392 * S_NumDistPurchases + -0.7095984076797 * S_RFMstat + -0.75276407747323 *
S_RMntFrq + -2.14859674388241 * S_Recency ;
1073949   +   H1x2_3  =    -0.19225474668372 * S_AcceptedCmpTotal
1073950   +          +     -0.5399776824486 * S_Frq  +    -0.33342356858106 * S_Income
1073951   +          +      0.4662552460972 * S_Mnt  +    -0.83897697999245 *
1073952   +        S_MntGoldProds  +    -1.02069791829975 * S_MntMeatProducts
1073953   +          +    -0.77568646594215 * S_MntWines  +    -2.64172584610703 *
1073954   +        S_NumDistPurchases  +     1.22587043380457 * S_RFMstat
1073955   +          +    -1.22124295004478 * S_RMntFrq  +     0.72727673065668 *
1073956   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.19225474668372 * S_AcceptedCmpTotal + -0.5399776824486 *
S_Frq + -0.33342356858106 * S_Income + 0.4662552460972 * S_Mnt + -0.83897697999245 *
S_MntGoldProds + -1.02069791829975 * S_MntMeatProducts + -0.77568646594215 * S_MntWines +
-2.64172584610703 * S_NumDistPurchases + 1.22587043380457 * S_RFMstat + -1.22124295004478 *
S_RMntFrq + 0.72727673065668 * S_Recency ;
1073957   +   H1x2_4  =     1.07963833884217 * S_AcceptedCmpTotal
1073958   +          +    -1.30033554705908 * S_Frq  +     0.80740030463615 * S_Income
1073959   +          +    -1.73808129607223 * S_Mnt  +     1.21346647777818 *
1073960   +        S_MntGoldProds  +     0.69007605858806 * S_MntMeatProducts
1073961   +          +     0.31548401471349 * S_MntWines  +    -0.45355998387313 *
1073962   +        S_NumDistPurchases  +     1.13504256910361 * S_RFMstat
1073963   +          +    -0.45561637629388 * S_RMntFrq  +    -1.42094697023704 *
1073964   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.07963833884217 * S_AcceptedCmpTotal + -1.30033554705908 *
S_Frq + 0.80740030463615 * S_Income + -1.73808129607223 * S_Mnt + 1.21346647777818 *
S_MntGoldProds + 0.69007605858806 * S_MntMeatProducts + 0.31548401471349 * S_MntWines +
-0.45355998387313 * S_NumDistPurchases + 1.13504256910361 * S_RFMstat + -0.45561637629388 *
S_RMntFrq + -1.42094697023704 * S_Recency ;
1073965   +   H1x2_5  =     0.30163018627699 * S_AcceptedCmpTotal
1073966   +          +    -0.73947459722676 * S_Frq  +      0.3117229426353 * S_Income
1073967   +          +     1.78189396082002 * S_Mnt  +    -1.51478593904163 *
1073968   +        S_MntGoldProds  +    -1.30328540691967 * S_MntMeatProducts
1073969   +          +     0.48947220852953 * S_MntWines  +     0.25380878841531 *
1073970   +        S_NumDistPurchases  +    -0.09429027402746 * S_RFMstat
1073971   +          +     2.79720421337828 * S_RMntFrq  +    -0.08024855242737 *
1073972   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.30163018627699 * S_AcceptedCmpTotal + -0.73947459722676 *
S_Frq + 0.3117229426353 * S_Income + 1.78189396082002 * S_Mnt + -1.51478593904163 *
S_MntGoldProds + -1.30328540691967 * S_MntMeatProducts + 0.48947220852953 * S_MntWines +
0.25380878841531 * S_NumDistPurchases + -0.09429027402746 * S_RFMstat + 2.79720421337828 *
S_RMntFrq + -0.08024855242737 * S_Recency ;
1073973   +   H1x2_6  =    -0.05006047355159 * S_AcceptedCmpTotal
1073974   +          +     0.01838632143297 * S_Frq  +    -1.04892137940395 * S_Income
1073975   +          +    -0.33949418476309 * S_Mnt  +     1.27820886482898 *
1073976   +        S_MntGoldProds  +      0.1541042926193 * S_MntMeatProducts
1073977   +          +    -0.30996391960135 * S_MntWines  +     0.69532310497927 *
1073978   +        S_NumDistPurchases  +    -0.51247610421467 * S_RFMstat
1073979   +          +    -0.87640728095011 * S_RMntFrq  +     1.79661996586627 *
1073980   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -0.05006047355159 * S_AcceptedCmpTotal + 0.01838632143297 *
S_Frq + -1.04892137940395 * S_Income + -0.33949418476309 * S_Mnt + 1.27820886482898 *
S_MntGoldProds + 0.1541042926193 * S_MntMeatProducts + -0.30996391960135 * S_MntWines +
0.69532310497927 * S_NumDistPurchases + -0.51247610421467 * S_RFMstat + -0.87640728095011 *
S_RMntFrq + 1.79661996586627 * S_Recency ;
1073981   +   H1x2_1  = H1x2_1  +    -1.52372947412233 * G_Marital_Status0
1073982   +          +     0.61190614442174 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -1.52372947412233 * G_Marital_Status0 +
0.61190614442174 * G_Marital_Status1 ;
1073983   +   H1x2_2  = H1x2_2  +     -0.2899112326334 * G_Marital_Status0
1073984   +          +    -0.43943770039245 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.2899112326334 * G_Marital_Status0 +
-0.43943770039245 * G_Marital_Status1 ;
1073985   +   H1x2_3  = H1x2_3  +    -1.30447843367338 * G_Marital_Status0
1073986   +          +     0.36969296112687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.30447843367338 * G_Marital_Status0 +
0.36969296112687 * G_Marital_Status1 ;
1073987   +   H1x2_4  = H1x2_4  +     1.06192432928756 * G_Marital_Status0
1073988   +          +    -0.48897798100871 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.06192432928756 * G_Marital_Status0 +
-0.48897798100871 * G_Marital_Status1 ;
1073989   +   H1x2_5  = H1x2_5  +     1.24023950705702 * G_Marital_Status0
1073990   +          +     -0.0768652239427 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 1.24023950705702 * G_Marital_Status0 +
-0.0768652239427 * G_Marital_Status1 ;
1073991   +   H1x2_6  = H1x2_6  +    -0.79854804689099 * G_Marital_Status0
1073992   +          +    -0.58590001312977 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 + -0.79854804689099 * G_Marital_Status0 +
-0.58590001312977 * G_Marital_Status1 ;
1073993   +   H1x2_1  =    -1.24057312487712 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.24057312487712 + H1x2_1 ;
1073994   +   H1x2_2  =    -0.68291139361923 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.68291139361923 + H1x2_2 ;
1073995   +   H1x2_3  =     1.06420344729961 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.06420344729961 + H1x2_3 ;
1073996   +   H1x2_4  =    -2.69713708678823 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -2.69713708678823 + H1x2_4 ;
1073997   +   H1x2_5  =    -0.12447063994137 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.12447063994137 + H1x2_5 ;
1073998   +   H1x2_6  =     -1.0719988986801 + H1x2_6 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -1.0719988986801 + H1x2_6 ;
1073999   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1074000   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1074001   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1074002   +   H1x2_2  = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
1074003   +   H1x2_3  = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
1074004   +   H1x2_4  = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
1074005   +   H1x2_5  = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_5 = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
1074006   +   H1x2_6  = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_6 = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
1074007   +END;
MPRINT(EM_DIAGRAM):   END;
1074008   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074009   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1074010   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1074011   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1074012   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1074013   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1074014   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1074015   +END;
MPRINT(EM_DIAGRAM):   END;
1074016   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074017   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1074018   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074019   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074020   +   H1x3_1  =     0.58141896766328 * S_AcceptedCmpTotal
1074021   +          +     0.88835106317195 * S_Frq  +     1.03397412242189 * S_Income
1074022   +          +    -0.19511498332885 * S_Mnt  +     0.79222351582255 *
1074023   +        S_MntGoldProds  +     1.84666352042484 * S_MntMeatProducts
1074024   +          +     0.26439819900146 * S_MntWines  +    -0.49316136014272 *
1074025   +        S_NumDistPurchases  +    -1.53931690693652 * S_RFMstat
1074026   +          +     0.66163259224518 * S_RMntFrq  +    -0.05038100966606 *
1074027   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.58141896766328 * S_AcceptedCmpTotal + 0.88835106317195 *
S_Frq + 1.03397412242189 * S_Income + -0.19511498332885 * S_Mnt + 0.79222351582255 *
S_MntGoldProds + 1.84666352042484 * S_MntMeatProducts + 0.26439819900146 * S_MntWines +
-0.49316136014272 * S_NumDistPurchases + -1.53931690693652 * S_RFMstat + 0.66163259224518 *
S_RMntFrq + -0.05038100966606 * S_Recency ;
1074028   +   H1x3_2  =    -0.66965742898236 * S_AcceptedCmpTotal
1074029   +          +     0.11439761295336 * S_Frq  +      0.4311111590428 * S_Income
1074030   +          +     0.56419594384106 * S_Mnt  +    -2.58586026844722 *
1074031   +        S_MntGoldProds  +     0.84843617907069 * S_MntMeatProducts
1074032   +          +    -0.40949465894409 * S_MntWines  +    -1.12254199224924 *
1074033   +        S_NumDistPurchases  +    -1.73672932018459 * S_RFMstat
1074034   +          +     0.60800652848154 * S_RMntFrq  +     0.90023461529092 *
1074035   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.66965742898236 * S_AcceptedCmpTotal + 0.11439761295336 *
S_Frq + 0.4311111590428 * S_Income + 0.56419594384106 * S_Mnt + -2.58586026844722 *
S_MntGoldProds + 0.84843617907069 * S_MntMeatProducts + -0.40949465894409 * S_MntWines +
-1.12254199224924 * S_NumDistPurchases + -1.73672932018459 * S_RFMstat + 0.60800652848154 *
S_RMntFrq + 0.90023461529092 * S_Recency ;
1074036   +   H1x3_3  =     0.64116254904887 * S_AcceptedCmpTotal
1074037   +          +     0.36521168161033 * S_Frq  +    -1.65592742965949 * S_Income
1074038   +          +    -1.13010637801203 * S_Mnt  +     1.18435160743823 *
1074039   +        S_MntGoldProds  +     0.61014939723339 * S_MntMeatProducts
1074040   +          +     0.57967362971329 * S_MntWines  +    -0.00705774722842 *
1074041   +        S_NumDistPurchases  +    -0.09732595050305 * S_RFMstat
1074042   +          +    -1.58268748567816 * S_RMntFrq  +    -1.00117301133743 *
1074043   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 0.64116254904887 * S_AcceptedCmpTotal + 0.36521168161033 *
S_Frq + -1.65592742965949 * S_Income + -1.13010637801203 * S_Mnt + 1.18435160743823 *
S_MntGoldProds + 0.61014939723339 * S_MntMeatProducts + 0.57967362971329 * S_MntWines +
-0.00705774722842 * S_NumDistPurchases + -0.09732595050305 * S_RFMstat + -1.58268748567816 *
S_RMntFrq + -1.00117301133743 * S_Recency ;
1074044   +   H1x3_4  =    -2.38943135123073 * S_AcceptedCmpTotal
1074045   +          +     0.50616478854457 * S_Frq  +     1.68985840818789 * S_Income
1074046   +          +    -0.51011802824515 * S_Mnt  +     1.25167622017055 *
1074047   +        S_MntGoldProds  +    -0.78430871718616 * S_MntMeatProducts
1074048   +          +     0.97685472578698 * S_MntWines  +    -0.66992601103029 *
1074049   +        S_NumDistPurchases  +    -0.28545877583545 * S_RFMstat
1074050   +          +     0.52712575990538 * S_RMntFrq  +     1.51096273676103 *
1074051   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -2.38943135123073 * S_AcceptedCmpTotal + 0.50616478854457 *
S_Frq + 1.68985840818789 * S_Income + -0.51011802824515 * S_Mnt + 1.25167622017055 *
S_MntGoldProds + -0.78430871718616 * S_MntMeatProducts + 0.97685472578698 * S_MntWines +
-0.66992601103029 * S_NumDistPurchases + -0.28545877583545 * S_RFMstat + 0.52712575990538 *
S_RMntFrq + 1.51096273676103 * S_Recency ;
1074052   +   H1x3_5  =     0.27293739636898 * S_AcceptedCmpTotal
1074053   +          +     0.44515009768765 * S_Frq  +     -0.4521347788574 * S_Income
1074054   +          +     0.43943223859703 * S_Mnt  +     1.17781847894182 *
1074055   +        S_MntGoldProds  +    -0.67700757595581 * S_MntMeatProducts
1074056   +          +    -1.46437355846341 * S_MntWines  +    -0.09365592083561 *
1074057   +        S_NumDistPurchases  +     0.94926901433762 * S_RFMstat
1074058   +          +     2.40216905424957 * S_RMntFrq  +     0.65859109347516 *
1074059   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.27293739636898 * S_AcceptedCmpTotal + 0.44515009768765 *
S_Frq + -0.4521347788574 * S_Income + 0.43943223859703 * S_Mnt + 1.17781847894182 *
S_MntGoldProds + -0.67700757595581 * S_MntMeatProducts + -1.46437355846341 * S_MntWines +
-0.09365592083561 * S_NumDistPurchases + 0.94926901433762 * S_RFMstat + 2.40216905424957 *
S_RMntFrq + 0.65859109347516 * S_Recency ;
1074060   +   H1x3_6  =     0.79944121174459 * S_AcceptedCmpTotal
1074061   +          +     0.19594924011495 * S_Frq  +     1.07233338144708 * S_Income
1074062   +          +    -0.39577530492174 * S_Mnt  +    -0.18122578134776 *
1074063   +        S_MntGoldProds  +    -0.26451891721245 * S_MntMeatProducts
1074064   +          +    -0.86856724355925 * S_MntWines  +    -1.81909916765471 *
1074065   +        S_NumDistPurchases  +     1.03983663011092 * S_RFMstat
1074066   +          +    -0.86768378180894 * S_RMntFrq  +     0.40747604583851 *
1074067   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.79944121174459 * S_AcceptedCmpTotal + 0.19594924011495 *
S_Frq + 1.07233338144708 * S_Income + -0.39577530492174 * S_Mnt + -0.18122578134776 *
S_MntGoldProds + -0.26451891721245 * S_MntMeatProducts + -0.86856724355925 * S_MntWines +
-1.81909916765471 * S_NumDistPurchases + 1.03983663011092 * S_RFMstat + -0.86768378180894 *
S_RMntFrq + 0.40747604583851 * S_Recency ;
1074068   +   H1x3_1  = H1x3_1  +    -1.44819834546359 * G_Marital_Status0
1074069   +          +     2.03049158937708 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -1.44819834546359 * G_Marital_Status0 +
2.03049158937708 * G_Marital_Status1 ;
1074070   +   H1x3_2  = H1x3_2  +     0.32142977922032 * G_Marital_Status0
1074071   +          +     0.95456795317325 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + 0.32142977922032 * G_Marital_Status0 +
0.95456795317325 * G_Marital_Status1 ;
1074072   +   H1x3_3  = H1x3_3  +    -0.05546140673943 * G_Marital_Status0
1074073   +          +    -0.64267205173982 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 + -0.05546140673943 * G_Marital_Status0 +
-0.64267205173982 * G_Marital_Status1 ;
1074074   +   H1x3_4  = H1x3_4  +     0.67758459902812 * G_Marital_Status0
1074075   +          +    -0.13878277097624 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 + 0.67758459902812 * G_Marital_Status0 +
-0.13878277097624 * G_Marital_Status1 ;
1074076   +   H1x3_5  = H1x3_5  +      0.2080585980069 * G_Marital_Status0
1074077   +          +     0.39530416624983 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 + 0.2080585980069 * G_Marital_Status0 + 0.39530416624983
* G_Marital_Status1 ;
1074078   +   H1x3_6  = H1x3_6  +    -0.56268194068278 * G_Marital_Status0
1074079   +          +    -1.38939757582535 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 + -0.56268194068278 * G_Marital_Status0 +
-1.38939757582535 * G_Marital_Status1 ;
1074080   +   H1x3_1  =    -0.02110450300917 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.02110450300917 + H1x3_1 ;
1074081   +   H1x3_2  =     0.68400964836412 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 0.68400964836412 + H1x3_2 ;
1074082   +   H1x3_3  =     1.27295692924548 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.27295692924548 + H1x3_3 ;
1074083   +   H1x3_4  =     0.57759340173339 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.57759340173339 + H1x3_4 ;
1074084   +   H1x3_5  =     0.68658947855937 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.68658947855937 + H1x3_5 ;
1074085   +   H1x3_6  =     0.96960260915788 + H1x3_6 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.96960260915788 + H1x3_6 ;
1074086   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1074087   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1074088   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1074089   +   H1x3_2  = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
1074090   +   H1x3_3  = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
1074091   +   H1x3_4  = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_4 = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
1074092   +   H1x3_5  = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_5 = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
1074093   +   H1x3_6  = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_6 = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
1074094   +END;
MPRINT(EM_DIAGRAM):   END;
1074095   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074096   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1074097   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1074098   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1074099   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1074100   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1074101   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1074102   +END;
MPRINT(EM_DIAGRAM):   END;
1074103   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074104   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1074105   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074106   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074107   +   H1x4_1  =     1.13261766886471 * S_AcceptedCmpTotal
1074108   +          +     0.78824304763496 * S_Frq  +    -1.86817100110189 * S_Income
1074109   +          +    -1.58760227599089 * S_Mnt  +     -1.1330886213304 *
1074110   +        S_MntGoldProds  +     0.82082069255126 * S_MntMeatProducts
1074111   +          +    -0.34149449572975 * S_MntWines  +     0.45944109671738 *
1074112   +        S_NumDistPurchases  +     2.00910621486809 * S_RFMstat
1074113   +          +     -1.8305685414059 * S_RMntFrq  +     1.46038466341548 *
1074114   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.13261766886471 * S_AcceptedCmpTotal + 0.78824304763496 *
S_Frq + -1.86817100110189 * S_Income + -1.58760227599089 * S_Mnt + -1.1330886213304 *
S_MntGoldProds + 0.82082069255126 * S_MntMeatProducts + -0.34149449572975 * S_MntWines +
0.45944109671738 * S_NumDistPurchases + 2.00910621486809 * S_RFMstat + -1.8305685414059 *
S_RMntFrq + 1.46038466341548 * S_Recency ;
1074115   +   H1x4_2  =    -0.63266188932348 * S_AcceptedCmpTotal
1074116   +          +    -0.01183486383209 * S_Frq  +    -1.07560568030024 * S_Income
1074117   +          +    -1.30988288899902 * S_Mnt  +     2.15841401397408 *
1074118   +        S_MntGoldProds  +    -1.27808965763357 * S_MntMeatProducts
1074119   +          +     2.04886920467378 * S_MntWines  +     0.09322121012781 *
1074120   +        S_NumDistPurchases  +    -0.37050311259862 * S_RFMstat
1074121   +          +     0.68085578996214 * S_RMntFrq  +     1.48508197039719 *
1074122   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -0.63266188932348 * S_AcceptedCmpTotal + -0.01183486383209 *
S_Frq + -1.07560568030024 * S_Income + -1.30988288899902 * S_Mnt + 2.15841401397408 *
S_MntGoldProds + -1.27808965763357 * S_MntMeatProducts + 2.04886920467378 * S_MntWines +
0.09322121012781 * S_NumDistPurchases + -0.37050311259862 * S_RFMstat + 0.68085578996214 *
S_RMntFrq + 1.48508197039719 * S_Recency ;
1074123   +   H1x4_3  =    -0.53647455024397 * S_AcceptedCmpTotal
1074124   +          +     0.24459727005497 * S_Frq  +     0.30319155437277 * S_Income
1074125   +          +     0.25206471395865 * S_Mnt  +     0.43917953957135 *
1074126   +        S_MntGoldProds  +    -0.10933570154764 * S_MntMeatProducts
1074127   +          +    -0.04059236687792 * S_MntWines  +     0.35677739352706 *
1074128   +        S_NumDistPurchases  +     1.38086899403811 * S_RFMstat
1074129   +          +    -0.32751457592661 * S_RMntFrq  +    -0.15926282047245 *
1074130   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_3 = -0.53647455024397 * S_AcceptedCmpTotal + 0.24459727005497 *
S_Frq + 0.30319155437277 * S_Income + 0.25206471395865 * S_Mnt + 0.43917953957135 *
S_MntGoldProds + -0.10933570154764 * S_MntMeatProducts + -0.04059236687792 * S_MntWines +
0.35677739352706 * S_NumDistPurchases + 1.38086899403811 * S_RFMstat + -0.32751457592661 *
S_RMntFrq + -0.15926282047245 * S_Recency ;
1074131   +   H1x4_4  =     0.24225159923716 * S_AcceptedCmpTotal
1074132   +          +    -0.83397540163538 * S_Frq  +     0.65454415304883 * S_Income
1074133   +          +     -2.1008417113285 * S_Mnt  +     1.46444392612369 *
1074134   +        S_MntGoldProds  +     1.98843066844745 * S_MntMeatProducts
1074135   +          +    -0.31310064337061 * S_MntWines  +     0.56236194506314 *
1074136   +        S_NumDistPurchases  +    -0.20512833160409 * S_RFMstat
1074137   +          +    -0.20631901696385 * S_RMntFrq  +    -0.01945293751142 *
1074138   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 0.24225159923716 * S_AcceptedCmpTotal + -0.83397540163538 *
S_Frq + 0.65454415304883 * S_Income + -2.1008417113285 * S_Mnt + 1.46444392612369 *
S_MntGoldProds + 1.98843066844745 * S_MntMeatProducts + -0.31310064337061 * S_MntWines +
0.56236194506314 * S_NumDistPurchases + -0.20512833160409 * S_RFMstat + -0.20631901696385 *
S_RMntFrq + -0.01945293751142 * S_Recency ;
1074139   +   H1x4_5  =     -0.2800504242999 * S_AcceptedCmpTotal
1074140   +          +     0.11767474732461 * S_Frq  +    -1.78109558633383 * S_Income
1074141   +          +    -0.83275451396797 * S_Mnt  +     0.13772739876237 *
1074142   +        S_MntGoldProds  +    -0.00084509726748 * S_MntMeatProducts
1074143   +          +     0.92081955236291 * S_MntWines  +    -0.84663906140096 *
1074144   +        S_NumDistPurchases  +     1.07425261538134 * S_RFMstat
1074145   +          +    -0.27830850445101 * S_RMntFrq  +     0.74380794599056 *
1074146   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_5 = -0.2800504242999 * S_AcceptedCmpTotal + 0.11767474732461 *
S_Frq + -1.78109558633383 * S_Income + -0.83275451396797 * S_Mnt + 0.13772739876237 *
S_MntGoldProds + -0.00084509726748 * S_MntMeatProducts + 0.92081955236291 * S_MntWines +
-0.84663906140096 * S_NumDistPurchases + 1.07425261538134 * S_RFMstat + -0.27830850445101 *
S_RMntFrq + 0.74380794599056 * S_Recency ;
1074147   +   H1x4_6  =     -1.1119291723593 * S_AcceptedCmpTotal
1074148   +          +     0.56304851350844 * S_Frq  +     0.73567113537541 * S_Income
1074149   +          +    -3.12306246450604 * S_Mnt  +    -0.91316403938439 *
1074150   +        S_MntGoldProds  +    -2.69628755197256 * S_MntMeatProducts
1074151   +          +     0.85746867824621 * S_MntWines  +    -0.36724035406906 *
1074152   +        S_NumDistPurchases  +     0.28568968295985 * S_RFMstat
1074153   +          +    -0.93954323577146 * S_RMntFrq  +     0.85268992665591 *
1074154   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_6 = -1.1119291723593 * S_AcceptedCmpTotal + 0.56304851350844 *
S_Frq + 0.73567113537541 * S_Income + -3.12306246450604 * S_Mnt + -0.91316403938439 *
S_MntGoldProds + -2.69628755197256 * S_MntMeatProducts + 0.85746867824621 * S_MntWines +
-0.36724035406906 * S_NumDistPurchases + 0.28568968295985 * S_RFMstat + -0.93954323577146 *
S_RMntFrq + 0.85268992665591 * S_Recency ;
1074155   +   H1x4_1  = H1x4_1  +    -0.41637670428316 * G_Marital_Status0
1074156   +          +     1.82577173192743 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.41637670428316 * G_Marital_Status0 +
1.82577173192743 * G_Marital_Status1 ;
1074157   +   H1x4_2  = H1x4_2  +     1.30084682846119 * G_Marital_Status0
1074158   +          +     1.86494194086223 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = H1x4_2 + 1.30084682846119 * G_Marital_Status0 +
1.86494194086223 * G_Marital_Status1 ;
1074159   +   H1x4_3  = H1x4_3  +    -2.51039247492524 * G_Marital_Status0
1074160   +          +    -0.78535196846115 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = H1x4_3 + -2.51039247492524 * G_Marital_Status0 +
-0.78535196846115 * G_Marital_Status1 ;
1074161   +   H1x4_4  = H1x4_4  +    -1.66536345681649 * G_Marital_Status0
1074162   +          +    -1.13643623224979 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = H1x4_4 + -1.66536345681649 * G_Marital_Status0 +
-1.13643623224979 * G_Marital_Status1 ;
1074163   +   H1x4_5  = H1x4_5  +     0.34381083459151 * G_Marital_Status0
1074164   +          +    -0.50611098994468 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = H1x4_5 + 0.34381083459151 * G_Marital_Status0 +
-0.50611098994468 * G_Marital_Status1 ;
1074165   +   H1x4_6  = H1x4_6  +    -0.50144547845039 * G_Marital_Status0
1074166   +          +     1.05855030017376 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = H1x4_6 + -0.50144547845039 * G_Marital_Status0 +
1.05855030017376 * G_Marital_Status1 ;
1074167   +   H1x4_1  =     0.23907181959326 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 0.23907181959326 + H1x4_1 ;
1074168   +   H1x4_2  =    -1.57201194785995 + H1x4_2 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -1.57201194785995 + H1x4_2 ;
1074169   +   H1x4_3  =     2.06322674265618 + H1x4_3 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = 2.06322674265618 + H1x4_3 ;
1074170   +   H1x4_4  =     1.01469021578807 + H1x4_4 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.01469021578807 + H1x4_4 ;
1074171   +   H1x4_5  =     1.07767489348013 + H1x4_5 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.07767489348013 + H1x4_5 ;
1074172   +   H1x4_6  =     0.04477742816865 + H1x4_6 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = 0.04477742816865 + H1x4_6 ;
1074173   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1074174   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1074175   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1074176   +   H1x4_2  = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_2 = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
1074177   +   H1x4_3  = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_3 = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
1074178   +   H1x4_4  = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
1074179   +   H1x4_5  = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
1074180   +   H1x4_6  = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_6 = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
1074181   +END;
MPRINT(EM_DIAGRAM):   END;
1074182   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074183   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1074184   +   H1x4_2  = .;
MPRINT(EM_DIAGRAM):   H1x4_2 = .;
1074185   +   H1x4_3  = .;
MPRINT(EM_DIAGRAM):   H1x4_3 = .;
1074186   +   H1x4_4  = .;
MPRINT(EM_DIAGRAM):   H1x4_4 = .;
1074187   +   H1x4_5  = .;
MPRINT(EM_DIAGRAM):   H1x4_5 = .;
1074188   +   H1x4_6  = .;
MPRINT(EM_DIAGRAM):   H1x4_6 = .;
1074189   +END;
MPRINT(EM_DIAGRAM):   END;
1074190   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074191   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1074192   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074193   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074194   +   H2x1_1  =     1.57657363240028 * H1x1_1  +    -0.37699618626432 * H1x1_2
1074195   +          +    -0.60919993629457 * H1x1_3  +     2.97257779188857 * H1x1_4
1074196   +          +     4.47740938165819 * H1x1_5  +    -0.85059681057218 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.57657363240028 * H1x1_1 + -0.37699618626432 * H1x1_2 +
-0.60919993629457 * H1x1_3 + 2.97257779188857 * H1x1_4 + 4.47740938165819 * H1x1_5 +
-0.85059681057218 * H1x1_6 ;
1074197   +   H2x1_2  =     0.58245150995434 * H1x1_1  +     1.31825599717827 * H1x1_2
1074198   +          +    -0.46604129874265 * H1x1_3  +    -1.57880778011961 * H1x1_4
1074199   +          +      0.1296024356855 * H1x1_5  +    -0.32310175742174 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.58245150995434 * H1x1_1 + 1.31825599717827 * H1x1_2 +
-0.46604129874265 * H1x1_3 + -1.57880778011961 * H1x1_4 + 0.1296024356855 * H1x1_5 +
-0.32310175742174 * H1x1_6 ;
1074200   +   H2x1_3  =     0.08762368266386 * H1x1_1  +     -2.1587359786783 * H1x1_2
1074201   +          +     0.53603825884818 * H1x1_3  +    -0.24087329015868 * H1x1_4
1074202   +          +     0.03296173080719 * H1x1_5  +     0.01697480121243 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.08762368266386 * H1x1_1 + -2.1587359786783 * H1x1_2 +
0.53603825884818 * H1x1_3 + -0.24087329015868 * H1x1_4 + 0.03296173080719 * H1x1_5 +
0.01697480121243 * H1x1_6 ;
1074203   +   H2x1_4  =    -0.11182680657167 * H1x1_1  +     0.78238566788271 * H1x1_2
1074204   +          +    -0.32984662645651 * H1x1_3  +    -0.48952564803009 * H1x1_4
1074205   +          +    -1.99607614008712 * H1x1_5  +     0.10016209874446 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.11182680657167 * H1x1_1 + 0.78238566788271 * H1x1_2 +
-0.32984662645651 * H1x1_3 + -0.48952564803009 * H1x1_4 + -1.99607614008712 * H1x1_5 +
0.10016209874446 * H1x1_6 ;
1074206   +   H2x1_5  =     -1.2498866108229 * H1x1_1  +      3.2369796406078 * H1x1_2
1074207   +          +      2.8181066223344 * H1x1_3  +    -3.11752751718664 * H1x1_4
1074208   +          +    -0.69294382105442 * H1x1_5  +     1.50580112761945 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.2498866108229 * H1x1_1 + 3.2369796406078 * H1x1_2 +
2.8181066223344 * H1x1_3 + -3.11752751718664 * H1x1_4 + -0.69294382105442 * H1x1_5 +
1.50580112761945 * H1x1_6 ;
1074209   +   H2x1_1  = H2x1_1  +     1.23510627062479 * H1x2_1
1074210   +          +     0.24021661687189 * H1x2_2  +    -1.56696654026909 * H1x2_3
1074211   +          +     1.87814576627429 * H1x2_4  +     0.77581978719058 * H1x2_5
1074212   +          +    -0.36964326956968 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.23510627062479 * H1x2_1 + 0.24021661687189 * H1x2_2
+ -1.56696654026909 * H1x2_3 + 1.87814576627429 * H1x2_4 + 0.77581978719058 * H1x2_5 +
-0.36964326956968 * H1x2_6 ;
1074213   +   H2x1_2  = H2x1_2  +     0.92347023180909 * H1x2_1
1074214   +          +    -0.58884204034707 * H1x2_2  +     0.32527960762166 * H1x2_3
1074215   +          +    -2.67192710315835 * H1x2_4  +     1.11142627890507 * H1x2_5
1074216   +          +     -0.0675747785188 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.92347023180909 * H1x2_1 + -0.58884204034707 * H1x2_2
+ 0.32527960762166 * H1x2_3 + -2.67192710315835 * H1x2_4 + 1.11142627890507 * H1x2_5 +
-0.0675747785188 * H1x2_6 ;
1074217   +   H2x1_3  = H2x1_3  +    -0.92500735470206 * H1x2_1
1074218   +          +     0.02449601034461 * H1x2_2  +    -0.75716713196308 * H1x2_3
1074219   +          +     0.16672538074212 * H1x2_4  +    -1.03440004099384 * H1x2_5
1074220   +          +     0.20622228187831 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.92500735470206 * H1x2_1 + 0.02449601034461 * H1x2_2
+ -0.75716713196308 * H1x2_3 + 0.16672538074212 * H1x2_4 + -1.03440004099384 * H1x2_5 +
0.20622228187831 * H1x2_6 ;
1074221   +   H2x1_4  = H2x1_4  +     1.25485096748114 * H1x2_1
1074222   +          +     -0.2345670529973 * H1x2_2  +     1.00007865183196 * H1x2_3
1074223   +          +    -0.19520365006597 * H1x2_4  +     0.15141232788955 * H1x2_5
1074224   +          +     0.99704195296742 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25485096748114 * H1x2_1 + -0.2345670529973 * H1x2_2
+ 1.00007865183196 * H1x2_3 + -0.19520365006597 * H1x2_4 + 0.15141232788955 * H1x2_5 +
0.99704195296742 * H1x2_6 ;
1074225   +   H2x1_5  = H2x1_5  +    -0.65666404502833 * H1x2_1
1074226   +          +     2.28944563427288 * H1x2_2  +    -0.53344610521696 * H1x2_3
1074227   +          +      -0.793597979143 * H1x2_4  +     -0.5657184003534 * H1x2_5
1074228   +          +     0.52117926766363 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.65666404502833 * H1x2_1 + 2.28944563427288 * H1x2_2
+ -0.53344610521696 * H1x2_3 + -0.793597979143 * H1x2_4 + -0.5657184003534 * H1x2_5 +
0.52117926766363 * H1x2_6 ;
1074229   +   H2x1_1  = H2x1_1  +    -0.22872297219456 * H1x3_1
1074230   +          +     0.44130997341488 * H1x3_2  +     0.85543947016407 * H1x3_3
1074231   +          +      0.9172319436964 * H1x3_4  +    -0.63323674278101 * H1x3_5
1074232   +          +       0.010792162082 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.22872297219456 * H1x3_1 + 0.44130997341488 * H1x3_2
+ 0.85543947016407 * H1x3_3 + 0.9172319436964 * H1x3_4 + -0.63323674278101 * H1x3_5 +
0.010792162082 * H1x3_6 ;
1074233   +   H2x1_2  = H2x1_2  +    -0.47961853683007 * H1x3_1
1074234   +          +     0.67283234118014 * H1x3_2  +    -0.12148381681871 * H1x3_3
1074235   +          +     0.11539127068604 * H1x3_4  +     0.71547134269459 * H1x3_5
1074236   +          +     0.31051080747621 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.47961853683007 * H1x3_1 + 0.67283234118014 * H1x3_2
+ -0.12148381681871 * H1x3_3 + 0.11539127068604 * H1x3_4 + 0.71547134269459 * H1x3_5 +
0.31051080747621 * H1x3_6 ;
1074237   +   H2x1_3  = H2x1_3  +     0.84914297140244 * H1x3_1
1074238   +          +     0.52803158023536 * H1x3_2  +    -1.39949725219783 * H1x3_3
1074239   +          +     0.69603350257472 * H1x3_4  +    -0.99298091528215 * H1x3_5
1074240   +          +      0.4901677948096 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.84914297140244 * H1x3_1 + 0.52803158023536 * H1x3_2
+ -1.39949725219783 * H1x3_3 + 0.69603350257472 * H1x3_4 + -0.99298091528215 * H1x3_5 +
0.4901677948096 * H1x3_6 ;
1074241   +   H2x1_4  = H2x1_4  +     1.25437670540229 * H1x3_1
1074242   +          +     0.10767112672867 * H1x3_2  +     -2.4886577317349 * H1x3_3
1074243   +          +    -1.19999974192227 * H1x3_4  +     2.65195856746166 * H1x3_5
1074244   +          +    -0.35850032269696 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25437670540229 * H1x3_1 + 0.10767112672867 * H1x3_2
+ -2.4886577317349 * H1x3_3 + -1.19999974192227 * H1x3_4 + 2.65195856746166 * H1x3_5 +
-0.35850032269696 * H1x3_6 ;
1074245   +   H2x1_5  = H2x1_5  +    -0.18873569038601 * H1x3_1
1074246   +          +    -0.05695497456875 * H1x3_2  +    -1.09169714101723 * H1x3_3
1074247   +          +     0.66962829232535 * H1x3_4  +     0.68262583745167 * H1x3_5
1074248   +          +     0.91538472149247 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.18873569038601 * H1x3_1 + -0.05695497456875 *
H1x3_2 + -1.09169714101723 * H1x3_3 + 0.66962829232535 * H1x3_4 + 0.68262583745167 * H1x3_5 +
0.91538472149247 * H1x3_6 ;
1074249   +   H2x1_1  = H2x1_1  +    -0.77701371575001 * H1x4_1
1074250   +          +    -1.54239140939922 * H1x4_2  +    -0.26570372401877 * H1x4_3
1074251   +          +     0.00097824237229 * H1x4_4  +     0.57921309289721 * H1x4_5
1074252   +          +     1.46692133055956 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.77701371575001 * H1x4_1 + -1.54239140939922 *
H1x4_2 + -0.26570372401877 * H1x4_3 + 0.00097824237229 * H1x4_4 + 0.57921309289721 * H1x4_5 +
1.46692133055956 * H1x4_6 ;
1074253   +   H2x1_2  = H2x1_2  +     0.96564519202767 * H1x4_1
1074254   +          +    -0.06466152110331 * H1x4_2  +    -0.66659637249467 * H1x4_3
1074255   +          +     0.59673973270306 * H1x4_4  +     2.45492273841581 * H1x4_5
1074256   +          +     -0.4804481967354 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.96564519202767 * H1x4_1 + -0.06466152110331 * H1x4_2
+ -0.66659637249467 * H1x4_3 + 0.59673973270306 * H1x4_4 + 2.45492273841581 * H1x4_5 +
-0.4804481967354 * H1x4_6 ;
1074257   +   H2x1_3  = H2x1_3  +     0.75339074826799 * H1x4_1
1074258   +          +     1.26373188682879 * H1x4_2  +     0.49419374749947 * H1x4_3
1074259   +          +     1.26541916145956 * H1x4_4  +     0.10039190806961 * H1x4_5
1074260   +          +    -0.79556185531974 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.75339074826799 * H1x4_1 + 1.26373188682879 * H1x4_2
+ 0.49419374749947 * H1x4_3 + 1.26541916145956 * H1x4_4 + 0.10039190806961 * H1x4_5 +
-0.79556185531974 * H1x4_6 ;
1074261   +   H2x1_4  = H2x1_4  +    -0.28271287281925 * H1x4_1
1074262   +          +      2.1208193298333 * H1x4_2  +    -0.65223420232343 * H1x4_3
1074263   +          +     0.02666229497558 * H1x4_4  +     0.72865787458027 * H1x4_5
1074264   +          +    -0.22377472142722 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.28271287281925 * H1x4_1 + 2.1208193298333 * H1x4_2
+ -0.65223420232343 * H1x4_3 + 0.02666229497558 * H1x4_4 + 0.72865787458027 * H1x4_5 +
-0.22377472142722 * H1x4_6 ;
1074265   +   H2x1_5  = H2x1_5  +    -0.84067714042271 * H1x4_1
1074266   +          +    -1.59141777016956 * H1x4_2  +     0.46077797807782 * H1x4_3
1074267   +          +    -0.07031579794448 * H1x4_4  +     0.83754013895307 * H1x4_5
1074268   +          +     0.49805259687865 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.84067714042271 * H1x4_1 + -1.59141777016956 *
H1x4_2 + 0.46077797807782 * H1x4_3 + -0.07031579794448 * H1x4_4 + 0.83754013895307 * H1x4_5 +
0.49805259687865 * H1x4_6 ;
1074269   +   H2x1_1  =     1.86496757154162 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.86496757154162 + H2x1_1 ;
1074270   +   H2x1_2  =     0.46453634696909 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.46453634696909 + H2x1_2 ;
1074271   +   H2x1_3  =     0.36165501609225 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.36165501609225 + H2x1_3 ;
1074272   +   H2x1_4  =    -0.91790753889181 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.91790753889181 + H2x1_4 ;
1074273   +   H2x1_5  =     2.82445131106489 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 2.82445131106489 + H2x1_5 ;
1074274   +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
1074275   +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
1074276   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074277   +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
1074278   +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
1074279   +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
1074280   +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
1074281   +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
1074282   +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
1074283   +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
1074284   +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
1074285   +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
1074286   +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
1074287   +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
1074288   +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
1074289   +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
1074290   +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
1074291   +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
1074292   +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
1074293   +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
1074294   +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
1074295   +END;
MPRINT(EM_DIAGRAM):   END;
1074296   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074297   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1074298   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1074299   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1074300   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1074301   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1074302   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1074303   +END;
MPRINT(EM_DIAGRAM):   END;
1074304   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074305   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1074306   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074307   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074308   +   H2x2_1  =     0.06037434087051 * H1x1_1  +     2.10312669809986 * H1x1_2
1074309   +          +     0.25966374544266 * H1x1_3  +     -0.4604625015482 * H1x1_4
1074310   +          +    -0.04852853005798 * H1x1_5  +     1.73108900683337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.06037434087051 * H1x1_1 + 2.10312669809986 * H1x1_2 +
0.25966374544266 * H1x1_3 + -0.4604625015482 * H1x1_4 + -0.04852853005798 * H1x1_5 +
1.73108900683337 * H1x1_6 ;
1074311   +   H2x2_2  =    -1.98874787809729 * H1x1_1  +    -0.90575568783349 * H1x1_2
1074312   +          +     2.19451885005981 * H1x1_3  +     0.86127175797091 * H1x1_4
1074313   +          +     0.88302785384691 * H1x1_5  +     1.44831802939799 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.98874787809729 * H1x1_1 + -0.90575568783349 * H1x1_2 +
2.19451885005981 * H1x1_3 + 0.86127175797091 * H1x1_4 + 0.88302785384691 * H1x1_5 +
1.44831802939799 * H1x1_6 ;
1074314   +   H2x2_3  =     0.99020573159855 * H1x1_1  +    -0.25509107111568 * H1x1_2
1074315   +          +    -0.88380027397433 * H1x1_3  +     2.61444810707966 * H1x1_4
1074316   +          +     1.12768553693881 * H1x1_5  +    -1.33423515707253 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 0.99020573159855 * H1x1_1 + -0.25509107111568 * H1x1_2 +
-0.88380027397433 * H1x1_3 + 2.61444810707966 * H1x1_4 + 1.12768553693881 * H1x1_5 +
-1.33423515707253 * H1x1_6 ;
1074317   +   H2x2_4  =    -0.48971657670431 * H1x1_1  +    -2.03924441101145 * H1x1_2
1074318   +          +    -0.44598954940675 * H1x1_3  +    -0.38296699607675 * H1x1_4
1074319   +          +    -0.46829791763961 * H1x1_5  +     0.57571476480191 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.48971657670431 * H1x1_1 + -2.03924441101145 * H1x1_2 +
-0.44598954940675 * H1x1_3 + -0.38296699607675 * H1x1_4 + -0.46829791763961 * H1x1_5 +
0.57571476480191 * H1x1_6 ;
1074320   +   H2x2_5  =     1.15324249951205 * H1x1_1  +    -0.30656607959814 * H1x1_2
1074321   +          +    -0.26327906953925 * H1x1_3  +    -0.30055126052518 * H1x1_4
1074322   +          +     1.20108560127357 * H1x1_5  +    -2.01222927536337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.15324249951205 * H1x1_1 + -0.30656607959814 * H1x1_2 +
-0.26327906953925 * H1x1_3 + -0.30055126052518 * H1x1_4 + 1.20108560127357 * H1x1_5 +
-2.01222927536337 * H1x1_6 ;
1074323   +   H2x2_1  = H2x2_1  +     0.67714997403987 * H1x2_1
1074324   +          +     0.58512699375084 * H1x2_2  +     0.82352577521669 * H1x2_3
1074325   +          +    -0.10235751124142 * H1x2_4  +     0.33612939980192 * H1x2_5
1074326   +          +    -0.86707973977777 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.67714997403987 * H1x2_1 + 0.58512699375084 * H1x2_2
+ 0.82352577521669 * H1x2_3 + -0.10235751124142 * H1x2_4 + 0.33612939980192 * H1x2_5 +
-0.86707973977777 * H1x2_6 ;
1074327   +   H2x2_2  = H2x2_2  +     0.54358612690033 * H1x2_1
1074328   +          +     0.85147893022911 * H1x2_2  +     0.19383313272548 * H1x2_3
1074329   +          +     0.54163359333706 * H1x2_4  +    -0.12377705517298 * H1x2_5
1074330   +          +     0.34775419906833 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54358612690033 * H1x2_1 + 0.85147893022911 * H1x2_2
+ 0.19383313272548 * H1x2_3 + 0.54163359333706 * H1x2_4 + -0.12377705517298 * H1x2_5 +
0.34775419906833 * H1x2_6 ;
1074331   +   H2x2_3  = H2x2_3  +    -0.93107945276808 * H1x2_1
1074332   +          +     0.68475936175775 * H1x2_2  +    -0.23180217492353 * H1x2_3
1074333   +          +     0.62637113173904 * H1x2_4  +      -0.494489282403 * H1x2_5
1074334   +          +    -0.92757761378206 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.93107945276808 * H1x2_1 + 0.68475936175775 * H1x2_2
+ -0.23180217492353 * H1x2_3 + 0.62637113173904 * H1x2_4 + -0.494489282403 * H1x2_5 +
-0.92757761378206 * H1x2_6 ;
1074335   +   H2x2_4  = H2x2_4  +    -0.04592275767761 * H1x2_1
1074336   +          +    -0.46728046145973 * H1x2_2  +    -0.84120395772864 * H1x2_3
1074337   +          +     0.15719249141893 * H1x2_4  +    -0.46514309972577 * H1x2_5
1074338   +          +     1.22882033880531 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.04592275767761 * H1x2_1 + -0.46728046145973 *
H1x2_2 + -0.84120395772864 * H1x2_3 + 0.15719249141893 * H1x2_4 + -0.46514309972577 * H1x2_5 +
1.22882033880531 * H1x2_6 ;
1074339   +   H2x2_5  = H2x2_5  +     1.84159049843244 * H1x2_1
1074340   +          +     0.10275783758743 * H1x2_2  +    -1.43072878385761 * H1x2_3
1074341   +          +     0.55082995966416 * H1x2_4  +      0.6610129464186 * H1x2_5
1074342   +          +     1.13665339513142 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 1.84159049843244 * H1x2_1 + 0.10275783758743 * H1x2_2
+ -1.43072878385761 * H1x2_3 + 0.55082995966416 * H1x2_4 + 0.6610129464186 * H1x2_5 +
1.13665339513142 * H1x2_6 ;
1074343   +   H2x2_1  = H2x2_1  +    -1.51032464504011 * H1x3_1
1074344   +          +    -0.09256867451899 * H1x3_2  +     0.32445533867689 * H1x3_3
1074345   +          +     0.05761597623645 * H1x3_4  +    -0.76755137543453 * H1x3_5
1074346   +          +    -0.84355541605354 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -1.51032464504011 * H1x3_1 + -0.09256867451899 *
H1x3_2 + 0.32445533867689 * H1x3_3 + 0.05761597623645 * H1x3_4 + -0.76755137543453 * H1x3_5 +
-0.84355541605354 * H1x3_6 ;
1074347   +   H2x2_2  = H2x2_2  +     0.10183122181912 * H1x3_1
1074348   +          +    -0.30112412370797 * H1x3_2  +     0.67666605377075 * H1x3_3
1074349   +          +    -0.05362728717558 * H1x3_4  +    -0.02087908172702 * H1x3_5
1074350   +          +    -0.14832407235293 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.10183122181912 * H1x3_1 + -0.30112412370797 * H1x3_2
+ 0.67666605377075 * H1x3_3 + -0.05362728717558 * H1x3_4 + -0.02087908172702 * H1x3_5 +
-0.14832407235293 * H1x3_6 ;
1074351   +   H2x2_3  = H2x2_3  +     1.70579601255161 * H1x3_1
1074352   +          +     -0.4658368752668 * H1x3_2  +    -0.54573113497487 * H1x3_3
1074353   +          +     1.13279034034213 * H1x3_4  +     1.23714589942258 * H1x3_5
1074354   +          +     0.41209753590668 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.70579601255161 * H1x3_1 + -0.4658368752668 * H1x3_2
+ -0.54573113497487 * H1x3_3 + 1.13279034034213 * H1x3_4 + 1.23714589942258 * H1x3_5 +
0.41209753590668 * H1x3_6 ;
1074355   +   H2x2_4  = H2x2_4  +     0.21012073552633 * H1x3_1
1074356   +          +      -1.607803967771 * H1x3_2  +     0.02641742148684 * H1x3_3
1074357   +          +      -0.919177834124 * H1x3_4  +    -0.46658991803838 * H1x3_5
1074358   +          +     0.05356295771962 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.21012073552633 * H1x3_1 + -1.607803967771 * H1x3_2 +
0.02641742148684 * H1x3_3 + -0.919177834124 * H1x3_4 + -0.46658991803838 * H1x3_5 +
0.05356295771962 * H1x3_6 ;
1074359   +   H2x2_5  = H2x2_5  +     -1.1424376096243 * H1x3_1
1074360   +          +    -0.47941730936597 * H1x3_2  +    -1.44857674506057 * H1x3_3
1074361   +          +     -2.0300913051093 * H1x3_4  +    -0.12476620160938 * H1x3_5
1074362   +          +      1.3865980084186 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -1.1424376096243 * H1x3_1 + -0.47941730936597 * H1x3_2
+ -1.44857674506057 * H1x3_3 + -2.0300913051093 * H1x3_4 + -0.12476620160938 * H1x3_5 +
1.3865980084186 * H1x3_6 ;
1074363   +   H2x2_1  = H2x2_1  +    -0.80277778579719 * H1x4_1
1074364   +          +     0.89356845434924 * H1x4_2  +     1.34679856015636 * H1x4_3
1074365   +          +    -0.75666255425893 * H1x4_4  +    -0.76982332990737 * H1x4_5
1074366   +          +     0.16602366912489 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.80277778579719 * H1x4_1 + 0.89356845434924 * H1x4_2
+ 1.34679856015636 * H1x4_3 + -0.75666255425893 * H1x4_4 + -0.76982332990737 * H1x4_5 +
0.16602366912489 * H1x4_6 ;
1074367   +   H2x2_2  = H2x2_2  +    -1.23815292104545 * H1x4_1
1074368   +          +     0.15726093177842 * H1x4_2  +     0.11603212859646 * H1x4_3
1074369   +          +     0.38287343591011 * H1x4_4  +    -0.51333663927664 * H1x4_5
1074370   +          +     -0.9577144624714 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -1.23815292104545 * H1x4_1 + 0.15726093177842 * H1x4_2
+ 0.11603212859646 * H1x4_3 + 0.38287343591011 * H1x4_4 + -0.51333663927664 * H1x4_5 +
-0.9577144624714 * H1x4_6 ;
1074371   +   H2x2_3  = H2x2_3  +    -0.68480171858681 * H1x4_1
1074372   +          +    -0.64475211431817 * H1x4_2  +     0.54382770716837 * H1x4_3
1074373   +          +     0.07586519798399 * H1x4_4  +      -0.158352646931 * H1x4_5
1074374   +          +    -0.86962851115528 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.68480171858681 * H1x4_1 + -0.64475211431817 *
H1x4_2 + 0.54382770716837 * H1x4_3 + 0.07586519798399 * H1x4_4 + -0.158352646931 * H1x4_5 +
-0.86962851115528 * H1x4_6 ;
1074375   +   H2x2_4  = H2x2_4  +     1.08721247219364 * H1x4_1
1074376   +          +    -0.00199447585891 * H1x4_2  +    -0.84066724442019 * H1x4_3
1074377   +          +     0.28532638217608 * H1x4_4  +    -1.14779513957631 * H1x4_5
1074378   +          +     2.01216139921959 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 1.08721247219364 * H1x4_1 + -0.00199447585891 * H1x4_2
+ -0.84066724442019 * H1x4_3 + 0.28532638217608 * H1x4_4 + -1.14779513957631 * H1x4_5 +
2.01216139921959 * H1x4_6 ;
1074379   +   H2x2_5  = H2x2_5  +    -0.82582817846967 * H1x4_1
1074380   +          +    -1.09057773595959 * H1x4_2  +     -0.2490905553905 * H1x4_3
1074381   +          +     0.93092377717594 * H1x4_4  +     0.02946641402494 * H1x4_5
1074382   +          +    -0.19026348436175 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.82582817846967 * H1x4_1 + -1.09057773595959 *
H1x4_2 + -0.2490905553905 * H1x4_3 + 0.93092377717594 * H1x4_4 + 0.02946641402494 * H1x4_5 +
-0.19026348436175 * H1x4_6 ;
1074383   +   H2x2_1  =      0.4280804812723 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.4280804812723 + H2x2_1 ;
1074384   +   H2x2_2  =    -1.09169904475569 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.09169904475569 + H2x2_2 ;
1074385   +   H2x2_3  =      1.1980619484542 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.1980619484542 + H2x2_3 ;
1074386   +   H2x2_4  =    -0.69756677248934 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.69756677248934 + H2x2_4 ;
1074387   +   H2x2_5  =    -1.87910212660657 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = -1.87910212660657 + H2x2_5 ;
1074388   +   H2x2_6  = 0;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0;
1074389   +   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
1074390   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074391   +   H2x2_1  = EXP(H2x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_1 = EXP(H2x2_1 - _MAX_);
1074392   +   _SUM_ = _SUM_ + H2x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_1 ;
1074393   +   H2x2_2  = EXP(H2x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_2 = EXP(H2x2_2 - _MAX_);
1074394   +   _SUM_ = _SUM_ + H2x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_2 ;
1074395   +   H2x2_3  = EXP(H2x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_3 = EXP(H2x2_3 - _MAX_);
1074396   +   _SUM_ = _SUM_ + H2x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_3 ;
1074397   +   H2x2_4  = EXP(H2x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_4 = EXP(H2x2_4 - _MAX_);
1074398   +   _SUM_ = _SUM_ + H2x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_4 ;
1074399   +   H2x2_5  = EXP(H2x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_5 = EXP(H2x2_5 - _MAX_);
1074400   +   _SUM_ = _SUM_ + H2x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_5 ;
1074401   +   H2x2_6  = EXP(H2x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_6 = EXP(H2x2_6 - _MAX_);
1074402   +   _SUM_ = _SUM_ + H2x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_6 ;
1074403   +   H2x2_1  = H2x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 / _SUM_;
1074404   +   H2x2_2  = H2x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 / _SUM_;
1074405   +   H2x2_3  = H2x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 / _SUM_;
1074406   +   H2x2_4  = H2x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 / _SUM_;
1074407   +   H2x2_5  = H2x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 / _SUM_;
1074408   +   H2x2_6  = H2x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 / _SUM_;
1074409   +END;
MPRINT(EM_DIAGRAM):   END;
1074410   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074411   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1074412   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1074413   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1074414   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1074415   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1074416   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1074417   +END;
MPRINT(EM_DIAGRAM):   END;
1074418   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074419   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1074420   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074421   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074422   +   H2x3_1  =     0.51206365204428 * H1x1_1  +    -1.75446248490807 * H1x1_2
1074423   +          +     0.22956544269482 * H1x1_3  +     0.91651437630074 * H1x1_4
1074424   +          +    -0.88731743590726 * H1x1_5  +     0.75959028005652 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = 0.51206365204428 * H1x1_1 + -1.75446248490807 * H1x1_2 +
0.22956544269482 * H1x1_3 + 0.91651437630074 * H1x1_4 + -0.88731743590726 * H1x1_5 +
0.75959028005652 * H1x1_6 ;
1074425   +   H2x3_2  =    -0.45196055100748 * H1x1_1  +    -0.30516535345407 * H1x1_2
1074426   +          +    -0.95535662641329 * H1x1_3  +     0.98793241812876 * H1x1_4
1074427   +          +    -2.26205386368521 * H1x1_5  +    -0.79989554227284 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = -0.45196055100748 * H1x1_1 + -0.30516535345407 * H1x1_2 +
-0.95535662641329 * H1x1_3 + 0.98793241812876 * H1x1_4 + -2.26205386368521 * H1x1_5 +
-0.79989554227284 * H1x1_6 ;
1074428   +   H2x3_3  =     1.75400558713364 * H1x1_1  +     0.36065784285286 * H1x1_2
1074429   +          +    -0.26047606287884 * H1x1_3  +    -0.92639558885443 * H1x1_4
1074430   +          +     1.89978202395282 * H1x1_5  +     1.46105111567983 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = 1.75400558713364 * H1x1_1 + 0.36065784285286 * H1x1_2 +
-0.26047606287884 * H1x1_3 + -0.92639558885443 * H1x1_4 + 1.89978202395282 * H1x1_5 +
1.46105111567983 * H1x1_6 ;
1074431   +   H2x3_4  =     -1.0609986914691 * H1x1_1  +     1.03588259392678 * H1x1_2
1074432   +          +     0.18751061078347 * H1x1_3  +     1.45467172411852 * H1x1_4
1074433   +          +     0.80970691110797 * H1x1_5  +    -0.03142746343877 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = -1.0609986914691 * H1x1_1 + 1.03588259392678 * H1x1_2 +
0.18751061078347 * H1x1_3 + 1.45467172411852 * H1x1_4 + 0.80970691110797 * H1x1_5 +
-0.03142746343877 * H1x1_6 ;
1074434   +   H2x3_5  =     0.68514959739435 * H1x1_1  +    -0.85703618516825 * H1x1_2
1074435   +          +    -1.42641478008517 * H1x1_3  +     0.69128253039497 * H1x1_4
1074436   +          +    -0.41103428804251 * H1x1_5  +     2.29818718782262 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = 0.68514959739435 * H1x1_1 + -0.85703618516825 * H1x1_2 +
-1.42641478008517 * H1x1_3 + 0.69128253039497 * H1x1_4 + -0.41103428804251 * H1x1_5 +
2.29818718782262 * H1x1_6 ;
1074437   +   H2x3_1  = H2x3_1  +    -1.02124610786304 * H1x2_1
1074438   +          +    -0.70086367508924 * H1x2_2  +     1.44543746222048 * H1x2_3
1074439   +          +      0.0077115223216 * H1x2_4  +    -1.13603676440953 * H1x2_5
1074440   +          +    -0.39006326539815 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.02124610786304 * H1x2_1 + -0.70086367508924 *
H1x2_2 + 1.44543746222048 * H1x2_3 + 0.0077115223216 * H1x2_4 + -1.13603676440953 * H1x2_5 +
-0.39006326539815 * H1x2_6 ;
1074441   +   H2x3_2  = H2x3_2  +     0.58504868182178 * H1x2_1
1074442   +          +    -2.53394647771808 * H1x2_2  +    -0.46920351111552 * H1x2_3
1074443   +          +    -0.13298739365164 * H1x2_4  +    -0.72916785042807 * H1x2_5
1074444   +          +     0.87575796008942 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + 0.58504868182178 * H1x2_1 + -2.53394647771808 * H1x2_2
+ -0.46920351111552 * H1x2_3 + -0.13298739365164 * H1x2_4 + -0.72916785042807 * H1x2_5 +
0.87575796008942 * H1x2_6 ;
1074445   +   H2x3_3  = H2x3_3  +      -0.403068394175 * H1x2_1
1074446   +          +     2.20341156440175 * H1x2_2  +     0.18637166393472 * H1x2_3
1074447   +          +    -0.49818124689746 * H1x2_4  +    -0.57482220863202 * H1x2_5
1074448   +          +    -0.99288712489296 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -0.403068394175 * H1x2_1 + 2.20341156440175 * H1x2_2 +
0.18637166393472 * H1x2_3 + -0.49818124689746 * H1x2_4 + -0.57482220863202 * H1x2_5 +
-0.99288712489296 * H1x2_6 ;
1074449   +   H2x3_4  = H2x3_4  +    -0.08255075671356 * H1x2_1
1074450   +          +     0.12417859340249 * H1x2_2  +     0.38623860203678 * H1x2_3
1074451   +          +     1.30375188803419 * H1x2_4  +     0.06113655765155 * H1x2_5
1074452   +          +     2.18684373678918 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.08255075671356 * H1x2_1 + 0.12417859340249 * H1x2_2
+ 0.38623860203678 * H1x2_3 + 1.30375188803419 * H1x2_4 + 0.06113655765155 * H1x2_5 +
2.18684373678918 * H1x2_6 ;
1074453   +   H2x3_5  = H2x3_5  +     0.02445507420447 * H1x2_1
1074454   +          +     -1.1429834255353 * H1x2_2  +     1.15057813366971 * H1x2_3
1074455   +          +     -0.7929157351984 * H1x2_4  +      0.4343084860458 * H1x2_5
1074456   +          +      0.0384736341173 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + 0.02445507420447 * H1x2_1 + -1.1429834255353 * H1x2_2
+ 1.15057813366971 * H1x2_3 + -0.7929157351984 * H1x2_4 + 0.4343084860458 * H1x2_5 +
0.0384736341173 * H1x2_6 ;
1074457   +   H2x3_1  = H2x3_1  +     0.37764572590016 * H1x3_1
1074458   +          +     1.48191356825225 * H1x3_2  +    -0.26603273466393 * H1x3_3
1074459   +          +    -1.29507822568105 * H1x3_4  +     1.84557717124725 * H1x3_5
1074460   +          +    -0.65863037608331 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 0.37764572590016 * H1x3_1 + 1.48191356825225 * H1x3_2
+ -0.26603273466393 * H1x3_3 + -1.29507822568105 * H1x3_4 + 1.84557717124725 * H1x3_5 +
-0.65863037608331 * H1x3_6 ;
1074461   +   H2x3_2  = H2x3_2  +    -3.49060338051306 * H1x3_1
1074462   +          +      1.3541565382925 * H1x3_2  +    -0.38315198954693 * H1x3_3
1074463   +          +    -2.08846010475603 * H1x3_4  +    -0.03268324043605 * H1x3_5
1074464   +          +     -0.2732767866426 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -3.49060338051306 * H1x3_1 + 1.3541565382925 * H1x3_2
+ -0.38315198954693 * H1x3_3 + -2.08846010475603 * H1x3_4 + -0.03268324043605 * H1x3_5 +
-0.2732767866426 * H1x3_6 ;
1074465   +   H2x3_3  = H2x3_3  +    -1.02108681113274 * H1x3_1
1074466   +          +     1.11670732797487 * H1x3_2  +    -2.83817066251645 * H1x3_3
1074467   +          +     2.91943649605743 * H1x3_4  +    -1.58666117886546 * H1x3_5
1074468   +          +     0.95358246629929 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -1.02108681113274 * H1x3_1 + 1.11670732797487 * H1x3_2
+ -2.83817066251645 * H1x3_3 + 2.91943649605743 * H1x3_4 + -1.58666117886546 * H1x3_5 +
0.95358246629929 * H1x3_6 ;
1074469   +   H2x3_4  = H2x3_4  +    -0.28934138457604 * H1x3_1
1074470   +          +     -0.1627562650927 * H1x3_2  +     1.76496399430623 * H1x3_3
1074471   +          +     2.05776756058594 * H1x3_4  +    -0.96994650178001 * H1x3_5
1074472   +          +    -1.50364154763084 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.28934138457604 * H1x3_1 + -0.1627562650927 * H1x3_2
+ 1.76496399430623 * H1x3_3 + 2.05776756058594 * H1x3_4 + -0.96994650178001 * H1x3_5 +
-1.50364154763084 * H1x3_6 ;
1074473   +   H2x3_5  = H2x3_5  +    -0.73016276992619 * H1x3_1
1074474   +          +    -1.48258849718818 * H1x3_2  +    -0.47908044807419 * H1x3_3
1074475   +          +      0.5957671579209 * H1x3_4  +     0.06707833713085 * H1x3_5
1074476   +          +      0.3673818114501 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.73016276992619 * H1x3_1 + -1.48258849718818 *
H1x3_2 + -0.47908044807419 * H1x3_3 + 0.5957671579209 * H1x3_4 + 0.06707833713085 * H1x3_5 +
0.3673818114501 * H1x3_6 ;
1074477   +   H2x3_1  = H2x3_1  +     1.64939881299916 * H1x4_1
1074478   +          +     0.29057047745206 * H1x4_2  +     -1.2430356696985 * H1x4_3
1074479   +          +     1.38895822896909 * H1x4_4  +     0.32263395713709 * H1x4_5
1074480   +          +      -0.876005602164 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 1.64939881299916 * H1x4_1 + 0.29057047745206 * H1x4_2
+ -1.2430356696985 * H1x4_3 + 1.38895822896909 * H1x4_4 + 0.32263395713709 * H1x4_5 +
-0.876005602164 * H1x4_6 ;
1074481   +   H2x3_2  = H2x3_2  +    -0.59279077758901 * H1x4_1
1074482   +          +     0.47534983861589 * H1x4_2  +     1.50522851379751 * H1x4_3
1074483   +          +    -0.52074826438565 * H1x4_4  +    -0.13959571645898 * H1x4_5
1074484   +          +     0.51236653129509 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -0.59279077758901 * H1x4_1 + 0.47534983861589 * H1x4_2
+ 1.50522851379751 * H1x4_3 + -0.52074826438565 * H1x4_4 + -0.13959571645898 * H1x4_5 +
0.51236653129509 * H1x4_6 ;
1074485   +   H2x3_3  = H2x3_3  +       0.170929264521 * H1x4_1
1074486   +          +    -1.09768862147461 * H1x4_2  +    -1.22166369035864 * H1x4_3
1074487   +          +    -0.43496041372082 * H1x4_4  +     0.86983484014566 * H1x4_5
1074488   +          +     0.14855508666868 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + 0.170929264521 * H1x4_1 + -1.09768862147461 * H1x4_2 +
-1.22166369035864 * H1x4_3 + -0.43496041372082 * H1x4_4 + 0.86983484014566 * H1x4_5 +
0.14855508666868 * H1x4_6 ;
1074489   +   H2x3_4  = H2x3_4  +    -0.26703118340308 * H1x4_1
1074490   +          +     0.58353167926887 * H1x4_2  +     1.39169479141155 * H1x4_3
1074491   +          +     -0.7893707969296 * H1x4_4  +     0.89521873365477 * H1x4_5
1074492   +          +     1.60853840268286 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.26703118340308 * H1x4_1 + 0.58353167926887 * H1x4_2
+ 1.39169479141155 * H1x4_3 + -0.7893707969296 * H1x4_4 + 0.89521873365477 * H1x4_5 +
1.60853840268286 * H1x4_6 ;
1074493   +   H2x3_5  = H2x3_5  +    -0.29353449181426 * H1x4_1
1074494   +          +     0.02697197445995 * H1x4_2  +     0.04454970336296 * H1x4_3
1074495   +          +    -0.17322488506489 * H1x4_4  +    -1.52564540234935 * H1x4_5
1074496   +          +      0.6650692994568 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.29353449181426 * H1x4_1 + 0.02697197445995 * H1x4_2
+ 0.04454970336296 * H1x4_3 + -0.17322488506489 * H1x4_4 + -1.52564540234935 * H1x4_5 +
0.6650692994568 * H1x4_6 ;
1074497   +   H2x3_1  =    -0.44046998911725 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -0.44046998911725 + H2x3_1 ;
1074498   +   H2x3_2  =     1.44590821330163 + H2x3_2 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = 1.44590821330163 + H2x3_2 ;
1074499   +   H2x3_3  =    -0.02671947857742 + H2x3_3 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = -0.02671947857742 + H2x3_3 ;
1074500   +   H2x3_4  =     2.16876314488082 + H2x3_4 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = 2.16876314488082 + H2x3_4 ;
1074501   +   H2x3_5  =    -1.06855161267989 + H2x3_5 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = -1.06855161267989 + H2x3_5 ;
1074502   +   H2x3_6  = 0;
MPRINT(EM_DIAGRAM):   H2x3_6 = 0;
1074503   +   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
1074504   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074505   +   H2x3_1  = EXP(H2x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_1 = EXP(H2x3_1 - _MAX_);
1074506   +   _SUM_ = _SUM_ + H2x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_1 ;
1074507   +   H2x3_2  = EXP(H2x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_2 = EXP(H2x3_2 - _MAX_);
1074508   +   _SUM_ = _SUM_ + H2x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_2 ;
1074509   +   H2x3_3  = EXP(H2x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_3 = EXP(H2x3_3 - _MAX_);
1074510   +   _SUM_ = _SUM_ + H2x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_3 ;
1074511   +   H2x3_4  = EXP(H2x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_4 = EXP(H2x3_4 - _MAX_);
1074512   +   _SUM_ = _SUM_ + H2x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_4 ;
1074513   +   H2x3_5  = EXP(H2x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_5 = EXP(H2x3_5 - _MAX_);
1074514   +   _SUM_ = _SUM_ + H2x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_5 ;
1074515   +   H2x3_6  = EXP(H2x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_6 = EXP(H2x3_6 - _MAX_);
1074516   +   _SUM_ = _SUM_ + H2x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_6 ;
1074517   +   H2x3_1  = H2x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 / _SUM_;
1074518   +   H2x3_2  = H2x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 / _SUM_;
1074519   +   H2x3_3  = H2x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 / _SUM_;
1074520   +   H2x3_4  = H2x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 / _SUM_;
1074521   +   H2x3_5  = H2x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 / _SUM_;
1074522   +   H2x3_6  = H2x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_6 = H2x3_6 / _SUM_;
1074523   +END;
MPRINT(EM_DIAGRAM):   END;
1074524   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074525   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1074526   +   H2x3_2  = .;
MPRINT(EM_DIAGRAM):   H2x3_2 = .;
1074527   +   H2x3_3  = .;
MPRINT(EM_DIAGRAM):   H2x3_3 = .;
1074528   +   H2x3_4  = .;
MPRINT(EM_DIAGRAM):   H2x3_4 = .;
1074529   +   H2x3_5  = .;
MPRINT(EM_DIAGRAM):   H2x3_5 = .;
1074530   +   H2x3_6  = .;
MPRINT(EM_DIAGRAM):   H2x3_6 = .;
1074531   +END;
MPRINT(EM_DIAGRAM):   END;
1074532   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074533   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1074534   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074535   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074536   +   H3x1_1  =     0.14821897068309 * H2x1_1  +     0.10105634438409 * H2x1_2
1074537   +          +     0.69826499371673 * H2x1_3  +     1.65127139539807 * H2x1_4
1074538   +          +     1.34699293376382 * H2x1_5  +     0.62066324264653 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.14821897068309 * H2x1_1 + 0.10105634438409 * H2x1_2 +
0.69826499371673 * H2x1_3 + 1.65127139539807 * H2x1_4 + 1.34699293376382 * H2x1_5 +
0.62066324264653 * H2x1_6 ;
1074539   +   H3x1_2  =     -0.6760189094281 * H2x1_1  +     0.85348791240011 * H2x1_2
1074540   +          +    -0.07663386217946 * H2x1_3  +     2.15467384269703 * H2x1_4
1074541   +          +    -0.50699529916446 * H2x1_5  +     1.70699964755049 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = -0.6760189094281 * H2x1_1 + 0.85348791240011 * H2x1_2 +
-0.07663386217946 * H2x1_3 + 2.15467384269703 * H2x1_4 + -0.50699529916446 * H2x1_5 +
1.70699964755049 * H2x1_6 ;
1074542   +   H3x1_3  =    -0.94311365048828 * H2x1_1  +    -0.69829528108975 * H2x1_2
1074543   +          +    -0.34747616168009 * H2x1_3  +     2.32941170908743 * H2x1_4
1074544   +          +     3.71768144878584 * H2x1_5  +    -0.60932405988373 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -0.94311365048828 * H2x1_1 + -0.69829528108975 * H2x1_2 +
-0.34747616168009 * H2x1_3 + 2.32941170908743 * H2x1_4 + 3.71768144878584 * H2x1_5 +
-0.60932405988373 * H2x1_6 ;
1074545   +   H3x1_4  =     1.69107510526388 * H2x1_1  +    -1.40350955348413 * H2x1_2
1074546   +          +    -0.47901844016365 * H2x1_3  +      0.3540542650553 * H2x1_4
1074547   +          +    -1.56597514252687 * H2x1_5  +    -0.04997148078498 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.69107510526388 * H2x1_1 + -1.40350955348413 * H2x1_2 +
-0.47901844016365 * H2x1_3 + 0.3540542650553 * H2x1_4 + -1.56597514252687 * H2x1_5 +
-0.04997148078498 * H2x1_6 ;
1074548   +   H3x1_5  =    -0.23167181678539 * H2x1_1  +    -0.65942738658946 * H2x1_2
1074549   +          +    -0.83280103611578 * H2x1_3  +    -1.03301865685228 * H2x1_4
1074550   +          +      1.3401316289209 * H2x1_5  +    -1.98639459325872 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.23167181678539 * H2x1_1 + -0.65942738658946 * H2x1_2 +
-0.83280103611578 * H2x1_3 + -1.03301865685228 * H2x1_4 + 1.3401316289209 * H2x1_5 +
-1.98639459325872 * H2x1_6 ;
1074551   +   H3x1_1  = H3x1_1  +    -1.96226306174896 * H2x2_1
1074552   +          +     1.03065434267907 * H2x2_2  +    -0.02977552697407 * H2x2_3
1074553   +          +    -2.15633683205343 * H2x2_4  +    -0.16172049876123 * H2x2_5
1074554   +          +     2.04617275364668 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.96226306174896 * H2x2_1 + 1.03065434267907 * H2x2_2
+ -0.02977552697407 * H2x2_3 + -2.15633683205343 * H2x2_4 + -0.16172049876123 * H2x2_5 +
2.04617275364668 * H2x2_6 ;
1074555   +   H3x1_2  = H3x1_2  +     0.98825486325651 * H2x2_1
1074556   +          +    -0.45791784632486 * H2x2_2  +     -0.1004093258308 * H2x2_3
1074557   +          +     -0.9411693729369 * H2x2_4  +     -0.2302105458948 * H2x2_5
1074558   +          +    -0.37660795680674 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 0.98825486325651 * H2x2_1 + -0.45791784632486 * H2x2_2
+ -0.1004093258308 * H2x2_3 + -0.9411693729369 * H2x2_4 + -0.2302105458948 * H2x2_5 +
-0.37660795680674 * H2x2_6 ;
1074559   +   H3x1_3  = H3x1_3  +    -0.01929245635771 * H2x2_1
1074560   +          +     0.59176660505983 * H2x2_2  +     0.85345798669405 * H2x2_3
1074561   +          +    -0.29251716908915 * H2x2_4  +     0.62774918208489 * H2x2_5
1074562   +          +    -0.43453791992382 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.01929245635771 * H2x2_1 + 0.59176660505983 * H2x2_2
+ 0.85345798669405 * H2x2_3 + -0.29251716908915 * H2x2_4 + 0.62774918208489 * H2x2_5 +
-0.43453791992382 * H2x2_6 ;
1074563   +   H3x1_4  = H3x1_4  +    -0.93313067901041 * H2x2_1
1074564   +          +     0.79407052404273 * H2x2_2  +     1.63518575530242 * H2x2_3
1074565   +          +     1.19368615452563 * H2x2_4  +     0.43365061793519 * H2x2_5
1074566   +          +    -3.30381142208727 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + -0.93313067901041 * H2x2_1 + 0.79407052404273 * H2x2_2
+ 1.63518575530242 * H2x2_3 + 1.19368615452563 * H2x2_4 + 0.43365061793519 * H2x2_5 +
-3.30381142208727 * H2x2_6 ;
1074567   +   H3x1_5  = H3x1_5  +      0.2721747886066 * H2x2_1
1074568   +          +     0.29405186941774 * H2x2_2  +    -0.96425253045194 * H2x2_3
1074569   +          +    -0.34879018216113 * H2x2_4  +    -1.15330072605073 * H2x2_5
1074570   +          +    -0.34019675397366 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 0.2721747886066 * H2x2_1 + 0.29405186941774 * H2x2_2 +
-0.96425253045194 * H2x2_3 + -0.34879018216113 * H2x2_4 + -1.15330072605073 * H2x2_5 +
-0.34019675397366 * H2x2_6 ;
1074571   +   H3x1_1  = H3x1_1  +     0.99938924001809 * H2x3_1
1074572   +          +    -0.28559857879809 * H2x3_2  +    -0.44648183712004 * H2x3_3
1074573   +          +    -0.23199698060307 * H2x3_4  +    -0.64346521755351 * H2x3_5
1074574   +          +     0.59340663088806 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.99938924001809 * H2x3_1 + -0.28559857879809 * H2x3_2
+ -0.44648183712004 * H2x3_3 + -0.23199698060307 * H2x3_4 + -0.64346521755351 * H2x3_5 +
0.59340663088806 * H2x3_6 ;
1074575   +   H3x1_2  = H3x1_2  +     1.61767718200144 * H2x3_1
1074576   +          +     0.59417860044733 * H2x3_2  +      1.9323992067722 * H2x3_3
1074577   +          +    -1.38224816012152 * H2x3_4  +    -2.04529937075447 * H2x3_5
1074578   +          +     0.67050797164115 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 1.61767718200144 * H2x3_1 + 0.59417860044733 * H2x3_2
+ 1.9323992067722 * H2x3_3 + -1.38224816012152 * H2x3_4 + -2.04529937075447 * H2x3_5 +
0.67050797164115 * H2x3_6 ;
1074579   +   H3x1_3  = H3x1_3  +    -0.69807909205706 * H2x3_1
1074580   +          +    -0.57895843216341 * H2x3_2  +    -0.16766418785512 * H2x3_3
1074581   +          +     0.40654327615846 * H2x3_4  +    -1.86698682195337 * H2x3_5
1074582   +          +    -0.51274988768251 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.69807909205706 * H2x3_1 + -0.57895843216341 *
H2x3_2 + -0.16766418785512 * H2x3_3 + 0.40654327615846 * H2x3_4 + -1.86698682195337 * H2x3_5 +
-0.51274988768251 * H2x3_6 ;
1074583   +   H3x1_4  = H3x1_4  +     0.48560830435522 * H2x3_1
1074584   +          +     -2.8037598804912 * H2x3_2  +    -0.30231415756008 * H2x3_3
1074585   +          +     2.41159952574381 * H2x3_4  +     0.62877424154604 * H2x3_5
1074586   +          +    -0.73773727947747 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.48560830435522 * H2x3_1 + -2.8037598804912 * H2x3_2
+ -0.30231415756008 * H2x3_3 + 2.41159952574381 * H2x3_4 + 0.62877424154604 * H2x3_5 +
-0.73773727947747 * H2x3_6 ;
1074587   +   H3x1_5  = H3x1_5  +    -0.87089276878422 * H2x3_1
1074588   +          +    -0.78003140915024 * H2x3_2  +    -1.46975503560585 * H2x3_3
1074589   +          +     1.87460778751879 * H2x3_4  +    -0.09219359612439 * H2x3_5
1074590   +          +    -1.07137645697526 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + -0.87089276878422 * H2x3_1 + -0.78003140915024 *
H2x3_2 + -1.46975503560585 * H2x3_3 + 1.87460778751879 * H2x3_4 + -0.09219359612439 * H2x3_5 +
-1.07137645697526 * H2x3_6 ;
1074591   +   H3x1_1  =    -0.24118737469276 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.24118737469276 + H3x1_1 ;
1074592   +   H3x1_2  =     0.26844205496356 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.26844205496356 + H3x1_2 ;
1074593   +   H3x1_3  =      1.6092325807607 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 1.6092325807607 + H3x1_3 ;
1074594   +   H3x1_4  =     0.55904829903808 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.55904829903808 + H3x1_4 ;
1074595   +   H3x1_5  =     1.39880629138148 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = 1.39880629138148 + H3x1_5 ;
1074596   +   H3x1_6  = 0;
MPRINT(EM_DIAGRAM):   H3x1_6 = 0;
1074597   +   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
1074598   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074599   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1074600   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1074601   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1074602   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1074603   +   H3x1_3  = EXP(H3x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_3 = EXP(H3x1_3 - _MAX_);
1074604   +   _SUM_ = _SUM_ + H3x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_3 ;
1074605   +   H3x1_4  = EXP(H3x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_4 = EXP(H3x1_4 - _MAX_);
1074606   +   _SUM_ = _SUM_ + H3x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_4 ;
1074607   +   H3x1_5  = EXP(H3x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_5 = EXP(H3x1_5 - _MAX_);
1074608   +   _SUM_ = _SUM_ + H3x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_5 ;
1074609   +   H3x1_6  = EXP(H3x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_6 = EXP(H3x1_6 - _MAX_);
1074610   +   _SUM_ = _SUM_ + H3x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_6 ;
1074611   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1074612   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1074613   +   H3x1_3  = H3x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 / _SUM_;
1074614   +   H3x1_4  = H3x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 / _SUM_;
1074615   +   H3x1_5  = H3x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 / _SUM_;
1074616   +   H3x1_6  = H3x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 / _SUM_;
1074617   +END;
MPRINT(EM_DIAGRAM):   END;
1074618   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074619   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1074620   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1074621   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1074622   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1074623   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1074624   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1074625   +END;
MPRINT(EM_DIAGRAM):   END;
1074626   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074627   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1074628   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074629   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074630   +   H3x2_1  =     0.13469056275633 * H2x1_1  +    -1.31570873196603 * H2x1_2
1074631   +          +    -0.83004507775706 * H2x1_3  +     1.14954585467995 * H2x1_4
1074632   +          +     0.01234753333089 * H2x1_5  +     0.50683843245151 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 0.13469056275633 * H2x1_1 + -1.31570873196603 * H2x1_2 +
-0.83004507775706 * H2x1_3 + 1.14954585467995 * H2x1_4 + 0.01234753333089 * H2x1_5 +
0.50683843245151 * H2x1_6 ;
1074633   +   H3x2_2  =     2.58620633866114 * H2x1_1  +     0.37629863890202 * H2x1_2
1074634   +          +     0.34169762900278 * H2x1_3  +     1.24247313002596 * H2x1_4
1074635   +          +     -0.1965463932822 * H2x1_5  +    -0.00458488228083 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 2.58620633866114 * H2x1_1 + 0.37629863890202 * H2x1_2 +
0.34169762900278 * H2x1_3 + 1.24247313002596 * H2x1_4 + -0.1965463932822 * H2x1_5 +
-0.00458488228083 * H2x1_6 ;
1074636   +   H3x2_3  =    -2.01883694738218 * H2x1_1  +     0.83782353926562 * H2x1_2
1074637   +          +    -1.95119268200972 * H2x1_3  +    -1.04826190833003 * H2x1_4
1074638   +          +     1.66733023346498 * H2x1_5  +     0.23483419363088 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = -2.01883694738218 * H2x1_1 + 0.83782353926562 * H2x1_2 +
-1.95119268200972 * H2x1_3 + -1.04826190833003 * H2x1_4 + 1.66733023346498 * H2x1_5 +
0.23483419363088 * H2x1_6 ;
1074639   +   H3x2_4  =     0.40678642111393 * H2x1_1  +    -0.10557612663286 * H2x1_2
1074640   +          +    -0.34694532874387 * H2x1_3  +     -1.6967916788772 * H2x1_4
1074641   +          +     0.24026556349373 * H2x1_5  +    -0.69393637888423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = 0.40678642111393 * H2x1_1 + -0.10557612663286 * H2x1_2 +
-0.34694532874387 * H2x1_3 + -1.6967916788772 * H2x1_4 + 0.24026556349373 * H2x1_5 +
-0.69393637888423 * H2x1_6 ;
1074642   +   H3x2_5  =    -1.48304630985783 * H2x1_1  +     0.87426655970556 * H2x1_2
1074643   +          +    -0.49899516599841 * H2x1_3  +    -1.94880978312007 * H2x1_4
1074644   +          +    -2.45275015055877 * H2x1_5  +    -0.03264500335093 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -1.48304630985783 * H2x1_1 + 0.87426655970556 * H2x1_2 +
-0.49899516599841 * H2x1_3 + -1.94880978312007 * H2x1_4 + -2.45275015055877 * H2x1_5 +
-0.03264500335093 * H2x1_6 ;
1074645   +   H3x2_1  = H3x2_1  +    -0.40915299509566 * H2x2_1
1074646   +          +     1.45952180668254 * H2x2_2  +     0.42420517277224 * H2x2_3
1074647   +          +    -0.79379446044158 * H2x2_4  +     0.73614212418439 * H2x2_5
1074648   +          +     -0.6527392657117 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -0.40915299509566 * H2x2_1 + 1.45952180668254 * H2x2_2
+ 0.42420517277224 * H2x2_3 + -0.79379446044158 * H2x2_4 + 0.73614212418439 * H2x2_5 +
-0.6527392657117 * H2x2_6 ;
1074649   +   H3x2_2  = H3x2_2  +    -1.62752321860626 * H2x2_1
1074650   +          +    -0.04689831325067 * H2x2_2  +    -2.87951125721119 * H2x2_3
1074651   +          +    -0.36181303609331 * H2x2_4  +     0.55999175715209 * H2x2_5
1074652   +          +    -0.40911363767301 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + -1.62752321860626 * H2x2_1 + -0.04689831325067 *
H2x2_2 + -2.87951125721119 * H2x2_3 + -0.36181303609331 * H2x2_4 + 0.55999175715209 * H2x2_5 +
-0.40911363767301 * H2x2_6 ;
1074653   +   H3x2_3  = H3x2_3  +     0.50766404641726 * H2x2_1
1074654   +          +     0.02747397544049 * H2x2_2  +    -1.35626517144826 * H2x2_3
1074655   +          +     0.23390260329386 * H2x2_4  +     -0.5025118845527 * H2x2_5
1074656   +          +    -1.14035867434772 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + 0.50766404641726 * H2x2_1 + 0.02747397544049 * H2x2_2
+ -1.35626517144826 * H2x2_3 + 0.23390260329386 * H2x2_4 + -0.5025118845527 * H2x2_5 +
-1.14035867434772 * H2x2_6 ;
1074657   +   H3x2_4  = H3x2_4  +     0.64958154360038 * H2x2_1
1074658   +          +     1.68671947742627 * H2x2_2  +    -0.42417215632785 * H2x2_3
1074659   +          +    -0.39675884102374 * H2x2_4  +     1.98354732887496 * H2x2_5
1074660   +          +    -1.32783167695801 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + 0.64958154360038 * H2x2_1 + 1.68671947742627 * H2x2_2
+ -0.42417215632785 * H2x2_3 + -0.39675884102374 * H2x2_4 + 1.98354732887496 * H2x2_5 +
-1.32783167695801 * H2x2_6 ;
1074661   +   H3x2_5  = H3x2_5  +     1.92075053147101 * H2x2_1
1074662   +          +     1.22293096034837 * H2x2_2  +    -0.74039853818796 * H2x2_3
1074663   +          +    -0.25033258903105 * H2x2_4  +     0.63358340091733 * H2x2_5
1074664   +          +     0.17488501957475 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 1.92075053147101 * H2x2_1 + 1.22293096034837 * H2x2_2
+ -0.74039853818796 * H2x2_3 + -0.25033258903105 * H2x2_4 + 0.63358340091733 * H2x2_5 +
0.17488501957475 * H2x2_6 ;
1074665   +   H3x2_1  = H3x2_1  +     0.88292932547634 * H2x3_1
1074666   +          +    -0.27631908402136 * H2x3_2  +     0.93133699792762 * H2x3_3
1074667   +          +     1.18769264917434 * H2x3_4  +    -0.88901652244884 * H2x3_5
1074668   +          +    -0.17544617255869 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + 0.88292932547634 * H2x3_1 + -0.27631908402136 * H2x3_2
+ 0.93133699792762 * H2x3_3 + 1.18769264917434 * H2x3_4 + -0.88901652244884 * H2x3_5 +
-0.17544617255869 * H2x3_6 ;
1074669   +   H3x2_2  = H3x2_2  +     0.71538502917742 * H2x3_1
1074670   +          +    -0.76848695288598 * H2x3_2  +     1.24503864708272 * H2x3_3
1074671   +          +    -0.93962158881999 * H2x3_4  +    -0.43383001812557 * H2x3_5
1074672   +          +     1.14672043219259 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + 0.71538502917742 * H2x3_1 + -0.76848695288598 * H2x3_2
+ 1.24503864708272 * H2x3_3 + -0.93962158881999 * H2x3_4 + -0.43383001812557 * H2x3_5 +
1.14672043219259 * H2x3_6 ;
1074673   +   H3x2_3  = H3x2_3  +    -0.39933331346344 * H2x3_1
1074674   +          +      0.0019862182661 * H2x3_2  +    -0.60479718136768 * H2x3_3
1074675   +          +      1.3818804125218 * H2x3_4  +     0.13498986352108 * H2x3_5
1074676   +          +     1.02889511152823 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + -0.39933331346344 * H2x3_1 + 0.0019862182661 * H2x3_2
+ -0.60479718136768 * H2x3_3 + 1.3818804125218 * H2x3_4 + 0.13498986352108 * H2x3_5 +
1.02889511152823 * H2x3_6 ;
1074677   +   H3x2_4  = H3x2_4  +    -1.24198502624302 * H2x3_1
1074678   +          +    -0.09061963757116 * H2x3_2  +    -0.70229381972412 * H2x3_3
1074679   +          +    -1.43988785716026 * H2x3_4  +     0.45188902401215 * H2x3_5
1074680   +          +     0.10073869982371 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + -1.24198502624302 * H2x3_1 + -0.09061963757116 *
H2x3_2 + -0.70229381972412 * H2x3_3 + -1.43988785716026 * H2x3_4 + 0.45188902401215 * H2x3_5 +
0.10073869982371 * H2x3_6 ;
1074681   +   H3x2_5  = H3x2_5  +     0.13815223958312 * H2x3_1
1074682   +          +     0.38392032129472 * H2x3_2  +    -0.08374178846724 * H2x3_3
1074683   +          +     0.39613433726611 * H2x3_4  +     1.64049322745471 * H2x3_5
1074684   +          +     0.97496084656174 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 0.13815223958312 * H2x3_1 + 0.38392032129472 * H2x3_2
+ -0.08374178846724 * H2x3_3 + 0.39613433726611 * H2x3_4 + 1.64049322745471 * H2x3_5 +
0.97496084656174 * H2x3_6 ;
1074685   +   H3x2_1  =    -0.72845954974251 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.72845954974251 + H3x2_1 ;
1074686   +   H3x2_2  =     0.59148824718722 + H3x2_2 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 0.59148824718722 + H3x2_2 ;
1074687   +   H3x2_3  =     1.28031731320103 + H3x2_3 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = 1.28031731320103 + H3x2_3 ;
1074688   +   H3x2_4  =    -0.11427038364635 + H3x2_4 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = -0.11427038364635 + H3x2_4 ;
1074689   +   H3x2_5  =    -0.28699725292326 + H3x2_5 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -0.28699725292326 + H3x2_5 ;
1074690   +   H3x2_6  = 0;
MPRINT(EM_DIAGRAM):   H3x2_6 = 0;
1074691   +   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
1074692   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074693   +   H3x2_1  = EXP(H3x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_1 = EXP(H3x2_1 - _MAX_);
1074694   +   _SUM_ = _SUM_ + H3x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_1 ;
1074695   +   H3x2_2  = EXP(H3x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_2 = EXP(H3x2_2 - _MAX_);
1074696   +   _SUM_ = _SUM_ + H3x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_2 ;
1074697   +   H3x2_3  = EXP(H3x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_3 = EXP(H3x2_3 - _MAX_);
1074698   +   _SUM_ = _SUM_ + H3x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_3 ;
1074699   +   H3x2_4  = EXP(H3x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_4 = EXP(H3x2_4 - _MAX_);
1074700   +   _SUM_ = _SUM_ + H3x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_4 ;
1074701   +   H3x2_5  = EXP(H3x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_5 = EXP(H3x2_5 - _MAX_);
1074702   +   _SUM_ = _SUM_ + H3x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_5 ;
1074703   +   H3x2_6  = EXP(H3x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_6 = EXP(H3x2_6 - _MAX_);
1074704   +   _SUM_ = _SUM_ + H3x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_6 ;
1074705   +   H3x2_1  = H3x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 / _SUM_;
1074706   +   H3x2_2  = H3x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 / _SUM_;
1074707   +   H3x2_3  = H3x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 / _SUM_;
1074708   +   H3x2_4  = H3x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 / _SUM_;
1074709   +   H3x2_5  = H3x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 / _SUM_;
1074710   +   H3x2_6  = H3x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_6 = H3x2_6 / _SUM_;
1074711   +END;
MPRINT(EM_DIAGRAM):   END;
1074712   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074713   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1074714   +   H3x2_2  = .;
MPRINT(EM_DIAGRAM):   H3x2_2 = .;
1074715   +   H3x2_3  = .;
MPRINT(EM_DIAGRAM):   H3x2_3 = .;
1074716   +   H3x2_4  = .;
MPRINT(EM_DIAGRAM):   H3x2_4 = .;
1074717   +   H3x2_5  = .;
MPRINT(EM_DIAGRAM):   H3x2_5 = .;
1074718   +   H3x2_6  = .;
MPRINT(EM_DIAGRAM):   H3x2_6 = .;
1074719   +END;
MPRINT(EM_DIAGRAM):   END;
1074720   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074721   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1074722   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074723   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074724   +   H4x1_1  =     0.10986960182278 * H3x1_1  +    -0.10835805909937 * H3x1_2
1074725   +          +     1.78643376838566 * H3x1_3  +    -0.00067995179919 * H3x1_4
1074726   +          +     2.04711620528782 * H3x1_5  +    -0.66853997603718 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.10986960182278 * H3x1_1 + -0.10835805909937 * H3x1_2 +
1.78643376838566 * H3x1_3 + -0.00067995179919 * H3x1_4 + 2.04711620528782 * H3x1_5 +
-0.66853997603718 * H3x1_6 ;
1074727   +   H4x1_2  =    -0.17187141657369 * H3x1_1  +    -1.56897037747293 * H3x1_2
1074728   +          +    -1.38330818097338 * H3x1_3  +     3.94629669251083 * H3x1_4
1074729   +          +    -0.57201557221624 * H3x1_5  +     0.99276034828548 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = -0.17187141657369 * H3x1_1 + -1.56897037747293 * H3x1_2 +
-1.38330818097338 * H3x1_3 + 3.94629669251083 * H3x1_4 + -0.57201557221624 * H3x1_5 +
0.99276034828548 * H3x1_6 ;
1074730   +   H4x1_3  =      1.5223304212488 * H3x1_1  +    -0.33490912702371 * H3x1_2
1074731   +          +    -0.30324493540575 * H3x1_3  +    -1.23990036921669 * H3x1_4
1074732   +          +     0.77489370055267 * H3x1_5  +    -0.38609823936674 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.5223304212488 * H3x1_1 + -0.33490912702371 * H3x1_2 +
-0.30324493540575 * H3x1_3 + -1.23990036921669 * H3x1_4 + 0.77489370055267 * H3x1_5 +
-0.38609823936674 * H3x1_6 ;
1074733   +   H4x1_4  =    -0.75234452297837 * H3x1_1  +      1.1117782900703 * H3x1_2
1074734   +          +      1.0171911341496 * H3x1_3  +     2.31462824862723 * H3x1_4
1074735   +          +     1.05562639649812 * H3x1_5  +    -0.80603399686936 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -0.75234452297837 * H3x1_1 + 1.1117782900703 * H3x1_2 +
1.0171911341496 * H3x1_3 + 2.31462824862723 * H3x1_4 + 1.05562639649812 * H3x1_5 +
-0.80603399686936 * H3x1_6 ;
1074736   +   H4x1_5  =    -0.35441774309359 * H3x1_1  +     0.37408435161205 * H3x1_2
1074737   +          +    -0.79287886005891 * H3x1_3  +    -0.89695291885453 * H3x1_4
1074738   +          +     0.46220429367054 * H3x1_5  +    -1.56166867584216 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = -0.35441774309359 * H3x1_1 + 0.37408435161205 * H3x1_2 +
-0.79287886005891 * H3x1_3 + -0.89695291885453 * H3x1_4 + 0.46220429367054 * H3x1_5 +
-1.56166867584216 * H3x1_6 ;
1074739   +   H4x1_1  = H4x1_1  +    -1.12622282402713 * H3x2_1
1074740   +          +     2.43865739917959 * H3x2_2  +     1.62534005409988 * H3x2_3
1074741   +          +     0.83506165677151 * H3x2_4  +    -0.15894659563972 * H3x2_5
1074742   +          +     0.77216806897502 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -1.12622282402713 * H3x2_1 + 2.43865739917959 * H3x2_2
+ 1.62534005409988 * H3x2_3 + 0.83506165677151 * H3x2_4 + -0.15894659563972 * H3x2_5 +
0.77216806897502 * H3x2_6 ;
1074743   +   H4x1_2  = H4x1_2  +     0.96736353410956 * H3x2_1
1074744   +          +      1.6250281874285 * H3x2_2  +    -0.81418318229631 * H3x2_3
1074745   +          +     0.35282111325987 * H3x2_4  +     0.11187473980261 * H3x2_5
1074746   +          +     0.73971378600397 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 + 0.96736353410956 * H3x2_1 + 1.6250281874285 * H3x2_2 +
-0.81418318229631 * H3x2_3 + 0.35282111325987 * H3x2_4 + 0.11187473980261 * H3x2_5 +
0.73971378600397 * H3x2_6 ;
1074747   +   H4x1_3  = H4x1_3  +    -0.30588247178582 * H3x2_1
1074748   +          +     0.22302184288326 * H3x2_2  +    -0.15797620108073 * H3x2_3
1074749   +          +     1.18515955770896 * H3x2_4  +     0.43359240886537 * H3x2_5
1074750   +          +     0.90907054011344 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 + -0.30588247178582 * H3x2_1 + 0.22302184288326 * H3x2_2
+ -0.15797620108073 * H3x2_3 + 1.18515955770896 * H3x2_4 + 0.43359240886537 * H3x2_5 +
0.90907054011344 * H3x2_6 ;
1074751   +   H4x1_4  = H4x1_4  +    -0.26678025657796 * H3x2_1
1074752   +          +    -0.23171152283695 * H3x2_2  +    -0.72882061581264 * H3x2_3
1074753   +          +     0.68597418643333 * H3x2_4  +      0.6559090638639 * H3x2_5
1074754   +          +     0.95412028439169 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 + -0.26678025657796 * H3x2_1 + -0.23171152283695 *
H3x2_2 + -0.72882061581264 * H3x2_3 + 0.68597418643333 * H3x2_4 + 0.6559090638639 * H3x2_5 +
0.95412028439169 * H3x2_6 ;
1074755   +   H4x1_5  = H4x1_5  +    -0.77875602324955 * H3x2_1
1074756   +          +     -1.5646810153964 * H3x2_2  +    -0.53157591270506 * H3x2_3
1074757   +          +    -0.27917864191674 * H3x2_4  +    -1.10966192483404 * H3x2_5
1074758   +          +     -0.0058627670025 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 + -0.77875602324955 * H3x2_1 + -1.5646810153964 * H3x2_2
+ -0.53157591270506 * H3x2_3 + -0.27917864191674 * H3x2_4 + -1.10966192483404 * H3x2_5 +
-0.0058627670025 * H3x2_6 ;
1074759   +   H4x1_1  =     0.87937070574208 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.87937070574208 + H4x1_1 ;
1074760   +   H4x1_2  =     0.75203729660648 + H4x1_2 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = 0.75203729660648 + H4x1_2 ;
1074761   +   H4x1_3  =     1.14889100908291 + H4x1_3 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.14889100908291 + H4x1_3 ;
1074762   +   H4x1_4  =    -1.71383624276913 + H4x1_4 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -1.71383624276913 + H4x1_4 ;
1074763   +   H4x1_5  =     0.22194774900585 + H4x1_5 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = 0.22194774900585 + H4x1_5 ;
1074764   +   H4x1_6  = 0;
MPRINT(EM_DIAGRAM):   H4x1_6 = 0;
1074765   +   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
1074766   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074767   +   H4x1_1  = EXP(H4x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_1 = EXP(H4x1_1 - _MAX_);
1074768   +   _SUM_ = _SUM_ + H4x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_1 ;
1074769   +   H4x1_2  = EXP(H4x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_2 = EXP(H4x1_2 - _MAX_);
1074770   +   _SUM_ = _SUM_ + H4x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_2 ;
1074771   +   H4x1_3  = EXP(H4x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_3 = EXP(H4x1_3 - _MAX_);
1074772   +   _SUM_ = _SUM_ + H4x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_3 ;
1074773   +   H4x1_4  = EXP(H4x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_4 = EXP(H4x1_4 - _MAX_);
1074774   +   _SUM_ = _SUM_ + H4x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_4 ;
1074775   +   H4x1_5  = EXP(H4x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_5 = EXP(H4x1_5 - _MAX_);
1074776   +   _SUM_ = _SUM_ + H4x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_5 ;
1074777   +   H4x1_6  = EXP(H4x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_6 = EXP(H4x1_6 - _MAX_);
1074778   +   _SUM_ = _SUM_ + H4x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_6 ;
1074779   +   H4x1_1  = H4x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 / _SUM_;
1074780   +   H4x1_2  = H4x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 / _SUM_;
1074781   +   H4x1_3  = H4x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 / _SUM_;
1074782   +   H4x1_4  = H4x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 / _SUM_;
1074783   +   H4x1_5  = H4x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 / _SUM_;
1074784   +   H4x1_6  = H4x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_6 = H4x1_6 / _SUM_;
1074785   +END;
MPRINT(EM_DIAGRAM):   END;
1074786   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074787   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1074788   +   H4x1_2  = .;
MPRINT(EM_DIAGRAM):   H4x1_2 = .;
1074789   +   H4x1_3  = .;
MPRINT(EM_DIAGRAM):   H4x1_3 = .;
1074790   +   H4x1_4  = .;
MPRINT(EM_DIAGRAM):   H4x1_4 = .;
1074791   +   H4x1_5  = .;
MPRINT(EM_DIAGRAM):   H4x1_5 = .;
1074792   +   H4x1_6  = .;
MPRINT(EM_DIAGRAM):   H4x1_6 = .;
1074793   +END;
MPRINT(EM_DIAGRAM):   END;
1074794   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074795   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1074796   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074797   +
1074798   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1074799   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1074800   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1074801   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1074802   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1074803   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1074804   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1074805   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1074806   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1074807   +end;
MPRINT(EM_DIAGRAM):   end;
1074808   +else do;
MPRINT(EM_DIAGRAM):   else do;
1074809   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1074810   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1074811   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1074812   +   end;
MPRINT(EM_DIAGRAM):   end;
1074813   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1074814   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1074815   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1074816   +   end;
MPRINT(EM_DIAGRAM):   end;
1074817   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1074818   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1074819   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1074820   +   end;
MPRINT(EM_DIAGRAM):   end;
1074821   +end;
MPRINT(EM_DIAGRAM):   end;
1074822   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1074823   +   P_DepVar1  =    -5.30721919155126 * H4x1_1  +     10.4301477552223 * H4x1_2
1074824   +          +    -3.40676330075486 * H4x1_3  +     0.07452634039202 * H4x1_4
1074825   +          +    -2.90585821687293 * H4x1_5  +    -2.63321710569292 * H4x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.30721919155126 * H4x1_1 + 10.4301477552223 * H4x1_2 +
-3.40676330075486 * H4x1_3 + 0.07452634039202 * H4x1_4 + -2.90585821687293 * H4x1_5 +
-2.63321710569292 * H4x1_6 ;
1074826   +   P_DepVar1  =    -2.93956196427421 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.93956196427421 + P_DepVar1 ;
1074827   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1074828   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1074829   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1074830   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1074831   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1074832   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1074833   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1074834   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1074835   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1074836   +END;
MPRINT(EM_DIAGRAM):   END;
1074837   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1074838   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1074839   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1074840   +END;
MPRINT(EM_DIAGRAM):   END;
1074841   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1074842   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1074843   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1074844   +END;
MPRINT(EM_DIAGRAM):   END;
1074845   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1074846   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1074847   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1074848   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1074849   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1074850   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1074851   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1074852   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074853   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1074854   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074855   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1074856   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1074857   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1074858   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1074859   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1074860   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1074861   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1074862   +END;
MPRINT(EM_DIAGRAM):   END;
1074863   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1074864   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1074865   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1074866   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1074867   +* Renaming variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural28;
1074868   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074869   +* Renaming Posterior variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural28;
1074870   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074871   +drop AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar1;
1074872   +AutoNeural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar1 = P_DepVar1;
1074873   +drop AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar0;
1074874   +AutoNeural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar0 = P_DepVar0;
1074875   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074876   +* Renaming Into variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural28;
1074877   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074878   +length AutoNeural28_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural28_I_DepVar $32;
1074879   +drop AutoNeural28_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_I_DepVar;
1074880   +AutoNeural28_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural28_I_DepVar = I_DepVar;
1074881   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074882   +* Renaming _WARN_ variable for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural28;
1074883   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074884   +length AutoNeural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural28_WARN_ $4;
1074885   +drop AutoNeural28_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_WARN_;
1074886   +AutoNeural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural28_WARN_ = _WARN_;
1074887   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074888   +* Ensmbl53: Scoring Code of model 3 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 3 of 7;
1074889   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074890   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074891   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1074892   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1074893   +* NODE: AutoNeural27;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural27;
1074894   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1074895   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1074896   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1074897   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1074898   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1074899   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1074900   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1074901   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1074902   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1074903   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1074904   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1074905   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1074906   +LENGTH _WARN_ $4
1074907   +      F_DepVar  $ 12
1074908   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1074909   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1074910   +
1074911   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1074912   +
1074913   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1074914   +
1074915   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1074916   +
1074917   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1074918   +
1074919   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1074920   +
1074921   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1074922   +
1074923   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1074924   +
1074925   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1074926   +
1074927   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1074928   +
1074929   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1074930   +
1074931   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1074932   +
1074933   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1074934   +
1074935   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1074936   +
1074937   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1074938   +
1074939   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1074940   +
1074941   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1074942   +
1074943   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1074944   +
1074945   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1074946   +
1074947   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1074948   +
1074949   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1074950   +
1074951   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1074952   +
1074953   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1074954   +
1074955   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1074956   +
1074957   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1074958   +
1074959   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1074960   +
1074961   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1074962   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1074963   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1074964   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1074965   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1074966   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1074967   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1074968   +end;
MPRINT(EM_DIAGRAM):   end;
1074969   +else do;
MPRINT(EM_DIAGRAM):   else do;
1074970   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1074971   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1074972   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1074973   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1074974   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1074975   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1074976   +   end;
MPRINT(EM_DIAGRAM):   end;
1074977   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1074978   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1074979   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1074980   +   end;
MPRINT(EM_DIAGRAM):   end;
1074981   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1074982   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1074983   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1074984   +   end;
MPRINT(EM_DIAGRAM):   end;
1074985   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1074986   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1074987   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1074988   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1074989   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1074990   +   end;
MPRINT(EM_DIAGRAM):   end;
1074991   +end;
MPRINT(EM_DIAGRAM):   end;
1074992   +
1074993   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1074994   +*** Checking missing input Interval
1074995   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1074996   +
1074997   +IF NMISS(
1074998   +   AcceptedCmpTotal ,
1074999   +   Frq ,
1075000   +   Income ,
1075001   +   Mnt ,
1075002   +   MntGoldProds ,
1075003   +   MntMeatProducts ,
1075004   +   MntWines ,
1075005   +   NumDistPurchases ,
1075006   +   RFMstat ,
1075007   +   RMntFrq ,
1075008   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1075009   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1075010   +
1075011   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075012   +END;
MPRINT(EM_DIAGRAM):   END;
1075013   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075014   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1075015   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075016   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075017   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075018   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075019   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075020   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075021   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075022   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075023   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1075024   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075025   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075026   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075027   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1075028   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075029   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075030   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075031   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075032   +END;
MPRINT(EM_DIAGRAM):   END;
1075033   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075034   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1075035   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075036   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075037   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1075038   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075039   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1075040   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075041   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1075042   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075043   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1075044   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075045   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1075046   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1075047   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075048   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075049   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1075050   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075051   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1075052   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1075053   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075054   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1075055   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075056   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1075057   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075058   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1075059   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075060   +END;
MPRINT(EM_DIAGRAM):   END;
1075061   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075062   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1075063   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075064   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075065   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1075066   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075067   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075068   +   H1x1_1  =    -0.18981728384316 * S_AcceptedCmpTotal
1075069   +          +     2.44575265018132 * S_Frq  +    -0.33258639871365 * S_Income
1075070   +          +    -1.51282513201415 * S_Mnt  +     0.06017420606179 *
1075071   +        S_MntGoldProds  +    -0.55274425550395 * S_MntMeatProducts
1075072   +          +     0.91858869924573 * S_MntWines  +    -1.95905223495165 *
1075073   +        S_NumDistPurchases  +     -0.2637023845598 * S_RFMstat
1075074   +          +     1.23283591446263 * S_RMntFrq  +    -0.07916044614039 *
1075075   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.18981728384316 * S_AcceptedCmpTotal + 2.44575265018132 *
S_Frq + -0.33258639871365 * S_Income + -1.51282513201415 * S_Mnt + 0.06017420606179 *
S_MntGoldProds + -0.55274425550395 * S_MntMeatProducts + 0.91858869924573 * S_MntWines +
-1.95905223495165 * S_NumDistPurchases + -0.2637023845598 * S_RFMstat + 1.23283591446263 *
S_RMntFrq + -0.07916044614039 * S_Recency ;
1075076   +   H1x1_2  =    -0.68309764555121 * S_AcceptedCmpTotal
1075077   +          +     0.14669436656758 * S_Frq  +     0.02315218376279 * S_Income
1075078   +          +    -4.21583355142014 * S_Mnt  +     0.19199314585125 *
1075079   +        S_MntGoldProds  +     2.55483645032568 * S_MntMeatProducts
1075080   +          +     0.82054382378306 * S_MntWines  +     0.29968014910707 *
1075081   +        S_NumDistPurchases  +     0.60687719454304 * S_RFMstat
1075082   +          +     0.83498030971653 * S_RMntFrq  +     0.50801279856495 *
1075083   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.68309764555121 * S_AcceptedCmpTotal + 0.14669436656758 *
S_Frq + 0.02315218376279 * S_Income + -4.21583355142014 * S_Mnt + 0.19199314585125 *
S_MntGoldProds + 2.55483645032568 * S_MntMeatProducts + 0.82054382378306 * S_MntWines +
0.29968014910707 * S_NumDistPurchases + 0.60687719454304 * S_RFMstat + 0.83498030971653 *
S_RMntFrq + 0.50801279856495 * S_Recency ;
1075084   +   H1x1_3  =     0.08829866742968 * S_AcceptedCmpTotal
1075085   +          +    -0.02323769496851 * S_Frq  +    -0.99617629114101 * S_Income
1075086   +          +    -4.64282306384023 * S_Mnt  +     0.04308696038528 *
1075087   +        S_MntGoldProds  +     2.31863620360623 * S_MntMeatProducts
1075088   +          +     0.16587338267425 * S_MntWines  +     1.02973533097984 *
1075089   +        S_NumDistPurchases  +     0.20343196580651 * S_RFMstat
1075090   +          +     0.94726928092138 * S_RMntFrq  +     0.03712585159749 *
1075091   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.08829866742968 * S_AcceptedCmpTotal + -0.02323769496851 *
S_Frq + -0.99617629114101 * S_Income + -4.64282306384023 * S_Mnt + 0.04308696038528 *
S_MntGoldProds + 2.31863620360623 * S_MntMeatProducts + 0.16587338267425 * S_MntWines +
1.02973533097984 * S_NumDistPurchases + 0.20343196580651 * S_RFMstat + 0.94726928092138 *
S_RMntFrq + 0.03712585159749 * S_Recency ;
1075092   +   H1x1_4  =     0.10061099283455 * S_AcceptedCmpTotal
1075093   +          +     1.72752905329456 * S_Frq  +    -0.50472344084228 * S_Income
1075094   +          +     1.07329017540495 * S_Mnt  +    -0.44517902573644 *
1075095   +        S_MntGoldProds  +    -1.57417593135497 * S_MntMeatProducts
1075096   +          +    -0.75359748699668 * S_MntWines  +    -1.09387259425684 *
1075097   +        S_NumDistPurchases  +    -0.81518874000435 * S_RFMstat
1075098   +          +     0.23368643717628 * S_RMntFrq  +    -0.30240544347672 *
1075099   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.10061099283455 * S_AcceptedCmpTotal + 1.72752905329456 *
S_Frq + -0.50472344084228 * S_Income + 1.07329017540495 * S_Mnt + -0.44517902573644 *
S_MntGoldProds + -1.57417593135497 * S_MntMeatProducts + -0.75359748699668 * S_MntWines +
-1.09387259425684 * S_NumDistPurchases + -0.81518874000435 * S_RFMstat + 0.23368643717628 *
S_RMntFrq + -0.30240544347672 * S_Recency ;
1075100   +   H1x1_5  =    -0.22817314877708 * S_AcceptedCmpTotal
1075101   +          +     0.28118539965414 * S_Frq  +     0.04846488460495 * S_Income
1075102   +          +     0.60106863054811 * S_Mnt  +    -0.06162179557217 *
1075103   +        S_MntGoldProds  +    -0.39180490439507 * S_MntMeatProducts
1075104   +          +    -0.21017068084579 * S_MntWines  +    -0.32161828113396 *
1075105   +        S_NumDistPurchases  +    -0.03465088483344 * S_RFMstat
1075106   +          +    -0.03147262277696 * S_RMntFrq  +     0.34128240879899 *
1075107   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.22817314877708 * S_AcceptedCmpTotal + 0.28118539965414 *
S_Frq + 0.04846488460495 * S_Income + 0.60106863054811 * S_Mnt + -0.06162179557217 *
S_MntGoldProds + -0.39180490439507 * S_MntMeatProducts + -0.21017068084579 * S_MntWines +
-0.32161828113396 * S_NumDistPurchases + -0.03465088483344 * S_RFMstat + -0.03147262277696 *
S_RMntFrq + 0.34128240879899 * S_Recency ;
1075108   +   H1x1_1  = H1x1_1  +     0.15249883445815 * G_Marital_Status0
1075109   +          +    -0.18818735950093 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.15249883445815 * G_Marital_Status0 +
-0.18818735950093 * G_Marital_Status1 ;
1075110   +   H1x1_2  = H1x1_2  +     1.59824663671134 * G_Marital_Status0
1075111   +          +     1.96669325047054 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 1.59824663671134 * G_Marital_Status0 +
1.96669325047054 * G_Marital_Status1 ;
1075112   +   H1x1_3  = H1x1_3  +    -0.31220761109652 * G_Marital_Status0
1075113   +          +     0.52212878383819 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.31220761109652 * G_Marital_Status0 +
0.52212878383819 * G_Marital_Status1 ;
1075114   +   H1x1_4  = H1x1_4  +    -1.92906338619158 * G_Marital_Status0
1075115   +          +    -1.25145208260948 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -1.92906338619158 * G_Marital_Status0 +
-1.25145208260948 * G_Marital_Status1 ;
1075116   +   H1x1_5  = H1x1_5  +    -0.18067263072436 * G_Marital_Status0
1075117   +          +    -0.07780771416761 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.18067263072436 * G_Marital_Status0 +
-0.07780771416761 * G_Marital_Status1 ;
1075118   +   H1x1_1  =     1.46324697396327 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.46324697396327 + H1x1_1 ;
1075119   +   H1x1_2  =     1.36794472927517 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.36794472927517 + H1x1_2 ;
1075120   +   H1x1_3  =    -0.57612320445046 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.57612320445046 + H1x1_3 ;
1075121   +   H1x1_4  =    -1.53805674056235 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.53805674056235 + H1x1_4 ;
1075122   +   H1x1_5  =     0.35787040000513 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.35787040000513 + H1x1_5 ;
1075123   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1075124   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1075125   +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
1075126   +   H1x1_4  = SIN(H1x1_4 );
MPRINT(EM_DIAGRAM):   H1x1_4 = SIN(H1x1_4 );
1075127   +   H1x1_5  = SIN(H1x1_5 );
MPRINT(EM_DIAGRAM):   H1x1_5 = SIN(H1x1_5 );
1075128   +END;
MPRINT(EM_DIAGRAM):   END;
1075129   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075130   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1075131   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1075132   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1075133   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1075134   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1075135   +END;
MPRINT(EM_DIAGRAM):   END;
1075136   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075137   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1075138   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075139   +
1075140   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1075141   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1075142   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075143   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1075144   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1075145   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075146   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1075147   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075148   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075149   +end;
MPRINT(EM_DIAGRAM):   end;
1075150   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075151   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1075152   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1075153   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1075154   +   end;
MPRINT(EM_DIAGRAM):   end;
1075155   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1075156   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1075157   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1075158   +   end;
MPRINT(EM_DIAGRAM):   end;
1075159   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075160   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075161   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075162   +   end;
MPRINT(EM_DIAGRAM):   end;
1075163   +end;
MPRINT(EM_DIAGRAM):   end;
1075164   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075165   +   P_DepVar1  =    -2.75625949468408 * H1x1_1  +    -2.04123594690263 * H1x1_2
1075166   +          +     2.55595542456674 * H1x1_3  +     2.41628841604103 * H1x1_4
1075167   +          +      -11.39673341305 * H1x1_5 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.75625949468408 * H1x1_1 + -2.04123594690263 * H1x1_2 +
2.55595542456674 * H1x1_3 + 2.41628841604103 * H1x1_4 + -11.39673341305 * H1x1_5 ;
1075168   +   P_DepVar1  =     0.62420945009508 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.62420945009508 + P_DepVar1 ;
1075169   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1075170   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1075171   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1075172   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1075173   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1075174   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1075175   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1075176   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1075177   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1075178   +END;
MPRINT(EM_DIAGRAM):   END;
1075179   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075180   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1075181   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1075182   +END;
MPRINT(EM_DIAGRAM):   END;
1075183   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1075184   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1075185   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1075186   +END;
MPRINT(EM_DIAGRAM):   END;
1075187   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1075188   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1075189   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1075190   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1075191   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1075192   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1075193   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1075194   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075195   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1075196   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075197   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1075198   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1075199   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1075200   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1075201   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1075202   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1075203   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1075204   +END;
MPRINT(EM_DIAGRAM):   END;
1075205   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075206   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1075207   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075208   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1075209   +* Renaming variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural27;
1075210   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075211   +* Renaming Posterior variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural27;
1075212   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075213   +drop AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_P_DepVar1;
1075214   +AutoNeural27_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural27_P_DepVar1 = P_DepVar1;
1075215   +drop AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_P_DepVar0;
1075216   +AutoNeural27_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural27_P_DepVar0 = P_DepVar0;
1075217   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075218   +* Renaming Into variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural27;
1075219   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075220   +length AutoNeural27_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural27_I_DepVar $32;
1075221   +drop AutoNeural27_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_I_DepVar;
1075222   +AutoNeural27_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural27_I_DepVar = I_DepVar;
1075223   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075224   +* Renaming _WARN_ variable for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural27;
1075225   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075226   +length AutoNeural27_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural27_WARN_ $4;
1075227   +drop AutoNeural27_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_WARN_;
1075228   +AutoNeural27_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural27_WARN_ = _WARN_;
1075229   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075230   +* Ensmbl53: Scoring Code of model 4 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 4 of 7;
1075231   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075232   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075233   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1075234   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1075235   +* NODE: AutoNeural33;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural33;
1075236   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075237   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075238   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1075239   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075240   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1075241   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1075242   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1075243   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1075244   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1075245   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1075246   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1075247   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1075248   +LENGTH _WARN_ $4
1075249   +      F_DepVar  $ 12
1075250   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1075251   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1075252   +
1075253   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1075254   +
1075255   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1075256   +
1075257   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1075258   +
1075259   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1075260   +
1075261   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1075262   +
1075263   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1075264   +
1075265   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1075266   +
1075267   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1075268   +
1075269   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1075270   +
1075271   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1075272   +
1075273   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1075274   +
1075275   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1075276   +
1075277   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1075278   +
1075279   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1075280   +
1075281   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1075282   +
1075283   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1075284   +
1075285   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1075286   +
1075287   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075288   +
1075289   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1075290   +
1075291   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1075292   +
1075293   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1075294   +
1075295   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1075296   +
1075297   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1075298   +
1075299   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1075300   +
1075301   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1075302   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1075303   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1075304   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075305   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075306   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1075307   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075308   +end;
MPRINT(EM_DIAGRAM):   end;
1075309   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075310   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1075311   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1075312   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075313   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1075314   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1075315   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1075316   +   end;
MPRINT(EM_DIAGRAM):   end;
1075317   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1075318   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1075319   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1075320   +   end;
MPRINT(EM_DIAGRAM):   end;
1075321   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1075322   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1075323   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1075324   +   end;
MPRINT(EM_DIAGRAM):   end;
1075325   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075326   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075327   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075328   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1075329   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075330   +   end;
MPRINT(EM_DIAGRAM):   end;
1075331   +end;
MPRINT(EM_DIAGRAM):   end;
1075332   +
1075333   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075334   +*** Checking missing input Interval
1075335   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1075336   +
1075337   +IF NMISS(
1075338   +   AcceptedCmpTotal ,
1075339   +   Frq ,
1075340   +   Income ,
1075341   +   Mnt ,
1075342   +   MntGoldProds ,
1075343   +   MntMeatProducts ,
1075344   +   MntWines ,
1075345   +   NumDistPurchases ,
1075346   +   RFMstat ,
1075347   +   RMntFrq ,
1075348   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1075349   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1075350   +
1075351   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075352   +END;
MPRINT(EM_DIAGRAM):   END;
1075353   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075354   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1075355   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075356   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075357   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075358   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075359   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075360   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075361   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075362   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075363   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1075364   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075365   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075366   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075367   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1075368   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075369   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075370   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075371   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075372   +END;
MPRINT(EM_DIAGRAM):   END;
1075373   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075374   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1075375   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075376   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075377   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1075378   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075379   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1075380   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075381   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1075382   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075383   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1075384   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075385   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1075386   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1075387   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075388   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075389   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1075390   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075391   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1075392   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
The SAS System
 
1075393   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075394   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1075395   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075396   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1075397   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075398   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1075399   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075400   +END;
MPRINT(EM_DIAGRAM):   END;
1075401   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075402   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1075403   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075404   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075405   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1075406   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075407   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075408   +   H1x1_1  =     0.33555011401553 * S_AcceptedCmpTotal
1075409   +          +    -3.02490159760157 * S_Frq  +    -0.12761482391665 * S_Income
1075410   +          +     -9.1169668394273 * S_Mnt  +     0.88214411094174 *
1075411   +        S_MntGoldProds  +     16.4212241447522 * S_MntMeatProducts
1075412   +          +     4.65784744010387 * S_MntWines  +     2.75620847659032 *
1075413   +        S_NumDistPurchases  +     5.10796074430888 * S_RFMstat
1075414   +          +    -0.15069444442326 * S_RMntFrq  +    -0.36037041233055 *
1075415   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33555011401553 * S_AcceptedCmpTotal + -3.02490159760157 *
S_Frq + -0.12761482391665 * S_Income + -9.1169668394273 * S_Mnt + 0.88214411094174 *
S_MntGoldProds + 16.4212241447522 * S_MntMeatProducts + 4.65784744010387 * S_MntWines +
2.75620847659032 * S_NumDistPurchases + 5.10796074430888 * S_RFMstat + -0.15069444442326 *
S_RMntFrq + -0.36037041233055 * S_Recency ;
1075416   +   H1x1_2  =     -6.2107002884316 * S_AcceptedCmpTotal
1075417   +          +      5.5991079844098 * S_Frq  +    -1.06506164052399 * S_Income
1075418   +          +     7.16823320768258 * S_Mnt  +     1.97115223638004 *
1075419   +        S_MntGoldProds  +     0.02973121977962 * S_MntMeatProducts
1075420   +          +     3.28931008157038 * S_MntWines  +    -3.02545356699096 *
1075421   +        S_NumDistPurchases  +    -0.45519831720714 * S_RFMstat
1075422   +          +     2.14788986039061 * S_RMntFrq  +     7.13033786501062 *
1075423   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -6.2107002884316 * S_AcceptedCmpTotal + 5.5991079844098 * S_Frq
+ -1.06506164052399 * S_Income + 7.16823320768258 * S_Mnt + 1.97115223638004 * S_MntGoldProds
+ 0.02973121977962 * S_MntMeatProducts + 3.28931008157038 * S_MntWines + -3.02545356699096 *
S_NumDistPurchases + -0.45519831720714 * S_RFMstat + 2.14788986039061 * S_RMntFrq +
7.13033786501062 * S_Recency ;
1075424   +   H1x1_3  =    -0.31707769589072 * S_AcceptedCmpTotal
1075425   +          +     -0.8436342869652 * S_Frq  +     0.04938014828703 * S_Income
1075426   +          +     0.41074885451072 * S_Mnt  +    -0.22835264468248 *
1075427   +        S_MntGoldProds  +     0.04154328332772 * S_MntMeatProducts
1075428   +          +    -0.63526276335269 * S_MntWines  +     0.16430041832418 *
1075429   +        S_NumDistPurchases  +    -0.01070081959406 * S_RFMstat
1075430   +          +    -1.56851833223581 * S_RMntFrq  +     0.62478865123427 *
1075431   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.31707769589072 * S_AcceptedCmpTotal + -0.8436342869652 *
S_Frq + 0.04938014828703 * S_Income + 0.41074885451072 * S_Mnt + -0.22835264468248 *
S_MntGoldProds + 0.04154328332772 * S_MntMeatProducts + -0.63526276335269 * S_MntWines +
0.16430041832418 * S_NumDistPurchases + -0.01070081959406 * S_RFMstat + -1.56851833223581 *
S_RMntFrq + 0.62478865123427 * S_Recency ;
1075432   +   H1x1_4  =     0.54144616315359 * S_AcceptedCmpTotal
1075433   +          +    -2.69605116285758 * S_Frq  +    -0.42453662943397 * S_Income
1075434   +          +    -0.95657675439363 * S_Mnt  +     0.24420189860131 *
1075435   +        S_MntGoldProds  +     2.44632795316553 * S_MntMeatProducts
1075436   +          +     -0.1454644222769 * S_MntWines  +     2.34899307919173 *
1075437   +        S_NumDistPurchases  +    -0.02462201574723 * S_RFMstat
1075438   +          +    -2.08470857931815 * S_RMntFrq  +    -0.76249328143214 *
1075439   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.54144616315359 * S_AcceptedCmpTotal + -2.69605116285758 *
S_Frq + -0.42453662943397 * S_Income + -0.95657675439363 * S_Mnt + 0.24420189860131 *
S_MntGoldProds + 2.44632795316553 * S_MntMeatProducts + -0.1454644222769 * S_MntWines +
2.34899307919173 * S_NumDistPurchases + -0.02462201574723 * S_RFMstat + -2.08470857931815 *
S_RMntFrq + -0.76249328143214 * S_Recency ;
1075440   +   H1x1_1  = H1x1_1  +     0.00660823494191 * G_Marital_Status0
1075441   +          +    -0.18825548425502 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.00660823494191 * G_Marital_Status0 +
-0.18825548425502 * G_Marital_Status1 ;
1075442   +   H1x1_2  = H1x1_2  +    -2.06051657300217 * G_Marital_Status0
1075443   +          +    -6.25782340834073 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -2.06051657300217 * G_Marital_Status0 +
-6.25782340834073 * G_Marital_Status1 ;
1075444   +   H1x1_3  = H1x1_3  +    -0.79419358160841 * G_Marital_Status0
1075445   +          +     0.34890327415646 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.79419358160841 * G_Marital_Status0 +
0.34890327415646 * G_Marital_Status1 ;
1075446   +   H1x1_4  = H1x1_4  +    -0.04651762606699 * G_Marital_Status0
1075447   +          +     0.31552155976549 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.04651762606699 * G_Marital_Status0 +
0.31552155976549 * G_Marital_Status1 ;
1075448   +   H1x1_1  =      9.5912267385355 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 9.5912267385355 + H1x1_1 ;
1075449   +   H1x1_2  =     -17.513407093022 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -17.513407093022 + H1x1_2 ;
1075450   +   H1x1_3  =     3.77110114695743 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 3.77110114695743 + H1x1_3 ;
1075451   +   H1x1_4  =    -1.34405555452152 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.34405555452152 + H1x1_4 ;
1075452   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1075453   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1075454   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1075455   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1075456   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1075457   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1075458   +END;
MPRINT(EM_DIAGRAM):   END;
1075459   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075460   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1075461   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1075462   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1075463   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1075464   +END;
MPRINT(EM_DIAGRAM):   END;
1075465   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075466   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1075467   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075468   +
1075469   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1075470   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1075471   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075472   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1075473   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1075474   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075475   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1075476   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075477   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075478   +end;
MPRINT(EM_DIAGRAM):   end;
1075479   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075480   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1075481   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1075482   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1075483   +   end;
MPRINT(EM_DIAGRAM):   end;
1075484   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1075485   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1075486   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1075487   +   end;
MPRINT(EM_DIAGRAM):   end;
1075488   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075489   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075490   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075491   +   end;
MPRINT(EM_DIAGRAM):   end;
1075492   +end;
MPRINT(EM_DIAGRAM):   end;
1075493   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075494   +   P_DepVar1  =     17.1648278730429 * H1x1_1  +    -5.41550544466459 * H1x1_2
1075495   +          +     -11.071053129929 * H1x1_3  +      10.744209891392 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 17.1648278730429 * H1x1_1 + -5.41550544466459 * H1x1_2 +
-11.071053129929 * H1x1_3 + 10.744209891392 * H1x1_4 ;
1075496   +   P_DepVar1  =    -12.0079203309727 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -12.0079203309727 + P_DepVar1 ;
1075497   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1075498   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1075499   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1075500   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1075501   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1075502   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1075503   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1075504   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1075505   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1075506   +END;
MPRINT(EM_DIAGRAM):   END;
1075507   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075508   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1075509   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1075510   +END;
MPRINT(EM_DIAGRAM):   END;
1075511   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1075512   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1075513   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1075514   +END;
MPRINT(EM_DIAGRAM):   END;
1075515   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1075516   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1075517   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1075518   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1075519   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1075520   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1075521   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1075522   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075523   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1075524   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075525   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1075526   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1075527   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1075528   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1075529   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1075530   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1075531   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1075532   +END;
MPRINT(EM_DIAGRAM):   END;
1075533   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075534   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1075535   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075536   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1075537   +* Renaming variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural33;
1075538   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075539   +* Renaming Posterior variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural33;
1075540   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075541   +drop AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar1;
1075542   +AutoNeural33_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar1 = P_DepVar1;
1075543   +drop AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar0;
1075544   +AutoNeural33_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar0 = P_DepVar0;
1075545   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075546   +* Renaming Into variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural33;
1075547   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075548   +length AutoNeural33_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural33_I_DepVar $32;
1075549   +drop AutoNeural33_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_I_DepVar;
1075550   +AutoNeural33_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural33_I_DepVar = I_DepVar;
1075551   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075552   +* Renaming _WARN_ variable for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural33;
1075553   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075554   +length AutoNeural33_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural33_WARN_ $4;
1075555   +drop AutoNeural33_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_WARN_;
1075556   +AutoNeural33_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural33_WARN_ = _WARN_;
1075557   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075558   +* Ensmbl53: Scoring Code of model 5 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 5 of 7;
1075559   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075560   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075561   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1075562   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1075563   +* NODE: AutoNeural32;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural32;
1075564   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075565   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075566   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1075567   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075568   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1075569   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1075570   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1075571   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1075572   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1075573   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1075574   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1075575   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1075576   +LENGTH _WARN_ $4
1075577   +      F_DepVar  $ 12
1075578   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1075579   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1075580   +
1075581   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1075582   +
1075583   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1075584   +
1075585   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1075586   +
1075587   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1075588   +
1075589   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1075590   +
1075591   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1075592   +
1075593   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1075594   +
1075595   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1075596   +
1075597   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1075598   +
1075599   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1075600   +
1075601   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1075602   +
1075603   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1075604   +
1075605   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1075606   +
1075607   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1075608   +
1075609   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1075610   +
1075611   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1075612   +
1075613   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075614   +
1075615   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1075616   +
1075617   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1075618   +
1075619   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1075620   +
1075621   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1075622   +
1075623   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1075624   +
1075625   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1075626   +
1075627   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1075628   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1075629   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1075630   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075631   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075632   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1075633   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075634   +end;
MPRINT(EM_DIAGRAM):   end;
1075635   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075636   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1075637   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1075638   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075639   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1075640   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1075641   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1075642   +   end;
MPRINT(EM_DIAGRAM):   end;
1075643   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1075644   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1075645   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1075646   +   end;
MPRINT(EM_DIAGRAM):   end;
1075647   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1075648   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1075649   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1075650   +   end;
MPRINT(EM_DIAGRAM):   end;
1075651   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075652   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075653   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075654   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1075655   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075656   +   end;
MPRINT(EM_DIAGRAM):   end;
1075657   +end;
MPRINT(EM_DIAGRAM):   end;
1075658   +
1075659   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075660   +*** Checking missing input Interval
1075661   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1075662   +
1075663   +IF NMISS(
1075664   +   AcceptedCmpTotal ,
1075665   +   Frq ,
1075666   +   Income ,
1075667   +   Mnt ,
1075668   +   MntGoldProds ,
1075669   +   MntMeatProducts ,
1075670   +   MntWines ,
1075671   +   NumDistPurchases ,
1075672   +   RFMstat ,
1075673   +   RMntFrq ,
1075674   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1075675   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1075676   +
1075677   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075678   +END;
MPRINT(EM_DIAGRAM):   END;
1075679   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075680   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1075681   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075682   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075683   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075684   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075685   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075686   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075687   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075688   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075689   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1075690   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075691   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075692   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075693   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1075694   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075695   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075696   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075697   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075698   +END;
MPRINT(EM_DIAGRAM):   END;
1075699   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075700   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1075701   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1075702   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1075703   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1075704   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1075705   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1075706   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1075707   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1075708   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1075709   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1075710   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1075711   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1075712   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1075713   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1075714   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1075715   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1075716   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1075717   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1075718   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1075719   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1075720   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1075721   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1075722   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1075723   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1075724   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1075725   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1075726   +END;
MPRINT(EM_DIAGRAM):   END;
1075727   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075728   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1075729   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075730   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075731   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1075732   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075733   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075734   +   H1x1_1  =    -0.38956319781905 * S_AcceptedCmpTotal
1075735   +          +    -0.08624585416733 * S_Frq  +     0.14990044515556 * S_Income
1075736   +          +     1.26905422062144 * S_Mnt  +    -0.05830961868093 *
1075737   +        S_MntGoldProds  +    -0.45655804707903 * S_MntMeatProducts
1075738   +          +    -0.29008121030195 * S_MntWines  +    -0.52580257849932 *
1075739   +        S_NumDistPurchases  +     -0.1481404693781 * S_RFMstat
1075740   +          +    -0.49319351834455 * S_RMntFrq  +     0.54249594661515 *
1075741   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.38956319781905 * S_AcceptedCmpTotal + -0.08624585416733 *
S_Frq + 0.14990044515556 * S_Income + 1.26905422062144 * S_Mnt + -0.05830961868093 *
S_MntGoldProds + -0.45655804707903 * S_MntMeatProducts + -0.29008121030195 * S_MntWines +
-0.52580257849932 * S_NumDistPurchases + -0.1481404693781 * S_RFMstat + -0.49319351834455 *
S_RMntFrq + 0.54249594661515 * S_Recency ;
1075742   +   H1x1_2  =     0.38779821527892 * S_AcceptedCmpTotal
1075743   +          +    -1.22315175769362 * S_Frq  +      1.1802985172513 * S_Income
1075744   +          +     2.08508390361851 * S_Mnt  +     0.42839460332296 *
1075745   +        S_MntGoldProds  +      0.9001009517595 * S_MntMeatProducts
1075746   +          +     0.43882453107711 * S_MntWines  +    -0.77730415774439 *
1075747   +        S_NumDistPurchases  +    -0.48791819347803 * S_RFMstat
1075748   +          +    -0.74366268198551 * S_RMntFrq  +    -0.17482075484114 *
1075749   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.38779821527892 * S_AcceptedCmpTotal + -1.22315175769362 *
S_Frq + 1.1802985172513 * S_Income + 2.08508390361851 * S_Mnt + 0.42839460332296 *
S_MntGoldProds + 0.9001009517595 * S_MntMeatProducts + 0.43882453107711 * S_MntWines +
-0.77730415774439 * S_NumDistPurchases + -0.48791819347803 * S_RFMstat + -0.74366268198551 *
S_RMntFrq + -0.17482075484114 * S_Recency ;
1075750   +   H1x1_3  =    -0.22134549179782 * S_AcceptedCmpTotal
1075751   +          +    -0.06178114920397 * S_Frq  +     -1.4524474173679 * S_Income
1075752   +          +    -7.85805111281271 * S_Mnt  +    -0.25260256377303 *
1075753   +        S_MntGoldProds  +     2.24650170262612 * S_MntMeatProducts
1075754   +          +    -0.28495082016886 * S_MntWines  +     2.83659961242127 *
1075755   +        S_NumDistPurchases  +     0.42067169774523 * S_RFMstat
1075756   +          +     1.71392925516862 * S_RMntFrq  +    -0.09478915012781 *
1075757   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.22134549179782 * S_AcceptedCmpTotal + -0.06178114920397 *
S_Frq + -1.4524474173679 * S_Income + -7.85805111281271 * S_Mnt + -0.25260256377303 *
S_MntGoldProds + 2.24650170262612 * S_MntMeatProducts + -0.28495082016886 * S_MntWines +
2.83659961242127 * S_NumDistPurchases + 0.42067169774523 * S_RFMstat + 1.71392925516862 *
S_RMntFrq + -0.09478915012781 * S_Recency ;
1075758   +   H1x1_1  = H1x1_1  +    -0.22060541309937 * G_Marital_Status0
1075759   +          +    -0.46692703876881 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.22060541309937 * G_Marital_Status0 +
-0.46692703876881 * G_Marital_Status1 ;
1075760   +   H1x1_2  = H1x1_2  +     0.47416822018188 * G_Marital_Status0
1075761   +          +     -2.1058284684647 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47416822018188 * G_Marital_Status0 +
-2.1058284684647 * G_Marital_Status1 ;
1075762   +   H1x1_3  = H1x1_3  +    -0.44803855270897 * G_Marital_Status0
1075763   +          +     1.41026185304551 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.44803855270897 * G_Marital_Status0 +
1.41026185304551 * G_Marital_Status1 ;
1075764   +   H1x1_1  =     1.63085271667721 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.63085271667721 + H1x1_1 ;
1075765   +   H1x1_2  =     0.28277859846654 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.28277859846654 + H1x1_2 ;
1075766   +   H1x1_3  =     -1.8890871578635 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -1.8890871578635 + H1x1_3 ;
1075767   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1075768   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1075769   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1075770   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1075771   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1075772   +END;
MPRINT(EM_DIAGRAM):   END;
1075773   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075774   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1075775   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1075776   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1075777   +END;
MPRINT(EM_DIAGRAM):   END;
1075778   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075779   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1075780   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075781   +
1075782   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1075783   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1075784   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075785   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1075786   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1075787   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075788   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1075789   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075790   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075791   +end;
MPRINT(EM_DIAGRAM):   end;
1075792   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075793   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1075794   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1075795   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1075796   +   end;
MPRINT(EM_DIAGRAM):   end;
1075797   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1075798   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1075799   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1075800   +   end;
MPRINT(EM_DIAGRAM):   end;
1075801   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075802   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1075803   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1075804   +   end;
MPRINT(EM_DIAGRAM):   end;
1075805   +end;
MPRINT(EM_DIAGRAM):   end;
1075806   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1075807   +   P_DepVar1  =    -23.6822744769009 * H1x1_1  +     16.0380566008578 * H1x1_2
1075808   +          +     15.3446320724554 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -23.6822744769009 * H1x1_1 + 16.0380566008578 * H1x1_2 +
15.3446320724554 * H1x1_3 ;
1075809   +   P_DepVar1  =     0.67225691696469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.67225691696469 + P_DepVar1 ;
1075810   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1075811   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1075812   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1075813   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1075814   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1075815   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1075816   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1075817   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1075818   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1075819   +END;
MPRINT(EM_DIAGRAM):   END;
1075820   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1075821   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1075822   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1075823   +END;
MPRINT(EM_DIAGRAM):   END;
1075824   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1075825   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1075826   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1075827   +END;
MPRINT(EM_DIAGRAM):   END;
1075828   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1075829   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1075830   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1075831   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1075832   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1075833   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1075834   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1075835   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075836   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1075837   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075838   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1075839   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1075840   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1075841   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1075842   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1075843   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1075844   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1075845   +END;
MPRINT(EM_DIAGRAM):   END;
1075846   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075847   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1075848   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1075849   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1075850   +* Renaming variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural32;
1075851   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075852   +* Renaming Posterior variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural32;
1075853   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075854   +drop AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_P_DepVar1;
1075855   +AutoNeural32_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural32_P_DepVar1 = P_DepVar1;
1075856   +drop AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_P_DepVar0;
1075857   +AutoNeural32_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural32_P_DepVar0 = P_DepVar0;
1075858   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075859   +* Renaming Into variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural32;
1075860   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075861   +length AutoNeural32_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural32_I_DepVar $32;
1075862   +drop AutoNeural32_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_I_DepVar;
1075863   +AutoNeural32_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural32_I_DepVar = I_DepVar;
1075864   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075865   +* Renaming _WARN_ variable for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural32;
1075866   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075867   +length AutoNeural32_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural32_WARN_ $4;
1075868   +drop AutoNeural32_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_WARN_;
1075869   +AutoNeural32_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural32_WARN_ = _WARN_;
1075870   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075871   +* Ensmbl53: Scoring Code of model 6 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 6 of 7;
1075872   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075873   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075874   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1075875   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1075876   +* NODE: AutoNeural31;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural31;
1075877   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1075878   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075879   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1075880   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1075881   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1075882   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1075883   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1075884   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1075885   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1075886   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1075887   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1075888   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1075889   +LENGTH _WARN_ $4
1075890   +      F_DepVar  $ 12
1075891   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1075892   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1075893   +
1075894   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1075895   +
1075896   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1075897   +
1075898   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1075899   +
1075900   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1075901   +
1075902   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1075903   +
1075904   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1075905   +
1075906   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1075907   +
1075908   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1075909   +
1075910   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1075911   +
1075912   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1075913   +
1075914   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1075915   +
1075916   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1075917   +
1075918   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1075919   +
1075920   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1075921   +
1075922   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1075923   +
1075924   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1075925   +
1075926   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1075927   +
1075928   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1075929   +
1075930   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1075931   +
1075932   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1075933   +
1075934   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1075935   +
1075936   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1075937   +
1075938   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1075939   +
1075940   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1075941   +
1075942   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1075943   +
1075944   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1075945   +
1075946   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1075947   +
1075948   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1075949   +
1075950   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1075951   +
1075952   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1075953   +
1075954   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1075955   +
1075956   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1075957   +
1075958   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1075959   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1075960   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1075961   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075962   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075963   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1075964   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075965   +end;
MPRINT(EM_DIAGRAM):   end;
1075966   +else do;
MPRINT(EM_DIAGRAM):   else do;
1075967   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1075968   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1075969   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1075970   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1075971   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1075972   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1075973   +   end;
MPRINT(EM_DIAGRAM):   end;
1075974   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1075975   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1075976   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1075977   +   end;
MPRINT(EM_DIAGRAM):   end;
1075978   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1075979   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1075980   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1075981   +   end;
MPRINT(EM_DIAGRAM):   end;
1075982   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1075983   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1075984   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1075985   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1075986   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1075987   +   end;
MPRINT(EM_DIAGRAM):   end;
1075988   +end;
MPRINT(EM_DIAGRAM):   end;
1075989   +
1075990   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1075991   +*** Checking missing input Interval
1075992   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1075993   +
1075994   +IF NMISS(
1075995   +   AcceptedCmpTotal ,
1075996   +   Frq ,
1075997   +   Income ,
1075998   +   Mnt ,
1075999   +   MntGoldProds ,
1076000   +   MntMeatProducts ,
1076001   +   MntWines ,
1076002   +   NumDistPurchases ,
1076003   +   RFMstat ,
1076004   +   RMntFrq ,
1076005   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1076006   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1076007   +
1076008   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1076009   +END;
MPRINT(EM_DIAGRAM):   END;
1076010   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076011   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1076012   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076013   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076014   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1076015   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1076016   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1076017   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1076018   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1076019   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1076020   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1076021   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1076022   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1076023   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1076024   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1076025   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1076026   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1076027   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1076028   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1076029   +END;
MPRINT(EM_DIAGRAM):   END;
1076030   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076031   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1076032   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1076033   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1076034   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1076035   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1076036   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1076037   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1076038   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1076039   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1076040   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1076041   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1076042   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1076043   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1076044   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1076045   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1076046   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1076047   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1076048   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1076049   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1076050   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1076051   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1076052   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1076053   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1076054   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1076055   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1076056   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1076057   +END;
MPRINT(EM_DIAGRAM):   END;
1076058   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076059   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1076060   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076061   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076062   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1076063   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076064   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076065   +   H1x1_1  =     0.03659823017812 * S_AcceptedCmpTotal
1076066   +          +    -1.19763341876145 * S_Frq  +     0.81238202822952 * S_Income
1076067   +          +     1.88011676145119 * S_Mnt  +     0.17620967209108 *
1076068   +        S_MntGoldProds  +    -0.01645582313184 * S_MntMeatProducts
1076069   +          +     0.51002049519212 * S_MntWines  +     0.25222197723244 *
1076070   +        S_NumDistPurchases  +     0.28056722928561 * S_RFMstat
1076071   +          +    -1.12243193103334 * S_RMntFrq  +    -0.37511560424314 *
1076072   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.03659823017812 * S_AcceptedCmpTotal + -1.19763341876145 *
S_Frq + 0.81238202822952 * S_Income + 1.88011676145119 * S_Mnt + 0.17620967209108 *
S_MntGoldProds + -0.01645582313184 * S_MntMeatProducts + 0.51002049519212 * S_MntWines +
0.25222197723244 * S_NumDistPurchases + 0.28056722928561 * S_RFMstat + -1.12243193103334 *
S_RMntFrq + -0.37511560424314 * S_Recency ;
1076073   +   H1x1_2  =     0.18983412995843 * S_AcceptedCmpTotal
1076074   +          +    -0.36018162246349 * S_Frq  +     0.01068760327542 * S_Income
1076075   +          +    -0.89719147415619 * S_Mnt  +     0.11241727599926 *
1076076   +        S_MntGoldProds  +     0.64236815353055 * S_MntMeatProducts
1076077   +          +     0.36278145113777 * S_MntWines  +     0.34466813565445 *
1076078   +        S_NumDistPurchases  +     0.05359534034679 * S_RFMstat
1076079   +          +     0.02704700607418 * S_RMntFrq  +     -0.3718472688023 *
1076080   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.18983412995843 * S_AcceptedCmpTotal + -0.36018162246349 *
S_Frq + 0.01068760327542 * S_Income + -0.89719147415619 * S_Mnt + 0.11241727599926 *
S_MntGoldProds + 0.64236815353055 * S_MntMeatProducts + 0.36278145113777 * S_MntWines +
0.34466813565445 * S_NumDistPurchases + 0.05359534034679 * S_RFMstat + 0.02704700607418 *
S_RMntFrq + -0.3718472688023 * S_Recency ;
1076081   +   H1x1_1  = H1x1_1  +     0.40642305557546 * G_Marital_Status0
1076082   +          +     -0.0248646279252 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.40642305557546 * G_Marital_Status0 +
-0.0248646279252 * G_Marital_Status1 ;
1076083   +   H1x1_2  = H1x1_2  +     0.16115803721995 * G_Marital_Status0
1076084   +          +     0.05904755469144 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.16115803721995 * G_Marital_Status0 +
0.05904755469144 * G_Marital_Status1 ;
1076085   +   H1x1_1  =     0.33463349044957 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33463349044957 + H1x1_1 ;
1076086   +   H1x1_2  =    -3.62976809107266 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -3.62976809107266 + H1x1_2 ;
1076087   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1076088   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1076089   +END;
MPRINT(EM_DIAGRAM):   END;
1076090   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076091   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1076092   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1076093   +END;
MPRINT(EM_DIAGRAM):   END;
1076094   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076095   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1076096   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076097   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076098   +   H1x2_1  =    -0.36010169192455 * S_AcceptedCmpTotal
1076099   +          +    -0.59887603386433 * S_Frq  +     0.50990837522658 * S_Income
1076100   +          +    -1.11866059151852 * S_Mnt  +     0.36285188228582 *
1076101   +        S_MntGoldProds  +     1.22856170475832 * S_MntMeatProducts
1076102   +          +     1.46123404932164 * S_MntWines  +    -0.01510122045686 *
1076103   +        S_NumDistPurchases  +     0.53310564732407 * S_RFMstat
1076104   +          +    -0.40691094193511 * S_RMntFrq  +     0.45756644061361 *
1076105   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.36010169192455 * S_AcceptedCmpTotal + -0.59887603386433 *
S_Frq + 0.50990837522658 * S_Income + -1.11866059151852 * S_Mnt + 0.36285188228582 *
S_MntGoldProds + 1.22856170475832 * S_MntMeatProducts + 1.46123404932164 * S_MntWines +
-0.01510122045686 * S_NumDistPurchases + 0.53310564732407 * S_RFMstat + -0.40691094193511 *
S_RMntFrq + 0.45756644061361 * S_Recency ;
1076106   +   H1x2_2  =    -0.17932261343465 * S_AcceptedCmpTotal
1076107   +          +     1.20080978426162 * S_Frq  +     0.18118647708641 * S_Income
1076108   +          +     0.31901116297924 * S_Mnt  +     0.02135897416621 *
1076109   +        S_MntGoldProds  +    -1.12534829348468 * S_MntMeatProducts
1076110   +          +     0.57649851666461 * S_MntWines  +    -1.46542585484816 *
1076111   +        S_NumDistPurchases  +    -0.20960777623629 * S_RFMstat
1076112   +          +      0.6962031545587 * S_RMntFrq  +     0.00840421006739 *
1076113   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.17932261343465 * S_AcceptedCmpTotal + 1.20080978426162 *
S_Frq + 0.18118647708641 * S_Income + 0.31901116297924 * S_Mnt + 0.02135897416621 *
S_MntGoldProds + -1.12534829348468 * S_MntMeatProducts + 0.57649851666461 * S_MntWines +
-1.46542585484816 * S_NumDistPurchases + -0.20960777623629 * S_RFMstat + 0.6962031545587 *
S_RMntFrq + 0.00840421006739 * S_Recency ;
1076114   +   H1x2_1  = H1x2_1  +    -0.05195034052296 * G_Marital_Status0
1076115   +          +     -0.2774675863976 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -0.05195034052296 * G_Marital_Status0 +
-0.2774675863976 * G_Marital_Status1 ;
1076116   +   H1x2_2  = H1x2_2  +     0.01901604294952 * G_Marital_Status0
1076117   +          +      -0.277144006775 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + 0.01901604294952 * G_Marital_Status0 + -0.277144006775
* G_Marital_Status1 ;
1076118   +   H1x2_1  =     1.53233871423223 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.53233871423223 + H1x2_1 ;
1076119   +   H1x2_2  =     1.35238678006556 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.35238678006556 + H1x2_2 ;
1076120   +   H1x2_1  = SIN(H1x2_1 );
MPRINT(EM_DIAGRAM):   H1x2_1 = SIN(H1x2_1 );
1076121   +   H1x2_2  = SIN(H1x2_2 );
MPRINT(EM_DIAGRAM):   H1x2_2 = SIN(H1x2_2 );
1076122   +END;
MPRINT(EM_DIAGRAM):   END;
1076123   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076124   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1076125   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1076126   +END;
MPRINT(EM_DIAGRAM):   END;
1076127   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076128   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1076129   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076130   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076131   +   H1x3_1  =     1.63523210720409 * S_AcceptedCmpTotal
1076132   +          +     0.41751349520438 * S_Frq  +    -0.87449723255309 * S_Income
1076133   +          +    -0.47825070320724 * S_Mnt  +     0.76630810205636 *
1076134   +        S_MntGoldProds  +    -0.35835365889925 * S_MntMeatProducts
1076135   +          +    -1.27333688175297 * S_MntWines  +    -1.52770581313638 *
1076136   +        S_NumDistPurchases  +     0.86851574498866 * S_RFMstat
1076137   +          +     0.84614746872207 * S_RMntFrq  +    -1.64268632744477 *
1076138   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.63523210720409 * S_AcceptedCmpTotal + 0.41751349520438 *
S_Frq + -0.87449723255309 * S_Income + -0.47825070320724 * S_Mnt + 0.76630810205636 *
S_MntGoldProds + -0.35835365889925 * S_MntMeatProducts + -1.27333688175297 * S_MntWines +
-1.52770581313638 * S_NumDistPurchases + 0.86851574498866 * S_RFMstat + 0.84614746872207 *
S_RMntFrq + -1.64268632744477 * S_Recency ;
1076139   +   H1x3_2  =    -0.18638529120439 * S_AcceptedCmpTotal
1076140   +          +     0.76011175462816 * S_Frq  +     0.58495336465132 * S_Income
1076141   +          +     0.65856698208574 * S_Mnt  +     0.68781212622472 *
1076142   +        S_MntGoldProds  +    -1.09375532907934 * S_MntMeatProducts
1076143   +          +     1.39481639500189 * S_MntWines  +     0.26914802103737 *
1076144   +        S_NumDistPurchases  +    -2.20511156805519 * S_RFMstat
1076145   +          +     1.66705142994155 * S_RMntFrq  +    -0.36249885315985 *
1076146   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.18638529120439 * S_AcceptedCmpTotal + 0.76011175462816 *
S_Frq + 0.58495336465132 * S_Income + 0.65856698208574 * S_Mnt + 0.68781212622472 *
S_MntGoldProds + -1.09375532907934 * S_MntMeatProducts + 1.39481639500189 * S_MntWines +
0.26914802103737 * S_NumDistPurchases + -2.20511156805519 * S_RFMstat + 1.66705142994155 *
S_RMntFrq + -0.36249885315985 * S_Recency ;
1076147   +   H1x3_1  = H1x3_1  +     -0.2579393569494 * G_Marital_Status0
1076148   +          +    -1.04614665932456 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -0.2579393569494 * G_Marital_Status0 +
-1.04614665932456 * G_Marital_Status1 ;
1076149   +   H1x3_2  = H1x3_2  +    -1.03096078089306 * G_Marital_Status0
1076150   +          +    -0.71974289565489 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + -1.03096078089306 * G_Marital_Status0 +
-0.71974289565489 * G_Marital_Status1 ;
1076151   +   H1x3_1  =    -0.91456189694636 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.91456189694636 + H1x3_1 ;
1076152   +   H1x3_2  =    -0.51701043559885 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.51701043559885 + H1x3_2 ;
1076153   +   H1x3_1  = SIN(H1x3_1 );
MPRINT(EM_DIAGRAM):   H1x3_1 = SIN(H1x3_1 );
1076154   +   H1x3_2  = SIN(H1x3_2 );
MPRINT(EM_DIAGRAM):   H1x3_2 = SIN(H1x3_2 );
1076155   +END;
MPRINT(EM_DIAGRAM):   END;
1076156   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076157   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1076158   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1076159   +END;
MPRINT(EM_DIAGRAM):   END;
1076160   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076161   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1076162   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076163   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076164   +   H2x1_1  =     1.47132066677712 * H1x1_1  +      1.2723487532385 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.47132066677712 * H1x1_1 + 1.2723487532385 * H1x1_2 ;
1076165   +   H2x1_2  =     1.58711243971308 * H1x1_1  +      6.5189759089623 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.58711243971308 * H1x1_1 + 6.5189759089623 * H1x1_2 ;
1076166   +   H2x1_1  = H2x1_1  +     1.30878911727231 * H1x2_1
1076167   +          +     2.19496661698373 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.30878911727231 * H1x2_1 + 2.19496661698373 * H1x2_2 ;
1076168   +   H2x1_2  = H2x1_2  +    -3.82744270061369 * H1x2_1
1076169   +          +      1.3090956402929 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -3.82744270061369 * H1x2_1 + 1.3090956402929 * H1x2_2 ;
1076170   +   H2x1_1  = H2x1_1  +    -0.97307968271784 * H1x3_1
1076171   +          +     0.17025511053322 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.97307968271784 * H1x3_1 + 0.17025511053322 * H1x3_2
;
1076172   +   H2x1_2  = H2x1_2  +    -0.00685159977192 * H1x3_1
1076173   +          +     0.53377830648041 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.00685159977192 * H1x3_1 + 0.53377830648041 * H1x3_2
;
1076174   +   H2x1_1  =    -2.88828567261654 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -2.88828567261654 + H2x1_1 ;
1076175   +   H2x1_2  =    -0.63666932052712 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.63666932052712 + H2x1_2 ;
1076176   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076177   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076178   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1076179   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1076180   +END;
MPRINT(EM_DIAGRAM):   END;
1076181   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076182   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1076183   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1076184   +END;
MPRINT(EM_DIAGRAM):   END;
1076185   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076186   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1076187   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076188   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076189   +   H2x2_1  =     -0.1591646734645 * H1x1_1  +     2.50898584287812 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.1591646734645 * H1x1_1 + 2.50898584287812 * H1x1_2 ;
1076190   +   H2x2_2  =    -1.04022138862095 * H1x1_1  +     -3.2120641538371 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.04022138862095 * H1x1_1 + -3.2120641538371 * H1x1_2 ;
1076191   +   H2x2_1  = H2x2_1  +     0.95364577994168 * H1x2_1
1076192   +          +     0.39917449615996 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.95364577994168 * H1x2_1 + 0.39917449615996 * H1x2_2 ;
1076193   +   H2x2_2  = H2x2_2  +     0.34367752685876 * H1x2_1
1076194   +          +    -0.43345610313251 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.34367752685876 * H1x2_1 + -0.43345610313251 * H1x2_2
;
1076195   +   H2x2_1  = H2x2_1  +    -0.21053791455319 * H1x3_1
1076196   +          +     1.30320774323126 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21053791455319 * H1x3_1 + 1.30320774323126 * H1x3_2
;
1076197   +   H2x2_2  = H2x2_2  +    -0.56776778702573 * H1x3_1
1076198   +          +     0.23307461428861 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -0.56776778702573 * H1x3_1 + 0.23307461428861 * H1x3_2
;
1076199   +   H2x2_1  =    -0.57800274966727 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.57800274966727 + H2x2_1 ;
1076200   +   H2x2_2  =     -0.3490585254981 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -0.3490585254981 + H2x2_2 ;
1076201   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076202   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076203   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1076204   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1076205   +END;
MPRINT(EM_DIAGRAM):   END;
1076206   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076207   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1076208   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1076209   +END;
MPRINT(EM_DIAGRAM):   END;
1076210   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076211   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1076212   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076213   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076214   +   H3x1_1  =     2.93892662286754 * H2x1_1  +     4.69530667636314 * H2x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 2.93892662286754 * H2x1_1 + 4.69530667636314 * H2x1_2 ;
1076215   +   H3x1_1  = H3x1_1  +     0.63147427004529 * H2x2_1
1076216   +          +    -3.38971951524722 * H2x2_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.63147427004529 * H2x2_1 + -3.38971951524722 * H2x2_2
;
1076217   +   H3x1_1  =    -2.10378320265168 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -2.10378320265168 + H3x1_1 ;
1076218   +   H3x1_2  = 0;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0;
1076219   +   _MAX_ = MAX (H3x1_1 , H3x1_2 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 );
1076220   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1076221   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1076222   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1076223   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1076224   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1076225   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1076226   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1076227   +END;
MPRINT(EM_DIAGRAM):   END;
1076228   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076229   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1076230   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1076231   +END;
MPRINT(EM_DIAGRAM):   END;
1076232   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076233   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1076234   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076235   +
1076236   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1076237   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1076238   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1076239   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1076240   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1076241   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1076242   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1076243   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1076244   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1076245   +end;
MPRINT(EM_DIAGRAM):   end;
1076246   +else do;
MPRINT(EM_DIAGRAM):   else do;
1076247   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1076248   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1076249   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1076250   +   end;
MPRINT(EM_DIAGRAM):   end;
1076251   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1076252   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1076253   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1076254   +   end;
MPRINT(EM_DIAGRAM):   end;
1076255   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1076256   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1076257   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1076258   +   end;
MPRINT(EM_DIAGRAM):   end;
1076259   +end;
MPRINT(EM_DIAGRAM):   end;
1076260   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076261   +   P_DepVar1  =    -8.80200545202031 * H3x1_1  +    -0.19646708431763 * H3x1_2
1076262   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.80200545202031 * H3x1_1 + -0.19646708431763 * H3x1_2 ;
1076263   +   P_DepVar1  =     3.75158164611687 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.75158164611687 + P_DepVar1 ;
1076264   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1076265   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1076266   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1076267   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1076268   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1076269   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1076270   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1076271   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1076272   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1076273   +END;
MPRINT(EM_DIAGRAM):   END;
1076274   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076275   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1076276   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1076277   +END;
MPRINT(EM_DIAGRAM):   END;
1076278   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1076279   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1076280   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1076281   +END;
MPRINT(EM_DIAGRAM):   END;
1076282   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1076283   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1076284   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1076285   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1076286   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1076287   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1076288   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1076289   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076290   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1076291   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076292   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1076293   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1076294   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1076295   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1076296   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1076297   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1076298   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1076299   +END;
MPRINT(EM_DIAGRAM):   END;
1076300   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1076301   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1076302   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1076303   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1076304   +* Renaming variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural31;
1076305   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076306   +* Renaming Posterior variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural31;
1076307   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076308   +drop AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_P_DepVar1;
1076309   +AutoNeural31_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural31_P_DepVar1 = P_DepVar1;
1076310   +drop AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_P_DepVar0;
1076311   +AutoNeural31_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural31_P_DepVar0 = P_DepVar0;
1076312   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076313   +* Renaming Into variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural31;
1076314   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076315   +length AutoNeural31_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural31_I_DepVar $32;
1076316   +drop AutoNeural31_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_I_DepVar;
1076317   +AutoNeural31_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural31_I_DepVar = I_DepVar;
1076318   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076319   +* Renaming _WARN_ variable for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural31;
1076320   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076321   +length AutoNeural31_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural31_WARN_ $4;
1076322   +drop AutoNeural31_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_WARN_;
1076323   +AutoNeural31_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural31_WARN_ = _WARN_;
1076324   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076325   +* Ensmbl53: Scoring Code of model 7 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 7 of 7;
1076326   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076327   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076328   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1076329   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1076330   +* NODE: AutoNeural30;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural30;
1076331   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076332   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1076333   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1076334   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1076335   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1076336   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1076337   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1076338   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1076339   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1076340   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1076341   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1076342   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1076343   +LENGTH _WARN_ $4
1076344   +      F_DepVar  $ 12
1076345   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1076346   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1076347   +
1076348   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1076349   +
1076350   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1076351   +
1076352   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1076353   +
1076354   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1076355   +
1076356   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1076357   +
1076358   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1076359   +
1076360   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1076361   +
1076362   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1076363   +
1076364   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1076365   +
1076366   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1076367   +
1076368   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1076369   +
1076370   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1076371   +
1076372   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1076373   +
1076374   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1076375   +
1076376   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1076377   +
1076378   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1076379   +
1076380   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1076381   +
1076382   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1076383   +
1076384   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1076385   +
1076386   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1076387   +
1076388   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1076389   +
1076390   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1076391   +
1076392   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1076393   +
1076394   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1076395   +
1076396   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1076397   +
1076398   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1076399   +
1076400   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1076401   +
1076402   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1076403   +
1076404   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1076405   +
1076406   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1076407   +
1076408   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1076409   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1076410   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1076411   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1076412   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1076413   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1076414   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1076415   +end;
MPRINT(EM_DIAGRAM):   end;
1076416   +else do;
MPRINT(EM_DIAGRAM):   else do;
1076417   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1076418   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1076419   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1076420   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1076421   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1076422   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1076423   +   end;
MPRINT(EM_DIAGRAM):   end;
1076424   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1076425   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1076426   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1076427   +   end;
MPRINT(EM_DIAGRAM):   end;
1076428   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1076429   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1076430   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1076431   +   end;
MPRINT(EM_DIAGRAM):   end;
1076432   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1076433   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1076434   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1076435   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1076436   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1076437   +   end;
MPRINT(EM_DIAGRAM):   end;
1076438   +end;
MPRINT(EM_DIAGRAM):   end;
1076439   +
1076440   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076441   +*** Checking missing input Interval
1076442   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1076443   +
1076444   +IF NMISS(
1076445   +   AcceptedCmpTotal ,
1076446   +   Frq ,
1076447   +   Income ,
1076448   +   Mnt ,
1076449   +   MntGoldProds ,
1076450   +   MntMeatProducts ,
1076451   +   MntWines ,
1076452   +   NumDistPurchases ,
1076453   +   RFMstat ,
1076454   +   RMntFrq ,
1076455   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1076456   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1076457   +
1076458   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1076459   +END;
MPRINT(EM_DIAGRAM):   END;
1076460   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076461   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1076462   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076463   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076464   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1076465   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1076466   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1076467   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1076468   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1076469   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1076470   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1076471   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1076472   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1076473   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1076474   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1076475   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1076476   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1076477   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1076478   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1076479   +END;
MPRINT(EM_DIAGRAM):   END;
1076480   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076481   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1076482   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1076483   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1076484   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1076485   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1076486   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1076487   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1076488   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1076489   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1076490   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1076491   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1076492   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1076493   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1076494   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1076495   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1076496   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1076497   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1076498   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1076499   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1076500   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1076501   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1076502   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1076503   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1076504   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1076505   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1076506   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1076507   +END;
MPRINT(EM_DIAGRAM):   END;
1076508   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076509   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1076510   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076511   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076512   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1076513   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076514   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076515   +   H1x1_1  =     0.04025840082513 * S_AcceptedCmpTotal
1076516   +          +     0.06318752729093 * S_Frq  +    -1.29545791179409 * S_Income
1076517   +          +    -7.11030940481191 * S_Mnt  +     0.43390451556969 *
1076518   +        S_MntGoldProds  +     1.69733563869673 * S_MntMeatProducts
1076519   +          +     0.48225589030087 * S_MntWines  +     2.50429846731068 *
1076520   +        S_NumDistPurchases  +     0.19831933540707 * S_RFMstat
1076521   +          +     0.96752741277283 * S_RMntFrq  +    -0.27394913723816 *
1076522   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.04025840082513 * S_AcceptedCmpTotal + 0.06318752729093 *
S_Frq + -1.29545791179409 * S_Income + -7.11030940481191 * S_Mnt + 0.43390451556969 *
S_MntGoldProds + 1.69733563869673 * S_MntMeatProducts + 0.48225589030087 * S_MntWines +
2.50429846731068 * S_NumDistPurchases + 0.19831933540707 * S_RFMstat + 0.96752741277283 *
S_RMntFrq + -0.27394913723816 * S_Recency ;
1076523   +   H1x1_1  = H1x1_1  +    -0.13186660711464 * G_Marital_Status0
1076524   +          +     0.76507926337086 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.13186660711464 * G_Marital_Status0 +
0.76507926337086 * G_Marital_Status1 ;
1076525   +   H1x1_1  =    -2.07751077372903 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -2.07751077372903 + H1x1_1 ;
1076526   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076527   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076528   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1076529   +END;
MPRINT(EM_DIAGRAM):   END;
1076530   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076531   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1076532   +END;
MPRINT(EM_DIAGRAM):   END;
1076533   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076534   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1076535   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076536   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076537   +   H1x2_1  =     0.04623108287373 * S_AcceptedCmpTotal
1076538   +          +     0.51673349328259 * S_Frq  +    -0.55409697473564 * S_Income
1076539   +          +    -1.80152141029664 * S_Mnt  +    -0.01192709316085 *
1076540   +        S_MntGoldProds  +    -1.08887322486716 * S_MntMeatProducts
1076541   +          +    -0.54592829528894 * S_MntWines  +     0.87903819952137 *
1076542   +        S_NumDistPurchases  +     0.15549845875066 * S_RFMstat
1076543   +          +     0.64330086736687 * S_RMntFrq  +    -0.34615492895156 *
1076544   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.04623108287373 * S_AcceptedCmpTotal + 0.51673349328259 *
S_Frq + -0.55409697473564 * S_Income + -1.80152141029664 * S_Mnt + -0.01192709316085 *
S_MntGoldProds + -1.08887322486716 * S_MntMeatProducts + -0.54592829528894 * S_MntWines +
0.87903819952137 * S_NumDistPurchases + 0.15549845875066 * S_RFMstat + 0.64330086736687 *
S_RMntFrq + -0.34615492895156 * S_Recency ;
1076545   +   H1x2_1  = H1x2_1  +     0.04272112278258 * G_Marital_Status0
1076546   +          +     0.52128005949051 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.04272112278258 * G_Marital_Status0 +
0.52128005949051 * G_Marital_Status1 ;
1076547   +   H1x2_1  =    -1.26211132425318 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.26211132425318 + H1x2_1 ;
1076548   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076549   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076550   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1076551   +END;
MPRINT(EM_DIAGRAM):   END;
1076552   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076553   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1076554   +END;
MPRINT(EM_DIAGRAM):   END;
1076555   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076556   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1076557   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076558   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076559   +   H1x3_1  =    -0.31931196892076 * S_AcceptedCmpTotal
1076560   +          +     0.88013014607652 * S_Frq  +       2.380671405121 * S_Income
1076561   +          +    -1.76438631408259 * S_Mnt  +    -0.88002382547081 *
1076562   +        S_MntGoldProds  +     3.22143288077158 * S_MntMeatProducts
1076563   +          +    -1.46872497431142 * S_MntWines  +     4.48983574481035 *
1076564   +        S_NumDistPurchases  +     1.49229101598701 * S_RFMstat
1076565   +          +     0.86000773065844 * S_RMntFrq  +     0.41345680894813 *
1076566   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.31931196892076 * S_AcceptedCmpTotal + 0.88013014607652 *
S_Frq + 2.380671405121 * S_Income + -1.76438631408259 * S_Mnt + -0.88002382547081 *
S_MntGoldProds + 3.22143288077158 * S_MntMeatProducts + -1.46872497431142 * S_MntWines +
4.48983574481035 * S_NumDistPurchases + 1.49229101598701 * S_RFMstat + 0.86000773065844 *
S_RMntFrq + 0.41345680894813 * S_Recency ;
1076567   +   H1x3_1  = H1x3_1  +     0.24244728138592 * G_Marital_Status0
1076568   +          +     0.68199092237732 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + 0.24244728138592 * G_Marital_Status0 +
0.68199092237732 * G_Marital_Status1 ;
1076569   +   H1x3_1  =      0.8344057531016 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.8344057531016 + H1x3_1 ;
1076570   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076571   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076572   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1076573   +END;
MPRINT(EM_DIAGRAM):   END;
1076574   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076575   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1076576   +END;
MPRINT(EM_DIAGRAM):   END;
1076577   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076578   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1076579   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076580   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076581   +   H1x4_1  =    -0.13659878639954 * S_AcceptedCmpTotal
1076582   +          +     0.45428559765776 * S_Frq  +    -0.42693519984843 * S_Income
1076583   +          +      1.1792020785091 * S_Mnt  +     0.71939074066077 *
1076584   +        S_MntGoldProds  +    -0.72620231508443 * S_MntMeatProducts
1076585   +          +    -0.32426637270285 * S_MntWines  +    -0.38988807626314 *
1076586   +        S_NumDistPurchases  +    -3.02140616024044 * S_RFMstat
1076587   +          +     -0.8223455835322 * S_RMntFrq  +     0.94450643717764 *
1076588   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.13659878639954 * S_AcceptedCmpTotal + 0.45428559765776 *
S_Frq + -0.42693519984843 * S_Income + 1.1792020785091 * S_Mnt + 0.71939074066077 *
S_MntGoldProds + -0.72620231508443 * S_MntMeatProducts + -0.32426637270285 * S_MntWines +
-0.38988807626314 * S_NumDistPurchases + -3.02140616024044 * S_RFMstat + -0.8223455835322 *
S_RMntFrq + 0.94450643717764 * S_Recency ;
1076589   +   H1x4_1  = H1x4_1  +    -0.12208204500004 * G_Marital_Status0
1076590   +          +    -0.36246978080124 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.12208204500004 * G_Marital_Status0 +
-0.36246978080124 * G_Marital_Status1 ;
1076591   +   H1x4_1  =    -0.95371898342722 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.95371898342722 + H1x4_1 ;
1076592   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076593   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076594   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1076595   +END;
MPRINT(EM_DIAGRAM):   END;
1076596   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076597   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1076598   +END;
MPRINT(EM_DIAGRAM):   END;
1076599   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076600   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1076601   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076602   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076603   +   H2x1_1  =    -5.17307699680657 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -5.17307699680657 * H1x1_1 ;
1076604   +   H2x1_1  = H2x1_1  +     5.68206219040914 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 5.68206219040914 * H1x2_1 ;
1076605   +   H2x1_1  = H2x1_1  +      0.0671760867147 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.0671760867147 * H1x3_1 ;
1076606   +   H2x1_1  = H2x1_1  +     1.77797879568099 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.77797879568099 * H1x4_1 ;
1076607   +   H2x1_1  =    -1.18533244144823 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.18533244144823 + H2x1_1 ;
1076608   +   H2x1_1  = SIN(H2x1_1 );
MPRINT(EM_DIAGRAM):   H2x1_1 = SIN(H2x1_1 );
1076609   +END;
MPRINT(EM_DIAGRAM):   END;
1076610   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076611   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1076612   +END;
MPRINT(EM_DIAGRAM):   END;
1076613   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076614   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1076615   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076616   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076617   +   H2x2_1  =    -0.10427732572046 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.10427732572046 * H1x1_1 ;
1076618   +   H2x2_1  = H2x2_1  +    -2.43600502591825 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.43600502591825 * H1x2_1 ;
1076619   +   H2x2_1  = H2x2_1  +    -2.36291758854448 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.36291758854448 * H1x3_1 ;
1076620   +   H2x2_1  = H2x2_1  +    -0.21725276506237 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21725276506237 * H1x4_1 ;
1076621   +   H2x2_1  =     -1.6479184469931 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -1.6479184469931 + H2x2_1 ;
1076622   +   H2x2_1  = SIN(H2x2_1 );
MPRINT(EM_DIAGRAM):   H2x2_1 = SIN(H2x2_1 );
1076623   +END;
MPRINT(EM_DIAGRAM):   END;
1076624   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076625   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1076626   +END;
MPRINT(EM_DIAGRAM):   END;
1076627   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076628   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1076629   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076630   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076631   +   H2x3_1  =    -2.55881911263862 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.55881911263862 * H1x1_1 ;
1076632   +   H2x3_1  = H2x3_1  +    -1.36800479963026 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.36800479963026 * H1x2_1 ;
1076633   +   H2x3_1  = H2x3_1  +     2.49318998831913 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 2.49318998831913 * H1x3_1 ;
1076634   +   H2x3_1  = H2x3_1  +     -0.2723650813761 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -0.2723650813761 * H1x4_1 ;
1076635   +   H2x3_1  =    -2.02002422056859 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.02002422056859 + H2x3_1 ;
1076636   +   H2x3_1  = SIN(H2x3_1 );
MPRINT(EM_DIAGRAM):   H2x3_1 = SIN(H2x3_1 );
1076637   +END;
MPRINT(EM_DIAGRAM):   END;
1076638   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076639   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1076640   +END;
MPRINT(EM_DIAGRAM):   END;
1076641   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076642   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1076643   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076644   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076645   +   H3x1_1  =    -5.17928987039105 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -5.17928987039105 * H2x1_1 ;
1076646   +   H3x1_1  = H3x1_1  +    -4.99188815628878 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -4.99188815628878 * H2x2_1 ;
1076647   +   H3x1_1  = H3x1_1  +    -1.59478766396441 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.59478766396441 * H2x3_1 ;
1076648   +   H3x1_1  =    -1.17125580012514 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -1.17125580012514 + H3x1_1 ;
1076649   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076650   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076651   +   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x1_1 = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
1076652   +END;
MPRINT(EM_DIAGRAM):   END;
1076653   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076654   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1076655   +END;
MPRINT(EM_DIAGRAM):   END;
1076656   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076657   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1076658   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076659   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076660   +   H3x2_1  =       2.158894329803 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 2.158894329803 * H2x1_1 ;
1076661   +   H3x2_1  = H3x2_1  +    -2.32757193457059 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -2.32757193457059 * H2x2_1 ;
1076662   +   H3x2_1  = H3x2_1  +    -6.00752921212942 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -6.00752921212942 * H2x3_1 ;
1076663   +   H3x2_1  =    -0.08802993131411 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.08802993131411 + H3x2_1 ;
1076664   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076665   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076666   +   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x2_1 = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
1076667   +END;
MPRINT(EM_DIAGRAM):   END;
1076668   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076669   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1076670   +END;
MPRINT(EM_DIAGRAM):   END;
1076671   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076672   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1076673   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076674   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076675   +   H4x1_1  =      7.3411593355967 * H3x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 7.3411593355967 * H3x1_1 ;
1076676   +   H4x1_1  = H4x1_1  +    -3.06647078805944 * H3x2_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -3.06647078805944 * H3x2_1 ;
1076677   +   H4x1_1  =    -1.39824841795123 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = -1.39824841795123 + H4x1_1 ;
1076678   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1076679   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1076680   +   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H4x1_1 = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
1076681   +END;
MPRINT(EM_DIAGRAM):   END;
1076682   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076683   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1076684   +END;
MPRINT(EM_DIAGRAM):   END;
1076685   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076686   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1076687   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076688   +
1076689   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1076690   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1076691   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1076692   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1076693   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1076694   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1076695   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1076696   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1076697   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1076698   +end;
MPRINT(EM_DIAGRAM):   end;
1076699   +else do;
MPRINT(EM_DIAGRAM):   else do;
1076700   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1076701   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1076702   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1076703   +   end;
MPRINT(EM_DIAGRAM):   end;
1076704   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1076705   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1076706   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1076707   +   end;
MPRINT(EM_DIAGRAM):   end;
1076708   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1076709   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1076710   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1076711   +   end;
MPRINT(EM_DIAGRAM):   end;
1076712   +end;
MPRINT(EM_DIAGRAM):   end;
1076713   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1076714   +   P_DepVar1  =     9.74622448352833 * H4x1_1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 9.74622448352833 * H4x1_1 ;
1076715   +   P_DepVar1  =    -7.88591846838259 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.88591846838259 + P_DepVar1 ;
1076716   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1076717   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1076718   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1076719   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1076720   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1076721   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1076722   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1076723   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1076724   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1076725   +END;
MPRINT(EM_DIAGRAM):   END;
1076726   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1076727   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1076728   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1076729   +END;
MPRINT(EM_DIAGRAM):   END;
1076730   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1076731   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1076732   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1076733   +END;
MPRINT(EM_DIAGRAM):   END;
1076734   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1076735   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1076736   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1076737   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1076738   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1076739   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1076740   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1076741   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076742   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1076743   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1076744   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1076745   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1076746   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1076747   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1076748   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1076749   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1076750   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1076751   +END;
MPRINT(EM_DIAGRAM):   END;
1076752   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1076753   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1076754   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1076755   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1076756   +* Renaming variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural30;
1076757   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076758   +* Renaming Posterior variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural30;
1076759   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076760   +drop AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_P_DepVar1;
1076761   +AutoNeural30_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural30_P_DepVar1 = P_DepVar1;
1076762   +drop AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_P_DepVar0;
1076763   +AutoNeural30_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural30_P_DepVar0 = P_DepVar0;
1076764   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076765   +* Renaming Into variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural30;
1076766   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076767   +length AutoNeural30_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural30_I_DepVar $32;
1076768   +drop AutoNeural30_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_I_DepVar;
1076769   +AutoNeural30_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural30_I_DepVar = I_DepVar;
1076770   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076771   +* Renaming _WARN_ variable for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural30;
1076772   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076773   +length AutoNeural30_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural30_WARN_ $4;
1076774   +drop AutoNeural30_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_WARN_;
1076775   +AutoNeural30_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural30_WARN_ = _WARN_;
1076776   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076777   +* Ensmbl53: Voting to produce predicted target;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Voting to produce predicted target;
1076778   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076779   +array Ensmbl53_post{2} _temporary_;
MPRINT(EM_DIAGRAM):   array Ensmbl53_post{2} _temporary_;
1076780   +array Ensmbl53_count{2} _temporary_;
MPRINT(EM_DIAGRAM):   array Ensmbl53_count{2} _temporary_;
1076781   +array Ensmbl53_level{2} $32 _temporary_ (
1076782   +"1"
1076783   +"0"
1076784   +);
MPRINT(EM_DIAGRAM):   array Ensmbl53_level{2} $32 _temporary_ ( "1" "0" );
1076785   +do i=1 to 2;
MPRINT(EM_DIAGRAM):   do i=1 to 2;
1076786   +Ensmbl53_post{i} = 0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{i} = 0;
1076787   +Ensmbl53_count{i} = 0;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{i} = 0;
1076788   +end;
MPRINT(EM_DIAGRAM):   end;
1076789   +if AutoNeural29_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural29_I_DepVar = Ensmbl53_level{1} then do;
1076790   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076791   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural29_P_DepVar1;
1076792   +end;
MPRINT(EM_DIAGRAM):   end;
1076793   +if AutoNeural28_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural28_I_DepVar = Ensmbl53_level{1} then do;
1076794   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076795   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural28_P_DepVar1;
1076796   +end;
MPRINT(EM_DIAGRAM):   end;
1076797   +if AutoNeural27_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural27_I_DepVar = Ensmbl53_level{1} then do;
1076798   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076799   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural27_P_DepVar1;
1076800   +end;
MPRINT(EM_DIAGRAM):   end;
1076801   +if AutoNeural33_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural33_I_DepVar = Ensmbl53_level{1} then do;
1076802   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076803   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural33_P_DepVar1;
1076804   +end;
MPRINT(EM_DIAGRAM):   end;
1076805   +if AutoNeural32_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural32_I_DepVar = Ensmbl53_level{1} then do;
1076806   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076807   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural32_P_DepVar1;
1076808   +end;
MPRINT(EM_DIAGRAM):   end;
1076809   +if AutoNeural31_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural31_I_DepVar = Ensmbl53_level{1} then do;
1076810   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076811   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural31_P_DepVar1;
1076812   +end;
MPRINT(EM_DIAGRAM):   end;
1076813   +if AutoNeural30_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural30_I_DepVar = Ensmbl53_level{1} then do;
1076814   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1076815   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural30_P_DepVar1;
1076816   +end;
MPRINT(EM_DIAGRAM):   end;
1076817   +if AutoNeural29_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural29_I_DepVar = Ensmbl53_level{2} then do;
1076818   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076819   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural29_P_DepVar0;
1076820   +end;
MPRINT(EM_DIAGRAM):   end;
1076821   +if AutoNeural28_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural28_I_DepVar = Ensmbl53_level{2} then do;
1076822   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076823   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural28_P_DepVar0;
1076824   +end;
MPRINT(EM_DIAGRAM):   end;
1076825   +if AutoNeural27_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural27_I_DepVar = Ensmbl53_level{2} then do;
1076826   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076827   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural27_P_DepVar0;
1076828   +end;
MPRINT(EM_DIAGRAM):   end;
1076829   +if AutoNeural33_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural33_I_DepVar = Ensmbl53_level{2} then do;
1076830   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076831   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural33_P_DepVar0;
1076832   +end;
MPRINT(EM_DIAGRAM):   end;
1076833   +if AutoNeural32_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural32_I_DepVar = Ensmbl53_level{2} then do;
1076834   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076835   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural32_P_DepVar0;
1076836   +end;
MPRINT(EM_DIAGRAM):   end;
1076837   +if AutoNeural31_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural31_I_DepVar = Ensmbl53_level{2} then do;
1076838   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076839   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural31_P_DepVar0;
1076840   +end;
MPRINT(EM_DIAGRAM):   end;
1076841   +if AutoNeural30_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural30_I_DepVar = Ensmbl53_level{2} then do;
1076842   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1076843   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural30_P_DepVar0;
1076844   +end;
MPRINT(EM_DIAGRAM):   end;
1076845   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076846   +* Ensmbl53: Determine Into Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Determine Into Variable;
1076847   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076848   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
1076849   +drop i vote_count vote_post;
MPRINT(EM_DIAGRAM):   drop i vote_count vote_post;
1076850   +vote_count = max(
1076851   +Ensmbl53_count{1} ,
1076852   +Ensmbl53_count{2}
1076853   +);
MPRINT(EM_DIAGRAM):   vote_count = max( Ensmbl53_count{1} , Ensmbl53_count{2} );
1076854   +do i=1 to 2;
MPRINT(EM_DIAGRAM):   do i=1 to 2;
1076855   +if Ensmbl53_count{i}=vote_count and Ensmbl53_post{i}>vote_post then do;
MPRINT(EM_DIAGRAM):   if Ensmbl53_count{i}=vote_count and Ensmbl53_post{i}>vote_post then do;
1076856   +I_DepVar = Ensmbl53_level{i};
MPRINT(EM_DIAGRAM):   I_DepVar = Ensmbl53_level{i};
1076857   +vote_post = Ensmbl53_count{i};
MPRINT(EM_DIAGRAM):   vote_post = Ensmbl53_count{i};
1076858   +end;
MPRINT(EM_DIAGRAM):   end;
1076859   +end;
MPRINT(EM_DIAGRAM):   end;
1076860   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076861   +* Ensmbl53: Compute posterior vars using models predicting the chosen level;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Compute posterior vars using models predicting the chosen
level;
1076862   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076863   +P_DepVar1 = 0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1076864   +P_DepVar0 = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1076865   +if I_DepVar = AutoNeural29_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural29_I_DepVar then do;
1076866   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural29_P_DepVar1;
1076867   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural29_P_DepVar0;
1076868   +end;
MPRINT(EM_DIAGRAM):   end;
1076869   +if I_DepVar = AutoNeural28_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural28_I_DepVar then do;
1076870   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural28_P_DepVar1;
1076871   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural28_P_DepVar0;
1076872   +end;
MPRINT(EM_DIAGRAM):   end;
1076873   +if I_DepVar = AutoNeural27_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural27_I_DepVar then do;
1076874   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural27_P_DepVar1;
1076875   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural27_P_DepVar0;
1076876   +end;
MPRINT(EM_DIAGRAM):   end;
1076877   +if I_DepVar = AutoNeural33_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural33_I_DepVar then do;
1076878   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural33_P_DepVar1;
1076879   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural33_P_DepVar0;
1076880   +end;
MPRINT(EM_DIAGRAM):   end;
1076881   +if I_DepVar = AutoNeural32_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural32_I_DepVar then do;
1076882   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural32_P_DepVar1;
1076883   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural32_P_DepVar0;
1076884   +end;
MPRINT(EM_DIAGRAM):   end;
1076885   +if I_DepVar = AutoNeural31_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural31_I_DepVar then do;
1076886   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural31_P_DepVar1;
1076887   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural31_P_DepVar0;
1076888   +end;
MPRINT(EM_DIAGRAM):   end;
1076889   +if I_DepVar = AutoNeural30_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural30_I_DepVar then do;
1076890   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural30_P_DepVar1;
1076891   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural30_P_DepVar0;
1076892   +end;
MPRINT(EM_DIAGRAM):   end;
1076893   +* Ensmbl53: Averaging posterior;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Averaging posterior;
1076894   +P_DepVar1 = P_DepVar1/vote_count;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1/vote_count;
1076895   +P_DepVar0 = P_DepVar0/vote_count;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0/vote_count;
1076896   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076897   +* Ensmbl53: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Producing Unformatted variable;
1076898   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076899   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
1076900   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
1076901   +else
1076902   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
1076903   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076904   +* Ensmbl53: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Computing _WARN_ Variable;
1076905   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076906   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1076907   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
1076908   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
1076909   +if index(AUTONEURAL29_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076909  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076910   +if index(AUTONEURAL29_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076910  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076911   +if index(AUTONEURAL29_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076911  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076912   +if index(AUTONEURAL29_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076912  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076913   +if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076913  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076914   +if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076914  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076915   +if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076915  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076916   +if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076916  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076917   +if index(AUTONEURAL27_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076917  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076918   +if index(AUTONEURAL27_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076918  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076919   +if index(AUTONEURAL27_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076919  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076920   +if index(AUTONEURAL27_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076920  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076921   +if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076921  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076922   +if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076922  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076923   +if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076923  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076924   +if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076924  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076925   +if index(AUTONEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076925  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076926   +if index(AUTONEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076926  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076927   +if index(AUTONEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076927  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076928   +if index(AUTONEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076928  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076929   +if index(AUTONEURAL31_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076929  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076930   +if index(AUTONEURAL31_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076930  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076931   +if index(AUTONEURAL31_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076931  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076932   +if index(AUTONEURAL31_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076932  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076933   +if index(AUTONEURAL30_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1076933  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1076934   +if index(AUTONEURAL30_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1076934  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1076935   +if index(AUTONEURAL30_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1076935  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1076936   +if index(AUTONEURAL30_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1076936  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1076937   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076938   +* Ensmbl53: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Computing Residual Vars;
1076939   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076940   +if
1076941   +F_DepVar NE '1'
1076942   +AND F_DepVar NE '0'
1076943   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
1076944   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1076945   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1076946   +end;
MPRINT(EM_DIAGRAM):   end;
1076947   +else do;
MPRINT(EM_DIAGRAM):   else do;
1076948   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1076949   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1076950   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1076951   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
1076952   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
1076953   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1076954   +END;
MPRINT(EM_DIAGRAM):   END;
1076955   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1076956    run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL53_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.AUTONEURAL29_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.13 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1076957    quit;
1076958    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1076959    filename emflow
1076959  ! "C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring AUTONEURAL29_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076960    *------------------------------------------------------------*;
1076961    * Ensmbl53: Scoring AUTONEURAL29_VALIDATE data;
1076962    *------------------------------------------------------------*;
1076963    data EMWS8.Ensmbl53_VALIDATE
1076964    / view=EMWS8.Ensmbl53_VALIDATE
1076965    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_VALIDATE / view=EMWS8.Ensmbl53_VALIDATE ;
1076966    set EMWS8.AutoNeural29_VALIDATE
1076967    ;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural29_VALIDATE ;
1076968    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMFLOWSCORE.sas.
1076969   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076970   +* Ensmbl53: Combine model for DepVar;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Combine model for DepVar;
1076971   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076972   +* Ensmbl53: Scoring Code of model 1 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 1 of 7;
1076973   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076974   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076975   +* TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
1076976   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1076977   +* NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
1076978   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076979   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076980   +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
1076981   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1076982   +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
1076983   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076984   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076985   +* TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
1076986   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1076987   +* NODE: Filter;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
1076988   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076989   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076990   +* TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
1076991   +* TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
1076992   +* NODE: EMCODE4;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE4;
1076993   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1076994   +
1076995   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1076996   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1076996  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1076997   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1076998   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1076999   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1077000   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1077001   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
1077002   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077003   +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
1077004   +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
1077005   +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
1077006   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077007   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077008   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1077009   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077010   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1077011   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1077012   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
1077013   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077014   +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
1077015   +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
1077016   +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
1077017   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077018   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077019   +* TOOL: Variable selection Class;
MPRINT(EM_DIAGRAM):   * TOOL: Variable selection Class;
1077020   +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
1077021   +* NODE: Varsel;
MPRINT(EM_DIAGRAM):   * NODE: Varsel;
1077022   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077023   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1077024   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1077025   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1077026   +
1077027   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1077028   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1077029   +
1077030   +
1077031   +/*----G_Marital_Status begin----*/
1077032   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   length _NORM8 $ 8;
1077033   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1077034   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1077035   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1077036   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1077037   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1077038   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1077039   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1077040   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1077041   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1077042   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1077043   +end;
MPRINT(EM_DIAGRAM):   end;
1077044   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status= "Grouped Levels for Marital_Status";
1077045   +/*----G_Marital_Status end----*/
1077046   +
1077047   +
1077048   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1077049   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1077050   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
1077051   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077052   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1077053   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1077054   +* NODE: AutoNeural29;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural29;
1077055   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077056   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1077057   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1077058   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1077059   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1077060   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1077061   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1077062   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1077063   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1077064   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1077065   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1077066   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1077067   +LENGTH _WARN_ $4
1077068   +      F_DepVar  $ 12
1077069   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1077070   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1077071   +
1077072   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1077073   +
1077074   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1077075   +
1077076   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1077077   +
1077078   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1077079   +
1077080   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1077081   +
1077082   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1077083   +
1077084   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1077085   +
1077086   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1077087   +
1077088   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1077089   +
1077090   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1077091   +
1077092   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1077093   +
1077094   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1077095   +
1077096   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1077097   +
1077098   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1077099   +
1077100   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1077101   +
1077102   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1077103   +
1077104   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1077105   +
1077106   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1077107   +
1077108   +      label H1x1_7 = 'Hidden: H1x1_=7' ;
MPRINT(EM_DIAGRAM):   label H1x1_7 = 'Hidden: H1x1_=7' ;
1077109   +
1077110   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1077111   +
1077112   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1077113   +
1077114   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1077115   +
1077116   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1077117   +
1077118   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1077119   +
1077120   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1077121   +
1077122   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1077123   +
1077124   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1077125   +
1077126   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1077127   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1077128   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1077129   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1077130   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1077131   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1077132   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077133   +end;
MPRINT(EM_DIAGRAM):   end;
1077134   +else do;
MPRINT(EM_DIAGRAM):   else do;
1077135   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1077136   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1077137   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1077138   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1077139   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1077140   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1077141   +   end;
MPRINT(EM_DIAGRAM):   end;
1077142   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1077143   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1077144   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1077145   +   end;
MPRINT(EM_DIAGRAM):   end;
1077146   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1077147   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1077148   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1077149   +   end;
MPRINT(EM_DIAGRAM):   end;
1077150   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1077151   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1077152   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1077153   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1077154   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077155   +   end;
MPRINT(EM_DIAGRAM):   end;
1077156   +end;
MPRINT(EM_DIAGRAM):   end;
1077157   +
1077158   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077159   +*** Checking missing input Interval
1077160   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1077161   +
1077162   +IF NMISS(
1077163   +   AcceptedCmpTotal ,
1077164   +   Frq ,
1077165   +   Income ,
1077166   +   Mnt ,
1077167   +   MntGoldProds ,
1077168   +   MntMeatProducts ,
1077169   +   MntWines ,
1077170   +   NumDistPurchases ,
1077171   +   RFMstat ,
1077172   +   RMntFrq ,
1077173   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1077174   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1077175   +
1077176   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077177   +END;
MPRINT(EM_DIAGRAM):   END;
1077178   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077179   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1077180   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077181   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077182   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1077183   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1077184   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1077185   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1077186   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1077187   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1077188   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1077189   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1077190   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1077191   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1077192   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1077193   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1077194   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1077195   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1077196   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1077197   +END;
MPRINT(EM_DIAGRAM):   END;
1077198   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077199   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1077200   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1077201   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1077202   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1077203   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1077204   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1077205   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1077206   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1077207   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1077208   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1077209   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1077210   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1077211   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1077212   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1077213   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1077214   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1077215   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1077216   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1077217   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1077218   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1077219   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1077220   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1077221   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1077222   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1077223   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1077224   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1077225   +END;
MPRINT(EM_DIAGRAM):   END;
1077226   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077227   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1077228   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077229   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077230   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1077231   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077232   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077233   +   H1x1_1  =    -1.99300782242957 * S_AcceptedCmpTotal
1077234   +          +     2.12004224248217 * S_Frq  +     3.86828667262904 * S_Income
1077235   +          +     2.77648198770608 * S_Mnt  +    -2.27326773671069 *
1077236   +        S_MntGoldProds  +    -0.27399687657599 * S_MntMeatProducts
1077237   +          +     2.26137957922507 * S_MntWines  +     0.14135280902221 *
1077238   +        S_NumDistPurchases  +     1.12048709605553 * S_RFMstat
1077239   +          +     0.99315934409036 * S_RMntFrq  +     1.21818826467727 *
1077240   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.99300782242957 * S_AcceptedCmpTotal + 2.12004224248217 *
S_Frq + 3.86828667262904 * S_Income + 2.77648198770608 * S_Mnt + -2.27326773671069 *
S_MntGoldProds + -0.27399687657599 * S_MntMeatProducts + 2.26137957922507 * S_MntWines +
0.14135280902221 * S_NumDistPurchases + 1.12048709605553 * S_RFMstat + 0.99315934409036 *
S_RMntFrq + 1.21818826467727 * S_Recency ;
1077241   +   H1x1_2  =    -0.46080527925139 * S_AcceptedCmpTotal
1077242   +          +     1.22986184660358 * S_Frq  +     1.25416218398238 * S_Income
1077243   +          +      0.7698101051046 * S_Mnt  +    -0.24851515302824 *
1077244   +        S_MntGoldProds  +    -1.02206883329868 * S_MntMeatProducts
1077245   +          +    -2.60436726665032 * S_MntWines  +     1.42856046102253 *
1077246   +        S_NumDistPurchases  +     0.23036228891547 * S_RFMstat
1077247   +          +    -0.44196680894425 * S_RMntFrq  +     1.47726327092789 *
1077248   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.46080527925139 * S_AcceptedCmpTotal + 1.22986184660358 *
S_Frq + 1.25416218398238 * S_Income + 0.7698101051046 * S_Mnt + -0.24851515302824 *
S_MntGoldProds + -1.02206883329868 * S_MntMeatProducts + -2.60436726665032 * S_MntWines +
1.42856046102253 * S_NumDistPurchases + 0.23036228891547 * S_RFMstat + -0.44196680894425 *
S_RMntFrq + 1.47726327092789 * S_Recency ;
1077249   +   H1x1_3  =    -2.72041257472943 * S_AcceptedCmpTotal
1077250   +          +     2.18007007875237 * S_Frq  +    -3.41389425682735 * S_Income
1077251   +          +     1.22111404132155 * S_Mnt  +     0.13965132551243 *
1077252   +        S_MntGoldProds  +    -1.44679609979492 * S_MntMeatProducts
1077253   +          +     1.32449625366546 * S_MntWines  +     0.71474658567846 *
1077254   +        S_NumDistPurchases  +    -1.11377169665392 * S_RFMstat
1077255   +          +    -0.23272811318878 * S_RMntFrq  +     3.38352057173892 *
1077256   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -2.72041257472943 * S_AcceptedCmpTotal + 2.18007007875237 *
S_Frq + -3.41389425682735 * S_Income + 1.22111404132155 * S_Mnt + 0.13965132551243 *
S_MntGoldProds + -1.44679609979492 * S_MntMeatProducts + 1.32449625366546 * S_MntWines +
0.71474658567846 * S_NumDistPurchases + -1.11377169665392 * S_RFMstat + -0.23272811318878 *
S_RMntFrq + 3.38352057173892 * S_Recency ;
1077257   +   H1x1_4  =    -0.53914082027029 * S_AcceptedCmpTotal
1077258   +          +     3.52541527909413 * S_Frq  +     0.47386294116539 * S_Income
1077259   +          +     1.74856835081997 * S_Mnt  +    -0.31608698854628 *
1077260   +        S_MntGoldProds  +    -4.08585161438784 * S_MntMeatProducts
1077261   +          +     1.11934057687184 * S_MntWines  +    -4.23069217087257 *
1077262   +        S_NumDistPurchases  +    -0.45058242594518 * S_RFMstat
1077263   +          +     2.24526854282726 * S_RMntFrq  +     0.46541621801996 *
1077264   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -0.53914082027029 * S_AcceptedCmpTotal + 3.52541527909413 *
S_Frq + 0.47386294116539 * S_Income + 1.74856835081997 * S_Mnt + -0.31608698854628 *
S_MntGoldProds + -4.08585161438784 * S_MntMeatProducts + 1.11934057687184 * S_MntWines +
-4.23069217087257 * S_NumDistPurchases + -0.45058242594518 * S_RFMstat + 2.24526854282726 *
S_RMntFrq + 0.46541621801996 * S_Recency ;
1077265   +   H1x1_5  =     0.16652182962256 * S_AcceptedCmpTotal
1077266   +          +    -2.34082830868767 * S_Frq  +     0.06017749299853 * S_Income
1077267   +          +    -3.61434433922311 * S_Mnt  +    -0.15794212009402 *
1077268   +        S_MntGoldProds  +     5.32833368617196 * S_MntMeatProducts
1077269   +          +     1.70496933504273 * S_MntWines  +     2.85445845094536 *
1077270   +        S_NumDistPurchases  +     1.88219523605925 * S_RFMstat
1077271   +          +     0.75869801637089 * S_RMntFrq  +     0.08064297106734 *
1077272   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.16652182962256 * S_AcceptedCmpTotal + -2.34082830868767 *
S_Frq + 0.06017749299853 * S_Income + -3.61434433922311 * S_Mnt + -0.15794212009402 *
S_MntGoldProds + 5.32833368617196 * S_MntMeatProducts + 1.70496933504273 * S_MntWines +
2.85445845094536 * S_NumDistPurchases + 1.88219523605925 * S_RFMstat + 0.75869801637089 *
S_RMntFrq + 0.08064297106734 * S_Recency ;
1077273   +   H1x1_6  =     1.97422379745385 * S_AcceptedCmpTotal
1077274   +          +    -0.18806921540808 * S_Frq  +    -1.45393613178942 * S_Income
1077275   +          +    -1.71382589206496 * S_Mnt  +    -0.86398659373382 *
1077276   +        S_MntGoldProds  +    -0.55933907393534 * S_MntMeatProducts
1077277   +          +    -2.04088833388184 * S_MntWines  +     1.33825297425801 *
1077278   +        S_NumDistPurchases  +    -1.84916943620006 * S_RFMstat
1077279   +          +     1.10268410707441 * S_RMntFrq  +    -3.24538880603902 *
1077280   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.97422379745385 * S_AcceptedCmpTotal + -0.18806921540808 *
S_Frq + -1.45393613178942 * S_Income + -1.71382589206496 * S_Mnt + -0.86398659373382 *
S_MntGoldProds + -0.55933907393534 * S_MntMeatProducts + -2.04088833388184 * S_MntWines +
1.33825297425801 * S_NumDistPurchases + -1.84916943620006 * S_RFMstat + 1.10268410707441 *
S_RMntFrq + -3.24538880603902 * S_Recency ;
1077281   +   H1x1_7  =    -0.04334303258083 * S_AcceptedCmpTotal
1077282   +          +      1.2911623736286 * S_Frq  +    -2.28992194197276 * S_Income
1077283   +          +    -0.46322849796029 * S_Mnt  +    -0.61987255353555 *
1077284   +        S_MntGoldProds  +    -0.70448430141235 * S_MntMeatProducts
1077285   +          +    -2.07867791807129 * S_MntWines  +    -1.36577325340948 *
1077286   +        S_NumDistPurchases  +    -1.20867908080733 * S_RFMstat
1077287   +          +     1.13377434281641 * S_RMntFrq  +     0.49995615625441 *
1077288   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_7 = -0.04334303258083 * S_AcceptedCmpTotal + 1.2911623736286 *
S_Frq + -2.28992194197276 * S_Income + -0.46322849796029 * S_Mnt + -0.61987255353555 *
S_MntGoldProds + -0.70448430141235 * S_MntMeatProducts + -2.07867791807129 * S_MntWines +
-1.36577325340948 * S_NumDistPurchases + -1.20867908080733 * S_RFMstat + 1.13377434281641 *
S_RMntFrq + 0.49995615625441 * S_Recency ;
1077289   +   H1x1_1  = H1x1_1  +     -1.7035629341514 * G_Marital_Status0
1077290   +          +    -0.88839271772433 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -1.7035629341514 * G_Marital_Status0 +
-0.88839271772433 * G_Marital_Status1 ;
1077291   +   H1x1_2  = H1x1_2  +     0.47234648810132 * G_Marital_Status0
1077292   +          +     0.49781009278812 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47234648810132 * G_Marital_Status0 +
0.49781009278812 * G_Marital_Status1 ;
1077293   +   H1x1_3  = H1x1_3  +     0.04803102756566 * G_Marital_Status0
1077294   +          +     3.45859276392218 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.04803102756566 * G_Marital_Status0 +
3.45859276392218 * G_Marital_Status1 ;
1077295   +   H1x1_4  = H1x1_4  +    -0.00794915276466 * G_Marital_Status0
1077296   +          +    -0.88877093101914 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.00794915276466 * G_Marital_Status0 +
-0.88877093101914 * G_Marital_Status1 ;
1077297   +   H1x1_5  = H1x1_5  +     0.17344052282277 * G_Marital_Status0
1077298   +          +     0.07512544812374 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 0.17344052282277 * G_Marital_Status0 +
0.07512544812374 * G_Marital_Status1 ;
1077299   +   H1x1_6  = H1x1_6  +     0.69797087079749 * G_Marital_Status0
1077300   +          +     1.99160337429042 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + 0.69797087079749 * G_Marital_Status0 +
1.99160337429042 * G_Marital_Status1 ;
1077301   +   H1x1_7  = H1x1_7  +    -1.90814013352903 * G_Marital_Status0
1077302   +          +    -0.58260071621307 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = H1x1_7 + -1.90814013352903 * G_Marital_Status0 +
-0.58260071621307 * G_Marital_Status1 ;
1077303   +   H1x1_1  =      0.4509613443627 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.4509613443627 + H1x1_1 ;
1077304   +   H1x1_2  =     3.28102437302443 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 3.28102437302443 + H1x1_2 ;
1077305   +   H1x1_3  =    -0.59732076258377 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.59732076258377 + H1x1_3 ;
1077306   +   H1x1_4  =     3.04302174126598 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.04302174126598 + H1x1_4 ;
1077307   +   H1x1_5  =     4.11173403634453 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 4.11173403634453 + H1x1_5 ;
1077308   +   H1x1_6  =     4.51964221881808 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 4.51964221881808 + H1x1_6 ;
1077309   +   H1x1_7  =     7.27061205819069 + H1x1_7 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = 7.27061205819069 + H1x1_7 ;
1077310   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1077311   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1077312   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1077313   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1077314   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1077315   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1077316   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1077317   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1077318   +   H1x1_7  = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_7 = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
1077319   +END;
MPRINT(EM_DIAGRAM):   END;
1077320   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077321   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1077322   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1077323   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1077324   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1077325   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1077326   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1077327   +   H1x1_7  = .;
MPRINT(EM_DIAGRAM):   H1x1_7 = .;
1077328   +END;
MPRINT(EM_DIAGRAM):   END;
1077329   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077330   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1077331   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077332   +
1077333   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1077334   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1077335   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1077336   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1077337   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1077338   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1077339   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1077340   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1077341   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1077342   +end;
MPRINT(EM_DIAGRAM):   end;
1077343   +else do;
MPRINT(EM_DIAGRAM):   else do;
1077344   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1077345   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1077346   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1077347   +   end;
MPRINT(EM_DIAGRAM):   end;
1077348   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1077349   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1077350   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1077351   +   end;
MPRINT(EM_DIAGRAM):   end;
1077352   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1077353   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1077354   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1077355   +   end;
MPRINT(EM_DIAGRAM):   end;
1077356   +end;
MPRINT(EM_DIAGRAM):   end;
1077357   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077358   +   P_DepVar1  =    -3.49358340904307 * H1x1_1  +    -5.28251662728987 * H1x1_2
1077359   +          +    -4.11876057817011 * H1x1_3  +    -7.73777326204979 * H1x1_4
1077360   +          +     12.8932497890238 * H1x1_5  +     6.88694832857203 * H1x1_6
1077361   +          +    -8.47048075234366 * H1x1_7 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.49358340904307 * H1x1_1 + -5.28251662728987 * H1x1_2 +
-4.11876057817011 * H1x1_3 + -7.73777326204979 * H1x1_4 + 12.8932497890238 * H1x1_5 +
6.88694832857203 * H1x1_6 + -8.47048075234366 * H1x1_7 ;
1077362   +   P_DepVar1  =     1.65092540834245 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.65092540834245 + P_DepVar1 ;
1077363   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1077364   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1077365   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1077366   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1077367   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1077368   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1077369   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1077370   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1077371   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1077372   +END;
MPRINT(EM_DIAGRAM):   END;
1077373   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077374   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1077375   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1077376   +END;
MPRINT(EM_DIAGRAM):   END;
1077377   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1077378   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1077379   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1077380   +END;
MPRINT(EM_DIAGRAM):   END;
1077381   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1077382   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1077383   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1077384   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1077385   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1077386   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1077387   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1077388   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077389   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1077390   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077391   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1077392   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1077393   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1077394   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1077395   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1077396   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1077397   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1077398   +END;
MPRINT(EM_DIAGRAM):   END;
1077399   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1077400   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1077401   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1077402   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1077403   +* Renaming variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural29;
1077404   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077405   +* Renaming Posterior variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural29;
1077406   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077407   +drop AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_P_DepVar1;
1077408   +AutoNeural29_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural29_P_DepVar1 = P_DepVar1;
1077409   +drop AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_P_DepVar0;
1077410   +AutoNeural29_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural29_P_DepVar0 = P_DepVar0;
1077411   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077412   +* Renaming Into variables for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural29;
1077413   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077414   +length AutoNeural29_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural29_I_DepVar $32;
1077415   +drop AutoNeural29_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_I_DepVar;
1077416   +AutoNeural29_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural29_I_DepVar = I_DepVar;
1077417   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077418   +* Renaming _WARN_ variable for AutoNeural29;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural29;
1077419   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077420   +length AutoNeural29_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural29_WARN_ $4;
1077421   +drop AutoNeural29_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural29_WARN_;
1077422   +AutoNeural29_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural29_WARN_ = _WARN_;
1077423   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077424   +* Ensmbl53: Scoring Code of model 2 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 2 of 7;
1077425   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077426   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077427   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1077428   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1077429   +* NODE: AutoNeural28;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural28;
1077430   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077431   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1077432   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1077433   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1077434   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1077435   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1077436   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1077437   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1077438   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1077439   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1077440   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1077441   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1077442   +LENGTH _WARN_ $4
1077443   +      F_DepVar  $ 12
1077444   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1077445   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1077446   +
1077447   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1077448   +
1077449   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1077450   +
1077451   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1077452   +
1077453   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1077454   +
1077455   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1077456   +
1077457   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1077458   +
1077459   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1077460   +
1077461   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1077462   +
1077463   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1077464   +
1077465   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1077466   +
1077467   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1077468   +
1077469   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1077470   +
1077471   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1077472   +
1077473   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1077474   +
1077475   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1077476   +
1077477   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1077478   +
1077479   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1077480   +
1077481   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1077482   +
1077483   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1077484   +
1077485   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1077486   +
1077487   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1077488   +
1077489   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1077490   +
1077491   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1077492   +
1077493   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1077494   +
1077495   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1077496   +
1077497   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1077498   +
1077499   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1077500   +
1077501   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1077502   +
1077503   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1077504   +
1077505   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1077506   +
1077507   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1077508   +
1077509   +      label H1x4_2 = 'Hidden: H1x4_=2' ;
MPRINT(EM_DIAGRAM):   label H1x4_2 = 'Hidden: H1x4_=2' ;
1077510   +
1077511   +      label H1x4_3 = 'Hidden: H1x4_=3' ;
MPRINT(EM_DIAGRAM):   label H1x4_3 = 'Hidden: H1x4_=3' ;
1077512   +
1077513   +      label H1x4_4 = 'Hidden: H1x4_=4' ;
MPRINT(EM_DIAGRAM):   label H1x4_4 = 'Hidden: H1x4_=4' ;
1077514   +
1077515   +      label H1x4_5 = 'Hidden: H1x4_=5' ;
MPRINT(EM_DIAGRAM):   label H1x4_5 = 'Hidden: H1x4_=5' ;
1077516   +
1077517   +      label H1x4_6 = 'Hidden: H1x4_=6' ;
MPRINT(EM_DIAGRAM):   label H1x4_6 = 'Hidden: H1x4_=6' ;
1077518   +
1077519   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1077520   +
1077521   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1077522   +
1077523   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1077524   +
1077525   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1077526   +
1077527   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1077528   +
1077529   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1077530   +
1077531   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1077532   +
1077533   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1077534   +
1077535   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1077536   +
1077537   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1077538   +
1077539   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1077540   +
1077541   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1077542   +
1077543   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1077544   +
1077545   +      label H2x3_2 = 'Hidden: H2x3_=2' ;
MPRINT(EM_DIAGRAM):   label H2x3_2 = 'Hidden: H2x3_=2' ;
1077546   +
1077547   +      label H2x3_3 = 'Hidden: H2x3_=3' ;
MPRINT(EM_DIAGRAM):   label H2x3_3 = 'Hidden: H2x3_=3' ;
1077548   +
1077549   +      label H2x3_4 = 'Hidden: H2x3_=4' ;
MPRINT(EM_DIAGRAM):   label H2x3_4 = 'Hidden: H2x3_=4' ;
1077550   +
1077551   +      label H2x3_5 = 'Hidden: H2x3_=5' ;
MPRINT(EM_DIAGRAM):   label H2x3_5 = 'Hidden: H2x3_=5' ;
1077552   +
1077553   +      label H2x3_6 = 'Hidden: H2x3_=6' ;
MPRINT(EM_DIAGRAM):   label H2x3_6 = 'Hidden: H2x3_=6' ;
1077554   +
1077555   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1077556   +
1077557   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1077558   +
1077559   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1077560   +
1077561   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1077562   +
1077563   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1077564   +
1077565   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1077566   +
1077567   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1077568   +
1077569   +      label H3x2_2 = 'Hidden: H3x2_=2' ;
MPRINT(EM_DIAGRAM):   label H3x2_2 = 'Hidden: H3x2_=2' ;
1077570   +
1077571   +      label H3x2_3 = 'Hidden: H3x2_=3' ;
MPRINT(EM_DIAGRAM):   label H3x2_3 = 'Hidden: H3x2_=3' ;
1077572   +
1077573   +      label H3x2_4 = 'Hidden: H3x2_=4' ;
MPRINT(EM_DIAGRAM):   label H3x2_4 = 'Hidden: H3x2_=4' ;
1077574   +
1077575   +      label H3x2_5 = 'Hidden: H3x2_=5' ;
MPRINT(EM_DIAGRAM):   label H3x2_5 = 'Hidden: H3x2_=5' ;
1077576   +
1077577   +      label H3x2_6 = 'Hidden: H3x2_=6' ;
MPRINT(EM_DIAGRAM):   label H3x2_6 = 'Hidden: H3x2_=6' ;
1077578   +
1077579   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1077580   +
1077581   +      label H4x1_2 = 'Hidden: H4x1_=2' ;
MPRINT(EM_DIAGRAM):   label H4x1_2 = 'Hidden: H4x1_=2' ;
1077582   +
1077583   +      label H4x1_3 = 'Hidden: H4x1_=3' ;
MPRINT(EM_DIAGRAM):   label H4x1_3 = 'Hidden: H4x1_=3' ;
1077584   +
1077585   +      label H4x1_4 = 'Hidden: H4x1_=4' ;
MPRINT(EM_DIAGRAM):   label H4x1_4 = 'Hidden: H4x1_=4' ;
1077586   +
1077587   +      label H4x1_5 = 'Hidden: H4x1_=5' ;
MPRINT(EM_DIAGRAM):   label H4x1_5 = 'Hidden: H4x1_=5' ;
1077588   +
1077589   +      label H4x1_6 = 'Hidden: H4x1_=6' ;
MPRINT(EM_DIAGRAM):   label H4x1_6 = 'Hidden: H4x1_=6' ;
1077590   +
1077591   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1077592   +
1077593   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1077594   +
1077595   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1077596   +
1077597   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1077598   +
1077599   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1077600   +
1077601   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1077602   +
1077603   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1077604   +
1077605   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1077606   +
1077607   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1077608   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1077609   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1077610   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1077611   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1077612   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1077613   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077614   +end;
MPRINT(EM_DIAGRAM):   end;
1077615   +else do;
MPRINT(EM_DIAGRAM):   else do;
1077616   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1077617   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1077618   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1077619   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1077620   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1077621   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1077622   +   end;
MPRINT(EM_DIAGRAM):   end;
1077623   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1077624   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1077625   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1077626   +   end;
MPRINT(EM_DIAGRAM):   end;
1077627   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1077628   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1077629   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1077630   +   end;
MPRINT(EM_DIAGRAM):   end;
1077631   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1077632   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1077633   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1077634   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1077635   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077636   +   end;
MPRINT(EM_DIAGRAM):   end;
1077637   +end;
MPRINT(EM_DIAGRAM):   end;
1077638   +
1077639   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077640   +*** Checking missing input Interval
1077641   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1077642   +
1077643   +IF NMISS(
1077644   +   AcceptedCmpTotal ,
1077645   +   Frq ,
1077646   +   Income ,
1077647   +   Mnt ,
1077648   +   MntGoldProds ,
1077649   +   MntMeatProducts ,
1077650   +   MntWines ,
1077651   +   NumDistPurchases ,
1077652   +   RFMstat ,
1077653   +   RMntFrq ,
1077654   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1077655   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1077656   +
1077657   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1077658   +END;
MPRINT(EM_DIAGRAM):   END;
1077659   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077660   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1077661   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077662   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077663   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1077664   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1077665   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1077666   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1077667   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1077668   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1077669   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1077670   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1077671   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1077672   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1077673   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1077674   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1077675   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1077676   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1077677   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1077678   +END;
MPRINT(EM_DIAGRAM):   END;
1077679   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077680   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1077681   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1077682   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1077683   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1077684   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1077685   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1077686   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1077687   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1077688   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1077689   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1077690   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1077691   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1077692   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1077693   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1077694   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1077695   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1077696   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1077697   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1077698   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1077699   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1077700   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1077701   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1077702   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1077703   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1077704   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1077705   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1077706   +END;
MPRINT(EM_DIAGRAM):   END;
1077707   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077708   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1077709   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077710   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077711   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1077712   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077713   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077714   +   H1x1_1  =     3.15417213555791 * S_AcceptedCmpTotal
1077715   +          +    -2.48200966202064 * S_Frq  +     1.79801309624052 * S_Income
1077716   +          +    -1.96453924225923 * S_Mnt  +    -0.73447750078211 *
1077717   +        S_MntGoldProds  +    -1.52540613833145 * S_MntMeatProducts
1077718   +          +    -2.34651136428537 * S_MntWines  +     1.78713249203795 *
1077719   +        S_NumDistPurchases  +    -1.89877446252459 * S_RFMstat
1077720   +          +     0.40523847190984 * S_RMntFrq  +    -5.00157954960261 *
1077721   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 3.15417213555791 * S_AcceptedCmpTotal + -2.48200966202064 *
S_Frq + 1.79801309624052 * S_Income + -1.96453924225923 * S_Mnt + -0.73447750078211 *
S_MntGoldProds + -1.52540613833145 * S_MntMeatProducts + -2.34651136428537 * S_MntWines +
1.78713249203795 * S_NumDistPurchases + -1.89877446252459 * S_RFMstat + 0.40523847190984 *
S_RMntFrq + -5.00157954960261 * S_Recency ;
1077722   +   H1x1_2  =     -0.4296332791258 * S_AcceptedCmpTotal
1077723   +          +     1.69454720747031 * S_Frq  +     0.65291994437462 * S_Income
1077724   +          +     4.94289741649285 * S_Mnt  +    -0.74724168333375 *
1077725   +        S_MntGoldProds  +    -4.37885511745275 * S_MntMeatProducts
1077726   +          +    -0.79918604028406 * S_MntWines  +    -2.55554908870931 *
1077727   +        S_NumDistPurchases  +      -0.357509020401 * S_RFMstat
1077728   +          +     2.81206015252461 * S_RMntFrq  +       0.376849190211 *
1077729   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.4296332791258 * S_AcceptedCmpTotal + 1.69454720747031 *
S_Frq + 0.65291994437462 * S_Income + 4.94289741649285 * S_Mnt + -0.74724168333375 *
S_MntGoldProds + -4.37885511745275 * S_MntMeatProducts + -0.79918604028406 * S_MntWines +
-2.55554908870931 * S_NumDistPurchases + -0.357509020401 * S_RFMstat + 2.81206015252461 *
S_RMntFrq + 0.376849190211 * S_Recency ;
1077730   +   H1x1_3  =     0.22275326994217 * S_AcceptedCmpTotal
1077731   +          +     1.30327962429821 * S_Frq  +     8.11675617892245 * S_Income
1077732   +          +     1.26763916951276 * S_Mnt  +     -0.2686825897259 *
1077733   +        S_MntGoldProds  +    -1.42114074651211 * S_MntMeatProducts
1077734   +          +    -1.76821642666458 * S_MntWines  +    -1.91323522505912 *
1077735   +        S_NumDistPurchases  +    -0.12369288380556 * S_RFMstat
1077736   +          +     -0.5961110037328 * S_RMntFrq  +     1.45489277444882 *
1077737   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.22275326994217 * S_AcceptedCmpTotal + 1.30327962429821 *
S_Frq + 8.11675617892245 * S_Income + 1.26763916951276 * S_Mnt + -0.2686825897259 *
S_MntGoldProds + -1.42114074651211 * S_MntMeatProducts + -1.76821642666458 * S_MntWines +
-1.91323522505912 * S_NumDistPurchases + -0.12369288380556 * S_RFMstat + -0.5961110037328 *
S_RMntFrq + 1.45489277444882 * S_Recency ;
1077738   +   H1x1_4  =     0.65694888778783 * S_AcceptedCmpTotal
1077739   +          +    -2.46645772884275 * S_Frq  +     2.56090496460471 * S_Income
1077740   +          +     1.47469720902355 * S_Mnt  +    -0.23044042020952 *
1077741   +        S_MntGoldProds  +     1.09436190473143 * S_MntMeatProducts
1077742   +          +    -0.07872477007968 * S_MntWines  +     2.35913880285028 *
1077743   +        S_NumDistPurchases  +     0.36553596420262 * S_RFMstat
1077744   +          +    -1.52014700293876 * S_RMntFrq  +    -1.62001903467763 *
1077745   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.65694888778783 * S_AcceptedCmpTotal + -2.46645772884275 *
S_Frq + 2.56090496460471 * S_Income + 1.47469720902355 * S_Mnt + -0.23044042020952 *
S_MntGoldProds + 1.09436190473143 * S_MntMeatProducts + -0.07872477007968 * S_MntWines +
2.35913880285028 * S_NumDistPurchases + 0.36553596420262 * S_RFMstat + -1.52014700293876 *
S_RMntFrq + -1.62001903467763 * S_Recency ;
1077746   +   H1x1_5  =    -0.06045586654134 * S_AcceptedCmpTotal
1077747   +          +    -1.51896554067022 * S_Frq  +    -0.77690899609172 * S_Income
1077748   +          +    -3.83443076797312 * S_Mnt  +    -0.49066287190692 *
1077749   +        S_MntGoldProds  +     7.74304126889741 * S_MntMeatProducts
1077750   +          +     0.97717560040665 * S_MntWines  +     2.55833904797689 *
1077751   +        S_NumDistPurchases  +     3.33552253786577 * S_RFMstat
1077752   +          +     2.15128325510301 * S_RMntFrq  +     0.51475149451235 *
1077753   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.06045586654134 * S_AcceptedCmpTotal + -1.51896554067022 *
S_Frq + -0.77690899609172 * S_Income + -3.83443076797312 * S_Mnt + -0.49066287190692 *
S_MntGoldProds + 7.74304126889741 * S_MntMeatProducts + 0.97717560040665 * S_MntWines +
2.55833904797689 * S_NumDistPurchases + 3.33552253786577 * S_RFMstat + 2.15128325510301 *
S_RMntFrq + 0.51475149451235 * S_Recency ;
1077754   +   H1x1_6  =    -2.00102225492393 * S_AcceptedCmpTotal
1077755   +          +    -0.55313430858805 * S_Frq  +    -2.80039880440251 * S_Income
1077756   +          +    -0.52613628819852 * S_Mnt  +    -1.25580169134654 *
1077757   +        S_MntGoldProds  +    -1.44511464402737 * S_MntMeatProducts
1077758   +          +    -0.66744558284147 * S_MntWines  +     3.15612301024597 *
1077759   +        S_NumDistPurchases  +    -0.57805918326136 * S_RFMstat
1077760   +          +     0.13349014037678 * S_RMntFrq  +    -1.97053621157132 *
1077761   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = -2.00102225492393 * S_AcceptedCmpTotal + -0.55313430858805 *
S_Frq + -2.80039880440251 * S_Income + -0.52613628819852 * S_Mnt + -1.25580169134654 *
S_MntGoldProds + -1.44511464402737 * S_MntMeatProducts + -0.66744558284147 * S_MntWines +
3.15612301024597 * S_NumDistPurchases + -0.57805918326136 * S_RFMstat + 0.13349014037678 *
S_RMntFrq + -1.97053621157132 * S_Recency ;
1077762   +   H1x1_1  = H1x1_1  +     1.38825657874217 * G_Marital_Status0
1077763   +          +     0.90195662603521 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.38825657874217 * G_Marital_Status0 +
0.90195662603521 * G_Marital_Status1 ;
1077764   +   H1x1_2  = H1x1_2  +     0.88138395159348 * G_Marital_Status0
1077765   +          +    -0.49019446056296 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.88138395159348 * G_Marital_Status0 +
-0.49019446056296 * G_Marital_Status1 ;
1077766   +   H1x1_3  = H1x1_3  +     0.30990330359421 * G_Marital_Status0
1077767   +          +     1.10544938214372 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.30990330359421 * G_Marital_Status0 +
1.10544938214372 * G_Marital_Status1 ;
1077768   +   H1x1_4  = H1x1_4  +     1.70251598227875 * G_Marital_Status0
1077769   +          +     0.87683669160259 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 1.70251598227875 * G_Marital_Status0 +
0.87683669160259 * G_Marital_Status1 ;
1077770   +   H1x1_5  = H1x1_5  +    -0.14678805736317 * G_Marital_Status0
1077771   +          +    -0.13246180955576 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.14678805736317 * G_Marital_Status0 +
-0.13246180955576 * G_Marital_Status1 ;
1077772   +   H1x1_6  = H1x1_6  +     -0.6511155024316 * G_Marital_Status0
1077773   +          +     0.24707257141342 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + -0.6511155024316 * G_Marital_Status0 +
0.24707257141342 * G_Marital_Status1 ;
1077774   +   H1x1_1  =     4.82277728923766 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 4.82277728923766 + H1x1_1 ;
1077775   +   H1x1_2  =     2.49777705822347 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.49777705822347 + H1x1_2 ;
1077776   +   H1x1_3  =    -0.93289135595041 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.93289135595041 + H1x1_3 ;
1077777   +   H1x1_4  =    -7.80421802944398 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.80421802944398 + H1x1_4 ;
1077778   +   H1x1_5  =     6.46115064589724 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 6.46115064589724 + H1x1_5 ;
1077779   +   H1x1_6  =     3.21096596966888 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 3.21096596966888 + H1x1_6 ;
1077780   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1077781   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1077782   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1077783   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1077784   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1077785   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1077786   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1077787   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1077788   +END;
MPRINT(EM_DIAGRAM):   END;
1077789   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077790   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1077791   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1077792   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1077793   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1077794   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1077795   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1077796   +END;
MPRINT(EM_DIAGRAM):   END;
1077797   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077798   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1077799   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077800   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077801   +   H1x2_1  =    -0.30711239275958 * S_AcceptedCmpTotal
1077802   +          +    -1.45395291114633 * S_Frq  +     0.87594950917085 * S_Income
1077803   +          +    -0.72639274085105 * S_Mnt  +    -2.47797355837112 *
1077804   +        S_MntGoldProds  +     0.68384082088335 * S_MntMeatProducts
1077805   +          +     0.65600644755641 * S_MntWines  +      0.8163360453447 *
1077806   +        S_NumDistPurchases  +    -1.09587924440912 * S_RFMstat
1077807   +          +     1.48347762248449 * S_RMntFrq  +      0.2335216261547 *
1077808   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.30711239275958 * S_AcceptedCmpTotal + -1.45395291114633 *
S_Frq + 0.87594950917085 * S_Income + -0.72639274085105 * S_Mnt + -2.47797355837112 *
S_MntGoldProds + 0.68384082088335 * S_MntMeatProducts + 0.65600644755641 * S_MntWines +
0.8163360453447 * S_NumDistPurchases + -1.09587924440912 * S_RFMstat + 1.48347762248449 *
S_RMntFrq + 0.2335216261547 * S_Recency ;
1077809   +   H1x2_2  =     2.57777770372275 * S_AcceptedCmpTotal
1077810   +          +    -0.08699050003337 * S_Frq  +      0.9048262025585 * S_Income
1077811   +          +     0.80716409242733 * S_Mnt  +     0.92862088643502 *
1077812   +        S_MntGoldProds  +     1.28722996014956 * S_MntMeatProducts
1077813   +          +    -0.78107065942411 * S_MntWines  +     2.29787925805392 *
1077814   +        S_NumDistPurchases  +     -0.7095984076797 * S_RFMstat
1077815   +          +    -0.75276407747323 * S_RMntFrq  +    -2.14859674388241 *
1077816   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 2.57777770372275 * S_AcceptedCmpTotal + -0.08699050003337 *
S_Frq + 0.9048262025585 * S_Income + 0.80716409242733 * S_Mnt + 0.92862088643502 *
S_MntGoldProds + 1.28722996014956 * S_MntMeatProducts + -0.78107065942411 * S_MntWines +
2.29787925805392 * S_NumDistPurchases + -0.7095984076797 * S_RFMstat + -0.75276407747323 *
S_RMntFrq + -2.14859674388241 * S_Recency ;
1077817   +   H1x2_3  =    -0.19225474668372 * S_AcceptedCmpTotal
1077818   +          +     -0.5399776824486 * S_Frq  +    -0.33342356858106 * S_Income
1077819   +          +      0.4662552460972 * S_Mnt  +    -0.83897697999245 *
1077820   +        S_MntGoldProds  +    -1.02069791829975 * S_MntMeatProducts
1077821   +          +    -0.77568646594215 * S_MntWines  +    -2.64172584610703 *
1077822   +        S_NumDistPurchases  +     1.22587043380457 * S_RFMstat
1077823   +          +    -1.22124295004478 * S_RMntFrq  +     0.72727673065668 *
1077824   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.19225474668372 * S_AcceptedCmpTotal + -0.5399776824486 *
S_Frq + -0.33342356858106 * S_Income + 0.4662552460972 * S_Mnt + -0.83897697999245 *
S_MntGoldProds + -1.02069791829975 * S_MntMeatProducts + -0.77568646594215 * S_MntWines +
-2.64172584610703 * S_NumDistPurchases + 1.22587043380457 * S_RFMstat + -1.22124295004478 *
S_RMntFrq + 0.72727673065668 * S_Recency ;
1077825   +   H1x2_4  =     1.07963833884217 * S_AcceptedCmpTotal
1077826   +          +    -1.30033554705908 * S_Frq  +     0.80740030463615 * S_Income
1077827   +          +    -1.73808129607223 * S_Mnt  +     1.21346647777818 *
1077828   +        S_MntGoldProds  +     0.69007605858806 * S_MntMeatProducts
1077829   +          +     0.31548401471349 * S_MntWines  +    -0.45355998387313 *
1077830   +        S_NumDistPurchases  +     1.13504256910361 * S_RFMstat
1077831   +          +    -0.45561637629388 * S_RMntFrq  +    -1.42094697023704 *
1077832   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.07963833884217 * S_AcceptedCmpTotal + -1.30033554705908 *
S_Frq + 0.80740030463615 * S_Income + -1.73808129607223 * S_Mnt + 1.21346647777818 *
S_MntGoldProds + 0.69007605858806 * S_MntMeatProducts + 0.31548401471349 * S_MntWines +
-0.45355998387313 * S_NumDistPurchases + 1.13504256910361 * S_RFMstat + -0.45561637629388 *
S_RMntFrq + -1.42094697023704 * S_Recency ;
1077833   +   H1x2_5  =     0.30163018627699 * S_AcceptedCmpTotal
1077834   +          +    -0.73947459722676 * S_Frq  +      0.3117229426353 * S_Income
1077835   +          +     1.78189396082002 * S_Mnt  +    -1.51478593904163 *
1077836   +        S_MntGoldProds  +    -1.30328540691967 * S_MntMeatProducts
1077837   +          +     0.48947220852953 * S_MntWines  +     0.25380878841531 *
1077838   +        S_NumDistPurchases  +    -0.09429027402746 * S_RFMstat
1077839   +          +     2.79720421337828 * S_RMntFrq  +    -0.08024855242737 *
1077840   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.30163018627699 * S_AcceptedCmpTotal + -0.73947459722676 *
S_Frq + 0.3117229426353 * S_Income + 1.78189396082002 * S_Mnt + -1.51478593904163 *
S_MntGoldProds + -1.30328540691967 * S_MntMeatProducts + 0.48947220852953 * S_MntWines +
0.25380878841531 * S_NumDistPurchases + -0.09429027402746 * S_RFMstat + 2.79720421337828 *
S_RMntFrq + -0.08024855242737 * S_Recency ;
1077841   +   H1x2_6  =    -0.05006047355159 * S_AcceptedCmpTotal
1077842   +          +     0.01838632143297 * S_Frq  +    -1.04892137940395 * S_Income
1077843   +          +    -0.33949418476309 * S_Mnt  +     1.27820886482898 *
1077844   +        S_MntGoldProds  +      0.1541042926193 * S_MntMeatProducts
1077845   +          +    -0.30996391960135 * S_MntWines  +     0.69532310497927 *
1077846   +        S_NumDistPurchases  +    -0.51247610421467 * S_RFMstat
1077847   +          +    -0.87640728095011 * S_RMntFrq  +     1.79661996586627 *
1077848   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -0.05006047355159 * S_AcceptedCmpTotal + 0.01838632143297 *
S_Frq + -1.04892137940395 * S_Income + -0.33949418476309 * S_Mnt + 1.27820886482898 *
S_MntGoldProds + 0.1541042926193 * S_MntMeatProducts + -0.30996391960135 * S_MntWines +
0.69532310497927 * S_NumDistPurchases + -0.51247610421467 * S_RFMstat + -0.87640728095011 *
S_RMntFrq + 1.79661996586627 * S_Recency ;
1077849   +   H1x2_1  = H1x2_1  +    -1.52372947412233 * G_Marital_Status0
1077850   +          +     0.61190614442174 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -1.52372947412233 * G_Marital_Status0 +
0.61190614442174 * G_Marital_Status1 ;
1077851   +   H1x2_2  = H1x2_2  +     -0.2899112326334 * G_Marital_Status0
1077852   +          +    -0.43943770039245 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.2899112326334 * G_Marital_Status0 +
-0.43943770039245 * G_Marital_Status1 ;
1077853   +   H1x2_3  = H1x2_3  +    -1.30447843367338 * G_Marital_Status0
1077854   +          +     0.36969296112687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.30447843367338 * G_Marital_Status0 +
0.36969296112687 * G_Marital_Status1 ;
1077855   +   H1x2_4  = H1x2_4  +     1.06192432928756 * G_Marital_Status0
1077856   +          +    -0.48897798100871 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.06192432928756 * G_Marital_Status0 +
-0.48897798100871 * G_Marital_Status1 ;
1077857   +   H1x2_5  = H1x2_5  +     1.24023950705702 * G_Marital_Status0
1077858   +          +     -0.0768652239427 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 1.24023950705702 * G_Marital_Status0 +
-0.0768652239427 * G_Marital_Status1 ;
1077859   +   H1x2_6  = H1x2_6  +    -0.79854804689099 * G_Marital_Status0
1077860   +          +    -0.58590001312977 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 + -0.79854804689099 * G_Marital_Status0 +
-0.58590001312977 * G_Marital_Status1 ;
1077861   +   H1x2_1  =    -1.24057312487712 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.24057312487712 + H1x2_1 ;
1077862   +   H1x2_2  =    -0.68291139361923 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.68291139361923 + H1x2_2 ;
1077863   +   H1x2_3  =     1.06420344729961 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.06420344729961 + H1x2_3 ;
1077864   +   H1x2_4  =    -2.69713708678823 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -2.69713708678823 + H1x2_4 ;
1077865   +   H1x2_5  =    -0.12447063994137 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.12447063994137 + H1x2_5 ;
1077866   +   H1x2_6  =     -1.0719988986801 + H1x2_6 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -1.0719988986801 + H1x2_6 ;
1077867   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1077868   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1077869   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1077870   +   H1x2_2  = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
1077871   +   H1x2_3  = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
1077872   +   H1x2_4  = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
1077873   +   H1x2_5  = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_5 = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
1077874   +   H1x2_6  = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_6 = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
1077875   +END;
MPRINT(EM_DIAGRAM):   END;
1077876   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077877   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1077878   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1077879   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1077880   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1077881   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1077882   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1077883   +END;
MPRINT(EM_DIAGRAM):   END;
1077884   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077885   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1077886   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077887   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077888   +   H1x3_1  =     0.58141896766328 * S_AcceptedCmpTotal
1077889   +          +     0.88835106317195 * S_Frq  +     1.03397412242189 * S_Income
1077890   +          +    -0.19511498332885 * S_Mnt  +     0.79222351582255 *
1077891   +        S_MntGoldProds  +     1.84666352042484 * S_MntMeatProducts
1077892   +          +     0.26439819900146 * S_MntWines  +    -0.49316136014272 *
1077893   +        S_NumDistPurchases  +    -1.53931690693652 * S_RFMstat
1077894   +          +     0.66163259224518 * S_RMntFrq  +    -0.05038100966606 *
1077895   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.58141896766328 * S_AcceptedCmpTotal + 0.88835106317195 *
S_Frq + 1.03397412242189 * S_Income + -0.19511498332885 * S_Mnt + 0.79222351582255 *
S_MntGoldProds + 1.84666352042484 * S_MntMeatProducts + 0.26439819900146 * S_MntWines +
-0.49316136014272 * S_NumDistPurchases + -1.53931690693652 * S_RFMstat + 0.66163259224518 *
S_RMntFrq + -0.05038100966606 * S_Recency ;
1077896   +   H1x3_2  =    -0.66965742898236 * S_AcceptedCmpTotal
1077897   +          +     0.11439761295336 * S_Frq  +      0.4311111590428 * S_Income
1077898   +          +     0.56419594384106 * S_Mnt  +    -2.58586026844722 *
1077899   +        S_MntGoldProds  +     0.84843617907069 * S_MntMeatProducts
1077900   +          +    -0.40949465894409 * S_MntWines  +    -1.12254199224924 *
1077901   +        S_NumDistPurchases  +    -1.73672932018459 * S_RFMstat
1077902   +          +     0.60800652848154 * S_RMntFrq  +     0.90023461529092 *
1077903   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.66965742898236 * S_AcceptedCmpTotal + 0.11439761295336 *
S_Frq + 0.4311111590428 * S_Income + 0.56419594384106 * S_Mnt + -2.58586026844722 *
S_MntGoldProds + 0.84843617907069 * S_MntMeatProducts + -0.40949465894409 * S_MntWines +
-1.12254199224924 * S_NumDistPurchases + -1.73672932018459 * S_RFMstat + 0.60800652848154 *
S_RMntFrq + 0.90023461529092 * S_Recency ;
1077904   +   H1x3_3  =     0.64116254904887 * S_AcceptedCmpTotal
1077905   +          +     0.36521168161033 * S_Frq  +    -1.65592742965949 * S_Income
1077906   +          +    -1.13010637801203 * S_Mnt  +     1.18435160743823 *
1077907   +        S_MntGoldProds  +     0.61014939723339 * S_MntMeatProducts
1077908   +          +     0.57967362971329 * S_MntWines  +    -0.00705774722842 *
1077909   +        S_NumDistPurchases  +    -0.09732595050305 * S_RFMstat
1077910   +          +    -1.58268748567816 * S_RMntFrq  +    -1.00117301133743 *
1077911   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 0.64116254904887 * S_AcceptedCmpTotal + 0.36521168161033 *
S_Frq + -1.65592742965949 * S_Income + -1.13010637801203 * S_Mnt + 1.18435160743823 *
S_MntGoldProds + 0.61014939723339 * S_MntMeatProducts + 0.57967362971329 * S_MntWines +
-0.00705774722842 * S_NumDistPurchases + -0.09732595050305 * S_RFMstat + -1.58268748567816 *
S_RMntFrq + -1.00117301133743 * S_Recency ;
1077912   +   H1x3_4  =    -2.38943135123073 * S_AcceptedCmpTotal
1077913   +          +     0.50616478854457 * S_Frq  +     1.68985840818789 * S_Income
1077914   +          +    -0.51011802824515 * S_Mnt  +     1.25167622017055 *
1077915   +        S_MntGoldProds  +    -0.78430871718616 * S_MntMeatProducts
1077916   +          +     0.97685472578698 * S_MntWines  +    -0.66992601103029 *
1077917   +        S_NumDistPurchases  +    -0.28545877583545 * S_RFMstat
1077918   +          +     0.52712575990538 * S_RMntFrq  +     1.51096273676103 *
1077919   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -2.38943135123073 * S_AcceptedCmpTotal + 0.50616478854457 *
S_Frq + 1.68985840818789 * S_Income + -0.51011802824515 * S_Mnt + 1.25167622017055 *
S_MntGoldProds + -0.78430871718616 * S_MntMeatProducts + 0.97685472578698 * S_MntWines +
-0.66992601103029 * S_NumDistPurchases + -0.28545877583545 * S_RFMstat + 0.52712575990538 *
S_RMntFrq + 1.51096273676103 * S_Recency ;
1077920   +   H1x3_5  =     0.27293739636898 * S_AcceptedCmpTotal
1077921   +          +     0.44515009768765 * S_Frq  +     -0.4521347788574 * S_Income
1077922   +          +     0.43943223859703 * S_Mnt  +     1.17781847894182 *
1077923   +        S_MntGoldProds  +    -0.67700757595581 * S_MntMeatProducts
1077924   +          +    -1.46437355846341 * S_MntWines  +    -0.09365592083561 *
1077925   +        S_NumDistPurchases  +     0.94926901433762 * S_RFMstat
1077926   +          +     2.40216905424957 * S_RMntFrq  +     0.65859109347516 *
1077927   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.27293739636898 * S_AcceptedCmpTotal + 0.44515009768765 *
S_Frq + -0.4521347788574 * S_Income + 0.43943223859703 * S_Mnt + 1.17781847894182 *
S_MntGoldProds + -0.67700757595581 * S_MntMeatProducts + -1.46437355846341 * S_MntWines +
-0.09365592083561 * S_NumDistPurchases + 0.94926901433762 * S_RFMstat + 2.40216905424957 *
S_RMntFrq + 0.65859109347516 * S_Recency ;
1077928   +   H1x3_6  =     0.79944121174459 * S_AcceptedCmpTotal
1077929   +          +     0.19594924011495 * S_Frq  +     1.07233338144708 * S_Income
1077930   +          +    -0.39577530492174 * S_Mnt  +    -0.18122578134776 *
1077931   +        S_MntGoldProds  +    -0.26451891721245 * S_MntMeatProducts
1077932   +          +    -0.86856724355925 * S_MntWines  +    -1.81909916765471 *
1077933   +        S_NumDistPurchases  +     1.03983663011092 * S_RFMstat
1077934   +          +    -0.86768378180894 * S_RMntFrq  +     0.40747604583851 *
1077935   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.79944121174459 * S_AcceptedCmpTotal + 0.19594924011495 *
S_Frq + 1.07233338144708 * S_Income + -0.39577530492174 * S_Mnt + -0.18122578134776 *
S_MntGoldProds + -0.26451891721245 * S_MntMeatProducts + -0.86856724355925 * S_MntWines +
-1.81909916765471 * S_NumDistPurchases + 1.03983663011092 * S_RFMstat + -0.86768378180894 *
S_RMntFrq + 0.40747604583851 * S_Recency ;
1077936   +   H1x3_1  = H1x3_1  +    -1.44819834546359 * G_Marital_Status0
1077937   +          +     2.03049158937708 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -1.44819834546359 * G_Marital_Status0 +
2.03049158937708 * G_Marital_Status1 ;
1077938   +   H1x3_2  = H1x3_2  +     0.32142977922032 * G_Marital_Status0
1077939   +          +     0.95456795317325 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + 0.32142977922032 * G_Marital_Status0 +
0.95456795317325 * G_Marital_Status1 ;
1077940   +   H1x3_3  = H1x3_3  +    -0.05546140673943 * G_Marital_Status0
1077941   +          +    -0.64267205173982 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 + -0.05546140673943 * G_Marital_Status0 +
-0.64267205173982 * G_Marital_Status1 ;
1077942   +   H1x3_4  = H1x3_4  +     0.67758459902812 * G_Marital_Status0
1077943   +          +    -0.13878277097624 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 + 0.67758459902812 * G_Marital_Status0 +
-0.13878277097624 * G_Marital_Status1 ;
1077944   +   H1x3_5  = H1x3_5  +      0.2080585980069 * G_Marital_Status0
1077945   +          +     0.39530416624983 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 + 0.2080585980069 * G_Marital_Status0 + 0.39530416624983
* G_Marital_Status1 ;
1077946   +   H1x3_6  = H1x3_6  +    -0.56268194068278 * G_Marital_Status0
1077947   +          +    -1.38939757582535 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 + -0.56268194068278 * G_Marital_Status0 +
-1.38939757582535 * G_Marital_Status1 ;
1077948   +   H1x3_1  =    -0.02110450300917 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.02110450300917 + H1x3_1 ;
1077949   +   H1x3_2  =     0.68400964836412 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 0.68400964836412 + H1x3_2 ;
1077950   +   H1x3_3  =     1.27295692924548 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.27295692924548 + H1x3_3 ;
1077951   +   H1x3_4  =     0.57759340173339 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.57759340173339 + H1x3_4 ;
1077952   +   H1x3_5  =     0.68658947855937 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.68658947855937 + H1x3_5 ;
1077953   +   H1x3_6  =     0.96960260915788 + H1x3_6 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.96960260915788 + H1x3_6 ;
1077954   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1077955   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1077956   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1077957   +   H1x3_2  = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
1077958   +   H1x3_3  = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
1077959   +   H1x3_4  = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_4 = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
1077960   +   H1x3_5  = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_5 = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
1077961   +   H1x3_6  = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_6 = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
1077962   +END;
MPRINT(EM_DIAGRAM):   END;
1077963   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1077964   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1077965   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1077966   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1077967   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1077968   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1077969   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1077970   +END;
MPRINT(EM_DIAGRAM):   END;
1077971   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077972   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1077973   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1077974   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1077975   +   H1x4_1  =     1.13261766886471 * S_AcceptedCmpTotal
1077976   +          +     0.78824304763496 * S_Frq  +    -1.86817100110189 * S_Income
1077977   +          +    -1.58760227599089 * S_Mnt  +     -1.1330886213304 *
1077978   +        S_MntGoldProds  +     0.82082069255126 * S_MntMeatProducts
1077979   +          +    -0.34149449572975 * S_MntWines  +     0.45944109671738 *
1077980   +        S_NumDistPurchases  +     2.00910621486809 * S_RFMstat
1077981   +          +     -1.8305685414059 * S_RMntFrq  +     1.46038466341548 *
1077982   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.13261766886471 * S_AcceptedCmpTotal + 0.78824304763496 *
S_Frq + -1.86817100110189 * S_Income + -1.58760227599089 * S_Mnt + -1.1330886213304 *
S_MntGoldProds + 0.82082069255126 * S_MntMeatProducts + -0.34149449572975 * S_MntWines +
0.45944109671738 * S_NumDistPurchases + 2.00910621486809 * S_RFMstat + -1.8305685414059 *
S_RMntFrq + 1.46038466341548 * S_Recency ;
1077983   +   H1x4_2  =    -0.63266188932348 * S_AcceptedCmpTotal
1077984   +          +    -0.01183486383209 * S_Frq  +    -1.07560568030024 * S_Income
1077985   +          +    -1.30988288899902 * S_Mnt  +     2.15841401397408 *
1077986   +        S_MntGoldProds  +    -1.27808965763357 * S_MntMeatProducts
1077987   +          +     2.04886920467378 * S_MntWines  +     0.09322121012781 *
1077988   +        S_NumDistPurchases  +    -0.37050311259862 * S_RFMstat
1077989   +          +     0.68085578996214 * S_RMntFrq  +     1.48508197039719 *
1077990   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -0.63266188932348 * S_AcceptedCmpTotal + -0.01183486383209 *
S_Frq + -1.07560568030024 * S_Income + -1.30988288899902 * S_Mnt + 2.15841401397408 *
S_MntGoldProds + -1.27808965763357 * S_MntMeatProducts + 2.04886920467378 * S_MntWines +
0.09322121012781 * S_NumDistPurchases + -0.37050311259862 * S_RFMstat + 0.68085578996214 *
S_RMntFrq + 1.48508197039719 * S_Recency ;
1077991   +   H1x4_3  =    -0.53647455024397 * S_AcceptedCmpTotal
1077992   +          +     0.24459727005497 * S_Frq  +     0.30319155437277 * S_Income
1077993   +          +     0.25206471395865 * S_Mnt  +     0.43917953957135 *
1077994   +        S_MntGoldProds  +    -0.10933570154764 * S_MntMeatProducts
1077995   +          +    -0.04059236687792 * S_MntWines  +     0.35677739352706 *
1077996   +        S_NumDistPurchases  +     1.38086899403811 * S_RFMstat
1077997   +          +    -0.32751457592661 * S_RMntFrq  +    -0.15926282047245 *
1077998   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_3 = -0.53647455024397 * S_AcceptedCmpTotal + 0.24459727005497 *
S_Frq + 0.30319155437277 * S_Income + 0.25206471395865 * S_Mnt + 0.43917953957135 *
S_MntGoldProds + -0.10933570154764 * S_MntMeatProducts + -0.04059236687792 * S_MntWines +
0.35677739352706 * S_NumDistPurchases + 1.38086899403811 * S_RFMstat + -0.32751457592661 *
S_RMntFrq + -0.15926282047245 * S_Recency ;
1077999   +   H1x4_4  =     0.24225159923716 * S_AcceptedCmpTotal
1078000   +          +    -0.83397540163538 * S_Frq  +     0.65454415304883 * S_Income
1078001   +          +     -2.1008417113285 * S_Mnt  +     1.46444392612369 *
1078002   +        S_MntGoldProds  +     1.98843066844745 * S_MntMeatProducts
1078003   +          +    -0.31310064337061 * S_MntWines  +     0.56236194506314 *
1078004   +        S_NumDistPurchases  +    -0.20512833160409 * S_RFMstat
1078005   +          +    -0.20631901696385 * S_RMntFrq  +    -0.01945293751142 *
1078006   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 0.24225159923716 * S_AcceptedCmpTotal + -0.83397540163538 *
S_Frq + 0.65454415304883 * S_Income + -2.1008417113285 * S_Mnt + 1.46444392612369 *
S_MntGoldProds + 1.98843066844745 * S_MntMeatProducts + -0.31310064337061 * S_MntWines +
0.56236194506314 * S_NumDistPurchases + -0.20512833160409 * S_RFMstat + -0.20631901696385 *
S_RMntFrq + -0.01945293751142 * S_Recency ;
1078007   +   H1x4_5  =     -0.2800504242999 * S_AcceptedCmpTotal
1078008   +          +     0.11767474732461 * S_Frq  +    -1.78109558633383 * S_Income
1078009   +          +    -0.83275451396797 * S_Mnt  +     0.13772739876237 *
1078010   +        S_MntGoldProds  +    -0.00084509726748 * S_MntMeatProducts
1078011   +          +     0.92081955236291 * S_MntWines  +    -0.84663906140096 *
1078012   +        S_NumDistPurchases  +     1.07425261538134 * S_RFMstat
1078013   +          +    -0.27830850445101 * S_RMntFrq  +     0.74380794599056 *
1078014   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_5 = -0.2800504242999 * S_AcceptedCmpTotal + 0.11767474732461 *
S_Frq + -1.78109558633383 * S_Income + -0.83275451396797 * S_Mnt + 0.13772739876237 *
S_MntGoldProds + -0.00084509726748 * S_MntMeatProducts + 0.92081955236291 * S_MntWines +
-0.84663906140096 * S_NumDistPurchases + 1.07425261538134 * S_RFMstat + -0.27830850445101 *
S_RMntFrq + 0.74380794599056 * S_Recency ;
1078015   +   H1x4_6  =     -1.1119291723593 * S_AcceptedCmpTotal
1078016   +          +     0.56304851350844 * S_Frq  +     0.73567113537541 * S_Income
1078017   +          +    -3.12306246450604 * S_Mnt  +    -0.91316403938439 *
1078018   +        S_MntGoldProds  +    -2.69628755197256 * S_MntMeatProducts
1078019   +          +     0.85746867824621 * S_MntWines  +    -0.36724035406906 *
1078020   +        S_NumDistPurchases  +     0.28568968295985 * S_RFMstat
1078021   +          +    -0.93954323577146 * S_RMntFrq  +     0.85268992665591 *
1078022   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_6 = -1.1119291723593 * S_AcceptedCmpTotal + 0.56304851350844 *
S_Frq + 0.73567113537541 * S_Income + -3.12306246450604 * S_Mnt + -0.91316403938439 *
S_MntGoldProds + -2.69628755197256 * S_MntMeatProducts + 0.85746867824621 * S_MntWines +
-0.36724035406906 * S_NumDistPurchases + 0.28568968295985 * S_RFMstat + -0.93954323577146 *
S_RMntFrq + 0.85268992665591 * S_Recency ;
1078023   +   H1x4_1  = H1x4_1  +    -0.41637670428316 * G_Marital_Status0
1078024   +          +     1.82577173192743 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.41637670428316 * G_Marital_Status0 +
1.82577173192743 * G_Marital_Status1 ;
1078025   +   H1x4_2  = H1x4_2  +     1.30084682846119 * G_Marital_Status0
1078026   +          +     1.86494194086223 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = H1x4_2 + 1.30084682846119 * G_Marital_Status0 +
1.86494194086223 * G_Marital_Status1 ;
1078027   +   H1x4_3  = H1x4_3  +    -2.51039247492524 * G_Marital_Status0
1078028   +          +    -0.78535196846115 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = H1x4_3 + -2.51039247492524 * G_Marital_Status0 +
-0.78535196846115 * G_Marital_Status1 ;
1078029   +   H1x4_4  = H1x4_4  +    -1.66536345681649 * G_Marital_Status0
1078030   +          +    -1.13643623224979 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = H1x4_4 + -1.66536345681649 * G_Marital_Status0 +
-1.13643623224979 * G_Marital_Status1 ;
1078031   +   H1x4_5  = H1x4_5  +     0.34381083459151 * G_Marital_Status0
1078032   +          +    -0.50611098994468 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = H1x4_5 + 0.34381083459151 * G_Marital_Status0 +
-0.50611098994468 * G_Marital_Status1 ;
1078033   +   H1x4_6  = H1x4_6  +    -0.50144547845039 * G_Marital_Status0
1078034   +          +     1.05855030017376 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = H1x4_6 + -0.50144547845039 * G_Marital_Status0 +
1.05855030017376 * G_Marital_Status1 ;
1078035   +   H1x4_1  =     0.23907181959326 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 0.23907181959326 + H1x4_1 ;
1078036   +   H1x4_2  =    -1.57201194785995 + H1x4_2 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -1.57201194785995 + H1x4_2 ;
1078037   +   H1x4_3  =     2.06322674265618 + H1x4_3 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = 2.06322674265618 + H1x4_3 ;
1078038   +   H1x4_4  =     1.01469021578807 + H1x4_4 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.01469021578807 + H1x4_4 ;
1078039   +   H1x4_5  =     1.07767489348013 + H1x4_5 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.07767489348013 + H1x4_5 ;
1078040   +   H1x4_6  =     0.04477742816865 + H1x4_6 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = 0.04477742816865 + H1x4_6 ;
1078041   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1078042   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1078043   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1078044   +   H1x4_2  = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_2 = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
1078045   +   H1x4_3  = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_3 = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
1078046   +   H1x4_4  = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
1078047   +   H1x4_5  = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
1078048   +   H1x4_6  = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_6 = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
1078049   +END;
MPRINT(EM_DIAGRAM):   END;
1078050   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078051   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1078052   +   H1x4_2  = .;
MPRINT(EM_DIAGRAM):   H1x4_2 = .;
1078053   +   H1x4_3  = .;
MPRINT(EM_DIAGRAM):   H1x4_3 = .;
1078054   +   H1x4_4  = .;
MPRINT(EM_DIAGRAM):   H1x4_4 = .;
1078055   +   H1x4_5  = .;
MPRINT(EM_DIAGRAM):   H1x4_5 = .;
1078056   +   H1x4_6  = .;
MPRINT(EM_DIAGRAM):   H1x4_6 = .;
1078057   +END;
MPRINT(EM_DIAGRAM):   END;
1078058   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078059   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1078060   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078061   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078062   +   H2x1_1  =     1.57657363240028 * H1x1_1  +    -0.37699618626432 * H1x1_2
1078063   +          +    -0.60919993629457 * H1x1_3  +     2.97257779188857 * H1x1_4
1078064   +          +     4.47740938165819 * H1x1_5  +    -0.85059681057218 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.57657363240028 * H1x1_1 + -0.37699618626432 * H1x1_2 +
-0.60919993629457 * H1x1_3 + 2.97257779188857 * H1x1_4 + 4.47740938165819 * H1x1_5 +
-0.85059681057218 * H1x1_6 ;
1078065   +   H2x1_2  =     0.58245150995434 * H1x1_1  +     1.31825599717827 * H1x1_2
1078066   +          +    -0.46604129874265 * H1x1_3  +    -1.57880778011961 * H1x1_4
1078067   +          +      0.1296024356855 * H1x1_5  +    -0.32310175742174 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.58245150995434 * H1x1_1 + 1.31825599717827 * H1x1_2 +
-0.46604129874265 * H1x1_3 + -1.57880778011961 * H1x1_4 + 0.1296024356855 * H1x1_5 +
-0.32310175742174 * H1x1_6 ;
1078068   +   H2x1_3  =     0.08762368266386 * H1x1_1  +     -2.1587359786783 * H1x1_2
1078069   +          +     0.53603825884818 * H1x1_3  +    -0.24087329015868 * H1x1_4
1078070   +          +     0.03296173080719 * H1x1_5  +     0.01697480121243 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.08762368266386 * H1x1_1 + -2.1587359786783 * H1x1_2 +
0.53603825884818 * H1x1_3 + -0.24087329015868 * H1x1_4 + 0.03296173080719 * H1x1_5 +
0.01697480121243 * H1x1_6 ;
1078071   +   H2x1_4  =    -0.11182680657167 * H1x1_1  +     0.78238566788271 * H1x1_2
1078072   +          +    -0.32984662645651 * H1x1_3  +    -0.48952564803009 * H1x1_4
1078073   +          +    -1.99607614008712 * H1x1_5  +     0.10016209874446 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.11182680657167 * H1x1_1 + 0.78238566788271 * H1x1_2 +
-0.32984662645651 * H1x1_3 + -0.48952564803009 * H1x1_4 + -1.99607614008712 * H1x1_5 +
0.10016209874446 * H1x1_6 ;
1078074   +   H2x1_5  =     -1.2498866108229 * H1x1_1  +      3.2369796406078 * H1x1_2
1078075   +          +      2.8181066223344 * H1x1_3  +    -3.11752751718664 * H1x1_4
1078076   +          +    -0.69294382105442 * H1x1_5  +     1.50580112761945 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.2498866108229 * H1x1_1 + 3.2369796406078 * H1x1_2 +
2.8181066223344 * H1x1_3 + -3.11752751718664 * H1x1_4 + -0.69294382105442 * H1x1_5 +
1.50580112761945 * H1x1_6 ;
1078077   +   H2x1_1  = H2x1_1  +     1.23510627062479 * H1x2_1
1078078   +          +     0.24021661687189 * H1x2_2  +    -1.56696654026909 * H1x2_3
1078079   +          +     1.87814576627429 * H1x2_4  +     0.77581978719058 * H1x2_5
1078080   +          +    -0.36964326956968 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.23510627062479 * H1x2_1 + 0.24021661687189 * H1x2_2
+ -1.56696654026909 * H1x2_3 + 1.87814576627429 * H1x2_4 + 0.77581978719058 * H1x2_5 +
-0.36964326956968 * H1x2_6 ;
1078081   +   H2x1_2  = H2x1_2  +     0.92347023180909 * H1x2_1
1078082   +          +    -0.58884204034707 * H1x2_2  +     0.32527960762166 * H1x2_3
1078083   +          +    -2.67192710315835 * H1x2_4  +     1.11142627890507 * H1x2_5
1078084   +          +     -0.0675747785188 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.92347023180909 * H1x2_1 + -0.58884204034707 * H1x2_2
+ 0.32527960762166 * H1x2_3 + -2.67192710315835 * H1x2_4 + 1.11142627890507 * H1x2_5 +
-0.0675747785188 * H1x2_6 ;
1078085   +   H2x1_3  = H2x1_3  +    -0.92500735470206 * H1x2_1
1078086   +          +     0.02449601034461 * H1x2_2  +    -0.75716713196308 * H1x2_3
1078087   +          +     0.16672538074212 * H1x2_4  +    -1.03440004099384 * H1x2_5
1078088   +          +     0.20622228187831 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.92500735470206 * H1x2_1 + 0.02449601034461 * H1x2_2
+ -0.75716713196308 * H1x2_3 + 0.16672538074212 * H1x2_4 + -1.03440004099384 * H1x2_5 +
0.20622228187831 * H1x2_6 ;
1078089   +   H2x1_4  = H2x1_4  +     1.25485096748114 * H1x2_1
1078090   +          +     -0.2345670529973 * H1x2_2  +     1.00007865183196 * H1x2_3
1078091   +          +    -0.19520365006597 * H1x2_4  +     0.15141232788955 * H1x2_5
1078092   +          +     0.99704195296742 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25485096748114 * H1x2_1 + -0.2345670529973 * H1x2_2
+ 1.00007865183196 * H1x2_3 + -0.19520365006597 * H1x2_4 + 0.15141232788955 * H1x2_5 +
0.99704195296742 * H1x2_6 ;
1078093   +   H2x1_5  = H2x1_5  +    -0.65666404502833 * H1x2_1
1078094   +          +     2.28944563427288 * H1x2_2  +    -0.53344610521696 * H1x2_3
1078095   +          +      -0.793597979143 * H1x2_4  +     -0.5657184003534 * H1x2_5
1078096   +          +     0.52117926766363 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.65666404502833 * H1x2_1 + 2.28944563427288 * H1x2_2
+ -0.53344610521696 * H1x2_3 + -0.793597979143 * H1x2_4 + -0.5657184003534 * H1x2_5 +
0.52117926766363 * H1x2_6 ;
1078097   +   H2x1_1  = H2x1_1  +    -0.22872297219456 * H1x3_1
1078098   +          +     0.44130997341488 * H1x3_2  +     0.85543947016407 * H1x3_3
1078099   +          +      0.9172319436964 * H1x3_4  +    -0.63323674278101 * H1x3_5
1078100   +          +       0.010792162082 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.22872297219456 * H1x3_1 + 0.44130997341488 * H1x3_2
+ 0.85543947016407 * H1x3_3 + 0.9172319436964 * H1x3_4 + -0.63323674278101 * H1x3_5 +
0.010792162082 * H1x3_6 ;
1078101   +   H2x1_2  = H2x1_2  +    -0.47961853683007 * H1x3_1
1078102   +          +     0.67283234118014 * H1x3_2  +    -0.12148381681871 * H1x3_3
1078103   +          +     0.11539127068604 * H1x3_4  +     0.71547134269459 * H1x3_5
1078104   +          +     0.31051080747621 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.47961853683007 * H1x3_1 + 0.67283234118014 * H1x3_2
+ -0.12148381681871 * H1x3_3 + 0.11539127068604 * H1x3_4 + 0.71547134269459 * H1x3_5 +
0.31051080747621 * H1x3_6 ;
1078105   +   H2x1_3  = H2x1_3  +     0.84914297140244 * H1x3_1
1078106   +          +     0.52803158023536 * H1x3_2  +    -1.39949725219783 * H1x3_3
1078107   +          +     0.69603350257472 * H1x3_4  +    -0.99298091528215 * H1x3_5
1078108   +          +      0.4901677948096 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.84914297140244 * H1x3_1 + 0.52803158023536 * H1x3_2
+ -1.39949725219783 * H1x3_3 + 0.69603350257472 * H1x3_4 + -0.99298091528215 * H1x3_5 +
0.4901677948096 * H1x3_6 ;
1078109   +   H2x1_4  = H2x1_4  +     1.25437670540229 * H1x3_1
1078110   +          +     0.10767112672867 * H1x3_2  +     -2.4886577317349 * H1x3_3
1078111   +          +    -1.19999974192227 * H1x3_4  +     2.65195856746166 * H1x3_5
1078112   +          +    -0.35850032269696 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25437670540229 * H1x3_1 + 0.10767112672867 * H1x3_2
+ -2.4886577317349 * H1x3_3 + -1.19999974192227 * H1x3_4 + 2.65195856746166 * H1x3_5 +
-0.35850032269696 * H1x3_6 ;
1078113   +   H2x1_5  = H2x1_5  +    -0.18873569038601 * H1x3_1
1078114   +          +    -0.05695497456875 * H1x3_2  +    -1.09169714101723 * H1x3_3
1078115   +          +     0.66962829232535 * H1x3_4  +     0.68262583745167 * H1x3_5
1078116   +          +     0.91538472149247 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.18873569038601 * H1x3_1 + -0.05695497456875 *
H1x3_2 + -1.09169714101723 * H1x3_3 + 0.66962829232535 * H1x3_4 + 0.68262583745167 * H1x3_5 +
0.91538472149247 * H1x3_6 ;
1078117   +   H2x1_1  = H2x1_1  +    -0.77701371575001 * H1x4_1
1078118   +          +    -1.54239140939922 * H1x4_2  +    -0.26570372401877 * H1x4_3
1078119   +          +     0.00097824237229 * H1x4_4  +     0.57921309289721 * H1x4_5
1078120   +          +     1.46692133055956 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.77701371575001 * H1x4_1 + -1.54239140939922 *
H1x4_2 + -0.26570372401877 * H1x4_3 + 0.00097824237229 * H1x4_4 + 0.57921309289721 * H1x4_5 +
1.46692133055956 * H1x4_6 ;
1078121   +   H2x1_2  = H2x1_2  +     0.96564519202767 * H1x4_1
1078122   +          +    -0.06466152110331 * H1x4_2  +    -0.66659637249467 * H1x4_3
1078123   +          +     0.59673973270306 * H1x4_4  +     2.45492273841581 * H1x4_5
1078124   +          +     -0.4804481967354 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.96564519202767 * H1x4_1 + -0.06466152110331 * H1x4_2
+ -0.66659637249467 * H1x4_3 + 0.59673973270306 * H1x4_4 + 2.45492273841581 * H1x4_5 +
-0.4804481967354 * H1x4_6 ;
1078125   +   H2x1_3  = H2x1_3  +     0.75339074826799 * H1x4_1
1078126   +          +     1.26373188682879 * H1x4_2  +     0.49419374749947 * H1x4_3
1078127   +          +     1.26541916145956 * H1x4_4  +     0.10039190806961 * H1x4_5
1078128   +          +    -0.79556185531974 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.75339074826799 * H1x4_1 + 1.26373188682879 * H1x4_2
+ 0.49419374749947 * H1x4_3 + 1.26541916145956 * H1x4_4 + 0.10039190806961 * H1x4_5 +
-0.79556185531974 * H1x4_6 ;
1078129   +   H2x1_4  = H2x1_4  +    -0.28271287281925 * H1x4_1
1078130   +          +      2.1208193298333 * H1x4_2  +    -0.65223420232343 * H1x4_3
1078131   +          +     0.02666229497558 * H1x4_4  +     0.72865787458027 * H1x4_5
1078132   +          +    -0.22377472142722 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.28271287281925 * H1x4_1 + 2.1208193298333 * H1x4_2
+ -0.65223420232343 * H1x4_3 + 0.02666229497558 * H1x4_4 + 0.72865787458027 * H1x4_5 +
-0.22377472142722 * H1x4_6 ;
1078133   +   H2x1_5  = H2x1_5  +    -0.84067714042271 * H1x4_1
1078134   +          +    -1.59141777016956 * H1x4_2  +     0.46077797807782 * H1x4_3
1078135   +          +    -0.07031579794448 * H1x4_4  +     0.83754013895307 * H1x4_5
1078136   +          +     0.49805259687865 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.84067714042271 * H1x4_1 + -1.59141777016956 *
H1x4_2 + 0.46077797807782 * H1x4_3 + -0.07031579794448 * H1x4_4 + 0.83754013895307 * H1x4_5 +
0.49805259687865 * H1x4_6 ;
1078137   +   H2x1_1  =     1.86496757154162 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.86496757154162 + H2x1_1 ;
1078138   +   H2x1_2  =     0.46453634696909 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.46453634696909 + H2x1_2 ;
1078139   +   H2x1_3  =     0.36165501609225 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.36165501609225 + H2x1_3 ;
1078140   +   H2x1_4  =    -0.91790753889181 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.91790753889181 + H2x1_4 ;
1078141   +   H2x1_5  =     2.82445131106489 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 2.82445131106489 + H2x1_5 ;
1078142   +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
1078143   +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
1078144   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078145   +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
1078146   +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
1078147   +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
1078148   +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
1078149   +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
1078150   +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
1078151   +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
1078152   +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
1078153   +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
1078154   +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
1078155   +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
1078156   +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
1078157   +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
1078158   +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
1078159   +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
1078160   +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
1078161   +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
1078162   +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
1078163   +END;
MPRINT(EM_DIAGRAM):   END;
1078164   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078165   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1078166   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1078167   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1078168   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1078169   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1078170   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1078171   +END;
MPRINT(EM_DIAGRAM):   END;
1078172   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078173   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1078174   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078175   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078176   +   H2x2_1  =     0.06037434087051 * H1x1_1  +     2.10312669809986 * H1x1_2
1078177   +          +     0.25966374544266 * H1x1_3  +     -0.4604625015482 * H1x1_4
1078178   +          +    -0.04852853005798 * H1x1_5  +     1.73108900683337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.06037434087051 * H1x1_1 + 2.10312669809986 * H1x1_2 +
0.25966374544266 * H1x1_3 + -0.4604625015482 * H1x1_4 + -0.04852853005798 * H1x1_5 +
1.73108900683337 * H1x1_6 ;
1078179   +   H2x2_2  =    -1.98874787809729 * H1x1_1  +    -0.90575568783349 * H1x1_2
1078180   +          +     2.19451885005981 * H1x1_3  +     0.86127175797091 * H1x1_4
1078181   +          +     0.88302785384691 * H1x1_5  +     1.44831802939799 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.98874787809729 * H1x1_1 + -0.90575568783349 * H1x1_2 +
2.19451885005981 * H1x1_3 + 0.86127175797091 * H1x1_4 + 0.88302785384691 * H1x1_5 +
1.44831802939799 * H1x1_6 ;
1078182   +   H2x2_3  =     0.99020573159855 * H1x1_1  +    -0.25509107111568 * H1x1_2
1078183   +          +    -0.88380027397433 * H1x1_3  +     2.61444810707966 * H1x1_4
1078184   +          +     1.12768553693881 * H1x1_5  +    -1.33423515707253 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 0.99020573159855 * H1x1_1 + -0.25509107111568 * H1x1_2 +
-0.88380027397433 * H1x1_3 + 2.61444810707966 * H1x1_4 + 1.12768553693881 * H1x1_5 +
-1.33423515707253 * H1x1_6 ;
1078185   +   H2x2_4  =    -0.48971657670431 * H1x1_1  +    -2.03924441101145 * H1x1_2
1078186   +          +    -0.44598954940675 * H1x1_3  +    -0.38296699607675 * H1x1_4
1078187   +          +    -0.46829791763961 * H1x1_5  +     0.57571476480191 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.48971657670431 * H1x1_1 + -2.03924441101145 * H1x1_2 +
-0.44598954940675 * H1x1_3 + -0.38296699607675 * H1x1_4 + -0.46829791763961 * H1x1_5 +
0.57571476480191 * H1x1_6 ;
1078188   +   H2x2_5  =     1.15324249951205 * H1x1_1  +    -0.30656607959814 * H1x1_2
1078189   +          +    -0.26327906953925 * H1x1_3  +    -0.30055126052518 * H1x1_4
1078190   +          +     1.20108560127357 * H1x1_5  +    -2.01222927536337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.15324249951205 * H1x1_1 + -0.30656607959814 * H1x1_2 +
-0.26327906953925 * H1x1_3 + -0.30055126052518 * H1x1_4 + 1.20108560127357 * H1x1_5 +
-2.01222927536337 * H1x1_6 ;
1078191   +   H2x2_1  = H2x2_1  +     0.67714997403987 * H1x2_1
1078192   +          +     0.58512699375084 * H1x2_2  +     0.82352577521669 * H1x2_3
1078193   +          +    -0.10235751124142 * H1x2_4  +     0.33612939980192 * H1x2_5
1078194   +          +    -0.86707973977777 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.67714997403987 * H1x2_1 + 0.58512699375084 * H1x2_2
+ 0.82352577521669 * H1x2_3 + -0.10235751124142 * H1x2_4 + 0.33612939980192 * H1x2_5 +
-0.86707973977777 * H1x2_6 ;
1078195   +   H2x2_2  = H2x2_2  +     0.54358612690033 * H1x2_1
1078196   +          +     0.85147893022911 * H1x2_2  +     0.19383313272548 * H1x2_3
1078197   +          +     0.54163359333706 * H1x2_4  +    -0.12377705517298 * H1x2_5
1078198   +          +     0.34775419906833 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54358612690033 * H1x2_1 + 0.85147893022911 * H1x2_2
+ 0.19383313272548 * H1x2_3 + 0.54163359333706 * H1x2_4 + -0.12377705517298 * H1x2_5 +
0.34775419906833 * H1x2_6 ;
1078199   +   H2x2_3  = H2x2_3  +    -0.93107945276808 * H1x2_1
1078200   +          +     0.68475936175775 * H1x2_2  +    -0.23180217492353 * H1x2_3
1078201   +          +     0.62637113173904 * H1x2_4  +      -0.494489282403 * H1x2_5
1078202   +          +    -0.92757761378206 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.93107945276808 * H1x2_1 + 0.68475936175775 * H1x2_2
+ -0.23180217492353 * H1x2_3 + 0.62637113173904 * H1x2_4 + -0.494489282403 * H1x2_5 +
-0.92757761378206 * H1x2_6 ;
1078203   +   H2x2_4  = H2x2_4  +    -0.04592275767761 * H1x2_1
1078204   +          +    -0.46728046145973 * H1x2_2  +    -0.84120395772864 * H1x2_3
1078205   +          +     0.15719249141893 * H1x2_4  +    -0.46514309972577 * H1x2_5
1078206   +          +     1.22882033880531 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.04592275767761 * H1x2_1 + -0.46728046145973 *
H1x2_2 + -0.84120395772864 * H1x2_3 + 0.15719249141893 * H1x2_4 + -0.46514309972577 * H1x2_5 +
1.22882033880531 * H1x2_6 ;
1078207   +   H2x2_5  = H2x2_5  +     1.84159049843244 * H1x2_1
1078208   +          +     0.10275783758743 * H1x2_2  +    -1.43072878385761 * H1x2_3
1078209   +          +     0.55082995966416 * H1x2_4  +      0.6610129464186 * H1x2_5
1078210   +          +     1.13665339513142 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 1.84159049843244 * H1x2_1 + 0.10275783758743 * H1x2_2
+ -1.43072878385761 * H1x2_3 + 0.55082995966416 * H1x2_4 + 0.6610129464186 * H1x2_5 +
1.13665339513142 * H1x2_6 ;
1078211   +   H2x2_1  = H2x2_1  +    -1.51032464504011 * H1x3_1
1078212   +          +    -0.09256867451899 * H1x3_2  +     0.32445533867689 * H1x3_3
1078213   +          +     0.05761597623645 * H1x3_4  +    -0.76755137543453 * H1x3_5
1078214   +          +    -0.84355541605354 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -1.51032464504011 * H1x3_1 + -0.09256867451899 *
H1x3_2 + 0.32445533867689 * H1x3_3 + 0.05761597623645 * H1x3_4 + -0.76755137543453 * H1x3_5 +
-0.84355541605354 * H1x3_6 ;
1078215   +   H2x2_2  = H2x2_2  +     0.10183122181912 * H1x3_1
1078216   +          +    -0.30112412370797 * H1x3_2  +     0.67666605377075 * H1x3_3
1078217   +          +    -0.05362728717558 * H1x3_4  +    -0.02087908172702 * H1x3_5
1078218   +          +    -0.14832407235293 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.10183122181912 * H1x3_1 + -0.30112412370797 * H1x3_2
+ 0.67666605377075 * H1x3_3 + -0.05362728717558 * H1x3_4 + -0.02087908172702 * H1x3_5 +
-0.14832407235293 * H1x3_6 ;
1078219   +   H2x2_3  = H2x2_3  +     1.70579601255161 * H1x3_1
1078220   +          +     -0.4658368752668 * H1x3_2  +    -0.54573113497487 * H1x3_3
1078221   +          +     1.13279034034213 * H1x3_4  +     1.23714589942258 * H1x3_5
1078222   +          +     0.41209753590668 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.70579601255161 * H1x3_1 + -0.4658368752668 * H1x3_2
+ -0.54573113497487 * H1x3_3 + 1.13279034034213 * H1x3_4 + 1.23714589942258 * H1x3_5 +
0.41209753590668 * H1x3_6 ;
1078223   +   H2x2_4  = H2x2_4  +     0.21012073552633 * H1x3_1
1078224   +          +      -1.607803967771 * H1x3_2  +     0.02641742148684 * H1x3_3
1078225   +          +      -0.919177834124 * H1x3_4  +    -0.46658991803838 * H1x3_5
1078226   +          +     0.05356295771962 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.21012073552633 * H1x3_1 + -1.607803967771 * H1x3_2 +
0.02641742148684 * H1x3_3 + -0.919177834124 * H1x3_4 + -0.46658991803838 * H1x3_5 +
0.05356295771962 * H1x3_6 ;
1078227   +   H2x2_5  = H2x2_5  +     -1.1424376096243 * H1x3_1
1078228   +          +    -0.47941730936597 * H1x3_2  +    -1.44857674506057 * H1x3_3
1078229   +          +     -2.0300913051093 * H1x3_4  +    -0.12476620160938 * H1x3_5
1078230   +          +      1.3865980084186 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -1.1424376096243 * H1x3_1 + -0.47941730936597 * H1x3_2
+ -1.44857674506057 * H1x3_3 + -2.0300913051093 * H1x3_4 + -0.12476620160938 * H1x3_5 +
1.3865980084186 * H1x3_6 ;
1078231   +   H2x2_1  = H2x2_1  +    -0.80277778579719 * H1x4_1
1078232   +          +     0.89356845434924 * H1x4_2  +     1.34679856015636 * H1x4_3
1078233   +          +    -0.75666255425893 * H1x4_4  +    -0.76982332990737 * H1x4_5
1078234   +          +     0.16602366912489 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.80277778579719 * H1x4_1 + 0.89356845434924 * H1x4_2
+ 1.34679856015636 * H1x4_3 + -0.75666255425893 * H1x4_4 + -0.76982332990737 * H1x4_5 +
0.16602366912489 * H1x4_6 ;
1078235   +   H2x2_2  = H2x2_2  +    -1.23815292104545 * H1x4_1
1078236   +          +     0.15726093177842 * H1x4_2  +     0.11603212859646 * H1x4_3
1078237   +          +     0.38287343591011 * H1x4_4  +    -0.51333663927664 * H1x4_5
1078238   +          +     -0.9577144624714 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -1.23815292104545 * H1x4_1 + 0.15726093177842 * H1x4_2
+ 0.11603212859646 * H1x4_3 + 0.38287343591011 * H1x4_4 + -0.51333663927664 * H1x4_5 +
-0.9577144624714 * H1x4_6 ;
1078239   +   H2x2_3  = H2x2_3  +    -0.68480171858681 * H1x4_1
1078240   +          +    -0.64475211431817 * H1x4_2  +     0.54382770716837 * H1x4_3
1078241   +          +     0.07586519798399 * H1x4_4  +      -0.158352646931 * H1x4_5
1078242   +          +    -0.86962851115528 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.68480171858681 * H1x4_1 + -0.64475211431817 *
H1x4_2 + 0.54382770716837 * H1x4_3 + 0.07586519798399 * H1x4_4 + -0.158352646931 * H1x4_5 +
-0.86962851115528 * H1x4_6 ;
1078243   +   H2x2_4  = H2x2_4  +     1.08721247219364 * H1x4_1
1078244   +          +    -0.00199447585891 * H1x4_2  +    -0.84066724442019 * H1x4_3
1078245   +          +     0.28532638217608 * H1x4_4  +    -1.14779513957631 * H1x4_5
1078246   +          +     2.01216139921959 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 1.08721247219364 * H1x4_1 + -0.00199447585891 * H1x4_2
+ -0.84066724442019 * H1x4_3 + 0.28532638217608 * H1x4_4 + -1.14779513957631 * H1x4_5 +
2.01216139921959 * H1x4_6 ;
1078247   +   H2x2_5  = H2x2_5  +    -0.82582817846967 * H1x4_1
1078248   +          +    -1.09057773595959 * H1x4_2  +     -0.2490905553905 * H1x4_3
1078249   +          +     0.93092377717594 * H1x4_4  +     0.02946641402494 * H1x4_5
1078250   +          +    -0.19026348436175 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.82582817846967 * H1x4_1 + -1.09057773595959 *
H1x4_2 + -0.2490905553905 * H1x4_3 + 0.93092377717594 * H1x4_4 + 0.02946641402494 * H1x4_5 +
-0.19026348436175 * H1x4_6 ;
1078251   +   H2x2_1  =      0.4280804812723 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.4280804812723 + H2x2_1 ;
1078252   +   H2x2_2  =    -1.09169904475569 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.09169904475569 + H2x2_2 ;
1078253   +   H2x2_3  =      1.1980619484542 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.1980619484542 + H2x2_3 ;
1078254   +   H2x2_4  =    -0.69756677248934 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.69756677248934 + H2x2_4 ;
1078255   +   H2x2_5  =    -1.87910212660657 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = -1.87910212660657 + H2x2_5 ;
1078256   +   H2x2_6  = 0;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0;
1078257   +   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
1078258   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078259   +   H2x2_1  = EXP(H2x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_1 = EXP(H2x2_1 - _MAX_);
1078260   +   _SUM_ = _SUM_ + H2x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_1 ;
1078261   +   H2x2_2  = EXP(H2x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_2 = EXP(H2x2_2 - _MAX_);
1078262   +   _SUM_ = _SUM_ + H2x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_2 ;
1078263   +   H2x2_3  = EXP(H2x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_3 = EXP(H2x2_3 - _MAX_);
1078264   +   _SUM_ = _SUM_ + H2x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_3 ;
1078265   +   H2x2_4  = EXP(H2x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_4 = EXP(H2x2_4 - _MAX_);
1078266   +   _SUM_ = _SUM_ + H2x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_4 ;
1078267   +   H2x2_5  = EXP(H2x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_5 = EXP(H2x2_5 - _MAX_);
1078268   +   _SUM_ = _SUM_ + H2x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_5 ;
1078269   +   H2x2_6  = EXP(H2x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_6 = EXP(H2x2_6 - _MAX_);
1078270   +   _SUM_ = _SUM_ + H2x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_6 ;
1078271   +   H2x2_1  = H2x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 / _SUM_;
1078272   +   H2x2_2  = H2x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 / _SUM_;
1078273   +   H2x2_3  = H2x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 / _SUM_;
1078274   +   H2x2_4  = H2x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 / _SUM_;
1078275   +   H2x2_5  = H2x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 / _SUM_;
1078276   +   H2x2_6  = H2x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 / _SUM_;
1078277   +END;
MPRINT(EM_DIAGRAM):   END;
1078278   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078279   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1078280   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1078281   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1078282   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1078283   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1078284   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1078285   +END;
MPRINT(EM_DIAGRAM):   END;
1078286   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078287   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1078288   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078289   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078290   +   H2x3_1  =     0.51206365204428 * H1x1_1  +    -1.75446248490807 * H1x1_2
1078291   +          +     0.22956544269482 * H1x1_3  +     0.91651437630074 * H1x1_4
1078292   +          +    -0.88731743590726 * H1x1_5  +     0.75959028005652 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = 0.51206365204428 * H1x1_1 + -1.75446248490807 * H1x1_2 +
0.22956544269482 * H1x1_3 + 0.91651437630074 * H1x1_4 + -0.88731743590726 * H1x1_5 +
0.75959028005652 * H1x1_6 ;
1078293   +   H2x3_2  =    -0.45196055100748 * H1x1_1  +    -0.30516535345407 * H1x1_2
1078294   +          +    -0.95535662641329 * H1x1_3  +     0.98793241812876 * H1x1_4
1078295   +          +    -2.26205386368521 * H1x1_5  +    -0.79989554227284 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = -0.45196055100748 * H1x1_1 + -0.30516535345407 * H1x1_2 +
-0.95535662641329 * H1x1_3 + 0.98793241812876 * H1x1_4 + -2.26205386368521 * H1x1_5 +
-0.79989554227284 * H1x1_6 ;
1078296   +   H2x3_3  =     1.75400558713364 * H1x1_1  +     0.36065784285286 * H1x1_2
1078297   +          +    -0.26047606287884 * H1x1_3  +    -0.92639558885443 * H1x1_4
1078298   +          +     1.89978202395282 * H1x1_5  +     1.46105111567983 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = 1.75400558713364 * H1x1_1 + 0.36065784285286 * H1x1_2 +
-0.26047606287884 * H1x1_3 + -0.92639558885443 * H1x1_4 + 1.89978202395282 * H1x1_5 +
1.46105111567983 * H1x1_6 ;
1078299   +   H2x3_4  =     -1.0609986914691 * H1x1_1  +     1.03588259392678 * H1x1_2
1078300   +          +     0.18751061078347 * H1x1_3  +     1.45467172411852 * H1x1_4
1078301   +          +     0.80970691110797 * H1x1_5  +    -0.03142746343877 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = -1.0609986914691 * H1x1_1 + 1.03588259392678 * H1x1_2 +
0.18751061078347 * H1x1_3 + 1.45467172411852 * H1x1_4 + 0.80970691110797 * H1x1_5 +
-0.03142746343877 * H1x1_6 ;
1078302   +   H2x3_5  =     0.68514959739435 * H1x1_1  +    -0.85703618516825 * H1x1_2
1078303   +          +    -1.42641478008517 * H1x1_3  +     0.69128253039497 * H1x1_4
1078304   +          +    -0.41103428804251 * H1x1_5  +     2.29818718782262 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = 0.68514959739435 * H1x1_1 + -0.85703618516825 * H1x1_2 +
-1.42641478008517 * H1x1_3 + 0.69128253039497 * H1x1_4 + -0.41103428804251 * H1x1_5 +
2.29818718782262 * H1x1_6 ;
1078305   +   H2x3_1  = H2x3_1  +    -1.02124610786304 * H1x2_1
1078306   +          +    -0.70086367508924 * H1x2_2  +     1.44543746222048 * H1x2_3
1078307   +          +      0.0077115223216 * H1x2_4  +    -1.13603676440953 * H1x2_5
1078308   +          +    -0.39006326539815 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.02124610786304 * H1x2_1 + -0.70086367508924 *
H1x2_2 + 1.44543746222048 * H1x2_3 + 0.0077115223216 * H1x2_4 + -1.13603676440953 * H1x2_5 +
-0.39006326539815 * H1x2_6 ;
1078309   +   H2x3_2  = H2x3_2  +     0.58504868182178 * H1x2_1
1078310   +          +    -2.53394647771808 * H1x2_2  +    -0.46920351111552 * H1x2_3
1078311   +          +    -0.13298739365164 * H1x2_4  +    -0.72916785042807 * H1x2_5
1078312   +          +     0.87575796008942 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + 0.58504868182178 * H1x2_1 + -2.53394647771808 * H1x2_2
+ -0.46920351111552 * H1x2_3 + -0.13298739365164 * H1x2_4 + -0.72916785042807 * H1x2_5 +
0.87575796008942 * H1x2_6 ;
1078313   +   H2x3_3  = H2x3_3  +      -0.403068394175 * H1x2_1
1078314   +          +     2.20341156440175 * H1x2_2  +     0.18637166393472 * H1x2_3
1078315   +          +    -0.49818124689746 * H1x2_4  +    -0.57482220863202 * H1x2_5
1078316   +          +    -0.99288712489296 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -0.403068394175 * H1x2_1 + 2.20341156440175 * H1x2_2 +
0.18637166393472 * H1x2_3 + -0.49818124689746 * H1x2_4 + -0.57482220863202 * H1x2_5 +
-0.99288712489296 * H1x2_6 ;
1078317   +   H2x3_4  = H2x3_4  +    -0.08255075671356 * H1x2_1
1078318   +          +     0.12417859340249 * H1x2_2  +     0.38623860203678 * H1x2_3
1078319   +          +     1.30375188803419 * H1x2_4  +     0.06113655765155 * H1x2_5
1078320   +          +     2.18684373678918 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.08255075671356 * H1x2_1 + 0.12417859340249 * H1x2_2
+ 0.38623860203678 * H1x2_3 + 1.30375188803419 * H1x2_4 + 0.06113655765155 * H1x2_5 +
2.18684373678918 * H1x2_6 ;
1078321   +   H2x3_5  = H2x3_5  +     0.02445507420447 * H1x2_1
1078322   +          +     -1.1429834255353 * H1x2_2  +     1.15057813366971 * H1x2_3
1078323   +          +     -0.7929157351984 * H1x2_4  +      0.4343084860458 * H1x2_5
1078324   +          +      0.0384736341173 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + 0.02445507420447 * H1x2_1 + -1.1429834255353 * H1x2_2
+ 1.15057813366971 * H1x2_3 + -0.7929157351984 * H1x2_4 + 0.4343084860458 * H1x2_5 +
0.0384736341173 * H1x2_6 ;
1078325   +   H2x3_1  = H2x3_1  +     0.37764572590016 * H1x3_1
1078326   +          +     1.48191356825225 * H1x3_2  +    -0.26603273466393 * H1x3_3
1078327   +          +    -1.29507822568105 * H1x3_4  +     1.84557717124725 * H1x3_5
1078328   +          +    -0.65863037608331 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 0.37764572590016 * H1x3_1 + 1.48191356825225 * H1x3_2
+ -0.26603273466393 * H1x3_3 + -1.29507822568105 * H1x3_4 + 1.84557717124725 * H1x3_5 +
-0.65863037608331 * H1x3_6 ;
1078329   +   H2x3_2  = H2x3_2  +    -3.49060338051306 * H1x3_1
1078330   +          +      1.3541565382925 * H1x3_2  +    -0.38315198954693 * H1x3_3
1078331   +          +    -2.08846010475603 * H1x3_4  +    -0.03268324043605 * H1x3_5
1078332   +          +     -0.2732767866426 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -3.49060338051306 * H1x3_1 + 1.3541565382925 * H1x3_2
+ -0.38315198954693 * H1x3_3 + -2.08846010475603 * H1x3_4 + -0.03268324043605 * H1x3_5 +
-0.2732767866426 * H1x3_6 ;
1078333   +   H2x3_3  = H2x3_3  +    -1.02108681113274 * H1x3_1
1078334   +          +     1.11670732797487 * H1x3_2  +    -2.83817066251645 * H1x3_3
1078335   +          +     2.91943649605743 * H1x3_4  +    -1.58666117886546 * H1x3_5
1078336   +          +     0.95358246629929 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -1.02108681113274 * H1x3_1 + 1.11670732797487 * H1x3_2
+ -2.83817066251645 * H1x3_3 + 2.91943649605743 * H1x3_4 + -1.58666117886546 * H1x3_5 +
0.95358246629929 * H1x3_6 ;
1078337   +   H2x3_4  = H2x3_4  +    -0.28934138457604 * H1x3_1
1078338   +          +     -0.1627562650927 * H1x3_2  +     1.76496399430623 * H1x3_3
1078339   +          +     2.05776756058594 * H1x3_4  +    -0.96994650178001 * H1x3_5
1078340   +          +    -1.50364154763084 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.28934138457604 * H1x3_1 + -0.1627562650927 * H1x3_2
+ 1.76496399430623 * H1x3_3 + 2.05776756058594 * H1x3_4 + -0.96994650178001 * H1x3_5 +
-1.50364154763084 * H1x3_6 ;
1078341   +   H2x3_5  = H2x3_5  +    -0.73016276992619 * H1x3_1
1078342   +          +    -1.48258849718818 * H1x3_2  +    -0.47908044807419 * H1x3_3
1078343   +          +      0.5957671579209 * H1x3_4  +     0.06707833713085 * H1x3_5
1078344   +          +      0.3673818114501 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.73016276992619 * H1x3_1 + -1.48258849718818 *
H1x3_2 + -0.47908044807419 * H1x3_3 + 0.5957671579209 * H1x3_4 + 0.06707833713085 * H1x3_5 +
0.3673818114501 * H1x3_6 ;
1078345   +   H2x3_1  = H2x3_1  +     1.64939881299916 * H1x4_1
1078346   +          +     0.29057047745206 * H1x4_2  +     -1.2430356696985 * H1x4_3
1078347   +          +     1.38895822896909 * H1x4_4  +     0.32263395713709 * H1x4_5
1078348   +          +      -0.876005602164 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 1.64939881299916 * H1x4_1 + 0.29057047745206 * H1x4_2
+ -1.2430356696985 * H1x4_3 + 1.38895822896909 * H1x4_4 + 0.32263395713709 * H1x4_5 +
-0.876005602164 * H1x4_6 ;
1078349   +   H2x3_2  = H2x3_2  +    -0.59279077758901 * H1x4_1
1078350   +          +     0.47534983861589 * H1x4_2  +     1.50522851379751 * H1x4_3
1078351   +          +    -0.52074826438565 * H1x4_4  +    -0.13959571645898 * H1x4_5
1078352   +          +     0.51236653129509 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -0.59279077758901 * H1x4_1 + 0.47534983861589 * H1x4_2
+ 1.50522851379751 * H1x4_3 + -0.52074826438565 * H1x4_4 + -0.13959571645898 * H1x4_5 +
0.51236653129509 * H1x4_6 ;
1078353   +   H2x3_3  = H2x3_3  +       0.170929264521 * H1x4_1
1078354   +          +    -1.09768862147461 * H1x4_2  +    -1.22166369035864 * H1x4_3
1078355   +          +    -0.43496041372082 * H1x4_4  +     0.86983484014566 * H1x4_5
1078356   +          +     0.14855508666868 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + 0.170929264521 * H1x4_1 + -1.09768862147461 * H1x4_2 +
-1.22166369035864 * H1x4_3 + -0.43496041372082 * H1x4_4 + 0.86983484014566 * H1x4_5 +
0.14855508666868 * H1x4_6 ;
1078357   +   H2x3_4  = H2x3_4  +    -0.26703118340308 * H1x4_1
1078358   +          +     0.58353167926887 * H1x4_2  +     1.39169479141155 * H1x4_3
1078359   +          +     -0.7893707969296 * H1x4_4  +     0.89521873365477 * H1x4_5
1078360   +          +     1.60853840268286 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.26703118340308 * H1x4_1 + 0.58353167926887 * H1x4_2
+ 1.39169479141155 * H1x4_3 + -0.7893707969296 * H1x4_4 + 0.89521873365477 * H1x4_5 +
1.60853840268286 * H1x4_6 ;
1078361   +   H2x3_5  = H2x3_5  +    -0.29353449181426 * H1x4_1
1078362   +          +     0.02697197445995 * H1x4_2  +     0.04454970336296 * H1x4_3
1078363   +          +    -0.17322488506489 * H1x4_4  +    -1.52564540234935 * H1x4_5
1078364   +          +      0.6650692994568 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.29353449181426 * H1x4_1 + 0.02697197445995 * H1x4_2
+ 0.04454970336296 * H1x4_3 + -0.17322488506489 * H1x4_4 + -1.52564540234935 * H1x4_5 +
0.6650692994568 * H1x4_6 ;
1078365   +   H2x3_1  =    -0.44046998911725 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -0.44046998911725 + H2x3_1 ;
1078366   +   H2x3_2  =     1.44590821330163 + H2x3_2 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = 1.44590821330163 + H2x3_2 ;
1078367   +   H2x3_3  =    -0.02671947857742 + H2x3_3 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = -0.02671947857742 + H2x3_3 ;
1078368   +   H2x3_4  =     2.16876314488082 + H2x3_4 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = 2.16876314488082 + H2x3_4 ;
1078369   +   H2x3_5  =    -1.06855161267989 + H2x3_5 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = -1.06855161267989 + H2x3_5 ;
1078370   +   H2x3_6  = 0;
MPRINT(EM_DIAGRAM):   H2x3_6 = 0;
1078371   +   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
1078372   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078373   +   H2x3_1  = EXP(H2x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_1 = EXP(H2x3_1 - _MAX_);
1078374   +   _SUM_ = _SUM_ + H2x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_1 ;
1078375   +   H2x3_2  = EXP(H2x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_2 = EXP(H2x3_2 - _MAX_);
1078376   +   _SUM_ = _SUM_ + H2x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_2 ;
1078377   +   H2x3_3  = EXP(H2x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_3 = EXP(H2x3_3 - _MAX_);
1078378   +   _SUM_ = _SUM_ + H2x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_3 ;
1078379   +   H2x3_4  = EXP(H2x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_4 = EXP(H2x3_4 - _MAX_);
1078380   +   _SUM_ = _SUM_ + H2x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_4 ;
1078381   +   H2x3_5  = EXP(H2x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_5 = EXP(H2x3_5 - _MAX_);
1078382   +   _SUM_ = _SUM_ + H2x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_5 ;
1078383   +   H2x3_6  = EXP(H2x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_6 = EXP(H2x3_6 - _MAX_);
1078384   +   _SUM_ = _SUM_ + H2x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_6 ;
1078385   +   H2x3_1  = H2x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 / _SUM_;
1078386   +   H2x3_2  = H2x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 / _SUM_;
1078387   +   H2x3_3  = H2x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 / _SUM_;
1078388   +   H2x3_4  = H2x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 / _SUM_;
1078389   +   H2x3_5  = H2x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 / _SUM_;
1078390   +   H2x3_6  = H2x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_6 = H2x3_6 / _SUM_;
1078391   +END;
MPRINT(EM_DIAGRAM):   END;
1078392   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078393   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1078394   +   H2x3_2  = .;
MPRINT(EM_DIAGRAM):   H2x3_2 = .;
1078395   +   H2x3_3  = .;
MPRINT(EM_DIAGRAM):   H2x3_3 = .;
1078396   +   H2x3_4  = .;
MPRINT(EM_DIAGRAM):   H2x3_4 = .;
1078397   +   H2x3_5  = .;
MPRINT(EM_DIAGRAM):   H2x3_5 = .;
1078398   +   H2x3_6  = .;
MPRINT(EM_DIAGRAM):   H2x3_6 = .;
1078399   +END;
MPRINT(EM_DIAGRAM):   END;
1078400   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078401   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1078402   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078403   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078404   +   H3x1_1  =     0.14821897068309 * H2x1_1  +     0.10105634438409 * H2x1_2
1078405   +          +     0.69826499371673 * H2x1_3  +     1.65127139539807 * H2x1_4
1078406   +          +     1.34699293376382 * H2x1_5  +     0.62066324264653 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.14821897068309 * H2x1_1 + 0.10105634438409 * H2x1_2 +
0.69826499371673 * H2x1_3 + 1.65127139539807 * H2x1_4 + 1.34699293376382 * H2x1_5 +
0.62066324264653 * H2x1_6 ;
1078407   +   H3x1_2  =     -0.6760189094281 * H2x1_1  +     0.85348791240011 * H2x1_2
1078408   +          +    -0.07663386217946 * H2x1_3  +     2.15467384269703 * H2x1_4
1078409   +          +    -0.50699529916446 * H2x1_5  +     1.70699964755049 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = -0.6760189094281 * H2x1_1 + 0.85348791240011 * H2x1_2 +
-0.07663386217946 * H2x1_3 + 2.15467384269703 * H2x1_4 + -0.50699529916446 * H2x1_5 +
1.70699964755049 * H2x1_6 ;
1078410   +   H3x1_3  =    -0.94311365048828 * H2x1_1  +    -0.69829528108975 * H2x1_2
1078411   +          +    -0.34747616168009 * H2x1_3  +     2.32941170908743 * H2x1_4
1078412   +          +     3.71768144878584 * H2x1_5  +    -0.60932405988373 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -0.94311365048828 * H2x1_1 + -0.69829528108975 * H2x1_2 +
-0.34747616168009 * H2x1_3 + 2.32941170908743 * H2x1_4 + 3.71768144878584 * H2x1_5 +
-0.60932405988373 * H2x1_6 ;
1078413   +   H3x1_4  =     1.69107510526388 * H2x1_1  +    -1.40350955348413 * H2x1_2
1078414   +          +    -0.47901844016365 * H2x1_3  +      0.3540542650553 * H2x1_4
1078415   +          +    -1.56597514252687 * H2x1_5  +    -0.04997148078498 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.69107510526388 * H2x1_1 + -1.40350955348413 * H2x1_2 +
-0.47901844016365 * H2x1_3 + 0.3540542650553 * H2x1_4 + -1.56597514252687 * H2x1_5 +
-0.04997148078498 * H2x1_6 ;
1078416   +   H3x1_5  =    -0.23167181678539 * H2x1_1  +    -0.65942738658946 * H2x1_2
1078417   +          +    -0.83280103611578 * H2x1_3  +    -1.03301865685228 * H2x1_4
1078418   +          +      1.3401316289209 * H2x1_5  +    -1.98639459325872 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.23167181678539 * H2x1_1 + -0.65942738658946 * H2x1_2 +
-0.83280103611578 * H2x1_3 + -1.03301865685228 * H2x1_4 + 1.3401316289209 * H2x1_5 +
-1.98639459325872 * H2x1_6 ;
1078419   +   H3x1_1  = H3x1_1  +    -1.96226306174896 * H2x2_1
1078420   +          +     1.03065434267907 * H2x2_2  +    -0.02977552697407 * H2x2_3
1078421   +          +    -2.15633683205343 * H2x2_4  +    -0.16172049876123 * H2x2_5
1078422   +          +     2.04617275364668 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.96226306174896 * H2x2_1 + 1.03065434267907 * H2x2_2
+ -0.02977552697407 * H2x2_3 + -2.15633683205343 * H2x2_4 + -0.16172049876123 * H2x2_5 +
2.04617275364668 * H2x2_6 ;
1078423   +   H3x1_2  = H3x1_2  +     0.98825486325651 * H2x2_1
1078424   +          +    -0.45791784632486 * H2x2_2  +     -0.1004093258308 * H2x2_3
1078425   +          +     -0.9411693729369 * H2x2_4  +     -0.2302105458948 * H2x2_5
1078426   +          +    -0.37660795680674 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 0.98825486325651 * H2x2_1 + -0.45791784632486 * H2x2_2
+ -0.1004093258308 * H2x2_3 + -0.9411693729369 * H2x2_4 + -0.2302105458948 * H2x2_5 +
-0.37660795680674 * H2x2_6 ;
1078427   +   H3x1_3  = H3x1_3  +    -0.01929245635771 * H2x2_1
1078428   +          +     0.59176660505983 * H2x2_2  +     0.85345798669405 * H2x2_3
1078429   +          +    -0.29251716908915 * H2x2_4  +     0.62774918208489 * H2x2_5
1078430   +          +    -0.43453791992382 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.01929245635771 * H2x2_1 + 0.59176660505983 * H2x2_2
+ 0.85345798669405 * H2x2_3 + -0.29251716908915 * H2x2_4 + 0.62774918208489 * H2x2_5 +
-0.43453791992382 * H2x2_6 ;
1078431   +   H3x1_4  = H3x1_4  +    -0.93313067901041 * H2x2_1
1078432   +          +     0.79407052404273 * H2x2_2  +     1.63518575530242 * H2x2_3
1078433   +          +     1.19368615452563 * H2x2_4  +     0.43365061793519 * H2x2_5
1078434   +          +    -3.30381142208727 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + -0.93313067901041 * H2x2_1 + 0.79407052404273 * H2x2_2
+ 1.63518575530242 * H2x2_3 + 1.19368615452563 * H2x2_4 + 0.43365061793519 * H2x2_5 +
-3.30381142208727 * H2x2_6 ;
1078435   +   H3x1_5  = H3x1_5  +      0.2721747886066 * H2x2_1
1078436   +          +     0.29405186941774 * H2x2_2  +    -0.96425253045194 * H2x2_3
1078437   +          +    -0.34879018216113 * H2x2_4  +    -1.15330072605073 * H2x2_5
1078438   +          +    -0.34019675397366 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 0.2721747886066 * H2x2_1 + 0.29405186941774 * H2x2_2 +
-0.96425253045194 * H2x2_3 + -0.34879018216113 * H2x2_4 + -1.15330072605073 * H2x2_5 +
-0.34019675397366 * H2x2_6 ;
1078439   +   H3x1_1  = H3x1_1  +     0.99938924001809 * H2x3_1
1078440   +          +    -0.28559857879809 * H2x3_2  +    -0.44648183712004 * H2x3_3
1078441   +          +    -0.23199698060307 * H2x3_4  +    -0.64346521755351 * H2x3_5
1078442   +          +     0.59340663088806 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.99938924001809 * H2x3_1 + -0.28559857879809 * H2x3_2
+ -0.44648183712004 * H2x3_3 + -0.23199698060307 * H2x3_4 + -0.64346521755351 * H2x3_5 +
0.59340663088806 * H2x3_6 ;
1078443   +   H3x1_2  = H3x1_2  +     1.61767718200144 * H2x3_1
1078444   +          +     0.59417860044733 * H2x3_2  +      1.9323992067722 * H2x3_3
1078445   +          +    -1.38224816012152 * H2x3_4  +    -2.04529937075447 * H2x3_5
1078446   +          +     0.67050797164115 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 1.61767718200144 * H2x3_1 + 0.59417860044733 * H2x3_2
+ 1.9323992067722 * H2x3_3 + -1.38224816012152 * H2x3_4 + -2.04529937075447 * H2x3_5 +
0.67050797164115 * H2x3_6 ;
1078447   +   H3x1_3  = H3x1_3  +    -0.69807909205706 * H2x3_1
1078448   +          +    -0.57895843216341 * H2x3_2  +    -0.16766418785512 * H2x3_3
1078449   +          +     0.40654327615846 * H2x3_4  +    -1.86698682195337 * H2x3_5
1078450   +          +    -0.51274988768251 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.69807909205706 * H2x3_1 + -0.57895843216341 *
H2x3_2 + -0.16766418785512 * H2x3_3 + 0.40654327615846 * H2x3_4 + -1.86698682195337 * H2x3_5 +
-0.51274988768251 * H2x3_6 ;
1078451   +   H3x1_4  = H3x1_4  +     0.48560830435522 * H2x3_1
1078452   +          +     -2.8037598804912 * H2x3_2  +    -0.30231415756008 * H2x3_3
1078453   +          +     2.41159952574381 * H2x3_4  +     0.62877424154604 * H2x3_5
1078454   +          +    -0.73773727947747 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.48560830435522 * H2x3_1 + -2.8037598804912 * H2x3_2
+ -0.30231415756008 * H2x3_3 + 2.41159952574381 * H2x3_4 + 0.62877424154604 * H2x3_5 +
-0.73773727947747 * H2x3_6 ;
1078455   +   H3x1_5  = H3x1_5  +    -0.87089276878422 * H2x3_1
1078456   +          +    -0.78003140915024 * H2x3_2  +    -1.46975503560585 * H2x3_3
1078457   +          +     1.87460778751879 * H2x3_4  +    -0.09219359612439 * H2x3_5
1078458   +          +    -1.07137645697526 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + -0.87089276878422 * H2x3_1 + -0.78003140915024 *
H2x3_2 + -1.46975503560585 * H2x3_3 + 1.87460778751879 * H2x3_4 + -0.09219359612439 * H2x3_5 +
-1.07137645697526 * H2x3_6 ;
1078459   +   H3x1_1  =    -0.24118737469276 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.24118737469276 + H3x1_1 ;
1078460   +   H3x1_2  =     0.26844205496356 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.26844205496356 + H3x1_2 ;
1078461   +   H3x1_3  =      1.6092325807607 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 1.6092325807607 + H3x1_3 ;
1078462   +   H3x1_4  =     0.55904829903808 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.55904829903808 + H3x1_4 ;
1078463   +   H3x1_5  =     1.39880629138148 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = 1.39880629138148 + H3x1_5 ;
1078464   +   H3x1_6  = 0;
MPRINT(EM_DIAGRAM):   H3x1_6 = 0;
1078465   +   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
1078466   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078467   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1078468   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1078469   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1078470   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1078471   +   H3x1_3  = EXP(H3x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_3 = EXP(H3x1_3 - _MAX_);
1078472   +   _SUM_ = _SUM_ + H3x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_3 ;
1078473   +   H3x1_4  = EXP(H3x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_4 = EXP(H3x1_4 - _MAX_);
1078474   +   _SUM_ = _SUM_ + H3x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_4 ;
1078475   +   H3x1_5  = EXP(H3x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_5 = EXP(H3x1_5 - _MAX_);
1078476   +   _SUM_ = _SUM_ + H3x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_5 ;
1078477   +   H3x1_6  = EXP(H3x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_6 = EXP(H3x1_6 - _MAX_);
1078478   +   _SUM_ = _SUM_ + H3x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_6 ;
1078479   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1078480   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1078481   +   H3x1_3  = H3x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 / _SUM_;
1078482   +   H3x1_4  = H3x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 / _SUM_;
1078483   +   H3x1_5  = H3x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 / _SUM_;
1078484   +   H3x1_6  = H3x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 / _SUM_;
1078485   +END;
MPRINT(EM_DIAGRAM):   END;
1078486   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078487   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1078488   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1078489   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1078490   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1078491   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1078492   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1078493   +END;
MPRINT(EM_DIAGRAM):   END;
1078494   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078495   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1078496   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078497   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078498   +   H3x2_1  =     0.13469056275633 * H2x1_1  +    -1.31570873196603 * H2x1_2
1078499   +          +    -0.83004507775706 * H2x1_3  +     1.14954585467995 * H2x1_4
1078500   +          +     0.01234753333089 * H2x1_5  +     0.50683843245151 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 0.13469056275633 * H2x1_1 + -1.31570873196603 * H2x1_2 +
-0.83004507775706 * H2x1_3 + 1.14954585467995 * H2x1_4 + 0.01234753333089 * H2x1_5 +
0.50683843245151 * H2x1_6 ;
1078501   +   H3x2_2  =     2.58620633866114 * H2x1_1  +     0.37629863890202 * H2x1_2
1078502   +          +     0.34169762900278 * H2x1_3  +     1.24247313002596 * H2x1_4
1078503   +          +     -0.1965463932822 * H2x1_5  +    -0.00458488228083 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 2.58620633866114 * H2x1_1 + 0.37629863890202 * H2x1_2 +
0.34169762900278 * H2x1_3 + 1.24247313002596 * H2x1_4 + -0.1965463932822 * H2x1_5 +
-0.00458488228083 * H2x1_6 ;
1078504   +   H3x2_3  =    -2.01883694738218 * H2x1_1  +     0.83782353926562 * H2x1_2
1078505   +          +    -1.95119268200972 * H2x1_3  +    -1.04826190833003 * H2x1_4
1078506   +          +     1.66733023346498 * H2x1_5  +     0.23483419363088 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = -2.01883694738218 * H2x1_1 + 0.83782353926562 * H2x1_2 +
-1.95119268200972 * H2x1_3 + -1.04826190833003 * H2x1_4 + 1.66733023346498 * H2x1_5 +
0.23483419363088 * H2x1_6 ;
1078507   +   H3x2_4  =     0.40678642111393 * H2x1_1  +    -0.10557612663286 * H2x1_2
1078508   +          +    -0.34694532874387 * H2x1_3  +     -1.6967916788772 * H2x1_4
1078509   +          +     0.24026556349373 * H2x1_5  +    -0.69393637888423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = 0.40678642111393 * H2x1_1 + -0.10557612663286 * H2x1_2 +
-0.34694532874387 * H2x1_3 + -1.6967916788772 * H2x1_4 + 0.24026556349373 * H2x1_5 +
-0.69393637888423 * H2x1_6 ;
1078510   +   H3x2_5  =    -1.48304630985783 * H2x1_1  +     0.87426655970556 * H2x1_2
1078511   +          +    -0.49899516599841 * H2x1_3  +    -1.94880978312007 * H2x1_4
1078512   +          +    -2.45275015055877 * H2x1_5  +    -0.03264500335093 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -1.48304630985783 * H2x1_1 + 0.87426655970556 * H2x1_2 +
-0.49899516599841 * H2x1_3 + -1.94880978312007 * H2x1_4 + -2.45275015055877 * H2x1_5 +
-0.03264500335093 * H2x1_6 ;
1078513   +   H3x2_1  = H3x2_1  +    -0.40915299509566 * H2x2_1
1078514   +          +     1.45952180668254 * H2x2_2  +     0.42420517277224 * H2x2_3
1078515   +          +    -0.79379446044158 * H2x2_4  +     0.73614212418439 * H2x2_5
1078516   +          +     -0.6527392657117 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -0.40915299509566 * H2x2_1 + 1.45952180668254 * H2x2_2
+ 0.42420517277224 * H2x2_3 + -0.79379446044158 * H2x2_4 + 0.73614212418439 * H2x2_5 +
-0.6527392657117 * H2x2_6 ;
1078517   +   H3x2_2  = H3x2_2  +    -1.62752321860626 * H2x2_1
1078518   +          +    -0.04689831325067 * H2x2_2  +    -2.87951125721119 * H2x2_3
1078519   +          +    -0.36181303609331 * H2x2_4  +     0.55999175715209 * H2x2_5
1078520   +          +    -0.40911363767301 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + -1.62752321860626 * H2x2_1 + -0.04689831325067 *
H2x2_2 + -2.87951125721119 * H2x2_3 + -0.36181303609331 * H2x2_4 + 0.55999175715209 * H2x2_5 +
-0.40911363767301 * H2x2_6 ;
1078521   +   H3x2_3  = H3x2_3  +     0.50766404641726 * H2x2_1
1078522   +          +     0.02747397544049 * H2x2_2  +    -1.35626517144826 * H2x2_3
1078523   +          +     0.23390260329386 * H2x2_4  +     -0.5025118845527 * H2x2_5
1078524   +          +    -1.14035867434772 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + 0.50766404641726 * H2x2_1 + 0.02747397544049 * H2x2_2
+ -1.35626517144826 * H2x2_3 + 0.23390260329386 * H2x2_4 + -0.5025118845527 * H2x2_5 +
-1.14035867434772 * H2x2_6 ;
1078525   +   H3x2_4  = H3x2_4  +     0.64958154360038 * H2x2_1
1078526   +          +     1.68671947742627 * H2x2_2  +    -0.42417215632785 * H2x2_3
1078527   +          +    -0.39675884102374 * H2x2_4  +     1.98354732887496 * H2x2_5
1078528   +          +    -1.32783167695801 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + 0.64958154360038 * H2x2_1 + 1.68671947742627 * H2x2_2
+ -0.42417215632785 * H2x2_3 + -0.39675884102374 * H2x2_4 + 1.98354732887496 * H2x2_5 +
-1.32783167695801 * H2x2_6 ;
1078529   +   H3x2_5  = H3x2_5  +     1.92075053147101 * H2x2_1
1078530   +          +     1.22293096034837 * H2x2_2  +    -0.74039853818796 * H2x2_3
1078531   +          +    -0.25033258903105 * H2x2_4  +     0.63358340091733 * H2x2_5
1078532   +          +     0.17488501957475 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 1.92075053147101 * H2x2_1 + 1.22293096034837 * H2x2_2
+ -0.74039853818796 * H2x2_3 + -0.25033258903105 * H2x2_4 + 0.63358340091733 * H2x2_5 +
0.17488501957475 * H2x2_6 ;
1078533   +   H3x2_1  = H3x2_1  +     0.88292932547634 * H2x3_1
1078534   +          +    -0.27631908402136 * H2x3_2  +     0.93133699792762 * H2x3_3
1078535   +          +     1.18769264917434 * H2x3_4  +    -0.88901652244884 * H2x3_5
1078536   +          +    -0.17544617255869 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + 0.88292932547634 * H2x3_1 + -0.27631908402136 * H2x3_2
+ 0.93133699792762 * H2x3_3 + 1.18769264917434 * H2x3_4 + -0.88901652244884 * H2x3_5 +
-0.17544617255869 * H2x3_6 ;
1078537   +   H3x2_2  = H3x2_2  +     0.71538502917742 * H2x3_1
1078538   +          +    -0.76848695288598 * H2x3_2  +     1.24503864708272 * H2x3_3
1078539   +          +    -0.93962158881999 * H2x3_4  +    -0.43383001812557 * H2x3_5
1078540   +          +     1.14672043219259 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + 0.71538502917742 * H2x3_1 + -0.76848695288598 * H2x3_2
+ 1.24503864708272 * H2x3_3 + -0.93962158881999 * H2x3_4 + -0.43383001812557 * H2x3_5 +
1.14672043219259 * H2x3_6 ;
1078541   +   H3x2_3  = H3x2_3  +    -0.39933331346344 * H2x3_1
1078542   +          +      0.0019862182661 * H2x3_2  +    -0.60479718136768 * H2x3_3
1078543   +          +      1.3818804125218 * H2x3_4  +     0.13498986352108 * H2x3_5
1078544   +          +     1.02889511152823 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + -0.39933331346344 * H2x3_1 + 0.0019862182661 * H2x3_2
+ -0.60479718136768 * H2x3_3 + 1.3818804125218 * H2x3_4 + 0.13498986352108 * H2x3_5 +
1.02889511152823 * H2x3_6 ;
1078545   +   H3x2_4  = H3x2_4  +    -1.24198502624302 * H2x3_1
1078546   +          +    -0.09061963757116 * H2x3_2  +    -0.70229381972412 * H2x3_3
1078547   +          +    -1.43988785716026 * H2x3_4  +     0.45188902401215 * H2x3_5
1078548   +          +     0.10073869982371 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + -1.24198502624302 * H2x3_1 + -0.09061963757116 *
H2x3_2 + -0.70229381972412 * H2x3_3 + -1.43988785716026 * H2x3_4 + 0.45188902401215 * H2x3_5 +
0.10073869982371 * H2x3_6 ;
1078549   +   H3x2_5  = H3x2_5  +     0.13815223958312 * H2x3_1
1078550   +          +     0.38392032129472 * H2x3_2  +    -0.08374178846724 * H2x3_3
1078551   +          +     0.39613433726611 * H2x3_4  +     1.64049322745471 * H2x3_5
1078552   +          +     0.97496084656174 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 0.13815223958312 * H2x3_1 + 0.38392032129472 * H2x3_2
+ -0.08374178846724 * H2x3_3 + 0.39613433726611 * H2x3_4 + 1.64049322745471 * H2x3_5 +
0.97496084656174 * H2x3_6 ;
1078553   +   H3x2_1  =    -0.72845954974251 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.72845954974251 + H3x2_1 ;
1078554   +   H3x2_2  =     0.59148824718722 + H3x2_2 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 0.59148824718722 + H3x2_2 ;
1078555   +   H3x2_3  =     1.28031731320103 + H3x2_3 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = 1.28031731320103 + H3x2_3 ;
1078556   +   H3x2_4  =    -0.11427038364635 + H3x2_4 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = -0.11427038364635 + H3x2_4 ;
1078557   +   H3x2_5  =    -0.28699725292326 + H3x2_5 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -0.28699725292326 + H3x2_5 ;
1078558   +   H3x2_6  = 0;
MPRINT(EM_DIAGRAM):   H3x2_6 = 0;
1078559   +   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
1078560   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078561   +   H3x2_1  = EXP(H3x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_1 = EXP(H3x2_1 - _MAX_);
1078562   +   _SUM_ = _SUM_ + H3x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_1 ;
1078563   +   H3x2_2  = EXP(H3x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_2 = EXP(H3x2_2 - _MAX_);
1078564   +   _SUM_ = _SUM_ + H3x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_2 ;
1078565   +   H3x2_3  = EXP(H3x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_3 = EXP(H3x2_3 - _MAX_);
1078566   +   _SUM_ = _SUM_ + H3x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_3 ;
1078567   +   H3x2_4  = EXP(H3x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_4 = EXP(H3x2_4 - _MAX_);
1078568   +   _SUM_ = _SUM_ + H3x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_4 ;
1078569   +   H3x2_5  = EXP(H3x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_5 = EXP(H3x2_5 - _MAX_);
1078570   +   _SUM_ = _SUM_ + H3x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_5 ;
1078571   +   H3x2_6  = EXP(H3x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_6 = EXP(H3x2_6 - _MAX_);
1078572   +   _SUM_ = _SUM_ + H3x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_6 ;
1078573   +   H3x2_1  = H3x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 / _SUM_;
1078574   +   H3x2_2  = H3x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 / _SUM_;
1078575   +   H3x2_3  = H3x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 / _SUM_;
1078576   +   H3x2_4  = H3x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 / _SUM_;
1078577   +   H3x2_5  = H3x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 / _SUM_;
1078578   +   H3x2_6  = H3x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_6 = H3x2_6 / _SUM_;
1078579   +END;
MPRINT(EM_DIAGRAM):   END;
1078580   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078581   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1078582   +   H3x2_2  = .;
MPRINT(EM_DIAGRAM):   H3x2_2 = .;
1078583   +   H3x2_3  = .;
MPRINT(EM_DIAGRAM):   H3x2_3 = .;
1078584   +   H3x2_4  = .;
MPRINT(EM_DIAGRAM):   H3x2_4 = .;
1078585   +   H3x2_5  = .;
MPRINT(EM_DIAGRAM):   H3x2_5 = .;
1078586   +   H3x2_6  = .;
MPRINT(EM_DIAGRAM):   H3x2_6 = .;
1078587   +END;
MPRINT(EM_DIAGRAM):   END;
1078588   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078589   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1078590   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078591   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078592   +   H4x1_1  =     0.10986960182278 * H3x1_1  +    -0.10835805909937 * H3x1_2
1078593   +          +     1.78643376838566 * H3x1_3  +    -0.00067995179919 * H3x1_4
1078594   +          +     2.04711620528782 * H3x1_5  +    -0.66853997603718 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.10986960182278 * H3x1_1 + -0.10835805909937 * H3x1_2 +
1.78643376838566 * H3x1_3 + -0.00067995179919 * H3x1_4 + 2.04711620528782 * H3x1_5 +
-0.66853997603718 * H3x1_6 ;
1078595   +   H4x1_2  =    -0.17187141657369 * H3x1_1  +    -1.56897037747293 * H3x1_2
1078596   +          +    -1.38330818097338 * H3x1_3  +     3.94629669251083 * H3x1_4
1078597   +          +    -0.57201557221624 * H3x1_5  +     0.99276034828548 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = -0.17187141657369 * H3x1_1 + -1.56897037747293 * H3x1_2 +
-1.38330818097338 * H3x1_3 + 3.94629669251083 * H3x1_4 + -0.57201557221624 * H3x1_5 +
0.99276034828548 * H3x1_6 ;
1078598   +   H4x1_3  =      1.5223304212488 * H3x1_1  +    -0.33490912702371 * H3x1_2
1078599   +          +    -0.30324493540575 * H3x1_3  +    -1.23990036921669 * H3x1_4
1078600   +          +     0.77489370055267 * H3x1_5  +    -0.38609823936674 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.5223304212488 * H3x1_1 + -0.33490912702371 * H3x1_2 +
-0.30324493540575 * H3x1_3 + -1.23990036921669 * H3x1_4 + 0.77489370055267 * H3x1_5 +
-0.38609823936674 * H3x1_6 ;
1078601   +   H4x1_4  =    -0.75234452297837 * H3x1_1  +      1.1117782900703 * H3x1_2
1078602   +          +      1.0171911341496 * H3x1_3  +     2.31462824862723 * H3x1_4
1078603   +          +     1.05562639649812 * H3x1_5  +    -0.80603399686936 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -0.75234452297837 * H3x1_1 + 1.1117782900703 * H3x1_2 +
1.0171911341496 * H3x1_3 + 2.31462824862723 * H3x1_4 + 1.05562639649812 * H3x1_5 +
-0.80603399686936 * H3x1_6 ;
1078604   +   H4x1_5  =    -0.35441774309359 * H3x1_1  +     0.37408435161205 * H3x1_2
1078605   +          +    -0.79287886005891 * H3x1_3  +    -0.89695291885453 * H3x1_4
1078606   +          +     0.46220429367054 * H3x1_5  +    -1.56166867584216 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = -0.35441774309359 * H3x1_1 + 0.37408435161205 * H3x1_2 +
-0.79287886005891 * H3x1_3 + -0.89695291885453 * H3x1_4 + 0.46220429367054 * H3x1_5 +
-1.56166867584216 * H3x1_6 ;
1078607   +   H4x1_1  = H4x1_1  +    -1.12622282402713 * H3x2_1
1078608   +          +     2.43865739917959 * H3x2_2  +     1.62534005409988 * H3x2_3
1078609   +          +     0.83506165677151 * H3x2_4  +    -0.15894659563972 * H3x2_5
1078610   +          +     0.77216806897502 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -1.12622282402713 * H3x2_1 + 2.43865739917959 * H3x2_2
+ 1.62534005409988 * H3x2_3 + 0.83506165677151 * H3x2_4 + -0.15894659563972 * H3x2_5 +
0.77216806897502 * H3x2_6 ;
1078611   +   H4x1_2  = H4x1_2  +     0.96736353410956 * H3x2_1
1078612   +          +      1.6250281874285 * H3x2_2  +    -0.81418318229631 * H3x2_3
1078613   +          +     0.35282111325987 * H3x2_4  +     0.11187473980261 * H3x2_5
1078614   +          +     0.73971378600397 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 + 0.96736353410956 * H3x2_1 + 1.6250281874285 * H3x2_2 +
-0.81418318229631 * H3x2_3 + 0.35282111325987 * H3x2_4 + 0.11187473980261 * H3x2_5 +
0.73971378600397 * H3x2_6 ;
1078615   +   H4x1_3  = H4x1_3  +    -0.30588247178582 * H3x2_1
1078616   +          +     0.22302184288326 * H3x2_2  +    -0.15797620108073 * H3x2_3
1078617   +          +     1.18515955770896 * H3x2_4  +     0.43359240886537 * H3x2_5
1078618   +          +     0.90907054011344 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 + -0.30588247178582 * H3x2_1 + 0.22302184288326 * H3x2_2
+ -0.15797620108073 * H3x2_3 + 1.18515955770896 * H3x2_4 + 0.43359240886537 * H3x2_5 +
0.90907054011344 * H3x2_6 ;
1078619   +   H4x1_4  = H4x1_4  +    -0.26678025657796 * H3x2_1
1078620   +          +    -0.23171152283695 * H3x2_2  +    -0.72882061581264 * H3x2_3
1078621   +          +     0.68597418643333 * H3x2_4  +      0.6559090638639 * H3x2_5
1078622   +          +     0.95412028439169 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 + -0.26678025657796 * H3x2_1 + -0.23171152283695 *
H3x2_2 + -0.72882061581264 * H3x2_3 + 0.68597418643333 * H3x2_4 + 0.6559090638639 * H3x2_5 +
0.95412028439169 * H3x2_6 ;
1078623   +   H4x1_5  = H4x1_5  +    -0.77875602324955 * H3x2_1
1078624   +          +     -1.5646810153964 * H3x2_2  +    -0.53157591270506 * H3x2_3
1078625   +          +    -0.27917864191674 * H3x2_4  +    -1.10966192483404 * H3x2_5
1078626   +          +     -0.0058627670025 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 + -0.77875602324955 * H3x2_1 + -1.5646810153964 * H3x2_2
+ -0.53157591270506 * H3x2_3 + -0.27917864191674 * H3x2_4 + -1.10966192483404 * H3x2_5 +
-0.0058627670025 * H3x2_6 ;
1078627   +   H4x1_1  =     0.87937070574208 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.87937070574208 + H4x1_1 ;
1078628   +   H4x1_2  =     0.75203729660648 + H4x1_2 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = 0.75203729660648 + H4x1_2 ;
1078629   +   H4x1_3  =     1.14889100908291 + H4x1_3 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.14889100908291 + H4x1_3 ;
1078630   +   H4x1_4  =    -1.71383624276913 + H4x1_4 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -1.71383624276913 + H4x1_4 ;
1078631   +   H4x1_5  =     0.22194774900585 + H4x1_5 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = 0.22194774900585 + H4x1_5 ;
1078632   +   H4x1_6  = 0;
MPRINT(EM_DIAGRAM):   H4x1_6 = 0;
1078633   +   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
1078634   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078635   +   H4x1_1  = EXP(H4x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_1 = EXP(H4x1_1 - _MAX_);
1078636   +   _SUM_ = _SUM_ + H4x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_1 ;
1078637   +   H4x1_2  = EXP(H4x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_2 = EXP(H4x1_2 - _MAX_);
1078638   +   _SUM_ = _SUM_ + H4x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_2 ;
1078639   +   H4x1_3  = EXP(H4x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_3 = EXP(H4x1_3 - _MAX_);
1078640   +   _SUM_ = _SUM_ + H4x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_3 ;
1078641   +   H4x1_4  = EXP(H4x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_4 = EXP(H4x1_4 - _MAX_);
1078642   +   _SUM_ = _SUM_ + H4x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_4 ;
1078643   +   H4x1_5  = EXP(H4x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_5 = EXP(H4x1_5 - _MAX_);
1078644   +   _SUM_ = _SUM_ + H4x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_5 ;
1078645   +   H4x1_6  = EXP(H4x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_6 = EXP(H4x1_6 - _MAX_);
1078646   +   _SUM_ = _SUM_ + H4x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_6 ;
1078647   +   H4x1_1  = H4x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 / _SUM_;
1078648   +   H4x1_2  = H4x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 / _SUM_;
1078649   +   H4x1_3  = H4x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 / _SUM_;
1078650   +   H4x1_4  = H4x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 / _SUM_;
1078651   +   H4x1_5  = H4x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 / _SUM_;
1078652   +   H4x1_6  = H4x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_6 = H4x1_6 / _SUM_;
1078653   +END;
MPRINT(EM_DIAGRAM):   END;
1078654   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078655   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1078656   +   H4x1_2  = .;
MPRINT(EM_DIAGRAM):   H4x1_2 = .;
1078657   +   H4x1_3  = .;
MPRINT(EM_DIAGRAM):   H4x1_3 = .;
1078658   +   H4x1_4  = .;
MPRINT(EM_DIAGRAM):   H4x1_4 = .;
1078659   +   H4x1_5  = .;
MPRINT(EM_DIAGRAM):   H4x1_5 = .;
1078660   +   H4x1_6  = .;
MPRINT(EM_DIAGRAM):   H4x1_6 = .;
1078661   +END;
MPRINT(EM_DIAGRAM):   END;
1078662   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078663   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1078664   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078665   +
1078666   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1078667   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1078668   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1078669   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1078670   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1078671   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1078672   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1078673   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1078674   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1078675   +end;
MPRINT(EM_DIAGRAM):   end;
1078676   +else do;
MPRINT(EM_DIAGRAM):   else do;
1078677   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1078678   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1078679   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1078680   +   end;
MPRINT(EM_DIAGRAM):   end;
1078681   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1078682   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1078683   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1078684   +   end;
MPRINT(EM_DIAGRAM):   end;
1078685   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1078686   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1078687   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1078688   +   end;
MPRINT(EM_DIAGRAM):   end;
1078689   +end;
MPRINT(EM_DIAGRAM):   end;
1078690   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078691   +   P_DepVar1  =    -5.30721919155126 * H4x1_1  +     10.4301477552223 * H4x1_2
1078692   +          +    -3.40676330075486 * H4x1_3  +     0.07452634039202 * H4x1_4
1078693   +          +    -2.90585821687293 * H4x1_5  +    -2.63321710569292 * H4x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.30721919155126 * H4x1_1 + 10.4301477552223 * H4x1_2 +
-3.40676330075486 * H4x1_3 + 0.07452634039202 * H4x1_4 + -2.90585821687293 * H4x1_5 +
-2.63321710569292 * H4x1_6 ;
1078694   +   P_DepVar1  =    -2.93956196427421 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.93956196427421 + P_DepVar1 ;
1078695   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1078696   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1078697   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1078698   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1078699   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1078700   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1078701   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1078702   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1078703   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1078704   +END;
MPRINT(EM_DIAGRAM):   END;
1078705   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078706   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1078707   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1078708   +END;
MPRINT(EM_DIAGRAM):   END;
1078709   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1078710   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1078711   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1078712   +END;
MPRINT(EM_DIAGRAM):   END;
1078713   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1078714   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1078715   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1078716   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1078717   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1078718   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1078719   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1078720   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078721   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1078722   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078723   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1078724   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1078725   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1078726   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1078727   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1078728   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1078729   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1078730   +END;
MPRINT(EM_DIAGRAM):   END;
1078731   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1078732   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1078733   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1078734   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1078735   +* Renaming variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural28;
1078736   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078737   +* Renaming Posterior variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural28;
1078738   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078739   +drop AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar1;
1078740   +AutoNeural28_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar1 = P_DepVar1;
1078741   +drop AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_P_DepVar0;
1078742   +AutoNeural28_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural28_P_DepVar0 = P_DepVar0;
1078743   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078744   +* Renaming Into variables for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural28;
1078745   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078746   +length AutoNeural28_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural28_I_DepVar $32;
1078747   +drop AutoNeural28_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_I_DepVar;
1078748   +AutoNeural28_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural28_I_DepVar = I_DepVar;
1078749   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078750   +* Renaming _WARN_ variable for AutoNeural28;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural28;
1078751   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078752   +length AutoNeural28_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural28_WARN_ $4;
1078753   +drop AutoNeural28_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural28_WARN_;
1078754   +AutoNeural28_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural28_WARN_ = _WARN_;
1078755   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078756   +* Ensmbl53: Scoring Code of model 3 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 3 of 7;
1078757   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078758   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078759   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1078760   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1078761   +* NODE: AutoNeural27;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural27;
1078762   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078763   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1078764   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1078765   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1078766   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1078767   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1078768   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1078769   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1078770   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1078771   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1078772   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1078773   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1078774   +LENGTH _WARN_ $4
1078775   +      F_DepVar  $ 12
1078776   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1078777   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1078778   +
1078779   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1078780   +
1078781   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1078782   +
1078783   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1078784   +
1078785   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1078786   +
1078787   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1078788   +
1078789   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1078790   +
1078791   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1078792   +
1078793   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1078794   +
1078795   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1078796   +
1078797   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1078798   +
1078799   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1078800   +
1078801   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1078802   +
1078803   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1078804   +
1078805   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1078806   +
1078807   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1078808   +
1078809   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1078810   +
1078811   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1078812   +
1078813   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1078814   +
1078815   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1078816   +
1078817   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1078818   +
1078819   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1078820   +
1078821   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1078822   +
1078823   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1078824   +
1078825   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1078826   +
1078827   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1078828   +
1078829   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1078830   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1078831   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1078832   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1078833   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1078834   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1078835   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1078836   +end;
MPRINT(EM_DIAGRAM):   end;
1078837   +else do;
MPRINT(EM_DIAGRAM):   else do;
1078838   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1078839   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1078840   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1078841   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1078842   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1078843   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1078844   +   end;
MPRINT(EM_DIAGRAM):   end;
1078845   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1078846   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1078847   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1078848   +   end;
MPRINT(EM_DIAGRAM):   end;
1078849   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1078850   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1078851   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1078852   +   end;
MPRINT(EM_DIAGRAM):   end;
1078853   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1078854   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1078855   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1078856   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1078857   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1078858   +   end;
MPRINT(EM_DIAGRAM):   end;
1078859   +end;
MPRINT(EM_DIAGRAM):   end;
1078860   +
1078861   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078862   +*** Checking missing input Interval
1078863   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1078864   +
1078865   +IF NMISS(
1078866   +   AcceptedCmpTotal ,
1078867   +   Frq ,
1078868   +   Income ,
1078869   +   Mnt ,
1078870   +   MntGoldProds ,
1078871   +   MntMeatProducts ,
1078872   +   MntWines ,
1078873   +   NumDistPurchases ,
1078874   +   RFMstat ,
1078875   +   RMntFrq ,
1078876   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1078877   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1078878   +
1078879   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1078880   +END;
MPRINT(EM_DIAGRAM):   END;
1078881   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078882   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1078883   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078884   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078885   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1078886   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1078887   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1078888   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1078889   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1078890   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1078891   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1078892   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1078893   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1078894   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1078895   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1078896   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1078897   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1078898   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1078899   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1078900   +END;
MPRINT(EM_DIAGRAM):   END;
1078901   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078902   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1078903   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1078904   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1078905   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1078906   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1078907   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1078908   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1078909   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1078910   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1078911   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1078912   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1078913   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1078914   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1078915   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1078916   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1078917   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1078918   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1078919   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1078920   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1078921   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1078922   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1078923   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1078924   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1078925   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1078926   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1078927   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1078928   +END;
MPRINT(EM_DIAGRAM):   END;
1078929   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078930   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1078931   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078932   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078933   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1078934   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1078935   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1078936   +   H1x1_1  =    -0.18981728384316 * S_AcceptedCmpTotal
1078937   +          +     2.44575265018132 * S_Frq  +    -0.33258639871365 * S_Income
1078938   +          +    -1.51282513201415 * S_Mnt  +     0.06017420606179 *
1078939   +        S_MntGoldProds  +    -0.55274425550395 * S_MntMeatProducts
1078940   +          +     0.91858869924573 * S_MntWines  +    -1.95905223495165 *
1078941   +        S_NumDistPurchases  +     -0.2637023845598 * S_RFMstat
1078942   +          +     1.23283591446263 * S_RMntFrq  +    -0.07916044614039 *
1078943   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.18981728384316 * S_AcceptedCmpTotal + 2.44575265018132 *
S_Frq + -0.33258639871365 * S_Income + -1.51282513201415 * S_Mnt + 0.06017420606179 *
S_MntGoldProds + -0.55274425550395 * S_MntMeatProducts + 0.91858869924573 * S_MntWines +
-1.95905223495165 * S_NumDistPurchases + -0.2637023845598 * S_RFMstat + 1.23283591446263 *
S_RMntFrq + -0.07916044614039 * S_Recency ;
1078944   +   H1x1_2  =    -0.68309764555121 * S_AcceptedCmpTotal
1078945   +          +     0.14669436656758 * S_Frq  +     0.02315218376279 * S_Income
1078946   +          +    -4.21583355142014 * S_Mnt  +     0.19199314585125 *
1078947   +        S_MntGoldProds  +     2.55483645032568 * S_MntMeatProducts
1078948   +          +     0.82054382378306 * S_MntWines  +     0.29968014910707 *
1078949   +        S_NumDistPurchases  +     0.60687719454304 * S_RFMstat
1078950   +          +     0.83498030971653 * S_RMntFrq  +     0.50801279856495 *
1078951   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.68309764555121 * S_AcceptedCmpTotal + 0.14669436656758 *
S_Frq + 0.02315218376279 * S_Income + -4.21583355142014 * S_Mnt + 0.19199314585125 *
S_MntGoldProds + 2.55483645032568 * S_MntMeatProducts + 0.82054382378306 * S_MntWines +
0.29968014910707 * S_NumDistPurchases + 0.60687719454304 * S_RFMstat + 0.83498030971653 *
S_RMntFrq + 0.50801279856495 * S_Recency ;
1078952   +   H1x1_3  =     0.08829866742968 * S_AcceptedCmpTotal
1078953   +          +    -0.02323769496851 * S_Frq  +    -0.99617629114101 * S_Income
1078954   +          +    -4.64282306384023 * S_Mnt  +     0.04308696038528 *
1078955   +        S_MntGoldProds  +     2.31863620360623 * S_MntMeatProducts
1078956   +          +     0.16587338267425 * S_MntWines  +     1.02973533097984 *
1078957   +        S_NumDistPurchases  +     0.20343196580651 * S_RFMstat
1078958   +          +     0.94726928092138 * S_RMntFrq  +     0.03712585159749 *
1078959   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.08829866742968 * S_AcceptedCmpTotal + -0.02323769496851 *
S_Frq + -0.99617629114101 * S_Income + -4.64282306384023 * S_Mnt + 0.04308696038528 *
S_MntGoldProds + 2.31863620360623 * S_MntMeatProducts + 0.16587338267425 * S_MntWines +
1.02973533097984 * S_NumDistPurchases + 0.20343196580651 * S_RFMstat + 0.94726928092138 *
S_RMntFrq + 0.03712585159749 * S_Recency ;
1078960   +   H1x1_4  =     0.10061099283455 * S_AcceptedCmpTotal
1078961   +          +     1.72752905329456 * S_Frq  +    -0.50472344084228 * S_Income
1078962   +          +     1.07329017540495 * S_Mnt  +    -0.44517902573644 *
1078963   +        S_MntGoldProds  +    -1.57417593135497 * S_MntMeatProducts
1078964   +          +    -0.75359748699668 * S_MntWines  +    -1.09387259425684 *
1078965   +        S_NumDistPurchases  +    -0.81518874000435 * S_RFMstat
1078966   +          +     0.23368643717628 * S_RMntFrq  +    -0.30240544347672 *
1078967   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.10061099283455 * S_AcceptedCmpTotal + 1.72752905329456 *
S_Frq + -0.50472344084228 * S_Income + 1.07329017540495 * S_Mnt + -0.44517902573644 *
S_MntGoldProds + -1.57417593135497 * S_MntMeatProducts + -0.75359748699668 * S_MntWines +
-1.09387259425684 * S_NumDistPurchases + -0.81518874000435 * S_RFMstat + 0.23368643717628 *
S_RMntFrq + -0.30240544347672 * S_Recency ;
1078968   +   H1x1_5  =    -0.22817314877708 * S_AcceptedCmpTotal
1078969   +          +     0.28118539965414 * S_Frq  +     0.04846488460495 * S_Income
1078970   +          +     0.60106863054811 * S_Mnt  +    -0.06162179557217 *
1078971   +        S_MntGoldProds  +    -0.39180490439507 * S_MntMeatProducts
1078972   +          +    -0.21017068084579 * S_MntWines  +    -0.32161828113396 *
1078973   +        S_NumDistPurchases  +    -0.03465088483344 * S_RFMstat
1078974   +          +    -0.03147262277696 * S_RMntFrq  +     0.34128240879899 *
1078975   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.22817314877708 * S_AcceptedCmpTotal + 0.28118539965414 *
S_Frq + 0.04846488460495 * S_Income + 0.60106863054811 * S_Mnt + -0.06162179557217 *
S_MntGoldProds + -0.39180490439507 * S_MntMeatProducts + -0.21017068084579 * S_MntWines +
-0.32161828113396 * S_NumDistPurchases + -0.03465088483344 * S_RFMstat + -0.03147262277696 *
S_RMntFrq + 0.34128240879899 * S_Recency ;
1078976   +   H1x1_1  = H1x1_1  +     0.15249883445815 * G_Marital_Status0
1078977   +          +    -0.18818735950093 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.15249883445815 * G_Marital_Status0 +
-0.18818735950093 * G_Marital_Status1 ;
1078978   +   H1x1_2  = H1x1_2  +     1.59824663671134 * G_Marital_Status0
1078979   +          +     1.96669325047054 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 1.59824663671134 * G_Marital_Status0 +
1.96669325047054 * G_Marital_Status1 ;
1078980   +   H1x1_3  = H1x1_3  +    -0.31220761109652 * G_Marital_Status0
1078981   +          +     0.52212878383819 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.31220761109652 * G_Marital_Status0 +
0.52212878383819 * G_Marital_Status1 ;
1078982   +   H1x1_4  = H1x1_4  +    -1.92906338619158 * G_Marital_Status0
1078983   +          +    -1.25145208260948 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -1.92906338619158 * G_Marital_Status0 +
-1.25145208260948 * G_Marital_Status1 ;
1078984   +   H1x1_5  = H1x1_5  +    -0.18067263072436 * G_Marital_Status0
1078985   +          +    -0.07780771416761 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.18067263072436 * G_Marital_Status0 +
-0.07780771416761 * G_Marital_Status1 ;
1078986   +   H1x1_1  =     1.46324697396327 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.46324697396327 + H1x1_1 ;
1078987   +   H1x1_2  =     1.36794472927517 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.36794472927517 + H1x1_2 ;
1078988   +   H1x1_3  =    -0.57612320445046 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.57612320445046 + H1x1_3 ;
1078989   +   H1x1_4  =    -1.53805674056235 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.53805674056235 + H1x1_4 ;
1078990   +   H1x1_5  =     0.35787040000513 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.35787040000513 + H1x1_5 ;
1078991   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1078992   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1078993   +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
1078994   +   H1x1_4  = SIN(H1x1_4 );
MPRINT(EM_DIAGRAM):   H1x1_4 = SIN(H1x1_4 );
1078995   +   H1x1_5  = SIN(H1x1_5 );
MPRINT(EM_DIAGRAM):   H1x1_5 = SIN(H1x1_5 );
1078996   +END;
MPRINT(EM_DIAGRAM):   END;
1078997   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1078998   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1078999   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1079000   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1079001   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1079002   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1079003   +END;
MPRINT(EM_DIAGRAM):   END;
1079004   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079005   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1079006   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079007   +
1079008   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1079009   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1079010   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079011   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1079012   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1079013   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079014   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1079015   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079016   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079017   +end;
MPRINT(EM_DIAGRAM):   end;
1079018   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079019   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1079020   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1079021   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1079022   +   end;
MPRINT(EM_DIAGRAM):   end;
1079023   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1079024   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1079025   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1079026   +   end;
MPRINT(EM_DIAGRAM):   end;
1079027   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079028   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079029   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079030   +   end;
MPRINT(EM_DIAGRAM):   end;
1079031   +end;
MPRINT(EM_DIAGRAM):   end;
1079032   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079033   +   P_DepVar1  =    -2.75625949468408 * H1x1_1  +    -2.04123594690263 * H1x1_2
1079034   +          +     2.55595542456674 * H1x1_3  +     2.41628841604103 * H1x1_4
1079035   +          +      -11.39673341305 * H1x1_5 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.75625949468408 * H1x1_1 + -2.04123594690263 * H1x1_2 +
2.55595542456674 * H1x1_3 + 2.41628841604103 * H1x1_4 + -11.39673341305 * H1x1_5 ;
1079036   +   P_DepVar1  =     0.62420945009508 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.62420945009508 + P_DepVar1 ;
1079037   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1079038   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1079039   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1079040   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1079041   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1079042   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1079043   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1079044   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1079045   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1079046   +END;
MPRINT(EM_DIAGRAM):   END;
1079047   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079048   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1079049   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1079050   +END;
MPRINT(EM_DIAGRAM):   END;
1079051   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1079052   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1079053   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1079054   +END;
MPRINT(EM_DIAGRAM):   END;
1079055   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1079056   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1079057   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1079058   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1079059   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1079060   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1079061   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1079062   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079063   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1079064   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079065   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1079066   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1079067   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1079068   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1079069   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1079070   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1079071   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1079072   +END;
MPRINT(EM_DIAGRAM):   END;
1079073   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079074   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1079075   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079076   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1079077   +* Renaming variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural27;
1079078   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079079   +* Renaming Posterior variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural27;
1079080   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079081   +drop AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_P_DepVar1;
1079082   +AutoNeural27_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural27_P_DepVar1 = P_DepVar1;
1079083   +drop AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_P_DepVar0;
1079084   +AutoNeural27_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural27_P_DepVar0 = P_DepVar0;
1079085   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079086   +* Renaming Into variables for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural27;
1079087   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079088   +length AutoNeural27_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural27_I_DepVar $32;
1079089   +drop AutoNeural27_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_I_DepVar;
1079090   +AutoNeural27_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural27_I_DepVar = I_DepVar;
1079091   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079092   +* Renaming _WARN_ variable for AutoNeural27;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural27;
1079093   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079094   +length AutoNeural27_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural27_WARN_ $4;
1079095   +drop AutoNeural27_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural27_WARN_;
1079096   +AutoNeural27_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural27_WARN_ = _WARN_;
1079097   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079098   +* Ensmbl53: Scoring Code of model 4 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 4 of 7;
1079099   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079100   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079101   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1079102   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1079103   +* NODE: AutoNeural33;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural33;
1079104   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079105   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079106   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1079107   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079108   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1079109   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1079110   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1079111   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1079112   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1079113   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1079114   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1079115   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1079116   +LENGTH _WARN_ $4
1079117   +      F_DepVar  $ 12
1079118   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1079119   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1079120   +
1079121   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1079122   +
1079123   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1079124   +
1079125   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1079126   +
1079127   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1079128   +
1079129   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1079130   +
1079131   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1079132   +
1079133   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1079134   +
1079135   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1079136   +
1079137   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1079138   +
1079139   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1079140   +
1079141   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1079142   +
1079143   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1079144   +
1079145   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1079146   +
1079147   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1079148   +
1079149   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1079150   +
1079151   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1079152   +
1079153   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1079154   +
1079155   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079156   +
1079157   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1079158   +
1079159   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1079160   +
1079161   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1079162   +
1079163   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1079164   +
1079165   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1079166   +
1079167   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1079168   +
1079169   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1079170   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1079171   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1079172   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079173   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079174   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1079175   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079176   +end;
MPRINT(EM_DIAGRAM):   end;
1079177   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079178   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1079179   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1079180   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079181   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1079182   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1079183   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1079184   +   end;
MPRINT(EM_DIAGRAM):   end;
1079185   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1079186   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1079187   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1079188   +   end;
MPRINT(EM_DIAGRAM):   end;
1079189   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1079190   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1079191   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1079192   +   end;
MPRINT(EM_DIAGRAM):   end;
1079193   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079194   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079195   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079196   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1079197   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079198   +   end;
MPRINT(EM_DIAGRAM):   end;
1079199   +end;
MPRINT(EM_DIAGRAM):   end;
1079200   +
1079201   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079202   +*** Checking missing input Interval
1079203   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1079204   +
1079205   +IF NMISS(
1079206   +   AcceptedCmpTotal ,
1079207   +   Frq ,
1079208   +   Income ,
1079209   +   Mnt ,
1079210   +   MntGoldProds ,
1079211   +   MntMeatProducts ,
1079212   +   MntWines ,
1079213   +   NumDistPurchases ,
1079214   +   RFMstat ,
1079215   +   RMntFrq ,
1079216   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1079217   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1079218   +
1079219   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079220   +END;
MPRINT(EM_DIAGRAM):   END;
1079221   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079222   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1079223   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079224   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079225   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079226   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079227   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079228   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079229   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079230   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079231   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1079232   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079233   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079234   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079235   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079236   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079237   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079238   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079239   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079240   +END;
MPRINT(EM_DIAGRAM):   END;
1079241   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079242   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1079243   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079244   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079245   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1079246   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079247   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1079248   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079249   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1079250   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079251   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1079252   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079253   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1079254   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1079255   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079256   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079257   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1079258   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079259   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1079260   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079261   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079262   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1079263   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079264   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1079265   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079266   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1079267   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079268   +END;
MPRINT(EM_DIAGRAM):   END;
1079269   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079270   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1079271   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079272   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079273   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1079274   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079275   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079276   +   H1x1_1  =     0.33555011401553 * S_AcceptedCmpTotal
1079277   +          +    -3.02490159760157 * S_Frq  +    -0.12761482391665 * S_Income
1079278   +          +     -9.1169668394273 * S_Mnt  +     0.88214411094174 *
1079279   +        S_MntGoldProds  +     16.4212241447522 * S_MntMeatProducts
1079280   +          +     4.65784744010387 * S_MntWines  +     2.75620847659032 *
1079281   +        S_NumDistPurchases  +     5.10796074430888 * S_RFMstat
1079282   +          +    -0.15069444442326 * S_RMntFrq  +    -0.36037041233055 *
1079283   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33555011401553 * S_AcceptedCmpTotal + -3.02490159760157 *
S_Frq + -0.12761482391665 * S_Income + -9.1169668394273 * S_Mnt + 0.88214411094174 *
S_MntGoldProds + 16.4212241447522 * S_MntMeatProducts + 4.65784744010387 * S_MntWines +
2.75620847659032 * S_NumDistPurchases + 5.10796074430888 * S_RFMstat + -0.15069444442326 *
S_RMntFrq + -0.36037041233055 * S_Recency ;
1079284   +   H1x1_2  =     -6.2107002884316 * S_AcceptedCmpTotal
1079285   +          +      5.5991079844098 * S_Frq  +    -1.06506164052399 * S_Income
1079286   +          +     7.16823320768258 * S_Mnt  +     1.97115223638004 *
1079287   +        S_MntGoldProds  +     0.02973121977962 * S_MntMeatProducts
1079288   +          +     3.28931008157038 * S_MntWines  +    -3.02545356699096 *
1079289   +        S_NumDistPurchases  +    -0.45519831720714 * S_RFMstat
1079290   +          +     2.14788986039061 * S_RMntFrq  +     7.13033786501062 *
1079291   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -6.2107002884316 * S_AcceptedCmpTotal + 5.5991079844098 * S_Frq
+ -1.06506164052399 * S_Income + 7.16823320768258 * S_Mnt + 1.97115223638004 * S_MntGoldProds
+ 0.02973121977962 * S_MntMeatProducts + 3.28931008157038 * S_MntWines + -3.02545356699096 *
S_NumDistPurchases + -0.45519831720714 * S_RFMstat + 2.14788986039061 * S_RMntFrq +
7.13033786501062 * S_Recency ;
1079292   +   H1x1_3  =    -0.31707769589072 * S_AcceptedCmpTotal
1079293   +          +     -0.8436342869652 * S_Frq  +     0.04938014828703 * S_Income
1079294   +          +     0.41074885451072 * S_Mnt  +    -0.22835264468248 *
1079295   +        S_MntGoldProds  +     0.04154328332772 * S_MntMeatProducts
1079296   +          +    -0.63526276335269 * S_MntWines  +     0.16430041832418 *
1079297   +        S_NumDistPurchases  +    -0.01070081959406 * S_RFMstat
1079298   +          +    -1.56851833223581 * S_RMntFrq  +     0.62478865123427 *
1079299   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.31707769589072 * S_AcceptedCmpTotal + -0.8436342869652 *
S_Frq + 0.04938014828703 * S_Income + 0.41074885451072 * S_Mnt + -0.22835264468248 *
S_MntGoldProds + 0.04154328332772 * S_MntMeatProducts + -0.63526276335269 * S_MntWines +
0.16430041832418 * S_NumDistPurchases + -0.01070081959406 * S_RFMstat + -1.56851833223581 *
S_RMntFrq + 0.62478865123427 * S_Recency ;
1079300   +   H1x1_4  =     0.54144616315359 * S_AcceptedCmpTotal
1079301   +          +    -2.69605116285758 * S_Frq  +    -0.42453662943397 * S_Income
1079302   +          +    -0.95657675439363 * S_Mnt  +     0.24420189860131 *
1079303   +        S_MntGoldProds  +     2.44632795316553 * S_MntMeatProducts
1079304   +          +     -0.1454644222769 * S_MntWines  +     2.34899307919173 *
1079305   +        S_NumDistPurchases  +    -0.02462201574723 * S_RFMstat
1079306   +          +    -2.08470857931815 * S_RMntFrq  +    -0.76249328143214 *
1079307   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.54144616315359 * S_AcceptedCmpTotal + -2.69605116285758 *
S_Frq + -0.42453662943397 * S_Income + -0.95657675439363 * S_Mnt + 0.24420189860131 *
S_MntGoldProds + 2.44632795316553 * S_MntMeatProducts + -0.1454644222769 * S_MntWines +
2.34899307919173 * S_NumDistPurchases + -0.02462201574723 * S_RFMstat + -2.08470857931815 *
S_RMntFrq + -0.76249328143214 * S_Recency ;
1079308   +   H1x1_1  = H1x1_1  +     0.00660823494191 * G_Marital_Status0
1079309   +          +    -0.18825548425502 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.00660823494191 * G_Marital_Status0 +
-0.18825548425502 * G_Marital_Status1 ;
1079310   +   H1x1_2  = H1x1_2  +    -2.06051657300217 * G_Marital_Status0
1079311   +          +    -6.25782340834073 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -2.06051657300217 * G_Marital_Status0 +
-6.25782340834073 * G_Marital_Status1 ;
1079312   +   H1x1_3  = H1x1_3  +    -0.79419358160841 * G_Marital_Status0
1079313   +          +     0.34890327415646 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.79419358160841 * G_Marital_Status0 +
0.34890327415646 * G_Marital_Status1 ;
1079314   +   H1x1_4  = H1x1_4  +    -0.04651762606699 * G_Marital_Status0
1079315   +          +     0.31552155976549 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.04651762606699 * G_Marital_Status0 +
0.31552155976549 * G_Marital_Status1 ;
1079316   +   H1x1_1  =      9.5912267385355 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 9.5912267385355 + H1x1_1 ;
1079317   +   H1x1_2  =     -17.513407093022 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -17.513407093022 + H1x1_2 ;
1079318   +   H1x1_3  =     3.77110114695743 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 3.77110114695743 + H1x1_3 ;
1079319   +   H1x1_4  =    -1.34405555452152 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.34405555452152 + H1x1_4 ;
1079320   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1079321   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1079322   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1079323   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1079324   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1079325   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1079326   +END;
MPRINT(EM_DIAGRAM):   END;
1079327   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079328   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1079329   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1079330   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1079331   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1079332   +END;
MPRINT(EM_DIAGRAM):   END;
1079333   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079334   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1079335   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079336   +
1079337   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1079338   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1079339   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079340   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1079341   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1079342   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079343   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1079344   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079345   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079346   +end;
MPRINT(EM_DIAGRAM):   end;
1079347   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079348   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1079349   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1079350   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1079351   +   end;
MPRINT(EM_DIAGRAM):   end;
1079352   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1079353   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1079354   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1079355   +   end;
MPRINT(EM_DIAGRAM):   end;
1079356   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079357   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079358   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079359   +   end;
MPRINT(EM_DIAGRAM):   end;
1079360   +end;
MPRINT(EM_DIAGRAM):   end;
1079361   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079362   +   P_DepVar1  =     17.1648278730429 * H1x1_1  +    -5.41550544466459 * H1x1_2
1079363   +          +     -11.071053129929 * H1x1_3  +      10.744209891392 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 17.1648278730429 * H1x1_1 + -5.41550544466459 * H1x1_2 +
-11.071053129929 * H1x1_3 + 10.744209891392 * H1x1_4 ;
1079364   +   P_DepVar1  =    -12.0079203309727 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -12.0079203309727 + P_DepVar1 ;
1079365   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1079366   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1079367   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1079368   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1079369   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1079370   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1079371   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1079372   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1079373   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1079374   +END;
MPRINT(EM_DIAGRAM):   END;
1079375   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079376   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1079377   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1079378   +END;
MPRINT(EM_DIAGRAM):   END;
1079379   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1079380   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1079381   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1079382   +END;
MPRINT(EM_DIAGRAM):   END;
1079383   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1079384   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1079385   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1079386   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1079387   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1079388   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1079389   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1079390   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079391   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1079392   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079393   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1079394   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1079395   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1079396   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1079397   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1079398   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1079399   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1079400   +END;
MPRINT(EM_DIAGRAM):   END;
1079401   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079402   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1079403   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079404   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1079405   +* Renaming variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural33;
1079406   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079407   +* Renaming Posterior variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural33;
1079408   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079409   +drop AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar1;
1079410   +AutoNeural33_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar1 = P_DepVar1;
1079411   +drop AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_P_DepVar0;
1079412   +AutoNeural33_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural33_P_DepVar0 = P_DepVar0;
1079413   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079414   +* Renaming Into variables for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural33;
1079415   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079416   +length AutoNeural33_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural33_I_DepVar $32;
1079417   +drop AutoNeural33_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_I_DepVar;
1079418   +AutoNeural33_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural33_I_DepVar = I_DepVar;
1079419   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079420   +* Renaming _WARN_ variable for AutoNeural33;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural33;
1079421   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079422   +length AutoNeural33_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural33_WARN_ $4;
1079423   +drop AutoNeural33_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural33_WARN_;
1079424   +AutoNeural33_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural33_WARN_ = _WARN_;
1079425   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079426   +* Ensmbl53: Scoring Code of model 5 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 5 of 7;
1079427   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079428   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079429   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1079430   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1079431   +* NODE: AutoNeural32;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural32;
1079432   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079433   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079434   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1079435   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079436   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1079437   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1079438   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1079439   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1079440   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1079441   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1079442   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1079443   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1079444   +LENGTH _WARN_ $4
1079445   +      F_DepVar  $ 12
1079446   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1079447   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1079448   +
1079449   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1079450   +
1079451   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1079452   +
1079453   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1079454   +
1079455   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1079456   +
1079457   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1079458   +
1079459   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1079460   +
1079461   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1079462   +
1079463   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1079464   +
1079465   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1079466   +
1079467   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1079468   +
1079469   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1079470   +
1079471   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1079472   +
1079473   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1079474   +
1079475   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1079476   +
1079477   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1079478   +
1079479   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1079480   +
1079481   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079482   +
1079483   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1079484   +
1079485   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1079486   +
1079487   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1079488   +
1079489   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1079490   +
1079491   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1079492   +
1079493   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1079494   +
1079495   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1079496   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1079497   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1079498   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079499   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079500   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1079501   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079502   +end;
MPRINT(EM_DIAGRAM):   end;
1079503   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079504   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1079505   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1079506   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079507   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1079508   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1079509   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1079510   +   end;
MPRINT(EM_DIAGRAM):   end;
1079511   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1079512   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1079513   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1079514   +   end;
MPRINT(EM_DIAGRAM):   end;
1079515   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1079516   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1079517   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1079518   +   end;
MPRINT(EM_DIAGRAM):   end;
1079519   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079520   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079521   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079522   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1079523   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079524   +   end;
MPRINT(EM_DIAGRAM):   end;
1079525   +end;
MPRINT(EM_DIAGRAM):   end;
1079526   +
1079527   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079528   +*** Checking missing input Interval
1079529   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1079530   +
1079531   +IF NMISS(
1079532   +   AcceptedCmpTotal ,
1079533   +   Frq ,
1079534   +   Income ,
1079535   +   Mnt ,
1079536   +   MntGoldProds ,
1079537   +   MntMeatProducts ,
1079538   +   MntWines ,
1079539   +   NumDistPurchases ,
1079540   +   RFMstat ,
1079541   +   RMntFrq ,
1079542   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1079543   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1079544   +
1079545   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079546   +END;
MPRINT(EM_DIAGRAM):   END;
1079547   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079548   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1079549   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079550   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079551   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079552   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079553   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079554   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079555   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079556   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079557   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1079558   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079559   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079560   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079561   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079562   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079563   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079564   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079565   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079566   +END;
MPRINT(EM_DIAGRAM):   END;
1079567   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079568   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1079569   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079570   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079571   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1079572   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079573   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1079574   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079575   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1079576   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079577   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1079578   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079579   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1079580   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1079581   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079582   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079583   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1079584   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079585   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1079586   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079587   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079588   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1079589   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079590   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1079591   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079592   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1079593   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079594   +END;
MPRINT(EM_DIAGRAM):   END;
1079595   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079596   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1079597   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079598   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079599   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1079600   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079601   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079602   +   H1x1_1  =    -0.38956319781905 * S_AcceptedCmpTotal
1079603   +          +    -0.08624585416733 * S_Frq  +     0.14990044515556 * S_Income
1079604   +          +     1.26905422062144 * S_Mnt  +    -0.05830961868093 *
1079605   +        S_MntGoldProds  +    -0.45655804707903 * S_MntMeatProducts
1079606   +          +    -0.29008121030195 * S_MntWines  +    -0.52580257849932 *
1079607   +        S_NumDistPurchases  +     -0.1481404693781 * S_RFMstat
1079608   +          +    -0.49319351834455 * S_RMntFrq  +     0.54249594661515 *
1079609   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.38956319781905 * S_AcceptedCmpTotal + -0.08624585416733 *
S_Frq + 0.14990044515556 * S_Income + 1.26905422062144 * S_Mnt + -0.05830961868093 *
S_MntGoldProds + -0.45655804707903 * S_MntMeatProducts + -0.29008121030195 * S_MntWines +
-0.52580257849932 * S_NumDistPurchases + -0.1481404693781 * S_RFMstat + -0.49319351834455 *
S_RMntFrq + 0.54249594661515 * S_Recency ;
1079610   +   H1x1_2  =     0.38779821527892 * S_AcceptedCmpTotal
1079611   +          +    -1.22315175769362 * S_Frq  +      1.1802985172513 * S_Income
1079612   +          +     2.08508390361851 * S_Mnt  +     0.42839460332296 *
1079613   +        S_MntGoldProds  +      0.9001009517595 * S_MntMeatProducts
1079614   +          +     0.43882453107711 * S_MntWines  +    -0.77730415774439 *
1079615   +        S_NumDistPurchases  +    -0.48791819347803 * S_RFMstat
1079616   +          +    -0.74366268198551 * S_RMntFrq  +    -0.17482075484114 *
1079617   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.38779821527892 * S_AcceptedCmpTotal + -1.22315175769362 *
S_Frq + 1.1802985172513 * S_Income + 2.08508390361851 * S_Mnt + 0.42839460332296 *
S_MntGoldProds + 0.9001009517595 * S_MntMeatProducts + 0.43882453107711 * S_MntWines +
-0.77730415774439 * S_NumDistPurchases + -0.48791819347803 * S_RFMstat + -0.74366268198551 *
S_RMntFrq + -0.17482075484114 * S_Recency ;
1079618   +   H1x1_3  =    -0.22134549179782 * S_AcceptedCmpTotal
1079619   +          +    -0.06178114920397 * S_Frq  +     -1.4524474173679 * S_Income
1079620   +          +    -7.85805111281271 * S_Mnt  +    -0.25260256377303 *
1079621   +        S_MntGoldProds  +     2.24650170262612 * S_MntMeatProducts
1079622   +          +    -0.28495082016886 * S_MntWines  +     2.83659961242127 *
1079623   +        S_NumDistPurchases  +     0.42067169774523 * S_RFMstat
1079624   +          +     1.71392925516862 * S_RMntFrq  +    -0.09478915012781 *
1079625   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.22134549179782 * S_AcceptedCmpTotal + -0.06178114920397 *
S_Frq + -1.4524474173679 * S_Income + -7.85805111281271 * S_Mnt + -0.25260256377303 *
S_MntGoldProds + 2.24650170262612 * S_MntMeatProducts + -0.28495082016886 * S_MntWines +
2.83659961242127 * S_NumDistPurchases + 0.42067169774523 * S_RFMstat + 1.71392925516862 *
S_RMntFrq + -0.09478915012781 * S_Recency ;
1079626   +   H1x1_1  = H1x1_1  +    -0.22060541309937 * G_Marital_Status0
1079627   +          +    -0.46692703876881 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.22060541309937 * G_Marital_Status0 +
-0.46692703876881 * G_Marital_Status1 ;
1079628   +   H1x1_2  = H1x1_2  +     0.47416822018188 * G_Marital_Status0
1079629   +          +     -2.1058284684647 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47416822018188 * G_Marital_Status0 +
-2.1058284684647 * G_Marital_Status1 ;
1079630   +   H1x1_3  = H1x1_3  +    -0.44803855270897 * G_Marital_Status0
1079631   +          +     1.41026185304551 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.44803855270897 * G_Marital_Status0 +
1.41026185304551 * G_Marital_Status1 ;
1079632   +   H1x1_1  =     1.63085271667721 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.63085271667721 + H1x1_1 ;
1079633   +   H1x1_2  =     0.28277859846654 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.28277859846654 + H1x1_2 ;
1079634   +   H1x1_3  =     -1.8890871578635 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -1.8890871578635 + H1x1_3 ;
1079635   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1079636   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1079637   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1079638   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1079639   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1079640   +END;
MPRINT(EM_DIAGRAM):   END;
1079641   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079642   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1079643   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1079644   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1079645   +END;
MPRINT(EM_DIAGRAM):   END;
1079646   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079647   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1079648   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079649   +
1079650   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1079651   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1079652   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079653   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1079654   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1079655   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079656   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1079657   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079658   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079659   +end;
MPRINT(EM_DIAGRAM):   end;
1079660   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079661   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1079662   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1079663   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1079664   +   end;
MPRINT(EM_DIAGRAM):   end;
1079665   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1079666   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1079667   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1079668   +   end;
MPRINT(EM_DIAGRAM):   end;
1079669   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079670   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1079671   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1079672   +   end;
MPRINT(EM_DIAGRAM):   end;
1079673   +end;
MPRINT(EM_DIAGRAM):   end;
1079674   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079675   +   P_DepVar1  =    -23.6822744769009 * H1x1_1  +     16.0380566008578 * H1x1_2
1079676   +          +     15.3446320724554 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -23.6822744769009 * H1x1_1 + 16.0380566008578 * H1x1_2 +
15.3446320724554 * H1x1_3 ;
1079677   +   P_DepVar1  =     0.67225691696469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.67225691696469 + P_DepVar1 ;
1079678   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1079679   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1079680   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1079681   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1079682   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1079683   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1079684   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1079685   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1079686   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1079687   +END;
MPRINT(EM_DIAGRAM):   END;
1079688   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079689   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1079690   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1079691   +END;
MPRINT(EM_DIAGRAM):   END;
1079692   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1079693   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1079694   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1079695   +END;
MPRINT(EM_DIAGRAM):   END;
1079696   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1079697   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1079698   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1079699   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1079700   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1079701   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1079702   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1079703   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079704   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1079705   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079706   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1079707   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1079708   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1079709   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1079710   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1079711   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1079712   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1079713   +END;
MPRINT(EM_DIAGRAM):   END;
1079714   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079715   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1079716   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1079717   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1079718   +* Renaming variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural32;
1079719   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079720   +* Renaming Posterior variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural32;
1079721   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079722   +drop AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_P_DepVar1;
1079723   +AutoNeural32_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural32_P_DepVar1 = P_DepVar1;
1079724   +drop AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_P_DepVar0;
1079725   +AutoNeural32_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural32_P_DepVar0 = P_DepVar0;
1079726   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079727   +* Renaming Into variables for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural32;
1079728   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079729   +length AutoNeural32_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural32_I_DepVar $32;
1079730   +drop AutoNeural32_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_I_DepVar;
1079731   +AutoNeural32_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural32_I_DepVar = I_DepVar;
1079732   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079733   +* Renaming _WARN_ variable for AutoNeural32;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural32;
1079734   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079735   +length AutoNeural32_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural32_WARN_ $4;
1079736   +drop AutoNeural32_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural32_WARN_;
1079737   +AutoNeural32_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural32_WARN_ = _WARN_;
1079738   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079739   +* Ensmbl53: Scoring Code of model 6 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 6 of 7;
1079740   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079741   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079742   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1079743   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1079744   +* NODE: AutoNeural31;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural31;
1079745   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1079746   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079747   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1079748   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1079749   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1079750   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1079751   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1079752   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1079753   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1079754   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1079755   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1079756   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1079757   +LENGTH _WARN_ $4
1079758   +      F_DepVar  $ 12
1079759   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1079760   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1079761   +
1079762   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1079763   +
1079764   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1079765   +
1079766   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1079767   +
1079768   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1079769   +
1079770   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1079771   +
1079772   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1079773   +
1079774   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1079775   +
1079776   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1079777   +
1079778   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1079779   +
1079780   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1079781   +
1079782   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1079783   +
1079784   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1079785   +
1079786   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1079787   +
1079788   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1079789   +
1079790   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1079791   +
1079792   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1079793   +
1079794   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1079795   +
1079796   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1079797   +
1079798   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1079799   +
1079800   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1079801   +
1079802   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1079803   +
1079804   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1079805   +
1079806   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1079807   +
1079808   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1079809   +
1079810   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1079811   +
1079812   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1079813   +
1079814   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1079815   +
1079816   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1079817   +
1079818   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1079819   +
1079820   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1079821   +
1079822   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1079823   +
1079824   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1079825   +
1079826   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1079827   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1079828   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1079829   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079830   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079831   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1079832   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079833   +end;
MPRINT(EM_DIAGRAM):   end;
1079834   +else do;
MPRINT(EM_DIAGRAM):   else do;
1079835   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1079836   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1079837   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1079838   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1079839   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1079840   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1079841   +   end;
MPRINT(EM_DIAGRAM):   end;
1079842   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1079843   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1079844   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1079845   +   end;
MPRINT(EM_DIAGRAM):   end;
1079846   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1079847   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1079848   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1079849   +   end;
MPRINT(EM_DIAGRAM):   end;
1079850   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1079851   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1079852   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1079853   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1079854   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079855   +   end;
MPRINT(EM_DIAGRAM):   end;
1079856   +end;
MPRINT(EM_DIAGRAM):   end;
1079857   +
1079858   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079859   +*** Checking missing input Interval
1079860   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1079861   +
1079862   +IF NMISS(
1079863   +   AcceptedCmpTotal ,
1079864   +   Frq ,
1079865   +   Income ,
1079866   +   Mnt ,
1079867   +   MntGoldProds ,
1079868   +   MntMeatProducts ,
1079869   +   MntWines ,
1079870   +   NumDistPurchases ,
1079871   +   RFMstat ,
1079872   +   RMntFrq ,
1079873   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1079874   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1079875   +
1079876   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1079877   +END;
MPRINT(EM_DIAGRAM):   END;
1079878   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079879   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1079880   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079881   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079882   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079883   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079884   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079885   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079886   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079887   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079888   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1079889   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079890   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079891   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079892   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079893   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079894   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079895   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079896   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079897   +END;
MPRINT(EM_DIAGRAM):   END;
1079898   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079899   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1079900   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1079901   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1079902   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1079903   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1079904   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1079905   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1079906   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1079907   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1079908   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1079909   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1079910   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1079911   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1079912   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1079913   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1079914   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1079915   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1079916   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1079917   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1079918   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1079919   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1079920   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1079921   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1079922   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1079923   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1079924   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1079925   +END;
MPRINT(EM_DIAGRAM):   END;
1079926   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079927   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1079928   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079929   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079930   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1079931   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079932   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079933   +   H1x1_1  =     0.03659823017812 * S_AcceptedCmpTotal
1079934   +          +    -1.19763341876145 * S_Frq  +     0.81238202822952 * S_Income
1079935   +          +     1.88011676145119 * S_Mnt  +     0.17620967209108 *
1079936   +        S_MntGoldProds  +    -0.01645582313184 * S_MntMeatProducts
1079937   +          +     0.51002049519212 * S_MntWines  +     0.25222197723244 *
1079938   +        S_NumDistPurchases  +     0.28056722928561 * S_RFMstat
1079939   +          +    -1.12243193103334 * S_RMntFrq  +    -0.37511560424314 *
1079940   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.03659823017812 * S_AcceptedCmpTotal + -1.19763341876145 *
S_Frq + 0.81238202822952 * S_Income + 1.88011676145119 * S_Mnt + 0.17620967209108 *
S_MntGoldProds + -0.01645582313184 * S_MntMeatProducts + 0.51002049519212 * S_MntWines +
0.25222197723244 * S_NumDistPurchases + 0.28056722928561 * S_RFMstat + -1.12243193103334 *
S_RMntFrq + -0.37511560424314 * S_Recency ;
1079941   +   H1x1_2  =     0.18983412995843 * S_AcceptedCmpTotal
1079942   +          +    -0.36018162246349 * S_Frq  +     0.01068760327542 * S_Income
1079943   +          +    -0.89719147415619 * S_Mnt  +     0.11241727599926 *
1079944   +        S_MntGoldProds  +     0.64236815353055 * S_MntMeatProducts
1079945   +          +     0.36278145113777 * S_MntWines  +     0.34466813565445 *
1079946   +        S_NumDistPurchases  +     0.05359534034679 * S_RFMstat
1079947   +          +     0.02704700607418 * S_RMntFrq  +     -0.3718472688023 *
1079948   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.18983412995843 * S_AcceptedCmpTotal + -0.36018162246349 *
S_Frq + 0.01068760327542 * S_Income + -0.89719147415619 * S_Mnt + 0.11241727599926 *
S_MntGoldProds + 0.64236815353055 * S_MntMeatProducts + 0.36278145113777 * S_MntWines +
0.34466813565445 * S_NumDistPurchases + 0.05359534034679 * S_RFMstat + 0.02704700607418 *
S_RMntFrq + -0.3718472688023 * S_Recency ;
1079949   +   H1x1_1  = H1x1_1  +     0.40642305557546 * G_Marital_Status0
1079950   +          +     -0.0248646279252 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.40642305557546 * G_Marital_Status0 +
-0.0248646279252 * G_Marital_Status1 ;
1079951   +   H1x1_2  = H1x1_2  +     0.16115803721995 * G_Marital_Status0
1079952   +          +     0.05904755469144 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.16115803721995 * G_Marital_Status0 +
0.05904755469144 * G_Marital_Status1 ;
1079953   +   H1x1_1  =     0.33463349044957 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33463349044957 + H1x1_1 ;
1079954   +   H1x1_2  =    -3.62976809107266 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -3.62976809107266 + H1x1_2 ;
1079955   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1079956   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1079957   +END;
MPRINT(EM_DIAGRAM):   END;
1079958   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079959   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1079960   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1079961   +END;
MPRINT(EM_DIAGRAM):   END;
1079962   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079963   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1079964   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079965   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079966   +   H1x2_1  =    -0.36010169192455 * S_AcceptedCmpTotal
1079967   +          +    -0.59887603386433 * S_Frq  +     0.50990837522658 * S_Income
1079968   +          +    -1.11866059151852 * S_Mnt  +     0.36285188228582 *
1079969   +        S_MntGoldProds  +     1.22856170475832 * S_MntMeatProducts
1079970   +          +     1.46123404932164 * S_MntWines  +    -0.01510122045686 *
1079971   +        S_NumDistPurchases  +     0.53310564732407 * S_RFMstat
1079972   +          +    -0.40691094193511 * S_RMntFrq  +     0.45756644061361 *
1079973   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.36010169192455 * S_AcceptedCmpTotal + -0.59887603386433 *
S_Frq + 0.50990837522658 * S_Income + -1.11866059151852 * S_Mnt + 0.36285188228582 *
S_MntGoldProds + 1.22856170475832 * S_MntMeatProducts + 1.46123404932164 * S_MntWines +
-0.01510122045686 * S_NumDistPurchases + 0.53310564732407 * S_RFMstat + -0.40691094193511 *
S_RMntFrq + 0.45756644061361 * S_Recency ;
1079974   +   H1x2_2  =    -0.17932261343465 * S_AcceptedCmpTotal
1079975   +          +     1.20080978426162 * S_Frq  +     0.18118647708641 * S_Income
1079976   +          +     0.31901116297924 * S_Mnt  +     0.02135897416621 *
1079977   +        S_MntGoldProds  +    -1.12534829348468 * S_MntMeatProducts
1079978   +          +     0.57649851666461 * S_MntWines  +    -1.46542585484816 *
1079979   +        S_NumDistPurchases  +    -0.20960777623629 * S_RFMstat
1079980   +          +      0.6962031545587 * S_RMntFrq  +     0.00840421006739 *
1079981   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.17932261343465 * S_AcceptedCmpTotal + 1.20080978426162 *
S_Frq + 0.18118647708641 * S_Income + 0.31901116297924 * S_Mnt + 0.02135897416621 *
S_MntGoldProds + -1.12534829348468 * S_MntMeatProducts + 0.57649851666461 * S_MntWines +
-1.46542585484816 * S_NumDistPurchases + -0.20960777623629 * S_RFMstat + 0.6962031545587 *
S_RMntFrq + 0.00840421006739 * S_Recency ;
1079982   +   H1x2_1  = H1x2_1  +    -0.05195034052296 * G_Marital_Status0
1079983   +          +     -0.2774675863976 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -0.05195034052296 * G_Marital_Status0 +
-0.2774675863976 * G_Marital_Status1 ;
1079984   +   H1x2_2  = H1x2_2  +     0.01901604294952 * G_Marital_Status0
1079985   +          +      -0.277144006775 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + 0.01901604294952 * G_Marital_Status0 + -0.277144006775
* G_Marital_Status1 ;
1079986   +   H1x2_1  =     1.53233871423223 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.53233871423223 + H1x2_1 ;
1079987   +   H1x2_2  =     1.35238678006556 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.35238678006556 + H1x2_2 ;
1079988   +   H1x2_1  = SIN(H1x2_1 );
MPRINT(EM_DIAGRAM):   H1x2_1 = SIN(H1x2_1 );
1079989   +   H1x2_2  = SIN(H1x2_2 );
MPRINT(EM_DIAGRAM):   H1x2_2 = SIN(H1x2_2 );
1079990   +END;
MPRINT(EM_DIAGRAM):   END;
1079991   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1079992   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1079993   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1079994   +END;
MPRINT(EM_DIAGRAM):   END;
1079995   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079996   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1079997   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1079998   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1079999   +   H1x3_1  =     1.63523210720409 * S_AcceptedCmpTotal
1080000   +          +     0.41751349520438 * S_Frq  +    -0.87449723255309 * S_Income
1080001   +          +    -0.47825070320724 * S_Mnt  +     0.76630810205636 *
1080002   +        S_MntGoldProds  +    -0.35835365889925 * S_MntMeatProducts
1080003   +          +    -1.27333688175297 * S_MntWines  +    -1.52770581313638 *
1080004   +        S_NumDistPurchases  +     0.86851574498866 * S_RFMstat
1080005   +          +     0.84614746872207 * S_RMntFrq  +    -1.64268632744477 *
1080006   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.63523210720409 * S_AcceptedCmpTotal + 0.41751349520438 *
S_Frq + -0.87449723255309 * S_Income + -0.47825070320724 * S_Mnt + 0.76630810205636 *
S_MntGoldProds + -0.35835365889925 * S_MntMeatProducts + -1.27333688175297 * S_MntWines +
-1.52770581313638 * S_NumDistPurchases + 0.86851574498866 * S_RFMstat + 0.84614746872207 *
S_RMntFrq + -1.64268632744477 * S_Recency ;
1080007   +   H1x3_2  =    -0.18638529120439 * S_AcceptedCmpTotal
1080008   +          +     0.76011175462816 * S_Frq  +     0.58495336465132 * S_Income
1080009   +          +     0.65856698208574 * S_Mnt  +     0.68781212622472 *
1080010   +        S_MntGoldProds  +    -1.09375532907934 * S_MntMeatProducts
1080011   +          +     1.39481639500189 * S_MntWines  +     0.26914802103737 *
1080012   +        S_NumDistPurchases  +    -2.20511156805519 * S_RFMstat
1080013   +          +     1.66705142994155 * S_RMntFrq  +    -0.36249885315985 *
1080014   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.18638529120439 * S_AcceptedCmpTotal + 0.76011175462816 *
S_Frq + 0.58495336465132 * S_Income + 0.65856698208574 * S_Mnt + 0.68781212622472 *
S_MntGoldProds + -1.09375532907934 * S_MntMeatProducts + 1.39481639500189 * S_MntWines +
0.26914802103737 * S_NumDistPurchases + -2.20511156805519 * S_RFMstat + 1.66705142994155 *
S_RMntFrq + -0.36249885315985 * S_Recency ;
1080015   +   H1x3_1  = H1x3_1  +     -0.2579393569494 * G_Marital_Status0
1080016   +          +    -1.04614665932456 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -0.2579393569494 * G_Marital_Status0 +
-1.04614665932456 * G_Marital_Status1 ;
1080017   +   H1x3_2  = H1x3_2  +    -1.03096078089306 * G_Marital_Status0
1080018   +          +    -0.71974289565489 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + -1.03096078089306 * G_Marital_Status0 +
-0.71974289565489 * G_Marital_Status1 ;
1080019   +   H1x3_1  =    -0.91456189694636 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.91456189694636 + H1x3_1 ;
1080020   +   H1x3_2  =    -0.51701043559885 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.51701043559885 + H1x3_2 ;
1080021   +   H1x3_1  = SIN(H1x3_1 );
MPRINT(EM_DIAGRAM):   H1x3_1 = SIN(H1x3_1 );
1080022   +   H1x3_2  = SIN(H1x3_2 );
MPRINT(EM_DIAGRAM):   H1x3_2 = SIN(H1x3_2 );
1080023   +END;
MPRINT(EM_DIAGRAM):   END;
1080024   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080025   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1080026   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1080027   +END;
MPRINT(EM_DIAGRAM):   END;
1080028   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080029   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1080030   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080031   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080032   +   H2x1_1  =     1.47132066677712 * H1x1_1  +      1.2723487532385 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.47132066677712 * H1x1_1 + 1.2723487532385 * H1x1_2 ;
1080033   +   H2x1_2  =     1.58711243971308 * H1x1_1  +      6.5189759089623 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.58711243971308 * H1x1_1 + 6.5189759089623 * H1x1_2 ;
1080034   +   H2x1_1  = H2x1_1  +     1.30878911727231 * H1x2_1
1080035   +          +     2.19496661698373 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.30878911727231 * H1x2_1 + 2.19496661698373 * H1x2_2 ;
1080036   +   H2x1_2  = H2x1_2  +    -3.82744270061369 * H1x2_1
1080037   +          +      1.3090956402929 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -3.82744270061369 * H1x2_1 + 1.3090956402929 * H1x2_2 ;
1080038   +   H2x1_1  = H2x1_1  +    -0.97307968271784 * H1x3_1
1080039   +          +     0.17025511053322 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.97307968271784 * H1x3_1 + 0.17025511053322 * H1x3_2
;
1080040   +   H2x1_2  = H2x1_2  +    -0.00685159977192 * H1x3_1
1080041   +          +     0.53377830648041 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.00685159977192 * H1x3_1 + 0.53377830648041 * H1x3_2
;
1080042   +   H2x1_1  =    -2.88828567261654 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -2.88828567261654 + H2x1_1 ;
1080043   +   H2x1_2  =    -0.63666932052712 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.63666932052712 + H2x1_2 ;
1080044   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080045   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080046   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1080047   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1080048   +END;
MPRINT(EM_DIAGRAM):   END;
1080049   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080050   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1080051   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1080052   +END;
MPRINT(EM_DIAGRAM):   END;
1080053   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080054   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1080055   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080056   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080057   +   H2x2_1  =     -0.1591646734645 * H1x1_1  +     2.50898584287812 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.1591646734645 * H1x1_1 + 2.50898584287812 * H1x1_2 ;
1080058   +   H2x2_2  =    -1.04022138862095 * H1x1_1  +     -3.2120641538371 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.04022138862095 * H1x1_1 + -3.2120641538371 * H1x1_2 ;
1080059   +   H2x2_1  = H2x2_1  +     0.95364577994168 * H1x2_1
1080060   +          +     0.39917449615996 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.95364577994168 * H1x2_1 + 0.39917449615996 * H1x2_2 ;
1080061   +   H2x2_2  = H2x2_2  +     0.34367752685876 * H1x2_1
1080062   +          +    -0.43345610313251 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.34367752685876 * H1x2_1 + -0.43345610313251 * H1x2_2
;
1080063   +   H2x2_1  = H2x2_1  +    -0.21053791455319 * H1x3_1
1080064   +          +     1.30320774323126 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21053791455319 * H1x3_1 + 1.30320774323126 * H1x3_2
;
1080065   +   H2x2_2  = H2x2_2  +    -0.56776778702573 * H1x3_1
1080066   +          +     0.23307461428861 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -0.56776778702573 * H1x3_1 + 0.23307461428861 * H1x3_2
;
1080067   +   H2x2_1  =    -0.57800274966727 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.57800274966727 + H2x2_1 ;
1080068   +   H2x2_2  =     -0.3490585254981 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -0.3490585254981 + H2x2_2 ;
1080069   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080070   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080071   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1080072   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1080073   +END;
MPRINT(EM_DIAGRAM):   END;
1080074   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080075   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1080076   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1080077   +END;
MPRINT(EM_DIAGRAM):   END;
1080078   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080079   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1080080   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080081   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080082   +   H3x1_1  =     2.93892662286754 * H2x1_1  +     4.69530667636314 * H2x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 2.93892662286754 * H2x1_1 + 4.69530667636314 * H2x1_2 ;
1080083   +   H3x1_1  = H3x1_1  +     0.63147427004529 * H2x2_1
1080084   +          +    -3.38971951524722 * H2x2_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.63147427004529 * H2x2_1 + -3.38971951524722 * H2x2_2
;
1080085   +   H3x1_1  =    -2.10378320265168 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -2.10378320265168 + H3x1_1 ;
1080086   +   H3x1_2  = 0;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0;
1080087   +   _MAX_ = MAX (H3x1_1 , H3x1_2 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 );
1080088   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1080089   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1080090   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1080091   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1080092   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1080093   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1080094   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1080095   +END;
MPRINT(EM_DIAGRAM):   END;
1080096   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080097   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1080098   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1080099   +END;
MPRINT(EM_DIAGRAM):   END;
1080100   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080101   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1080102   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080103   +
1080104   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1080105   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1080106   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1080107   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1080108   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1080109   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1080110   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1080111   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1080112   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1080113   +end;
MPRINT(EM_DIAGRAM):   end;
1080114   +else do;
MPRINT(EM_DIAGRAM):   else do;
1080115   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1080116   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1080117   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1080118   +   end;
MPRINT(EM_DIAGRAM):   end;
1080119   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1080120   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1080121   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1080122   +   end;
MPRINT(EM_DIAGRAM):   end;
1080123   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1080124   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1080125   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1080126   +   end;
MPRINT(EM_DIAGRAM):   end;
1080127   +end;
MPRINT(EM_DIAGRAM):   end;
1080128   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080129   +   P_DepVar1  =    -8.80200545202031 * H3x1_1  +    -0.19646708431763 * H3x1_2
1080130   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.80200545202031 * H3x1_1 + -0.19646708431763 * H3x1_2 ;
1080131   +   P_DepVar1  =     3.75158164611687 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.75158164611687 + P_DepVar1 ;
1080132   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1080133   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1080134   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1080135   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1080136   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1080137   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1080138   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1080139   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1080140   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1080141   +END;
MPRINT(EM_DIAGRAM):   END;
1080142   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080143   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1080144   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1080145   +END;
MPRINT(EM_DIAGRAM):   END;
1080146   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1080147   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1080148   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1080149   +END;
MPRINT(EM_DIAGRAM):   END;
1080150   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1080151   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1080152   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1080153   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1080154   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1080155   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1080156   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1080157   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080158   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1080159   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080160   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1080161   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1080162   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1080163   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1080164   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1080165   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1080166   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1080167   +END;
MPRINT(EM_DIAGRAM):   END;
1080168   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1080169   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1080170   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1080171   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1080172   +* Renaming variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural31;
1080173   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080174   +* Renaming Posterior variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural31;
1080175   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080176   +drop AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_P_DepVar1;
1080177   +AutoNeural31_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural31_P_DepVar1 = P_DepVar1;
1080178   +drop AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_P_DepVar0;
1080179   +AutoNeural31_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural31_P_DepVar0 = P_DepVar0;
1080180   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080181   +* Renaming Into variables for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural31;
1080182   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080183   +length AutoNeural31_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural31_I_DepVar $32;
1080184   +drop AutoNeural31_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_I_DepVar;
1080185   +AutoNeural31_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural31_I_DepVar = I_DepVar;
1080186   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080187   +* Renaming _WARN_ variable for AutoNeural31;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural31;
1080188   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080189   +length AutoNeural31_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural31_WARN_ $4;
1080190   +drop AutoNeural31_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural31_WARN_;
1080191   +AutoNeural31_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural31_WARN_ = _WARN_;
1080192   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080193   +* Ensmbl53: Scoring Code of model 7 of 7;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Scoring Code of model 7 of 7;
1080194   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080195   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080196   +* TOOL: AutoNeural;
MPRINT(EM_DIAGRAM):   * TOOL: AutoNeural;
1080197   +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
1080198   +* NODE: AutoNeural30;
MPRINT(EM_DIAGRAM):   * NODE: AutoNeural30;
1080199   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080200   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1080201   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1080202   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1080203   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1080204   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1080205   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1080206   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1080207   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1080208   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1080209   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1080210   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1080211   +LENGTH _WARN_ $4
1080212   +      F_DepVar  $ 12
1080213   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1080214   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1080215   +
1080216   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1080217   +
1080218   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1080219   +
1080220   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1080221   +
1080222   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1080223   +
1080224   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1080225   +
1080226   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1080227   +
1080228   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1080229   +
1080230   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1080231   +
1080232   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1080233   +
1080234   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1080235   +
1080236   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1080237   +
1080238   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1080239   +
1080240   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1080241   +
1080242   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1080243   +
1080244   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1080245   +
1080246   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1080247   +
1080248   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1080249   +
1080250   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1080251   +
1080252   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1080253   +
1080254   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1080255   +
1080256   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1080257   +
1080258   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1080259   +
1080260   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1080261   +
1080262   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1080263   +
1080264   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1080265   +
1080266   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1080267   +
1080268   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1080269   +
1080270   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1080271   +
1080272   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1080273   +
1080274   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1080275   +
1080276   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1080277   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1080278   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1080279   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1080280   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1080281   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1080282   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1080283   +end;
MPRINT(EM_DIAGRAM):   end;
1080284   +else do;
MPRINT(EM_DIAGRAM):   else do;
1080285   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1080286   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1080287   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1080288   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1080289   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1080290   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1080291   +   end;
MPRINT(EM_DIAGRAM):   end;
1080292   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1080293   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1080294   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1080295   +   end;
MPRINT(EM_DIAGRAM):   end;
1080296   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1080297   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1080298   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1080299   +   end;
MPRINT(EM_DIAGRAM):   end;
1080300   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1080301   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1080302   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1080303   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1080304   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1080305   +   end;
MPRINT(EM_DIAGRAM):   end;
1080306   +end;
MPRINT(EM_DIAGRAM):   end;
1080307   +
1080308   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080309   +*** Checking missing input Interval
1080310   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1080311   +
1080312   +IF NMISS(
1080313   +   AcceptedCmpTotal ,
1080314   +   Frq ,
1080315   +   Income ,
1080316   +   Mnt ,
1080317   +   MntGoldProds ,
1080318   +   MntMeatProducts ,
1080319   +   MntWines ,
1080320   +   NumDistPurchases ,
1080321   +   RFMstat ,
1080322   +   RMntFrq ,
1080323   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1080324   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1080325   +
1080326   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1080327   +END;
MPRINT(EM_DIAGRAM):   END;
1080328   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080329   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1080330   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080331   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080332   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1080333   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1080334   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1080335   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1080336   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1080337   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1080338   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1080339   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1080340   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1080341   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1080342   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1080343   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1080344   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1080345   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1080346   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1080347   +END;
MPRINT(EM_DIAGRAM):   END;
1080348   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080349   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1080350   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1080351   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1080352   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1080353   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1080354   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1080355   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1080356   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1080357   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1080358   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1080359   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1080360   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1080361   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1080362   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1080363   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1080364   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1080365   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1080366   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1080367   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1080368   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1080369   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1080370   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1080371   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1080372   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1080373   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1080374   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1080375   +END;
MPRINT(EM_DIAGRAM):   END;
1080376   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080377   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1080378   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080379   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080380   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1080381   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080382   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080383   +   H1x1_1  =     0.04025840082513 * S_AcceptedCmpTotal
1080384   +          +     0.06318752729093 * S_Frq  +    -1.29545791179409 * S_Income
1080385   +          +    -7.11030940481191 * S_Mnt  +     0.43390451556969 *
1080386   +        S_MntGoldProds  +     1.69733563869673 * S_MntMeatProducts
1080387   +          +     0.48225589030087 * S_MntWines  +     2.50429846731068 *
1080388   +        S_NumDistPurchases  +     0.19831933540707 * S_RFMstat
1080389   +          +     0.96752741277283 * S_RMntFrq  +    -0.27394913723816 *
1080390   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.04025840082513 * S_AcceptedCmpTotal + 0.06318752729093 *
S_Frq + -1.29545791179409 * S_Income + -7.11030940481191 * S_Mnt + 0.43390451556969 *
S_MntGoldProds + 1.69733563869673 * S_MntMeatProducts + 0.48225589030087 * S_MntWines +
2.50429846731068 * S_NumDistPurchases + 0.19831933540707 * S_RFMstat + 0.96752741277283 *
S_RMntFrq + -0.27394913723816 * S_Recency ;
1080391   +   H1x1_1  = H1x1_1  +    -0.13186660711464 * G_Marital_Status0
1080392   +          +     0.76507926337086 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.13186660711464 * G_Marital_Status0 +
0.76507926337086 * G_Marital_Status1 ;
1080393   +   H1x1_1  =    -2.07751077372903 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -2.07751077372903 + H1x1_1 ;
1080394   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080395   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080396   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1080397   +END;
MPRINT(EM_DIAGRAM):   END;
1080398   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080399   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1080400   +END;
MPRINT(EM_DIAGRAM):   END;
1080401   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080402   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1080403   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080404   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080405   +   H1x2_1  =     0.04623108287373 * S_AcceptedCmpTotal
1080406   +          +     0.51673349328259 * S_Frq  +    -0.55409697473564 * S_Income
1080407   +          +    -1.80152141029664 * S_Mnt  +    -0.01192709316085 *
1080408   +        S_MntGoldProds  +    -1.08887322486716 * S_MntMeatProducts
1080409   +          +    -0.54592829528894 * S_MntWines  +     0.87903819952137 *
1080410   +        S_NumDistPurchases  +     0.15549845875066 * S_RFMstat
1080411   +          +     0.64330086736687 * S_RMntFrq  +    -0.34615492895156 *
1080412   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.04623108287373 * S_AcceptedCmpTotal + 0.51673349328259 *
S_Frq + -0.55409697473564 * S_Income + -1.80152141029664 * S_Mnt + -0.01192709316085 *
S_MntGoldProds + -1.08887322486716 * S_MntMeatProducts + -0.54592829528894 * S_MntWines +
0.87903819952137 * S_NumDistPurchases + 0.15549845875066 * S_RFMstat + 0.64330086736687 *
S_RMntFrq + -0.34615492895156 * S_Recency ;
1080413   +   H1x2_1  = H1x2_1  +     0.04272112278258 * G_Marital_Status0
1080414   +          +     0.52128005949051 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.04272112278258 * G_Marital_Status0 +
0.52128005949051 * G_Marital_Status1 ;
1080415   +   H1x2_1  =    -1.26211132425318 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.26211132425318 + H1x2_1 ;
1080416   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080417   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080418   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1080419   +END;
MPRINT(EM_DIAGRAM):   END;
1080420   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080421   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1080422   +END;
MPRINT(EM_DIAGRAM):   END;
1080423   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080424   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1080425   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080426   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080427   +   H1x3_1  =    -0.31931196892076 * S_AcceptedCmpTotal
1080428   +          +     0.88013014607652 * S_Frq  +       2.380671405121 * S_Income
1080429   +          +    -1.76438631408259 * S_Mnt  +    -0.88002382547081 *
1080430   +        S_MntGoldProds  +     3.22143288077158 * S_MntMeatProducts
1080431   +          +    -1.46872497431142 * S_MntWines  +     4.48983574481035 *
1080432   +        S_NumDistPurchases  +     1.49229101598701 * S_RFMstat
1080433   +          +     0.86000773065844 * S_RMntFrq  +     0.41345680894813 *
1080434   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.31931196892076 * S_AcceptedCmpTotal + 0.88013014607652 *
S_Frq + 2.380671405121 * S_Income + -1.76438631408259 * S_Mnt + -0.88002382547081 *
S_MntGoldProds + 3.22143288077158 * S_MntMeatProducts + -1.46872497431142 * S_MntWines +
4.48983574481035 * S_NumDistPurchases + 1.49229101598701 * S_RFMstat + 0.86000773065844 *
S_RMntFrq + 0.41345680894813 * S_Recency ;
1080435   +   H1x3_1  = H1x3_1  +     0.24244728138592 * G_Marital_Status0
1080436   +          +     0.68199092237732 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + 0.24244728138592 * G_Marital_Status0 +
0.68199092237732 * G_Marital_Status1 ;
1080437   +   H1x3_1  =      0.8344057531016 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.8344057531016 + H1x3_1 ;
1080438   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080439   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080440   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1080441   +END;
MPRINT(EM_DIAGRAM):   END;
1080442   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080443   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1080444   +END;
MPRINT(EM_DIAGRAM):   END;
1080445   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080446   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1080447   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080448   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080449   +   H1x4_1  =    -0.13659878639954 * S_AcceptedCmpTotal
1080450   +          +     0.45428559765776 * S_Frq  +    -0.42693519984843 * S_Income
1080451   +          +      1.1792020785091 * S_Mnt  +     0.71939074066077 *
1080452   +        S_MntGoldProds  +    -0.72620231508443 * S_MntMeatProducts
1080453   +          +    -0.32426637270285 * S_MntWines  +    -0.38988807626314 *
1080454   +        S_NumDistPurchases  +    -3.02140616024044 * S_RFMstat
1080455   +          +     -0.8223455835322 * S_RMntFrq  +     0.94450643717764 *
1080456   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.13659878639954 * S_AcceptedCmpTotal + 0.45428559765776 *
S_Frq + -0.42693519984843 * S_Income + 1.1792020785091 * S_Mnt + 0.71939074066077 *
S_MntGoldProds + -0.72620231508443 * S_MntMeatProducts + -0.32426637270285 * S_MntWines +
-0.38988807626314 * S_NumDistPurchases + -3.02140616024044 * S_RFMstat + -0.8223455835322 *
S_RMntFrq + 0.94450643717764 * S_Recency ;
1080457   +   H1x4_1  = H1x4_1  +    -0.12208204500004 * G_Marital_Status0
1080458   +          +    -0.36246978080124 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.12208204500004 * G_Marital_Status0 +
-0.36246978080124 * G_Marital_Status1 ;
1080459   +   H1x4_1  =    -0.95371898342722 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.95371898342722 + H1x4_1 ;
1080460   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080461   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080462   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1080463   +END;
MPRINT(EM_DIAGRAM):   END;
1080464   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080465   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1080466   +END;
MPRINT(EM_DIAGRAM):   END;
1080467   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080468   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1080469   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080470   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080471   +   H2x1_1  =    -5.17307699680657 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -5.17307699680657 * H1x1_1 ;
1080472   +   H2x1_1  = H2x1_1  +     5.68206219040914 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 5.68206219040914 * H1x2_1 ;
1080473   +   H2x1_1  = H2x1_1  +      0.0671760867147 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.0671760867147 * H1x3_1 ;
1080474   +   H2x1_1  = H2x1_1  +     1.77797879568099 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.77797879568099 * H1x4_1 ;
1080475   +   H2x1_1  =    -1.18533244144823 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.18533244144823 + H2x1_1 ;
1080476   +   H2x1_1  = SIN(H2x1_1 );
MPRINT(EM_DIAGRAM):   H2x1_1 = SIN(H2x1_1 );
1080477   +END;
MPRINT(EM_DIAGRAM):   END;
1080478   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080479   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1080480   +END;
MPRINT(EM_DIAGRAM):   END;
1080481   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080482   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1080483   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080484   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080485   +   H2x2_1  =    -0.10427732572046 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.10427732572046 * H1x1_1 ;
1080486   +   H2x2_1  = H2x2_1  +    -2.43600502591825 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.43600502591825 * H1x2_1 ;
1080487   +   H2x2_1  = H2x2_1  +    -2.36291758854448 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.36291758854448 * H1x3_1 ;
1080488   +   H2x2_1  = H2x2_1  +    -0.21725276506237 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21725276506237 * H1x4_1 ;
1080489   +   H2x2_1  =     -1.6479184469931 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -1.6479184469931 + H2x2_1 ;
1080490   +   H2x2_1  = SIN(H2x2_1 );
MPRINT(EM_DIAGRAM):   H2x2_1 = SIN(H2x2_1 );
1080491   +END;
MPRINT(EM_DIAGRAM):   END;
1080492   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080493   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1080494   +END;
MPRINT(EM_DIAGRAM):   END;
1080495   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080496   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1080497   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080498   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080499   +   H2x3_1  =    -2.55881911263862 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.55881911263862 * H1x1_1 ;
1080500   +   H2x3_1  = H2x3_1  +    -1.36800479963026 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.36800479963026 * H1x2_1 ;
1080501   +   H2x3_1  = H2x3_1  +     2.49318998831913 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 2.49318998831913 * H1x3_1 ;
1080502   +   H2x3_1  = H2x3_1  +     -0.2723650813761 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -0.2723650813761 * H1x4_1 ;
1080503   +   H2x3_1  =    -2.02002422056859 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.02002422056859 + H2x3_1 ;
1080504   +   H2x3_1  = SIN(H2x3_1 );
MPRINT(EM_DIAGRAM):   H2x3_1 = SIN(H2x3_1 );
1080505   +END;
MPRINT(EM_DIAGRAM):   END;
1080506   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080507   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1080508   +END;
MPRINT(EM_DIAGRAM):   END;
1080509   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080510   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1080511   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080512   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080513   +   H3x1_1  =    -5.17928987039105 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -5.17928987039105 * H2x1_1 ;
1080514   +   H3x1_1  = H3x1_1  +    -4.99188815628878 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -4.99188815628878 * H2x2_1 ;
1080515   +   H3x1_1  = H3x1_1  +    -1.59478766396441 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.59478766396441 * H2x3_1 ;
1080516   +   H3x1_1  =    -1.17125580012514 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -1.17125580012514 + H3x1_1 ;
1080517   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080518   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080519   +   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x1_1 = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
1080520   +END;
MPRINT(EM_DIAGRAM):   END;
1080521   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080522   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1080523   +END;
MPRINT(EM_DIAGRAM):   END;
1080524   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080525   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1080526   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080527   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080528   +   H3x2_1  =       2.158894329803 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 2.158894329803 * H2x1_1 ;
1080529   +   H3x2_1  = H3x2_1  +    -2.32757193457059 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -2.32757193457059 * H2x2_1 ;
1080530   +   H3x2_1  = H3x2_1  +    -6.00752921212942 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -6.00752921212942 * H2x3_1 ;
1080531   +   H3x2_1  =    -0.08802993131411 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.08802993131411 + H3x2_1 ;
1080532   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080533   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080534   +   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x2_1 = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
1080535   +END;
MPRINT(EM_DIAGRAM):   END;
1080536   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080537   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1080538   +END;
MPRINT(EM_DIAGRAM):   END;
1080539   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080540   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1080541   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080542   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080543   +   H4x1_1  =      7.3411593355967 * H3x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 7.3411593355967 * H3x1_1 ;
1080544   +   H4x1_1  = H4x1_1  +    -3.06647078805944 * H3x2_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -3.06647078805944 * H3x2_1 ;
1080545   +   H4x1_1  =    -1.39824841795123 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = -1.39824841795123 + H4x1_1 ;
1080546   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1080547   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1080548   +   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H4x1_1 = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
1080549   +END;
MPRINT(EM_DIAGRAM):   END;
1080550   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080551   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1080552   +END;
MPRINT(EM_DIAGRAM):   END;
1080553   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080554   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1080555   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080556   +
1080557   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1080558   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1080559   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1080560   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1080561   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1080562   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1080563   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1080564   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1080565   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1080566   +end;
MPRINT(EM_DIAGRAM):   end;
1080567   +else do;
MPRINT(EM_DIAGRAM):   else do;
1080568   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1080569   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1080570   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1080571   +   end;
MPRINT(EM_DIAGRAM):   end;
1080572   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1080573   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1080574   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1080575   +   end;
MPRINT(EM_DIAGRAM):   end;
1080576   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1080577   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1080578   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1080579   +   end;
MPRINT(EM_DIAGRAM):   end;
1080580   +end;
MPRINT(EM_DIAGRAM):   end;
1080581   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1080582   +   P_DepVar1  =     9.74622448352833 * H4x1_1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 9.74622448352833 * H4x1_1 ;
1080583   +   P_DepVar1  =    -7.88591846838259 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.88591846838259 + P_DepVar1 ;
1080584   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1080585   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1080586   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1080587   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1080588   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1080589   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1080590   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1080591   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1080592   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1080593   +END;
MPRINT(EM_DIAGRAM):   END;
1080594   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1080595   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1080596   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1080597   +END;
MPRINT(EM_DIAGRAM):   END;
1080598   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1080599   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1080600   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1080601   +END;
MPRINT(EM_DIAGRAM):   END;
1080602   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1080603   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1080604   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1080605   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1080606   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1080607   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1080608   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1080609   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080610   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1080611   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080612   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1080613   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1080614   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1080615   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1080616   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1080617   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1080618   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1080619   +END;
MPRINT(EM_DIAGRAM):   END;
1080620   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1080621   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1080622   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1080623   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
1080624   +* Renaming variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming variables for AutoNeural30;
1080625   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080626   +* Renaming Posterior variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming Posterior variables for AutoNeural30;
1080627   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080628   +drop AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_P_DepVar1;
1080629   +AutoNeural30_P_DepVar1 = P_DepVar1;
MPRINT(EM_DIAGRAM):   AutoNeural30_P_DepVar1 = P_DepVar1;
1080630   +drop AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_P_DepVar0;
1080631   +AutoNeural30_P_DepVar0 = P_DepVar0;
MPRINT(EM_DIAGRAM):   AutoNeural30_P_DepVar0 = P_DepVar0;
1080632   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080633   +* Renaming Into variables for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming Into variables for AutoNeural30;
1080634   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080635   +length AutoNeural30_I_DepVar $32;
MPRINT(EM_DIAGRAM):   length AutoNeural30_I_DepVar $32;
1080636   +drop AutoNeural30_I_DepVar;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_I_DepVar;
1080637   +AutoNeural30_I_DepVar = I_DepVar;
MPRINT(EM_DIAGRAM):   AutoNeural30_I_DepVar = I_DepVar;
1080638   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080639   +* Renaming _WARN_ variable for AutoNeural30;
MPRINT(EM_DIAGRAM):   * Renaming _WARN_ variable for AutoNeural30;
1080640   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080641   +length AutoNeural30_WARN_ $4;
MPRINT(EM_DIAGRAM):   length AutoNeural30_WARN_ $4;
1080642   +drop AutoNeural30_WARN_;
MPRINT(EM_DIAGRAM):   drop AutoNeural30_WARN_;
1080643   +AutoNeural30_WARN_ = _WARN_;
MPRINT(EM_DIAGRAM):   AutoNeural30_WARN_ = _WARN_;
1080644   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080645   +* Ensmbl53: Voting to produce predicted target;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Voting to produce predicted target;
1080646   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080647   +array Ensmbl53_post{2} _temporary_;
MPRINT(EM_DIAGRAM):   array Ensmbl53_post{2} _temporary_;
1080648   +array Ensmbl53_count{2} _temporary_;
MPRINT(EM_DIAGRAM):   array Ensmbl53_count{2} _temporary_;
1080649   +array Ensmbl53_level{2} $32 _temporary_ (
1080650   +"1"
1080651   +"0"
1080652   +);
MPRINT(EM_DIAGRAM):   array Ensmbl53_level{2} $32 _temporary_ ( "1" "0" );
1080653   +do i=1 to 2;
MPRINT(EM_DIAGRAM):   do i=1 to 2;
1080654   +Ensmbl53_post{i} = 0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{i} = 0;
1080655   +Ensmbl53_count{i} = 0;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{i} = 0;
1080656   +end;
MPRINT(EM_DIAGRAM):   end;
1080657   +if AutoNeural29_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural29_I_DepVar = Ensmbl53_level{1} then do;
1080658   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080659   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural29_P_DepVar1;
1080660   +end;
MPRINT(EM_DIAGRAM):   end;
1080661   +if AutoNeural28_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural28_I_DepVar = Ensmbl53_level{1} then do;
1080662   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080663   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural28_P_DepVar1;
1080664   +end;
MPRINT(EM_DIAGRAM):   end;
1080665   +if AutoNeural27_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural27_I_DepVar = Ensmbl53_level{1} then do;
1080666   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080667   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural27_P_DepVar1;
1080668   +end;
MPRINT(EM_DIAGRAM):   end;
1080669   +if AutoNeural33_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural33_I_DepVar = Ensmbl53_level{1} then do;
1080670   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080671   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural33_P_DepVar1;
1080672   +end;
MPRINT(EM_DIAGRAM):   end;
1080673   +if AutoNeural32_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural32_I_DepVar = Ensmbl53_level{1} then do;
1080674   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080675   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural32_P_DepVar1;
1080676   +end;
MPRINT(EM_DIAGRAM):   end;
1080677   +if AutoNeural31_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural31_I_DepVar = Ensmbl53_level{1} then do;
1080678   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080679   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural31_P_DepVar1;
1080680   +end;
MPRINT(EM_DIAGRAM):   end;
1080681   +if AutoNeural30_I_DepVar = Ensmbl53_level{1} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural30_I_DepVar = Ensmbl53_level{1} then do;
1080682   +Ensmbl53_count{1} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{1} + 1;
1080683   +Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{1}=Ensmbl53_post{1}+ AutoNeural30_P_DepVar1;
1080684   +end;
MPRINT(EM_DIAGRAM):   end;
1080685   +if AutoNeural29_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural29_I_DepVar = Ensmbl53_level{2} then do;
1080686   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080687   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural29_P_DepVar0;
1080688   +end;
MPRINT(EM_DIAGRAM):   end;
1080689   +if AutoNeural28_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural28_I_DepVar = Ensmbl53_level{2} then do;
1080690   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080691   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural28_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural28_P_DepVar0;
1080692   +end;
MPRINT(EM_DIAGRAM):   end;
1080693   +if AutoNeural27_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural27_I_DepVar = Ensmbl53_level{2} then do;
1080694   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080695   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural27_P_DepVar0;
1080696   +end;
MPRINT(EM_DIAGRAM):   end;
1080697   +if AutoNeural33_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural33_I_DepVar = Ensmbl53_level{2} then do;
1080698   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080699   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural33_P_DepVar0;
1080700   +end;
MPRINT(EM_DIAGRAM):   end;
1080701   +if AutoNeural32_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural32_I_DepVar = Ensmbl53_level{2} then do;
1080702   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080703   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural32_P_DepVar0;
1080704   +end;
MPRINT(EM_DIAGRAM):   end;
1080705   +if AutoNeural31_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural31_I_DepVar = Ensmbl53_level{2} then do;
1080706   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080707   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural31_P_DepVar0;
1080708   +end;
MPRINT(EM_DIAGRAM):   end;
1080709   +if AutoNeural30_I_DepVar = Ensmbl53_level{2} then do;
MPRINT(EM_DIAGRAM):   if AutoNeural30_I_DepVar = Ensmbl53_level{2} then do;
1080710   +Ensmbl53_count{2} + 1;
MPRINT(EM_DIAGRAM):   Ensmbl53_count{2} + 1;
1080711   +Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   Ensmbl53_post{2}=Ensmbl53_post{2}+ AutoNeural30_P_DepVar0;
1080712   +end;
MPRINT(EM_DIAGRAM):   end;
1080713   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080714   +* Ensmbl53: Determine Into Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Determine Into Variable;
1080715   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080716   +length I_DepVar $32;
MPRINT(EM_DIAGRAM):   length I_DepVar $32;
WARNING: Length of character variable I_DepVar has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
1080717   +drop i vote_count vote_post;
MPRINT(EM_DIAGRAM):   drop i vote_count vote_post;
1080718   +vote_count = max(
1080719   +Ensmbl53_count{1} ,
1080720   +Ensmbl53_count{2}
1080721   +);
MPRINT(EM_DIAGRAM):   vote_count = max( Ensmbl53_count{1} , Ensmbl53_count{2} );
1080722   +do i=1 to 2;
MPRINT(EM_DIAGRAM):   do i=1 to 2;
1080723   +if Ensmbl53_count{i}=vote_count and Ensmbl53_post{i}>vote_post then do;
MPRINT(EM_DIAGRAM):   if Ensmbl53_count{i}=vote_count and Ensmbl53_post{i}>vote_post then do;
1080724   +I_DepVar = Ensmbl53_level{i};
MPRINT(EM_DIAGRAM):   I_DepVar = Ensmbl53_level{i};
1080725   +vote_post = Ensmbl53_count{i};
MPRINT(EM_DIAGRAM):   vote_post = Ensmbl53_count{i};
1080726   +end;
MPRINT(EM_DIAGRAM):   end;
1080727   +end;
MPRINT(EM_DIAGRAM):   end;
1080728   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080729   +* Ensmbl53: Compute posterior vars using models predicting the chosen level;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Compute posterior vars using models predicting the chosen
level;
1080730   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080731   +P_DepVar1 = 0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1080732   +P_DepVar0 = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1080733   +if I_DepVar = AutoNeural29_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural29_I_DepVar then do;
1080734   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural29_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural29_P_DepVar1;
1080735   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural29_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural29_P_DepVar0;
1080736   +end;
MPRINT(EM_DIAGRAM):   end;
1080737   +if I_DepVar = AutoNeural28_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural28_I_DepVar then do;
1080738   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural28_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural28_P_DepVar1;
1080739   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural28_P_DepVar0;
The SAS System
 
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural28_P_DepVar0;
1080740   +end;
MPRINT(EM_DIAGRAM):   end;
1080741   +if I_DepVar = AutoNeural27_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural27_I_DepVar then do;
1080742   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural27_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural27_P_DepVar1;
1080743   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural27_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural27_P_DepVar0;
1080744   +end;
MPRINT(EM_DIAGRAM):   end;
1080745   +if I_DepVar = AutoNeural33_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural33_I_DepVar then do;
1080746   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural33_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural33_P_DepVar1;
1080747   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural33_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural33_P_DepVar0;
1080748   +end;
MPRINT(EM_DIAGRAM):   end;
1080749   +if I_DepVar = AutoNeural32_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural32_I_DepVar then do;
1080750   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural32_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural32_P_DepVar1;
1080751   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural32_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural32_P_DepVar0;
1080752   +end;
MPRINT(EM_DIAGRAM):   end;
1080753   +if I_DepVar = AutoNeural31_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural31_I_DepVar then do;
1080754   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural31_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural31_P_DepVar1;
1080755   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural31_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural31_P_DepVar0;
1080756   +end;
MPRINT(EM_DIAGRAM):   end;
1080757   +if I_DepVar = AutoNeural30_I_DepVar then do;
MPRINT(EM_DIAGRAM):   if I_DepVar = AutoNeural30_I_DepVar then do;
1080758   +P_DEPVAR1 = P_DEPVAR1 + AutoNeural30_P_DepVar1;
MPRINT(EM_DIAGRAM):   P_DEPVAR1 = P_DEPVAR1 + AutoNeural30_P_DepVar1;
1080759   +P_DEPVAR0 = P_DEPVAR0 + AutoNeural30_P_DepVar0;
MPRINT(EM_DIAGRAM):   P_DEPVAR0 = P_DEPVAR0 + AutoNeural30_P_DepVar0;
1080760   +end;
MPRINT(EM_DIAGRAM):   end;
1080761   +* Ensmbl53: Averaging posterior;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Averaging posterior;
1080762   +P_DepVar1 = P_DepVar1/vote_count;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1/vote_count;
1080763   +P_DepVar0 = P_DepVar0/vote_count;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0/vote_count;
1080764   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080765   +* Ensmbl53: Producing Unformatted variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Producing Unformatted variable;
1080766   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080767   +label U_DepVar = "Unnormalized Into: DepVar";
MPRINT(EM_DIAGRAM):   label U_DepVar = "Unnormalized Into: DepVar";
1080768   +if I_DepVar = '1' then U_DepVar = 1;
MPRINT(EM_DIAGRAM):   if I_DepVar = '1' then U_DepVar = 1;
1080769   +else
1080770   +if I_DepVar = '0' then U_DepVar = 0;
MPRINT(EM_DIAGRAM):   else if I_DepVar = '0' then U_DepVar = 0;
1080771   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080772   +* Ensmbl53: Computing _WARN_ Variable;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Computing _WARN_ Variable;
1080773   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080774   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1080775   +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
1080776   +_WARN_ = '';
MPRINT(EM_DIAGRAM):   _WARN_ = '';
1080777   +if index(AUTONEURAL29_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080777  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080778   +if index(AUTONEURAL29_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080778  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080779   +if index(AUTONEURAL29_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080779  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080780   +if index(AUTONEURAL29_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080780  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL29_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080781   +if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080781  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080782   +if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080782  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080783   +if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080783  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080784   +if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080784  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL28_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080785   +if index(AUTONEURAL27_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080785  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080786   +if index(AUTONEURAL27_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080786  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080787   +if index(AUTONEURAL27_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080787  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080788   +if index(AUTONEURAL27_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080788  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL27_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080789   +if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080789  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080790   +if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080790  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080791   +if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080791  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080792   +if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080792  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL33_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080793   +if index(AUTONEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080793  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080794   +if index(AUTONEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080794  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080795   +if index(AUTONEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080795  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080796   +if index(AUTONEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080796  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL32_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080797   +if index(AUTONEURAL31_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080797  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080798   +if index(AUTONEURAL31_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080798  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080799   +if index(AUTONEURAL31_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080799  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080800   +if index(AUTONEURAL31_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080800  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL31_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080801   +if index(AUTONEURAL30_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1)
1080801  !+='M';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'M') and ^index(_WARN_, 'M') then
substr(_WARN_, 1, 1) ='M';
1080802   +if index(AUTONEURAL30_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1)
1080802  !+='U';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'U') and ^index(_WARN_, 'U') then
substr(_WARN_, 2, 1) ='U';
1080803   +if index(AUTONEURAL30_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1)
1080803  !+='P';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'P') and ^index(_WARN_, 'P') then
substr(_WARN_, 3, 1) ='P';
1080804   +if index(AUTONEURAL30_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1)
1080804  !+='C';
MPRINT(EM_DIAGRAM):   if index(AUTONEURAL30_WARN_, 'C') and ^index(_WARN_, 'C') then
substr(_WARN_, 4, 1) ='C';
1080805   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080806   +* Ensmbl53: Computing Residual Vars;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Computing Residual Vars;
1080807   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1080808   +if
1080809   +F_DepVar NE '1'
1080810   +AND F_DepVar NE '0'
1080811   +then do;
MPRINT(EM_DIAGRAM):   if F_DepVar NE '1' AND F_DepVar NE '0' then do;
1080812   +R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1080813   +R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1080814   +end;
MPRINT(EM_DIAGRAM):   end;
1080815   +else do;
MPRINT(EM_DIAGRAM):   else do;
1080816   +R_DepVar1 = -P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1;
1080817   +R_DepVar0 = -P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0;
1080818   +SELECT(F_DepVar);
MPRINT(EM_DIAGRAM):   SELECT(F_DepVar);
1080819   +WHEN('1') R_DepVar1 = R_DepVar1 +1;
MPRINT(EM_DIAGRAM):   WHEN('1') R_DepVar1 = R_DepVar1 +1;
1080820   +WHEN('0') R_DepVar0 = R_DepVar0 +1;
MPRINT(EM_DIAGRAM):   WHEN('0') R_DepVar0 = R_DepVar0 +1;
1080821   +OTHERWISE;
MPRINT(EM_DIAGRAM):   OTHERWISE;
1080822   +END;
MPRINT(EM_DIAGRAM):   END;
1080823   +END;
MPRINT(EM_DIAGRAM):   END;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1080824    run;
 
NOTE: DATA STEP view saved on file EMWS8.ENSMBL53_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.AUTONEURAL29_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1080825    quit;
1080826    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl53_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Ensmbl53_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Ensmbl53_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
1080886    filename _pref
1080886  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural29\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural29\EMPUBLISHSCORE.sas";
1080887    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1080888    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural29\EMPUBLISHSCORE.sas.
1080889   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1080890   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1080891   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1080892   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1080893   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1080894   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1080895   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1080896   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1080897   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1080898   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1080899   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1080900   +LENGTH _WARN_ $4
1080901   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1080902   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1080903   +
1080904   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1080905   +
1080906   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1080907   +
1080908   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1080909   +
1080910   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1080911   +
1080912   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1080913   +
1080914   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1080915   +
1080916   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1080917   +
1080918   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1080919   +
1080920   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1080921   +
1080922   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1080923   +
1080924   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1080925   +
1080926   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1080927   +
1080928   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1080929   +
1080930   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1080931   +
1080932   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1080933   +
1080934   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1080935   +
1080936   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1080937   +
1080938   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1080939   +
1080940   +      label H1x1_7 = 'Hidden: H1x1_=7' ;
MPRINT(EM_DIAGRAM):   label H1x1_7 = 'Hidden: H1x1_=7' ;
1080941   +
1080942   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1080943   +
1080944   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1080945   +
1080946   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1080947   +
1080948   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1080949   +
1080950   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1080951   +
1080952   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1080953   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1080954   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1080955   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1080956   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1080957   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1080958   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1080959   +end;
MPRINT(EM_DIAGRAM):   end;
1080960   +else do;
MPRINT(EM_DIAGRAM):   else do;
1080961   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1080962   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1080963   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1080964   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1080965   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1080966   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1080967   +   end;
MPRINT(EM_DIAGRAM):   end;
1080968   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1080969   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1080970   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1080971   +   end;
MPRINT(EM_DIAGRAM):   end;
1080972   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1080973   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1080974   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1080975   +   end;
MPRINT(EM_DIAGRAM):   end;
1080976   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1080977   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1080978   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1080979   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1080980   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1080981   +   end;
MPRINT(EM_DIAGRAM):   end;
1080982   +end;
MPRINT(EM_DIAGRAM):   end;
1080983   +
1080984   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1080985   +*** Checking missing input Interval
1080986   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1080987   +
1080988   +IF NMISS(
1080989   +   AcceptedCmpTotal ,
1080990   +   Frq ,
1080991   +   Income ,
1080992   +   Mnt ,
1080993   +   MntGoldProds ,
1080994   +   MntMeatProducts ,
1080995   +   MntWines ,
1080996   +   NumDistPurchases ,
1080997   +   RFMstat ,
1080998   +   RMntFrq ,
1080999   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1081000   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1081001   +
1081002   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1081003   +END;
MPRINT(EM_DIAGRAM):   END;
1081004   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081005   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1081006   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081007   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1081008   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1081009   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1081010   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1081011   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1081012   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1081013   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1081014   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1081015   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1081016   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1081017   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1081018   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1081019   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1081020   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1081021   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1081022   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1081023   +END;
MPRINT(EM_DIAGRAM):   END;
1081024   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1081025   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1081026   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1081027   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1081028   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1081029   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1081030   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1081031   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1081032   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1081033   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1081034   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1081035   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1081036   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1081037   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1081038   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1081039   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1081040   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1081041   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1081042   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1081043   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1081044   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1081045   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1081046   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1081047   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1081048   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1081049   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1081050   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1081051   +END;
MPRINT(EM_DIAGRAM):   END;
1081052   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081053   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1081054   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081055   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081056   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1081057   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081058   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1081059   +   H1x1_1  =    -1.99300782242957 * S_AcceptedCmpTotal
1081060   +          +     2.12004224248217 * S_Frq  +     3.86828667262904 * S_Income
1081061   +          +     2.77648198770608 * S_Mnt  +    -2.27326773671069 *
1081062   +        S_MntGoldProds  +    -0.27399687657599 * S_MntMeatProducts
1081063   +          +     2.26137957922507 * S_MntWines  +     0.14135280902221 *
1081064   +        S_NumDistPurchases  +     1.12048709605553 * S_RFMstat
1081065   +          +     0.99315934409036 * S_RMntFrq  +     1.21818826467727 *
1081066   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.99300782242957 * S_AcceptedCmpTotal + 2.12004224248217 *
S_Frq + 3.86828667262904 * S_Income + 2.77648198770608 * S_Mnt + -2.27326773671069 *
S_MntGoldProds + -0.27399687657599 * S_MntMeatProducts + 2.26137957922507 * S_MntWines +
0.14135280902221 * S_NumDistPurchases + 1.12048709605553 * S_RFMstat + 0.99315934409036 *
S_RMntFrq + 1.21818826467727 * S_Recency ;
1081067   +   H1x1_2  =    -0.46080527925139 * S_AcceptedCmpTotal
1081068   +          +     1.22986184660358 * S_Frq  +     1.25416218398238 * S_Income
1081069   +          +      0.7698101051046 * S_Mnt  +    -0.24851515302824 *
1081070   +        S_MntGoldProds  +    -1.02206883329868 * S_MntMeatProducts
1081071   +          +    -2.60436726665032 * S_MntWines  +     1.42856046102253 *
1081072   +        S_NumDistPurchases  +     0.23036228891547 * S_RFMstat
1081073   +          +    -0.44196680894425 * S_RMntFrq  +     1.47726327092789 *
1081074   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.46080527925139 * S_AcceptedCmpTotal + 1.22986184660358 *
S_Frq + 1.25416218398238 * S_Income + 0.7698101051046 * S_Mnt + -0.24851515302824 *
S_MntGoldProds + -1.02206883329868 * S_MntMeatProducts + -2.60436726665032 * S_MntWines +
1.42856046102253 * S_NumDistPurchases + 0.23036228891547 * S_RFMstat + -0.44196680894425 *
S_RMntFrq + 1.47726327092789 * S_Recency ;
1081075   +   H1x1_3  =    -2.72041257472943 * S_AcceptedCmpTotal
1081076   +          +     2.18007007875237 * S_Frq  +    -3.41389425682735 * S_Income
1081077   +          +     1.22111404132155 * S_Mnt  +     0.13965132551243 *
1081078   +        S_MntGoldProds  +    -1.44679609979492 * S_MntMeatProducts
1081079   +          +     1.32449625366546 * S_MntWines  +     0.71474658567846 *
1081080   +        S_NumDistPurchases  +    -1.11377169665392 * S_RFMstat
1081081   +          +    -0.23272811318878 * S_RMntFrq  +     3.38352057173892 *
1081082   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -2.72041257472943 * S_AcceptedCmpTotal + 2.18007007875237 *
S_Frq + -3.41389425682735 * S_Income + 1.22111404132155 * S_Mnt + 0.13965132551243 *
S_MntGoldProds + -1.44679609979492 * S_MntMeatProducts + 1.32449625366546 * S_MntWines +
0.71474658567846 * S_NumDistPurchases + -1.11377169665392 * S_RFMstat + -0.23272811318878 *
S_RMntFrq + 3.38352057173892 * S_Recency ;
1081083   +   H1x1_4  =    -0.53914082027029 * S_AcceptedCmpTotal
1081084   +          +     3.52541527909413 * S_Frq  +     0.47386294116539 * S_Income
1081085   +          +     1.74856835081997 * S_Mnt  +    -0.31608698854628 *
1081086   +        S_MntGoldProds  +    -4.08585161438784 * S_MntMeatProducts
1081087   +          +     1.11934057687184 * S_MntWines  +    -4.23069217087257 *
1081088   +        S_NumDistPurchases  +    -0.45058242594518 * S_RFMstat
1081089   +          +     2.24526854282726 * S_RMntFrq  +     0.46541621801996 *
1081090   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -0.53914082027029 * S_AcceptedCmpTotal + 3.52541527909413 *
S_Frq + 0.47386294116539 * S_Income + 1.74856835081997 * S_Mnt + -0.31608698854628 *
S_MntGoldProds + -4.08585161438784 * S_MntMeatProducts + 1.11934057687184 * S_MntWines +
-4.23069217087257 * S_NumDistPurchases + -0.45058242594518 * S_RFMstat + 2.24526854282726 *
S_RMntFrq + 0.46541621801996 * S_Recency ;
1081091   +   H1x1_5  =     0.16652182962256 * S_AcceptedCmpTotal
1081092   +          +    -2.34082830868767 * S_Frq  +     0.06017749299853 * S_Income
1081093   +          +    -3.61434433922311 * S_Mnt  +    -0.15794212009402 *
1081094   +        S_MntGoldProds  +     5.32833368617196 * S_MntMeatProducts
1081095   +          +     1.70496933504273 * S_MntWines  +     2.85445845094536 *
1081096   +        S_NumDistPurchases  +     1.88219523605925 * S_RFMstat
1081097   +          +     0.75869801637089 * S_RMntFrq  +     0.08064297106734 *
1081098   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.16652182962256 * S_AcceptedCmpTotal + -2.34082830868767 *
S_Frq + 0.06017749299853 * S_Income + -3.61434433922311 * S_Mnt + -0.15794212009402 *
S_MntGoldProds + 5.32833368617196 * S_MntMeatProducts + 1.70496933504273 * S_MntWines +
2.85445845094536 * S_NumDistPurchases + 1.88219523605925 * S_RFMstat + 0.75869801637089 *
S_RMntFrq + 0.08064297106734 * S_Recency ;
1081099   +   H1x1_6  =     1.97422379745385 * S_AcceptedCmpTotal
1081100   +          +    -0.18806921540808 * S_Frq  +    -1.45393613178942 * S_Income
1081101   +          +    -1.71382589206496 * S_Mnt  +    -0.86398659373382 *
1081102   +        S_MntGoldProds  +    -0.55933907393534 * S_MntMeatProducts
1081103   +          +    -2.04088833388184 * S_MntWines  +     1.33825297425801 *
1081104   +        S_NumDistPurchases  +    -1.84916943620006 * S_RFMstat
1081105   +          +     1.10268410707441 * S_RMntFrq  +    -3.24538880603902 *
1081106   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.97422379745385 * S_AcceptedCmpTotal + -0.18806921540808 *
S_Frq + -1.45393613178942 * S_Income + -1.71382589206496 * S_Mnt + -0.86398659373382 *
S_MntGoldProds + -0.55933907393534 * S_MntMeatProducts + -2.04088833388184 * S_MntWines +
1.33825297425801 * S_NumDistPurchases + -1.84916943620006 * S_RFMstat + 1.10268410707441 *
S_RMntFrq + -3.24538880603902 * S_Recency ;
1081107   +   H1x1_7  =    -0.04334303258083 * S_AcceptedCmpTotal
1081108   +          +      1.2911623736286 * S_Frq  +    -2.28992194197276 * S_Income
1081109   +          +    -0.46322849796029 * S_Mnt  +    -0.61987255353555 *
1081110   +        S_MntGoldProds  +    -0.70448430141235 * S_MntMeatProducts
1081111   +          +    -2.07867791807129 * S_MntWines  +    -1.36577325340948 *
1081112   +        S_NumDistPurchases  +    -1.20867908080733 * S_RFMstat
1081113   +          +     1.13377434281641 * S_RMntFrq  +     0.49995615625441 *
1081114   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_7 = -0.04334303258083 * S_AcceptedCmpTotal + 1.2911623736286 *
S_Frq + -2.28992194197276 * S_Income + -0.46322849796029 * S_Mnt + -0.61987255353555 *
S_MntGoldProds + -0.70448430141235 * S_MntMeatProducts + -2.07867791807129 * S_MntWines +
-1.36577325340948 * S_NumDistPurchases + -1.20867908080733 * S_RFMstat + 1.13377434281641 *
S_RMntFrq + 0.49995615625441 * S_Recency ;
1081115   +   H1x1_1  = H1x1_1  +     -1.7035629341514 * G_Marital_Status0
1081116   +          +    -0.88839271772433 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -1.7035629341514 * G_Marital_Status0 +
-0.88839271772433 * G_Marital_Status1 ;
1081117   +   H1x1_2  = H1x1_2  +     0.47234648810132 * G_Marital_Status0
1081118   +          +     0.49781009278812 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47234648810132 * G_Marital_Status0 +
0.49781009278812 * G_Marital_Status1 ;
1081119   +   H1x1_3  = H1x1_3  +     0.04803102756566 * G_Marital_Status0
1081120   +          +     3.45859276392218 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.04803102756566 * G_Marital_Status0 +
3.45859276392218 * G_Marital_Status1 ;
1081121   +   H1x1_4  = H1x1_4  +    -0.00794915276466 * G_Marital_Status0
1081122   +          +    -0.88877093101914 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.00794915276466 * G_Marital_Status0 +
-0.88877093101914 * G_Marital_Status1 ;
1081123   +   H1x1_5  = H1x1_5  +     0.17344052282277 * G_Marital_Status0
1081124   +          +     0.07512544812374 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + 0.17344052282277 * G_Marital_Status0 +
0.07512544812374 * G_Marital_Status1 ;
1081125   +   H1x1_6  = H1x1_6  +     0.69797087079749 * G_Marital_Status0
1081126   +          +     1.99160337429042 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + 0.69797087079749 * G_Marital_Status0 +
1.99160337429042 * G_Marital_Status1 ;
1081127   +   H1x1_7  = H1x1_7  +    -1.90814013352903 * G_Marital_Status0
1081128   +          +    -0.58260071621307 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = H1x1_7 + -1.90814013352903 * G_Marital_Status0 +
-0.58260071621307 * G_Marital_Status1 ;
1081129   +   H1x1_1  =      0.4509613443627 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.4509613443627 + H1x1_1 ;
1081130   +   H1x1_2  =     3.28102437302443 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 3.28102437302443 + H1x1_2 ;
1081131   +   H1x1_3  =    -0.59732076258377 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.59732076258377 + H1x1_3 ;
1081132   +   H1x1_4  =     3.04302174126598 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 3.04302174126598 + H1x1_4 ;
1081133   +   H1x1_5  =     4.11173403634453 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 4.11173403634453 + H1x1_5 ;
1081134   +   H1x1_6  =     4.51964221881808 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 4.51964221881808 + H1x1_6 ;
1081135   +   H1x1_7  =     7.27061205819069 + H1x1_7 ;
MPRINT(EM_DIAGRAM):   H1x1_7 = 7.27061205819069 + H1x1_7 ;
1081136   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1081137   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1081138   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1081139   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1081140   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1081141   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1081142   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1081143   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1081144   +   H1x1_7  = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_7 = 1.0 / (1.0 + EXP(MIN( - H1x1_7 , _EXP_BAR)));
1081145   +END;
MPRINT(EM_DIAGRAM):   END;
1081146   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1081147   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1081148   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1081149   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1081150   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1081151   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1081152   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1081153   +   H1x1_7  = .;
MPRINT(EM_DIAGRAM):   H1x1_7 = .;
1081154   +END;
MPRINT(EM_DIAGRAM):   END;
1081155   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081156   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1081157   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081158   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1081159   +   P_DepVar1  =    -3.49358340904307 * H1x1_1  +    -5.28251662728987 * H1x1_2
1081160   +          +    -4.11876057817011 * H1x1_3  +    -7.73777326204979 * H1x1_4
1081161   +          +     12.8932497890238 * H1x1_5  +     6.88694832857203 * H1x1_6
1081162   +          +    -8.47048075234366 * H1x1_7 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.49358340904307 * H1x1_1 + -5.28251662728987 * H1x1_2 +
-4.11876057817011 * H1x1_3 + -7.73777326204979 * H1x1_4 + 12.8932497890238 * H1x1_5 +
6.88694832857203 * H1x1_6 + -8.47048075234366 * H1x1_7 ;
1081163   +   P_DepVar1  =     1.65092540834245 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.65092540834245 + P_DepVar1 ;
1081164   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1081165   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1081166   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1081167   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1081168   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1081169   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1081170   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1081171   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1081172   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1081173   +END;
MPRINT(EM_DIAGRAM):   END;
1081174   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1081175   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1081176   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1081177   +END;
MPRINT(EM_DIAGRAM):   END;
1081178   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1081179   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1081180   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1081181   +END;
MPRINT(EM_DIAGRAM):   END;
1081182   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081183   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1081184   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081185   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1081186   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1081187   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1081188   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1081189   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1081190   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1081191   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1081192   +END;
MPRINT(EM_DIAGRAM):   END;
1081193   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1081194   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1081195   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1081196   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1081197    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1081198    quit;
1081199    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1081200    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1081201    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1081202    retain ID 2 Node "AutoNeural29";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural29";
1081203    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1081204    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1111 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1111 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1081205    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1081206    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081207    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1111 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1111 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081208    proc sort data=EMWS8.AutoNeural29_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural29_variableset out=_temp2(keep=NAME
CREATOR);
1081209    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081210    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL29_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081211    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081212    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1081213    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1081214    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081215    proc contents data=EMWS8.AutoNeural29_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural29_train out=_meta(keep=NAME) noprint;
1081216    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 61 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081217    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1081218    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081219    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 61 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 61 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1081220    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081221    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1081222    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081223    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 61 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 61 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081224    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081225    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1081225  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 563 rows and 5 columns.
 
1081226    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081227    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1081228    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 563 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 563 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081229    filename _pref
1081229  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1081230    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1081231    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1081232   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1081233   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1081234   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1081235   +
1081236   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1081237   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1081238   +
1081239   +
1081240   +/*----G_Marital_Status begin----*/
1081241   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1081242   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1081243   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1081244   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1081245   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1081246   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1081247   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1081248   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1081249   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1081250   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1081251   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1081252   +end;
MPRINT(EM_DIAGRAM):   end;
1081253   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1081254   +/*----G_Marital_Status end----*/
1081255   +
1081256   +
1081257   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1081258   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1081259   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1081260    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1081261    quit;
1081262    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1081263    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1081264    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1081265    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1081266    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1081267    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081268    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1081269    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081270    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081271    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1081272    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081273    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081274    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081275    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1081276    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1081277    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081278    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1081279    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081280    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1081281    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081282    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081283    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081284    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1081285    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081286    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081287    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081288    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1081288  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1081289    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081290    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1081291    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 566 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081292    filename _pref
1081292  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1081293    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1081294    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1081295   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1081296   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1081297   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1081298   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1081299   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1081300   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1081301    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1081302    quit;
1081303    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1081304    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1081305    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1081306    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1081307    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1081308    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081309    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1081310    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081311    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1081312    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1081313    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081314    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081315    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081316    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1081317    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1081318    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081319    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1081320    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1081321    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1081322    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081323    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081324    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081325    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1081326    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081327    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081328    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081329    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1081329  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1081330    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081331    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1081332    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 570 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081333    filename _pref
1081333  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1081334    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1081335    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1081336   +
1081337   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1081338   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1081338  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1081339   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1081340   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1081341   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1081342   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1081343   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1081344    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1081345    quit;
1081346    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1081347    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1081348    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1081349    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1081350    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1081351    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081352    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1081353    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081354    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081355    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1081356    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081357    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081358    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081359    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1081360    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1081361    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081362    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1081363    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081364    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1081365    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081366    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081367    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081368    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1081369    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081370    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081371    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081372    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1081372  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1081373    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081374    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1081375    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 609 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081376    filename _pref
1081376  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1081377    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1081378    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1081379   +
1081380   +
1081381   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1081382   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1081383   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1081384   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1081385   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1081386   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081387   +
1081388   +
1081389   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1081390   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1081391   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1081392   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1081393   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1081394   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081395   +
1081396   +
1081397   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1081398   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1081399   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1081400   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1081401   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1081402   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081403   +
1081404   +
1081405   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1081406   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1081407   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1081408   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1081409   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1081410   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081411   +
1081412   +
1081413   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1081414   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1081415   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1081416   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1081417   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1081418   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081419   +
1081420   +
1081421   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1081422   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1081423   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1081424   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1081425   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1081426   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081427   +
1081428   +
1081429   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1081430   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1081431   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1081432   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1081433   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1081434   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081435   +
1081436   +
1081437   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1081438   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1081439   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1081440   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1081441   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1081442   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1081443   +if
1081444   +_FILTERNORM1 not in ( '.')
1081445   + and
1081446   +_FILTERNORM2 not in ( '.')
1081447   + and
1081448   +_FILTERNORM3 not in ( '.')
1081449   + and
1081450   +_FILTERNORM4 not in ( '.')
1081451   + and
1081452   +_FILTERNORM5 not in ( '.')
1081453   + and
1081454   +_FILTERNORM6 not in ( '.')
1081455   + and
1081456   +_FILTERNORM7 not in ( ' ')
1081457   + and
1081458   +_FILTERNORM8 not in ( ' ')
1081459   +and
1081460   +( Dt_Customer ne .)
1081461   +and ( Income ne . and (Income<=107000))
1081462   +and ( Kidhome ne .)
1081463   +and ( MntFishProducts ne .)
1081464   +and ( MntFruits ne .)
1081465   +and ( MntGoldProds ne .)
1081466   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1081467   +and ( MntSweetProducts ne .)
1081468   +and ( MntWines ne .)
1081469   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1081470   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1081471   +and ( NumStorePurchases ne .)
1081472   +and ( NumWebPurchases ne .)
1081473   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1081474   +and ( Recency ne .)
1081475   +and ( Teenhome ne .)
1081476   +and ( Year_Birth ne .)
1081477   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1081478   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1081479   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1081480   +end;
MPRINT(EM_DIAGRAM):   end;
1081481   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1081482   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1081483    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1081484    quit;
1081485    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1081486    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1081487    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1081488    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1081489    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1081490    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081491    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1081492    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081493    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1081494    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1081495    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081496    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081497    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081498    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1081499    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1081500    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081501    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1081502    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1081503    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1081504    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081505    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081506    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1081507    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1081508    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1081509    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081510    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081511    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1081511  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1081512    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081513    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1081514    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 675 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081515    %macro varDept(fcmpdata=,id=);
1081516    %global nobs&id scoreFlag&id;
1081517    %let scoreFlag&id = 0;
1081518    %if &id=1 or ^&fcmpStart %then %do;
1081519    proc sort data=&fcmpdata out=_temp&id nodupkey;
1081520    by NAME;
1081521    where id=&id and LHS in( %let j=1;
1081522    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1081523    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1081524    "&var" %let j = %eval(&j+1);
1081525    %end;
1081526    );
1081527    run;
1081528    %let dsid = %sysfunc(open(_temp&id));
1081529    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1081530    %let dsid = %sysfunc(close(&dsid));
1081531    %if &&nobs&id %then %do;
1081532    %let scoreFlag&id = 1;
1081533    %let fcmpStart = 1;
1081534    %end;
1081535    %else %let fcmpStart = 0;
1081536    %end;
1081537    %else %do;
1081538    proc sort data=&fcmpdata out=_tempid;
1081539    where id=&id;
1081540    by LHS;
1081541    run;
1081542    %let dsid = %sysfunc(open(_tempid));
1081543    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1081544    %let dsid = %sysfunc(close(&dsid));
1081545    %if ^&&nobs&id %then %do;
1081546    proc datasets lib=work nolist;
1081547    delete _tempid;
1081548    run;
1081549    quit;
1081550    %end;
1081551    %else %do;
1081552    data _tempAll;
1081553    set %let j=%eval(&id-1);
1081554    %do x=1 %to &j;
1081555    %if &&nobs&x %then %do;
1081556    _temp&x %end;
1081557    %end;
1081558    ;
1081559    run;
1081560    proc sql;
1081561    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1081561  ! work._tempid p2 where p.name=p2.lhs;
1081562    quit;
1081563    data _temp&id;
1081564    set _temp&id;
1081565    where LHS ne '' and NAME ne '' and Node ne '';
1081566    run;
1081567    proc datasets lib=work nolist;
1081568    delete _tempAll;
1081569    run;
1081570    %let dsid = %sysfunc(open(_temp&id));
1081571    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1081572    %let dsid = %sysfunc(close(&dsid));
1081573    %if ^&&nobs&id %then %do;
1081574    proc datasets lib=work nolist;
1081575    delete _temp&id;
1081576    run;
1081577    quit;
1081578    %end;
1081579    %else %do;
1081580    %let scoreFlag&id = 1;
1081581    data _temp&id;
1081582    set _temp&id;
1081583    where LHS ne NAME and node ne '';
1081584    run;
1081585    %let dsid = %sysfunc(open(_temp&id));
1081586    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1081587    %let dsid = %sysfunc(close(&dsid));
1081588    %if ^&&nobs&id %then %do;
1081589    proc datasets lib=work nolist;
1081590    delete _temp&id;
1081591    run;
1081592    quit;
1081593    %end;
1081594    %else %do;
1081595    proc sort data=_temp&id nodupkey;
1081596    by LHS NAME;
1081597    run;
1081598    %end;
1081599    %end;
1081600    %end;
1081601    %end;
1081602    %mend varDept;
1081603    %macro optCode(outdata=fcmpdata);
1081604    %global fcmpStart;
1081605    %let fcmpStart = 0;
1081606    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1081607    %let NumNodes=9;
1081608    %do k=1 %to &NumNodes;
1081609    %vardept(fcmpdata=&outdata, id=&k);
1081610    %end;
1081611    %mend optCode;
1081612    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 75 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 54 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 21 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 21 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 24 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 61 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1081613    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1081614    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1081615    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1081616    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081617    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1081618    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1081619    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1081620    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081621    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081622    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1081622  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1081623    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081624    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1081625    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1081626    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081627    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1081628    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1081629    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1081630    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081631    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1081632    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1081633    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1081634    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081635    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1081636    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1081636  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1081637    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1081638    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1081639    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1081640    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1081641    filename _pref
1081641  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas";
1081642    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1081643    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural28\EMPUBLISHSCORE.sas.
1081644   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1081645   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1081646   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1081647   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1081648   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1081649   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1081650   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1081651   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1081652   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1081653   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1081654   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1081655   +LENGTH _WARN_ $4
1081656   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1081657   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1081658   +
1081659   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1081660   +
1081661   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1081662   +
1081663   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1081664   +
1081665   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1081666   +
1081667   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1081668   +
1081669   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1081670   +
1081671   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1081672   +
1081673   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1081674   +
1081675   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1081676   +
1081677   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1081678   +
1081679   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1081680   +
1081681   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1081682   +
1081683   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1081684   +
1081685   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1081686   +
1081687   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1081688   +
1081689   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1081690   +
1081691   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1081692   +
1081693   +      label H1x1_6 = 'Hidden: H1x1_=6' ;
MPRINT(EM_DIAGRAM):   label H1x1_6 = 'Hidden: H1x1_=6' ;
1081694   +
1081695   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1081696   +
1081697   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1081698   +
1081699   +      label H1x2_3 = 'Hidden: H1x2_=3' ;
MPRINT(EM_DIAGRAM):   label H1x2_3 = 'Hidden: H1x2_=3' ;
1081700   +
1081701   +      label H1x2_4 = 'Hidden: H1x2_=4' ;
MPRINT(EM_DIAGRAM):   label H1x2_4 = 'Hidden: H1x2_=4' ;
1081702   +
1081703   +      label H1x2_5 = 'Hidden: H1x2_=5' ;
MPRINT(EM_DIAGRAM):   label H1x2_5 = 'Hidden: H1x2_=5' ;
1081704   +
1081705   +      label H1x2_6 = 'Hidden: H1x2_=6' ;
MPRINT(EM_DIAGRAM):   label H1x2_6 = 'Hidden: H1x2_=6' ;
1081706   +
1081707   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1081708   +
1081709   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1081710   +
1081711   +      label H1x3_3 = 'Hidden: H1x3_=3' ;
MPRINT(EM_DIAGRAM):   label H1x3_3 = 'Hidden: H1x3_=3' ;
1081712   +
1081713   +      label H1x3_4 = 'Hidden: H1x3_=4' ;
MPRINT(EM_DIAGRAM):   label H1x3_4 = 'Hidden: H1x3_=4' ;
1081714   +
1081715   +      label H1x3_5 = 'Hidden: H1x3_=5' ;
MPRINT(EM_DIAGRAM):   label H1x3_5 = 'Hidden: H1x3_=5' ;
1081716   +
1081717   +      label H1x3_6 = 'Hidden: H1x3_=6' ;
MPRINT(EM_DIAGRAM):   label H1x3_6 = 'Hidden: H1x3_=6' ;
1081718   +
1081719   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1081720   +
1081721   +      label H1x4_2 = 'Hidden: H1x4_=2' ;
MPRINT(EM_DIAGRAM):   label H1x4_2 = 'Hidden: H1x4_=2' ;
1081722   +
1081723   +      label H1x4_3 = 'Hidden: H1x4_=3' ;
MPRINT(EM_DIAGRAM):   label H1x4_3 = 'Hidden: H1x4_=3' ;
1081724   +
1081725   +      label H1x4_4 = 'Hidden: H1x4_=4' ;
MPRINT(EM_DIAGRAM):   label H1x4_4 = 'Hidden: H1x4_=4' ;
1081726   +
1081727   +      label H1x4_5 = 'Hidden: H1x4_=5' ;
MPRINT(EM_DIAGRAM):   label H1x4_5 = 'Hidden: H1x4_=5' ;
1081728   +
1081729   +      label H1x4_6 = 'Hidden: H1x4_=6' ;
MPRINT(EM_DIAGRAM):   label H1x4_6 = 'Hidden: H1x4_=6' ;
1081730   +
1081731   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1081732   +
1081733   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1081734   +
1081735   +      label H2x1_3 = 'Hidden: H2x1_=3' ;
MPRINT(EM_DIAGRAM):   label H2x1_3 = 'Hidden: H2x1_=3' ;
1081736   +
1081737   +      label H2x1_4 = 'Hidden: H2x1_=4' ;
MPRINT(EM_DIAGRAM):   label H2x1_4 = 'Hidden: H2x1_=4' ;
1081738   +
1081739   +      label H2x1_5 = 'Hidden: H2x1_=5' ;
MPRINT(EM_DIAGRAM):   label H2x1_5 = 'Hidden: H2x1_=5' ;
1081740   +
1081741   +      label H2x1_6 = 'Hidden: H2x1_=6' ;
MPRINT(EM_DIAGRAM):   label H2x1_6 = 'Hidden: H2x1_=6' ;
1081742   +
1081743   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1081744   +
1081745   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1081746   +
1081747   +      label H2x2_3 = 'Hidden: H2x2_=3' ;
MPRINT(EM_DIAGRAM):   label H2x2_3 = 'Hidden: H2x2_=3' ;
1081748   +
1081749   +      label H2x2_4 = 'Hidden: H2x2_=4' ;
MPRINT(EM_DIAGRAM):   label H2x2_4 = 'Hidden: H2x2_=4' ;
1081750   +
1081751   +      label H2x2_5 = 'Hidden: H2x2_=5' ;
MPRINT(EM_DIAGRAM):   label H2x2_5 = 'Hidden: H2x2_=5' ;
1081752   +
1081753   +      label H2x2_6 = 'Hidden: H2x2_=6' ;
MPRINT(EM_DIAGRAM):   label H2x2_6 = 'Hidden: H2x2_=6' ;
1081754   +
1081755   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1081756   +
1081757   +      label H2x3_2 = 'Hidden: H2x3_=2' ;
MPRINT(EM_DIAGRAM):   label H2x3_2 = 'Hidden: H2x3_=2' ;
1081758   +
1081759   +      label H2x3_3 = 'Hidden: H2x3_=3' ;
MPRINT(EM_DIAGRAM):   label H2x3_3 = 'Hidden: H2x3_=3' ;
1081760   +
1081761   +      label H2x3_4 = 'Hidden: H2x3_=4' ;
MPRINT(EM_DIAGRAM):   label H2x3_4 = 'Hidden: H2x3_=4' ;
1081762   +
1081763   +      label H2x3_5 = 'Hidden: H2x3_=5' ;
MPRINT(EM_DIAGRAM):   label H2x3_5 = 'Hidden: H2x3_=5' ;
1081764   +
1081765   +      label H2x3_6 = 'Hidden: H2x3_=6' ;
MPRINT(EM_DIAGRAM):   label H2x3_6 = 'Hidden: H2x3_=6' ;
1081766   +
1081767   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1081768   +
1081769   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1081770   +
1081771   +      label H3x1_3 = 'Hidden: H3x1_=3' ;
MPRINT(EM_DIAGRAM):   label H3x1_3 = 'Hidden: H3x1_=3' ;
1081772   +
1081773   +      label H3x1_4 = 'Hidden: H3x1_=4' ;
MPRINT(EM_DIAGRAM):   label H3x1_4 = 'Hidden: H3x1_=4' ;
1081774   +
1081775   +      label H3x1_5 = 'Hidden: H3x1_=5' ;
MPRINT(EM_DIAGRAM):   label H3x1_5 = 'Hidden: H3x1_=5' ;
1081776   +
1081777   +      label H3x1_6 = 'Hidden: H3x1_=6' ;
MPRINT(EM_DIAGRAM):   label H3x1_6 = 'Hidden: H3x1_=6' ;
1081778   +
1081779   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1081780   +
1081781   +      label H3x2_2 = 'Hidden: H3x2_=2' ;
MPRINT(EM_DIAGRAM):   label H3x2_2 = 'Hidden: H3x2_=2' ;
1081782   +
1081783   +      label H3x2_3 = 'Hidden: H3x2_=3' ;
MPRINT(EM_DIAGRAM):   label H3x2_3 = 'Hidden: H3x2_=3' ;
1081784   +
1081785   +      label H3x2_4 = 'Hidden: H3x2_=4' ;
MPRINT(EM_DIAGRAM):   label H3x2_4 = 'Hidden: H3x2_=4' ;
1081786   +
1081787   +      label H3x2_5 = 'Hidden: H3x2_=5' ;
MPRINT(EM_DIAGRAM):   label H3x2_5 = 'Hidden: H3x2_=5' ;
1081788   +
1081789   +      label H3x2_6 = 'Hidden: H3x2_=6' ;
MPRINT(EM_DIAGRAM):   label H3x2_6 = 'Hidden: H3x2_=6' ;
1081790   +
1081791   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1081792   +
1081793   +      label H4x1_2 = 'Hidden: H4x1_=2' ;
MPRINT(EM_DIAGRAM):   label H4x1_2 = 'Hidden: H4x1_=2' ;
1081794   +
1081795   +      label H4x1_3 = 'Hidden: H4x1_=3' ;
MPRINT(EM_DIAGRAM):   label H4x1_3 = 'Hidden: H4x1_=3' ;
1081796   +
1081797   +      label H4x1_4 = 'Hidden: H4x1_=4' ;
MPRINT(EM_DIAGRAM):   label H4x1_4 = 'Hidden: H4x1_=4' ;
1081798   +
1081799   +      label H4x1_5 = 'Hidden: H4x1_=5' ;
MPRINT(EM_DIAGRAM):   label H4x1_5 = 'Hidden: H4x1_=5' ;
1081800   +
1081801   +      label H4x1_6 = 'Hidden: H4x1_=6' ;
MPRINT(EM_DIAGRAM):   label H4x1_6 = 'Hidden: H4x1_=6' ;
1081802   +
1081803   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1081804   +
1081805   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1081806   +
1081807   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1081808   +
1081809   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1081810   +
1081811   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1081812   +
1081813   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1081814   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1081815   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1081816   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1081817   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1081818   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1081819   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1081820   +end;
MPRINT(EM_DIAGRAM):   end;
1081821   +else do;
MPRINT(EM_DIAGRAM):   else do;
1081822   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1081823   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1081824   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1081825   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1081826   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1081827   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1081828   +   end;
MPRINT(EM_DIAGRAM):   end;
1081829   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1081830   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1081831   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1081832   +   end;
MPRINT(EM_DIAGRAM):   end;
1081833   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1081834   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1081835   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1081836   +   end;
MPRINT(EM_DIAGRAM):   end;
1081837   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1081838   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1081839   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1081840   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1081841   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1081842   +   end;
MPRINT(EM_DIAGRAM):   end;
1081843   +end;
MPRINT(EM_DIAGRAM):   end;
1081844   +
1081845   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081846   +*** Checking missing input Interval
1081847   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1081848   +
1081849   +IF NMISS(
1081850   +   AcceptedCmpTotal ,
1081851   +   Frq ,
1081852   +   Income ,
1081853   +   Mnt ,
1081854   +   MntGoldProds ,
1081855   +   MntMeatProducts ,
1081856   +   MntWines ,
1081857   +   NumDistPurchases ,
1081858   +   RFMstat ,
1081859   +   RMntFrq ,
1081860   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1081861   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1081862   +
1081863   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1081864   +END;
MPRINT(EM_DIAGRAM):   END;
1081865   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081866   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1081867   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081868   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1081869   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1081870   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1081871   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1081872   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1081873   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1081874   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1081875   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1081876   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1081877   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1081878   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1081879   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1081880   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1081881   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1081882   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1081883   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1081884   +END;
MPRINT(EM_DIAGRAM):   END;
1081885   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1081886   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1081887   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1081888   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1081889   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1081890   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1081891   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1081892   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1081893   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1081894   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1081895   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1081896   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1081897   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1081898   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1081899   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1081900   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1081901   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1081902   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1081903   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1081904   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1081905   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1081906   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1081907   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1081908   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1081909   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1081910   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1081911   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1081912   +END;
MPRINT(EM_DIAGRAM):   END;
1081913   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081914   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1081915   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081916   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081917   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1081918   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1081919   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1081920   +   H1x1_1  =     3.15417213555791 * S_AcceptedCmpTotal
1081921   +          +    -2.48200966202064 * S_Frq  +     1.79801309624052 * S_Income
1081922   +          +    -1.96453924225923 * S_Mnt  +    -0.73447750078211 *
1081923   +        S_MntGoldProds  +    -1.52540613833145 * S_MntMeatProducts
1081924   +          +    -2.34651136428537 * S_MntWines  +     1.78713249203795 *
1081925   +        S_NumDistPurchases  +    -1.89877446252459 * S_RFMstat
1081926   +          +     0.40523847190984 * S_RMntFrq  +    -5.00157954960261 *
1081927   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 3.15417213555791 * S_AcceptedCmpTotal + -2.48200966202064 *
S_Frq + 1.79801309624052 * S_Income + -1.96453924225923 * S_Mnt + -0.73447750078211 *
S_MntGoldProds + -1.52540613833145 * S_MntMeatProducts + -2.34651136428537 * S_MntWines +
1.78713249203795 * S_NumDistPurchases + -1.89877446252459 * S_RFMstat + 0.40523847190984 *
S_RMntFrq + -5.00157954960261 * S_Recency ;
1081928   +   H1x1_2  =     -0.4296332791258 * S_AcceptedCmpTotal
1081929   +          +     1.69454720747031 * S_Frq  +     0.65291994437462 * S_Income
1081930   +          +     4.94289741649285 * S_Mnt  +    -0.74724168333375 *
1081931   +        S_MntGoldProds  +    -4.37885511745275 * S_MntMeatProducts
1081932   +          +    -0.79918604028406 * S_MntWines  +    -2.55554908870931 *
1081933   +        S_NumDistPurchases  +      -0.357509020401 * S_RFMstat
1081934   +          +     2.81206015252461 * S_RMntFrq  +       0.376849190211 *
1081935   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.4296332791258 * S_AcceptedCmpTotal + 1.69454720747031 *
S_Frq + 0.65291994437462 * S_Income + 4.94289741649285 * S_Mnt + -0.74724168333375 *
S_MntGoldProds + -4.37885511745275 * S_MntMeatProducts + -0.79918604028406 * S_MntWines +
-2.55554908870931 * S_NumDistPurchases + -0.357509020401 * S_RFMstat + 2.81206015252461 *
S_RMntFrq + 0.376849190211 * S_Recency ;
1081936   +   H1x1_3  =     0.22275326994217 * S_AcceptedCmpTotal
1081937   +          +     1.30327962429821 * S_Frq  +     8.11675617892245 * S_Income
1081938   +          +     1.26763916951276 * S_Mnt  +     -0.2686825897259 *
1081939   +        S_MntGoldProds  +    -1.42114074651211 * S_MntMeatProducts
1081940   +          +    -1.76821642666458 * S_MntWines  +    -1.91323522505912 *
1081941   +        S_NumDistPurchases  +    -0.12369288380556 * S_RFMstat
1081942   +          +     -0.5961110037328 * S_RMntFrq  +     1.45489277444882 *
1081943   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.22275326994217 * S_AcceptedCmpTotal + 1.30327962429821 *
S_Frq + 8.11675617892245 * S_Income + 1.26763916951276 * S_Mnt + -0.2686825897259 *
S_MntGoldProds + -1.42114074651211 * S_MntMeatProducts + -1.76821642666458 * S_MntWines +
-1.91323522505912 * S_NumDistPurchases + -0.12369288380556 * S_RFMstat + -0.5961110037328 *
S_RMntFrq + 1.45489277444882 * S_Recency ;
1081944   +   H1x1_4  =     0.65694888778783 * S_AcceptedCmpTotal
1081945   +          +    -2.46645772884275 * S_Frq  +     2.56090496460471 * S_Income
1081946   +          +     1.47469720902355 * S_Mnt  +    -0.23044042020952 *
1081947   +        S_MntGoldProds  +     1.09436190473143 * S_MntMeatProducts
1081948   +          +    -0.07872477007968 * S_MntWines  +     2.35913880285028 *
1081949   +        S_NumDistPurchases  +     0.36553596420262 * S_RFMstat
1081950   +          +    -1.52014700293876 * S_RMntFrq  +    -1.62001903467763 *
1081951   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.65694888778783 * S_AcceptedCmpTotal + -2.46645772884275 *
S_Frq + 2.56090496460471 * S_Income + 1.47469720902355 * S_Mnt + -0.23044042020952 *
S_MntGoldProds + 1.09436190473143 * S_MntMeatProducts + -0.07872477007968 * S_MntWines +
2.35913880285028 * S_NumDistPurchases + 0.36553596420262 * S_RFMstat + -1.52014700293876 *
S_RMntFrq + -1.62001903467763 * S_Recency ;
1081952   +   H1x1_5  =    -0.06045586654134 * S_AcceptedCmpTotal
1081953   +          +    -1.51896554067022 * S_Frq  +    -0.77690899609172 * S_Income
1081954   +          +    -3.83443076797312 * S_Mnt  +    -0.49066287190692 *
1081955   +        S_MntGoldProds  +     7.74304126889741 * S_MntMeatProducts
1081956   +          +     0.97717560040665 * S_MntWines  +     2.55833904797689 *
1081957   +        S_NumDistPurchases  +     3.33552253786577 * S_RFMstat
1081958   +          +     2.15128325510301 * S_RMntFrq  +     0.51475149451235 *
1081959   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.06045586654134 * S_AcceptedCmpTotal + -1.51896554067022 *
S_Frq + -0.77690899609172 * S_Income + -3.83443076797312 * S_Mnt + -0.49066287190692 *
S_MntGoldProds + 7.74304126889741 * S_MntMeatProducts + 0.97717560040665 * S_MntWines +
2.55833904797689 * S_NumDistPurchases + 3.33552253786577 * S_RFMstat + 2.15128325510301 *
S_RMntFrq + 0.51475149451235 * S_Recency ;
1081960   +   H1x1_6  =    -2.00102225492393 * S_AcceptedCmpTotal
1081961   +          +    -0.55313430858805 * S_Frq  +    -2.80039880440251 * S_Income
1081962   +          +    -0.52613628819852 * S_Mnt  +    -1.25580169134654 *
1081963   +        S_MntGoldProds  +    -1.44511464402737 * S_MntMeatProducts
1081964   +          +    -0.66744558284147 * S_MntWines  +     3.15612301024597 *
1081965   +        S_NumDistPurchases  +    -0.57805918326136 * S_RFMstat
1081966   +          +     0.13349014037678 * S_RMntFrq  +    -1.97053621157132 *
1081967   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_6 = -2.00102225492393 * S_AcceptedCmpTotal + -0.55313430858805 *
S_Frq + -2.80039880440251 * S_Income + -0.52613628819852 * S_Mnt + -1.25580169134654 *
S_MntGoldProds + -1.44511464402737 * S_MntMeatProducts + -0.66744558284147 * S_MntWines +
3.15612301024597 * S_NumDistPurchases + -0.57805918326136 * S_RFMstat + 0.13349014037678 *
S_RMntFrq + -1.97053621157132 * S_Recency ;
1081968   +   H1x1_1  = H1x1_1  +     1.38825657874217 * G_Marital_Status0
1081969   +          +     0.90195662603521 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 1.38825657874217 * G_Marital_Status0 +
0.90195662603521 * G_Marital_Status1 ;
1081970   +   H1x1_2  = H1x1_2  +     0.88138395159348 * G_Marital_Status0
1081971   +          +    -0.49019446056296 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.88138395159348 * G_Marital_Status0 +
-0.49019446056296 * G_Marital_Status1 ;
1081972   +   H1x1_3  = H1x1_3  +     0.30990330359421 * G_Marital_Status0
1081973   +          +     1.10544938214372 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.30990330359421 * G_Marital_Status0 +
1.10544938214372 * G_Marital_Status1 ;
1081974   +   H1x1_4  = H1x1_4  +     1.70251598227875 * G_Marital_Status0
1081975   +          +     0.87683669160259 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + 1.70251598227875 * G_Marital_Status0 +
0.87683669160259 * G_Marital_Status1 ;
1081976   +   H1x1_5  = H1x1_5  +    -0.14678805736317 * G_Marital_Status0
1081977   +          +    -0.13246180955576 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.14678805736317 * G_Marital_Status0 +
-0.13246180955576 * G_Marital_Status1 ;
1081978   +   H1x1_6  = H1x1_6  +     -0.6511155024316 * G_Marital_Status0
1081979   +          +     0.24707257141342 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = H1x1_6 + -0.6511155024316 * G_Marital_Status0 +
0.24707257141342 * G_Marital_Status1 ;
1081980   +   H1x1_1  =     4.82277728923766 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 4.82277728923766 + H1x1_1 ;
1081981   +   H1x1_2  =     2.49777705822347 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 2.49777705822347 + H1x1_2 ;
1081982   +   H1x1_3  =    -0.93289135595041 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.93289135595041 + H1x1_3 ;
1081983   +   H1x1_4  =    -7.80421802944398 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -7.80421802944398 + H1x1_4 ;
1081984   +   H1x1_5  =     6.46115064589724 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 6.46115064589724 + H1x1_5 ;
1081985   +   H1x1_6  =     3.21096596966888 + H1x1_6 ;
MPRINT(EM_DIAGRAM):   H1x1_6 = 3.21096596966888 + H1x1_6 ;
1081986   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1081987   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1081988   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1081989   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1081990   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1081991   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1081992   +   H1x1_5  = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_5 = 1.0 / (1.0 + EXP(MIN( - H1x1_5 , _EXP_BAR)));
1081993   +   H1x1_6  = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_6 = 1.0 / (1.0 + EXP(MIN( - H1x1_6 , _EXP_BAR)));
1081994   +END;
MPRINT(EM_DIAGRAM):   END;
1081995   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1081996   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1081997   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1081998   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1081999   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1082000   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1082001   +   H1x1_6  = .;
MPRINT(EM_DIAGRAM):   H1x1_6 = .;
1082002   +END;
MPRINT(EM_DIAGRAM):   END;
1082003   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082004   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1082005   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082006   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082007   +   H1x2_1  =    -0.30711239275958 * S_AcceptedCmpTotal
1082008   +          +    -1.45395291114633 * S_Frq  +     0.87594950917085 * S_Income
1082009   +          +    -0.72639274085105 * S_Mnt  +    -2.47797355837112 *
1082010   +        S_MntGoldProds  +     0.68384082088335 * S_MntMeatProducts
1082011   +          +     0.65600644755641 * S_MntWines  +      0.8163360453447 *
1082012   +        S_NumDistPurchases  +    -1.09587924440912 * S_RFMstat
1082013   +          +     1.48347762248449 * S_RMntFrq  +      0.2335216261547 *
1082014   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.30711239275958 * S_AcceptedCmpTotal + -1.45395291114633 *
S_Frq + 0.87594950917085 * S_Income + -0.72639274085105 * S_Mnt + -2.47797355837112 *
S_MntGoldProds + 0.68384082088335 * S_MntMeatProducts + 0.65600644755641 * S_MntWines +
0.8163360453447 * S_NumDistPurchases + -1.09587924440912 * S_RFMstat + 1.48347762248449 *
S_RMntFrq + 0.2335216261547 * S_Recency ;
1082015   +   H1x2_2  =     2.57777770372275 * S_AcceptedCmpTotal
1082016   +          +    -0.08699050003337 * S_Frq  +      0.9048262025585 * S_Income
1082017   +          +     0.80716409242733 * S_Mnt  +     0.92862088643502 *
1082018   +        S_MntGoldProds  +     1.28722996014956 * S_MntMeatProducts
1082019   +          +    -0.78107065942411 * S_MntWines  +     2.29787925805392 *
1082020   +        S_NumDistPurchases  +     -0.7095984076797 * S_RFMstat
1082021   +          +    -0.75276407747323 * S_RMntFrq  +    -2.14859674388241 *
1082022   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 2.57777770372275 * S_AcceptedCmpTotal + -0.08699050003337 *
S_Frq + 0.9048262025585 * S_Income + 0.80716409242733 * S_Mnt + 0.92862088643502 *
S_MntGoldProds + 1.28722996014956 * S_MntMeatProducts + -0.78107065942411 * S_MntWines +
2.29787925805392 * S_NumDistPurchases + -0.7095984076797 * S_RFMstat + -0.75276407747323 *
S_RMntFrq + -2.14859674388241 * S_Recency ;
1082023   +   H1x2_3  =    -0.19225474668372 * S_AcceptedCmpTotal
1082024   +          +     -0.5399776824486 * S_Frq  +    -0.33342356858106 * S_Income
1082025   +          +      0.4662552460972 * S_Mnt  +    -0.83897697999245 *
1082026   +        S_MntGoldProds  +    -1.02069791829975 * S_MntMeatProducts
1082027   +          +    -0.77568646594215 * S_MntWines  +    -2.64172584610703 *
1082028   +        S_NumDistPurchases  +     1.22587043380457 * S_RFMstat
1082029   +          +    -1.22124295004478 * S_RMntFrq  +     0.72727673065668 *
1082030   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_3 = -0.19225474668372 * S_AcceptedCmpTotal + -0.5399776824486 *
S_Frq + -0.33342356858106 * S_Income + 0.4662552460972 * S_Mnt + -0.83897697999245 *
S_MntGoldProds + -1.02069791829975 * S_MntMeatProducts + -0.77568646594215 * S_MntWines +
-2.64172584610703 * S_NumDistPurchases + 1.22587043380457 * S_RFMstat + -1.22124295004478 *
S_RMntFrq + 0.72727673065668 * S_Recency ;
1082031   +   H1x2_4  =     1.07963833884217 * S_AcceptedCmpTotal
1082032   +          +    -1.30033554705908 * S_Frq  +     0.80740030463615 * S_Income
1082033   +          +    -1.73808129607223 * S_Mnt  +     1.21346647777818 *
1082034   +        S_MntGoldProds  +     0.69007605858806 * S_MntMeatProducts
1082035   +          +     0.31548401471349 * S_MntWines  +    -0.45355998387313 *
1082036   +        S_NumDistPurchases  +     1.13504256910361 * S_RFMstat
1082037   +          +    -0.45561637629388 * S_RMntFrq  +    -1.42094697023704 *
1082038   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.07963833884217 * S_AcceptedCmpTotal + -1.30033554705908 *
S_Frq + 0.80740030463615 * S_Income + -1.73808129607223 * S_Mnt + 1.21346647777818 *
S_MntGoldProds + 0.69007605858806 * S_MntMeatProducts + 0.31548401471349 * S_MntWines +
-0.45355998387313 * S_NumDistPurchases + 1.13504256910361 * S_RFMstat + -0.45561637629388 *
S_RMntFrq + -1.42094697023704 * S_Recency ;
1082039   +   H1x2_5  =     0.30163018627699 * S_AcceptedCmpTotal
1082040   +          +    -0.73947459722676 * S_Frq  +      0.3117229426353 * S_Income
1082041   +          +     1.78189396082002 * S_Mnt  +    -1.51478593904163 *
1082042   +        S_MntGoldProds  +    -1.30328540691967 * S_MntMeatProducts
1082043   +          +     0.48947220852953 * S_MntWines  +     0.25380878841531 *
1082044   +        S_NumDistPurchases  +    -0.09429027402746 * S_RFMstat
1082045   +          +     2.79720421337828 * S_RMntFrq  +    -0.08024855242737 *
1082046   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_5 = 0.30163018627699 * S_AcceptedCmpTotal + -0.73947459722676 *
S_Frq + 0.3117229426353 * S_Income + 1.78189396082002 * S_Mnt + -1.51478593904163 *
S_MntGoldProds + -1.30328540691967 * S_MntMeatProducts + 0.48947220852953 * S_MntWines +
0.25380878841531 * S_NumDistPurchases + -0.09429027402746 * S_RFMstat + 2.79720421337828 *
S_RMntFrq + -0.08024855242737 * S_Recency ;
1082047   +   H1x2_6  =    -0.05006047355159 * S_AcceptedCmpTotal
1082048   +          +     0.01838632143297 * S_Frq  +    -1.04892137940395 * S_Income
1082049   +          +    -0.33949418476309 * S_Mnt  +     1.27820886482898 *
1082050   +        S_MntGoldProds  +      0.1541042926193 * S_MntMeatProducts
1082051   +          +    -0.30996391960135 * S_MntWines  +     0.69532310497927 *
1082052   +        S_NumDistPurchases  +    -0.51247610421467 * S_RFMstat
1082053   +          +    -0.87640728095011 * S_RMntFrq  +     1.79661996586627 *
1082054   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -0.05006047355159 * S_AcceptedCmpTotal + 0.01838632143297 *
S_Frq + -1.04892137940395 * S_Income + -0.33949418476309 * S_Mnt + 1.27820886482898 *
S_MntGoldProds + 0.1541042926193 * S_MntMeatProducts + -0.30996391960135 * S_MntWines +
0.69532310497927 * S_NumDistPurchases + -0.51247610421467 * S_RFMstat + -0.87640728095011 *
S_RMntFrq + 1.79661996586627 * S_Recency ;
1082055   +   H1x2_1  = H1x2_1  +    -1.52372947412233 * G_Marital_Status0
1082056   +          +     0.61190614442174 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -1.52372947412233 * G_Marital_Status0 +
0.61190614442174 * G_Marital_Status1 ;
1082057   +   H1x2_2  = H1x2_2  +     -0.2899112326334 * G_Marital_Status0
1082058   +          +    -0.43943770039245 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + -0.2899112326334 * G_Marital_Status0 +
-0.43943770039245 * G_Marital_Status1 ;
1082059   +   H1x2_3  = H1x2_3  +    -1.30447843367338 * G_Marital_Status0
1082060   +          +     0.36969296112687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = H1x2_3 + -1.30447843367338 * G_Marital_Status0 +
0.36969296112687 * G_Marital_Status1 ;
1082061   +   H1x2_4  = H1x2_4  +     1.06192432928756 * G_Marital_Status0
1082062   +          +    -0.48897798100871 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = H1x2_4 + 1.06192432928756 * G_Marital_Status0 +
-0.48897798100871 * G_Marital_Status1 ;
1082063   +   H1x2_5  = H1x2_5  +     1.24023950705702 * G_Marital_Status0
1082064   +          +     -0.0768652239427 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = H1x2_5 + 1.24023950705702 * G_Marital_Status0 +
-0.0768652239427 * G_Marital_Status1 ;
1082065   +   H1x2_6  = H1x2_6  +    -0.79854804689099 * G_Marital_Status0
1082066   +          +    -0.58590001312977 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = H1x2_6 + -0.79854804689099 * G_Marital_Status0 +
-0.58590001312977 * G_Marital_Status1 ;
1082067   +   H1x2_1  =    -1.24057312487712 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.24057312487712 + H1x2_1 ;
1082068   +   H1x2_2  =    -0.68291139361923 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.68291139361923 + H1x2_2 ;
1082069   +   H1x2_3  =     1.06420344729961 + H1x2_3 ;
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.06420344729961 + H1x2_3 ;
1082070   +   H1x2_4  =    -2.69713708678823 + H1x2_4 ;
MPRINT(EM_DIAGRAM):   H1x2_4 = -2.69713708678823 + H1x2_4 ;
1082071   +   H1x2_5  =    -0.12447063994137 + H1x2_5 ;
MPRINT(EM_DIAGRAM):   H1x2_5 = -0.12447063994137 + H1x2_5 ;
1082072   +   H1x2_6  =     -1.0719988986801 + H1x2_6 ;
MPRINT(EM_DIAGRAM):   H1x2_6 = -1.0719988986801 + H1x2_6 ;
1082073   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1082074   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1082075   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1082076   +   H1x2_2  = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
1082077   +   H1x2_3  = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_3 = 1.0 / (1.0 + EXP(MIN( - H1x2_3 , _EXP_BAR)));
1082078   +   H1x2_4  = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_4 = 1.0 / (1.0 + EXP(MIN( - H1x2_4 , _EXP_BAR)));
1082079   +   H1x2_5  = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_5 = 1.0 / (1.0 + EXP(MIN( - H1x2_5 , _EXP_BAR)));
1082080   +   H1x2_6  = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_6 = 1.0 / (1.0 + EXP(MIN( - H1x2_6 , _EXP_BAR)));
1082081   +END;
MPRINT(EM_DIAGRAM):   END;
1082082   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082083   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1082084   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1082085   +   H1x2_3  = .;
MPRINT(EM_DIAGRAM):   H1x2_3 = .;
1082086   +   H1x2_4  = .;
MPRINT(EM_DIAGRAM):   H1x2_4 = .;
1082087   +   H1x2_5  = .;
MPRINT(EM_DIAGRAM):   H1x2_5 = .;
1082088   +   H1x2_6  = .;
MPRINT(EM_DIAGRAM):   H1x2_6 = .;
1082089   +END;
MPRINT(EM_DIAGRAM):   END;
1082090   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082091   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1082092   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082093   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082094   +   H1x3_1  =     0.58141896766328 * S_AcceptedCmpTotal
1082095   +          +     0.88835106317195 * S_Frq  +     1.03397412242189 * S_Income
1082096   +          +    -0.19511498332885 * S_Mnt  +     0.79222351582255 *
1082097   +        S_MntGoldProds  +     1.84666352042484 * S_MntMeatProducts
1082098   +          +     0.26439819900146 * S_MntWines  +    -0.49316136014272 *
1082099   +        S_NumDistPurchases  +    -1.53931690693652 * S_RFMstat
1082100   +          +     0.66163259224518 * S_RMntFrq  +    -0.05038100966606 *
1082101   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.58141896766328 * S_AcceptedCmpTotal + 0.88835106317195 *
S_Frq + 1.03397412242189 * S_Income + -0.19511498332885 * S_Mnt + 0.79222351582255 *
S_MntGoldProds + 1.84666352042484 * S_MntMeatProducts + 0.26439819900146 * S_MntWines +
-0.49316136014272 * S_NumDistPurchases + -1.53931690693652 * S_RFMstat + 0.66163259224518 *
S_RMntFrq + -0.05038100966606 * S_Recency ;
1082102   +   H1x3_2  =    -0.66965742898236 * S_AcceptedCmpTotal
1082103   +          +     0.11439761295336 * S_Frq  +      0.4311111590428 * S_Income
1082104   +          +     0.56419594384106 * S_Mnt  +    -2.58586026844722 *
1082105   +        S_MntGoldProds  +     0.84843617907069 * S_MntMeatProducts
1082106   +          +    -0.40949465894409 * S_MntWines  +    -1.12254199224924 *
1082107   +        S_NumDistPurchases  +    -1.73672932018459 * S_RFMstat
1082108   +          +     0.60800652848154 * S_RMntFrq  +     0.90023461529092 *
1082109   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.66965742898236 * S_AcceptedCmpTotal + 0.11439761295336 *
S_Frq + 0.4311111590428 * S_Income + 0.56419594384106 * S_Mnt + -2.58586026844722 *
S_MntGoldProds + 0.84843617907069 * S_MntMeatProducts + -0.40949465894409 * S_MntWines +
-1.12254199224924 * S_NumDistPurchases + -1.73672932018459 * S_RFMstat + 0.60800652848154 *
S_RMntFrq + 0.90023461529092 * S_Recency ;
1082110   +   H1x3_3  =     0.64116254904887 * S_AcceptedCmpTotal
1082111   +          +     0.36521168161033 * S_Frq  +    -1.65592742965949 * S_Income
1082112   +          +    -1.13010637801203 * S_Mnt  +     1.18435160743823 *
1082113   +        S_MntGoldProds  +     0.61014939723339 * S_MntMeatProducts
1082114   +          +     0.57967362971329 * S_MntWines  +    -0.00705774722842 *
1082115   +        S_NumDistPurchases  +    -0.09732595050305 * S_RFMstat
1082116   +          +    -1.58268748567816 * S_RMntFrq  +    -1.00117301133743 *
1082117   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 0.64116254904887 * S_AcceptedCmpTotal + 0.36521168161033 *
S_Frq + -1.65592742965949 * S_Income + -1.13010637801203 * S_Mnt + 1.18435160743823 *
S_MntGoldProds + 0.61014939723339 * S_MntMeatProducts + 0.57967362971329 * S_MntWines +
-0.00705774722842 * S_NumDistPurchases + -0.09732595050305 * S_RFMstat + -1.58268748567816 *
S_RMntFrq + -1.00117301133743 * S_Recency ;
1082118   +   H1x3_4  =    -2.38943135123073 * S_AcceptedCmpTotal
1082119   +          +     0.50616478854457 * S_Frq  +     1.68985840818789 * S_Income
1082120   +          +    -0.51011802824515 * S_Mnt  +     1.25167622017055 *
1082121   +        S_MntGoldProds  +    -0.78430871718616 * S_MntMeatProducts
1082122   +          +     0.97685472578698 * S_MntWines  +    -0.66992601103029 *
1082123   +        S_NumDistPurchases  +    -0.28545877583545 * S_RFMstat
1082124   +          +     0.52712575990538 * S_RMntFrq  +     1.51096273676103 *
1082125   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_4 = -2.38943135123073 * S_AcceptedCmpTotal + 0.50616478854457 *
S_Frq + 1.68985840818789 * S_Income + -0.51011802824515 * S_Mnt + 1.25167622017055 *
S_MntGoldProds + -0.78430871718616 * S_MntMeatProducts + 0.97685472578698 * S_MntWines +
-0.66992601103029 * S_NumDistPurchases + -0.28545877583545 * S_RFMstat + 0.52712575990538 *
S_RMntFrq + 1.51096273676103 * S_Recency ;
1082126   +   H1x3_5  =     0.27293739636898 * S_AcceptedCmpTotal
1082127   +          +     0.44515009768765 * S_Frq  +     -0.4521347788574 * S_Income
1082128   +          +     0.43943223859703 * S_Mnt  +     1.17781847894182 *
1082129   +        S_MntGoldProds  +    -0.67700757595581 * S_MntMeatProducts
1082130   +          +    -1.46437355846341 * S_MntWines  +    -0.09365592083561 *
1082131   +        S_NumDistPurchases  +     0.94926901433762 * S_RFMstat
1082132   +          +     2.40216905424957 * S_RMntFrq  +     0.65859109347516 *
1082133   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.27293739636898 * S_AcceptedCmpTotal + 0.44515009768765 *
S_Frq + -0.4521347788574 * S_Income + 0.43943223859703 * S_Mnt + 1.17781847894182 *
S_MntGoldProds + -0.67700757595581 * S_MntMeatProducts + -1.46437355846341 * S_MntWines +
-0.09365592083561 * S_NumDistPurchases + 0.94926901433762 * S_RFMstat + 2.40216905424957 *
S_RMntFrq + 0.65859109347516 * S_Recency ;
1082134   +   H1x3_6  =     0.79944121174459 * S_AcceptedCmpTotal
1082135   +          +     0.19594924011495 * S_Frq  +     1.07233338144708 * S_Income
1082136   +          +    -0.39577530492174 * S_Mnt  +    -0.18122578134776 *
1082137   +        S_MntGoldProds  +    -0.26451891721245 * S_MntMeatProducts
1082138   +          +    -0.86856724355925 * S_MntWines  +    -1.81909916765471 *
1082139   +        S_NumDistPurchases  +     1.03983663011092 * S_RFMstat
1082140   +          +    -0.86768378180894 * S_RMntFrq  +     0.40747604583851 *
1082141   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.79944121174459 * S_AcceptedCmpTotal + 0.19594924011495 *
S_Frq + 1.07233338144708 * S_Income + -0.39577530492174 * S_Mnt + -0.18122578134776 *
S_MntGoldProds + -0.26451891721245 * S_MntMeatProducts + -0.86856724355925 * S_MntWines +
-1.81909916765471 * S_NumDistPurchases + 1.03983663011092 * S_RFMstat + -0.86768378180894 *
S_RMntFrq + 0.40747604583851 * S_Recency ;
1082142   +   H1x3_1  = H1x3_1  +    -1.44819834546359 * G_Marital_Status0
1082143   +          +     2.03049158937708 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -1.44819834546359 * G_Marital_Status0 +
2.03049158937708 * G_Marital_Status1 ;
1082144   +   H1x3_2  = H1x3_2  +     0.32142977922032 * G_Marital_Status0
1082145   +          +     0.95456795317325 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + 0.32142977922032 * G_Marital_Status0 +
0.95456795317325 * G_Marital_Status1 ;
1082146   +   H1x3_3  = H1x3_3  +    -0.05546140673943 * G_Marital_Status0
1082147   +          +    -0.64267205173982 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = H1x3_3 + -0.05546140673943 * G_Marital_Status0 +
-0.64267205173982 * G_Marital_Status1 ;
1082148   +   H1x3_4  = H1x3_4  +     0.67758459902812 * G_Marital_Status0
1082149   +          +    -0.13878277097624 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = H1x3_4 + 0.67758459902812 * G_Marital_Status0 +
-0.13878277097624 * G_Marital_Status1 ;
1082150   +   H1x3_5  = H1x3_5  +      0.2080585980069 * G_Marital_Status0
1082151   +          +     0.39530416624983 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = H1x3_5 + 0.2080585980069 * G_Marital_Status0 + 0.39530416624983
* G_Marital_Status1 ;
1082152   +   H1x3_6  = H1x3_6  +    -0.56268194068278 * G_Marital_Status0
1082153   +          +    -1.38939757582535 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = H1x3_6 + -0.56268194068278 * G_Marital_Status0 +
-1.38939757582535 * G_Marital_Status1 ;
1082154   +   H1x3_1  =    -0.02110450300917 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.02110450300917 + H1x3_1 ;
1082155   +   H1x3_2  =     0.68400964836412 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = 0.68400964836412 + H1x3_2 ;
1082156   +   H1x3_3  =     1.27295692924548 + H1x3_3 ;
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.27295692924548 + H1x3_3 ;
1082157   +   H1x3_4  =     0.57759340173339 + H1x3_4 ;
MPRINT(EM_DIAGRAM):   H1x3_4 = 0.57759340173339 + H1x3_4 ;
1082158   +   H1x3_5  =     0.68658947855937 + H1x3_5 ;
MPRINT(EM_DIAGRAM):   H1x3_5 = 0.68658947855937 + H1x3_5 ;
1082159   +   H1x3_6  =     0.96960260915788 + H1x3_6 ;
MPRINT(EM_DIAGRAM):   H1x3_6 = 0.96960260915788 + H1x3_6 ;
1082160   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1082161   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1082162   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1082163   +   H1x3_2  = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_2 = 1.0 / (1.0 + EXP(MIN( - H1x3_2 , _EXP_BAR)));
1082164   +   H1x3_3  = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_3 = 1.0 / (1.0 + EXP(MIN( - H1x3_3 , _EXP_BAR)));
1082165   +   H1x3_4  = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_4 = 1.0 / (1.0 + EXP(MIN( - H1x3_4 , _EXP_BAR)));
1082166   +   H1x3_5  = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_5 = 1.0 / (1.0 + EXP(MIN( - H1x3_5 , _EXP_BAR)));
1082167   +   H1x3_6  = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_6 = 1.0 / (1.0 + EXP(MIN( - H1x3_6 , _EXP_BAR)));
1082168   +END;
MPRINT(EM_DIAGRAM):   END;
1082169   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082170   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1082171   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1082172   +   H1x3_3  = .;
MPRINT(EM_DIAGRAM):   H1x3_3 = .;
1082173   +   H1x3_4  = .;
MPRINT(EM_DIAGRAM):   H1x3_4 = .;
1082174   +   H1x3_5  = .;
MPRINT(EM_DIAGRAM):   H1x3_5 = .;
1082175   +   H1x3_6  = .;
MPRINT(EM_DIAGRAM):   H1x3_6 = .;
1082176   +END;
MPRINT(EM_DIAGRAM):   END;
1082177   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082178   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1082179   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082180   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082181   +   H1x4_1  =     1.13261766886471 * S_AcceptedCmpTotal
1082182   +          +     0.78824304763496 * S_Frq  +    -1.86817100110189 * S_Income
1082183   +          +    -1.58760227599089 * S_Mnt  +     -1.1330886213304 *
1082184   +        S_MntGoldProds  +     0.82082069255126 * S_MntMeatProducts
1082185   +          +    -0.34149449572975 * S_MntWines  +     0.45944109671738 *
1082186   +        S_NumDistPurchases  +     2.00910621486809 * S_RFMstat
1082187   +          +     -1.8305685414059 * S_RMntFrq  +     1.46038466341548 *
1082188   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.13261766886471 * S_AcceptedCmpTotal + 0.78824304763496 *
S_Frq + -1.86817100110189 * S_Income + -1.58760227599089 * S_Mnt + -1.1330886213304 *
S_MntGoldProds + 0.82082069255126 * S_MntMeatProducts + -0.34149449572975 * S_MntWines +
0.45944109671738 * S_NumDistPurchases + 2.00910621486809 * S_RFMstat + -1.8305685414059 *
S_RMntFrq + 1.46038466341548 * S_Recency ;
1082189   +   H1x4_2  =    -0.63266188932348 * S_AcceptedCmpTotal
1082190   +          +    -0.01183486383209 * S_Frq  +    -1.07560568030024 * S_Income
1082191   +          +    -1.30988288899902 * S_Mnt  +     2.15841401397408 *
1082192   +        S_MntGoldProds  +    -1.27808965763357 * S_MntMeatProducts
1082193   +          +     2.04886920467378 * S_MntWines  +     0.09322121012781 *
1082194   +        S_NumDistPurchases  +    -0.37050311259862 * S_RFMstat
1082195   +          +     0.68085578996214 * S_RMntFrq  +     1.48508197039719 *
1082196   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -0.63266188932348 * S_AcceptedCmpTotal + -0.01183486383209 *
S_Frq + -1.07560568030024 * S_Income + -1.30988288899902 * S_Mnt + 2.15841401397408 *
S_MntGoldProds + -1.27808965763357 * S_MntMeatProducts + 2.04886920467378 * S_MntWines +
0.09322121012781 * S_NumDistPurchases + -0.37050311259862 * S_RFMstat + 0.68085578996214 *
S_RMntFrq + 1.48508197039719 * S_Recency ;
1082197   +   H1x4_3  =    -0.53647455024397 * S_AcceptedCmpTotal
1082198   +          +     0.24459727005497 * S_Frq  +     0.30319155437277 * S_Income
1082199   +          +     0.25206471395865 * S_Mnt  +     0.43917953957135 *
1082200   +        S_MntGoldProds  +    -0.10933570154764 * S_MntMeatProducts
1082201   +          +    -0.04059236687792 * S_MntWines  +     0.35677739352706 *
1082202   +        S_NumDistPurchases  +     1.38086899403811 * S_RFMstat
1082203   +          +    -0.32751457592661 * S_RMntFrq  +    -0.15926282047245 *
1082204   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_3 = -0.53647455024397 * S_AcceptedCmpTotal + 0.24459727005497 *
S_Frq + 0.30319155437277 * S_Income + 0.25206471395865 * S_Mnt + 0.43917953957135 *
S_MntGoldProds + -0.10933570154764 * S_MntMeatProducts + -0.04059236687792 * S_MntWines +
0.35677739352706 * S_NumDistPurchases + 1.38086899403811 * S_RFMstat + -0.32751457592661 *
S_RMntFrq + -0.15926282047245 * S_Recency ;
1082205   +   H1x4_4  =     0.24225159923716 * S_AcceptedCmpTotal
1082206   +          +    -0.83397540163538 * S_Frq  +     0.65454415304883 * S_Income
1082207   +          +     -2.1008417113285 * S_Mnt  +     1.46444392612369 *
1082208   +        S_MntGoldProds  +     1.98843066844745 * S_MntMeatProducts
1082209   +          +    -0.31310064337061 * S_MntWines  +     0.56236194506314 *
1082210   +        S_NumDistPurchases  +    -0.20512833160409 * S_RFMstat
1082211   +          +    -0.20631901696385 * S_RMntFrq  +    -0.01945293751142 *
1082212   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 0.24225159923716 * S_AcceptedCmpTotal + -0.83397540163538 *
S_Frq + 0.65454415304883 * S_Income + -2.1008417113285 * S_Mnt + 1.46444392612369 *
S_MntGoldProds + 1.98843066844745 * S_MntMeatProducts + -0.31310064337061 * S_MntWines +
0.56236194506314 * S_NumDistPurchases + -0.20512833160409 * S_RFMstat + -0.20631901696385 *
S_RMntFrq + -0.01945293751142 * S_Recency ;
1082213   +   H1x4_5  =     -0.2800504242999 * S_AcceptedCmpTotal
1082214   +          +     0.11767474732461 * S_Frq  +    -1.78109558633383 * S_Income
1082215   +          +    -0.83275451396797 * S_Mnt  +     0.13772739876237 *
1082216   +        S_MntGoldProds  +    -0.00084509726748 * S_MntMeatProducts
1082217   +          +     0.92081955236291 * S_MntWines  +    -0.84663906140096 *
1082218   +        S_NumDistPurchases  +     1.07425261538134 * S_RFMstat
1082219   +          +    -0.27830850445101 * S_RMntFrq  +     0.74380794599056 *
1082220   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_5 = -0.2800504242999 * S_AcceptedCmpTotal + 0.11767474732461 *
S_Frq + -1.78109558633383 * S_Income + -0.83275451396797 * S_Mnt + 0.13772739876237 *
S_MntGoldProds + -0.00084509726748 * S_MntMeatProducts + 0.92081955236291 * S_MntWines +
-0.84663906140096 * S_NumDistPurchases + 1.07425261538134 * S_RFMstat + -0.27830850445101 *
S_RMntFrq + 0.74380794599056 * S_Recency ;
1082221   +   H1x4_6  =     -1.1119291723593 * S_AcceptedCmpTotal
1082222   +          +     0.56304851350844 * S_Frq  +     0.73567113537541 * S_Income
1082223   +          +    -3.12306246450604 * S_Mnt  +    -0.91316403938439 *
1082224   +        S_MntGoldProds  +    -2.69628755197256 * S_MntMeatProducts
1082225   +          +     0.85746867824621 * S_MntWines  +    -0.36724035406906 *
1082226   +        S_NumDistPurchases  +     0.28568968295985 * S_RFMstat
1082227   +          +    -0.93954323577146 * S_RMntFrq  +     0.85268992665591 *
1082228   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_6 = -1.1119291723593 * S_AcceptedCmpTotal + 0.56304851350844 *
S_Frq + 0.73567113537541 * S_Income + -3.12306246450604 * S_Mnt + -0.91316403938439 *
S_MntGoldProds + -2.69628755197256 * S_MntMeatProducts + 0.85746867824621 * S_MntWines +
-0.36724035406906 * S_NumDistPurchases + 0.28568968295985 * S_RFMstat + -0.93954323577146 *
S_RMntFrq + 0.85268992665591 * S_Recency ;
1082229   +   H1x4_1  = H1x4_1  +    -0.41637670428316 * G_Marital_Status0
1082230   +          +     1.82577173192743 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.41637670428316 * G_Marital_Status0 +
1.82577173192743 * G_Marital_Status1 ;
1082231   +   H1x4_2  = H1x4_2  +     1.30084682846119 * G_Marital_Status0
1082232   +          +     1.86494194086223 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = H1x4_2 + 1.30084682846119 * G_Marital_Status0 +
1.86494194086223 * G_Marital_Status1 ;
1082233   +   H1x4_3  = H1x4_3  +    -2.51039247492524 * G_Marital_Status0
1082234   +          +    -0.78535196846115 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = H1x4_3 + -2.51039247492524 * G_Marital_Status0 +
-0.78535196846115 * G_Marital_Status1 ;
1082235   +   H1x4_4  = H1x4_4  +    -1.66536345681649 * G_Marital_Status0
1082236   +          +    -1.13643623224979 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = H1x4_4 + -1.66536345681649 * G_Marital_Status0 +
-1.13643623224979 * G_Marital_Status1 ;
1082237   +   H1x4_5  = H1x4_5  +     0.34381083459151 * G_Marital_Status0
1082238   +          +    -0.50611098994468 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = H1x4_5 + 0.34381083459151 * G_Marital_Status0 +
-0.50611098994468 * G_Marital_Status1 ;
1082239   +   H1x4_6  = H1x4_6  +    -0.50144547845039 * G_Marital_Status0
1082240   +          +     1.05855030017376 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = H1x4_6 + -0.50144547845039 * G_Marital_Status0 +
1.05855030017376 * G_Marital_Status1 ;
1082241   +   H1x4_1  =     0.23907181959326 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = 0.23907181959326 + H1x4_1 ;
1082242   +   H1x4_2  =    -1.57201194785995 + H1x4_2 ;
MPRINT(EM_DIAGRAM):   H1x4_2 = -1.57201194785995 + H1x4_2 ;
1082243   +   H1x4_3  =     2.06322674265618 + H1x4_3 ;
MPRINT(EM_DIAGRAM):   H1x4_3 = 2.06322674265618 + H1x4_3 ;
1082244   +   H1x4_4  =     1.01469021578807 + H1x4_4 ;
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.01469021578807 + H1x4_4 ;
1082245   +   H1x4_5  =     1.07767489348013 + H1x4_5 ;
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.07767489348013 + H1x4_5 ;
1082246   +   H1x4_6  =     0.04477742816865 + H1x4_6 ;
MPRINT(EM_DIAGRAM):   H1x4_6 = 0.04477742816865 + H1x4_6 ;
1082247   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1082248   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1082249   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1082250   +   H1x4_2  = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_2 = 1.0 / (1.0 + EXP(MIN( - H1x4_2 , _EXP_BAR)));
1082251   +   H1x4_3  = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_3 = 1.0 / (1.0 + EXP(MIN( - H1x4_3 , _EXP_BAR)));
1082252   +   H1x4_4  = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_4 = 1.0 / (1.0 + EXP(MIN( - H1x4_4 , _EXP_BAR)));
1082253   +   H1x4_5  = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_5 = 1.0 / (1.0 + EXP(MIN( - H1x4_5 , _EXP_BAR)));
1082254   +   H1x4_6  = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_6 = 1.0 / (1.0 + EXP(MIN( - H1x4_6 , _EXP_BAR)));
1082255   +END;
MPRINT(EM_DIAGRAM):   END;
1082256   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082257   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1082258   +   H1x4_2  = .;
MPRINT(EM_DIAGRAM):   H1x4_2 = .;
1082259   +   H1x4_3  = .;
MPRINT(EM_DIAGRAM):   H1x4_3 = .;
1082260   +   H1x4_4  = .;
MPRINT(EM_DIAGRAM):   H1x4_4 = .;
1082261   +   H1x4_5  = .;
MPRINT(EM_DIAGRAM):   H1x4_5 = .;
1082262   +   H1x4_6  = .;
MPRINT(EM_DIAGRAM):   H1x4_6 = .;
1082263   +END;
MPRINT(EM_DIAGRAM):   END;
1082264   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082265   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1082266   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082267   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082268   +   H2x1_1  =     1.57657363240028 * H1x1_1  +    -0.37699618626432 * H1x1_2
1082269   +          +    -0.60919993629457 * H1x1_3  +     2.97257779188857 * H1x1_4
1082270   +          +     4.47740938165819 * H1x1_5  +    -0.85059681057218 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.57657363240028 * H1x1_1 + -0.37699618626432 * H1x1_2 +
-0.60919993629457 * H1x1_3 + 2.97257779188857 * H1x1_4 + 4.47740938165819 * H1x1_5 +
-0.85059681057218 * H1x1_6 ;
1082271   +   H2x1_2  =     0.58245150995434 * H1x1_1  +     1.31825599717827 * H1x1_2
1082272   +          +    -0.46604129874265 * H1x1_3  +    -1.57880778011961 * H1x1_4
1082273   +          +      0.1296024356855 * H1x1_5  +    -0.32310175742174 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.58245150995434 * H1x1_1 + 1.31825599717827 * H1x1_2 +
-0.46604129874265 * H1x1_3 + -1.57880778011961 * H1x1_4 + 0.1296024356855 * H1x1_5 +
-0.32310175742174 * H1x1_6 ;
1082274   +   H2x1_3  =     0.08762368266386 * H1x1_1  +     -2.1587359786783 * H1x1_2
1082275   +          +     0.53603825884818 * H1x1_3  +    -0.24087329015868 * H1x1_4
1082276   +          +     0.03296173080719 * H1x1_5  +     0.01697480121243 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.08762368266386 * H1x1_1 + -2.1587359786783 * H1x1_2 +
0.53603825884818 * H1x1_3 + -0.24087329015868 * H1x1_4 + 0.03296173080719 * H1x1_5 +
0.01697480121243 * H1x1_6 ;
1082277   +   H2x1_4  =    -0.11182680657167 * H1x1_1  +     0.78238566788271 * H1x1_2
1082278   +          +    -0.32984662645651 * H1x1_3  +    -0.48952564803009 * H1x1_4
1082279   +          +    -1.99607614008712 * H1x1_5  +     0.10016209874446 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.11182680657167 * H1x1_1 + 0.78238566788271 * H1x1_2 +
-0.32984662645651 * H1x1_3 + -0.48952564803009 * H1x1_4 + -1.99607614008712 * H1x1_5 +
0.10016209874446 * H1x1_6 ;
1082280   +   H2x1_5  =     -1.2498866108229 * H1x1_1  +      3.2369796406078 * H1x1_2
1082281   +          +      2.8181066223344 * H1x1_3  +    -3.11752751718664 * H1x1_4
1082282   +          +    -0.69294382105442 * H1x1_5  +     1.50580112761945 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = -1.2498866108229 * H1x1_1 + 3.2369796406078 * H1x1_2 +
2.8181066223344 * H1x1_3 + -3.11752751718664 * H1x1_4 + -0.69294382105442 * H1x1_5 +
1.50580112761945 * H1x1_6 ;
1082283   +   H2x1_1  = H2x1_1  +     1.23510627062479 * H1x2_1
1082284   +          +     0.24021661687189 * H1x2_2  +    -1.56696654026909 * H1x2_3
1082285   +          +     1.87814576627429 * H1x2_4  +     0.77581978719058 * H1x2_5
1082286   +          +    -0.36964326956968 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.23510627062479 * H1x2_1 + 0.24021661687189 * H1x2_2
+ -1.56696654026909 * H1x2_3 + 1.87814576627429 * H1x2_4 + 0.77581978719058 * H1x2_5 +
-0.36964326956968 * H1x2_6 ;
1082287   +   H2x1_2  = H2x1_2  +     0.92347023180909 * H1x2_1
1082288   +          +    -0.58884204034707 * H1x2_2  +     0.32527960762166 * H1x2_3
1082289   +          +    -2.67192710315835 * H1x2_4  +     1.11142627890507 * H1x2_5
1082290   +          +     -0.0675747785188 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.92347023180909 * H1x2_1 + -0.58884204034707 * H1x2_2
+ 0.32527960762166 * H1x2_3 + -2.67192710315835 * H1x2_4 + 1.11142627890507 * H1x2_5 +
-0.0675747785188 * H1x2_6 ;
1082291   +   H2x1_3  = H2x1_3  +    -0.92500735470206 * H1x2_1
1082292   +          +     0.02449601034461 * H1x2_2  +    -0.75716713196308 * H1x2_3
1082293   +          +     0.16672538074212 * H1x2_4  +    -1.03440004099384 * H1x2_5
1082294   +          +     0.20622228187831 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + -0.92500735470206 * H1x2_1 + 0.02449601034461 * H1x2_2
+ -0.75716713196308 * H1x2_3 + 0.16672538074212 * H1x2_4 + -1.03440004099384 * H1x2_5 +
0.20622228187831 * H1x2_6 ;
1082295   +   H2x1_4  = H2x1_4  +     1.25485096748114 * H1x2_1
1082296   +          +     -0.2345670529973 * H1x2_2  +     1.00007865183196 * H1x2_3
1082297   +          +    -0.19520365006597 * H1x2_4  +     0.15141232788955 * H1x2_5
1082298   +          +     0.99704195296742 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25485096748114 * H1x2_1 + -0.2345670529973 * H1x2_2
+ 1.00007865183196 * H1x2_3 + -0.19520365006597 * H1x2_4 + 0.15141232788955 * H1x2_5 +
0.99704195296742 * H1x2_6 ;
1082299   +   H2x1_5  = H2x1_5  +    -0.65666404502833 * H1x2_1
1082300   +          +     2.28944563427288 * H1x2_2  +    -0.53344610521696 * H1x2_3
1082301   +          +      -0.793597979143 * H1x2_4  +     -0.5657184003534 * H1x2_5
1082302   +          +     0.52117926766363 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.65666404502833 * H1x2_1 + 2.28944563427288 * H1x2_2
+ -0.53344610521696 * H1x2_3 + -0.793597979143 * H1x2_4 + -0.5657184003534 * H1x2_5 +
0.52117926766363 * H1x2_6 ;
1082303   +   H2x1_1  = H2x1_1  +    -0.22872297219456 * H1x3_1
1082304   +          +     0.44130997341488 * H1x3_2  +     0.85543947016407 * H1x3_3
1082305   +          +      0.9172319436964 * H1x3_4  +    -0.63323674278101 * H1x3_5
1082306   +          +       0.010792162082 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.22872297219456 * H1x3_1 + 0.44130997341488 * H1x3_2
+ 0.85543947016407 * H1x3_3 + 0.9172319436964 * H1x3_4 + -0.63323674278101 * H1x3_5 +
0.010792162082 * H1x3_6 ;
1082307   +   H2x1_2  = H2x1_2  +    -0.47961853683007 * H1x3_1
1082308   +          +     0.67283234118014 * H1x3_2  +    -0.12148381681871 * H1x3_3
1082309   +          +     0.11539127068604 * H1x3_4  +     0.71547134269459 * H1x3_5
1082310   +          +     0.31051080747621 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.47961853683007 * H1x3_1 + 0.67283234118014 * H1x3_2
+ -0.12148381681871 * H1x3_3 + 0.11539127068604 * H1x3_4 + 0.71547134269459 * H1x3_5 +
0.31051080747621 * H1x3_6 ;
1082311   +   H2x1_3  = H2x1_3  +     0.84914297140244 * H1x3_1
1082312   +          +     0.52803158023536 * H1x3_2  +    -1.39949725219783 * H1x3_3
1082313   +          +     0.69603350257472 * H1x3_4  +    -0.99298091528215 * H1x3_5
1082314   +          +      0.4901677948096 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.84914297140244 * H1x3_1 + 0.52803158023536 * H1x3_2
+ -1.39949725219783 * H1x3_3 + 0.69603350257472 * H1x3_4 + -0.99298091528215 * H1x3_5 +
0.4901677948096 * H1x3_6 ;
1082315   +   H2x1_4  = H2x1_4  +     1.25437670540229 * H1x3_1
1082316   +          +     0.10767112672867 * H1x3_2  +     -2.4886577317349 * H1x3_3
1082317   +          +    -1.19999974192227 * H1x3_4  +     2.65195856746166 * H1x3_5
1082318   +          +    -0.35850032269696 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + 1.25437670540229 * H1x3_1 + 0.10767112672867 * H1x3_2
+ -2.4886577317349 * H1x3_3 + -1.19999974192227 * H1x3_4 + 2.65195856746166 * H1x3_5 +
-0.35850032269696 * H1x3_6 ;
1082319   +   H2x1_5  = H2x1_5  +    -0.18873569038601 * H1x3_1
1082320   +          +    -0.05695497456875 * H1x3_2  +    -1.09169714101723 * H1x3_3
1082321   +          +     0.66962829232535 * H1x3_4  +     0.68262583745167 * H1x3_5
1082322   +          +     0.91538472149247 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.18873569038601 * H1x3_1 + -0.05695497456875 *
H1x3_2 + -1.09169714101723 * H1x3_3 + 0.66962829232535 * H1x3_4 + 0.68262583745167 * H1x3_5 +
0.91538472149247 * H1x3_6 ;
1082323   +   H2x1_1  = H2x1_1  +    -0.77701371575001 * H1x4_1
1082324   +          +    -1.54239140939922 * H1x4_2  +    -0.26570372401877 * H1x4_3
1082325   +          +     0.00097824237229 * H1x4_4  +     0.57921309289721 * H1x4_5
1082326   +          +     1.46692133055956 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.77701371575001 * H1x4_1 + -1.54239140939922 *
H1x4_2 + -0.26570372401877 * H1x4_3 + 0.00097824237229 * H1x4_4 + 0.57921309289721 * H1x4_5 +
1.46692133055956 * H1x4_6 ;
1082327   +   H2x1_2  = H2x1_2  +     0.96564519202767 * H1x4_1
1082328   +          +    -0.06466152110331 * H1x4_2  +    -0.66659637249467 * H1x4_3
1082329   +          +     0.59673973270306 * H1x4_4  +     2.45492273841581 * H1x4_5
1082330   +          +     -0.4804481967354 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + 0.96564519202767 * H1x4_1 + -0.06466152110331 * H1x4_2
+ -0.66659637249467 * H1x4_3 + 0.59673973270306 * H1x4_4 + 2.45492273841581 * H1x4_5 +
-0.4804481967354 * H1x4_6 ;
1082331   +   H2x1_3  = H2x1_3  +     0.75339074826799 * H1x4_1
1082332   +          +     1.26373188682879 * H1x4_2  +     0.49419374749947 * H1x4_3
1082333   +          +     1.26541916145956 * H1x4_4  +     0.10039190806961 * H1x4_5
1082334   +          +    -0.79556185531974 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 + 0.75339074826799 * H1x4_1 + 1.26373188682879 * H1x4_2
+ 0.49419374749947 * H1x4_3 + 1.26541916145956 * H1x4_4 + 0.10039190806961 * H1x4_5 +
-0.79556185531974 * H1x4_6 ;
1082335   +   H2x1_4  = H2x1_4  +    -0.28271287281925 * H1x4_1
1082336   +          +      2.1208193298333 * H1x4_2  +    -0.65223420232343 * H1x4_3
1082337   +          +     0.02666229497558 * H1x4_4  +     0.72865787458027 * H1x4_5
1082338   +          +    -0.22377472142722 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 + -0.28271287281925 * H1x4_1 + 2.1208193298333 * H1x4_2
+ -0.65223420232343 * H1x4_3 + 0.02666229497558 * H1x4_4 + 0.72865787458027 * H1x4_5 +
-0.22377472142722 * H1x4_6 ;
1082339   +   H2x1_5  = H2x1_5  +    -0.84067714042271 * H1x4_1
1082340   +          +    -1.59141777016956 * H1x4_2  +     0.46077797807782 * H1x4_3
1082341   +          +    -0.07031579794448 * H1x4_4  +     0.83754013895307 * H1x4_5
1082342   +          +     0.49805259687865 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 + -0.84067714042271 * H1x4_1 + -1.59141777016956 *
H1x4_2 + 0.46077797807782 * H1x4_3 + -0.07031579794448 * H1x4_4 + 0.83754013895307 * H1x4_5 +
0.49805259687865 * H1x4_6 ;
1082343   +   H2x1_1  =     1.86496757154162 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.86496757154162 + H2x1_1 ;
1082344   +   H2x1_2  =     0.46453634696909 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 0.46453634696909 + H2x1_2 ;
1082345   +   H2x1_3  =     0.36165501609225 + H2x1_3 ;
MPRINT(EM_DIAGRAM):   H2x1_3 = 0.36165501609225 + H2x1_3 ;
1082346   +   H2x1_4  =    -0.91790753889181 + H2x1_4 ;
MPRINT(EM_DIAGRAM):   H2x1_4 = -0.91790753889181 + H2x1_4 ;
1082347   +   H2x1_5  =     2.82445131106489 + H2x1_5 ;
MPRINT(EM_DIAGRAM):   H2x1_5 = 2.82445131106489 + H2x1_5 ;
1082348   +   H2x1_6  = 0;
MPRINT(EM_DIAGRAM):   H2x1_6 = 0;
1082349   +   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 , H2x1_4 , H2x1_5 , H2x1_6 );
1082350   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082351   +   H2x1_1  = EXP(H2x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_1 = EXP(H2x1_1 - _MAX_);
1082352   +   _SUM_ = _SUM_ + H2x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_1 ;
1082353   +   H2x1_2  = EXP(H2x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_2 = EXP(H2x1_2 - _MAX_);
1082354   +   _SUM_ = _SUM_ + H2x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_2 ;
1082355   +   H2x1_3  = EXP(H2x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_3 = EXP(H2x1_3 - _MAX_);
1082356   +   _SUM_ = _SUM_ + H2x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_3 ;
1082357   +   H2x1_4  = EXP(H2x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_4 = EXP(H2x1_4 - _MAX_);
1082358   +   _SUM_ = _SUM_ + H2x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_4 ;
1082359   +   H2x1_5  = EXP(H2x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_5 = EXP(H2x1_5 - _MAX_);
1082360   +   _SUM_ = _SUM_ + H2x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_5 ;
1082361   +   H2x1_6  = EXP(H2x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x1_6 = EXP(H2x1_6 - _MAX_);
1082362   +   _SUM_ = _SUM_ + H2x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x1_6 ;
1082363   +   H2x1_1  = H2x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 / _SUM_;
1082364   +   H2x1_2  = H2x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 / _SUM_;
1082365   +   H2x1_3  = H2x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_3 = H2x1_3 / _SUM_;
1082366   +   H2x1_4  = H2x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_4 = H2x1_4 / _SUM_;
1082367   +   H2x1_5  = H2x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_5 = H2x1_5 / _SUM_;
1082368   +   H2x1_6  = H2x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x1_6 = H2x1_6 / _SUM_;
1082369   +END;
MPRINT(EM_DIAGRAM):   END;
1082370   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082371   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1082372   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1082373   +   H2x1_3  = .;
MPRINT(EM_DIAGRAM):   H2x1_3 = .;
1082374   +   H2x1_4  = .;
MPRINT(EM_DIAGRAM):   H2x1_4 = .;
1082375   +   H2x1_5  = .;
MPRINT(EM_DIAGRAM):   H2x1_5 = .;
1082376   +   H2x1_6  = .;
MPRINT(EM_DIAGRAM):   H2x1_6 = .;
1082377   +END;
MPRINT(EM_DIAGRAM):   END;
1082378   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082379   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1082380   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082381   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082382   +   H2x2_1  =     0.06037434087051 * H1x1_1  +     2.10312669809986 * H1x1_2
1082383   +          +     0.25966374544266 * H1x1_3  +     -0.4604625015482 * H1x1_4
1082384   +          +    -0.04852853005798 * H1x1_5  +     1.73108900683337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.06037434087051 * H1x1_1 + 2.10312669809986 * H1x1_2 +
0.25966374544266 * H1x1_3 + -0.4604625015482 * H1x1_4 + -0.04852853005798 * H1x1_5 +
1.73108900683337 * H1x1_6 ;
1082385   +   H2x2_2  =    -1.98874787809729 * H1x1_1  +    -0.90575568783349 * H1x1_2
1082386   +          +     2.19451885005981 * H1x1_3  +     0.86127175797091 * H1x1_4
1082387   +          +     0.88302785384691 * H1x1_5  +     1.44831802939799 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.98874787809729 * H1x1_1 + -0.90575568783349 * H1x1_2 +
2.19451885005981 * H1x1_3 + 0.86127175797091 * H1x1_4 + 0.88302785384691 * H1x1_5 +
1.44831802939799 * H1x1_6 ;
1082388   +   H2x2_3  =     0.99020573159855 * H1x1_1  +    -0.25509107111568 * H1x1_2
1082389   +          +    -0.88380027397433 * H1x1_3  +     2.61444810707966 * H1x1_4
1082390   +          +     1.12768553693881 * H1x1_5  +    -1.33423515707253 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 0.99020573159855 * H1x1_1 + -0.25509107111568 * H1x1_2 +
-0.88380027397433 * H1x1_3 + 2.61444810707966 * H1x1_4 + 1.12768553693881 * H1x1_5 +
-1.33423515707253 * H1x1_6 ;
1082391   +   H2x2_4  =    -0.48971657670431 * H1x1_1  +    -2.03924441101145 * H1x1_2
1082392   +          +    -0.44598954940675 * H1x1_3  +    -0.38296699607675 * H1x1_4
1082393   +          +    -0.46829791763961 * H1x1_5  +     0.57571476480191 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.48971657670431 * H1x1_1 + -2.03924441101145 * H1x1_2 +
-0.44598954940675 * H1x1_3 + -0.38296699607675 * H1x1_4 + -0.46829791763961 * H1x1_5 +
0.57571476480191 * H1x1_6 ;
1082394   +   H2x2_5  =     1.15324249951205 * H1x1_1  +    -0.30656607959814 * H1x1_2
1082395   +          +    -0.26327906953925 * H1x1_3  +    -0.30055126052518 * H1x1_4
1082396   +          +     1.20108560127357 * H1x1_5  +    -2.01222927536337 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = 1.15324249951205 * H1x1_1 + -0.30656607959814 * H1x1_2 +
-0.26327906953925 * H1x1_3 + -0.30055126052518 * H1x1_4 + 1.20108560127357 * H1x1_5 +
-2.01222927536337 * H1x1_6 ;
1082397   +   H2x2_1  = H2x2_1  +     0.67714997403987 * H1x2_1
1082398   +          +     0.58512699375084 * H1x2_2  +     0.82352577521669 * H1x2_3
1082399   +          +    -0.10235751124142 * H1x2_4  +     0.33612939980192 * H1x2_5
1082400   +          +    -0.86707973977777 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.67714997403987 * H1x2_1 + 0.58512699375084 * H1x2_2
+ 0.82352577521669 * H1x2_3 + -0.10235751124142 * H1x2_4 + 0.33612939980192 * H1x2_5 +
-0.86707973977777 * H1x2_6 ;
1082401   +   H2x2_2  = H2x2_2  +     0.54358612690033 * H1x2_1
1082402   +          +     0.85147893022911 * H1x2_2  +     0.19383313272548 * H1x2_3
1082403   +          +     0.54163359333706 * H1x2_4  +    -0.12377705517298 * H1x2_5
1082404   +          +     0.34775419906833 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.54358612690033 * H1x2_1 + 0.85147893022911 * H1x2_2
+ 0.19383313272548 * H1x2_3 + 0.54163359333706 * H1x2_4 + -0.12377705517298 * H1x2_5 +
0.34775419906833 * H1x2_6 ;
1082405   +   H2x2_3  = H2x2_3  +    -0.93107945276808 * H1x2_1
1082406   +          +     0.68475936175775 * H1x2_2  +    -0.23180217492353 * H1x2_3
1082407   +          +     0.62637113173904 * H1x2_4  +      -0.494489282403 * H1x2_5
1082408   +          +    -0.92757761378206 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.93107945276808 * H1x2_1 + 0.68475936175775 * H1x2_2
+ -0.23180217492353 * H1x2_3 + 0.62637113173904 * H1x2_4 + -0.494489282403 * H1x2_5 +
-0.92757761378206 * H1x2_6 ;
1082409   +   H2x2_4  = H2x2_4  +    -0.04592275767761 * H1x2_1
1082410   +          +    -0.46728046145973 * H1x2_2  +    -0.84120395772864 * H1x2_3
1082411   +          +     0.15719249141893 * H1x2_4  +    -0.46514309972577 * H1x2_5
1082412   +          +     1.22882033880531 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + -0.04592275767761 * H1x2_1 + -0.46728046145973 *
H1x2_2 + -0.84120395772864 * H1x2_3 + 0.15719249141893 * H1x2_4 + -0.46514309972577 * H1x2_5 +
1.22882033880531 * H1x2_6 ;
1082413   +   H2x2_5  = H2x2_5  +     1.84159049843244 * H1x2_1
1082414   +          +     0.10275783758743 * H1x2_2  +    -1.43072878385761 * H1x2_3
1082415   +          +     0.55082995966416 * H1x2_4  +      0.6610129464186 * H1x2_5
1082416   +          +     1.13665339513142 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + 1.84159049843244 * H1x2_1 + 0.10275783758743 * H1x2_2
+ -1.43072878385761 * H1x2_3 + 0.55082995966416 * H1x2_4 + 0.6610129464186 * H1x2_5 +
1.13665339513142 * H1x2_6 ;
1082417   +   H2x2_1  = H2x2_1  +    -1.51032464504011 * H1x3_1
1082418   +          +    -0.09256867451899 * H1x3_2  +     0.32445533867689 * H1x3_3
1082419   +          +     0.05761597623645 * H1x3_4  +    -0.76755137543453 * H1x3_5
1082420   +          +    -0.84355541605354 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -1.51032464504011 * H1x3_1 + -0.09256867451899 *
H1x3_2 + 0.32445533867689 * H1x3_3 + 0.05761597623645 * H1x3_4 + -0.76755137543453 * H1x3_5 +
-0.84355541605354 * H1x3_6 ;
1082421   +   H2x2_2  = H2x2_2  +     0.10183122181912 * H1x3_1
1082422   +          +    -0.30112412370797 * H1x3_2  +     0.67666605377075 * H1x3_3
1082423   +          +    -0.05362728717558 * H1x3_4  +    -0.02087908172702 * H1x3_5
1082424   +          +    -0.14832407235293 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.10183122181912 * H1x3_1 + -0.30112412370797 * H1x3_2
+ 0.67666605377075 * H1x3_3 + -0.05362728717558 * H1x3_4 + -0.02087908172702 * H1x3_5 +
-0.14832407235293 * H1x3_6 ;
1082425   +   H2x2_3  = H2x2_3  +     1.70579601255161 * H1x3_1
1082426   +          +     -0.4658368752668 * H1x3_2  +    -0.54573113497487 * H1x3_3
1082427   +          +     1.13279034034213 * H1x3_4  +     1.23714589942258 * H1x3_5
1082428   +          +     0.41209753590668 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + 1.70579601255161 * H1x3_1 + -0.4658368752668 * H1x3_2
+ -0.54573113497487 * H1x3_3 + 1.13279034034213 * H1x3_4 + 1.23714589942258 * H1x3_5 +
0.41209753590668 * H1x3_6 ;
1082429   +   H2x2_4  = H2x2_4  +     0.21012073552633 * H1x3_1
1082430   +          +      -1.607803967771 * H1x3_2  +     0.02641742148684 * H1x3_3
1082431   +          +      -0.919177834124 * H1x3_4  +    -0.46658991803838 * H1x3_5
1082432   +          +     0.05356295771962 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 0.21012073552633 * H1x3_1 + -1.607803967771 * H1x3_2 +
0.02641742148684 * H1x3_3 + -0.919177834124 * H1x3_4 + -0.46658991803838 * H1x3_5 +
0.05356295771962 * H1x3_6 ;
1082433   +   H2x2_5  = H2x2_5  +     -1.1424376096243 * H1x3_1
1082434   +          +    -0.47941730936597 * H1x3_2  +    -1.44857674506057 * H1x3_3
1082435   +          +     -2.0300913051093 * H1x3_4  +    -0.12476620160938 * H1x3_5
1082436   +          +      1.3865980084186 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -1.1424376096243 * H1x3_1 + -0.47941730936597 * H1x3_2
+ -1.44857674506057 * H1x3_3 + -2.0300913051093 * H1x3_4 + -0.12476620160938 * H1x3_5 +
1.3865980084186 * H1x3_6 ;
1082437   +   H2x2_1  = H2x2_1  +    -0.80277778579719 * H1x4_1
1082438   +          +     0.89356845434924 * H1x4_2  +     1.34679856015636 * H1x4_3
1082439   +          +    -0.75666255425893 * H1x4_4  +    -0.76982332990737 * H1x4_5
1082440   +          +     0.16602366912489 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.80277778579719 * H1x4_1 + 0.89356845434924 * H1x4_2
+ 1.34679856015636 * H1x4_3 + -0.75666255425893 * H1x4_4 + -0.76982332990737 * H1x4_5 +
0.16602366912489 * H1x4_6 ;
1082441   +   H2x2_2  = H2x2_2  +    -1.23815292104545 * H1x4_1
1082442   +          +     0.15726093177842 * H1x4_2  +     0.11603212859646 * H1x4_3
1082443   +          +     0.38287343591011 * H1x4_4  +    -0.51333663927664 * H1x4_5
1082444   +          +     -0.9577144624714 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -1.23815292104545 * H1x4_1 + 0.15726093177842 * H1x4_2
+ 0.11603212859646 * H1x4_3 + 0.38287343591011 * H1x4_4 + -0.51333663927664 * H1x4_5 +
-0.9577144624714 * H1x4_6 ;
1082445   +   H2x2_3  = H2x2_3  +    -0.68480171858681 * H1x4_1
1082446   +          +    -0.64475211431817 * H1x4_2  +     0.54382770716837 * H1x4_3
1082447   +          +     0.07586519798399 * H1x4_4  +      -0.158352646931 * H1x4_5
1082448   +          +    -0.86962851115528 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 + -0.68480171858681 * H1x4_1 + -0.64475211431817 *
H1x4_2 + 0.54382770716837 * H1x4_3 + 0.07586519798399 * H1x4_4 + -0.158352646931 * H1x4_5 +
-0.86962851115528 * H1x4_6 ;
1082449   +   H2x2_4  = H2x2_4  +     1.08721247219364 * H1x4_1
1082450   +          +    -0.00199447585891 * H1x4_2  +    -0.84066724442019 * H1x4_3
1082451   +          +     0.28532638217608 * H1x4_4  +    -1.14779513957631 * H1x4_5
1082452   +          +     2.01216139921959 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 + 1.08721247219364 * H1x4_1 + -0.00199447585891 * H1x4_2
+ -0.84066724442019 * H1x4_3 + 0.28532638217608 * H1x4_4 + -1.14779513957631 * H1x4_5 +
2.01216139921959 * H1x4_6 ;
1082453   +   H2x2_5  = H2x2_5  +    -0.82582817846967 * H1x4_1
1082454   +          +    -1.09057773595959 * H1x4_2  +     -0.2490905553905 * H1x4_3
1082455   +          +     0.93092377717594 * H1x4_4  +     0.02946641402494 * H1x4_5
1082456   +          +    -0.19026348436175 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 + -0.82582817846967 * H1x4_1 + -1.09057773595959 *
H1x4_2 + -0.2490905553905 * H1x4_3 + 0.93092377717594 * H1x4_4 + 0.02946641402494 * H1x4_5 +
-0.19026348436175 * H1x4_6 ;
1082457   +   H2x2_1  =      0.4280804812723 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = 0.4280804812723 + H2x2_1 ;
1082458   +   H2x2_2  =    -1.09169904475569 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.09169904475569 + H2x2_2 ;
1082459   +   H2x2_3  =      1.1980619484542 + H2x2_3 ;
MPRINT(EM_DIAGRAM):   H2x2_3 = 1.1980619484542 + H2x2_3 ;
1082460   +   H2x2_4  =    -0.69756677248934 + H2x2_4 ;
MPRINT(EM_DIAGRAM):   H2x2_4 = -0.69756677248934 + H2x2_4 ;
1082461   +   H2x2_5  =    -1.87910212660657 + H2x2_5 ;
MPRINT(EM_DIAGRAM):   H2x2_5 = -1.87910212660657 + H2x2_5 ;
1082462   +   H2x2_6  = 0;
MPRINT(EM_DIAGRAM):   H2x2_6 = 0;
1082463   +   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 , H2x2_4 , H2x2_5 , H2x2_6 );
1082464   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082465   +   H2x2_1  = EXP(H2x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_1 = EXP(H2x2_1 - _MAX_);
1082466   +   _SUM_ = _SUM_ + H2x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_1 ;
1082467   +   H2x2_2  = EXP(H2x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_2 = EXP(H2x2_2 - _MAX_);
1082468   +   _SUM_ = _SUM_ + H2x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_2 ;
1082469   +   H2x2_3  = EXP(H2x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_3 = EXP(H2x2_3 - _MAX_);
1082470   +   _SUM_ = _SUM_ + H2x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_3 ;
1082471   +   H2x2_4  = EXP(H2x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_4 = EXP(H2x2_4 - _MAX_);
1082472   +   _SUM_ = _SUM_ + H2x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_4 ;
1082473   +   H2x2_5  = EXP(H2x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_5 = EXP(H2x2_5 - _MAX_);
1082474   +   _SUM_ = _SUM_ + H2x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_5 ;
1082475   +   H2x2_6  = EXP(H2x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x2_6 = EXP(H2x2_6 - _MAX_);
1082476   +   _SUM_ = _SUM_ + H2x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x2_6 ;
1082477   +   H2x2_1  = H2x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 / _SUM_;
1082478   +   H2x2_2  = H2x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 / _SUM_;
1082479   +   H2x2_3  = H2x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_3 = H2x2_3 / _SUM_;
1082480   +   H2x2_4  = H2x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_4 = H2x2_4 / _SUM_;
1082481   +   H2x2_5  = H2x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_5 = H2x2_5 / _SUM_;
1082482   +   H2x2_6  = H2x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x2_6 = H2x2_6 / _SUM_;
1082483   +END;
MPRINT(EM_DIAGRAM):   END;
1082484   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082485   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1082486   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1082487   +   H2x2_3  = .;
MPRINT(EM_DIAGRAM):   H2x2_3 = .;
1082488   +   H2x2_4  = .;
MPRINT(EM_DIAGRAM):   H2x2_4 = .;
1082489   +   H2x2_5  = .;
MPRINT(EM_DIAGRAM):   H2x2_5 = .;
1082490   +   H2x2_6  = .;
MPRINT(EM_DIAGRAM):   H2x2_6 = .;
1082491   +END;
MPRINT(EM_DIAGRAM):   END;
1082492   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082493   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1082494   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082495   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082496   +   H2x3_1  =     0.51206365204428 * H1x1_1  +    -1.75446248490807 * H1x1_2
1082497   +          +     0.22956544269482 * H1x1_3  +     0.91651437630074 * H1x1_4
1082498   +          +    -0.88731743590726 * H1x1_5  +     0.75959028005652 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = 0.51206365204428 * H1x1_1 + -1.75446248490807 * H1x1_2 +
0.22956544269482 * H1x1_3 + 0.91651437630074 * H1x1_4 + -0.88731743590726 * H1x1_5 +
0.75959028005652 * H1x1_6 ;
1082499   +   H2x3_2  =    -0.45196055100748 * H1x1_1  +    -0.30516535345407 * H1x1_2
1082500   +          +    -0.95535662641329 * H1x1_3  +     0.98793241812876 * H1x1_4
1082501   +          +    -2.26205386368521 * H1x1_5  +    -0.79989554227284 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = -0.45196055100748 * H1x1_1 + -0.30516535345407 * H1x1_2 +
-0.95535662641329 * H1x1_3 + 0.98793241812876 * H1x1_4 + -2.26205386368521 * H1x1_5 +
-0.79989554227284 * H1x1_6 ;
1082502   +   H2x3_3  =     1.75400558713364 * H1x1_1  +     0.36065784285286 * H1x1_2
1082503   +          +    -0.26047606287884 * H1x1_3  +    -0.92639558885443 * H1x1_4
1082504   +          +     1.89978202395282 * H1x1_5  +     1.46105111567983 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = 1.75400558713364 * H1x1_1 + 0.36065784285286 * H1x1_2 +
-0.26047606287884 * H1x1_3 + -0.92639558885443 * H1x1_4 + 1.89978202395282 * H1x1_5 +
1.46105111567983 * H1x1_6 ;
1082505   +   H2x3_4  =     -1.0609986914691 * H1x1_1  +     1.03588259392678 * H1x1_2
1082506   +          +     0.18751061078347 * H1x1_3  +     1.45467172411852 * H1x1_4
1082507   +          +     0.80970691110797 * H1x1_5  +    -0.03142746343877 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = -1.0609986914691 * H1x1_1 + 1.03588259392678 * H1x1_2 +
0.18751061078347 * H1x1_3 + 1.45467172411852 * H1x1_4 + 0.80970691110797 * H1x1_5 +
-0.03142746343877 * H1x1_6 ;
1082508   +   H2x3_5  =     0.68514959739435 * H1x1_1  +    -0.85703618516825 * H1x1_2
1082509   +          +    -1.42641478008517 * H1x1_3  +     0.69128253039497 * H1x1_4
1082510   +          +    -0.41103428804251 * H1x1_5  +     2.29818718782262 * H1x1_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = 0.68514959739435 * H1x1_1 + -0.85703618516825 * H1x1_2 +
-1.42641478008517 * H1x1_3 + 0.69128253039497 * H1x1_4 + -0.41103428804251 * H1x1_5 +
2.29818718782262 * H1x1_6 ;
1082511   +   H2x3_1  = H2x3_1  +    -1.02124610786304 * H1x2_1
1082512   +          +    -0.70086367508924 * H1x2_2  +     1.44543746222048 * H1x2_3
1082513   +          +      0.0077115223216 * H1x2_4  +    -1.13603676440953 * H1x2_5
1082514   +          +    -0.39006326539815 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.02124610786304 * H1x2_1 + -0.70086367508924 *
H1x2_2 + 1.44543746222048 * H1x2_3 + 0.0077115223216 * H1x2_4 + -1.13603676440953 * H1x2_5 +
-0.39006326539815 * H1x2_6 ;
1082515   +   H2x3_2  = H2x3_2  +     0.58504868182178 * H1x2_1
1082516   +          +    -2.53394647771808 * H1x2_2  +    -0.46920351111552 * H1x2_3
1082517   +          +    -0.13298739365164 * H1x2_4  +    -0.72916785042807 * H1x2_5
1082518   +          +     0.87575796008942 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + 0.58504868182178 * H1x2_1 + -2.53394647771808 * H1x2_2
+ -0.46920351111552 * H1x2_3 + -0.13298739365164 * H1x2_4 + -0.72916785042807 * H1x2_5 +
0.87575796008942 * H1x2_6 ;
1082519   +   H2x3_3  = H2x3_3  +      -0.403068394175 * H1x2_1
1082520   +          +     2.20341156440175 * H1x2_2  +     0.18637166393472 * H1x2_3
1082521   +          +    -0.49818124689746 * H1x2_4  +    -0.57482220863202 * H1x2_5
1082522   +          +    -0.99288712489296 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -0.403068394175 * H1x2_1 + 2.20341156440175 * H1x2_2 +
0.18637166393472 * H1x2_3 + -0.49818124689746 * H1x2_4 + -0.57482220863202 * H1x2_5 +
-0.99288712489296 * H1x2_6 ;
1082523   +   H2x3_4  = H2x3_4  +    -0.08255075671356 * H1x2_1
1082524   +          +     0.12417859340249 * H1x2_2  +     0.38623860203678 * H1x2_3
1082525   +          +     1.30375188803419 * H1x2_4  +     0.06113655765155 * H1x2_5
1082526   +          +     2.18684373678918 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.08255075671356 * H1x2_1 + 0.12417859340249 * H1x2_2
+ 0.38623860203678 * H1x2_3 + 1.30375188803419 * H1x2_4 + 0.06113655765155 * H1x2_5 +
2.18684373678918 * H1x2_6 ;
1082527   +   H2x3_5  = H2x3_5  +     0.02445507420447 * H1x2_1
1082528   +          +     -1.1429834255353 * H1x2_2  +     1.15057813366971 * H1x2_3
1082529   +          +     -0.7929157351984 * H1x2_4  +      0.4343084860458 * H1x2_5
1082530   +          +      0.0384736341173 * H1x2_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + 0.02445507420447 * H1x2_1 + -1.1429834255353 * H1x2_2
+ 1.15057813366971 * H1x2_3 + -0.7929157351984 * H1x2_4 + 0.4343084860458 * H1x2_5 +
0.0384736341173 * H1x2_6 ;
1082531   +   H2x3_1  = H2x3_1  +     0.37764572590016 * H1x3_1
1082532   +          +     1.48191356825225 * H1x3_2  +    -0.26603273466393 * H1x3_3
1082533   +          +    -1.29507822568105 * H1x3_4  +     1.84557717124725 * H1x3_5
1082534   +          +    -0.65863037608331 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 0.37764572590016 * H1x3_1 + 1.48191356825225 * H1x3_2
+ -0.26603273466393 * H1x3_3 + -1.29507822568105 * H1x3_4 + 1.84557717124725 * H1x3_5 +
-0.65863037608331 * H1x3_6 ;
1082535   +   H2x3_2  = H2x3_2  +    -3.49060338051306 * H1x3_1
1082536   +          +      1.3541565382925 * H1x3_2  +    -0.38315198954693 * H1x3_3
1082537   +          +    -2.08846010475603 * H1x3_4  +    -0.03268324043605 * H1x3_5
1082538   +          +     -0.2732767866426 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -3.49060338051306 * H1x3_1 + 1.3541565382925 * H1x3_2
+ -0.38315198954693 * H1x3_3 + -2.08846010475603 * H1x3_4 + -0.03268324043605 * H1x3_5 +
-0.2732767866426 * H1x3_6 ;
1082539   +   H2x3_3  = H2x3_3  +    -1.02108681113274 * H1x3_1
1082540   +          +     1.11670732797487 * H1x3_2  +    -2.83817066251645 * H1x3_3
1082541   +          +     2.91943649605743 * H1x3_4  +    -1.58666117886546 * H1x3_5
1082542   +          +     0.95358246629929 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + -1.02108681113274 * H1x3_1 + 1.11670732797487 * H1x3_2
+ -2.83817066251645 * H1x3_3 + 2.91943649605743 * H1x3_4 + -1.58666117886546 * H1x3_5 +
0.95358246629929 * H1x3_6 ;
1082543   +   H2x3_4  = H2x3_4  +    -0.28934138457604 * H1x3_1
1082544   +          +     -0.1627562650927 * H1x3_2  +     1.76496399430623 * H1x3_3
1082545   +          +     2.05776756058594 * H1x3_4  +    -0.96994650178001 * H1x3_5
1082546   +          +    -1.50364154763084 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.28934138457604 * H1x3_1 + -0.1627562650927 * H1x3_2
+ 1.76496399430623 * H1x3_3 + 2.05776756058594 * H1x3_4 + -0.96994650178001 * H1x3_5 +
-1.50364154763084 * H1x3_6 ;
1082547   +   H2x3_5  = H2x3_5  +    -0.73016276992619 * H1x3_1
1082548   +          +    -1.48258849718818 * H1x3_2  +    -0.47908044807419 * H1x3_3
1082549   +          +      0.5957671579209 * H1x3_4  +     0.06707833713085 * H1x3_5
1082550   +          +      0.3673818114501 * H1x3_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.73016276992619 * H1x3_1 + -1.48258849718818 *
H1x3_2 + -0.47908044807419 * H1x3_3 + 0.5957671579209 * H1x3_4 + 0.06707833713085 * H1x3_5 +
0.3673818114501 * H1x3_6 ;
1082551   +   H2x3_1  = H2x3_1  +     1.64939881299916 * H1x4_1
1082552   +          +     0.29057047745206 * H1x4_2  +     -1.2430356696985 * H1x4_3
1082553   +          +     1.38895822896909 * H1x4_4  +     0.32263395713709 * H1x4_5
1082554   +          +      -0.876005602164 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 1.64939881299916 * H1x4_1 + 0.29057047745206 * H1x4_2
+ -1.2430356696985 * H1x4_3 + 1.38895822896909 * H1x4_4 + 0.32263395713709 * H1x4_5 +
-0.876005602164 * H1x4_6 ;
1082555   +   H2x3_2  = H2x3_2  +    -0.59279077758901 * H1x4_1
1082556   +          +     0.47534983861589 * H1x4_2  +     1.50522851379751 * H1x4_3
1082557   +          +    -0.52074826438565 * H1x4_4  +    -0.13959571645898 * H1x4_5
1082558   +          +     0.51236653129509 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 + -0.59279077758901 * H1x4_1 + 0.47534983861589 * H1x4_2
+ 1.50522851379751 * H1x4_3 + -0.52074826438565 * H1x4_4 + -0.13959571645898 * H1x4_5 +
0.51236653129509 * H1x4_6 ;
1082559   +   H2x3_3  = H2x3_3  +       0.170929264521 * H1x4_1
1082560   +          +    -1.09768862147461 * H1x4_2  +    -1.22166369035864 * H1x4_3
1082561   +          +    -0.43496041372082 * H1x4_4  +     0.86983484014566 * H1x4_5
1082562   +          +     0.14855508666868 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 + 0.170929264521 * H1x4_1 + -1.09768862147461 * H1x4_2 +
-1.22166369035864 * H1x4_3 + -0.43496041372082 * H1x4_4 + 0.86983484014566 * H1x4_5 +
0.14855508666868 * H1x4_6 ;
1082563   +   H2x3_4  = H2x3_4  +    -0.26703118340308 * H1x4_1
1082564   +          +     0.58353167926887 * H1x4_2  +     1.39169479141155 * H1x4_3
1082565   +          +     -0.7893707969296 * H1x4_4  +     0.89521873365477 * H1x4_5
1082566   +          +     1.60853840268286 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 + -0.26703118340308 * H1x4_1 + 0.58353167926887 * H1x4_2
+ 1.39169479141155 * H1x4_3 + -0.7893707969296 * H1x4_4 + 0.89521873365477 * H1x4_5 +
1.60853840268286 * H1x4_6 ;
1082567   +   H2x3_5  = H2x3_5  +    -0.29353449181426 * H1x4_1
1082568   +          +     0.02697197445995 * H1x4_2  +     0.04454970336296 * H1x4_3
1082569   +          +    -0.17322488506489 * H1x4_4  +    -1.52564540234935 * H1x4_5
1082570   +          +      0.6650692994568 * H1x4_6 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 + -0.29353449181426 * H1x4_1 + 0.02697197445995 * H1x4_2
+ 0.04454970336296 * H1x4_3 + -0.17322488506489 * H1x4_4 + -1.52564540234935 * H1x4_5 +
0.6650692994568 * H1x4_6 ;
1082571   +   H2x3_1  =    -0.44046998911725 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -0.44046998911725 + H2x3_1 ;
1082572   +   H2x3_2  =     1.44590821330163 + H2x3_2 ;
MPRINT(EM_DIAGRAM):   H2x3_2 = 1.44590821330163 + H2x3_2 ;
1082573   +   H2x3_3  =    -0.02671947857742 + H2x3_3 ;
MPRINT(EM_DIAGRAM):   H2x3_3 = -0.02671947857742 + H2x3_3 ;
1082574   +   H2x3_4  =     2.16876314488082 + H2x3_4 ;
MPRINT(EM_DIAGRAM):   H2x3_4 = 2.16876314488082 + H2x3_4 ;
1082575   +   H2x3_5  =    -1.06855161267989 + H2x3_5 ;
MPRINT(EM_DIAGRAM):   H2x3_5 = -1.06855161267989 + H2x3_5 ;
1082576   +   H2x3_6  = 0;
MPRINT(EM_DIAGRAM):   H2x3_6 = 0;
1082577   +   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 , H2x3_4 , H2x3_5 , H2x3_6 );
1082578   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082579   +   H2x3_1  = EXP(H2x3_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_1 = EXP(H2x3_1 - _MAX_);
1082580   +   _SUM_ = _SUM_ + H2x3_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_1 ;
1082581   +   H2x3_2  = EXP(H2x3_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_2 = EXP(H2x3_2 - _MAX_);
1082582   +   _SUM_ = _SUM_ + H2x3_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_2 ;
1082583   +   H2x3_3  = EXP(H2x3_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_3 = EXP(H2x3_3 - _MAX_);
1082584   +   _SUM_ = _SUM_ + H2x3_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_3 ;
1082585   +   H2x3_4  = EXP(H2x3_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_4 = EXP(H2x3_4 - _MAX_);
1082586   +   _SUM_ = _SUM_ + H2x3_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_4 ;
1082587   +   H2x3_5  = EXP(H2x3_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_5 = EXP(H2x3_5 - _MAX_);
1082588   +   _SUM_ = _SUM_ + H2x3_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_5 ;
1082589   +   H2x3_6  = EXP(H2x3_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H2x3_6 = EXP(H2x3_6 - _MAX_);
1082590   +   _SUM_ = _SUM_ + H2x3_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H2x3_6 ;
1082591   +   H2x3_1  = H2x3_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 / _SUM_;
1082592   +   H2x3_2  = H2x3_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_2 = H2x3_2 / _SUM_;
1082593   +   H2x3_3  = H2x3_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_3 = H2x3_3 / _SUM_;
1082594   +   H2x3_4  = H2x3_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_4 = H2x3_4 / _SUM_;
1082595   +   H2x3_5  = H2x3_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_5 = H2x3_5 / _SUM_;
1082596   +   H2x3_6  = H2x3_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H2x3_6 = H2x3_6 / _SUM_;
1082597   +END;
MPRINT(EM_DIAGRAM):   END;
1082598   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082599   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1082600   +   H2x3_2  = .;
MPRINT(EM_DIAGRAM):   H2x3_2 = .;
1082601   +   H2x3_3  = .;
MPRINT(EM_DIAGRAM):   H2x3_3 = .;
1082602   +   H2x3_4  = .;
MPRINT(EM_DIAGRAM):   H2x3_4 = .;
1082603   +   H2x3_5  = .;
MPRINT(EM_DIAGRAM):   H2x3_5 = .;
1082604   +   H2x3_6  = .;
MPRINT(EM_DIAGRAM):   H2x3_6 = .;
1082605   +END;
MPRINT(EM_DIAGRAM):   END;
1082606   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082607   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1082608   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082609   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082610   +   H3x1_1  =     0.14821897068309 * H2x1_1  +     0.10105634438409 * H2x1_2
1082611   +          +     0.69826499371673 * H2x1_3  +     1.65127139539807 * H2x1_4
1082612   +          +     1.34699293376382 * H2x1_5  +     0.62066324264653 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 0.14821897068309 * H2x1_1 + 0.10105634438409 * H2x1_2 +
0.69826499371673 * H2x1_3 + 1.65127139539807 * H2x1_4 + 1.34699293376382 * H2x1_5 +
0.62066324264653 * H2x1_6 ;
1082613   +   H3x1_2  =     -0.6760189094281 * H2x1_1  +     0.85348791240011 * H2x1_2
1082614   +          +    -0.07663386217946 * H2x1_3  +     2.15467384269703 * H2x1_4
1082615   +          +    -0.50699529916446 * H2x1_5  +     1.70699964755049 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = -0.6760189094281 * H2x1_1 + 0.85348791240011 * H2x1_2 +
-0.07663386217946 * H2x1_3 + 2.15467384269703 * H2x1_4 + -0.50699529916446 * H2x1_5 +
1.70699964755049 * H2x1_6 ;
1082616   +   H3x1_3  =    -0.94311365048828 * H2x1_1  +    -0.69829528108975 * H2x1_2
1082617   +          +    -0.34747616168009 * H2x1_3  +     2.32941170908743 * H2x1_4
1082618   +          +     3.71768144878584 * H2x1_5  +    -0.60932405988373 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = -0.94311365048828 * H2x1_1 + -0.69829528108975 * H2x1_2 +
-0.34747616168009 * H2x1_3 + 2.32941170908743 * H2x1_4 + 3.71768144878584 * H2x1_5 +
-0.60932405988373 * H2x1_6 ;
1082619   +   H3x1_4  =     1.69107510526388 * H2x1_1  +    -1.40350955348413 * H2x1_2
1082620   +          +    -0.47901844016365 * H2x1_3  +      0.3540542650553 * H2x1_4
1082621   +          +    -1.56597514252687 * H2x1_5  +    -0.04997148078498 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 1.69107510526388 * H2x1_1 + -1.40350955348413 * H2x1_2 +
-0.47901844016365 * H2x1_3 + 0.3540542650553 * H2x1_4 + -1.56597514252687 * H2x1_5 +
-0.04997148078498 * H2x1_6 ;
1082622   +   H3x1_5  =    -0.23167181678539 * H2x1_1  +    -0.65942738658946 * H2x1_2
1082623   +          +    -0.83280103611578 * H2x1_3  +    -1.03301865685228 * H2x1_4
1082624   +          +      1.3401316289209 * H2x1_5  +    -1.98639459325872 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = -0.23167181678539 * H2x1_1 + -0.65942738658946 * H2x1_2 +
-0.83280103611578 * H2x1_3 + -1.03301865685228 * H2x1_4 + 1.3401316289209 * H2x1_5 +
-1.98639459325872 * H2x1_6 ;
1082625   +   H3x1_1  = H3x1_1  +    -1.96226306174896 * H2x2_1
1082626   +          +     1.03065434267907 * H2x2_2  +    -0.02977552697407 * H2x2_3
1082627   +          +    -2.15633683205343 * H2x2_4  +    -0.16172049876123 * H2x2_5
1082628   +          +     2.04617275364668 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.96226306174896 * H2x2_1 + 1.03065434267907 * H2x2_2
+ -0.02977552697407 * H2x2_3 + -2.15633683205343 * H2x2_4 + -0.16172049876123 * H2x2_5 +
2.04617275364668 * H2x2_6 ;
1082629   +   H3x1_2  = H3x1_2  +     0.98825486325651 * H2x2_1
1082630   +          +    -0.45791784632486 * H2x2_2  +     -0.1004093258308 * H2x2_3
1082631   +          +     -0.9411693729369 * H2x2_4  +     -0.2302105458948 * H2x2_5
1082632   +          +    -0.37660795680674 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 0.98825486325651 * H2x2_1 + -0.45791784632486 * H2x2_2
+ -0.1004093258308 * H2x2_3 + -0.9411693729369 * H2x2_4 + -0.2302105458948 * H2x2_5 +
-0.37660795680674 * H2x2_6 ;
1082633   +   H3x1_3  = H3x1_3  +    -0.01929245635771 * H2x2_1
1082634   +          +     0.59176660505983 * H2x2_2  +     0.85345798669405 * H2x2_3
1082635   +          +    -0.29251716908915 * H2x2_4  +     0.62774918208489 * H2x2_5
1082636   +          +    -0.43453791992382 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.01929245635771 * H2x2_1 + 0.59176660505983 * H2x2_2
+ 0.85345798669405 * H2x2_3 + -0.29251716908915 * H2x2_4 + 0.62774918208489 * H2x2_5 +
-0.43453791992382 * H2x2_6 ;
1082637   +   H3x1_4  = H3x1_4  +    -0.93313067901041 * H2x2_1
1082638   +          +     0.79407052404273 * H2x2_2  +     1.63518575530242 * H2x2_3
1082639   +          +     1.19368615452563 * H2x2_4  +     0.43365061793519 * H2x2_5
1082640   +          +    -3.30381142208727 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + -0.93313067901041 * H2x2_1 + 0.79407052404273 * H2x2_2
+ 1.63518575530242 * H2x2_3 + 1.19368615452563 * H2x2_4 + 0.43365061793519 * H2x2_5 +
-3.30381142208727 * H2x2_6 ;
1082641   +   H3x1_5  = H3x1_5  +      0.2721747886066 * H2x2_1
1082642   +          +     0.29405186941774 * H2x2_2  +    -0.96425253045194 * H2x2_3
1082643   +          +    -0.34879018216113 * H2x2_4  +    -1.15330072605073 * H2x2_5
1082644   +          +    -0.34019675397366 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + 0.2721747886066 * H2x2_1 + 0.29405186941774 * H2x2_2 +
-0.96425253045194 * H2x2_3 + -0.34879018216113 * H2x2_4 + -1.15330072605073 * H2x2_5 +
-0.34019675397366 * H2x2_6 ;
1082645   +   H3x1_1  = H3x1_1  +     0.99938924001809 * H2x3_1
1082646   +          +    -0.28559857879809 * H2x3_2  +    -0.44648183712004 * H2x3_3
1082647   +          +    -0.23199698060307 * H2x3_4  +    -0.64346521755351 * H2x3_5
1082648   +          +     0.59340663088806 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.99938924001809 * H2x3_1 + -0.28559857879809 * H2x3_2
+ -0.44648183712004 * H2x3_3 + -0.23199698060307 * H2x3_4 + -0.64346521755351 * H2x3_5 +
0.59340663088806 * H2x3_6 ;
1082649   +   H3x1_2  = H3x1_2  +     1.61767718200144 * H2x3_1
1082650   +          +     0.59417860044733 * H2x3_2  +      1.9323992067722 * H2x3_3
1082651   +          +    -1.38224816012152 * H2x3_4  +    -2.04529937075447 * H2x3_5
1082652   +          +     0.67050797164115 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 + 1.61767718200144 * H2x3_1 + 0.59417860044733 * H2x3_2
+ 1.9323992067722 * H2x3_3 + -1.38224816012152 * H2x3_4 + -2.04529937075447 * H2x3_5 +
0.67050797164115 * H2x3_6 ;
1082653   +   H3x1_3  = H3x1_3  +    -0.69807909205706 * H2x3_1
1082654   +          +    -0.57895843216341 * H2x3_2  +    -0.16766418785512 * H2x3_3
1082655   +          +     0.40654327615846 * H2x3_4  +    -1.86698682195337 * H2x3_5
1082656   +          +    -0.51274988768251 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 + -0.69807909205706 * H2x3_1 + -0.57895843216341 *
H2x3_2 + -0.16766418785512 * H2x3_3 + 0.40654327615846 * H2x3_4 + -1.86698682195337 * H2x3_5 +
-0.51274988768251 * H2x3_6 ;
1082657   +   H3x1_4  = H3x1_4  +     0.48560830435522 * H2x3_1
1082658   +          +     -2.8037598804912 * H2x3_2  +    -0.30231415756008 * H2x3_3
1082659   +          +     2.41159952574381 * H2x3_4  +     0.62877424154604 * H2x3_5
1082660   +          +    -0.73773727947747 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 + 0.48560830435522 * H2x3_1 + -2.8037598804912 * H2x3_2
+ -0.30231415756008 * H2x3_3 + 2.41159952574381 * H2x3_4 + 0.62877424154604 * H2x3_5 +
-0.73773727947747 * H2x3_6 ;
1082661   +   H3x1_5  = H3x1_5  +    -0.87089276878422 * H2x3_1
1082662   +          +    -0.78003140915024 * H2x3_2  +    -1.46975503560585 * H2x3_3
1082663   +          +     1.87460778751879 * H2x3_4  +    -0.09219359612439 * H2x3_5
1082664   +          +    -1.07137645697526 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 + -0.87089276878422 * H2x3_1 + -0.78003140915024 *
H2x3_2 + -1.46975503560585 * H2x3_3 + 1.87460778751879 * H2x3_4 + -0.09219359612439 * H2x3_5 +
-1.07137645697526 * H2x3_6 ;
1082665   +   H3x1_1  =    -0.24118737469276 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -0.24118737469276 + H3x1_1 ;
1082666   +   H3x1_2  =     0.26844205496356 + H3x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0.26844205496356 + H3x1_2 ;
1082667   +   H3x1_3  =      1.6092325807607 + H3x1_3 ;
MPRINT(EM_DIAGRAM):   H3x1_3 = 1.6092325807607 + H3x1_3 ;
1082668   +   H3x1_4  =     0.55904829903808 + H3x1_4 ;
MPRINT(EM_DIAGRAM):   H3x1_4 = 0.55904829903808 + H3x1_4 ;
1082669   +   H3x1_5  =     1.39880629138148 + H3x1_5 ;
MPRINT(EM_DIAGRAM):   H3x1_5 = 1.39880629138148 + H3x1_5 ;
1082670   +   H3x1_6  = 0;
MPRINT(EM_DIAGRAM):   H3x1_6 = 0;
1082671   +   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 , H3x1_3 , H3x1_4 , H3x1_5 , H3x1_6 );
1082672   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082673   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1082674   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1082675   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1082676   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1082677   +   H3x1_3  = EXP(H3x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_3 = EXP(H3x1_3 - _MAX_);
1082678   +   _SUM_ = _SUM_ + H3x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_3 ;
1082679   +   H3x1_4  = EXP(H3x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_4 = EXP(H3x1_4 - _MAX_);
1082680   +   _SUM_ = _SUM_ + H3x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_4 ;
1082681   +   H3x1_5  = EXP(H3x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_5 = EXP(H3x1_5 - _MAX_);
1082682   +   _SUM_ = _SUM_ + H3x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_5 ;
1082683   +   H3x1_6  = EXP(H3x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_6 = EXP(H3x1_6 - _MAX_);
1082684   +   _SUM_ = _SUM_ + H3x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_6 ;
1082685   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1082686   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1082687   +   H3x1_3  = H3x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_3 = H3x1_3 / _SUM_;
1082688   +   H3x1_4  = H3x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_4 = H3x1_4 / _SUM_;
1082689   +   H3x1_5  = H3x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_5 = H3x1_5 / _SUM_;
1082690   +   H3x1_6  = H3x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_6 = H3x1_6 / _SUM_;
1082691   +END;
MPRINT(EM_DIAGRAM):   END;
1082692   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082693   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1082694   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1082695   +   H3x1_3  = .;
MPRINT(EM_DIAGRAM):   H3x1_3 = .;
1082696   +   H3x1_4  = .;
MPRINT(EM_DIAGRAM):   H3x1_4 = .;
1082697   +   H3x1_5  = .;
MPRINT(EM_DIAGRAM):   H3x1_5 = .;
1082698   +   H3x1_6  = .;
MPRINT(EM_DIAGRAM):   H3x1_6 = .;
1082699   +END;
MPRINT(EM_DIAGRAM):   END;
1082700   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082701   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1082702   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082703   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082704   +   H3x2_1  =     0.13469056275633 * H2x1_1  +    -1.31570873196603 * H2x1_2
1082705   +          +    -0.83004507775706 * H2x1_3  +     1.14954585467995 * H2x1_4
1082706   +          +     0.01234753333089 * H2x1_5  +     0.50683843245151 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 0.13469056275633 * H2x1_1 + -1.31570873196603 * H2x1_2 +
-0.83004507775706 * H2x1_3 + 1.14954585467995 * H2x1_4 + 0.01234753333089 * H2x1_5 +
0.50683843245151 * H2x1_6 ;
1082707   +   H3x2_2  =     2.58620633866114 * H2x1_1  +     0.37629863890202 * H2x1_2
1082708   +          +     0.34169762900278 * H2x1_3  +     1.24247313002596 * H2x1_4
1082709   +          +     -0.1965463932822 * H2x1_5  +    -0.00458488228083 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 2.58620633866114 * H2x1_1 + 0.37629863890202 * H2x1_2 +
0.34169762900278 * H2x1_3 + 1.24247313002596 * H2x1_4 + -0.1965463932822 * H2x1_5 +
-0.00458488228083 * H2x1_6 ;
1082710   +   H3x2_3  =    -2.01883694738218 * H2x1_1  +     0.83782353926562 * H2x1_2
1082711   +          +    -1.95119268200972 * H2x1_3  +    -1.04826190833003 * H2x1_4
1082712   +          +     1.66733023346498 * H2x1_5  +     0.23483419363088 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = -2.01883694738218 * H2x1_1 + 0.83782353926562 * H2x1_2 +
-1.95119268200972 * H2x1_3 + -1.04826190833003 * H2x1_4 + 1.66733023346498 * H2x1_5 +
0.23483419363088 * H2x1_6 ;
1082713   +   H3x2_4  =     0.40678642111393 * H2x1_1  +    -0.10557612663286 * H2x1_2
1082714   +          +    -0.34694532874387 * H2x1_3  +     -1.6967916788772 * H2x1_4
1082715   +          +     0.24026556349373 * H2x1_5  +    -0.69393637888423 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = 0.40678642111393 * H2x1_1 + -0.10557612663286 * H2x1_2 +
-0.34694532874387 * H2x1_3 + -1.6967916788772 * H2x1_4 + 0.24026556349373 * H2x1_5 +
-0.69393637888423 * H2x1_6 ;
1082716   +   H3x2_5  =    -1.48304630985783 * H2x1_1  +     0.87426655970556 * H2x1_2
1082717   +          +    -0.49899516599841 * H2x1_3  +    -1.94880978312007 * H2x1_4
1082718   +          +    -2.45275015055877 * H2x1_5  +    -0.03264500335093 * H2x1_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -1.48304630985783 * H2x1_1 + 0.87426655970556 * H2x1_2 +
-0.49899516599841 * H2x1_3 + -1.94880978312007 * H2x1_4 + -2.45275015055877 * H2x1_5 +
-0.03264500335093 * H2x1_6 ;
1082719   +   H3x2_1  = H3x2_1  +    -0.40915299509566 * H2x2_1
1082720   +          +     1.45952180668254 * H2x2_2  +     0.42420517277224 * H2x2_3
1082721   +          +    -0.79379446044158 * H2x2_4  +     0.73614212418439 * H2x2_5
1082722   +          +     -0.6527392657117 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -0.40915299509566 * H2x2_1 + 1.45952180668254 * H2x2_2
+ 0.42420517277224 * H2x2_3 + -0.79379446044158 * H2x2_4 + 0.73614212418439 * H2x2_5 +
-0.6527392657117 * H2x2_6 ;
1082723   +   H3x2_2  = H3x2_2  +    -1.62752321860626 * H2x2_1
1082724   +          +    -0.04689831325067 * H2x2_2  +    -2.87951125721119 * H2x2_3
1082725   +          +    -0.36181303609331 * H2x2_4  +     0.55999175715209 * H2x2_5
1082726   +          +    -0.40911363767301 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + -1.62752321860626 * H2x2_1 + -0.04689831325067 *
H2x2_2 + -2.87951125721119 * H2x2_3 + -0.36181303609331 * H2x2_4 + 0.55999175715209 * H2x2_5 +
-0.40911363767301 * H2x2_6 ;
1082727   +   H3x2_3  = H3x2_3  +     0.50766404641726 * H2x2_1
1082728   +          +     0.02747397544049 * H2x2_2  +    -1.35626517144826 * H2x2_3
1082729   +          +     0.23390260329386 * H2x2_4  +     -0.5025118845527 * H2x2_5
1082730   +          +    -1.14035867434772 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + 0.50766404641726 * H2x2_1 + 0.02747397544049 * H2x2_2
+ -1.35626517144826 * H2x2_3 + 0.23390260329386 * H2x2_4 + -0.5025118845527 * H2x2_5 +
-1.14035867434772 * H2x2_6 ;
1082731   +   H3x2_4  = H3x2_4  +     0.64958154360038 * H2x2_1
1082732   +          +     1.68671947742627 * H2x2_2  +    -0.42417215632785 * H2x2_3
1082733   +          +    -0.39675884102374 * H2x2_4  +     1.98354732887496 * H2x2_5
1082734   +          +    -1.32783167695801 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + 0.64958154360038 * H2x2_1 + 1.68671947742627 * H2x2_2
+ -0.42417215632785 * H2x2_3 + -0.39675884102374 * H2x2_4 + 1.98354732887496 * H2x2_5 +
-1.32783167695801 * H2x2_6 ;
1082735   +   H3x2_5  = H3x2_5  +     1.92075053147101 * H2x2_1
1082736   +          +     1.22293096034837 * H2x2_2  +    -0.74039853818796 * H2x2_3
1082737   +          +    -0.25033258903105 * H2x2_4  +     0.63358340091733 * H2x2_5
1082738   +          +     0.17488501957475 * H2x2_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 1.92075053147101 * H2x2_1 + 1.22293096034837 * H2x2_2
+ -0.74039853818796 * H2x2_3 + -0.25033258903105 * H2x2_4 + 0.63358340091733 * H2x2_5 +
0.17488501957475 * H2x2_6 ;
1082739   +   H3x2_1  = H3x2_1  +     0.88292932547634 * H2x3_1
1082740   +          +    -0.27631908402136 * H2x3_2  +     0.93133699792762 * H2x3_3
1082741   +          +     1.18769264917434 * H2x3_4  +    -0.88901652244884 * H2x3_5
1082742   +          +    -0.17544617255869 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + 0.88292932547634 * H2x3_1 + -0.27631908402136 * H2x3_2
+ 0.93133699792762 * H2x3_3 + 1.18769264917434 * H2x3_4 + -0.88901652244884 * H2x3_5 +
-0.17544617255869 * H2x3_6 ;
1082743   +   H3x2_2  = H3x2_2  +     0.71538502917742 * H2x3_1
1082744   +          +    -0.76848695288598 * H2x3_2  +     1.24503864708272 * H2x3_3
1082745   +          +    -0.93962158881999 * H2x3_4  +    -0.43383001812557 * H2x3_5
1082746   +          +     1.14672043219259 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 + 0.71538502917742 * H2x3_1 + -0.76848695288598 * H2x3_2
+ 1.24503864708272 * H2x3_3 + -0.93962158881999 * H2x3_4 + -0.43383001812557 * H2x3_5 +
1.14672043219259 * H2x3_6 ;
1082747   +   H3x2_3  = H3x2_3  +    -0.39933331346344 * H2x3_1
1082748   +          +      0.0019862182661 * H2x3_2  +    -0.60479718136768 * H2x3_3
1082749   +          +      1.3818804125218 * H2x3_4  +     0.13498986352108 * H2x3_5
1082750   +          +     1.02889511152823 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 + -0.39933331346344 * H2x3_1 + 0.0019862182661 * H2x3_2
+ -0.60479718136768 * H2x3_3 + 1.3818804125218 * H2x3_4 + 0.13498986352108 * H2x3_5 +
1.02889511152823 * H2x3_6 ;
1082751   +   H3x2_4  = H3x2_4  +    -1.24198502624302 * H2x3_1
1082752   +          +    -0.09061963757116 * H2x3_2  +    -0.70229381972412 * H2x3_3
1082753   +          +    -1.43988785716026 * H2x3_4  +     0.45188902401215 * H2x3_5
1082754   +          +     0.10073869982371 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 + -1.24198502624302 * H2x3_1 + -0.09061963757116 *
H2x3_2 + -0.70229381972412 * H2x3_3 + -1.43988785716026 * H2x3_4 + 0.45188902401215 * H2x3_5 +
0.10073869982371 * H2x3_6 ;
1082755   +   H3x2_5  = H3x2_5  +     0.13815223958312 * H2x3_1
1082756   +          +     0.38392032129472 * H2x3_2  +    -0.08374178846724 * H2x3_3
1082757   +          +     0.39613433726611 * H2x3_4  +     1.64049322745471 * H2x3_5
1082758   +          +     0.97496084656174 * H2x3_6 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 + 0.13815223958312 * H2x3_1 + 0.38392032129472 * H2x3_2
+ -0.08374178846724 * H2x3_3 + 0.39613433726611 * H2x3_4 + 1.64049322745471 * H2x3_5 +
0.97496084656174 * H2x3_6 ;
1082759   +   H3x2_1  =    -0.72845954974251 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.72845954974251 + H3x2_1 ;
1082760   +   H3x2_2  =     0.59148824718722 + H3x2_2 ;
MPRINT(EM_DIAGRAM):   H3x2_2 = 0.59148824718722 + H3x2_2 ;
1082761   +   H3x2_3  =     1.28031731320103 + H3x2_3 ;
MPRINT(EM_DIAGRAM):   H3x2_3 = 1.28031731320103 + H3x2_3 ;
1082762   +   H3x2_4  =    -0.11427038364635 + H3x2_4 ;
MPRINT(EM_DIAGRAM):   H3x2_4 = -0.11427038364635 + H3x2_4 ;
1082763   +   H3x2_5  =    -0.28699725292326 + H3x2_5 ;
MPRINT(EM_DIAGRAM):   H3x2_5 = -0.28699725292326 + H3x2_5 ;
1082764   +   H3x2_6  = 0;
MPRINT(EM_DIAGRAM):   H3x2_6 = 0;
1082765   +   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x2_1 , H3x2_2 , H3x2_3 , H3x2_4 , H3x2_5 , H3x2_6 );
1082766   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082767   +   H3x2_1  = EXP(H3x2_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_1 = EXP(H3x2_1 - _MAX_);
1082768   +   _SUM_ = _SUM_ + H3x2_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_1 ;
1082769   +   H3x2_2  = EXP(H3x2_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_2 = EXP(H3x2_2 - _MAX_);
1082770   +   _SUM_ = _SUM_ + H3x2_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_2 ;
1082771   +   H3x2_3  = EXP(H3x2_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_3 = EXP(H3x2_3 - _MAX_);
1082772   +   _SUM_ = _SUM_ + H3x2_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_3 ;
1082773   +   H3x2_4  = EXP(H3x2_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_4 = EXP(H3x2_4 - _MAX_);
1082774   +   _SUM_ = _SUM_ + H3x2_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_4 ;
1082775   +   H3x2_5  = EXP(H3x2_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_5 = EXP(H3x2_5 - _MAX_);
1082776   +   _SUM_ = _SUM_ + H3x2_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_5 ;
1082777   +   H3x2_6  = EXP(H3x2_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x2_6 = EXP(H3x2_6 - _MAX_);
1082778   +   _SUM_ = _SUM_ + H3x2_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x2_6 ;
1082779   +   H3x2_1  = H3x2_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 / _SUM_;
1082780   +   H3x2_2  = H3x2_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_2 = H3x2_2 / _SUM_;
1082781   +   H3x2_3  = H3x2_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_3 = H3x2_3 / _SUM_;
1082782   +   H3x2_4  = H3x2_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_4 = H3x2_4 / _SUM_;
1082783   +   H3x2_5  = H3x2_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_5 = H3x2_5 / _SUM_;
1082784   +   H3x2_6  = H3x2_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x2_6 = H3x2_6 / _SUM_;
1082785   +END;
MPRINT(EM_DIAGRAM):   END;
1082786   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082787   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1082788   +   H3x2_2  = .;
MPRINT(EM_DIAGRAM):   H3x2_2 = .;
1082789   +   H3x2_3  = .;
MPRINT(EM_DIAGRAM):   H3x2_3 = .;
1082790   +   H3x2_4  = .;
MPRINT(EM_DIAGRAM):   H3x2_4 = .;
1082791   +   H3x2_5  = .;
MPRINT(EM_DIAGRAM):   H3x2_5 = .;
1082792   +   H3x2_6  = .;
MPRINT(EM_DIAGRAM):   H3x2_6 = .;
1082793   +END;
MPRINT(EM_DIAGRAM):   END;
1082794   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082795   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1082796   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082797   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082798   +   H4x1_1  =     0.10986960182278 * H3x1_1  +    -0.10835805909937 * H3x1_2
1082799   +          +     1.78643376838566 * H3x1_3  +    -0.00067995179919 * H3x1_4
1082800   +          +     2.04711620528782 * H3x1_5  +    -0.66853997603718 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.10986960182278 * H3x1_1 + -0.10835805909937 * H3x1_2 +
1.78643376838566 * H3x1_3 + -0.00067995179919 * H3x1_4 + 2.04711620528782 * H3x1_5 +
-0.66853997603718 * H3x1_6 ;
1082801   +   H4x1_2  =    -0.17187141657369 * H3x1_1  +    -1.56897037747293 * H3x1_2
1082802   +          +    -1.38330818097338 * H3x1_3  +     3.94629669251083 * H3x1_4
1082803   +          +    -0.57201557221624 * H3x1_5  +     0.99276034828548 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = -0.17187141657369 * H3x1_1 + -1.56897037747293 * H3x1_2 +
-1.38330818097338 * H3x1_3 + 3.94629669251083 * H3x1_4 + -0.57201557221624 * H3x1_5 +
0.99276034828548 * H3x1_6 ;
1082804   +   H4x1_3  =      1.5223304212488 * H3x1_1  +    -0.33490912702371 * H3x1_2
1082805   +          +    -0.30324493540575 * H3x1_3  +    -1.23990036921669 * H3x1_4
1082806   +          +     0.77489370055267 * H3x1_5  +    -0.38609823936674 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.5223304212488 * H3x1_1 + -0.33490912702371 * H3x1_2 +
-0.30324493540575 * H3x1_3 + -1.23990036921669 * H3x1_4 + 0.77489370055267 * H3x1_5 +
-0.38609823936674 * H3x1_6 ;
1082807   +   H4x1_4  =    -0.75234452297837 * H3x1_1  +      1.1117782900703 * H3x1_2
1082808   +          +      1.0171911341496 * H3x1_3  +     2.31462824862723 * H3x1_4
1082809   +          +     1.05562639649812 * H3x1_5  +    -0.80603399686936 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -0.75234452297837 * H3x1_1 + 1.1117782900703 * H3x1_2 +
1.0171911341496 * H3x1_3 + 2.31462824862723 * H3x1_4 + 1.05562639649812 * H3x1_5 +
-0.80603399686936 * H3x1_6 ;
1082810   +   H4x1_5  =    -0.35441774309359 * H3x1_1  +     0.37408435161205 * H3x1_2
1082811   +          +    -0.79287886005891 * H3x1_3  +    -0.89695291885453 * H3x1_4
1082812   +          +     0.46220429367054 * H3x1_5  +    -1.56166867584216 * H3x1_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = -0.35441774309359 * H3x1_1 + 0.37408435161205 * H3x1_2 +
-0.79287886005891 * H3x1_3 + -0.89695291885453 * H3x1_4 + 0.46220429367054 * H3x1_5 +
-1.56166867584216 * H3x1_6 ;
1082813   +   H4x1_1  = H4x1_1  +    -1.12622282402713 * H3x2_1
1082814   +          +     2.43865739917959 * H3x2_2  +     1.62534005409988 * H3x2_3
1082815   +          +     0.83506165677151 * H3x2_4  +    -0.15894659563972 * H3x2_5
1082816   +          +     0.77216806897502 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -1.12622282402713 * H3x2_1 + 2.43865739917959 * H3x2_2
+ 1.62534005409988 * H3x2_3 + 0.83506165677151 * H3x2_4 + -0.15894659563972 * H3x2_5 +
0.77216806897502 * H3x2_6 ;
1082817   +   H4x1_2  = H4x1_2  +     0.96736353410956 * H3x2_1
1082818   +          +      1.6250281874285 * H3x2_2  +    -0.81418318229631 * H3x2_3
1082819   +          +     0.35282111325987 * H3x2_4  +     0.11187473980261 * H3x2_5
1082820   +          +     0.73971378600397 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 + 0.96736353410956 * H3x2_1 + 1.6250281874285 * H3x2_2 +
-0.81418318229631 * H3x2_3 + 0.35282111325987 * H3x2_4 + 0.11187473980261 * H3x2_5 +
0.73971378600397 * H3x2_6 ;
1082821   +   H4x1_3  = H4x1_3  +    -0.30588247178582 * H3x2_1
1082822   +          +     0.22302184288326 * H3x2_2  +    -0.15797620108073 * H3x2_3
1082823   +          +     1.18515955770896 * H3x2_4  +     0.43359240886537 * H3x2_5
1082824   +          +     0.90907054011344 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 + -0.30588247178582 * H3x2_1 + 0.22302184288326 * H3x2_2
+ -0.15797620108073 * H3x2_3 + 1.18515955770896 * H3x2_4 + 0.43359240886537 * H3x2_5 +
0.90907054011344 * H3x2_6 ;
1082825   +   H4x1_4  = H4x1_4  +    -0.26678025657796 * H3x2_1
1082826   +          +    -0.23171152283695 * H3x2_2  +    -0.72882061581264 * H3x2_3
1082827   +          +     0.68597418643333 * H3x2_4  +      0.6559090638639 * H3x2_5
1082828   +          +     0.95412028439169 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 + -0.26678025657796 * H3x2_1 + -0.23171152283695 *
H3x2_2 + -0.72882061581264 * H3x2_3 + 0.68597418643333 * H3x2_4 + 0.6559090638639 * H3x2_5 +
0.95412028439169 * H3x2_6 ;
1082829   +   H4x1_5  = H4x1_5  +    -0.77875602324955 * H3x2_1
1082830   +          +     -1.5646810153964 * H3x2_2  +    -0.53157591270506 * H3x2_3
1082831   +          +    -0.27917864191674 * H3x2_4  +    -1.10966192483404 * H3x2_5
1082832   +          +     -0.0058627670025 * H3x2_6 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 + -0.77875602324955 * H3x2_1 + -1.5646810153964 * H3x2_2
+ -0.53157591270506 * H3x2_3 + -0.27917864191674 * H3x2_4 + -1.10966192483404 * H3x2_5 +
-0.0058627670025 * H3x2_6 ;
1082833   +   H4x1_1  =     0.87937070574208 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 0.87937070574208 + H4x1_1 ;
1082834   +   H4x1_2  =     0.75203729660648 + H4x1_2 ;
MPRINT(EM_DIAGRAM):   H4x1_2 = 0.75203729660648 + H4x1_2 ;
1082835   +   H4x1_3  =     1.14889100908291 + H4x1_3 ;
MPRINT(EM_DIAGRAM):   H4x1_3 = 1.14889100908291 + H4x1_3 ;
1082836   +   H4x1_4  =    -1.71383624276913 + H4x1_4 ;
MPRINT(EM_DIAGRAM):   H4x1_4 = -1.71383624276913 + H4x1_4 ;
1082837   +   H4x1_5  =     0.22194774900585 + H4x1_5 ;
MPRINT(EM_DIAGRAM):   H4x1_5 = 0.22194774900585 + H4x1_5 ;
1082838   +   H4x1_6  = 0;
MPRINT(EM_DIAGRAM):   H4x1_6 = 0;
1082839   +   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H4x1_1 , H4x1_2 , H4x1_3 , H4x1_4 , H4x1_5 , H4x1_6 );
1082840   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082841   +   H4x1_1  = EXP(H4x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_1 = EXP(H4x1_1 - _MAX_);
1082842   +   _SUM_ = _SUM_ + H4x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_1 ;
1082843   +   H4x1_2  = EXP(H4x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_2 = EXP(H4x1_2 - _MAX_);
1082844   +   _SUM_ = _SUM_ + H4x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_2 ;
1082845   +   H4x1_3  = EXP(H4x1_3  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_3 = EXP(H4x1_3 - _MAX_);
1082846   +   _SUM_ = _SUM_ + H4x1_3 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_3 ;
1082847   +   H4x1_4  = EXP(H4x1_4  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_4 = EXP(H4x1_4 - _MAX_);
1082848   +   _SUM_ = _SUM_ + H4x1_4 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_4 ;
1082849   +   H4x1_5  = EXP(H4x1_5  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_5 = EXP(H4x1_5 - _MAX_);
1082850   +   _SUM_ = _SUM_ + H4x1_5 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_5 ;
1082851   +   H4x1_6  = EXP(H4x1_6  - _MAX_);
MPRINT(EM_DIAGRAM):   H4x1_6 = EXP(H4x1_6 - _MAX_);
1082852   +   _SUM_ = _SUM_ + H4x1_6 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H4x1_6 ;
1082853   +   H4x1_1  = H4x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 / _SUM_;
1082854   +   H4x1_2  = H4x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_2 = H4x1_2 / _SUM_;
1082855   +   H4x1_3  = H4x1_3  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_3 = H4x1_3 / _SUM_;
1082856   +   H4x1_4  = H4x1_4  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_4 = H4x1_4 / _SUM_;
1082857   +   H4x1_5  = H4x1_5  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_5 = H4x1_5 / _SUM_;
1082858   +   H4x1_6  = H4x1_6  / _SUM_;
MPRINT(EM_DIAGRAM):   H4x1_6 = H4x1_6 / _SUM_;
1082859   +END;
MPRINT(EM_DIAGRAM):   END;
1082860   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082861   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1082862   +   H4x1_2  = .;
MPRINT(EM_DIAGRAM):   H4x1_2 = .;
1082863   +   H4x1_3  = .;
MPRINT(EM_DIAGRAM):   H4x1_3 = .;
1082864   +   H4x1_4  = .;
MPRINT(EM_DIAGRAM):   H4x1_4 = .;
1082865   +   H4x1_5  = .;
MPRINT(EM_DIAGRAM):   H4x1_5 = .;
1082866   +   H4x1_6  = .;
MPRINT(EM_DIAGRAM):   H4x1_6 = .;
1082867   +END;
MPRINT(EM_DIAGRAM):   END;
1082868   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082869   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1082870   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082871   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1082872   +   P_DepVar1  =    -5.30721919155126 * H4x1_1  +     10.4301477552223 * H4x1_2
1082873   +          +    -3.40676330075486 * H4x1_3  +     0.07452634039202 * H4x1_4
1082874   +          +    -2.90585821687293 * H4x1_5  +    -2.63321710569292 * H4x1_6 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.30721919155126 * H4x1_1 + 10.4301477552223 * H4x1_2 +
-3.40676330075486 * H4x1_3 + 0.07452634039202 * H4x1_4 + -2.90585821687293 * H4x1_5 +
-2.63321710569292 * H4x1_6 ;
1082875   +   P_DepVar1  =    -2.93956196427421 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.93956196427421 + P_DepVar1 ;
1082876   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1082877   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1082878   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1082879   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1082880   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1082881   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1082882   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1082883   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1082884   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1082885   +END;
MPRINT(EM_DIAGRAM):   END;
1082886   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1082887   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1082888   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1082889   +END;
MPRINT(EM_DIAGRAM):   END;
1082890   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1082891   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1082892   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1082893   +END;
MPRINT(EM_DIAGRAM):   END;
1082894   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082895   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1082896   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1082897   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1082898   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1082899   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1082900   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1082901   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1082902   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1082903   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1082904   +END;
MPRINT(EM_DIAGRAM):   END;
1082905   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1082906   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1082907   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1082908   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1082909    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1082910    quit;
1082911    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1082912    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1082913    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1082914    retain ID 2 Node "AutoNeural28";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural28";
1082915    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1082916    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14351 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 14351 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082917    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1082918    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082919    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14351 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 14351 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1082920    proc sort data=EMWS8.AutoNeural28_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural28_variableset out=_temp2(keep=NAME
CREATOR);
1082921    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082922    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL28_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1082923    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1082924    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1082925    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1082926    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082927    proc contents data=EMWS8.AutoNeural28_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural28_train out=_meta(keep=NAME) noprint;
1082928    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 114 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1082929    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1082930    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082931    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 114 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 114 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082932    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1082933    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1082934    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082935    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 114 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 114 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082936    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1082937    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1082937  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 6863 rows and 5 columns.
 
1082938    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1082939    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1082940    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 6863 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 6863 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082941    filename _pref
1082941  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1082942    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1082943    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1082944   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1082945   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1082946   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1082947   +
1082948   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1082949   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1082950   +
1082951   +
1082952   +/*----G_Marital_Status begin----*/
1082953   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1082954   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1082955   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1082956   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1082957   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1082958   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1082959   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1082960   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1082961   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1082962   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1082963   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1082964   +end;
MPRINT(EM_DIAGRAM):   end;
1082965   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1082966   +/*----G_Marital_Status end----*/
1082967   +
1082968   +
1082969   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1082970   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1082971   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1082972    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1082973    quit;
1082974    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1082975    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1082976    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1082977    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1082978    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1082979    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082980    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1082981    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082982    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082983    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1082984    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082985    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082986    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1082987    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1082988    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1082989    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082990    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1082991    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1082992    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1082993    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082994    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082995    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1082996    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1082997    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1082998    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1082999    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083000    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083000  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1083001    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083002    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083003    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 6866 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083004    filename _pref
1083004  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1083005    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083006    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1083007   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1083008   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1083009   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1083010   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1083011   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1083012   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083013    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083014    quit;
1083015    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083016    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083017    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083018    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1083019    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083020    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083021    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083022    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083023    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1083024    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1083025    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083026    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083027    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083028    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083029    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083030    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083031    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1083032    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083033    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083034    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083035    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083036    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083037    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083038    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083039    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083040    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083041    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083041  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1083042    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083043    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083044    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 6870 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083045    filename _pref
1083045  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1083046    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083047    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1083048   +
1083049   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1083050   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1083050  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1083051   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1083052   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1083053   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1083054   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1083055   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083056    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083057    quit;
1083058    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083059    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083060    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083061    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1083062    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083063    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083064    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083065    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083066    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083067    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1083068    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083069    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083070    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083071    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083072    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083073    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083074    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1083075    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083076    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083077    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083078    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083079    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083080    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083081    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083082    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083083    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083084    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083084  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1083085    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083086    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083087    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 6909 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083088    filename _pref
1083088  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1083089    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083090    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1083091   +
1083092   +
1083093   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1083094   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1083095   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1083096   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1083097   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1083098   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083099   +
1083100   +
1083101   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1083102   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1083103   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1083104   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1083105   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1083106   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083107   +
1083108   +
1083109   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1083110   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1083111   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1083112   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1083113   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1083114   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083115   +
1083116   +
1083117   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1083118   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1083119   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1083120   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1083121   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1083122   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083123   +
1083124   +
1083125   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1083126   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1083127   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1083128   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1083129   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1083130   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083131   +
1083132   +
1083133   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1083134   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1083135   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1083136   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1083137   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1083138   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083139   +
1083140   +
1083141   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1083142   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1083143   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1083144   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1083145   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1083146   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083147   +
1083148   +
1083149   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1083150   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1083151   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1083152   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1083153   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1083154   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083155   +if
1083156   +_FILTERNORM1 not in ( '.')
1083157   + and
1083158   +_FILTERNORM2 not in ( '.')
1083159   + and
1083160   +_FILTERNORM3 not in ( '.')
1083161   + and
1083162   +_FILTERNORM4 not in ( '.')
1083163   + and
1083164   +_FILTERNORM5 not in ( '.')
1083165   + and
1083166   +_FILTERNORM6 not in ( '.')
1083167   + and
1083168   +_FILTERNORM7 not in ( ' ')
1083169   + and
1083170   +_FILTERNORM8 not in ( ' ')
1083171   +and
1083172   +( Dt_Customer ne .)
1083173   +and ( Income ne . and (Income<=107000))
1083174   +and ( Kidhome ne .)
1083175   +and ( MntFishProducts ne .)
1083176   +and ( MntFruits ne .)
1083177   +and ( MntGoldProds ne .)
1083178   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1083179   +and ( MntSweetProducts ne .)
1083180   +and ( MntWines ne .)
1083181   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1083182   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1083183   +and ( NumStorePurchases ne .)
1083184   +and ( NumWebPurchases ne .)
1083185   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1083186   +and ( Recency ne .)
1083187   +and ( Teenhome ne .)
1083188   +and ( Year_Birth ne .)
1083189   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1083190   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1083191   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1083192   +end;
MPRINT(EM_DIAGRAM):   end;
1083193   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1083194   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083195    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083196    quit;
1083197    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083198    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083199    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083200    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1083201    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083202    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083203    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083204    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083205    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083206    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1083207    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083208    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083209    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083210    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083211    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083212    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083213    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1083214    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083215    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083216    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083217    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083218    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083219    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083220    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083221    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083222    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083223    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083223  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1083224    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083225    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083226    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 6975 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083227    %macro varDept(fcmpdata=,id=);
1083228    %global nobs&id scoreFlag&id;
1083229    %let scoreFlag&id = 0;
1083230    %if &id=1 or ^&fcmpStart %then %do;
1083231    proc sort data=&fcmpdata out=_temp&id nodupkey;
1083232    by NAME;
1083233    where id=&id and LHS in( %let j=1;
1083234    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1083235    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1083236    "&var" %let j = %eval(&j+1);
1083237    %end;
1083238    );
1083239    run;
1083240    %let dsid = %sysfunc(open(_temp&id));
1083241    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083242    %let dsid = %sysfunc(close(&dsid));
1083243    %if &&nobs&id %then %do;
1083244    %let scoreFlag&id = 1;
1083245    %let fcmpStart = 1;
1083246    %end;
1083247    %else %let fcmpStart = 0;
1083248    %end;
1083249    %else %do;
1083250    proc sort data=&fcmpdata out=_tempid;
1083251    where id=&id;
1083252    by LHS;
1083253    run;
1083254    %let dsid = %sysfunc(open(_tempid));
1083255    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083256    %let dsid = %sysfunc(close(&dsid));
1083257    %if ^&&nobs&id %then %do;
1083258    proc datasets lib=work nolist;
1083259    delete _tempid;
1083260    run;
1083261    quit;
1083262    %end;
1083263    %else %do;
1083264    data _tempAll;
1083265    set %let j=%eval(&id-1);
1083266    %do x=1 %to &j;
1083267    %if &&nobs&x %then %do;
1083268    _temp&x %end;
1083269    %end;
1083270    ;
1083271    run;
1083272    proc sql;
1083273    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1083273  ! work._tempid p2 where p.name=p2.lhs;
1083274    quit;
1083275    data _temp&id;
1083276    set _temp&id;
1083277    where LHS ne '' and NAME ne '' and Node ne '';
1083278    run;
1083279    proc datasets lib=work nolist;
1083280    delete _tempAll;
1083281    run;
1083282    %let dsid = %sysfunc(open(_temp&id));
1083283    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083284    %let dsid = %sysfunc(close(&dsid));
1083285    %if ^&&nobs&id %then %do;
1083286    proc datasets lib=work nolist;
1083287    delete _temp&id;
1083288    run;
1083289    quit;
1083290    %end;
1083291    %else %do;
1083292    %let scoreFlag&id = 1;
1083293    data _temp&id;
1083294    set _temp&id;
1083295    where LHS ne NAME and node ne '';
1083296    run;
1083297    %let dsid = %sysfunc(open(_temp&id));
1083298    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083299    %let dsid = %sysfunc(close(&dsid));
1083300    %if ^&&nobs&id %then %do;
1083301    proc datasets lib=work nolist;
1083302    delete _temp&id;
1083303    run;
1083304    quit;
1083305    %end;
1083306    %else %do;
1083307    proc sort data=_temp&id nodupkey;
1083308    by LHS NAME;
1083309    run;
1083310    %end;
1083311    %end;
1083312    %end;
1083313    %end;
1083314    %mend varDept;
1083315    %macro optCode(outdata=fcmpdata);
1083316    %global fcmpStart;
1083317    %let fcmpStart = 0;
1083318    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1083319    %let NumNodes=9;
1083320    %do k=1 %to &NumNodes;
1083321    %vardept(fcmpdata=&outdata, id=&k);
1083322    %end;
1083323    %mend optCode;
1083324    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 234 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 160 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 74 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 74 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 74 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 74 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 75 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 74 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 77 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 74 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 114 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1083325    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1083326    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1083327    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1083328    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1083329    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1083330    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1083331    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1083332    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083333    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083334    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1083334  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1083335    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083336    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1083337    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1083338    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083339    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1083340    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1083341    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1083342    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083343    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1083344    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1083345    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1083346    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083347    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083348    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1083348  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1083349    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083350    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1083351    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1083352    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083353    filename _pref
1083353  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural27\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural27\EMPUBLISHSCORE.sas";
1083354    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083355    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural27\EMPUBLISHSCORE.sas.
1083356   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1083357   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1083358   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1083359   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1083360   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1083361   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1083362   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1083363   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1083364   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1083365   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1083366   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1083367   +LENGTH _WARN_ $4
1083368   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1083369   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1083370   +
1083371   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1083372   +
1083373   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1083374   +
1083375   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1083376   +
1083377   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1083378   +
1083379   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1083380   +
1083381   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1083382   +
1083383   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1083384   +
1083385   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1083386   +
1083387   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1083388   +
1083389   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1083390   +
1083391   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1083392   +
1083393   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1083394   +
1083395   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1083396   +
1083397   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1083398   +
1083399   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1083400   +
1083401   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1083402   +
1083403   +      label H1x1_5 = 'Hidden: H1x1_=5' ;
MPRINT(EM_DIAGRAM):   label H1x1_5 = 'Hidden: H1x1_=5' ;
1083404   +
1083405   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1083406   +
1083407   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1083408   +
1083409   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1083410   +
1083411   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1083412   +
1083413   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1083414   +
1083415   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1083416   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1083417   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1083418   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1083419   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1083420   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1083421   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1083422   +end;
MPRINT(EM_DIAGRAM):   end;
1083423   +else do;
MPRINT(EM_DIAGRAM):   else do;
1083424   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1083425   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1083426   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1083427   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1083428   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1083429   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1083430   +   end;
MPRINT(EM_DIAGRAM):   end;
1083431   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1083432   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1083433   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1083434   +   end;
MPRINT(EM_DIAGRAM):   end;
1083435   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1083436   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1083437   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1083438   +   end;
MPRINT(EM_DIAGRAM):   end;
1083439   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1083440   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1083441   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1083442   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1083443   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1083444   +   end;
MPRINT(EM_DIAGRAM):   end;
1083445   +end;
MPRINT(EM_DIAGRAM):   end;
1083446   +
1083447   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083448   +*** Checking missing input Interval
1083449   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1083450   +
1083451   +IF NMISS(
1083452   +   AcceptedCmpTotal ,
1083453   +   Frq ,
1083454   +   Income ,
1083455   +   Mnt ,
1083456   +   MntGoldProds ,
1083457   +   MntMeatProducts ,
1083458   +   MntWines ,
1083459   +   NumDistPurchases ,
1083460   +   RFMstat ,
1083461   +   RMntFrq ,
1083462   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1083463   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1083464   +
1083465   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1083466   +END;
MPRINT(EM_DIAGRAM):   END;
1083467   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083468   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1083469   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083470   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1083471   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1083472   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1083473   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1083474   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1083475   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1083476   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1083477   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1083478   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1083479   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1083480   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1083481   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1083482   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1083483   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1083484   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1083485   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1083486   +END;
MPRINT(EM_DIAGRAM):   END;
1083487   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1083488   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1083489   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1083490   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1083491   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1083492   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1083493   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1083494   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1083495   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1083496   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1083497   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1083498   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1083499   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1083500   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1083501   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1083502   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1083503   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1083504   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1083505   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1083506   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1083507   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1083508   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1083509   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1083510   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1083511   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1083512   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1083513   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1083514   +END;
MPRINT(EM_DIAGRAM):   END;
1083515   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083516   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1083517   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083518   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083519   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1083520   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083521   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1083522   +   H1x1_1  =    -0.18981728384316 * S_AcceptedCmpTotal
1083523   +          +     2.44575265018132 * S_Frq  +    -0.33258639871365 * S_Income
1083524   +          +    -1.51282513201415 * S_Mnt  +     0.06017420606179 *
1083525   +        S_MntGoldProds  +    -0.55274425550395 * S_MntMeatProducts
1083526   +          +     0.91858869924573 * S_MntWines  +    -1.95905223495165 *
1083527   +        S_NumDistPurchases  +     -0.2637023845598 * S_RFMstat
1083528   +          +     1.23283591446263 * S_RMntFrq  +    -0.07916044614039 *
1083529   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.18981728384316 * S_AcceptedCmpTotal + 2.44575265018132 *
S_Frq + -0.33258639871365 * S_Income + -1.51282513201415 * S_Mnt + 0.06017420606179 *
S_MntGoldProds + -0.55274425550395 * S_MntMeatProducts + 0.91858869924573 * S_MntWines +
-1.95905223495165 * S_NumDistPurchases + -0.2637023845598 * S_RFMstat + 1.23283591446263 *
S_RMntFrq + -0.07916044614039 * S_Recency ;
1083530   +   H1x1_2  =    -0.68309764555121 * S_AcceptedCmpTotal
1083531   +          +     0.14669436656758 * S_Frq  +     0.02315218376279 * S_Income
1083532   +          +    -4.21583355142014 * S_Mnt  +     0.19199314585125 *
1083533   +        S_MntGoldProds  +     2.55483645032568 * S_MntMeatProducts
1083534   +          +     0.82054382378306 * S_MntWines  +     0.29968014910707 *
1083535   +        S_NumDistPurchases  +     0.60687719454304 * S_RFMstat
1083536   +          +     0.83498030971653 * S_RMntFrq  +     0.50801279856495 *
1083537   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.68309764555121 * S_AcceptedCmpTotal + 0.14669436656758 *
S_Frq + 0.02315218376279 * S_Income + -4.21583355142014 * S_Mnt + 0.19199314585125 *
S_MntGoldProds + 2.55483645032568 * S_MntMeatProducts + 0.82054382378306 * S_MntWines +
0.29968014910707 * S_NumDistPurchases + 0.60687719454304 * S_RFMstat + 0.83498030971653 *
S_RMntFrq + 0.50801279856495 * S_Recency ;
1083538   +   H1x1_3  =     0.08829866742968 * S_AcceptedCmpTotal
1083539   +          +    -0.02323769496851 * S_Frq  +    -0.99617629114101 * S_Income
1083540   +          +    -4.64282306384023 * S_Mnt  +     0.04308696038528 *
1083541   +        S_MntGoldProds  +     2.31863620360623 * S_MntMeatProducts
1083542   +          +     0.16587338267425 * S_MntWines  +     1.02973533097984 *
1083543   +        S_NumDistPurchases  +     0.20343196580651 * S_RFMstat
1083544   +          +     0.94726928092138 * S_RMntFrq  +     0.03712585159749 *
1083545   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.08829866742968 * S_AcceptedCmpTotal + -0.02323769496851 *
S_Frq + -0.99617629114101 * S_Income + -4.64282306384023 * S_Mnt + 0.04308696038528 *
S_MntGoldProds + 2.31863620360623 * S_MntMeatProducts + 0.16587338267425 * S_MntWines +
1.02973533097984 * S_NumDistPurchases + 0.20343196580651 * S_RFMstat + 0.94726928092138 *
S_RMntFrq + 0.03712585159749 * S_Recency ;
1083546   +   H1x1_4  =     0.10061099283455 * S_AcceptedCmpTotal
1083547   +          +     1.72752905329456 * S_Frq  +    -0.50472344084228 * S_Income
1083548   +          +     1.07329017540495 * S_Mnt  +    -0.44517902573644 *
1083549   +        S_MntGoldProds  +    -1.57417593135497 * S_MntMeatProducts
1083550   +          +    -0.75359748699668 * S_MntWines  +    -1.09387259425684 *
1083551   +        S_NumDistPurchases  +    -0.81518874000435 * S_RFMstat
1083552   +          +     0.23368643717628 * S_RMntFrq  +    -0.30240544347672 *
1083553   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.10061099283455 * S_AcceptedCmpTotal + 1.72752905329456 *
S_Frq + -0.50472344084228 * S_Income + 1.07329017540495 * S_Mnt + -0.44517902573644 *
S_MntGoldProds + -1.57417593135497 * S_MntMeatProducts + -0.75359748699668 * S_MntWines +
-1.09387259425684 * S_NumDistPurchases + -0.81518874000435 * S_RFMstat + 0.23368643717628 *
S_RMntFrq + -0.30240544347672 * S_Recency ;
1083554   +   H1x1_5  =    -0.22817314877708 * S_AcceptedCmpTotal
1083555   +          +     0.28118539965414 * S_Frq  +     0.04846488460495 * S_Income
1083556   +          +     0.60106863054811 * S_Mnt  +    -0.06162179557217 *
1083557   +        S_MntGoldProds  +    -0.39180490439507 * S_MntMeatProducts
1083558   +          +    -0.21017068084579 * S_MntWines  +    -0.32161828113396 *
1083559   +        S_NumDistPurchases  +    -0.03465088483344 * S_RFMstat
1083560   +          +    -0.03147262277696 * S_RMntFrq  +     0.34128240879899 *
1083561   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_5 = -0.22817314877708 * S_AcceptedCmpTotal + 0.28118539965414 *
S_Frq + 0.04846488460495 * S_Income + 0.60106863054811 * S_Mnt + -0.06162179557217 *
S_MntGoldProds + -0.39180490439507 * S_MntMeatProducts + -0.21017068084579 * S_MntWines +
-0.32161828113396 * S_NumDistPurchases + -0.03465088483344 * S_RFMstat + -0.03147262277696 *
S_RMntFrq + 0.34128240879899 * S_Recency ;
1083562   +   H1x1_1  = H1x1_1  +     0.15249883445815 * G_Marital_Status0
1083563   +          +    -0.18818735950093 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.15249883445815 * G_Marital_Status0 +
-0.18818735950093 * G_Marital_Status1 ;
1083564   +   H1x1_2  = H1x1_2  +     1.59824663671134 * G_Marital_Status0
1083565   +          +     1.96669325047054 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 1.59824663671134 * G_Marital_Status0 +
1.96669325047054 * G_Marital_Status1 ;
1083566   +   H1x1_3  = H1x1_3  +    -0.31220761109652 * G_Marital_Status0
1083567   +          +     0.52212878383819 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.31220761109652 * G_Marital_Status0 +
0.52212878383819 * G_Marital_Status1 ;
1083568   +   H1x1_4  = H1x1_4  +    -1.92906338619158 * G_Marital_Status0
1083569   +          +    -1.25145208260948 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -1.92906338619158 * G_Marital_Status0 +
-1.25145208260948 * G_Marital_Status1 ;
1083570   +   H1x1_5  = H1x1_5  +    -0.18067263072436 * G_Marital_Status0
1083571   +          +    -0.07780771416761 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = H1x1_5 + -0.18067263072436 * G_Marital_Status0 +
-0.07780771416761 * G_Marital_Status1 ;
1083572   +   H1x1_1  =     1.46324697396327 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.46324697396327 + H1x1_1 ;
1083573   +   H1x1_2  =     1.36794472927517 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.36794472927517 + H1x1_2 ;
1083574   +   H1x1_3  =    -0.57612320445046 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.57612320445046 + H1x1_3 ;
1083575   +   H1x1_4  =    -1.53805674056235 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.53805674056235 + H1x1_4 ;
1083576   +   H1x1_5  =     0.35787040000513 + H1x1_5 ;
MPRINT(EM_DIAGRAM):   H1x1_5 = 0.35787040000513 + H1x1_5 ;
1083577   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1083578   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1083579   +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
1083580   +   H1x1_4  = SIN(H1x1_4 );
MPRINT(EM_DIAGRAM):   H1x1_4 = SIN(H1x1_4 );
1083581   +   H1x1_5  = SIN(H1x1_5 );
MPRINT(EM_DIAGRAM):   H1x1_5 = SIN(H1x1_5 );
1083582   +END;
MPRINT(EM_DIAGRAM):   END;
1083583   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1083584   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1083585   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1083586   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1083587   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1083588   +   H1x1_5  = .;
MPRINT(EM_DIAGRAM):   H1x1_5 = .;
1083589   +END;
MPRINT(EM_DIAGRAM):   END;
1083590   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083591   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1083592   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083593   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1083594   +   P_DepVar1  =    -2.75625949468408 * H1x1_1  +    -2.04123594690263 * H1x1_2
1083595   +          +     2.55595542456674 * H1x1_3  +     2.41628841604103 * H1x1_4
1083596   +          +      -11.39673341305 * H1x1_5 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.75625949468408 * H1x1_1 + -2.04123594690263 * H1x1_2 +
2.55595542456674 * H1x1_3 + 2.41628841604103 * H1x1_4 + -11.39673341305 * H1x1_5 ;
1083597   +   P_DepVar1  =     0.62420945009508 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.62420945009508 + P_DepVar1 ;
1083598   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1083599   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1083600   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1083601   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1083602   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1083603   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1083604   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1083605   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1083606   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1083607   +END;
MPRINT(EM_DIAGRAM):   END;
1083608   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1083609   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1083610   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1083611   +END;
MPRINT(EM_DIAGRAM):   END;
1083612   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1083613   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1083614   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1083615   +END;
MPRINT(EM_DIAGRAM):   END;
1083616   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083617   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1083618   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1083619   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1083620   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1083621   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1083622   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1083623   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1083624   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1083625   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1083626   +END;
MPRINT(EM_DIAGRAM):   END;
1083627   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1083628   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1083629   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1083630   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083631    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083632    quit;
1083633    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083634    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083635    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083636    retain ID 2 Node "AutoNeural27";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural27";
1083637    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083638    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 917 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 917 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083639    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083640    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083641    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 917 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 917 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083642    proc sort data=EMWS8.AutoNeural27_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural27_variableset out=_temp2(keep=NAME
CREATOR);
1083643    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083644    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL27_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083645    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083646    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083647    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083648    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083649    proc contents data=EMWS8.AutoNeural27_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural27_train out=_meta(keep=NAME) noprint;
1083650    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 59 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1083651    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083652    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083653    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 59 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 59 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083654    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083655    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083656    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083657    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 59 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 59 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083658    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083659    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083659  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 479 rows and 5 columns.
 
1083660    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083661    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083662    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 479 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 479 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083663    filename _pref
1083663  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1083664    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083665    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1083666   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1083667   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1083668   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1083669   +
1083670   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1083671   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1083672   +
1083673   +
1083674   +/*----G_Marital_Status begin----*/
1083675   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1083676   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1083677   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1083678   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1083679   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1083680   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1083681   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1083682   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1083683   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1083684   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1083685   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1083686   +end;
MPRINT(EM_DIAGRAM):   end;
1083687   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1083688   +/*----G_Marital_Status end----*/
1083689   +
1083690   +
1083691   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1083692   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1083693   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083694    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083695    quit;
1083696    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083697    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083698    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083699    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1083700    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083701    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083702    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083703    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083704    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083705    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1083706    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083707    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083708    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083709    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083710    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083711    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083712    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1083713    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1083714    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083715    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083716    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083717    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083718    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083719    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083720    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083721    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083722    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083722  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1083723    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083724    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083725    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 482 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083726    filename _pref
1083726  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1083727    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083728    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1083729   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1083730   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1083731   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1083732   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1083733   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1083734   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083735    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083736    quit;
1083737    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083738    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083739    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083740    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1083741    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083742    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083743    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083744    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083745    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083746    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1083747    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083748    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083749    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083750    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083751    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083752    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083753    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1083754    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083755    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083756    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083757    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083758    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083759    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083760    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083761    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083762    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083763    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083763  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1083764    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083765    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083766    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 486 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083767    filename _pref
1083767  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1083768    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083769    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1083770   +
1083771   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1083772   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1083772  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1083773   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1083774   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1083775   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1083776   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1083777   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083778    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083779    quit;
1083780    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083781    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083782    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083783    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1083784    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083785    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083786    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083787    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083788    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083789    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1083790    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083791    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083792    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083793    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083794    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083795    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083796    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1083797    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083798    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083799    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083800    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083801    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083802    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083803    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083804    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083805    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083806    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083806  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1083807    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083808    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083809    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 525 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083810    filename _pref
1083810  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1083811    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1083812    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1083813   +
1083814   +
1083815   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1083816   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1083817   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1083818   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1083819   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1083820   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083821   +
1083822   +
1083823   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1083824   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1083825   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1083826   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1083827   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1083828   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083829   +
1083830   +
1083831   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1083832   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1083833   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1083834   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1083835   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1083836   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083837   +
1083838   +
1083839   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1083840   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1083841   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1083842   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1083843   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1083844   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083845   +
1083846   +
1083847   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1083848   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1083849   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1083850   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1083851   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1083852   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083853   +
1083854   +
1083855   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1083856   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1083857   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1083858   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1083859   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1083860   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083861   +
1083862   +
1083863   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1083864   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1083865   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1083866   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1083867   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1083868   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083869   +
1083870   +
1083871   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1083872   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1083873   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1083874   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1083875   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1083876   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1083877   +if
1083878   +_FILTERNORM1 not in ( '.')
1083879   + and
1083880   +_FILTERNORM2 not in ( '.')
1083881   + and
1083882   +_FILTERNORM3 not in ( '.')
1083883   + and
1083884   +_FILTERNORM4 not in ( '.')
1083885   + and
1083886   +_FILTERNORM5 not in ( '.')
1083887   + and
1083888   +_FILTERNORM6 not in ( '.')
1083889   + and
1083890   +_FILTERNORM7 not in ( ' ')
1083891   + and
1083892   +_FILTERNORM8 not in ( ' ')
1083893   +and
1083894   +( Dt_Customer ne .)
1083895   +and ( Income ne . and (Income<=107000))
1083896   +and ( Kidhome ne .)
1083897   +and ( MntFishProducts ne .)
1083898   +and ( MntFruits ne .)
1083899   +and ( MntGoldProds ne .)
1083900   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1083901   +and ( MntSweetProducts ne .)
1083902   +and ( MntWines ne .)
1083903   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1083904   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1083905   +and ( NumStorePurchases ne .)
1083906   +and ( NumWebPurchases ne .)
1083907   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1083908   +and ( Recency ne .)
1083909   +and ( Teenhome ne .)
1083910   +and ( Year_Birth ne .)
1083911   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1083912   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1083913   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1083914   +end;
MPRINT(EM_DIAGRAM):   end;
1083915   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1083916   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1083917    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1083918    quit;
1083919    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1083920    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1083921    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1083922    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1083923    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1083924    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083925    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1083926    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083927    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083928    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1083929    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083930    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083931    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083932    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1083933    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1083934    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083935    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1083936    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083937    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1083938    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083939    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083940    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1083941    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1083942    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1083943    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083944    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1083945    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1083945  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1083946    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1083947    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1083948    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 591 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1083949    %macro varDept(fcmpdata=,id=);
1083950    %global nobs&id scoreFlag&id;
1083951    %let scoreFlag&id = 0;
1083952    %if &id=1 or ^&fcmpStart %then %do;
1083953    proc sort data=&fcmpdata out=_temp&id nodupkey;
1083954    by NAME;
1083955    where id=&id and LHS in( %let j=1;
1083956    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1083957    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1083958    "&var" %let j = %eval(&j+1);
1083959    %end;
1083960    );
1083961    run;
1083962    %let dsid = %sysfunc(open(_temp&id));
1083963    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083964    %let dsid = %sysfunc(close(&dsid));
1083965    %if &&nobs&id %then %do;
1083966    %let scoreFlag&id = 1;
1083967    %let fcmpStart = 1;
1083968    %end;
1083969    %else %let fcmpStart = 0;
1083970    %end;
1083971    %else %do;
1083972    proc sort data=&fcmpdata out=_tempid;
1083973    where id=&id;
1083974    by LHS;
1083975    run;
1083976    %let dsid = %sysfunc(open(_tempid));
1083977    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1083978    %let dsid = %sysfunc(close(&dsid));
1083979    %if ^&&nobs&id %then %do;
1083980    proc datasets lib=work nolist;
1083981    delete _tempid;
1083982    run;
1083983    quit;
1083984    %end;
1083985    %else %do;
1083986    data _tempAll;
1083987    set %let j=%eval(&id-1);
1083988    %do x=1 %to &j;
1083989    %if &&nobs&x %then %do;
1083990    _temp&x %end;
1083991    %end;
1083992    ;
1083993    run;
1083994    proc sql;
1083995    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1083995  ! work._tempid p2 where p.name=p2.lhs;
1083996    quit;
1083997    data _temp&id;
1083998    set _temp&id;
1083999    where LHS ne '' and NAME ne '' and Node ne '';
1084000    run;
1084001    proc datasets lib=work nolist;
1084002    delete _tempAll;
1084003    run;
1084004    %let dsid = %sysfunc(open(_temp&id));
1084005    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084006    %let dsid = %sysfunc(close(&dsid));
1084007    %if ^&&nobs&id %then %do;
1084008    proc datasets lib=work nolist;
1084009    delete _temp&id;
1084010    run;
1084011    quit;
1084012    %end;
1084013    %else %do;
1084014    %let scoreFlag&id = 1;
1084015    data _temp&id;
1084016    set _temp&id;
1084017    where LHS ne NAME and node ne '';
1084018    run;
1084019    %let dsid = %sysfunc(open(_temp&id));
1084020    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084021    %let dsid = %sysfunc(close(&dsid));
1084022    %if ^&&nobs&id %then %do;
1084023    proc datasets lib=work nolist;
1084024    delete _temp&id;
1084025    run;
1084026    quit;
1084027    %end;
1084028    %else %do;
1084029    proc sort data=_temp&id nodupkey;
1084030    by LHS NAME;
1084031    run;
1084032    %end;
1084033    %end;
1084034    %end;
1084035    %end;
1084036    %mend varDept;
1084037    %macro optCode(outdata=fcmpdata);
1084038    %global fcmpStart;
1084039    %let fcmpStart = 0;
1084040    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1084041    %let NumNodes=9;
1084042    %do k=1 %to &NumNodes;
1084043    %vardept(fcmpdata=&outdata, id=&k);
1084044    %end;
1084045    %mend optCode;
1084046    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 69 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 50 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 19 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 19 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 59 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1084047    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1084048    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1084049    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1084050    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084051    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1084052    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1084053    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1084054    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084055    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084056    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1084056  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1084057    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1084058    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1084059    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1084060    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084061    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1084062    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1084063    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1084064    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084065    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1084066    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1084067    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1084068    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084069    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084070    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1084070  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1084071    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084072    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1084073    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1084074    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084075    filename _pref
1084075  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas";
1084076    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084077    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural33\EMPUBLISHSCORE.sas.
1084078   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1084079   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1084080   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1084081   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1084082   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1084083   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1084084   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1084085   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1084086   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1084087   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1084088   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1084089   +LENGTH _WARN_ $4
1084090   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1084091   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1084092   +
1084093   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1084094   +
1084095   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1084096   +
1084097   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1084098   +
1084099   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1084100   +
1084101   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1084102   +
1084103   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1084104   +
1084105   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1084106   +
1084107   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1084108   +
1084109   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1084110   +
1084111   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1084112   +
1084113   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1084114   +
1084115   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1084116   +
1084117   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1084118   +
1084119   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1084120   +
1084121   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1084122   +
1084123   +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
1084124   +
1084125   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1084126   +
1084127   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1084128   +
1084129   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1084130   +
1084131   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1084132   +
1084133   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1084134   +
1084135   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1084136   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1084137   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1084138   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1084139   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1084140   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1084141   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084142   +end;
MPRINT(EM_DIAGRAM):   end;
1084143   +else do;
MPRINT(EM_DIAGRAM):   else do;
1084144   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1084145   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1084146   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1084147   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1084148   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1084149   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1084150   +   end;
MPRINT(EM_DIAGRAM):   end;
1084151   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1084152   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1084153   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1084154   +   end;
MPRINT(EM_DIAGRAM):   end;
1084155   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1084156   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1084157   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1084158   +   end;
MPRINT(EM_DIAGRAM):   end;
1084159   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1084160   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1084161   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1084162   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1084163   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084164   +   end;
MPRINT(EM_DIAGRAM):   end;
1084165   +end;
MPRINT(EM_DIAGRAM):   end;
1084166   +
1084167   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084168   +*** Checking missing input Interval
1084169   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1084170   +
1084171   +IF NMISS(
1084172   +   AcceptedCmpTotal ,
1084173   +   Frq ,
1084174   +   Income ,
1084175   +   Mnt ,
1084176   +   MntGoldProds ,
1084177   +   MntMeatProducts ,
1084178   +   MntWines ,
1084179   +   NumDistPurchases ,
1084180   +   RFMstat ,
1084181   +   RMntFrq ,
1084182   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1084183   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1084184   +
1084185   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084186   +END;
MPRINT(EM_DIAGRAM):   END;
1084187   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084188   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1084189   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084190   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084191   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1084192   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1084193   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1084194   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1084195   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1084196   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1084197   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1084198   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1084199   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1084200   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1084201   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1084202   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1084203   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1084204   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1084205   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1084206   +END;
MPRINT(EM_DIAGRAM):   END;
1084207   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1084208   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1084209   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1084210   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1084211   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1084212   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1084213   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1084214   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1084215   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1084216   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1084217   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1084218   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1084219   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1084220   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1084221   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1084222   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1084223   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1084224   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1084225   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1084226   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1084227   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1084228   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1084229   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1084230   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1084231   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1084232   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1084233   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1084234   +END;
MPRINT(EM_DIAGRAM):   END;
1084235   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084236   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1084237   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084238   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084239   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1084240   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084241   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084242   +   H1x1_1  =     0.33555011401553 * S_AcceptedCmpTotal
1084243   +          +    -3.02490159760157 * S_Frq  +    -0.12761482391665 * S_Income
1084244   +          +     -9.1169668394273 * S_Mnt  +     0.88214411094174 *
1084245   +        S_MntGoldProds  +     16.4212241447522 * S_MntMeatProducts
1084246   +          +     4.65784744010387 * S_MntWines  +     2.75620847659032 *
1084247   +        S_NumDistPurchases  +     5.10796074430888 * S_RFMstat
1084248   +          +    -0.15069444442326 * S_RMntFrq  +    -0.36037041233055 *
1084249   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33555011401553 * S_AcceptedCmpTotal + -3.02490159760157 *
S_Frq + -0.12761482391665 * S_Income + -9.1169668394273 * S_Mnt + 0.88214411094174 *
S_MntGoldProds + 16.4212241447522 * S_MntMeatProducts + 4.65784744010387 * S_MntWines +
2.75620847659032 * S_NumDistPurchases + 5.10796074430888 * S_RFMstat + -0.15069444442326 *
S_RMntFrq + -0.36037041233055 * S_Recency ;
1084250   +   H1x1_2  =     -6.2107002884316 * S_AcceptedCmpTotal
1084251   +          +      5.5991079844098 * S_Frq  +    -1.06506164052399 * S_Income
1084252   +          +     7.16823320768258 * S_Mnt  +     1.97115223638004 *
1084253   +        S_MntGoldProds  +     0.02973121977962 * S_MntMeatProducts
1084254   +          +     3.28931008157038 * S_MntWines  +    -3.02545356699096 *
1084255   +        S_NumDistPurchases  +    -0.45519831720714 * S_RFMstat
1084256   +          +     2.14788986039061 * S_RMntFrq  +     7.13033786501062 *
1084257   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -6.2107002884316 * S_AcceptedCmpTotal + 5.5991079844098 * S_Frq
+ -1.06506164052399 * S_Income + 7.16823320768258 * S_Mnt + 1.97115223638004 * S_MntGoldProds
+ 0.02973121977962 * S_MntMeatProducts + 3.28931008157038 * S_MntWines + -3.02545356699096 *
S_NumDistPurchases + -0.45519831720714 * S_RFMstat + 2.14788986039061 * S_RMntFrq +
7.13033786501062 * S_Recency ;
1084258   +   H1x1_3  =    -0.31707769589072 * S_AcceptedCmpTotal
1084259   +          +     -0.8436342869652 * S_Frq  +     0.04938014828703 * S_Income
1084260   +          +     0.41074885451072 * S_Mnt  +    -0.22835264468248 *
1084261   +        S_MntGoldProds  +     0.04154328332772 * S_MntMeatProducts
1084262   +          +    -0.63526276335269 * S_MntWines  +     0.16430041832418 *
1084263   +        S_NumDistPurchases  +    -0.01070081959406 * S_RFMstat
1084264   +          +    -1.56851833223581 * S_RMntFrq  +     0.62478865123427 *
1084265   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.31707769589072 * S_AcceptedCmpTotal + -0.8436342869652 *
S_Frq + 0.04938014828703 * S_Income + 0.41074885451072 * S_Mnt + -0.22835264468248 *
S_MntGoldProds + 0.04154328332772 * S_MntMeatProducts + -0.63526276335269 * S_MntWines +
0.16430041832418 * S_NumDistPurchases + -0.01070081959406 * S_RFMstat + -1.56851833223581 *
S_RMntFrq + 0.62478865123427 * S_Recency ;
1084266   +   H1x1_4  =     0.54144616315359 * S_AcceptedCmpTotal
1084267   +          +    -2.69605116285758 * S_Frq  +    -0.42453662943397 * S_Income
1084268   +          +    -0.95657675439363 * S_Mnt  +     0.24420189860131 *
1084269   +        S_MntGoldProds  +     2.44632795316553 * S_MntMeatProducts
1084270   +          +     -0.1454644222769 * S_MntWines  +     2.34899307919173 *
1084271   +        S_NumDistPurchases  +    -0.02462201574723 * S_RFMstat
1084272   +          +    -2.08470857931815 * S_RMntFrq  +    -0.76249328143214 *
1084273   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.54144616315359 * S_AcceptedCmpTotal + -2.69605116285758 *
S_Frq + -0.42453662943397 * S_Income + -0.95657675439363 * S_Mnt + 0.24420189860131 *
S_MntGoldProds + 2.44632795316553 * S_MntMeatProducts + -0.1454644222769 * S_MntWines +
2.34899307919173 * S_NumDistPurchases + -0.02462201574723 * S_RFMstat + -2.08470857931815 *
S_RMntFrq + -0.76249328143214 * S_Recency ;
1084274   +   H1x1_1  = H1x1_1  +     0.00660823494191 * G_Marital_Status0
1084275   +          +    -0.18825548425502 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.00660823494191 * G_Marital_Status0 +
-0.18825548425502 * G_Marital_Status1 ;
1084276   +   H1x1_2  = H1x1_2  +    -2.06051657300217 * G_Marital_Status0
1084277   +          +    -6.25782340834073 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -2.06051657300217 * G_Marital_Status0 +
-6.25782340834073 * G_Marital_Status1 ;
1084278   +   H1x1_3  = H1x1_3  +    -0.79419358160841 * G_Marital_Status0
1084279   +          +     0.34890327415646 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.79419358160841 * G_Marital_Status0 +
0.34890327415646 * G_Marital_Status1 ;
1084280   +   H1x1_4  = H1x1_4  +    -0.04651762606699 * G_Marital_Status0
1084281   +          +     0.31552155976549 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.04651762606699 * G_Marital_Status0 +
0.31552155976549 * G_Marital_Status1 ;
1084282   +   H1x1_1  =      9.5912267385355 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 9.5912267385355 + H1x1_1 ;
1084283   +   H1x1_2  =     -17.513407093022 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -17.513407093022 + H1x1_2 ;
1084284   +   H1x1_3  =     3.77110114695743 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 3.77110114695743 + H1x1_3 ;
1084285   +   H1x1_4  =    -1.34405555452152 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.34405555452152 + H1x1_4 ;
1084286   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1084287   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1084288   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1084289   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1084290   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1084291   +   H1x1_4  = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_4 = 1.0 / (1.0 + EXP(MIN( - H1x1_4 , _EXP_BAR)));
1084292   +END;
MPRINT(EM_DIAGRAM):   END;
1084293   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1084294   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1084295   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1084296   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1084297   +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
1084298   +END;
MPRINT(EM_DIAGRAM):   END;
1084299   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084300   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1084301   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084302   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084303   +   P_DepVar1  =     17.1648278730429 * H1x1_1  +    -5.41550544466459 * H1x1_2
1084304   +          +     -11.071053129929 * H1x1_3  +      10.744209891392 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 17.1648278730429 * H1x1_1 + -5.41550544466459 * H1x1_2 +
-11.071053129929 * H1x1_3 + 10.744209891392 * H1x1_4 ;
1084305   +   P_DepVar1  =    -12.0079203309727 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -12.0079203309727 + P_DepVar1 ;
1084306   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1084307   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1084308   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1084309   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1084310   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1084311   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1084312   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1084313   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1084314   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1084315   +END;
MPRINT(EM_DIAGRAM):   END;
1084316   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1084317   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1084318   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1084319   +END;
MPRINT(EM_DIAGRAM):   END;
1084320   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1084321   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1084322   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1084323   +END;
MPRINT(EM_DIAGRAM):   END;
1084324   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084325   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1084326   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084327   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1084328   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1084329   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1084330   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1084331   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1084332   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1084333   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1084334   +END;
MPRINT(EM_DIAGRAM):   END;
1084335   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1084336   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1084337   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1084338   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1084339    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1084340    quit;
1084341    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1084342    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1084343    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1084344    retain ID 2 Node "AutoNeural33";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural33";
1084345    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1084346    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 871 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 871 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084347    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1084348    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084349    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 871 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 871 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084350    proc sort data=EMWS8.AutoNeural33_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural33_variableset out=_temp2(keep=NAME
CREATOR);
1084351    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084352    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL33_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084353    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084354    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1084355    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1084356    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084357    proc contents data=EMWS8.AutoNeural33_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural33_train out=_meta(keep=NAME) noprint;
1084358    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 58 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1084359    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1084360    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084361    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 58 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 58 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084362    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084363    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1084364    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084365    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 58 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 58 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084366    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084367    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1084367  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 455 rows and 5 columns.
 
1084368    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
1084369    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1084370    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 455 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 455 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084371    filename _pref
1084371  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1084372    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084373    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1084374   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1084375   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1084376   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1084377   +
1084378   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1084379   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1084380   +
1084381   +
1084382   +/*----G_Marital_Status begin----*/
1084383   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1084384   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1084385   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1084386   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1084387   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1084388   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1084389   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1084390   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1084391   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1084392   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1084393   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1084394   +end;
MPRINT(EM_DIAGRAM):   end;
1084395   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1084396   +/*----G_Marital_Status end----*/
1084397   +
1084398   +
1084399   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1084400   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1084401   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1084402    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1084403    quit;
1084404    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1084405    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1084406    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1084407    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1084408    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1084409    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084410    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1084411    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084412    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084413    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1084414    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084415    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084416    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084417    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1084418    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1084419    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084420    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1084421    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1084422    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1084423    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084424    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084425    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084426    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1084427    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084428    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1084429    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084430    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1084430  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1084431    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084432    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1084433    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 458 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084434    filename _pref
1084434  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1084435    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084436    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1084437   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1084438   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1084439   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1084440   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1084441   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1084442   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1084443    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1084444    quit;
1084445    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1084446    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1084447    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1084448    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1084449    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1084450    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084451    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1084452    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084453    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084454    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1084455    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084456    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084457    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084458    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1084459    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1084460    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084461    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1084462    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1084463    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1084464    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084465    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084466    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084467    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1084468    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084469    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084470    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084471    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1084471  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1084472    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084473    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1084474    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 462 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084475    filename _pref
1084475  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1084476    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084477    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1084478   +
1084479   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1084480   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1084480  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1084481   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1084482   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1084483   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1084484   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1084485   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1084486    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1084487    quit;
1084488    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1084489    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1084490    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1084491    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1084492    set _temp;
The SAS System
 
MPRINT(EM_DIAGRAM):   set _temp;
1084493    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084494    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1084495    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084496    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084497    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1084498    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084499    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084500    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084501    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1084502    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1084503    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084504    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1084505    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084506    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1084507    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084508    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084509    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084510    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1084511    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084512    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084513    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084514    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1084514  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1084515    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084516    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1084517    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 501 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084518    filename _pref
1084518  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1084519    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084520    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1084521   +
1084522   +
1084523   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1084524   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1084525   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1084526   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1084527   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1084528   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084529   +
1084530   +
1084531   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1084532   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1084533   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1084534   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1084535   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1084536   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084537   +
1084538   +
1084539   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1084540   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1084541   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1084542   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1084543   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1084544   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084545   +
1084546   +
1084547   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1084548   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1084549   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1084550   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1084551   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1084552   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084553   +
1084554   +
1084555   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1084556   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1084557   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1084558   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1084559   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1084560   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084561   +
1084562   +
1084563   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1084564   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1084565   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1084566   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1084567   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1084568   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084569   +
1084570   +
1084571   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1084572   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1084573   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1084574   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1084575   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1084576   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084577   +
1084578   +
1084579   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1084580   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1084581   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1084582   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1084583   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1084584   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1084585   +if
1084586   +_FILTERNORM1 not in ( '.')
1084587   + and
1084588   +_FILTERNORM2 not in ( '.')
1084589   + and
1084590   +_FILTERNORM3 not in ( '.')
1084591   + and
1084592   +_FILTERNORM4 not in ( '.')
1084593   + and
1084594   +_FILTERNORM5 not in ( '.')
1084595   + and
1084596   +_FILTERNORM6 not in ( '.')
1084597   + and
1084598   +_FILTERNORM7 not in ( ' ')
1084599   + and
1084600   +_FILTERNORM8 not in ( ' ')
1084601   +and
1084602   +( Dt_Customer ne .)
1084603   +and ( Income ne . and (Income<=107000))
1084604   +and ( Kidhome ne .)
1084605   +and ( MntFishProducts ne .)
1084606   +and ( MntFruits ne .)
1084607   +and ( MntGoldProds ne .)
1084608   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1084609   +and ( MntSweetProducts ne .)
1084610   +and ( MntWines ne .)
1084611   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1084612   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1084613   +and ( NumStorePurchases ne .)
1084614   +and ( NumWebPurchases ne .)
1084615   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1084616   +and ( Recency ne .)
1084617   +and ( Teenhome ne .)
1084618   +and ( Year_Birth ne .)
1084619   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1084620   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1084621   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1084622   +end;
MPRINT(EM_DIAGRAM):   end;
1084623   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1084624   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1084625    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1084626    quit;
1084627    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1084628    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1084629    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1084630    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1084631    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1084632    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084633    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1084634    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084635    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084636    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1084637    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084638    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084639    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084640    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1084641    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1084642    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084643    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1084644    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1084645    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1084646    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084647    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084648    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1084649    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1084650    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1084651    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1084652    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084653    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1084653  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1084654    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084655    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1084656    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 567 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084657    %macro varDept(fcmpdata=,id=);
1084658    %global nobs&id scoreFlag&id;
1084659    %let scoreFlag&id = 0;
1084660    %if &id=1 or ^&fcmpStart %then %do;
1084661    proc sort data=&fcmpdata out=_temp&id nodupkey;
1084662    by NAME;
1084663    where id=&id and LHS in( %let j=1;
1084664    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1084665    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1084666    "&var" %let j = %eval(&j+1);
1084667    %end;
1084668    );
1084669    run;
1084670    %let dsid = %sysfunc(open(_temp&id));
1084671    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084672    %let dsid = %sysfunc(close(&dsid));
1084673    %if &&nobs&id %then %do;
1084674    %let scoreFlag&id = 1;
1084675    %let fcmpStart = 1;
1084676    %end;
1084677    %else %let fcmpStart = 0;
1084678    %end;
1084679    %else %do;
1084680    proc sort data=&fcmpdata out=_tempid;
1084681    where id=&id;
1084682    by LHS;
1084683    run;
1084684    %let dsid = %sysfunc(open(_tempid));
1084685    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084686    %let dsid = %sysfunc(close(&dsid));
1084687    %if ^&&nobs&id %then %do;
1084688    proc datasets lib=work nolist;
1084689    delete _tempid;
1084690    run;
1084691    quit;
1084692    %end;
1084693    %else %do;
1084694    data _tempAll;
1084695    set %let j=%eval(&id-1);
1084696    %do x=1 %to &j;
1084697    %if &&nobs&x %then %do;
1084698    _temp&x %end;
1084699    %end;
1084700    ;
1084701    run;
1084702    proc sql;
1084703    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1084703  ! work._tempid p2 where p.name=p2.lhs;
1084704    quit;
1084705    data _temp&id;
1084706    set _temp&id;
1084707    where LHS ne '' and NAME ne '' and Node ne '';
1084708    run;
1084709    proc datasets lib=work nolist;
1084710    delete _tempAll;
1084711    run;
1084712    %let dsid = %sysfunc(open(_temp&id));
1084713    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084714    %let dsid = %sysfunc(close(&dsid));
1084715    %if ^&&nobs&id %then %do;
1084716    proc datasets lib=work nolist;
1084717    delete _temp&id;
1084718    run;
1084719    quit;
1084720    %end;
1084721    %else %do;
1084722    %let scoreFlag&id = 1;
1084723    data _temp&id;
1084724    set _temp&id;
1084725    where LHS ne NAME and node ne '';
1084726    run;
1084727    %let dsid = %sysfunc(open(_temp&id));
1084728    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1084729    %let dsid = %sysfunc(close(&dsid));
1084730    %if ^&&nobs&id %then %do;
1084731    proc datasets lib=work nolist;
1084732    delete _temp&id;
1084733    run;
1084734    quit;
1084735    %end;
1084736    %else %do;
1084737    proc sort data=_temp&id nodupkey;
1084738    by LHS NAME;
1084739    run;
1084740    %end;
1084741    %end;
1084742    %end;
1084743    %end;
1084744    %mend varDept;
1084745    %macro optCode(outdata=fcmpdata);
1084746    %global fcmpStart;
1084747    %let fcmpStart = 0;
1084748    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1084749    %let NumNodes=9;
1084750    %do k=1 %to &NumNodes;
1084751    %vardept(fcmpdata=&outdata, id=&k);
1084752    %end;
1084753    %mend optCode;
1084754    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 48 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 18 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 18 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 18 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 18 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 19 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 18 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 21 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 18 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 58 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1084755    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1084756    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1084757    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1084758    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084759    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1084760    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1084761    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1084762    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084763    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084764    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1084764  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1084765    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084766    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1084767    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1084768    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084769    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1084770    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1084771    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1084772    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084773    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1084774    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1084775    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1084776    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084777    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1084778    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1084778  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1084779    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
1084780    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1084781    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1084782    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1084783    filename _pref
1084783  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural32\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural32\EMPUBLISHSCORE.sas";
1084784    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1084785    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural32\EMPUBLISHSCORE.sas.
1084786   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1084787   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1084788   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1084789   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1084790   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1084791   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1084792   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1084793   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1084794   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1084795   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1084796   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1084797   +LENGTH _WARN_ $4
1084798   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1084799   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1084800   +
1084801   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1084802   +
1084803   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1084804   +
1084805   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1084806   +
1084807   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1084808   +
1084809   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1084810   +
1084811   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1084812   +
1084813   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1084814   +
1084815   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1084816   +
1084817   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1084818   +
1084819   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1084820   +
1084821   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1084822   +
1084823   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1084824   +
1084825   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1084826   +
1084827   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1084828   +
1084829   +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
1084830   +
1084831   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1084832   +
1084833   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1084834   +
1084835   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1084836   +
1084837   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1084838   +
1084839   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1084840   +
1084841   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1084842   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1084843   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1084844   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1084845   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1084846   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1084847   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084848   +end;
MPRINT(EM_DIAGRAM):   end;
1084849   +else do;
MPRINT(EM_DIAGRAM):   else do;
1084850   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1084851   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1084852   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1084853   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1084854   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1084855   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1084856   +   end;
MPRINT(EM_DIAGRAM):   end;
1084857   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1084858   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1084859   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1084860   +   end;
MPRINT(EM_DIAGRAM):   end;
1084861   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1084862   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1084863   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1084864   +   end;
MPRINT(EM_DIAGRAM):   end;
1084865   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1084866   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1084867   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1084868   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1084869   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084870   +   end;
MPRINT(EM_DIAGRAM):   end;
1084871   +end;
MPRINT(EM_DIAGRAM):   end;
1084872   +
1084873   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084874   +*** Checking missing input Interval
1084875   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1084876   +
1084877   +IF NMISS(
1084878   +   AcceptedCmpTotal ,
1084879   +   Frq ,
1084880   +   Income ,
1084881   +   Mnt ,
1084882   +   MntGoldProds ,
1084883   +   MntMeatProducts ,
1084884   +   MntWines ,
1084885   +   NumDistPurchases ,
1084886   +   RFMstat ,
1084887   +   RMntFrq ,
1084888   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1084889   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1084890   +
1084891   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1084892   +END;
MPRINT(EM_DIAGRAM):   END;
1084893   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084894   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1084895   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084896   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084897   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1084898   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1084899   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1084900   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1084901   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1084902   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1084903   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1084904   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1084905   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1084906   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1084907   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1084908   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1084909   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1084910   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1084911   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1084912   +END;
MPRINT(EM_DIAGRAM):   END;
1084913   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1084914   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1084915   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1084916   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1084917   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1084918   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1084919   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1084920   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1084921   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1084922   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1084923   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1084924   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1084925   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1084926   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1084927   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1084928   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1084929   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1084930   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1084931   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1084932   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1084933   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1084934   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1084935   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1084936   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1084937   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1084938   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1084939   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1084940   +END;
MPRINT(EM_DIAGRAM):   END;
1084941   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084942   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1084943   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084944   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084945   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1084946   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084947   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084948   +   H1x1_1  =    -0.38956319781905 * S_AcceptedCmpTotal
1084949   +          +    -0.08624585416733 * S_Frq  +     0.14990044515556 * S_Income
1084950   +          +     1.26905422062144 * S_Mnt  +    -0.05830961868093 *
1084951   +        S_MntGoldProds  +    -0.45655804707903 * S_MntMeatProducts
1084952   +          +    -0.29008121030195 * S_MntWines  +    -0.52580257849932 *
1084953   +        S_NumDistPurchases  +     -0.1481404693781 * S_RFMstat
1084954   +          +    -0.49319351834455 * S_RMntFrq  +     0.54249594661515 *
1084955   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.38956319781905 * S_AcceptedCmpTotal + -0.08624585416733 *
S_Frq + 0.14990044515556 * S_Income + 1.26905422062144 * S_Mnt + -0.05830961868093 *
S_MntGoldProds + -0.45655804707903 * S_MntMeatProducts + -0.29008121030195 * S_MntWines +
-0.52580257849932 * S_NumDistPurchases + -0.1481404693781 * S_RFMstat + -0.49319351834455 *
S_RMntFrq + 0.54249594661515 * S_Recency ;
1084956   +   H1x1_2  =     0.38779821527892 * S_AcceptedCmpTotal
1084957   +          +    -1.22315175769362 * S_Frq  +      1.1802985172513 * S_Income
1084958   +          +     2.08508390361851 * S_Mnt  +     0.42839460332296 *
1084959   +        S_MntGoldProds  +      0.9001009517595 * S_MntMeatProducts
1084960   +          +     0.43882453107711 * S_MntWines  +    -0.77730415774439 *
1084961   +        S_NumDistPurchases  +    -0.48791819347803 * S_RFMstat
1084962   +          +    -0.74366268198551 * S_RMntFrq  +    -0.17482075484114 *
1084963   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.38779821527892 * S_AcceptedCmpTotal + -1.22315175769362 *
S_Frq + 1.1802985172513 * S_Income + 2.08508390361851 * S_Mnt + 0.42839460332296 *
S_MntGoldProds + 0.9001009517595 * S_MntMeatProducts + 0.43882453107711 * S_MntWines +
-0.77730415774439 * S_NumDistPurchases + -0.48791819347803 * S_RFMstat + -0.74366268198551 *
S_RMntFrq + -0.17482075484114 * S_Recency ;
1084964   +   H1x1_3  =    -0.22134549179782 * S_AcceptedCmpTotal
1084965   +          +    -0.06178114920397 * S_Frq  +     -1.4524474173679 * S_Income
1084966   +          +    -7.85805111281271 * S_Mnt  +    -0.25260256377303 *
1084967   +        S_MntGoldProds  +     2.24650170262612 * S_MntMeatProducts
1084968   +          +    -0.28495082016886 * S_MntWines  +     2.83659961242127 *
1084969   +        S_NumDistPurchases  +     0.42067169774523 * S_RFMstat
1084970   +          +     1.71392925516862 * S_RMntFrq  +    -0.09478915012781 *
1084971   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -0.22134549179782 * S_AcceptedCmpTotal + -0.06178114920397 *
S_Frq + -1.4524474173679 * S_Income + -7.85805111281271 * S_Mnt + -0.25260256377303 *
S_MntGoldProds + 2.24650170262612 * S_MntMeatProducts + -0.28495082016886 * S_MntWines +
2.83659961242127 * S_NumDistPurchases + 0.42067169774523 * S_RFMstat + 1.71392925516862 *
S_RMntFrq + -0.09478915012781 * S_Recency ;
1084972   +   H1x1_1  = H1x1_1  +    -0.22060541309937 * G_Marital_Status0
1084973   +          +    -0.46692703876881 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.22060541309937 * G_Marital_Status0 +
-0.46692703876881 * G_Marital_Status1 ;
1084974   +   H1x1_2  = H1x1_2  +     0.47416822018188 * G_Marital_Status0
1084975   +          +     -2.1058284684647 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.47416822018188 * G_Marital_Status0 +
-2.1058284684647 * G_Marital_Status1 ;
1084976   +   H1x1_3  = H1x1_3  +    -0.44803855270897 * G_Marital_Status0
1084977   +          +     1.41026185304551 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + -0.44803855270897 * G_Marital_Status0 +
1.41026185304551 * G_Marital_Status1 ;
1084978   +   H1x1_1  =     1.63085271667721 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.63085271667721 + H1x1_1 ;
1084979   +   H1x1_2  =     0.28277859846654 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.28277859846654 + H1x1_2 ;
1084980   +   H1x1_3  =     -1.8890871578635 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = -1.8890871578635 + H1x1_3 ;
1084981   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1084982   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1084983   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1084984   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1084985   +   H1x1_3  = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.0 / (1.0 + EXP(MIN( - H1x1_3 , _EXP_BAR)));
1084986   +END;
MPRINT(EM_DIAGRAM):   END;
1084987   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1084988   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1084989   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1084990   +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
1084991   +END;
MPRINT(EM_DIAGRAM):   END;
1084992   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084993   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1084994   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1084995   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1084996   +   P_DepVar1  =    -23.6822744769009 * H1x1_1  +     16.0380566008578 * H1x1_2
1084997   +          +     15.3446320724554 * H1x1_3 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -23.6822744769009 * H1x1_1 + 16.0380566008578 * H1x1_2 +
15.3446320724554 * H1x1_3 ;
1084998   +   P_DepVar1  =     0.67225691696469 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.67225691696469 + P_DepVar1 ;
1084999   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1085000   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1085001   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1085002   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1085003   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1085004   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1085005   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1085006   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1085007   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1085008   +END;
MPRINT(EM_DIAGRAM):   END;
1085009   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085010   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1085011   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1085012   +END;
MPRINT(EM_DIAGRAM):   END;
1085013   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1085014   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1085015   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1085016   +END;
MPRINT(EM_DIAGRAM):   END;
1085017   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085018   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1085019   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085020   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1085021   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1085022   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1085023   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1085024   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1085025   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1085026   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1085027   +END;
MPRINT(EM_DIAGRAM):   END;
1085028   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1085029   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1085030   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1085031   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085032    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085033    quit;
1085034    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085035    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085036    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085037    retain ID 2 Node "AutoNeural32";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural32";
1085038    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085039    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 791 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 791 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085040    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085041    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085042    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 791 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 791 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085043    proc sort data=EMWS8.AutoNeural32_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural32_variableset out=_temp2(keep=NAME
CREATOR);
1085044    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085045    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL32_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085046    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085047    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085048    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085049    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085050    proc contents data=EMWS8.AutoNeural32_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural32_train out=_meta(keep=NAME) noprint;
1085051    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 57 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085052    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085053    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085054    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 57 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 57 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085055    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085056    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085057    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085058    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 57 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 57 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085059    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085060    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085060  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 419 rows and 5 columns.
 
1085061    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085062    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085063    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 419 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 419 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085064    filename _pref
1085064  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1085065    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085066    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1085067   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1085068   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1085069   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1085070   +
1085071   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1085072   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1085073   +
1085074   +
1085075   +/*----G_Marital_Status begin----*/
1085076   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1085077   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1085078   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1085079   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1085080   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1085081   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1085082   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1085083   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1085084   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1085085   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1085086   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1085087   +end;
MPRINT(EM_DIAGRAM):   end;
1085088   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1085089   +/*----G_Marital_Status end----*/
1085090   +
1085091   +
1085092   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1085093   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1085094   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085095    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085096    quit;
1085097    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085098    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085099    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085100    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1085101    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085102    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
1085103    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085104    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085105    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085106    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1085107    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085108    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085109    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085110    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085111    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085112    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085113    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1085114    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1085115    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085116    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085117    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085118    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085119    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085120    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085121    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085122    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085123    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085123  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1085124    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085125    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085126    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 422 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085127    filename _pref
1085127  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1085128    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085129    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1085130   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1085131   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1085132   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1085133   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1085134   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1085135   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085136    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085137    quit;
1085138    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085139    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085140    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085141    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1085142    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085143    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085144    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085145    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085146    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085147    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1085148    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085149    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085150    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085151    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085152    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085153    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085154    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1085155    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
1085156    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085157    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085158    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085159    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085160    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085161    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085162    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085163    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085164    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085164  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1085165    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085166    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085167    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 426 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085168    filename _pref
1085168  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1085169    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085170    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1085171   +
1085172   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1085173   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1085173  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1085174   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1085175   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1085176   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1085177   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1085178   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085179    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085180    quit;
1085181    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085182    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085183    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085184    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1085185    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085186    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085187    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085188    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085189    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085190    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1085191    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085192    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085193    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085194    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085195    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085196    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085197    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1085198    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085199    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085200    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085201    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085202    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085203    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085204    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085205    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1085206    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085207    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085207  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1085208    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085209    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085210    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 465 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085211    filename _pref
1085211  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1085212    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085213    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1085214   +
1085215   +
1085216   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1085217   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1085218   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1085219   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1085220   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1085221   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085222   +
1085223   +
1085224   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1085225   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1085226   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1085227   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1085228   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1085229   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085230   +
1085231   +
1085232   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1085233   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1085234   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1085235   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1085236   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1085237   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085238   +
1085239   +
1085240   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1085241   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1085242   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1085243   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1085244   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1085245   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085246   +
1085247   +
1085248   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1085249   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1085250   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1085251   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1085252   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1085253   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085254   +
1085255   +
1085256   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1085257   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1085258   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1085259   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1085260   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1085261   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085262   +
1085263   +
1085264   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1085265   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1085266   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1085267   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1085268   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1085269   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085270   +
1085271   +
1085272   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1085273   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1085274   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1085275   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1085276   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1085277   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1085278   +if
1085279   +_FILTERNORM1 not in ( '.')
1085280   + and
1085281   +_FILTERNORM2 not in ( '.')
1085282   + and
1085283   +_FILTERNORM3 not in ( '.')
1085284   + and
1085285   +_FILTERNORM4 not in ( '.')
1085286   + and
1085287   +_FILTERNORM5 not in ( '.')
1085288   + and
1085289   +_FILTERNORM6 not in ( '.')
1085290   + and
1085291   +_FILTERNORM7 not in ( ' ')
1085292   + and
1085293   +_FILTERNORM8 not in ( ' ')
1085294   +and
1085295   +( Dt_Customer ne .)
1085296   +and ( Income ne . and (Income<=107000))
1085297   +and ( Kidhome ne .)
1085298   +and ( MntFishProducts ne .)
1085299   +and ( MntFruits ne .)
1085300   +and ( MntGoldProds ne .)
1085301   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1085302   +and ( MntSweetProducts ne .)
1085303   +and ( MntWines ne .)
1085304   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1085305   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1085306   +and ( NumStorePurchases ne .)
1085307   +and ( NumWebPurchases ne .)
1085308   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1085309   +and ( Recency ne .)
1085310   +and ( Teenhome ne .)
1085311   +and ( Year_Birth ne .)
1085312   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1085313   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1085314   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1085315   +end;
MPRINT(EM_DIAGRAM):   end;
1085316   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1085317   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085318    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085319    quit;
1085320    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085321    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085322    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085323    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1085324    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085325    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085326    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085327    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085328    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085329    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1085330    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085331    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085332    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085333    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085334    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085335    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085336    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1085337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1085338    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085339    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085340    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085341    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085342    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085343    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085344    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085345    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085346    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085346  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1085347    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085348    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085349    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 531 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085350    %macro varDept(fcmpdata=,id=);
1085351    %global nobs&id scoreFlag&id;
1085352    %let scoreFlag&id = 0;
1085353    %if &id=1 or ^&fcmpStart %then %do;
1085354    proc sort data=&fcmpdata out=_temp&id nodupkey;
1085355    by NAME;
1085356    where id=&id and LHS in( %let j=1;
1085357    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1085358    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1085359    "&var" %let j = %eval(&j+1);
1085360    %end;
1085361    );
1085362    run;
1085363    %let dsid = %sysfunc(open(_temp&id));
1085364    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1085365    %let dsid = %sysfunc(close(&dsid));
1085366    %if &&nobs&id %then %do;
1085367    %let scoreFlag&id = 1;
1085368    %let fcmpStart = 1;
1085369    %end;
1085370    %else %let fcmpStart = 0;
1085371    %end;
1085372    %else %do;
1085373    proc sort data=&fcmpdata out=_tempid;
1085374    where id=&id;
1085375    by LHS;
1085376    run;
1085377    %let dsid = %sysfunc(open(_tempid));
1085378    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1085379    %let dsid = %sysfunc(close(&dsid));
1085380    %if ^&&nobs&id %then %do;
1085381    proc datasets lib=work nolist;
1085382    delete _tempid;
1085383    run;
1085384    quit;
1085385    %end;
1085386    %else %do;
1085387    data _tempAll;
1085388    set %let j=%eval(&id-1);
1085389    %do x=1 %to &j;
1085390    %if &&nobs&x %then %do;
1085391    _temp&x %end;
1085392    %end;
1085393    ;
1085394    run;
1085395    proc sql;
1085396    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1085396  ! work._tempid p2 where p.name=p2.lhs;
1085397    quit;
1085398    data _temp&id;
1085399    set _temp&id;
1085400    where LHS ne '' and NAME ne '' and Node ne '';
1085401    run;
1085402    proc datasets lib=work nolist;
1085403    delete _tempAll;
1085404    run;
1085405    %let dsid = %sysfunc(open(_temp&id));
1085406    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1085407    %let dsid = %sysfunc(close(&dsid));
1085408    %if ^&&nobs&id %then %do;
1085409    proc datasets lib=work nolist;
1085410    delete _temp&id;
1085411    run;
1085412    quit;
1085413    %end;
1085414    %else %do;
1085415    %let scoreFlag&id = 1;
1085416    data _temp&id;
1085417    set _temp&id;
1085418    where LHS ne NAME and node ne '';
1085419    run;
1085420    %let dsid = %sysfunc(open(_temp&id));
1085421    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1085422    %let dsid = %sysfunc(close(&dsid));
1085423    %if ^&&nobs&id %then %do;
1085424    proc datasets lib=work nolist;
1085425    delete _temp&id;
1085426    run;
1085427    quit;
1085428    %end;
1085429    %else %do;
1085430    proc sort data=_temp&id nodupkey;
1085431    by LHS NAME;
1085432    run;
1085433    %end;
1085434    %end;
1085435    %end;
1085436    %end;
1085437    %mend varDept;
1085438    %macro optCode(outdata=fcmpdata);
1085439    %global fcmpStart;
1085440    %let fcmpStart = 0;
1085441    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1085442    %let NumNodes=9;
1085443    %do k=1 %to &NumNodes;
1085444    %vardept(fcmpdata=&outdata, id=&k);
1085445    %end;
1085446    %mend optCode;
1085447    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 63 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 46 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 17 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 17 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 17 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 17 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 18 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 17 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 17 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 57 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1085448    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1085449    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1085450    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1085451    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085452    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1085453    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1085454    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1085455    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085456    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085457    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1085457  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1085458    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085459    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1085460    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1085461    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085462    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1085463    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1085464    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1085465    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085466    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1085467    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1085468    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1085469    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085470    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085471    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1085471  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1085472    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085473    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1085474    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1085475    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085476    filename _pref
1085476  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMPUBLISHSCORE.sas";
1085477    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085478    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural31\EMPUBLISHSCORE.sas.
1085479   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1085480   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1085481   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1085482   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1085483   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1085484   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1085485   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1085486   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1085487   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1085488   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1085489   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1085490   +LENGTH _WARN_ $4
1085491   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1085492   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1085493   +
1085494   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1085495   +
1085496   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1085497   +
1085498   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1085499   +
1085500   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1085501   +
1085502   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1085503   +
1085504   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1085505   +
1085506   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1085507   +
1085508   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1085509   +
1085510   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1085511   +
1085512   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1085513   +
1085514   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1085515   +
1085516   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1085517   +
1085518   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1085519   +
1085520   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1085521   +
1085522   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1085523   +
1085524   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1085525   +
1085526   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1085527   +
1085528   +      label H1x3_2 = 'Hidden: H1x3_=2' ;
MPRINT(EM_DIAGRAM):   label H1x3_2 = 'Hidden: H1x3_=2' ;
1085529   +
1085530   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1085531   +
1085532   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1085533   +
1085534   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1085535   +
1085536   +      label H2x2_2 = 'Hidden: H2x2_=2' ;
MPRINT(EM_DIAGRAM):   label H2x2_2 = 'Hidden: H2x2_=2' ;
1085537   +
1085538   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1085539   +
1085540   +      label H3x1_2 = 'Hidden: H3x1_=2' ;
MPRINT(EM_DIAGRAM):   label H3x1_2 = 'Hidden: H3x1_=2' ;
1085541   +
1085542   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1085543   +
1085544   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1085545   +
1085546   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1085547   +
1085548   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1085549   +
1085550   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1085551   +
1085552   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1085553   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1085554   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1085555   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1085556   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1085557   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1085558   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1085559   +end;
MPRINT(EM_DIAGRAM):   end;
1085560   +else do;
MPRINT(EM_DIAGRAM):   else do;
1085561   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1085562   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1085563   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1085564   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1085565   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1085566   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1085567   +   end;
MPRINT(EM_DIAGRAM):   end;
1085568   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1085569   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1085570   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1085571   +   end;
MPRINT(EM_DIAGRAM):   end;
1085572   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1085573   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1085574   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1085575   +   end;
MPRINT(EM_DIAGRAM):   end;
1085576   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1085577   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1085578   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1085579   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1085580   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1085581   +   end;
MPRINT(EM_DIAGRAM):   end;
1085582   +end;
MPRINT(EM_DIAGRAM):   end;
1085583   +
1085584   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085585   +*** Checking missing input Interval
1085586   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1085587   +
1085588   +IF NMISS(
1085589   +   AcceptedCmpTotal ,
1085590   +   Frq ,
1085591   +   Income ,
1085592   +   Mnt ,
1085593   +   MntGoldProds ,
1085594   +   MntMeatProducts ,
1085595   +   MntWines ,
1085596   +   NumDistPurchases ,
1085597   +   RFMstat ,
1085598   +   RMntFrq ,
1085599   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1085600   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1085601   +
1085602   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1085603   +END;
MPRINT(EM_DIAGRAM):   END;
1085604   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085605   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1085606   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085607   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085608   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1085609   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1085610   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1085611   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1085612   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1085613   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1085614   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1085615   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1085616   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1085617   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1085618   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1085619   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1085620   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1085621   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1085622   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1085623   +END;
MPRINT(EM_DIAGRAM):   END;
1085624   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085625   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1085626   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1085627   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1085628   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1085629   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1085630   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1085631   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1085632   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1085633   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1085634   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1085635   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1085636   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1085637   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1085638   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1085639   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1085640   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1085641   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1085642   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1085643   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1085644   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1085645   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1085646   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1085647   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1085648   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1085649   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1085650   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1085651   +END;
MPRINT(EM_DIAGRAM):   END;
1085652   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085653   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1085654   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085655   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085656   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1085657   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085658   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085659   +   H1x1_1  =     0.03659823017812 * S_AcceptedCmpTotal
1085660   +          +    -1.19763341876145 * S_Frq  +     0.81238202822952 * S_Income
1085661   +          +     1.88011676145119 * S_Mnt  +     0.17620967209108 *
1085662   +        S_MntGoldProds  +    -0.01645582313184 * S_MntMeatProducts
1085663   +          +     0.51002049519212 * S_MntWines  +     0.25222197723244 *
1085664   +        S_NumDistPurchases  +     0.28056722928561 * S_RFMstat
1085665   +          +    -1.12243193103334 * S_RMntFrq  +    -0.37511560424314 *
1085666   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.03659823017812 * S_AcceptedCmpTotal + -1.19763341876145 *
S_Frq + 0.81238202822952 * S_Income + 1.88011676145119 * S_Mnt + 0.17620967209108 *
S_MntGoldProds + -0.01645582313184 * S_MntMeatProducts + 0.51002049519212 * S_MntWines +
0.25222197723244 * S_NumDistPurchases + 0.28056722928561 * S_RFMstat + -1.12243193103334 *
S_RMntFrq + -0.37511560424314 * S_Recency ;
1085667   +   H1x1_2  =     0.18983412995843 * S_AcceptedCmpTotal
1085668   +          +    -0.36018162246349 * S_Frq  +     0.01068760327542 * S_Income
1085669   +          +    -0.89719147415619 * S_Mnt  +     0.11241727599926 *
1085670   +        S_MntGoldProds  +     0.64236815353055 * S_MntMeatProducts
1085671   +          +     0.36278145113777 * S_MntWines  +     0.34466813565445 *
1085672   +        S_NumDistPurchases  +     0.05359534034679 * S_RFMstat
1085673   +          +     0.02704700607418 * S_RMntFrq  +     -0.3718472688023 *
1085674   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.18983412995843 * S_AcceptedCmpTotal + -0.36018162246349 *
S_Frq + 0.01068760327542 * S_Income + -0.89719147415619 * S_Mnt + 0.11241727599926 *
S_MntGoldProds + 0.64236815353055 * S_MntMeatProducts + 0.36278145113777 * S_MntWines +
0.34466813565445 * S_NumDistPurchases + 0.05359534034679 * S_RFMstat + 0.02704700607418 *
S_RMntFrq + -0.3718472688023 * S_Recency ;
1085675   +   H1x1_1  = H1x1_1  +     0.40642305557546 * G_Marital_Status0
1085676   +          +     -0.0248646279252 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.40642305557546 * G_Marital_Status0 +
-0.0248646279252 * G_Marital_Status1 ;
1085677   +   H1x1_2  = H1x1_2  +     0.16115803721995 * G_Marital_Status0
1085678   +          +     0.05904755469144 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + 0.16115803721995 * G_Marital_Status0 +
0.05904755469144 * G_Marital_Status1 ;
1085679   +   H1x1_1  =     0.33463349044957 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.33463349044957 + H1x1_1 ;
1085680   +   H1x1_2  =    -3.62976809107266 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -3.62976809107266 + H1x1_2 ;
1085681   +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
1085682   +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
1085683   +END;
MPRINT(EM_DIAGRAM):   END;
1085684   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085685   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1085686   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1085687   +END;
MPRINT(EM_DIAGRAM):   END;
1085688   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085689   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1085690   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085691   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085692   +   H1x2_1  =    -0.36010169192455 * S_AcceptedCmpTotal
1085693   +          +    -0.59887603386433 * S_Frq  +     0.50990837522658 * S_Income
1085694   +          +    -1.11866059151852 * S_Mnt  +     0.36285188228582 *
1085695   +        S_MntGoldProds  +     1.22856170475832 * S_MntMeatProducts
1085696   +          +     1.46123404932164 * S_MntWines  +    -0.01510122045686 *
1085697   +        S_NumDistPurchases  +     0.53310564732407 * S_RFMstat
1085698   +          +    -0.40691094193511 * S_RMntFrq  +     0.45756644061361 *
1085699   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.36010169192455 * S_AcceptedCmpTotal + -0.59887603386433 *
S_Frq + 0.50990837522658 * S_Income + -1.11866059151852 * S_Mnt + 0.36285188228582 *
S_MntGoldProds + 1.22856170475832 * S_MntMeatProducts + 1.46123404932164 * S_MntWines +
-0.01510122045686 * S_NumDistPurchases + 0.53310564732407 * S_RFMstat + -0.40691094193511 *
S_RMntFrq + 0.45756644061361 * S_Recency ;
1085700   +   H1x2_2  =    -0.17932261343465 * S_AcceptedCmpTotal
1085701   +          +     1.20080978426162 * S_Frq  +     0.18118647708641 * S_Income
1085702   +          +     0.31901116297924 * S_Mnt  +     0.02135897416621 *
1085703   +        S_MntGoldProds  +    -1.12534829348468 * S_MntMeatProducts
1085704   +          +     0.57649851666461 * S_MntWines  +    -1.46542585484816 *
1085705   +        S_NumDistPurchases  +    -0.20960777623629 * S_RFMstat
1085706   +          +      0.6962031545587 * S_RMntFrq  +     0.00840421006739 *
1085707   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -0.17932261343465 * S_AcceptedCmpTotal + 1.20080978426162 *
S_Frq + 0.18118647708641 * S_Income + 0.31901116297924 * S_Mnt + 0.02135897416621 *
S_MntGoldProds + -1.12534829348468 * S_MntMeatProducts + 0.57649851666461 * S_MntWines +
-1.46542585484816 * S_NumDistPurchases + -0.20960777623629 * S_RFMstat + 0.6962031545587 *
S_RMntFrq + 0.00840421006739 * S_Recency ;
1085708   +   H1x2_1  = H1x2_1  +    -0.05195034052296 * G_Marital_Status0
1085709   +          +     -0.2774675863976 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + -0.05195034052296 * G_Marital_Status0 +
-0.2774675863976 * G_Marital_Status1 ;
1085710   +   H1x2_2  = H1x2_2  +     0.01901604294952 * G_Marital_Status0
1085711   +          +      -0.277144006775 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = H1x2_2 + 0.01901604294952 * G_Marital_Status0 + -0.277144006775
* G_Marital_Status1 ;
1085712   +   H1x2_1  =     1.53233871423223 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.53233871423223 + H1x2_1 ;
1085713   +   H1x2_2  =     1.35238678006556 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.35238678006556 + H1x2_2 ;
1085714   +   H1x2_1  = SIN(H1x2_1 );
MPRINT(EM_DIAGRAM):   H1x2_1 = SIN(H1x2_1 );
1085715   +   H1x2_2  = SIN(H1x2_2 );
MPRINT(EM_DIAGRAM):   H1x2_2 = SIN(H1x2_2 );
1085716   +END;
MPRINT(EM_DIAGRAM):   END;
1085717   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085718   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1085719   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1085720   +END;
MPRINT(EM_DIAGRAM):   END;
1085721   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085722   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1085723   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085724   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085725   +   H1x3_1  =     1.63523210720409 * S_AcceptedCmpTotal
1085726   +          +     0.41751349520438 * S_Frq  +    -0.87449723255309 * S_Income
1085727   +          +    -0.47825070320724 * S_Mnt  +     0.76630810205636 *
1085728   +        S_MntGoldProds  +    -0.35835365889925 * S_MntMeatProducts
1085729   +          +    -1.27333688175297 * S_MntWines  +    -1.52770581313638 *
1085730   +        S_NumDistPurchases  +     0.86851574498866 * S_RFMstat
1085731   +          +     0.84614746872207 * S_RMntFrq  +    -1.64268632744477 *
1085732   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.63523210720409 * S_AcceptedCmpTotal + 0.41751349520438 *
S_Frq + -0.87449723255309 * S_Income + -0.47825070320724 * S_Mnt + 0.76630810205636 *
S_MntGoldProds + -0.35835365889925 * S_MntMeatProducts + -1.27333688175297 * S_MntWines +
-1.52770581313638 * S_NumDistPurchases + 0.86851574498866 * S_RFMstat + 0.84614746872207 *
S_RMntFrq + -1.64268632744477 * S_Recency ;
1085733   +   H1x3_2  =    -0.18638529120439 * S_AcceptedCmpTotal
1085734   +          +     0.76011175462816 * S_Frq  +     0.58495336465132 * S_Income
1085735   +          +     0.65856698208574 * S_Mnt  +     0.68781212622472 *
1085736   +        S_MntGoldProds  +    -1.09375532907934 * S_MntMeatProducts
1085737   +          +     1.39481639500189 * S_MntWines  +     0.26914802103737 *
1085738   +        S_NumDistPurchases  +    -2.20511156805519 * S_RFMstat
1085739   +          +     1.66705142994155 * S_RMntFrq  +    -0.36249885315985 *
1085740   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.18638529120439 * S_AcceptedCmpTotal + 0.76011175462816 *
S_Frq + 0.58495336465132 * S_Income + 0.65856698208574 * S_Mnt + 0.68781212622472 *
S_MntGoldProds + -1.09375532907934 * S_MntMeatProducts + 1.39481639500189 * S_MntWines +
0.26914802103737 * S_NumDistPurchases + -2.20511156805519 * S_RFMstat + 1.66705142994155 *
S_RMntFrq + -0.36249885315985 * S_Recency ;
1085741   +   H1x3_1  = H1x3_1  +     -0.2579393569494 * G_Marital_Status0
1085742   +          +    -1.04614665932456 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + -0.2579393569494 * G_Marital_Status0 +
-1.04614665932456 * G_Marital_Status1 ;
1085743   +   H1x3_2  = H1x3_2  +    -1.03096078089306 * G_Marital_Status0
1085744   +          +    -0.71974289565489 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = H1x3_2 + -1.03096078089306 * G_Marital_Status0 +
-0.71974289565489 * G_Marital_Status1 ;
1085745   +   H1x3_1  =    -0.91456189694636 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.91456189694636 + H1x3_1 ;
1085746   +   H1x3_2  =    -0.51701043559885 + H1x3_2 ;
MPRINT(EM_DIAGRAM):   H1x3_2 = -0.51701043559885 + H1x3_2 ;
1085747   +   H1x3_1  = SIN(H1x3_1 );
MPRINT(EM_DIAGRAM):   H1x3_1 = SIN(H1x3_1 );
1085748   +   H1x3_2  = SIN(H1x3_2 );
MPRINT(EM_DIAGRAM):   H1x3_2 = SIN(H1x3_2 );
1085749   +END;
MPRINT(EM_DIAGRAM):   END;
1085750   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085751   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1085752   +   H1x3_2  = .;
MPRINT(EM_DIAGRAM):   H1x3_2 = .;
1085753   +END;
MPRINT(EM_DIAGRAM):   END;
1085754   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085755   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1085756   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085757   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085758   +   H2x1_1  =     1.47132066677712 * H1x1_1  +      1.2723487532385 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.47132066677712 * H1x1_1 + 1.2723487532385 * H1x1_2 ;
1085759   +   H2x1_2  =     1.58711243971308 * H1x1_1  +      6.5189759089623 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.58711243971308 * H1x1_1 + 6.5189759089623 * H1x1_2 ;
1085760   +   H2x1_1  = H2x1_1  +     1.30878911727231 * H1x2_1
1085761   +          +     2.19496661698373 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.30878911727231 * H1x2_1 + 2.19496661698373 * H1x2_2 ;
1085762   +   H2x1_2  = H2x1_2  +    -3.82744270061369 * H1x2_1
1085763   +          +      1.3090956402929 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -3.82744270061369 * H1x2_1 + 1.3090956402929 * H1x2_2 ;
1085764   +   H2x1_1  = H2x1_1  +    -0.97307968271784 * H1x3_1
1085765   +          +     0.17025511053322 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + -0.97307968271784 * H1x3_1 + 0.17025511053322 * H1x3_2
;
1085766   +   H2x1_2  = H2x1_2  +    -0.00685159977192 * H1x3_1
1085767   +          +     0.53377830648041 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -0.00685159977192 * H1x3_1 + 0.53377830648041 * H1x3_2
;
1085768   +   H2x1_1  =    -2.88828567261654 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -2.88828567261654 + H2x1_1 ;
1085769   +   H2x1_2  =    -0.63666932052712 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -0.63666932052712 + H2x1_2 ;
1085770   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1085771   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1085772   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1085773   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1085774   +END;
MPRINT(EM_DIAGRAM):   END;
1085775   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085776   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1085777   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1085778   +END;
MPRINT(EM_DIAGRAM):   END;
1085779   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085780   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1085781   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085782   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085783   +   H2x2_1  =     -0.1591646734645 * H1x1_1  +     2.50898584287812 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.1591646734645 * H1x1_1 + 2.50898584287812 * H1x1_2 ;
1085784   +   H2x2_2  =    -1.04022138862095 * H1x1_1  +     -3.2120641538371 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -1.04022138862095 * H1x1_1 + -3.2120641538371 * H1x1_2 ;
1085785   +   H2x2_1  = H2x2_1  +     0.95364577994168 * H1x2_1
1085786   +          +     0.39917449615996 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + 0.95364577994168 * H1x2_1 + 0.39917449615996 * H1x2_2 ;
1085787   +   H2x2_2  = H2x2_2  +     0.34367752685876 * H1x2_1
1085788   +          +    -0.43345610313251 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + 0.34367752685876 * H1x2_1 + -0.43345610313251 * H1x2_2
;
1085789   +   H2x2_1  = H2x2_1  +    -0.21053791455319 * H1x3_1
1085790   +          +     1.30320774323126 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21053791455319 * H1x3_1 + 1.30320774323126 * H1x3_2
;
1085791   +   H2x2_2  = H2x2_2  +    -0.56776778702573 * H1x3_1
1085792   +          +     0.23307461428861 * H1x3_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = H2x2_2 + -0.56776778702573 * H1x3_1 + 0.23307461428861 * H1x3_2
;
1085793   +   H2x2_1  =    -0.57800274966727 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.57800274966727 + H2x2_1 ;
1085794   +   H2x2_2  =     -0.3490585254981 + H2x2_2 ;
MPRINT(EM_DIAGRAM):   H2x2_2 = -0.3490585254981 + H2x2_2 ;
1085795   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1085796   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1085797   +   H2x2_1  = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_1 = 1.0 / (1.0 + EXP(MIN( - H2x2_1 , _EXP_BAR)));
1085798   +   H2x2_2  = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x2_2 = 1.0 / (1.0 + EXP(MIN( - H2x2_2 , _EXP_BAR)));
1085799   +END;
MPRINT(EM_DIAGRAM):   END;
1085800   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085801   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1085802   +   H2x2_2  = .;
MPRINT(EM_DIAGRAM):   H2x2_2 = .;
1085803   +END;
MPRINT(EM_DIAGRAM):   END;
1085804   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085805   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1085806   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085807   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085808   +   H3x1_1  =     2.93892662286754 * H2x1_1  +     4.69530667636314 * H2x1_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = 2.93892662286754 * H2x1_1 + 4.69530667636314 * H2x1_2 ;
1085809   +   H3x1_1  = H3x1_1  +     0.63147427004529 * H2x2_1
1085810   +          +    -3.38971951524722 * H2x2_2 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + 0.63147427004529 * H2x2_1 + -3.38971951524722 * H2x2_2
;
1085811   +   H3x1_1  =    -2.10378320265168 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -2.10378320265168 + H3x1_1 ;
1085812   +   H3x1_2  = 0;
MPRINT(EM_DIAGRAM):   H3x1_2 = 0;
1085813   +   _MAX_ = MAX (H3x1_1 , H3x1_2 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (H3x1_1 , H3x1_2 );
1085814   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1085815   +   H3x1_1  = EXP(H3x1_1  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_1 = EXP(H3x1_1 - _MAX_);
1085816   +   _SUM_ = _SUM_ + H3x1_1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_1 ;
1085817   +   H3x1_2  = EXP(H3x1_2  - _MAX_);
MPRINT(EM_DIAGRAM):   H3x1_2 = EXP(H3x1_2 - _MAX_);
1085818   +   _SUM_ = _SUM_ + H3x1_2 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + H3x1_2 ;
1085819   +   H3x1_1  = H3x1_1  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 / _SUM_;
1085820   +   H3x1_2  = H3x1_2  / _SUM_;
MPRINT(EM_DIAGRAM):   H3x1_2 = H3x1_2 / _SUM_;
1085821   +END;
MPRINT(EM_DIAGRAM):   END;
1085822   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085823   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1085824   +   H3x1_2  = .;
MPRINT(EM_DIAGRAM):   H3x1_2 = .;
1085825   +END;
MPRINT(EM_DIAGRAM):   END;
1085826   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085827   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1085828   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085829   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1085830   +   P_DepVar1  =    -8.80200545202031 * H3x1_1  +    -0.19646708431763 * H3x1_2
1085831   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.80200545202031 * H3x1_1 + -0.19646708431763 * H3x1_2 ;
1085832   +   P_DepVar1  =     3.75158164611687 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.75158164611687 + P_DepVar1 ;
1085833   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1085834   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1085835   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1085836   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1085837   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1085838   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1085839   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1085840   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1085841   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1085842   +END;
MPRINT(EM_DIAGRAM):   END;
1085843   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1085844   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1085845   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1085846   +END;
MPRINT(EM_DIAGRAM):   END;
1085847   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1085848   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1085849   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1085850   +END;
MPRINT(EM_DIAGRAM):   END;
1085851   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085852   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1085853   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1085854   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1085855   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1085856   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1085857   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1085858   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1085859   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1085860   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1085861   +END;
MPRINT(EM_DIAGRAM):   END;
1085862   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1085863   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1085864   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1085865   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085866    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085867    quit;
1085868    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085869    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085870    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085871    retain ID 2 Node "AutoNeural31";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural31";
1085872    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085873    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1711 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1711 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085874    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085875    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085876    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1711 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1711 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085877    proc sort data=EMWS8.AutoNeural31_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural31_variableset out=_temp2(keep=NAME
CREATOR);
1085878    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085879    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL31_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085880    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085881    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085882    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085883    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085884    proc contents data=EMWS8.AutoNeural31_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural31_train out=_meta(keep=NAME) noprint;
1085885    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 66 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1085886    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085887    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085888    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 66 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 66 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085889    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085890    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085891    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085892    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 66 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 66 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085893    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085894    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085894  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 843 rows and 5 columns.
 
1085895    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085896    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085897    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 843 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 843 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085898    filename _pref
1085898  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1085899    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085900    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1085901   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1085902   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1085903   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1085904   +
1085905   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1085906   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1085907   +
1085908   +
1085909   +/*----G_Marital_Status begin----*/
1085910   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1085911   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1085912   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1085913   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1085914   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1085915   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1085916   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1085917   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1085918   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1085919   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1085920   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1085921   +end;
MPRINT(EM_DIAGRAM):   end;
1085922   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1085923   +/*----G_Marital_Status end----*/
1085924   +
1085925   +
1085926   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1085927   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1085928   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085929    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085930    quit;
1085931    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085932    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085933    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085934    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1085935    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085936    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085937    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085938    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085939    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085940    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1085941    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085942    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085943    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085944    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085945    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085946    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085947    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1085948    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1085949    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085950    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085951    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085952    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085953    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085954    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085955    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085956    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085957    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085957  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1085958    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085959    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1085960    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 846 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085961    filename _pref
1085961  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1085962    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1085963    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1085964   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1085965   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1085966   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1085967   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1085968   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1085969   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1085970    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1085971    quit;
1085972    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1085973    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1085974    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1085975    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1085976    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1085977    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085978    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1085979    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085980    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085981    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1085982    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085983    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085984    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085985    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1085986    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1085987    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085988    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1085989    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085990    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1085991    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085992    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1085993    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1085994    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1085995    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1085996    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1085997    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1085998    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1085998  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1085999    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086000    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086001    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 850 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086002    filename _pref
1086002  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1086003    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086004    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1086005   +
1086006   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1086007   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1086007  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1086008   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1086009   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1086010   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1086011   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1086012   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086013    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086014    quit;
1086015    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086016    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086017    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086018    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1086019    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086020    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086021    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086022    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086023    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086024    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1086025    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086026    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086027    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086028    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086029    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086030    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086031    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1086032    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086033    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086034    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086035    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086036    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086037    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086038    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086039    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086040    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086041    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086041  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1086042    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086043    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086044    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 889 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086045    filename _pref
1086045  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1086046    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086047    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1086048   +
1086049   +
1086050   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1086051   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1086052   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1086053   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1086054   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1086055   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086056   +
1086057   +
1086058   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1086059   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1086060   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1086061   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1086062   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1086063   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086064   +
1086065   +
1086066   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1086067   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1086068   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1086069   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1086070   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1086071   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086072   +
1086073   +
1086074   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1086075   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1086076   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1086077   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1086078   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1086079   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086080   +
1086081   +
1086082   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1086083   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1086084   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1086085   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1086086   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1086087   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086088   +
1086089   +
1086090   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1086091   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1086092   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1086093   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1086094   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1086095   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086096   +
1086097   +
1086098   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1086099   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1086100   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1086101   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1086102   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1086103   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086104   +
1086105   +
1086106   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1086107   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1086108   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1086109   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1086110   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1086111   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086112   +if
1086113   +_FILTERNORM1 not in ( '.')
1086114   + and
1086115   +_FILTERNORM2 not in ( '.')
1086116   + and
1086117   +_FILTERNORM3 not in ( '.')
1086118   + and
1086119   +_FILTERNORM4 not in ( '.')
1086120   + and
1086121   +_FILTERNORM5 not in ( '.')
1086122   + and
1086123   +_FILTERNORM6 not in ( '.')
1086124   + and
1086125   +_FILTERNORM7 not in ( ' ')
1086126   + and
1086127   +_FILTERNORM8 not in ( ' ')
1086128   +and
1086129   +( Dt_Customer ne .)
1086130   +and ( Income ne . and (Income<=107000))
1086131   +and ( Kidhome ne .)
1086132   +and ( MntFishProducts ne .)
1086133   +and ( MntFruits ne .)
1086134   +and ( MntGoldProds ne .)
1086135   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1086136   +and ( MntSweetProducts ne .)
1086137   +and ( MntWines ne .)
1086138   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1086139   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1086140   +and ( NumStorePurchases ne .)
1086141   +and ( NumWebPurchases ne .)
1086142   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1086143   +and ( Recency ne .)
1086144   +and ( Teenhome ne .)
1086145   +and ( Year_Birth ne .)
1086146   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1086147   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1086148   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1086149   +end;
MPRINT(EM_DIAGRAM):   end;
1086150   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1086151   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086152    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086153    quit;
1086154    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086155    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086156    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086157    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1086158    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086159    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086160    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086161    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086162    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086163    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1086164    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086165    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086166    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086167    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086168    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086169    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086170    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1086171    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1086172    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086173    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086174    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086175    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086176    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086177    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086178    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086179    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086180    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086180  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1086181    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086182    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086183    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 955 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086184    %macro varDept(fcmpdata=,id=);
1086185    %global nobs&id scoreFlag&id;
1086186    %let scoreFlag&id = 0;
1086187    %if &id=1 or ^&fcmpStart %then %do;
1086188    proc sort data=&fcmpdata out=_temp&id nodupkey;
1086189    by NAME;
1086190    where id=&id and LHS in( %let j=1;
1086191    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1086192    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1086193    "&var" %let j = %eval(&j+1);
1086194    %end;
1086195    );
1086196    run;
1086197    %let dsid = %sysfunc(open(_temp&id));
1086198    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1086199    %let dsid = %sysfunc(close(&dsid));
1086200    %if &&nobs&id %then %do;
1086201    %let scoreFlag&id = 1;
1086202    %let fcmpStart = 1;
1086203    %end;
1086204    %else %let fcmpStart = 0;
1086205    %end;
1086206    %else %do;
1086207    proc sort data=&fcmpdata out=_tempid;
1086208    where id=&id;
1086209    by LHS;
1086210    run;
1086211    %let dsid = %sysfunc(open(_tempid));
1086212    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1086213    %let dsid = %sysfunc(close(&dsid));
1086214    %if ^&&nobs&id %then %do;
1086215    proc datasets lib=work nolist;
1086216    delete _tempid;
1086217    run;
1086218    quit;
1086219    %end;
1086220    %else %do;
1086221    data _tempAll;
1086222    set %let j=%eval(&id-1);
1086223    %do x=1 %to &j;
1086224    %if &&nobs&x %then %do;
1086225    _temp&x %end;
1086226    %end;
1086227    ;
1086228    run;
1086229    proc sql;
1086230    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1086230  ! work._tempid p2 where p.name=p2.lhs;
1086231    quit;
1086232    data _temp&id;
1086233    set _temp&id;
1086234    where LHS ne '' and NAME ne '' and Node ne '';
1086235    run;
1086236    proc datasets lib=work nolist;
1086237    delete _tempAll;
1086238    run;
1086239    %let dsid = %sysfunc(open(_temp&id));
1086240    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1086241    %let dsid = %sysfunc(close(&dsid));
1086242    %if ^&&nobs&id %then %do;
1086243    proc datasets lib=work nolist;
1086244    delete _temp&id;
1086245    run;
1086246    quit;
1086247    %end;
1086248    %else %do;
1086249    %let scoreFlag&id = 1;
1086250    data _temp&id;
1086251    set _temp&id;
1086252    where LHS ne NAME and node ne '';
1086253    run;
1086254    %let dsid = %sysfunc(open(_temp&id));
1086255    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1086256    %let dsid = %sysfunc(close(&dsid));
1086257    %if ^&&nobs&id %then %do;
1086258    proc datasets lib=work nolist;
1086259    delete _temp&id;
1086260    run;
1086261    quit;
1086262    %end;
1086263    %else %do;
1086264    proc sort data=_temp&id nodupkey;
1086265    by LHS NAME;
1086266    run;
1086267    %end;
1086268    %end;
1086269    %end;
1086270    %end;
1086271    %mend varDept;
1086272    %macro optCode(outdata=fcmpdata);
1086273    %global fcmpStart;
1086274    %let fcmpStart = 0;
1086275    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1086276    %let NumNodes=9;
1086277    %do k=1 %to &NumNodes;
1086278    %vardept(fcmpdata=&outdata, id=&k);
1086279    %end;
1086280    %mend optCode;
1086281    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 90 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 64 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 26 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 26 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 27 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 29 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 66 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1086282    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1086283    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1086284    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1086285    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086286    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1086287    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1086288    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1086289    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086290    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086291    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1086291  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1086292    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086293    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1086294    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1086295    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086296    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1086297    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1086298    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1086299    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086300    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1086301    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1086302    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1086303    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086304    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086305    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1086305  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1086306    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086307    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1086308    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1086309    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086310    filename _pref
1086310  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMPUBLISHSCORE.sas";
1086311    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086312    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural30\EMPUBLISHSCORE.sas.
1086313   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1086314   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1086315   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1086316   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1086317   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1086318   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1086319   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1086320   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1086321   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1086322   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1086323   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1086324   +LENGTH _WARN_ $4
1086325   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
1086326   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1086327   +
1086328   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1086329   +
1086330   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1086331   +
1086332   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1086333   +
1086334   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1086335   +
1086336   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1086337   +
1086338   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1086339   +
1086340   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1086341   +
1086342   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1086343   +
1086344   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1086345   +
1086346   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1086347   +
1086348   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1086349   +
1086350   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1086351   +
1086352   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1086353   +
1086354   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1086355   +
1086356   +      label H1x3_1 = 'Hidden: H1x3_=1' ;
MPRINT(EM_DIAGRAM):   label H1x3_1 = 'Hidden: H1x3_=1' ;
1086357   +
1086358   +      label H1x4_1 = 'Hidden: H1x4_=1' ;
MPRINT(EM_DIAGRAM):   label H1x4_1 = 'Hidden: H1x4_=1' ;
1086359   +
1086360   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1086361   +
1086362   +      label H2x2_1 = 'Hidden: H2x2_=1' ;
MPRINT(EM_DIAGRAM):   label H2x2_1 = 'Hidden: H2x2_=1' ;
1086363   +
1086364   +      label H2x3_1 = 'Hidden: H2x3_=1' ;
MPRINT(EM_DIAGRAM):   label H2x3_1 = 'Hidden: H2x3_=1' ;
1086365   +
1086366   +      label H3x1_1 = 'Hidden: H3x1_=1' ;
MPRINT(EM_DIAGRAM):   label H3x1_1 = 'Hidden: H3x1_=1' ;
1086367   +
1086368   +      label H3x2_1 = 'Hidden: H3x2_=1' ;
MPRINT(EM_DIAGRAM):   label H3x2_1 = 'Hidden: H3x2_=1' ;
1086369   +
1086370   +      label H4x1_1 = 'Hidden: H4x1_=1' ;
MPRINT(EM_DIAGRAM):   label H4x1_1 = 'Hidden: H4x1_=1' ;
1086371   +
1086372   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1086373   +
1086374   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1086375   +
1086376   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1086377   +
1086378   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1086379   +
1086380   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1086381   +
1086382   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1086383   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1086384   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1086385   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1086386   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1086387   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1086388   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1086389   +end;
MPRINT(EM_DIAGRAM):   end;
1086390   +else do;
MPRINT(EM_DIAGRAM):   else do;
1086391   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1086392   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1086393   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1086394   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1086395   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1086396   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1086397   +   end;
MPRINT(EM_DIAGRAM):   end;
1086398   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1086399   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1086400   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1086401   +   end;
MPRINT(EM_DIAGRAM):   end;
1086402   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1086403   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1086404   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1086405   +   end;
MPRINT(EM_DIAGRAM):   end;
1086406   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1086407   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1086408   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1086409   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1086410   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1086411   +   end;
MPRINT(EM_DIAGRAM):   end;
1086412   +end;
MPRINT(EM_DIAGRAM):   end;
1086413   +
1086414   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086415   +*** Checking missing input Interval
1086416   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1086417   +
1086418   +IF NMISS(
1086419   +   AcceptedCmpTotal ,
1086420   +   Frq ,
1086421   +   Income ,
1086422   +   Mnt ,
1086423   +   MntGoldProds ,
1086424   +   MntMeatProducts ,
1086425   +   MntWines ,
1086426   +   NumDistPurchases ,
1086427   +   RFMstat ,
1086428   +   RMntFrq ,
1086429   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds ,
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1086430   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1086431   +
1086432   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1086433   +END;
MPRINT(EM_DIAGRAM):   END;
1086434   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086435   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1086436   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086437   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086438   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1086439   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1086440   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1086441   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1086442   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1086443   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1086444   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1086445   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1086446   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1086447   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1086448   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1086449   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1086450   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1086451   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1086452   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1086453   +END;
MPRINT(EM_DIAGRAM):   END;
1086454   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086455   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1086456   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1086457   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
1086458   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1086459   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1086460   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1086461   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1086462   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1086463   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1086464   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1086465   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1086466   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
1086467   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1086468   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1086469   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
1086470   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1086471   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1086472   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1086473   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1086474   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
1086475   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1086476   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1086477   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1086478   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1086479   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1086480   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1086481   +END;
MPRINT(EM_DIAGRAM):   END;
1086482   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086483   +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
1086484   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086485   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086486   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1086487   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086488   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086489   +   H1x1_1  =     0.04025840082513 * S_AcceptedCmpTotal
1086490   +          +     0.06318752729093 * S_Frq  +    -1.29545791179409 * S_Income
1086491   +          +    -7.11030940481191 * S_Mnt  +     0.43390451556969 *
1086492   +        S_MntGoldProds  +     1.69733563869673 * S_MntMeatProducts
1086493   +          +     0.48225589030087 * S_MntWines  +     2.50429846731068 *
1086494   +        S_NumDistPurchases  +     0.19831933540707 * S_RFMstat
1086495   +          +     0.96752741277283 * S_RMntFrq  +    -0.27394913723816 *
1086496   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.04025840082513 * S_AcceptedCmpTotal + 0.06318752729093 *
S_Frq + -1.29545791179409 * S_Income + -7.11030940481191 * S_Mnt + 0.43390451556969 *
S_MntGoldProds + 1.69733563869673 * S_MntMeatProducts + 0.48225589030087 * S_MntWines +
2.50429846731068 * S_NumDistPurchases + 0.19831933540707 * S_RFMstat + 0.96752741277283 *
S_RMntFrq + -0.27394913723816 * S_Recency ;
1086497   +   H1x1_1  = H1x1_1  +    -0.13186660711464 * G_Marital_Status0
1086498   +          +     0.76507926337086 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + -0.13186660711464 * G_Marital_Status0 +
0.76507926337086 * G_Marital_Status1 ;
1086499   +   H1x1_1  =    -2.07751077372903 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -2.07751077372903 + H1x1_1 ;
1086500   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086501   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086502   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1086503   +END;
MPRINT(EM_DIAGRAM):   END;
1086504   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086505   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1086506   +END;
MPRINT(EM_DIAGRAM):   END;
1086507   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086508   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1086509   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086510   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086511   +   H1x2_1  =     0.04623108287373 * S_AcceptedCmpTotal
1086512   +          +     0.51673349328259 * S_Frq  +    -0.55409697473564 * S_Income
1086513   +          +    -1.80152141029664 * S_Mnt  +    -0.01192709316085 *
1086514   +        S_MntGoldProds  +    -1.08887322486716 * S_MntMeatProducts
1086515   +          +    -0.54592829528894 * S_MntWines  +     0.87903819952137 *
1086516   +        S_NumDistPurchases  +     0.15549845875066 * S_RFMstat
1086517   +          +     0.64330086736687 * S_RMntFrq  +    -0.34615492895156 *
1086518   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.04623108287373 * S_AcceptedCmpTotal + 0.51673349328259 *
S_Frq + -0.55409697473564 * S_Income + -1.80152141029664 * S_Mnt + -0.01192709316085 *
S_MntGoldProds + -1.08887322486716 * S_MntMeatProducts + -0.54592829528894 * S_MntWines +
0.87903819952137 * S_NumDistPurchases + 0.15549845875066 * S_RFMstat + 0.64330086736687 *
S_RMntFrq + -0.34615492895156 * S_Recency ;
1086519   +   H1x2_1  = H1x2_1  +     0.04272112278258 * G_Marital_Status0
1086520   +          +     0.52128005949051 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = H1x2_1 + 0.04272112278258 * G_Marital_Status0 +
0.52128005949051 * G_Marital_Status1 ;
1086521   +   H1x2_1  =    -1.26211132425318 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -1.26211132425318 + H1x2_1 ;
1086522   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086523   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086524   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1086525   +END;
MPRINT(EM_DIAGRAM):   END;
1086526   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086527   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1086528   +END;
MPRINT(EM_DIAGRAM):   END;
1086529   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086530   +*** Writing the Node H1x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x3_ ;
1086531   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086532   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086533   +   H1x3_1  =    -0.31931196892076 * S_AcceptedCmpTotal
1086534   +          +     0.88013014607652 * S_Frq  +       2.380671405121 * S_Income
1086535   +          +    -1.76438631408259 * S_Mnt  +    -0.88002382547081 *
1086536   +        S_MntGoldProds  +     3.22143288077158 * S_MntMeatProducts
1086537   +          +    -1.46872497431142 * S_MntWines  +     4.48983574481035 *
1086538   +        S_NumDistPurchases  +     1.49229101598701 * S_RFMstat
1086539   +          +     0.86000773065844 * S_RMntFrq  +     0.41345680894813 *
1086540   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x3_1 = -0.31931196892076 * S_AcceptedCmpTotal + 0.88013014607652 *
S_Frq + 2.380671405121 * S_Income + -1.76438631408259 * S_Mnt + -0.88002382547081 *
S_MntGoldProds + 3.22143288077158 * S_MntMeatProducts + -1.46872497431142 * S_MntWines +
4.48983574481035 * S_NumDistPurchases + 1.49229101598701 * S_RFMstat + 0.86000773065844 *
S_RMntFrq + 0.41345680894813 * S_Recency ;
1086541   +   H1x3_1  = H1x3_1  +     0.24244728138592 * G_Marital_Status0
1086542   +          +     0.68199092237732 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = H1x3_1 + 0.24244728138592 * G_Marital_Status0 +
0.68199092237732 * G_Marital_Status1 ;
1086543   +   H1x3_1  =      0.8344057531016 + H1x3_1 ;
MPRINT(EM_DIAGRAM):   H1x3_1 = 0.8344057531016 + H1x3_1 ;
1086544   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086545   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086546   +   H1x3_1  = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x3_1 = 1.0 / (1.0 + EXP(MIN( - H1x3_1 , _EXP_BAR)));
1086547   +END;
MPRINT(EM_DIAGRAM):   END;
1086548   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086549   +   H1x3_1  = .;
MPRINT(EM_DIAGRAM):   H1x3_1 = .;
1086550   +END;
MPRINT(EM_DIAGRAM):   END;
1086551   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086552   +*** Writing the Node H1x4_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x4_ ;
1086553   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086554   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086555   +   H1x4_1  =    -0.13659878639954 * S_AcceptedCmpTotal
1086556   +          +     0.45428559765776 * S_Frq  +    -0.42693519984843 * S_Income
1086557   +          +      1.1792020785091 * S_Mnt  +     0.71939074066077 *
1086558   +        S_MntGoldProds  +    -0.72620231508443 * S_MntMeatProducts
1086559   +          +    -0.32426637270285 * S_MntWines  +    -0.38988807626314 *
1086560   +        S_NumDistPurchases  +    -3.02140616024044 * S_RFMstat
1086561   +          +     -0.8223455835322 * S_RMntFrq  +     0.94450643717764 *
1086562   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.13659878639954 * S_AcceptedCmpTotal + 0.45428559765776 *
S_Frq + -0.42693519984843 * S_Income + 1.1792020785091 * S_Mnt + 0.71939074066077 *
S_MntGoldProds + -0.72620231508443 * S_MntMeatProducts + -0.32426637270285 * S_MntWines +
-0.38988807626314 * S_NumDistPurchases + -3.02140616024044 * S_RFMstat + -0.8223455835322 *
S_RMntFrq + 0.94450643717764 * S_Recency ;
1086563   +   H1x4_1  = H1x4_1  +    -0.12208204500004 * G_Marital_Status0
1086564   +          +    -0.36246978080124 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = H1x4_1 + -0.12208204500004 * G_Marital_Status0 +
-0.36246978080124 * G_Marital_Status1 ;
1086565   +   H1x4_1  =    -0.95371898342722 + H1x4_1 ;
MPRINT(EM_DIAGRAM):   H1x4_1 = -0.95371898342722 + H1x4_1 ;
1086566   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086567   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086568   +   H1x4_1  = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x4_1 = 1.0 / (1.0 + EXP(MIN( - H1x4_1 , _EXP_BAR)));
1086569   +END;
MPRINT(EM_DIAGRAM):   END;
1086570   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086571   +   H1x4_1  = .;
MPRINT(EM_DIAGRAM):   H1x4_1 = .;
1086572   +END;
MPRINT(EM_DIAGRAM):   END;
1086573   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086574   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1086575   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086576   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086577   +   H2x1_1  =    -5.17307699680657 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -5.17307699680657 * H1x1_1 ;
1086578   +   H2x1_1  = H2x1_1  +     5.68206219040914 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 5.68206219040914 * H1x2_1 ;
1086579   +   H2x1_1  = H2x1_1  +      0.0671760867147 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 0.0671760867147 * H1x3_1 ;
1086580   +   H2x1_1  = H2x1_1  +     1.77797879568099 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 1.77797879568099 * H1x4_1 ;
1086581   +   H2x1_1  =    -1.18533244144823 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -1.18533244144823 + H2x1_1 ;
1086582   +   H2x1_1  = SIN(H2x1_1 );
MPRINT(EM_DIAGRAM):   H2x1_1 = SIN(H2x1_1 );
1086583   +END;
MPRINT(EM_DIAGRAM):   END;
1086584   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086585   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1086586   +END;
MPRINT(EM_DIAGRAM):   END;
1086587   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086588   +*** Writing the Node H2x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x2_ ;
1086589   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086590   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086591   +   H2x2_1  =    -0.10427732572046 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -0.10427732572046 * H1x1_1 ;
1086592   +   H2x2_1  = H2x2_1  +    -2.43600502591825 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.43600502591825 * H1x2_1 ;
1086593   +   H2x2_1  = H2x2_1  +    -2.36291758854448 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -2.36291758854448 * H1x3_1 ;
1086594   +   H2x2_1  = H2x2_1  +    -0.21725276506237 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = H2x2_1 + -0.21725276506237 * H1x4_1 ;
1086595   +   H2x2_1  =     -1.6479184469931 + H2x2_1 ;
MPRINT(EM_DIAGRAM):   H2x2_1 = -1.6479184469931 + H2x2_1 ;
1086596   +   H2x2_1  = SIN(H2x2_1 );
MPRINT(EM_DIAGRAM):   H2x2_1 = SIN(H2x2_1 );
1086597   +END;
MPRINT(EM_DIAGRAM):   END;
1086598   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086599   +   H2x2_1  = .;
MPRINT(EM_DIAGRAM):   H2x2_1 = .;
1086600   +END;
MPRINT(EM_DIAGRAM):   END;
1086601   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086602   +*** Writing the Node H2x3_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x3_ ;
1086603   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086604   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086605   +   H2x3_1  =    -2.55881911263862 * H1x1_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.55881911263862 * H1x1_1 ;
1086606   +   H2x3_1  = H2x3_1  +    -1.36800479963026 * H1x2_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -1.36800479963026 * H1x2_1 ;
1086607   +   H2x3_1  = H2x3_1  +     2.49318998831913 * H1x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + 2.49318998831913 * H1x3_1 ;
1086608   +   H2x3_1  = H2x3_1  +     -0.2723650813761 * H1x4_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = H2x3_1 + -0.2723650813761 * H1x4_1 ;
1086609   +   H2x3_1  =    -2.02002422056859 + H2x3_1 ;
MPRINT(EM_DIAGRAM):   H2x3_1 = -2.02002422056859 + H2x3_1 ;
1086610   +   H2x3_1  = SIN(H2x3_1 );
MPRINT(EM_DIAGRAM):   H2x3_1 = SIN(H2x3_1 );
1086611   +END;
MPRINT(EM_DIAGRAM):   END;
1086612   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086613   +   H2x3_1  = .;
MPRINT(EM_DIAGRAM):   H2x3_1 = .;
1086614   +END;
MPRINT(EM_DIAGRAM):   END;
1086615   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086616   +*** Writing the Node H3x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x1_ ;
1086617   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086618   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086619   +   H3x1_1  =    -5.17928987039105 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -5.17928987039105 * H2x1_1 ;
1086620   +   H3x1_1  = H3x1_1  +    -4.99188815628878 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -4.99188815628878 * H2x2_1 ;
1086621   +   H3x1_1  = H3x1_1  +    -1.59478766396441 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = H3x1_1 + -1.59478766396441 * H2x3_1 ;
1086622   +   H3x1_1  =    -1.17125580012514 + H3x1_1 ;
MPRINT(EM_DIAGRAM):   H3x1_1 = -1.17125580012514 + H3x1_1 ;
1086623   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086624   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086625   +   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x1_1 = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
1086626   +END;
MPRINT(EM_DIAGRAM):   END;
1086627   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086628   +   H3x1_1  = .;
MPRINT(EM_DIAGRAM):   H3x1_1 = .;
1086629   +END;
MPRINT(EM_DIAGRAM):   END;
1086630   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086631   +*** Writing the Node H3x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H3x2_ ;
1086632   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086633   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086634   +   H3x2_1  =       2.158894329803 * H2x1_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = 2.158894329803 * H2x1_1 ;
1086635   +   H3x2_1  = H3x2_1  +    -2.32757193457059 * H2x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -2.32757193457059 * H2x2_1 ;
1086636   +   H3x2_1  = H3x2_1  +    -6.00752921212942 * H2x3_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = H3x2_1 + -6.00752921212942 * H2x3_1 ;
1086637   +   H3x2_1  =    -0.08802993131411 + H3x2_1 ;
MPRINT(EM_DIAGRAM):   H3x2_1 = -0.08802993131411 + H3x2_1 ;
1086638   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086639   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086640   +   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H3x2_1 = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
1086641   +END;
MPRINT(EM_DIAGRAM):   END;
1086642   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086643   +   H3x2_1  = .;
MPRINT(EM_DIAGRAM):   H3x2_1 = .;
1086644   +END;
MPRINT(EM_DIAGRAM):   END;
1086645   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086646   +*** Writing the Node H4x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H4x1_ ;
1086647   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086648   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086649   +   H4x1_1  =      7.3411593355967 * H3x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = 7.3411593355967 * H3x1_1 ;
1086650   +   H4x1_1  = H4x1_1  +    -3.06647078805944 * H3x2_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = H4x1_1 + -3.06647078805944 * H3x2_1 ;
1086651   +   H4x1_1  =    -1.39824841795123 + H4x1_1 ;
MPRINT(EM_DIAGRAM):   H4x1_1 = -1.39824841795123 + H4x1_1 ;
1086652   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1086653   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1086654   +   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H4x1_1 = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
1086655   +END;
MPRINT(EM_DIAGRAM):   END;
1086656   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086657   +   H4x1_1  = .;
MPRINT(EM_DIAGRAM):   H4x1_1 = .;
1086658   +END;
MPRINT(EM_DIAGRAM):   END;
1086659   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086660   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1086661   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086662   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1086663   +   P_DepVar1  =     9.74622448352833 * H4x1_1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 9.74622448352833 * H4x1_1 ;
1086664   +   P_DepVar1  =    -7.88591846838259 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -7.88591846838259 + P_DepVar1 ;
1086665   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1086666   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1086667   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1086668   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1086669   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1086670   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1086671   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1086672   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1086673   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1086674   +END;
MPRINT(EM_DIAGRAM):   END;
1086675   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1086676   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1086677   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1086678   +END;
MPRINT(EM_DIAGRAM):   END;
1086679   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1086680   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1086681   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1086682   +END;
MPRINT(EM_DIAGRAM):   END;
1086683   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086684   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1086685   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1086686   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1086687   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1086688   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1086689   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1086690   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1086691   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1086692   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1086693   +END;
MPRINT(EM_DIAGRAM):   END;
1086694   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1086695   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1086696   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1086697   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086698    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086699    quit;
1086700    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086701    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086702    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086703    retain ID 2 Node "AutoNeural30";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "AutoNeural30";
1086704    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086705    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1491 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1491 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086706    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086707    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086708    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1491 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1491 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086709    proc sort data=EMWS8.AutoNeural30_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural30_variableset out=_temp2(keep=NAME
CREATOR);
1086710    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086711    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS8.AUTONEURAL30_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086712    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086713    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086714    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086715    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086716    proc contents data=EMWS8.AutoNeural30_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural30_train out=_meta(keep=NAME) noprint;
1086717    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 64 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086718    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086719    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086720    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 64 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 64 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086721    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086722    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086723    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086724    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 64 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 64 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086725    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086726    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086726  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 741 rows and 5 columns.
 
1086727    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086728    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086729    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 741 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 741 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086730    filename _pref
1086730  ! "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
1086731    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086732    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
1086733   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1086734   +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
1086735   +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
1086736   +
1086737   +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
1086738   +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1086739   +
1086740   +
1086741   +/*----G_Marital_Status begin----*/
1086742   +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status begin----*/ length _NORM8 $ 8;
1086743   +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
1086744   +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1086745   +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
1086746   +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
1086747   +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
1086748   +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
1086749   +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
1086750   +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
1086751   +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
1086752   +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
1086753   +end;
MPRINT(EM_DIAGRAM):   end;
1086754   +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status="Grouped Levels for Marital_Status";
1086755   +/*----G_Marital_Status end----*/
1086756   +
1086757   +
1086758   +****************************************;
MPRINT(EM_DIAGRAM):   /*----G_Marital_Status end----*/
****************************************;
1086759   +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
1086760   +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086761    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086762    quit;
1086763    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086764    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086765    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086766    retain ID 3 Node "Varsel";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Varsel";
1086767    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086768    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086769    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086770    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086771    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086772    proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_variableset out=_temp2(keep=NAME CREATOR);
1086773    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086774    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.VARSEL_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086775    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086776    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086777    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086778    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086779    proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_train out=_meta(keep=NAME) noprint;
1086780    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086781    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086782    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086783    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
1086784    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086785    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086786    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086787    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086788    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086789    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086789  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 3 rows and 5 columns.
 
1086790    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086791    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086792    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 3 observations read from the data set WORK._TEMPX.
NOTE: 3 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 744 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086793    filename _pref
1086793  ! "C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas";
1086794    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086795    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Trans\EMPUBLISHSCORE.sas.
1086796   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1086797   +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
1086798   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1086799   +MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
MPRINT(EM_DIAGRAM):   MonthsAsCustomer =int((today()-Dt_Customer)/12) ;
1086800   +HigherEducationBinary =HigherEducation ;
MPRINT(EM_DIAGRAM):   HigherEducationBinary =HigherEducation ;
1086801   +NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
MPRINT(EM_DIAGRAM):   NumDistPurchases =NumCatalogPurchases + NumWebPurchases ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086802    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086803    quit;
1086804    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086805    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086806    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086807    retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
1086808    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086809    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086810    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086811    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086812    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086813    proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Trans_variableset out=_temp2(keep=NAME CREATOR);
1086814    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086815    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086816    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086817    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086818    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086819    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086820    proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Trans_train out=_meta(keep=NAME) noprint;
1086821    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1086822    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086823    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086824    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 44 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086825    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086826    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086827    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086828    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 44 observations read from the data set WORK._META.
NOTE: There were 33 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 44 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086829    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086830    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086830  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.
 
1086831    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086832    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086833    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: 4 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 748 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086834    filename _pref
1086834  ! "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas";
1086835    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086836    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\EMCODE4\EMPUBLISHSCORE.sas.
1086837   +
1086838   +  Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   Frq=NumStorePurchases+NumWebPurchases+NumCatalogPurchases;
1086839   +  Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWin
1086839  !+es;
MPRINT(EM_DIAGRAM):
Mnt=MntFishProducts+MntFruits+MntGoldProds+MntMeatProducts+MntSweetProducts+MntWines;
1086840   +  RMntFrq=Mnt/Frq;
MPRINT(EM_DIAGRAM):   RMntFrq=Mnt/Frq;
1086841   +  RFMstat=(Mnt*Frq)/(Recency+1);
MPRINT(EM_DIAGRAM):   RFMstat=(Mnt*Frq)/(Recency+1);
1086842   +  HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
MPRINT(EM_DIAGRAM):   HigherEducation=1*(upcase(Education) in ("GRADUATION","MASTER","PHD"));
1086843   +  Age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   Age = year(today())-Year_Birth;
1086844   +  AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
MPRINT(EM_DIAGRAM):
AcceptedCmpTotal=AcceptedCmp1+AcceptedCmp2+AcceptedCmp3+AcceptedCmp4+AcceptedCmp5;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086845    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086846    quit;
1086847    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086848    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086849    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086850    retain ID 6 Node "EMCODE4";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "EMCODE4";
1086851    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086852    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086853    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086854    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086855    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 39 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086856    proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.EMCODE4_variableset out=_temp2(keep=NAME CREATOR);
1086857    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086858    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS8.EMCODE4_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086859    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086860    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1086861    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1086862    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086863    proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.EMCODE4_train out=_meta(keep=NAME) noprint;
1086864    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1086865    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1086866    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086867    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086868    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086869    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1086870    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086871    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 27 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086872    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1086873    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1086873  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 39 rows and 5 columns.
 
1086874    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086875    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1086876    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 39 observations read from the data set WORK._TEMPX.
NOTE: 39 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 787 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086877    filename _pref
1086877  ! "C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref
"C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas";
1086878    proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
1086879    %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\Filter\EMPUBLISHSCORE.sas.
1086880   +
1086881   +
1086882   +length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
1086883   +drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
1086884   +_FILTERFMT1= put(AcceptedCmp1,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(AcceptedCmp1,BEST.);
1086885   +length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
1086886   +drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
1086887   +%dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086888   +
1086889   +
1086890   +length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
1086891   +drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
1086892   +_FILTERFMT2= put(AcceptedCmp2,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(AcceptedCmp2,BEST.);
1086893   +length _FILTERNORM2  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM2 $32;
1086894   +drop _FILTERNORM2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM2 ;
1086895   +%dmnormcp(_FILTERFMT2,_FILTERNORM2);
MPRINT(DMNORMCP):   _FILTERNORM2=dmnorm(_FILTERFMT2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086896   +
1086897   +
1086898   +length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
1086899   +drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
1086900   +_FILTERFMT3= put(AcceptedCmp3,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(AcceptedCmp3,BEST.);
1086901   +length _FILTERNORM3  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM3 $32;
1086902   +drop _FILTERNORM3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM3 ;
1086903   +%dmnormcp(_FILTERFMT3,_FILTERNORM3);
MPRINT(DMNORMCP):   _FILTERNORM3=dmnorm(_FILTERFMT3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086904   +
1086905   +
1086906   +length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
1086907   +drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
1086908   +_FILTERFMT4= put(AcceptedCmp4,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(AcceptedCmp4,BEST.);
1086909   +length _FILTERNORM4  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM4 $32;
1086910   +drop _FILTERNORM4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM4 ;
1086911   +%dmnormcp(_FILTERFMT4,_FILTERNORM4);
MPRINT(DMNORMCP):   _FILTERNORM4=dmnorm(_FILTERFMT4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086912   +
1086913   +
1086914   +length _FILTERFMT5  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT5 $200;
1086915   +drop _FILTERFMT5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT5 ;
1086916   +_FILTERFMT5= put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT5= put(AcceptedCmp5,BEST.);
1086917   +length _FILTERNORM5  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM5 $32;
1086918   +drop _FILTERNORM5 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM5 ;
1086919   +%dmnormcp(_FILTERFMT5,_FILTERNORM5);
MPRINT(DMNORMCP):   _FILTERNORM5=dmnorm(_FILTERFMT5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086920   +
1086921   +
1086922   +length _FILTERFMT6  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT6 $200;
1086923   +drop _FILTERFMT6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT6 ;
1086924   +_FILTERFMT6= put(Complain,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT6= put(Complain,BEST.);
1086925   +length _FILTERNORM6  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM6 $32;
1086926   +drop _FILTERNORM6 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM6 ;
1086927   +%dmnormcp(_FILTERFMT6,_FILTERNORM6);
MPRINT(DMNORMCP):   _FILTERNORM6=dmnorm(_FILTERFMT6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086928   +
1086929   +
1086930   +length _FILTERFMT7  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT7 $200;
1086931   +drop _FILTERFMT7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT7 ;
1086932   +_FILTERFMT7= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT7= put(Education,$10.0);
1086933   +length _FILTERNORM7  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM7 $32;
1086934   +drop _FILTERNORM7 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM7 ;
1086935   +%dmnormcp(_FILTERFMT7,_FILTERNORM7);
MPRINT(DMNORMCP):   _FILTERNORM7=dmnorm(_FILTERFMT7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086936   +
1086937   +
1086938   +length _FILTERFMT8  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT8 $200;
1086939   +drop _FILTERFMT8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT8 ;
1086940   +_FILTERFMT8= put(Marital_Status,$8.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT8= put(Marital_Status,$8.0);
1086941   +length _FILTERNORM8  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM8 $32;
1086942   +drop _FILTERNORM8 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM8 ;
1086943   +%dmnormcp(_FILTERFMT8,_FILTERNORM8);
MPRINT(DMNORMCP):   _FILTERNORM8=dmnorm(_FILTERFMT8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1086944   +if
1086945   +_FILTERNORM1 not in ( '.')
1086946   + and
1086947   +_FILTERNORM2 not in ( '.')
1086948   + and
1086949   +_FILTERNORM3 not in ( '.')
1086950   + and
1086951   +_FILTERNORM4 not in ( '.')
1086952   + and
1086953   +_FILTERNORM5 not in ( '.')
1086954   + and
1086955   +_FILTERNORM6 not in ( '.')
1086956   + and
1086957   +_FILTERNORM7 not in ( ' ')
1086958   + and
1086959   +_FILTERNORM8 not in ( ' ')
1086960   +and
1086961   +( Dt_Customer ne .)
1086962   +and ( Income ne . and (Income<=107000))
1086963   +and ( Kidhome ne .)
1086964   +and ( MntFishProducts ne .)
1086965   +and ( MntFruits ne .)
1086966   +and ( MntGoldProds ne .)
1086967   +and ( MntMeatProducts ne . and (MntMeatProducts<=964))
1086968   +and ( MntSweetProducts ne .)
1086969   +and ( MntWines ne .)
1086970   +and ( NumCatalogPurchases ne . and (NumCatalogPurchases<=14))
1086971   +and ( NumDealsPurchases ne . and (NumDealsPurchases<=10.5))
1086972   +and ( NumStorePurchases ne .)
1086973   +and ( NumWebPurchases ne .)
1086974   +and ( NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42))
1086975   +and ( Recency ne .)
1086976   +and ( Teenhome ne .)
1086977   +and ( Year_Birth ne .)
1086978   +then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERNORM2 not in ( '.') and
_FILTERNORM3 not in ( '.') and _FILTERNORM4 not in ( '.') and _FILTERNORM5 not in ( '.') and
_FILTERNORM6 not in ( '.') and _FILTERNORM7 not in ( ' ') and _FILTERNORM8 not in ( ' ') and (
Dt_Customer ne .) and ( Income ne . and (Income<=107000)) and ( Kidhome ne .) and (
MntFishProducts ne .) and ( MntFruits ne .) and ( MntGoldProds ne .) and ( MntMeatProducts ne
. and (MntMeatProducts<=964)) and ( MntSweetProducts ne .) and ( MntWines ne .) and (
NumCatalogPurchases ne . and (NumCatalogPurchases<=14)) and ( NumDealsPurchases ne . and
(NumDealsPurchases<=10.5)) and ( NumStorePurchases ne .) and ( NumWebPurchases ne .) and (
NumWebVisitsMonth ne . and (NumWebVisitsMonth<=13.42)) and ( Recency ne .) and ( Teenhome ne
.) and ( Year_Birth ne .) then do;
1086979   +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
1086980   +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
1086981   +end;
MPRINT(EM_DIAGRAM):   end;
1086982   +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
1086983   +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1086984    run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1086985    quit;
1086986    filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
1086987    data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
1086988    length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
1086989    retain ID 7 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Filter";
1086990    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
1086991    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086992    proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
1086993    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086994    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1086995    proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_variableset out=_temp2(keep=NAME CREATOR);
1086996    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1086997    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.FILTER_VARIABLESET.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1086998    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1086999    length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
1087000    set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
1087001    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 26 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087002    proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Filter_train out=_meta(keep=NAME) noprint;
1087003    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1087004    proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
1087005    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1087006    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087007    data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
1087008    merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
1087009    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1087010    run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This may
         cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 26 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087011    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1087012    create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
1087012  ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 66 rows and 5 columns.
 
1087013    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087014    proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Ensmbl53_FCMP data=_tempx;
1087015    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS8.ENSMBL53_FCMP.
NOTE: There were 66 observations read from the data set WORK._TEMPX.
NOTE: 66 observations added.
NOTE: The data set EMWS8.ENSMBL53_FCMP has 853 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087016    %macro varDept(fcmpdata=,id=);
1087017    %global nobs&id scoreFlag&id;
1087018    %let scoreFlag&id = 0;
1087019    %if &id=1 or ^&fcmpStart %then %do;
1087020    proc sort data=&fcmpdata out=_temp&id nodupkey;
1087021    by NAME;
1087022    where id=&id and LHS in( %let j=1;
1087023    %do %while(%scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j) ne );
1087024    %let var = %scan(_WARN_ I_DepVar P_DepVar1 P_DepVar0, &j);
1087025    "&var" %let j = %eval(&j+1);
1087026    %end;
1087027    );
1087028    run;
1087029    %let dsid = %sysfunc(open(_temp&id));
1087030    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1087031    %let dsid = %sysfunc(close(&dsid));
1087032    %if &&nobs&id %then %do;
1087033    %let scoreFlag&id = 1;
1087034    %let fcmpStart = 1;
1087035    %end;
1087036    %else %let fcmpStart = 0;
1087037    %end;
1087038    %else %do;
1087039    proc sort data=&fcmpdata out=_tempid;
1087040    where id=&id;
1087041    by LHS;
1087042    run;
1087043    %let dsid = %sysfunc(open(_tempid));
1087044    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1087045    %let dsid = %sysfunc(close(&dsid));
1087046    %if ^&&nobs&id %then %do;
1087047    proc datasets lib=work nolist;
1087048    delete _tempid;
1087049    run;
1087050    quit;
1087051    %end;
1087052    %else %do;
1087053    data _tempAll;
1087054    set %let j=%eval(&id-1);
1087055    %do x=1 %to &j;
1087056    %if &&nobs&x %then %do;
1087057    _temp&x %end;
1087058    %end;
1087059    ;
1087060    run;
1087061    proc sql;
1087062    create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
1087062  ! work._tempid p2 where p.name=p2.lhs;
1087063    quit;
1087064    data _temp&id;
1087065    set _temp&id;
1087066    where LHS ne '' and NAME ne '' and Node ne '';
1087067    run;
1087068    proc datasets lib=work nolist;
1087069    delete _tempAll;
1087070    run;
1087071    %let dsid = %sysfunc(open(_temp&id));
1087072    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1087073    %let dsid = %sysfunc(close(&dsid));
1087074    %if ^&&nobs&id %then %do;
1087075    proc datasets lib=work nolist;
1087076    delete _temp&id;
1087077    run;
1087078    quit;
1087079    %end;
1087080    %else %do;
1087081    %let scoreFlag&id = 1;
1087082    data _temp&id;
1087083    set _temp&id;
1087084    where LHS ne NAME and node ne '';
1087085    run;
1087086    %let dsid = %sysfunc(open(_temp&id));
1087087    %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
1087088    %let dsid = %sysfunc(close(&dsid));
1087089    %if ^&&nobs&id %then %do;
1087090    proc datasets lib=work nolist;
1087091    delete _temp&id;
1087092    run;
1087093    quit;
1087094    %end;
1087095    %else %do;
1087096    proc sort data=_temp&id nodupkey;
1087097    by LHS NAME;
1087098    run;
1087099    %end;
1087100    %end;
1087101    %end;
1087102    %end;
1087103    %mend varDept;
1087104    %macro optCode(outdata=fcmpdata);
1087105    %global fcmpStart;
1087106    %let fcmpStart = 0;
1087107    %let outputVars = _WARN_ I_DepVar P_DepVar1 P_DepVar0;
1087108    %let NumNodes=9;
1087109    %do k=1 %to &NumNodes;
1087110    %vardept(fcmpdata=&outdata, id=&k);
1087111    %end;
1087112    %mend optCode;
1087113    %optcode(outData=EMWS8.Ensmbl53_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=1) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: The data set WORK._TEMP1 has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_temp2 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=2 and LHS in( "_WARN_" "I_DepVar" "P_DepVar1" "P_DepVar0" );
MPRINT(VARDEPT):   run;
 
NOTE: There were 84 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE (id=2) and LHS in ('I_DepVar', 'P_DepVar0', 'P_DepVar1', '_WARN_');
NOTE: 60 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 24 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 24 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP3 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 25 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP5 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 39 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 39 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 27 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP6 created, with 37 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 37 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 66 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 66 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp2 _temp3 _temp5 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP3.
NOTE: There were 2 observations read from the data set WORK._TEMP5.
NOTE: There were 37 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 64 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll
p, work._tempid p2 where p.name=p2.lhs;
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS8.Ensmbl53_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.ENSMBL53_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
1087114    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1087115    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1087116    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1087117    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087118    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1087119    set EMWS8.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Trans_EMSCOREVAR;
1087120    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1087121    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087122    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1087123    create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p,
1087123  ! EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5
p, EMWS8.Trans_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR5 created, with 2 rows and 3 columns.
 
1087124    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087125    data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
1087126    set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
1087127    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087128    data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
1087129    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1087130    where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
1087131    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087132    data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
1087133    set EMWS8.Varsel_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_EMSCOREVAR;
1087134    where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
1087135    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.VARSEL_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087136    proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
1087137    create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3 p,
1087137  ! EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp3
p, EMWS8.Varsel_EMSCOREVAR p2 where upcase(p.LHS)=upcase(p2.NAME) order by p.lhs;
NOTE: Table WORK._CODEVAR7 created, with 1 rows and 3 columns.
 
1087138    quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087139    data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
1087140    set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
1087141    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087142    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1087143    * Ensmbl53: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Computing metadata for TRAIN data;
1087144    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.ENSMBL53_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Ensmbl53_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Ensmbl53_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Ensmbl53_TRAIN out=WORK.M0VGP2F4 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VGP2F4;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0VGP2F4(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VGP2F4;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0VGP2F4;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1V45YS2 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0W3NHX5(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V45YS2;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.AutoNeural29_TRAIN noprint
out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.AutoNeural29_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Ensmbl53";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Ensmbl53";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Ensmbl53: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME in( "I_DepVar" "F_DepVar" "U_DepVar" "_WARN_" "P_DepVar1"
"P_DepVar0" "R_DepVar1" "R_DepVar0" ) then CREATOR="Ensmbl53";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1087456    data EMWS8.Ensmbl53_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMINFO;
1087457    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1087458    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1087459    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.ENSMBL53_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1087463    run;
1087464    proc sort data = EMWS8.Ensmbl53_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Ensmbl53_EMINFO NOTHREADS;
1087465    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1087466    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_EMINFO.
NOTE: The data set EMWS8.ENSMBL53_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087467    proc sort data = EMWS8.AutoNeural29_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.AutoNeural29_EMINFO OUT=WORK.SORTEDEMINFO
NOTHREADS;
1087468    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1087469    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS8.AUTONEURAL29_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087470    proc sort data = EMWS8.Ensmbl53_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Ensmbl53_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1087471    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1087472    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.ENSMBL53_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087473    data EMWS8.Ensmbl53_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMINFO;
1087474    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1087475    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1087476    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.ENSMBL53_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087477    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1087478    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1087479    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1087480    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.ENSMBL53_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS8.ENSMBL53_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                12.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1P9YF_0
"C:\\predictive-models-project\Workspaces\EMWS8\Ensmbl53\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1P9YF_0 new;
MPRINT(EM_DIAGRAM):   run;
1087504    data EMWS8.Ensmbl53_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMOUTFIT;
1087505    set EMWS8.Ensmbl53_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMOUTFIT;
1087506    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1087507    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
1087507  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1087508    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1087509    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL53_EMOUTFIT.
NOTE: The data set EMWS8.ENSMBL53_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087510    proc sort data=EMWS8.Ensmbl53_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl53_EMREPORTFIT nothreads;
1087511    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1087512    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL53_EMREPORTFIT.
NOTE: The data set EMWS8.ENSMBL53_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1087513    %let _EMwarndup = 0;
1087514    %let _EMtargetdup =;
1087515    %let _EMASEtargetdup =;
1087516    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1087517    set EMWS8.Ensmbl53_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMOUTFIT;
1087518    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1087519    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1087520    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1087521    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1087522    end;
MPRINT(EM_DIAGRAM):   end;
1087523    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.ENSMBL53_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087524    proc sort data=EMWS8.AutoNeural29_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.AutoNeural29_CMeta_TRAIN out=WORK.SUBSETINMETA;
1087525    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1087526    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set EMWS8.AUTONEURAL29_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 30 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087527    proc sort data=EMWS8.Ensmbl53_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Ensmbl53_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
1087528    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1087529    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS8.ENSMBL53_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 20 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087530    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1087531    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1087532    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1087533    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 20 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 30 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1087534    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1087535    set EMWS8.Ensmbl53_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_CMeta_TRAIN;
1087536    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1087536  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1087537    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL53_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1087538    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1087539    set EMWS8.Ensmbl53_TRAIN(keep=
1087540    F_DepVar
1087541    I_DepVar
1087542    P_DepVar0
1087543    P_DepVar1
1087544    R_DepVar0
1087545    R_DepVar1
1087546    U_DepVar
1087547    _WARN_
1087548    DepVar
1087549    );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1087550    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: View EMWS8.ENSMBL53_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.AUTONEURAL29_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.ENSMBL53_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl53_3BZZENB nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl53_3BZZENB;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl53_3BZZENB(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl53_3BZZENB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl53_3BZZENB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural29_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0010553448 OVLMAX 0.9950406028 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1091816    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1091817    set EMWS8.Ensmbl53_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_CMeta_TRAIN;
The SAS System
 
1091818    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1091818  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1091819    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL53_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1091820    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1091821    set EMWS8.Ensmbl53_VALIDATE(keep=
1091822    F_DepVar
1091823    I_DepVar
1091824    P_DepVar0
1091825    P_DepVar1
1091826    R_DepVar0
1091827    R_DepVar1
1091828    U_DepVar
1091829    _WARN_
1091830    DepVar
1091831    );
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1091832    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.VARSEL_VALIDATE.
NOTE: View EMWS8.ENSMBL53_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.AUTONEURAL29_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.ENSMBL53_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Ensmbl53_1_N_D2_ nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ensmbl53_1_N_D2_;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl53_1_N_D2_(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMCLASSIFICATION WORK.Ensmbl53_1_N_D2_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Ensmbl53_1_N_D2_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Ensmbl53_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural29_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0010694234 OVLMAX 0.9950290849 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1096107    %let _cn = %sysfunc(getoption(CENTER));
1096108    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1096109    proc print data=EMWS8.Ensmbl53_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl53_EMREPORTFIT noobs label;
1096110    var STAT LABEL TRAIN
1096111    VALIDATE
1096112    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
1096113    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1096114    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1096115    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1096116    run;
 
NOTE: There were 9 observations read from the data set EMWS8.ENSMBL53_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 58.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1096117    title10;
MPRINT(EM_DIAGRAM):   title10;
1096118    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1096119    proc sort data=EMWS8.Ensmbl53_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Ensmbl53_EMCLASSIFICATION nothreads;
1096120    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1096121    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL53_EMCLASSIFICATION.
NOTE: The data set EMWS8.ENSMBL53_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1096122    %let _cn = %sysfunc(getoption(CENTER));
1096123    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1096124    proc print data=EMWS8.Ensmbl53_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl53_EMCLASSIFICATION noobs label;
1096125    var from into pct_row pct_col count percent
1096126    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1096127    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1096128    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1096129    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1096130    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1096131    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1096132    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1096133    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1096134    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1096135    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1096136    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1096137    run;
 
NOTE: There were 8 observations read from the data set EMWS8.ENSMBL53_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 59.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1096138    title9;
MPRINT(EM_DIAGRAM):   title9;
1096139    title10;
MPRINT(EM_DIAGRAM):   title10;
1096140    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1096141    %let _cn = %sysfunc(getoption(CENTER));
1096142    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1096143    data EMWS8.Ensmbl53_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Ensmbl53_EMEVENTREPORT;
1096144    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1096144  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1096145    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1096145  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1096145  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1096145  ! FALSEEVENT
1096146    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1096146  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1096146  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1096147       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1096148    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1096149    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1096150    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1096151    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1096152    set EMWS8.Ensmbl53_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Ensmbl53_EMEVENTREPORT;
1096153    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL53_EMEVENTREPORT.
NOTE: The data set EMWS8.ENSMBL53_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
1096154    proc print data=EMWS8.Ensmbl53_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl53_EMEVENTREPORT noobs label;
1096155    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1096156    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1096157    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1096158    run;
 
NOTE: There were 2 observations read from the data set EMWS8.ENSMBL53_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 60.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1096159    title10;
MPRINT(EM_DIAGRAM):   title10;
1096160    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1096161    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1096162    modify Ensmbl53_EMRANK;
MPRINT(EM_DIAGRAM):   modify Ensmbl53_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1096163    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1096164    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1096164  ! ;
MPRINT(EM_DIAGRAM):   run;
1096165    run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL53_EMRANK.DATA.
1096166    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
1096167    %let _cn = %sysfunc(getoption(CENTER));
1096168    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1096169    proc print data=EMWS8.Ensmbl53_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl53_EMRANK label noobs;
1096170    var
1096171    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1096172    by
1096173    notsorted DATAROLE
1096174    notsorted TARGET
1096175    notsorted TARGETLABEL
1096176    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1096177    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1096178    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1096179    run;
 
NOTE: There were 40 observations read from the data set EMWS8.ENSMBL53_EMRANK.
NOTE: The PROCEDURE PRINT printed page 61.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1096180    title10;
MPRINT(EM_DIAGRAM):   title10;
1096181    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1096182    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1096183    modify Ensmbl53_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Ensmbl53_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1096184    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1096184  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1096185    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1096185  ! ;
MPRINT(EM_DIAGRAM):   run;
1096186    run;
 
NOTE: MODIFY was successful for EMWS8.ENSMBL53_EMSCOREDIST.DATA.
1096187    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Ensmbl53_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
