*------------------------------------------------------------*;
* Ensmbl50: Voting to produce predicted target;
*------------------------------------------------------------*;
array Ensmbl50_post{2} _temporary_;
array Ensmbl50_count{2} _temporary_;
array Ensmbl50_level{2} $32 _temporary_ (
"1"
"0"
);
do i=1 to 2;
Ensmbl50_post{i} = 0;
Ensmbl50_count{i} = 0;
end;
if AutoNeural24_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural24_P_DepVar1;
end;
if AutoNeural22_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural22_P_DepVar1;
end;
if AutoNeural21_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural21_P_DepVar1;
end;
if AutoNeural20_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural20_P_DepVar1;
end;
if AutoNeural26_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural26_P_DepVar1;
end;
if AutoNeural25_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural25_P_DepVar1;
end;
if AutoNeural23_I_DepVar = Ensmbl50_level{1} then do;
Ensmbl50_count{1} + 1;
Ensmbl50_post{1}=Ensmbl50_post{1}+ AutoNeural23_P_DepVar1;
end;
if AutoNeural24_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural24_P_DepVar0;
end;
if AutoNeural22_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural22_P_DepVar0;
end;
if AutoNeural21_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural21_P_DepVar0;
end;
if AutoNeural20_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural20_P_DepVar0;
end;
if AutoNeural26_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural26_P_DepVar0;
end;
if AutoNeural25_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural25_P_DepVar0;
end;
if AutoNeural23_I_DepVar = Ensmbl50_level{2} then do;
Ensmbl50_count{2} + 1;
Ensmbl50_post{2}=Ensmbl50_post{2}+ AutoNeural23_P_DepVar0;
end;
*------------------------------------------------------------*;
* Ensmbl50: Determine Into Variable;
*------------------------------------------------------------*;
length I_DepVar $32;
drop i vote_count vote_post;
vote_count = max(
Ensmbl50_count{1} ,
Ensmbl50_count{2}
);
do i=1 to 2;
if Ensmbl50_count{i}=vote_count and Ensmbl50_post{i}>vote_post then do;
I_DepVar = Ensmbl50_level{i};
vote_post = Ensmbl50_count{i};
end;
end;
*------------------------------------------------------------*;
* Ensmbl50: Compute posterior vars using models predicting the chosen level;
*------------------------------------------------------------*;
P_DepVar1 = 0;
P_DepVar0 = 0;
if I_DepVar = AutoNeural24_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural24_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural24_P_DepVar0;
end;
if I_DepVar = AutoNeural22_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural22_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural22_P_DepVar0;
end;
if I_DepVar = AutoNeural21_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural21_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural21_P_DepVar0;
end;
if I_DepVar = AutoNeural20_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural20_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural20_P_DepVar0;
end;
if I_DepVar = AutoNeural26_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural26_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural26_P_DepVar0;
end;
if I_DepVar = AutoNeural25_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural25_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural25_P_DepVar0;
end;
if I_DepVar = AutoNeural23_I_DepVar then do;
P_DEPVAR1 = P_DEPVAR1 + AutoNeural23_P_DepVar1;
P_DEPVAR0 = P_DEPVAR0 + AutoNeural23_P_DepVar0;
end;
* Ensmbl50: Averaging posterior;
P_DepVar1 = P_DepVar1/vote_count;
P_DepVar0 = P_DepVar0/vote_count;
*------------------------------------------------------------*;
* Ensmbl50: Producing Unformatted variable;
*------------------------------------------------------------*;
label U_DepVar = "Unnormalized Into: DepVar";
if I_DepVar = '1' then U_DepVar = 1;
else
if I_DepVar = '0' then U_DepVar = 0;
*------------------------------------------------------------*;
* Ensmbl50: Computing _WARN_ Variable;
*------------------------------------------------------------*;
length _WARN_ $4;
label _WARN_ = 'Warnings';
_WARN_ = '';
if index(AUTONEURAL24_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL24_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL24_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL24_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL22_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL22_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL22_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL22_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL21_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL21_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL21_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL21_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL20_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL20_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL20_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL20_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL26_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL26_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL26_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL26_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL25_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL25_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL25_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL25_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
if index(AUTONEURAL23_WARN_, 'M') and ^index(_WARN_, 'M') then substr(_WARN_, 1, 1) ='M';
if index(AUTONEURAL23_WARN_, 'U') and ^index(_WARN_, 'U') then substr(_WARN_, 2, 1) ='U';
if index(AUTONEURAL23_WARN_, 'P') and ^index(_WARN_, 'P') then substr(_WARN_, 3, 1) ='P';
if index(AUTONEURAL23_WARN_, 'C') and ^index(_WARN_, 'C') then substr(_WARN_, 4, 1) ='C';
