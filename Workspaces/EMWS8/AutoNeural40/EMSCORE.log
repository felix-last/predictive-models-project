MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.11 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                20.11 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0IUXTYD 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMSCORE.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0IUXTYD new;
MPRINT(EM_DIAGRAM):   run;
960912     filename emflow
960912   ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural40: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
960913     *------------------------------------------------------------*;
960914     * AutoNeural40: Scoring DATA data;
960915     *------------------------------------------------------------*;
960916     data EMWS8.AutoNeural40_TRAIN
960917     / view=EMWS8.AutoNeural40_TRAIN
960918     ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural40_TRAIN / view=EMWS8.AutoNeural40_TRAIN ;
960919     set EMWS8.Meta3_TRAIN
960920     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN ;
960921     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas.
960922    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
960923    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
960924    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
960925    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
960926    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
960927    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
960928    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
960929    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
960930    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
960931    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
960932    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
960933    +LENGTH _WARN_ $4
960934    +      F_DepVar  $ 12
960935    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
960936    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
960937    +
960938    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
960939    +
960940    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
960941    +
960942    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
960943    +
960944    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
960945    +
960946    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
960947    +
960948    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
960949    +
960950    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
960951    +
960952    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
960953    +
960954    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
960955    +
960956    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
960957    +
960958    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
960959    +
960960    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
960961    +
960962    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
960963    +
960964    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
960965    +
960966    +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
960967    +
960968    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
960969    +
960970    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
960971    +
960972    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
960973    +
960974    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
960975    +
960976    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
960977    +
960978    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
960979    +
960980    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
960981    +
960982    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
960983    +
960984    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
960985    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
960986    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
960987    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
960988    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
960989    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
960990    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
960991    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
960992    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
960993    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
960994    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
960995    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
960996    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
960997    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
960998    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
960999    +end;
MPRINT(EM_DIAGRAM):   end;
961000    +else do;
MPRINT(EM_DIAGRAM):   else do;
961001    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
961002    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
961003    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
961004    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
961005    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
961006    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
961007    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
961008    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
961009    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961010    +         end;
MPRINT(EM_DIAGRAM):   end;
961011    +         else do;
MPRINT(EM_DIAGRAM):   else do;
961012    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
961013    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
961014    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961015    +            end;
MPRINT(EM_DIAGRAM):   end;
961016    +         end;
MPRINT(EM_DIAGRAM):   end;
961017    +      end;
MPRINT(EM_DIAGRAM):   end;
961018    +      else do;
MPRINT(EM_DIAGRAM):   else do;
961019    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
961020    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
961021    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961022    +         end;
MPRINT(EM_DIAGRAM):   end;
961023    +      end;
MPRINT(EM_DIAGRAM):   end;
961024    +   end;
MPRINT(EM_DIAGRAM):   end;
961025    +   else do;
MPRINT(EM_DIAGRAM):   else do;
961026    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
961027    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
961028    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961029    +      end;
MPRINT(EM_DIAGRAM):   end;
961030    +      else do;
MPRINT(EM_DIAGRAM):   else do;
961031    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
961032    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
961033    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
961034    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
961035    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
961036    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961037    +         end;
MPRINT(EM_DIAGRAM):   end;
961038    +      end;
MPRINT(EM_DIAGRAM):   end;
961039    +   end;
MPRINT(EM_DIAGRAM):   end;
961040    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
961041    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
961042    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
961043    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
961044    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
961045    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
961046    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
961047    +   end;
MPRINT(EM_DIAGRAM):   end;
961048    +end;
MPRINT(EM_DIAGRAM):   end;
961049    +
961050    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961051    +*** Checking missing input Interval
961052    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
961053    +
961054    +IF NMISS(
961055    +   AcceptedCmpTotal ,
961056    +   Frq ,
961057    +   Mnt ,
961058    +   MntMeatProducts ,
961059    +   NumCatalogPurchases ,
961060    +   NumDealsPurchases ,
961061    +   NumWebVisitsMonth ,
961062    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Mnt , MntMeatProducts , 
NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , Recency ) THEN DO;
961063    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
961064    +
961065    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
961066    +END;
MPRINT(EM_DIAGRAM):   END;
961067    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961068    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
961069    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961070    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961071    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
961072    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
961073    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
961074    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
961075    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
961076    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
961077    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
961078    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
961079    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
961080    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
961081    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
961082    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
961083    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
961084    +END;
MPRINT(EM_DIAGRAM):   END;
961085    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961086    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
961087    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
961088    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
961089    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
961090    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
961091    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
961092    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
961093    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
961094    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
961095    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
961096    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
961097    +   ELSE S_NumCatalogPurchases
961098    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
961099    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
961100    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
961101    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
961102    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
961103    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
961104    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
961105    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
961106    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
961107    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
961108    +END;
MPRINT(EM_DIAGRAM):   END;
961109    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961110    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
961111    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961112    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961113    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
961114    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961115    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961116    +   H1x1_1  =    -0.05302855298398 * S_AcceptedCmpTotal
961117    +          +    -0.09205648080047 * S_Frq  +    -0.89621344379521 * S_Mnt
961118    +          +      0.2338265945616 * S_MntMeatProducts
961119    +          +     0.01564313414142 * S_NumCatalogPurchases
961120    +          +    -0.07464304384577 * S_NumDealsPurchases
961121    +          +    -0.08299095200051 * S_NumWebVisitsMonth
961122    +          +     0.13978973311119 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.05302855298398 * S_AcceptedCmpTotal + -0.09205648080047 * 
S_Frq + -0.89621344379521 * S_Mnt + 0.2338265945616 * S_MntMeatProducts + 0.01564313414142 * 
S_NumCatalogPurchases + -0.07464304384577 * S_NumDealsPurchases + -0.08299095200051 * 
S_NumWebVisitsMonth + 0.13978973311119 * S_Recency ;
961123    +   H1x1_2  =    -0.03911055677138 * S_AcceptedCmpTotal
961124    +          +     0.07733855489079 * S_Frq  +      0.2563411171282 * S_Mnt
961125    +          +     -0.3893643428589 * S_MntMeatProducts
961126    +          +    -0.11487225011852 * S_NumCatalogPurchases
961127    +          +       0.001237145136 * S_NumDealsPurchases
961128    +          +    -0.04234500703321 * S_NumWebVisitsMonth
961129    +          +     0.05116348108415 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.03911055677138 * S_AcceptedCmpTotal + 0.07733855489079 * 
S_Frq + 0.2563411171282 * S_Mnt + -0.3893643428589 * S_MntMeatProducts + -0.11487225011852 * 
S_NumCatalogPurchases + 0.001237145136 * S_NumDealsPurchases + -0.04234500703321 * 
S_NumWebVisitsMonth + 0.05116348108415 * S_Recency ;
961130    +   H1x1_3  =     0.05186380835835 * S_AcceptedCmpTotal
961131    +          +    -0.12505141082202 * S_Frq  +    -0.25371307325653 * S_Mnt
961132    +          +    -0.27963474874984 * S_MntMeatProducts
961133    +          +     0.01939450840376 * S_NumCatalogPurchases
961134    +          +    -0.03907394757592 * S_NumDealsPurchases
961135    +          +     0.06752842740103 * S_NumWebVisitsMonth
961136    +          +    -0.08457426712542 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.05186380835835 * S_AcceptedCmpTotal + -0.12505141082202 * 
S_Frq + -0.25371307325653 * S_Mnt + -0.27963474874984 * S_MntMeatProducts + 0.01939450840376 * 
S_NumCatalogPurchases + -0.03907394757592 * S_NumDealsPurchases + 0.06752842740103 * 
S_NumWebVisitsMonth + -0.08457426712542 * S_Recency ;
961137    +   H1x1_4  =     0.27532181874726 * S_AcceptedCmpTotal
961138    +          +    -0.87263022737986 * S_Frq  +    -0.69004923627526 * S_Mnt
961139    +          +     0.09842717305515 * S_MntMeatProducts
961140    +          +     0.48040050668836 * S_NumCatalogPurchases
961141    +          +     0.55911507039756 * S_NumDealsPurchases
961142    +          +     0.35441361757916 * S_NumWebVisitsMonth
961143    +          +    -0.43753517932111 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.27532181874726 * S_AcceptedCmpTotal + -0.87263022737986 * 
S_Frq + -0.69004923627526 * S_Mnt + 0.09842717305515 * S_MntMeatProducts + 0.48040050668836 * 
S_NumCatalogPurchases + 0.55911507039756 * S_NumDealsPurchases + 0.35441361757916 * 
S_NumWebVisitsMonth + -0.43753517932111 * S_Recency ;
961144    +   H1x1_1  = H1x1_1  +     0.23871713366711 * Marital_StatusDivorced
961145    +          +     0.13423943689575 * Marital_StatusMarried
961146    +          +    -0.01496857872487 * Marital_StatusSingle
961147    +          +     0.09065620914015 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.23871713366711 * Marital_StatusDivorced + 
0.13423943689575 * Marital_StatusMarried + -0.01496857872487 * Marital_StatusSingle + 
0.09065620914015 * Marital_StatusTogether ;
961148    +   H1x1_2  = H1x1_2  +    -0.01884888861908 * Marital_StatusDivorced
961149    +          +     0.03005244373637 * Marital_StatusMarried
961150    +          +    -0.06891231360799 * Marital_StatusSingle
961151    +          +     0.03916911436548 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -0.01884888861908 * Marital_StatusDivorced + 
0.03005244373637 * Marital_StatusMarried + -0.06891231360799 * Marital_StatusSingle + 
0.03916911436548 * Marital_StatusTogether ;
961152    +   H1x1_3  = H1x1_3  +     0.13813252013441 * Marital_StatusDivorced
961153    +          +     0.01694145364157 * Marital_StatusMarried
961154    +          +    -0.05183794192194 * Marital_StatusSingle
961155    +          +     0.03543146366331 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.13813252013441 * Marital_StatusDivorced + 
0.01694145364157 * Marital_StatusMarried + -0.05183794192194 * Marital_StatusSingle + 
0.03543146366331 * Marital_StatusTogether ;
961156    +   H1x1_4  = H1x1_4  +    -0.02708459807651 * Marital_StatusDivorced
961157    +          +     0.44185773223966 * Marital_StatusMarried
961158    +          +     -0.6351733171702 * Marital_StatusSingle
961159    +          +     0.63280583005707 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.02708459807651 * Marital_StatusDivorced + 
0.44185773223966 * Marital_StatusMarried + -0.6351733171702 * Marital_StatusSingle + 
0.63280583005707 * Marital_StatusTogether ;
961160    +   H1x1_1  =    -1.91705514496288 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.91705514496288 + H1x1_1 ;
961161    +   H1x1_2  =      0.5215405194232 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.5215405194232 + H1x1_2 ;
961162    +   H1x1_3  =     1.20502195447806 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.20502195447806 + H1x1_3 ;
961163    +   H1x1_4  =    -1.53366644544584 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.53366644544584 + H1x1_4 ;
961164    +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
961165    +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
961166    +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
961167    +   H1x1_4  = SIN(H1x1_4 );
MPRINT(EM_DIAGRAM):   H1x1_4 = SIN(H1x1_4 );
961168    +END;
MPRINT(EM_DIAGRAM):   END;
961169    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961170    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
961171    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
961172    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
961173    +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
961174    +END;
MPRINT(EM_DIAGRAM):   END;
961175    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961176    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
961177    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961178    +
961179    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
961180    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
961181    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
961182    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
961183    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
961184    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
961185    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
961186    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
961187    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
961188    +end;
MPRINT(EM_DIAGRAM):   end;
961189    +else do;
MPRINT(EM_DIAGRAM):   else do;
961190    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
961191    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
961192    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
961193    +   end;
MPRINT(EM_DIAGRAM):   end;
961194    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
961195    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
961196    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
961197    +   end;
MPRINT(EM_DIAGRAM):   end;
961198    +   else do;
MPRINT(EM_DIAGRAM):   else do;
961199    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
961200    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
961201    +   end;
MPRINT(EM_DIAGRAM):   end;
961202    +end;
MPRINT(EM_DIAGRAM):   end;
961203    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961204    +   P_DepVar1  =     39.2787940172339 * H1x1_1  +    -104.671380650004 * H1x1_2
961205    +          +      81.489126537237 * H1x1_3  +     9.55747882149012 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 39.2787940172339 * H1x1_1 + -104.671380650004 * H1x1_2 + 
81.489126537237 * H1x1_3 + 9.55747882149012 * H1x1_4 ;
961206    +   P_DepVar1  =      5.5599052732327 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 5.5599052732327 + P_DepVar1 ;
961207    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
961208    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
961209    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
961210    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
961211    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
961212    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
961213    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
961214    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
961215    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
961216    +END;
MPRINT(EM_DIAGRAM):   END;
961217    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961218    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
961219    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
961220    +END;
MPRINT(EM_DIAGRAM):   END;
961221    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
961222    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
961223    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
961224    +END;
MPRINT(EM_DIAGRAM):   END;
961225    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
961226    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
961227    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
961228    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
961229    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
961230    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
961231    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
961232    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961233    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
961234    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961235    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
961236    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
961237    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
961238    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
961239    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
961240    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
961241    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
961242    +END;
MPRINT(EM_DIAGRAM):   END;
961243    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
961244    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
961245    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
961246    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
961247     run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL40_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
961248     quit;
961249     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
961250     filename emflow
961250   ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural40: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
961251     *------------------------------------------------------------*;
961252     * AutoNeural40: Scoring VALIDATE data;
961253     *------------------------------------------------------------*;
961254     data EMWS8.AutoNeural40_VALIDATE
961255     / view=EMWS8.AutoNeural40_VALIDATE
961256     ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural40_VALIDATE / view=EMWS8.AutoNeural40_VALIDATE ;
961257     set EMWS8.Meta3_VALIDATE
961258     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE ;
961259     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\EMFLOWSCORE.sas.
961260    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
961261    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
961262    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
961263    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
961264    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
961265    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
961266    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
961267    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
961268    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
961269    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
961270    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
961271    +LENGTH _WARN_ $4
961272    +      F_DepVar  $ 12
961273    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
961274    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
961275    +
961276    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
961277    +
961278    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
961279    +
961280    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
961281    +
961282    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
961283    +
961284    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
961285    +
961286    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
961287    +
961288    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
961289    +
961290    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
961291    +
961292    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
961293    +
961294    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
961295    +
961296    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
961297    +
961298    +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
961299    +
961300    +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
961301    +
961302    +      label H1x1_3 = 'Hidden: H1x1_=3' ;
MPRINT(EM_DIAGRAM):   label H1x1_3 = 'Hidden: H1x1_=3' ;
961303    +
961304    +      label H1x1_4 = 'Hidden: H1x1_=4' ;
MPRINT(EM_DIAGRAM):   label H1x1_4 = 'Hidden: H1x1_=4' ;
961305    +
961306    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
961307    +
961308    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
961309    +
961310    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
961311    +
961312    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
961313    +
961314    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
961315    +
961316    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
961317    +
961318    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
961319    +
961320    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
961321    +
961322    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
961323    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
961324    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
961325    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
961326    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
961327    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
961328    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
961329    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
961330    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
961331    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
961332    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
961333    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
961334    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
961335    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
961336    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
961337    +end;
MPRINT(EM_DIAGRAM):   end;
961338    +else do;
MPRINT(EM_DIAGRAM):   else do;
961339    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
961340    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
961341    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
961342    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
961343    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
961344    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
961345    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
961346    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
961347    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961348    +         end;
MPRINT(EM_DIAGRAM):   end;
961349    +         else do;
MPRINT(EM_DIAGRAM):   else do;
961350    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
961351    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
961352    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961353    +            end;
MPRINT(EM_DIAGRAM):   end;
961354    +         end;
MPRINT(EM_DIAGRAM):   end;
961355    +      end;
MPRINT(EM_DIAGRAM):   end;
961356    +      else do;
MPRINT(EM_DIAGRAM):   else do;
961357    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
961358    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
961359    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961360    +         end;
MPRINT(EM_DIAGRAM):   end;
961361    +      end;
MPRINT(EM_DIAGRAM):   end;
961362    +   end;
MPRINT(EM_DIAGRAM):   end;
961363    +   else do;
MPRINT(EM_DIAGRAM):   else do;
961364    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
961365    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
961366    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961367    +      end;
MPRINT(EM_DIAGRAM):   end;
961368    +      else do;
MPRINT(EM_DIAGRAM):   else do;
961369    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
961370    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
961371    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
961372    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
961373    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
961374    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
961375    +         end;
MPRINT(EM_DIAGRAM):   end;
961376    +      end;
MPRINT(EM_DIAGRAM):   end;
961377    +   end;
MPRINT(EM_DIAGRAM):   end;
961378    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
961379    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
961380    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
961381    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
961382    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
961383    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
961384    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
961385    +   end;
MPRINT(EM_DIAGRAM):   end;
961386    +end;
MPRINT(EM_DIAGRAM):   end;
961387    +
961388    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961389    +*** Checking missing input Interval
961390    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
961391    +
961392    +IF NMISS(
961393    +   AcceptedCmpTotal ,
961394    +   Frq ,
961395    +   Mnt ,
961396    +   MntMeatProducts ,
961397    +   NumCatalogPurchases ,
961398    +   NumDealsPurchases ,
961399    +   NumWebVisitsMonth ,
961400    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Mnt , MntMeatProducts , 
NumCatalogPurchases , NumDealsPurchases , NumWebVisitsMonth , Recency ) THEN DO;
961401    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
961402    +
961403    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
961404    +END;
MPRINT(EM_DIAGRAM):   END;
961405    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961406    +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
961407    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961408    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961409    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
961410    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
961411    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
961412    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
961413    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
961414    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
961415    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
961416    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
961417    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
961418    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
961419    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
961420    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
961421    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
961422    +END;
MPRINT(EM_DIAGRAM):   END;
961423    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961424    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
961425    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
961426    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
961427    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
961428    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
961429    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
961430    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
961431    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
961432    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
961433    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
961434    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
961435    +   ELSE S_NumCatalogPurchases
961436    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
961437    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
961438    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
961439    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
961440    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 * 
NumDealsPurchases ;
961441    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
961442    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
961443    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 * 
NumWebVisitsMonth ;
961444    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
961445    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
961446    +END;
MPRINT(EM_DIAGRAM):   END;
961447    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961448    +*** Writing the Node nominal ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nominal ;
961449    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961450    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961451    +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
961452    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961453    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961454    +   H1x1_1  =    -0.05302855298398 * S_AcceptedCmpTotal
961455    +          +    -0.09205648080047 * S_Frq  +    -0.89621344379521 * S_Mnt
961456    +          +      0.2338265945616 * S_MntMeatProducts
961457    +          +     0.01564313414142 * S_NumCatalogPurchases
961458    +          +    -0.07464304384577 * S_NumDealsPurchases
961459    +          +    -0.08299095200051 * S_NumWebVisitsMonth
961460    +          +     0.13978973311119 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -0.05302855298398 * S_AcceptedCmpTotal + -0.09205648080047 * 
S_Frq + -0.89621344379521 * S_Mnt + 0.2338265945616 * S_MntMeatProducts + 0.01564313414142 * 
S_NumCatalogPurchases + -0.07464304384577 * S_NumDealsPurchases + -0.08299095200051 * 
S_NumWebVisitsMonth + 0.13978973311119 * S_Recency ;
961461    +   H1x1_2  =    -0.03911055677138 * S_AcceptedCmpTotal
961462    +          +     0.07733855489079 * S_Frq  +      0.2563411171282 * S_Mnt
961463    +          +     -0.3893643428589 * S_MntMeatProducts
961464    +          +    -0.11487225011852 * S_NumCatalogPurchases
961465    +          +       0.001237145136 * S_NumDealsPurchases
961466    +          +    -0.04234500703321 * S_NumWebVisitsMonth
961467    +          +     0.05116348108415 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_2 = -0.03911055677138 * S_AcceptedCmpTotal + 0.07733855489079 * 
S_Frq + 0.2563411171282 * S_Mnt + -0.3893643428589 * S_MntMeatProducts + -0.11487225011852 * 
S_NumCatalogPurchases + 0.001237145136 * S_NumDealsPurchases + -0.04234500703321 * 
S_NumWebVisitsMonth + 0.05116348108415 * S_Recency ;
961468    +   H1x1_3  =     0.05186380835835 * S_AcceptedCmpTotal
961469    +          +    -0.12505141082202 * S_Frq  +    -0.25371307325653 * S_Mnt
961470    +          +    -0.27963474874984 * S_MntMeatProducts
961471    +          +     0.01939450840376 * S_NumCatalogPurchases
961472    +          +    -0.03907394757592 * S_NumDealsPurchases
961473    +          +     0.06752842740103 * S_NumWebVisitsMonth
961474    +          +    -0.08457426712542 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 0.05186380835835 * S_AcceptedCmpTotal + -0.12505141082202 * 
S_Frq + -0.25371307325653 * S_Mnt + -0.27963474874984 * S_MntMeatProducts + 0.01939450840376 * 
S_NumCatalogPurchases + -0.03907394757592 * S_NumDealsPurchases + 0.06752842740103 * 
S_NumWebVisitsMonth + -0.08457426712542 * S_Recency ;
961475    +   H1x1_4  =     0.27532181874726 * S_AcceptedCmpTotal
961476    +          +    -0.87263022737986 * S_Frq  +    -0.69004923627526 * S_Mnt
961477    +          +     0.09842717305515 * S_MntMeatProducts
961478    +          +     0.48040050668836 * S_NumCatalogPurchases
961479    +          +     0.55911507039756 * S_NumDealsPurchases
961480    +          +     0.35441361757916 * S_NumWebVisitsMonth
961481    +          +    -0.43753517932111 * S_Recency ;
MPRINT(EM_DIAGRAM):   H1x1_4 = 0.27532181874726 * S_AcceptedCmpTotal + -0.87263022737986 * 
S_Frq + -0.69004923627526 * S_Mnt + 0.09842717305515 * S_MntMeatProducts + 0.48040050668836 * 
S_NumCatalogPurchases + 0.55911507039756 * S_NumDealsPurchases + 0.35441361757916 * 
S_NumWebVisitsMonth + -0.43753517932111 * S_Recency ;
961482    +   H1x1_1  = H1x1_1  +     0.23871713366711 * Marital_StatusDivorced
961483    +          +     0.13423943689575 * Marital_StatusMarried
961484    +          +    -0.01496857872487 * Marital_StatusSingle
961485    +          +     0.09065620914015 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_1 = H1x1_1 + 0.23871713366711 * Marital_StatusDivorced + 
0.13423943689575 * Marital_StatusMarried + -0.01496857872487 * Marital_StatusSingle + 
0.09065620914015 * Marital_StatusTogether ;
961486    +   H1x1_2  = H1x1_2  +    -0.01884888861908 * Marital_StatusDivorced
961487    +          +     0.03005244373637 * Marital_StatusMarried
961488    +          +    -0.06891231360799 * Marital_StatusSingle
961489    +          +     0.03916911436548 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_2 = H1x1_2 + -0.01884888861908 * Marital_StatusDivorced + 
0.03005244373637 * Marital_StatusMarried + -0.06891231360799 * Marital_StatusSingle + 
0.03916911436548 * Marital_StatusTogether ;
961490    +   H1x1_3  = H1x1_3  +     0.13813252013441 * Marital_StatusDivorced
961491    +          +     0.01694145364157 * Marital_StatusMarried
961492    +          +    -0.05183794192194 * Marital_StatusSingle
961493    +          +     0.03543146366331 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_3 = H1x1_3 + 0.13813252013441 * Marital_StatusDivorced + 
0.01694145364157 * Marital_StatusMarried + -0.05183794192194 * Marital_StatusSingle + 
0.03543146366331 * Marital_StatusTogether ;
961494    +   H1x1_4  = H1x1_4  +    -0.02708459807651 * Marital_StatusDivorced
961495    +          +     0.44185773223966 * Marital_StatusMarried
961496    +          +     -0.6351733171702 * Marital_StatusSingle
961497    +          +     0.63280583005707 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H1x1_4 = H1x1_4 + -0.02708459807651 * Marital_StatusDivorced + 
0.44185773223966 * Marital_StatusMarried + -0.6351733171702 * Marital_StatusSingle + 
0.63280583005707 * Marital_StatusTogether ;
961498    +   H1x1_1  =    -1.91705514496288 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = -1.91705514496288 + H1x1_1 ;
961499    +   H1x1_2  =      0.5215405194232 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 0.5215405194232 + H1x1_2 ;
961500    +   H1x1_3  =     1.20502195447806 + H1x1_3 ;
MPRINT(EM_DIAGRAM):   H1x1_3 = 1.20502195447806 + H1x1_3 ;
961501    +   H1x1_4  =    -1.53366644544584 + H1x1_4 ;
MPRINT(EM_DIAGRAM):   H1x1_4 = -1.53366644544584 + H1x1_4 ;
961502    +   H1x1_1  = SIN(H1x1_1 );
MPRINT(EM_DIAGRAM):   H1x1_1 = SIN(H1x1_1 );
961503    +   H1x1_2  = SIN(H1x1_2 );
MPRINT(EM_DIAGRAM):   H1x1_2 = SIN(H1x1_2 );
961504    +   H1x1_3  = SIN(H1x1_3 );
MPRINT(EM_DIAGRAM):   H1x1_3 = SIN(H1x1_3 );
961505    +   H1x1_4  = SIN(H1x1_4 );
MPRINT(EM_DIAGRAM):   H1x1_4 = SIN(H1x1_4 );
961506    +END;
MPRINT(EM_DIAGRAM):   END;
961507    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961508    +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
961509    +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
961510    +   H1x1_3  = .;
MPRINT(EM_DIAGRAM):   H1x1_3 = .;
961511    +   H1x1_4  = .;
MPRINT(EM_DIAGRAM):   H1x1_4 = .;
961512    +END;
MPRINT(EM_DIAGRAM):   END;
961513    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961514    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
961515    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961516    +
961517    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
961518    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
961519    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
961520    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
961521    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
961522    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
961523    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
961524    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
961525    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
961526    +end;
MPRINT(EM_DIAGRAM):   end;
961527    +else do;
MPRINT(EM_DIAGRAM):   else do;
961528    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
961529    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
961530    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
961531    +   end;
MPRINT(EM_DIAGRAM):   end;
961532    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
961533    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
961534    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
961535    +   end;
MPRINT(EM_DIAGRAM):   end;
961536    +   else do;
MPRINT(EM_DIAGRAM):   else do;
961537    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
961538    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
961539    +   end;
MPRINT(EM_DIAGRAM):   end;
961540    +end;
MPRINT(EM_DIAGRAM):   end;
961541    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
961542    +   P_DepVar1  =     39.2787940172339 * H1x1_1  +    -104.671380650004 * H1x1_2
961543    +          +      81.489126537237 * H1x1_3  +     9.55747882149012 * H1x1_4 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 39.2787940172339 * H1x1_1 + -104.671380650004 * H1x1_2 + 
81.489126537237 * H1x1_3 + 9.55747882149012 * H1x1_4 ;
961544    +   P_DepVar1  =      5.5599052732327 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 5.5599052732327 + P_DepVar1 ;
961545    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
961546    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
961547    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
961548    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
961549    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
961550    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
961551    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
961552    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
961553    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
961554    +END;
MPRINT(EM_DIAGRAM):   END;
961555    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
961556    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
961557    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
961558    +END;
MPRINT(EM_DIAGRAM):   END;
961559    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
961560    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
961561    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
961562    +END;
MPRINT(EM_DIAGRAM):   END;
961563    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
961564    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
961565    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
961566    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
961567    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
961568    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
961569    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
961570    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961571    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
961572    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
961573    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
961574    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
961575    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
961576    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
961577    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
961578    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
961579    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
961580    +END;
MPRINT(EM_DIAGRAM):   END;
961581    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
961582    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
961583    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
961584    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
961585     run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL40_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
961586     quit;
961587     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
961588     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
961589     * AutoNeural40: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * AutoNeural40: Computing metadata for TRAIN data;
961590     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.AUTONEURAL40_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural40\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.AutoNeural40_TRAIN out=_tempAdvisor 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.AutoNeural40_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.AutoNeural40_TRAIN out=WORK.M1HY3RL5 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HY3RL5;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1HY3RL5(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HY3RL5;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1HY3RL5;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2ZMRMBN NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2S970Y3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZMRMBN;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural40_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "AutoNeural40";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "AutoNeural40";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural40: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
961902     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
961903     set EMWS8.AutoNeural40_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural40_EMINFO;
961904     where DATA='AutoNeural40' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='AutoNeural40' and KEY ^in('DECDATA', 'DECMETA', 
'IMPORTANCE', 'MODEL');
961905     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL40_EMINFO.
      WHERE (DATA='AutoNeural40') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

961906     data EMWS8.AutoNeural40_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.AutoNeural40_EMINFO;
961907     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
961908     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
961909     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.AUTONEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
961913     run;
961914     data EMWS8.AutoNeural40_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural40_EMINFO;
961915     set EMWS8.AutoNeural40_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural40_EMINFO WORK.MODELTEMP_INFO;
961916     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL40_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

961917     proc sort data = EMWS8.AutoNeural40_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.AutoNeural40_EMINFO NOTHREADS;
961918     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
961919     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL40_EMINFO.
NOTE: The data set EMWS8.AUTONEURAL40_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

961920     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
961921     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
961922     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

961923     proc sort data = EMWS8.AutoNeural40_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.AutoNeural40_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
961924     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
961925     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL40_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

961926     data EMWS8.AutoNeural40_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural40_EMINFO;
961927     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
961928     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
961929     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL40_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

961930     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
961931     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
961932     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
961933     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.AUTONEURAL40_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.AUTONEURAL40_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
