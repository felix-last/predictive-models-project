MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H46m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                11 de Abril de 2016
Time:                14H46m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O21E56L1 "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O21E56L1 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H46m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Paul Englert";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11 de Abril de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H46m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Paul Englert";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22775      proc freq data=EMWS8.VarClus2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus2_VariableSet noprint;
22776      table ROLE*LEVEL/out=WORK.VarClus2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClus2META;
22777      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.VARCLUS2_VARIABLESET.
NOTE: The data set WORK.VARCLUS2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22778      proc print data=WORK.VarClus2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClus2META label noobs;
22779      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22780      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22781      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22782      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22783      run;

NOTE: There were 7 observations read from the data set WORK.VARCLUS2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22784      title10;
MPRINT(EM_DIAGRAM):   title10;
22785      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23168      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23169      * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
23170      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23171      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

23172      %let EMEXCEPTIONSTRING=;
23173      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23174      * TRAIN: VarClus2;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus2;
23175      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23176      %let EM_ACTION = TRAIN;
23177      %let syscc = 0;
23178      
23179      %macro main;
23180      
23181         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
23182         %include temp;
23183         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
23184         %include temp;
23185         filename temp;
23186      
23187        %SetProperties;
23188      
23189         %if %upcase(&EM_ACTION) = CREATE %then %do;
23190             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
23191             %include temp;
23192             filename temp;
23193             %create;
23194         %end;
23195         %else
23196         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23197              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
23198                 %include temp;
23199                 filename temp;
23200                 %train;
23201         %end;
23202         %else
23203         %if %upcase(&EM_ACTION) = SCORE %then %do;
23204                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
23205                 %include temp;
23206                 filename temp;
23207                 %score;
23208         %end;
23209         %else
23210         %if %upcase(&EM_ACTION) = REPORT %then %do;
23211                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
23212                 %include temp;
23213                 filename temp;
23214                 %report;
23215         %end;
23216         /*
23217         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
23218             %put 'OPENING TABLE';
23219         %end;
23220         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
23221             %put 'CLOSE TABLE';
23222         %end;
23223         */
23224      %mend main;
23225      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
23227     +/* Initialize property macro variables */
23228     +%macro SetProperties;
23229     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
23230     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
23231     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
23232     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
23233     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
23234     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
23235     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
23236     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
23237     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
23238     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
23239     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
23240     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
23241     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
23243     +%mend SetProperties;
23245     +%Macro MakeDummyVariables(indata=,
23246     +                          outvar=,
23247     +                          outdata=,
23248     +                          fileref=,
23249     +                          recreatecmeta=N, /* optional */
23250     +                          incmeta=,     /* optional */
23251     +                          outcmeta=,    /* optional */
23252     +                          ndummyvars=_ndummyvars
23253     +                          );
23254     +    %global &ndummyvars;
23256     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
23257     +       class
23258     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23259     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23260     +    ;
23261     +    run;
23262     +    %let &ndummyvars = 0;
23263     +    data _null_;
23264     +    %let dsid = %sysfunc(open(work._classout));
23265     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
23266     +    %let dsid = %sysfunc(close(&dsid));
23267     +    run;
23269     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
23270     +       input
23271     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23272     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23273     +        / level=nominal stdize=no;
23274     +       make outvar = &outvar;
23275     +       score data = &indata out =&outdata;
23276     +       code  file=  "&fileref";
23277     +    run;
23278     +    %if &recreatecmeta eq Y %then %do;
23279     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
23280     +    data _tmpds;
23281     +        set _tmpds;
23282     +           ROLE = 'INPUT';
23283     +           LEVEL = 'INTERVAL';
23284     +           CREATOR='DMZIP';
23285     +           if NAME = '_TYPE_' then delete;
23286     +    run;
23287     +    data &outcmeta;
23288     +         set &incmeta _tmpds;
23289     +    run;
23290     +    %end;
23291     +    proc datasets lib=work nolist;
23292     +      delete  _dmdbdat _dmdbcat _classout
23293     +    %if &recreatecmeta eq Y %then %do;
23294     +    _tmpds
23295     +    %end;
23296     +    ;
23297     +    quit;
23298     +%Mend MakeDummyVariables;
23300     +/*--- Determine Optimal Number of Cluster ----
23301     +%macro FindClusNum(statds=, groupds=, minvariation=);
23302     +   %global optnclus;
23303     +   data varclus_tmp(drop=_NAME_);
23304     +      set &statDs;
23305     +      where _type_ ='PROPOR';
23306     +   run;
23307     +   proc sort data=varclus_tmp;
23308     +      by _NCL_;
23309     +   run;
23310     +   proc transpose data=varclus_tmp out=varclus_tmp;
23311     +      by _NCL_;
23312     +      var %EM_INTERVAL_INPUT
23313     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
23314     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
23315     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
23316     +          %do i = 2 %to &nvar;
23317     +          %let varname = %sysfunc(varname(&dsid, &i));
23318     +          &varname
23319     +          %end;
23320     +      %end;
23321     +   ;
23322     +   run;
23324     +   %if &minVariation eq %then %do;
23325     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
23326     +   %end;
23327     +   %if ^(0<&minVariation<100) %then %do;
23328     +       %let minVariation = 90;
23329     +   %end;
23331     +   data _null_;
23332     +      set varclus_tmp end=eof;
23333     +      by _NCL_;
23334     +      retain flag 0;
23335     +      if first._ncl_ then flag=0;
23336     +      if .<col1 < &minVariation then flag=1;
23337     +      if last._ncl_ and ^flag then do;
23338     +         call symput('OPTNCL', _ncl_);
23339     +         stop;
23340     +      end;
23341     +     if eof then call symput('OPTNCL', _ncl_);
23342     +   run;
23344     +   %let optnclus = &OPTNCL;
23346     +   data varclus_tmp(drop=_NCL_ _NAME_);
23347     +      set &statDs;
23348     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
23349     +   run;
23350     +   proc sort data=varclus_tmp;
23351     +      by _TYPE_;
23352     +   run;
23353     +   proc transpose data=varclus_tmp out=varclus_tmp;
23354     +      by _TYPE_;
23355     +   run;
23356     +   proc sort data=varclus_tmp;
23357     +      by _name_ _type_;
23358     +   run;
23360     +  proc transpose data=varclus_tmp out=&groupds;
23361     +      by _NAME_;
23362     +   run;
23363     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
23364     +      by Cluster descending Rsquare;
23365     +      where Cluster ne 0;
23366     +   run;
23367     +   proc datasets lib=work nolist mt=(DATA VIEW);
23368     +      delete varclus_tmp;
23369     +   run;
23370     +   quit;
23371     +%mend findClusNum;
23372     +*/
23374     +%macro getNclusfromTrain(inoutstat=, nc=);
23375     +%global &nc;
23376     +data _null_;
23377     +    set &inoutstat end=eof;
23378     +    if eof then do;
23379     +    call symput("&nc", _ncl_);
23380     +    end;
23381     +run;
23382     +%mend  getNclusfromTrain;
23384     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
23386     +     *--- Build Code to Modify Metadata ---*;
23387     +     filename X "&deltacodefile";
23388     +     data _null_;
23389     +        FILE X;
23390     +        set &groupds end=eof;
23391     +        /*by Cluster;*/
23392     +         if _N_=1 then do;
23393     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
23394     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
23395     +           %end;
23396     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
23397     +           put "if upcase(strip(NAME)) in (";
23398     +        end;
23399     +        if Strip(upcase(Selected)) eq 'YES' then do;
23400     +           string = '"'!!trim(left(VARIABLE))!!'"';
23401     +           put string;
23402     +        end;
23403     +        if eof then do;
23404     +           put ') then ROLE="INPUT";';
23405     +           put 'else ROLE="REJECTED";';
23406     +           put 'end;';
23408     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
23409     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
23410     +           %end;
23411     +        end;
23412     +     run;
23413     +     quit;
23415     +     filename X;
23417     +     quit;
23418     +%mend MakeDeltaCode;
23420     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
23421     +    %if ^%sysfunc(exist(&statds)) %then %do;
23422     +         %goto doendc;
23423     +    %end;
23425     +    data &corrds(drop=_TYPE_ _NCL_) ;
23426     +       set &statds;
23427     +       where _type_ eq 'CORR' ;
23428     +    run ;
23429     +    proc sort data=&corrds;
23430     +       by _NAME_ ;
23431     +    run ;
23432     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
23433     +      BY _NAME_ ;
23434     +    run ;
23435     +    data &corrplotds;
23436     +       length _Y_ $100;
23437     +       set &corrplotDs;
23438     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
23439     +    run ;
23440     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
23441     +       set &corrplotds;
23442     +       where _LABEL_ ne '' ;
23443     +       keep _TMP_ _LABEL_ ;
23444     +    run ;
23445     +    data _null_;
23446     +       nobs=0;
23447     +       dsid = open('varclus_match');
23448     +       if dsid then do;
23449     +          nobs = attrn(dsid, 'NOBS');
23450     +          dsid = close(dsid);
23451     +       end;
23452     +       call symput ('CORR_NOBS', nobs);
23453     +    run;
23454     +    %if &corr_nobs %then %do;
23455     +        proc sort data=varclus_match;
23456     +           by _name_;
23457     +        run ;
23458     +        proc sort data=&corrplotds;
23459     +           by _name_;
23460     +        run ;
23461     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
23462     +           merge varclus_match &corrplotds;
23463     +           by _NAME_ ;
23464     +           if _X_ eq '' then _X_=_NAME_ ;
23465     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
23466     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
23467     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
23469     +       run ;
23470     +    %end;
23471     +    %else %do;
23472     +        proc sort data=&corrplotds;
23473     +           by _name_;
23474     +        run ;
23475     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
23476     +           set &corrplotds;
23477     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
23478     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
23479     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
23481     +        run ;
23482     +    %end;
23483     +    proc sort data=&corrplotds;
23484     +       by _X_ _Y_;
23485     +    run ;
23486     +    proc datasets lib=work nolist mt=(DATA VIEW);
23487     +       delete varclus_match;
23488     +    run;
23489     +    quit;
23491     +%doendc:
23493     +%mend MakeVarClusCorrData;
23495     +%macro MakeStatPlotData(statds= , outstatplotds=);
23496     +   %if %sysfunc(exist(&statds)) %then %do;
23498     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
23499     +          set &statDs;
23500     +          where _type_ in('MEAN', 'STD', 'N');
23501     +       run ;
23502     +       proc transpose data=varclus_tmp out=&outstatplotds;
23503     +          id _TYPE_ ;
23504     +       run ;
23505     +       data &outstatplotds;
23506     +          set &outstatplotds(obs=1000);
23507     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
23508     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
23509     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
23510     +          else SCALEDSTD= STD ;
23511     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
23512     +       run ;
23513     +       proc sort data=&outstatplotds;
23514     +          by descending SCALEDSTD ;
23515     +       run ;
23516     +       proc datasets lib=work nolist mt=(DATA VIEW);
23517     +          delete varclus_tmp;
23518     +       run;
23519     +       quit;
23520     +    %end;
23522     +%mend MakeStatPlotData;
23525     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
23526     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
23527     +    data &EM_USER_OUTSTATSCORE;
23528     +          set &indata;
23529     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
23530     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
23531     +          if _TYPE_ = 'STD' then _NAME_='STD';
23532     +          DROP _TYPE_ _NCL_;
23533     +     run;
23535     +     filename _file_  "&fileRef";
23537     +     data _null_;
23538     +        FILE _file_ MOD;
23539     +        put ' ';
23540     +        put '/*-------------------------------------------------*/';
23541     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
23542     +        put '/*-------------------------------------------------*/';
23543     +        put ' ';
23544     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
23546     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
23547     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
23549     +        %let k = 1;
23550     +        %do %while(^%sysfunc(fetch(&dsid)));
23551     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
23552     +                %if &k > 2 %then %do;
23553     +                 %let cn = %eval(&k-2);
23554     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
23555     +                %end;
23556     +                %let k = %eval(&k+1);
23557     +        %end;
23559     +        %let rc = %sysfunc(rewind(&dsid));
23561     +        %do i= 2 %to &nvar;
23562     +            %let _varname =  %sysfunc(varname(&dsid, &i));
23563     +            %do %while(^%sysfunc(fetch(&dsid)));
23564     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
23565     +                %if &_name = MEAN %then
23566     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
23567     +                %else %if &_name = STD %then
23568     +                %let _std = %sysfunc(getvarn(&dsid, &i));
23569     +                %else %do;
23570     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
23571     +                      %let abscoeff = %sysfunc(abs(&coeff));
23572     +                          %if &abscoeff >  0 %then %do;
23573     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
23574     +                           %end;
23575     +                 %end;
23576     +             %end;
23577     +             %let rc = %sysfunc(rewind(&dsid));
23578     +         %end;
23580     +        %let dsid= %sysfunc(close(&dsid));
23581     +       run;
23582     +%mend CreateScoreCode;
23586     +/*----------------------------------------------------------
23587     +    Instead of using %MakeRSquareData,
23588     +    %MakeVarClusResultTable at macro2.source is used
23589     + +----------------------------------------------------------*/
23592     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
23594     +/* modifying  from ods rsquare = data */
23596     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
23597     +    Length Cluster $16;
23598     +    length Variable $32;
23599     +    Length VariableLabel $64;
23600     +    set &indata; retain CurrentCluster;
23601     +    if NumberOfClusters ^= &ncluster then delete;
23602     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
23603     +    CurrentCluster = Cluster;
23604     +   run;
23605     +proc sort data =&outdata ;
23606     +     by Cluster RsquareRatio;
23607     +run;
23608     +data _tmprsq(drop=index);
23609     +     set &outdata; by Cluster;
23610     +     if first.Cluster then do;
23611     +     index = strip(scan(Cluster,2 ));
23612     +     Variable = "Clus"||index;
23613     +     VariableLabel = "Cluster Component "||index;
23614     +     OwnCluster = 1;
23615     +     NextClosest = .;
23616     +     RsquareRatio = 0;
23617     +     output;
23618     +     end;
23619     +run;
23621     +proc sort data = _tmprsq ;
23622     +     by Cluster RsquareRatio;
23623     +run;
23624     +data &outdata;
23625     +     set &outdata _tmprsq;
23626     +by Cluster;
23627     +run;
23630     +/* Just create the Selected variable with all YES */
23632     +data &outdata;
23633     +    set &outdata; by cluster;
23634     +    length Selected $8;
23635     +    Selected = 'YES';
23636     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23637     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23638     +    rename OwnCluster = RSqWithClusterComp;
23639     +    rename NextClosest = RSqWithNextClusComp;
23640     +run;
23643     +/* Selected = Y/N will be done %score section -----
23645     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
23646     +data &outdata;
23647     +    set &outdata; by cluster;
23648     +    length Selected $8;
23649     +    if first.Cluster then Selected = 'YES';
23650     +    else Selected = 'NO';
23651     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23652     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23653     +    rename OwnCluster = RSqWithClusterComp;
23654     +    rename NextClosest = RSqWithNextClusComp;
23655     +run;
23656     +%end;
23657     +%else %do;
23658     +data &outdata;
23659     +    set &outdata; by cluster;
23660     +    if last.Cluster then Selected = 'YES';
23661     +    else Selected = 'NO';
23662     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23663     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23664     +    rename OwnCluster = RSqWithClusterComp;
23665     +    rename NextClosest = RSqWithNextClusComp;
23666     +run;
23667     +%end;
23668     +---------------------------------------------------------------*/
23670     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
23671     +/* to calculate NextClosestClusRsq */
23672     +proc transpose data = &inClusRSquare  out=_clusRsq;
23673     +      by cluster;
23674     +      run;
23675     +data _clusRsq;
23676     +     set _clusRsq;
23677     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
23678     +run;
23680     +proc sort data=_clusRsq;
23681     +    by cluster col1;
23682     +    run;
23683     +data _clusRsq(drop=_NAME_ _LABEL_);
23684     +     set _clusRsq; by cluster;
23685     +     if last.Cluster then output;
23686     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
23687     +     rename COL1 = RSqWithNextClusComp;
23688     +     rename Cluster = Variable;
23689     +     label  Cluster = "Variable";
23690     +run;
23692     +proc sort data =&outdata;
23693     +     by Variable;
23694     +run;
23695     +data &outdata;
23696     +    merge &outdata _clusRsq;
23697     +    by Variable;
23698     +run;
23699     +proc sort data =&outdata;
23700     +by Cluster  RsquareRatio;
23701     +run;
23702     +quit;
23703     +%end;
23705     +proc datasets lib = work nolist;
23706     +     delete _tmprsq _clusRsq;
23707     +     run;
23708     +quit;
23710     +%mend MakeRSquareData;
23713     +/*-------------------------------------------------------------------------*/
23717     +%macro ModifyCorr(indata=,
23718     +                  outdata=,
23719     +                  rsquare = Y
23720     +                  );
23721     +    data corr_tmp;
23722     +        set &indata;
23723     +    run;
23724     +     proc sql;
23725     +           update &indata
23726     +           set
23727     +     %let dsid = %sysfunc(open(work.corr_tmp));
23728     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
23729     +          %do i = 4 %to &nvar;
23730     +          %let _name = %sysfunc(varname(&dsid, &i));
23731     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
23732     +            %else  %let _name_md = &_name;
23733     +            %if &i < &nvar %then %do;
23734     +               &_name = 1- &_name_md ,
23735     +            %end;
23736     +            %else %do;
23737     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
23738     +            %end;
23739     +          %end;
23740     +      %let dsid= %sysfunc(close(&dsid));
23742     +      select * from &indata;
23743     +      run;
23744     +      proc datasets lib = work nolist;
23745     +           delete corr_tmp;
23746     +      run;
23747     +      quit;
23749     + %mend ModifyCorr;
23751     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
23752     +    data &outdata(drop= _NCL_  _TYPE_);
23753     +       set &indata;
23754     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
23755     +       rename _NAME_ = Cluster;
23756     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23757     +    run;
23758     +    %if &RSquare eq Y %then %do;
23759     +     data corr_tmp;
23760     +        set &outdata;
23761     +     run;
23763     +     data &outdata(drop=i);
23764     +          set &outdata;
23765     +          %let dsid = %sysfunc(open(work.corr_tmp));
23766     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
23767     +          %do i = 2 %to &nvar;
23768     +            %let _name = %sysfunc(varname(&dsid, &i));
23769     +            %let _name_md = &_name.**2;
23770     +                &_name = &_name_md;
23771     +          %end;
23772     +      %let dsid= %sysfunc(close(&dsid));
23773     +      run;
23774     +      proc datasets lib = work nolist;
23775     +           delete corr_tmp;
23776     +      run;
23778     +    %end;
23779     +     quit;
23780     +%mend MakeClusStructCorrData;
23782     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
23783     +    data &outdata(drop= _NCL_  _TYPE_);
23784     +       set &indata;
23785     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
23786     +       rename _NAME_ = Cluster;
23787     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23788     +    run;
23789     +    data corr_tmp;
23790     +        set &outdata;
23791     +    run;
23793     +    %let dsid = %sysfunc(open(work.corr_tmp));
23794     +    %let nclus2= %eval(&ncluster+1);
23795     +    data &outdata;
23796     +         set &outdata;
23797     +          %do i = 2 %to &nclus2;
23798     +          %let i_1 = %eval(&i-1);
23799     +            %let _name = %sysfunc(varname(&dsid, &i));
23800     +            %let _newName = Clus&i_1;
23801     +                rename &_name = &_newName; ;
23802     +                *label &_name ="Cluster &i_1";
23803     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
23804     +          %end;
23805     +          keep Cluster
23806     +          %do i = 2 %to &nclus2;
23807     +                %let _name = %sysfunc(varname(&dsid, &i));
23808     +                &_name
23809     +          %end;
23810     +          ;
23811     +    %let dsid= %sysfunc(close(&dsid));
23812     +     run;
23813     +     quit;
23815     +    %if &RSquare eq Y %then %do;
23817     +       data corr_tmp;
23818     +        set &outdata;
23819     +     run;
23821     +     data &outdata(drop=i);
23822     +          set &outdata;
23823     +          %let dsid = %sysfunc(open(work.corr_tmp));
23824     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
23825     +          %do i = 2 %to &nvar;
23826     +            %let _name = %sysfunc(varname(&dsid, &i));
23827     +            %let _name_md = &_name.**2;
23828     +                &_name = &_name_md;
23829     +          %end;
23830     +      %let dsid= %sysfunc(close(&dsid));
23831     +      run;
23832     +    %end;
23834     +    %if &makeplotds eq Y %then %do;
23835     +     proc transpose data = &outdata
23836     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
23837     +          by cluster;
23838     +     run;
23839     +     data &plotds;
23840     +          set  &plotds;
23841     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
23842     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
23843     +     run;
23844     +     %end;
23845     +     proc datasets lib = work nolist;
23846     +           delete corr_tmp;
23847     +     run;
23848     +     quit;
23849     +%mend MakeInterClusCorrData;
23852     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
23854     +data &outlink(drop = Selected);
23855     +     set &indata;
23856     +     LINKID = _N_;
23857     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
23858     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
23859     +run;
23860     +data &outnode(keep=NODEID TYPE LABEL);
23861     +    set &indata;
23862     +    length TYPE $16;
23863     +    rename Variable = NODEID;
23864     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
23865     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
23866     +    then  TYPE = "CLUSTER";
23867     +    else  TYPE="VARIABLE";
23868     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
23869     +run;
23870     +quit;
23871     +%mend MakeClusConstellData;
23875     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
23877     +data &outlink(drop = Selected);
23878     +     set &indata;
23879     +     LINKID = _N_;
23880     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
23881     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
23882     +run;
23883     +data &outnode(keep=NODEID TYPE LABEL);
23884     +    set &indata;
23885     +    length TYPE $16;
23886     +    rename Variable = NODEID;
23887     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
23888     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
23889     +    then  TYPE = "CLUSTER";
23890     +    else  TYPE="VARIABLE";
23891     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
23892     +run;
23893     +quit;
23894     +%mend MakeClusConstellData;
23897     +/*--- This will work only when inds is not a view data -------
23899     +%macro getNVarNObs(inds=, nvar=, nobs=);
23901     +    %global &nvar;
23902     +    %global &nobs;
23903     +    data _null_;
23904     +         dsid = open("&inds");
23905     +         nv = attrn(dsid, 'NVAR');
23906     +         no = attrn(dsid, 'NOBS');
23907     +         dsid = close(dsid);
23908     +         call symput("&nvar", nv);
23909     +         call symput("&nobs", no);
23910     +    run;
23911     +    quit;
23912     +%mend  getNVarNObs;
23914     ++---------------------------------------------------------------*/
23917     +%macro getNVar(inds=, nvar=);
23918     +    %global &nvar;
23919     +    data _null_;
23920     +         dsid = open("&inds");
23921     +         nv = attrn(dsid, 'NVAR');
23922     +         dsid = close(dsid);
23923     +         call symput("&nvar", nv);
23924     +    run;
23925     +    quit;
23926     +%mend  getNVar;
23930     +%macro getNObs(inds=, nobs=);
23931     +    %global &nobs;
23932     +    data _null_;
23933     +        set &inds end=eof;
23934     +        if eof then call symput("&nobs", _N_);
23935     +    run;
23936     +    quit;
23937     +%mend  getNObs;
23939     +%Macro CreateVarclusMeta(trainnum=);
23940     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
23941     +    data &EM_USER_VARCLUSMETA;
23942     +         length TrainNum 8.;
23943     +         length NewTrain $8;
23944     +         length NGCluster 8.;
23945     +         length ExportedComp $16;
23946     +         length HideVariable $8;
23947     +         TrainNum = &trainnum;
23948     +         NewTrain = "Y";
23949     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
23950     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
23951     +         NGCluster = 0; /* zero means no twostage */
23952     +   run;
23953     +   quit;
23954     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
23956     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
23957     +    data &outdata(drop= _NCL_  _TYPE_);
23958     +       set &indata;
23959     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
23960     +       %if &globalclusid ne %then %do;
23961     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
23962     +       rename _NAME_ = Cluster;
23963     +       %end;
23964     +       %else %do;
23965     +        _NAME_ = upcase(_NAME_);
23966     +       rename _NAME_ = Cluster;
23967     +       %end;
23968     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23969     +    run;
23970     +    data corr_tmp;
23971     +        set &outdata;
23972     +    run;
23974     +    %let dsid = %sysfunc(open(work.corr_tmp));
23975     +    %let nclus2= %eval(&ncluster+1);
23976     +    data &outdata;
23977     +         set &outdata;
23978     +          %do i = 2 %to &nclus2;
23979     +          %let i_1 = %eval(&i-1);
23980     +            %let _name = %sysfunc(varname(&dsid, &i));
23981     +            %if &globalclusid ne %then
23982     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
23983     +                     rename &_name = &_newName;
23984     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
23985     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
23986     +                %end;
23987     +            %else
23988     +                %do; %let _newName = CLUS&i_1;
23989     +                     rename &_name = &_newName;
23990     +                     *label &_name ="Cluster &i_1";
23991     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
23992     +                %end;
23993     +          %end;
23994     +          keep Cluster
23995     +          %do i = 2 %to &nclus2;
23996     +                %let _name = %sysfunc(varname(&dsid, &i));
23997     +                &_name
23998     +          %end;
23999     +          ;
24000     +    %let dsid= %sysfunc(close(&dsid));
24001     +     run;
24002     +     quit;
24004     +    %if &RSquare eq Y %then %do;
24006     +       data corr_tmp;
24007     +        set &outdata;
24008     +     run;
24010     +     data &outdata;
24011     +          set &outdata;
24012     +          %let dsid = %sysfunc(open(work.corr_tmp));
24013     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
24014     +          %do i = 2 %to &nvar;
24015     +            %let _name = %sysfunc(varname(&dsid, &i));
24016     +            %let _name_md = &_name.**2;
24017     +                &_name = &_name_md;
24018     +          %end;
24019     +      %let dsid= %sysfunc(close(&dsid));
24020     +      run;
24021     +    %end;
24023     +    %if &makeplotds eq Y %then %do;
24024     +     proc transpose data = &outdata
24025     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
24026     +          by cluster;
24027     +     run;
24028     +     data &plotds;
24029     +          set  &plotds;
24030     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
24031     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
24032     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
24033     +     run;
24034     +     %end;
24035     +     proc datasets lib = work nolist;
24036     +           delete corr_tmp;
24037     +     run;
24038     +     quit;
24039     +%mend MakeInterClusCorrData;
24041     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
24042     +    data _tmpds(drop= _NCL_);
24043     +       set &indata;
24044     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
24045     +       %if &globalclusid ne %then %do;
24046     +           _NAME_ = "GC&globalclusid.";
24047     +       rename _NAME_ = Cluster;
24048     +       %end;
24049     +       %else %do;
24050     +        _NAME_ = "CLUS";
24051     +        rename _NAME_ = Cluster;
24052     +       %end;
24053     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
24054     +    run;
24055     +    proc transpose data =_tmpds out =&outdata;
24056     +    run;
24058     +    data &outdata(drop=COL1);
24059     +        %if &globalclusid ne %then %do;
24060     +        length GCluster $16;
24061     +        %end;
24062     +        length Cluster $32;
24063     +        length _NAME_ $32;
24064     +         set &outdata;
24065     +         _NAME_ = upcase(_NAME_);
24066     +         rename _NAME_=Variable;
24067     +         *label _NAME_="Variable";
24068     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24069     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24070     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24072     +         %if &globalclusid ne %then %do;
24073     +          GCluster = "GC&globalclusid";
24074     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
24075     +         %end;
24076     +         %else %do;
24077     +         Cluster = "CLUS"||strip(COL1);
24078     +        %end;
24079     +         rename COL2 = RSqWithOwnClusComp;
24080     +         *label COL2 = "R-Square With Own Cluster Component";
24081     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
24083     +   run;
24084     +   proc sort data =&outdata;
24085     +        by Cluster RSqWithOwnClusComp;
24086     +   run;
24087     +   proc datasets lib = work nolist;
24088     +           delete _tmpds;
24089     +   run;
24090     +   quit;
24091     +%mend MakeOwnRSquare;
24093     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
24094     +    data &outdata(drop= _NCL_  _TYPE_);
24095     +       %if &globalclusid ne %then %do;
24096     +        length GCluster $16;
24097     +        %end;
24098     +       set &indata;
24099     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
24100     +       %if &globalclusid ne %then %do;
24101     +         GCluster = "GC&globalclusid";
24102     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
24103     +         rename _NAME_ = Cluster;
24104     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24105     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24107     +       %end;
24108     +       %else %do;
24109     +         _NAME_ = upcase(_NAME_);
24110     +         rename _NAME_ = Cluster;
24111     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24112     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24114     +       %end;
24115     +     run;
24116     +    %if &RSquare eq Y %then %do;
24117     +     data corr_tmp;
24118     +          set &outdata;
24119     +     run;
24120     +     %let istart = 2;
24121     +     %if &globalclusid ne %then %let istart = 3;
24122     +     data &outdata;
24123     +          set &outdata;
24124     +          %let dsid = %sysfunc(open(work.corr_tmp));
24125     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
24126     +          %do i =&istart %to &nvar;
24127     +            %let _name = %sysfunc(varname(&dsid, &i));
24128     +            %let _name_md = &_name.**2;
24129     +                &_name = &_name_md;
24130     +          %end;
24131     +      %let dsid= %sysfunc(close(&dsid));
24132     +      run;
24133     +      proc datasets lib = work nolist;
24134     +           delete corr_tmp;
24135     +      run;
24136     +    %end;
24137     +     quit;
24138     +%mend MakeClusStructCorrData;
24140     +/*
24141     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
24142     +*/
24144     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
24146     +     /* The indata should be the outdata
24147     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
24149     +     proc sort data =&indata out=_tmpclusRsq;
24150     +     by cluster;
24151     +     run;
24153     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
24154     +      by cluster;
24155     +     run;
24157     +     proc sort data=_tmpclusRsq;
24158     +        by _NAME_ COL1;
24159     +     run;
24161     +     data _tmpclusRsq;
24162     +         length _NAME_ $32;
24163     +         set _tmpclusRsq; by _NAME_;
24164     +          _NAME_ = upcase(_NAME_);
24165     +          %if &ncluster ne 1 %then %do;
24166     +             if last._NAME_ then delete;
24167     +          %end;
24168     +          %else %do;
24169     +             COL1 = 0;
24170     +          %end;
24171     +     run;
24172     +     /* need to sort again */
24173     +     proc sort data=_tmpclusRsq;
24174     +        by _NAME_ COL1;
24175     +     run;
24177     +     data &outdata;
24178     +         set _tmpclusRsq; by _NAME_;
24179     +         Cluster = upcase(Cluster);
24180     +         if last._NAME_ then output;
24181     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
24182     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
24183     +         rename COL1 = RSqWithNextClusComp;
24184     +         Cluster = upcase(Cluster);
24185     +         rename Cluster = ClosestCluster;
24186     +         *label  Cluster = "Next Closest Cluster";
24187     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
24188     +         rename _NAME_ = Variable;
24189     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24190     +    run;
24193     +    %if &globalclusid ne %then %do;
24194     +    data &outdata;
24195     +       length GCluster $16;
24196     +       set &outdata;
24197     +       GCluster = "GC&globalclusid";
24198     +       run;
24199     +    %end;
24200     +    proc datasets lib = work nolist;
24201     +           delete _tmpclusRsq;
24202     +    run;
24203     +    quit;
24204     +%mend FindNextClosestClusByVar;
24207     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
24208     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
24209     +     proc sort data =&indata out=_tmpclusRsq;
24210     +     by cluster;
24211     +     run;
24212     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
24213     +     by cluster;
24214     +     run;
24215     +     proc sort data=_tmpclusRsq;
24216     +        by _NAME_ col1;
24217     +     run;
24218     +     data _tmpclusRsq;
24219     +         length _NAME_ $32;
24220     +         set _tmpclusRsq; by _NAME_;
24221     +          _NAME_ = upcase(_NAME_);
24222     +          %if &ncluster ne 1 %then %do;
24223     +             if last._NAME_ then delete;
24224     +          %end;
24225     +          %else %do;
24226     +             COL1 = 0;
24227     +          %end;
24228     +     run;
24229     +     data &outdata;
24230     +         set _tmpclusRsq; by _NAME_;
24231     +         Cluster = upcase(Cluster);
24232     +         if last._NAME_ then output;
24233     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
24234     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
24235     +         rename COL1 = RSqWithNextClusComp;
24236     +         Cluster = upcase(Cluster);
24237     +         rename Cluster = ClosestCluster;
24238     +         *label  Cluster = "Next Closest Cluster";
24239     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
24240     +         rename _NAME_ = Variable;
24241     +         *label  _NAME_ = "Variable";
24242     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24244     +    run;
24245     +    %if &globalclusid ne %then %do;
24246     +    data &outdata;
24247     +       length GCluster $16;
24248     +       set &outdata;
24249     +       GCluster = "GC&globalclusid";
24250     +       run;
24251     +    %end;
24253     +    proc datasets lib = work nolist;
24254     +           delete _tmpclusRsq;
24255     +    run;
24257     +    quit;
24258     +%mend FindNextClosestClusByCluster;
24260     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
24261     +/*----
24262     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
24263     +-----------*/
24265     +proc sort data =&indata1;
24266     +    by Variable;
24267     +run;
24268     +proc sort data =&indata2;
24269     +    by Variable;
24270     +run;
24271     +data &outdata;
24272     +    merge &indata1 &indata2;
24273     +    by Variable;
24274     +    length Type $16;
24275     +    Type = 'Variable';
24276     +    *label Type ='Type';
24277     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
24278     +run;
24281     +data &indata3;
24282     +    set  &indata3 ;
24283     +    length RSqWithOwnClusComp 8.;
24284     +    Cluster = Variable;
24285     +    RSqWithOwnClusComp = 1;
24286     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
24287     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
24288     +    length Type $16;
24289     +    Type = 'ClusterComp';
24290     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
24292     +;
24293     +run;
24295     +proc sort data=&outdata;
24296     +    by Cluster;
24297     +run;
24298     +proc sort data =&indata3;
24299     +    by Cluster;
24300     +run;
24302     +data &outdata;
24303     +     set &outdata &indata3;
24304     +     by Cluster;
24305     +run;
24308     +/* Create the Selected variable with all YES */
24310     +data &outdata;
24311     +     set &outdata;
24312     +     length RsqRatio 8.;
24313     +     length Selected $8;
24314     +     *label RSqRatio = "1-R**2 Ratio";
24315     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
24316     +     *label Selected = "Variable Selected";
24317     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
24318     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
24319     +     Selected ='YES';
24320     +     rename _LABEL_ = Label;
24321     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
24322     +run;
24325     +/*----  Selected = Y/N will be assigened at the %score                   -------+
24326     +        Just create the Selected variable with all YES at the step above
24327     + +------------------------------------------------------------------------------+
24329     +proc sort data=&outdata;
24330     +    by Cluster RsqRatio;
24331     +run;
24333     +%if &selectedcomp eq CLUSTERCOMP %then %do;
24334     +data &outdata;
24335     +     set &outdata; by Cluster;
24336     +     length Selected $8;
24337     +     label Selected = "Variable Selected";
24338     +     if  first.Cluster then Selected ='Yes';
24339     +     else Selected = 'No';
24340     +    run;
24341     +%end;
24342     +%else %do;
24343     +data &outdata(drop = _var _varchange);
24344     +     set &outdata; retain _var 0; by Cluster;
24345     +     length Selected $8;
24346     +     label Selected = "Variable Selected";
24347     +     if first.Cluster then  _varchange = 0;
24348     +     else _varchange =1;
24349     +     if _var ne _varchange then  Selected  = 'Yes';
24350     +     else Selected = 'No';
24351     +     if last.cluster then  _var = 0;
24352     +     else _var = _varchange;
24353     +run;
24354     +%end;
24356     +--------------------------------------------------------------*/
24358     +quit;
24359     +%mend MakeVarClusResultTable;
24361     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
24362     +     proc sort data =&indata;
24363     +        by cluster;
24364     +     run;
24365     +     proc transpose data =&indata
24366     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
24367     +          by cluster;
24368     +     run;
24369     +     data &outdata;
24370     +          set  &outdata;
24371     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24372     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24373     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
24374     +     run;
24375     +     %if &globalclusid ne %then %do;
24376     +     data &outdata;
24377     +          Length GCluster $16;
24378     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24379     +          set  &outdata;
24380     +          GCluster ="GC&globalclusid.";
24381     +          run;
24382     +     %end;
24384     +%Mend MakePlotDataFromCorrTable;
24387     +%macro MakeCorrelation(indata=,
24388     +                       outstat=_tmpoutstat,
24389     +                       corrmatrix=N,
24390     +                       outcorr=_tmpoutcorr,
24391     +                       includeclassvar=N,
24392     +                       target=,
24393     +                       freq=,
24394     +                       weight=);
24395     +   %if &target eq  %then %do;
24397     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
24398     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
24399     +       %if &includeclassvar eq Y %then %do;
24400     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
24401     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
24402     +          %do i = 2 %to &nvar;
24403     +          %let varname = %sysfunc(varname(&dsid, &i));
24404     +          &varname
24405     +          %end;
24406     +       %end;
24407     +       ;
24408     +      %if &freq ne  %then %do;
24409     +          freq &freq;
24410     +      %end;
24411     +      %if &weight ne  %then %do;
24412     +          weight &weight;
24413     +      %end;
24415     +      run;
24416     +      %if &corrmatrix eq Y %then %do;
24417     +      data  &outcorr (drop = _NCL_ _TYPE_);
24418     +           set  &outstat ;
24419     +           if _TYPE_ ='CORR' then output;
24420     +      run;
24421     +      %end;
24422     +    %end;
24423     +    %else %do;
24424     +       proc corr data=&indata outp=&outstat noprint;
24425     +            var
24426     +       %let dsid = %sysfunc(open(&indata));
24427     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
24428     +          %do i = 1 %to &nvar;
24429     +              %let _name = %sysfunc(varname(&dsid, &i));
24430     +              %if &_name ne &target %then;
24431     +              &_name
24432     +           %end;
24433     +        %let dsid= %sysfunc(close(&dsid));
24434     +        ;
24435     +        with &target;
24436     +        run;
24437     +    %end;
24438     +    quit;
24439     +%mend MakeCorrelation;
24442     +%macro MakeCorrelationDistance(indata=,
24443     +                               outdata=,
24444     +                               rsquare = N
24445     +                               );
24446     +    data corr_tmp;
24447     +        set &indata;
24448     +        if _N_ = 1 then do;
24449     +           output;
24450     +           stop;
24451     +         end;
24452     +    run;
24453     +    %if &outdata ne  %then %let  _outdata = &outdata;
24454     +    %else %let _outdata = &indata;
24456     +    data &_outdata;
24457     +         set &indata;
24459     +         %let dsid = %sysfunc(open(work.corr_tmp));
24460     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
24461     +          %do i = 2 %to &nvar;
24462     +              %let _name = %sysfunc(varname(&dsid, &i));
24463     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
24464     +              %else  %let _name_md = &_name;
24465     +              &_name = 1- &_name_md;
24466     +          %end;
24467     +      %let dsid= %sysfunc(close(&dsid));
24468     +      run;
24469     +      proc datasets lib = work nolist;
24470     +           delete corr_tmp;
24471     +      run;
24472     +      quit;
24473     +  %mend MakeCorrelationDistance;
24476     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
24477     +                                   rsquare = N
24478     +                                   );
24479     +    data corr_tmp;
24480     +        set &indata;
24481     +    run;
24482     +    proc sql noprint;
24483     +           update &indata
24484     +           set
24485     +     %let dsid = %sysfunc(open(work.corr_tmp));
24486     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
24487     +          %do i = 4 %to &nvar;
24488     +          %let _name = %sysfunc(varname(&dsid, &i));
24489     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
24490     +            %else  %let _name_md = &_name;
24491     +            %if &i < &nvar %then %do;
24492     +               &_name = 1- &_name_md ,
24493     +            %end;
24494     +            %else %do;
24495     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
24496     +            %end;
24497     +          %end;
24498     +      %let dsid= %sysfunc(close(&dsid));
24500     +      select * from &indata;
24501     +      run;
24502     +     data &indata( drop = _NCL_);
24503     +           set &indata;
24504     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
24505     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
24506     +     run;
24507     +     data &indata(DROP = _NCL_);
24508     +           set &indata;
24509     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
24510     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
24511     +           rename _NAME_ = _VAR_;
24512     +     run;
24513     +     proc datasets lib = work nolist;
24514     +           delete corr_tmp;
24515     +     run;
24516     +     quit;
24517     + %mend UpdateOutStatCorrToDistance;
24520     +%macro HierClusWithCorr(indata= ,
24521     +                        ncluster=,
24522     +                        method = Ward,
24523     +                        outtree = _outtree,
24524     +                        idvar =_VAR_,
24525     +                        outdata=,
24526     +                        rescore = N,
24527     +                        newncluster=
24528     +                        );
24529     +      %global &newncluster;
24530     +      %if &rescore ne Y %then %do;
24531     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
24532     +                   method=&method outtree=&outtree noprint;
24533     +           id &idvar;
24534     +      run;
24535     +      %end;
24536     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
24537     +      run;
24538     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
24539     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
24540     +      run;
24541     +      data _outcontent;
24542     +          set _outcontent;
24543     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
24544     +          index = 1;
24545     +          rename NAME = _NAME_;
24546     +      run;
24547     +      proc sort data=_outcontent;
24548     +          by _NAME_;
24549     +      run;
24550     +      proc sort data =&outdata;
24551     +           by _NAME_;
24552     +      run;
24553     +      data &outdata(drop=index);
24554     +          merge &outdata _outcontent;
24555     +          by _NAME_;
24556     +          if index = . then delete;
24557     +      run;
24558     +      /*-----------------------------------------------------------*/
24559     +      data &outdata;
24560     +           length CLUSNAME $16;
24561     +           set &outdata;
24562     +           if CLUSTER > &ncluster then delete;
24563     +           CLUSNAME='GC'||strip(CLUSTER);
24564     +           *label CLUSNAME = "Cluster Name";
24565     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
24566     +           rename _NAME_ = VARIABLE ;
24567     +           *label _NAME_ = "Variable";
24568     +           *label CLUSTER = "Cluster";
24569     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24570     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24571     +      run;
24572     +      proc sort data=&outdata out=&outdata;
24573     +           by CLUSTER;
24574     +      run;
24575     +      proc means data =&outdata noprint;
24576     +           output out=_meanout;
24577     +      run;
24578     +      data _null_;
24579     +            set _meanout;
24580     +            if strip(_STAT_) eq 'MAX' then do;
24581     +            call symput("&newncluster", CLUSTER);
24582     +            stop;
24583     +            end;
24584     +      run;
24586     +      proc datasets lib = work nolist;
24587     +           delete _outcontent _meanout;
24588     +      run;
24589     +      quit;
24590     +%mend  HierClusWithCorr;
24592     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
24594     +     data _tmpindata;
24595     +          set &indata;
24596     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
24597     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
24598     +          if _TYPE_ = 'STD' then _NAME_='STD';
24599     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
24600     +          DROP _TYPE_ _NCL_;
24601     +     run;
24603     +     filename _file_  "&fileRef";
24605     +     data _null_;
24606     +        FILE _file_ MOD;
24607     +        put ' ';
24608     +        put "/*-------------------------------------------------*/";
24609     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
24610     +        put "/*-------------------------------------------------*/";
24611     +        put ' ';
24612     +        %let dsid = %sysfunc(open(work._tmpindata));
24614     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
24615     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
24616     +        %let k = 1;
24617     +        %do %while(^%sysfunc(fetch(&dsid)));
24618     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24619     +               %if &k > 2 %then %do;
24620     +                %let cn = %eval(&k-2);
24621     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
24622     +                %end;
24623     +                %let k = %eval(&k+1);
24625     +        %end;
24626     +        %let rc = %sysfunc(rewind(&dsid));
24628     +        %do j= 2 %to &nvar;
24629     +            %let _varname = %sysfunc(varname(&dsid, &j));
24630     +            %do %while(^%sysfunc(fetch(&dsid)));
24631     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24632     +                %if &_name = MEAN %then
24633     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
24634     +                %else %if &_name = STD %then
24635     +                %let _std = %sysfunc(getvarn(&dsid, &j));
24636     +                %else %do;
24637     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
24638     +                      %let abscoeff = %sysfunc(abs(&coeff));
24639     +                          %if &abscoeff >  0 %then %do;
24640     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
24641     +                           %end;
24642     +                 %end;
24643     +             %end;
24644     +             %let rc = %sysfunc(rewind(&dsid));
24645     +         %end;
24647     +        %let dsid= %sysfunc(close(&dsid));
24649     +     run;
24651     +     filename _file_;
24652     +     proc datasets lib = work nolist;
24653     +           delete _tmpindata;
24654     +     run;
24655     +     quit;
24656     +%mend CreateScoreCode2;
24659     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
24661     +     /*--- Build Code to Modify Metadata ---*/
24662     +     filename X "&deltacodefile";
24663     +     data _null_;
24664     +        FILE X;
24665     +        set &groupds end=eof;
24666     +        if _N_=1 then do;
24667     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
24668     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
24669     +           %end;
24670     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
24671     +           put "if upcase(strip(NAME)) in (";
24672     +        end;
24673     +        if Strip(upcase(Selected)) eq 'YES' then do;
24674     +           string = '"'!!trim(left(VARIABLE))!!'"';
24675     +           put string;
24676     +        end;
24677     +        if eof then do;
24678     +           put ') then ROLE="INPUT";';
24679     +           put 'else ROLE="REJECTED";';
24680     +           put 'end;';
24682     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
24683     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
24684     +           %end;
24685     +        end;
24686     +     run;
24687     +     quit;
24689     +     filename X;
24690     +     quit;
24691     +%mend MakeDeltaCode2;
24693     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
24694     +  %global &ngc;
24695     +  data _null_;
24696     +  %if &indata ne %then %do;
24697     +      %let dsid = %sysfunc(open(&indata));
24698     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
24699     +      %let dsid = %sysfunc(close(&dsid));
24700     +  %end;
24701     +  %else %do;
24702     +       %let nvar = %eval(&ninput+&ndummy); ;
24703     +  %end;
24704     +  %let numgc = %eval(&nvar/&div+2);
24705     +  %let &ngc = &numgc;
24706     +   run;
24707     +  quit;
24708     +%mend getInitialGClusterNumber;
24711     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
24712     +data &outlink(drop = Selected);
24713     +     set &indata;
24714     +     LINKID = _N_;
24715     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
24716     +run;
24717     +data &outnode(keep=NODEID TYPE LABEL);
24718     +    set &indata;
24719     +    length TYPE $16;
24720     +    rename VARIABLE = NODEID;
24721     +    *label  CLUSNAME="Node ID";
24722     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24723     +    TYPE = "VARIABLE";
24724     +    *label TYPE = "Node Type";
24725     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24726     +    run;
24727     +data _tmp(keep=NODEID TYPE LABEL);
24728     +    set &indata;
24729     +    length TYPE $16;
24730     +    rename CLUSNAME = NODEID;
24731     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24732     +    TYPE = "GCLUSTER";
24733     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24734     +    run;
24735     +proc sort data=_tmp;
24736     +    by NODEID;
24737     +run;
24738     +data _tmp;
24739     +    set _tmp; by NODEID;
24740     +    if first.NODEID then output;
24741     +run;
24742     +proc sort data=&outnode;
24743     +    by NODEID;
24744     +run;
24745     +data  &outnode;
24746     +    set _tmp &outnode;
24747     +run;
24748     +proc datasets lib = work nolist;
24749     +     delete _tmp;
24750     +run;
24751     +quit;
24752     +%mend MakeGobalConstellData;
24754     +/* Make contellation plot data among GCLUSTERS */
24756     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
24758     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
24759     +     set &indata;
24760     +     LINKID = _N_;
24761     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
24762     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
24763     +     end;
24764     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
24765     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
24766     +     end;
24767     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
24768     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
24769     +    end;
24770     +run;
24772     +data _tmp_outrsquare;
24773     +        set &inoutrsq;
24774     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
24775     +run;
24777     +proc freq data =_tmp_outrsquare noprint;
24778     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
24779     +run;
24781     +data &outnode(keep=_NAME_ TYPE LABEL);
24782     +    set &outlink;
24783     +    length TYPE $16;
24784     +    length LABEL $100;
24785     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
24787     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
24788     +    TYPE = "GCLUSTER";
24789     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
24790     +    end;
24791     +    else do;
24792     +    TYPE= "ROOT";
24793     +    LABEL= _NAME_;
24794     +    end;
24795     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24796     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
24797     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24798     +    run;
24800     +proc sort data=&outnode;
24801     +     by _NAME_;
24802     +proc sort data=_tmp_GCLUSFREQ;
24803     +     by _NAME_;
24804     +run;
24806     +data  &outnode;
24807     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
24808     +     if COUNT=. then COUNT=1;
24809     +run;
24811     +proc datasets lib = work nolist;
24812     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
24813     +run;
24815     +quit;
24816     +%Mend MakeGClusterConstData;
24819     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
24821     +    data _gscoretmpds;
24822     +          set &indata;
24823     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
24824     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
24825     +          if _TYPE_ = 'STD' then _NAME_='STD';
24826     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
24827     +          DROP _TYPE_ _NCL_;
24828     +     run;
24830     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
24831     +        GCluster Component &globalclusid ------ */
24833     +    filename _file_  "&fileref";
24835     +    data _null_;
24836     +        %if &globalclusid eq 1 %then %do;
24837     +          FILE _file_;
24838     +        %end;
24839     +        %else %do;
24840     +          FILE _file_ MOD;
24841     +        %end;
24843     +        %let dsid = %sysfunc(open(work._gscoretmpds));
24844     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
24845     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
24847     +        %let k = 1;
24848     +        %do %while(^%sysfunc(fetch(&dsid)));
24849     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24850     +                %if &k > 2 %then %do;
24851     +                put "&_name = 0 ; ";
24852     +                %end;
24853     +                %let k = %eval(&k+1);
24854     +        %end;
24856     +        %let rc = %sysfunc(rewind(&dsid));
24857     +        %do i= 2 %to &nvar;
24858     +            %let _varname =  %sysfunc(varname(&dsid, &i));
24859     +            %do %while(^%sysfunc(fetch(&dsid)));
24860     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24861     +                %if &_name = MEAN %then
24862     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
24863     +                %else %if &_name = STD %then
24864     +                %let _std = %sysfunc(getvarn(&dsid, &i));
24865     +                %else %do;
24866     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
24867     +                      %let abscoeff = %sysfunc(abs(&coeff));
24868     +                          %if &abscoeff >  0 %then %do;
24869     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
24870     +                           %end;
24871     +                 %end;
24872     +             %end;
24873     +             %let rc = %sysfunc(rewind(&dsid));
24875     +         %end;
24877     +        %let dsid= %sysfunc(close(&dsid));
24878     +       run;
24881     +       proc datasets lib=work nolist;
24882     +            delete _gscoretmpds;
24883     +       run;
24884     +      quit;
24886     +%mend CreateGClusterScoreCode;
24889     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
24891     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
24892     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
24893     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
24894     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
24895     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
24896     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
24897     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
24898     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
24899     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
24900     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
24901     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
24902     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
24903     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
24904     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
24906     +   filename gsfile "&gscorecode";
24908     +   data &EM_USER_GSCORE;
24909     +             set &indata;
24910     +             %include  gsfile;
24911     +        keep
24912     +        %do i=1 %to &ngcluster;
24913     +         %let gcvarname = GC&i;
24914     +         &gcvarname
24915     +        %end;
24916     +     ;
24917     +   run;
24919     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
24920     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
24921     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
24922     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
24923     +    noprint  ;
24924     +     var
24925     +       %do i=1 %to &ngcluster;
24926     +         %let gcvarname = GC&i;
24927     +         &gcvarname
24928     +        %end;
24929     +   ;
24930     +   run;
24933     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
24934     +   data &EM_USER_GSCORECORRPLOT ;
24935     +        set &EM_USER_GSCORECORRPLOT;
24936     +        rename _X_ = X;
24937     +        rename _Y_ = Y;
24938     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24939     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24940     +   run;
24942     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
24944     +   data &EM_USER_GSCORETREE;
24945     +        length _NAME_ $32;
24946     +        length _LABEL_ $100;
24947     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
24948     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
24949     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
24950     +        end;else do;
24951     +         _LABEL_ = _NAME_;
24952     +        end;
24953     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
24955     +   run;
24957     +   quit;
24959     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
24964     +%macro train;
24966     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
24967     +   %include temp;
24968     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
24969     +   %include temp;
24970     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
24971     +   %include temp;
24972     +   filename temp;
24974     +   %let VARCLUS_MAXNUMOBS = 100000;
24975     +   %let VARCLUS_MAXNUMVAR = 200;
24976     +   %let trainnum = 0;
24977     +   %let error = 0;
24979     +   %if &EM_IMPORT_DATA eq %then %do;
24980     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
24981     +       %let  error = 1;
24982     +       %goto endtrain;
24983     +   %end;
24985     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
24986     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
24987     +        %let  error = 1;
24988     +        %goto endline;
24989     +    %end;
24991     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
24992     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
24993     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
24994     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
24995     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
24996     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
24998     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
24999     +        %if  &_num_input_total < 2 %then %do;
25000     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25001     +            %let error = 2;
25002     +            %goto endtrain;
25003     +        %end;
25004     +   %end;
25005     +   %else %do;
25006     +         %if  &_num_input_interval < 2 %then %do;
25007     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25008     +         %let error = 2;
25009     +         %goto endtrain;
25010     +         %end;
25011     +   %end;
25013     +   %em_checkerror();
25015     +   %if &EMEXCEPTIONSTRING ne %then %do;
25016     +       %goto endtrain;
25017     +   %end;
25019     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
25021     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
25022     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
25023     +                             outvar=&EM_USER_OUTDUMMY,
25024     +                             outdata=_newtrainds,
25025     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
25027     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25028     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
25029     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25030     +                proc datasets lib=work nolist;
25031     +                delete  _newtrainds;
25032     +                run;
25033     +                quit;
25034     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25035     +                %let error = 3;
25036     +               %goto endtrain;
25037     +            %end;
25038     +        %end;
25040     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
25041     +             %getNVar(inds=_newtrainds, nvar=_nvar);
25043     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
25044     +                %let trainnum = 2;
25045     +            %end;
25046     +            %else %do;
25047     +                %let trainnum = 1;
25048     +            %end;
25049     +        %end;
25050     +    %end;
25051     +    %else %do;
25053     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25055     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
25057     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25059     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25060     +                  %let error = 3;
25061     +                 %goto endtrain;
25062     +            %end;
25063     +        %end;
25066     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
25067     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
25068     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
25069     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
25070     +                %let trainnum = 2;
25071     +            %end;
25072     +            %else %do;
25073     +                %let trainnum = 1;
25074     +            %end;
25075     +        %end;
25077     +   %end;
25079     +    %em_checkerror();
25081     +    %if &EMEXCEPTIONSTRING ne %then %do;
25082     +       %let error = 4;
25083     +       %goto endtrain;
25084     +    %end;
25086     +    %CreateVarclusMeta(trainnum=&trainnum);
25088     +    %if &error > 0 %then  %goto endtrain;
25090     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
25092     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
25093     +           %train1;
25094     +       %end;
25095     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
25096     +           %train2;
25097     +       %end;
25099     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
25100     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
25101     +      %em_copyfile(infref=_in, outfref=_out);
25102     +      filename _in;
25103     +      filename _out;
25106     +   %endtrain:
25109     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
25111     +%macro VarClus(indata=,
25112     +               outstat=,
25113     +               outtree=,
25114     +               vars=,
25115     +               freq=,
25116     +               weight=,
25117     +               includeclassvar=
25118     +               );
25120     +   %if &vars eq %then
25121     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
25123     +       proc varclus data = &indata outstat= &outstat
25124     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
25125     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
25126     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
25127     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
25128     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
25129     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
25130     +       %end;
25132     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
25133     +            maxeigen = &EM_PROPERTY_MAXEIGEN
25134     +       %end;
25136     +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
25137     +            proportion = &EM_PROPERTY_PROPORTION
25138     +       %end;
25139     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
25140     +               summary
25141     +       %end;
25143     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
25144     +           short
25145     +       %end;
25146     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
25147     +           corr trace simple
25148     +       %end;
25149     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
25150     +          noprint
25151     +       %end;
25152     +       outtree=&outtree
25153     +       ;
25154     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
25156     +      %if &includeclassvar eq Y %then %do;
25157     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
25158     +          %if &dsid > 0 %then %do;
25159     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
25160     +              %do i = 2 %to &nvar;
25161     +                  %let varname = %sysfunc(varname(&dsid, &i));
25162     +                   &varname
25163     +              %end;
25165     +          %end;
25166     +      %end;
25168     +      ;
25169     +      /*------------------------
25170     +      %if &freq ne  %then %do;
25171     +          freq &freq;
25172     +      %end;
25173     +      %if &weight ne  %then %do;
25174     +          weight &weight;
25175     +      %end;
25176     +      ----------------------------*/
25177     +      %if %EM_FREQ ne %then %do;
25178     +           Freq %EM_FREQ;
25179     +      %end;
25180     +      ;
25181     +    run;
25182     +    %endline:
25183     +    quit;
25184     +%mend VarClus;
25186     +%macro Train1;
25188     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
25189     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
25190     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
25191     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
25192     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
25193     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
25194     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
25195     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
25196     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
25197     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
25198     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
25199     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
25200     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
25202     +   /*
25203     +     %let VARCLUS_MAXNUMOBS = 100;
25204     +     %let VARCLUS_MAXNUMVAR = 200;
25205     +   */
25207     +   /* Train
25209     +   %if &EM_IMPORT_DATA eq %then %do;
25210     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25211     +       %goto endtrain1;
25212     +   %end;
25214     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
25215     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25216     +        %goto endtrain1;
25217     +   %end;
25218     +   */
25219     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25220     +       /* moved this to pretrain ------------
25222     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
25223     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
25224     +                             outvar=&EM_USER_OUTDUMMY,
25225     +                             outdata=_newtrainds,
25226     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
25228     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25229     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
25230     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
25231     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25232     +                %goto endtrain;
25233     +            %end;
25234     +        %end;
25236     +        +-------------------------------------*/
25238     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25239     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
25240     +          There is no _newtrainds */
25241     +         %VarClus( indata=&EM_IMPORT_DATA,
25242     +                  outstat=&EM_USER_OUTSTAT,
25243     +                  outtree = &EM_USER_OUTTREE,
25244     +                  includeclassvar=N
25245     +                 );
25246     +        %end;
25247     +        %else %do;
25248     +        %VarClus( indata=_newtrainds,
25249     +                  outstat=&EM_USER_OUTSTAT,
25250     +                  outtree = &EM_USER_OUTTREE,
25251     +                  includeclassvar=Y
25252     +                 );
25253     +         proc datasets lib=work nolist;
25254     +              delete  _newtrainds;
25255     +         run;
25256     +         %end;
25257     +    %end;
25258     +    %else %do;
25260     +        /*----- moved this to pretrain ------------
25261     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25262     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
25263     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
25264     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25265     +                 %goto endtrain;
25266     +            %end;
25267     +        %end;
25268     +        +-------------------------------------*/
25270     +        %VarClus(indata=&EM_IMPORT_DATA,
25271     +                  outstat=&EM_USER_OUTSTAT,
25272     +                  outtree =&EM_USER_OUTTREE,
25273     +                  includeclassvar=N
25274     +               );
25276     +   %end;
25278     +   %em_checkerror();
25280     +   %if &EMEXCEPTIONSTRING ne %then %do;
25281     +       %goto endtrain1;
25282     +   %end;
25283     +    /*
25284     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
25285     +    */
25287     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
25289     +    %let gid=;
25291     +    /*--- To make the main result table ----------------------*/
25293     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
25294     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
25295     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
25296     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
25297     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
25298     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
25300     +   /* Inter Cluster Correlation Plot ------------------------*/
25302     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
25303     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
25305     +   /* Create some other data sets for results ----*/
25307     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
25308     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
25309     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
25311     +  /*---- move this to Score action ------------
25312     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
25313     +   */
25315     +   /* create score code at training time */
25316     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
25317     +   %endtrain1:
25318     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
25321     +%macro VarClus2( indata=,
25322     +                 outdata=,
25323     +                 outstat =outstat,
25324     +                 outrsquare=outrsquare,
25325     +                 outtree = outtree,
25326     +                 outclusstruct = outclusstruct,
25327     +                 outcluscorr =outcluscorr,
25328     +                 outcluscorrplot =outcluscorrplot,
25329     +                 outclusrsquare =outclusrsquare,
25330     +                 outstatplot = outstatplot,
25331     +                 outcorr = outcorr,
25332     +                 outcorrplot = outcorrplot,
25333     +                 clusdata=,
25334     +                 outnode=outnode,
25335     +                 outlink=outlink,
25336     +                 ngroup =1  );
25337     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
25338     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25339     +              %goto endline;
25340     +         %end;
25342     +        %global numglobalcluster;
25343     +        %let  numglobalcluster = &ngroup;
25344     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
25345     +        %do vci =1 %to &ngroup;
25346     +           data tmp_clusdata;
25347     +                set &clusdata;
25348     +                if CLUSTER ne &vci then delete;
25349     +           run;
25350     +           %let outstatds = &outstat.&vci;
25351     +           %let outrsquareds = &outrsquare.&vci;
25352     +           %let outtreeds = &outtree.&vci;
25353     +           %let outclusstuctds = &outclusstruct.&vci;
25354     +           %let outcluscorrds = &outcluscorr.&vci;
25355     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
25356     +           %let outclusrsquareds = &outclussquare.&vci;
25357     +           %let outstatplotds = &outstatplot.&vci;
25358     +           %let outcorrds = &outcorr.&vci;
25359     +           %let outcorrplotds = &outcorrplot.&vci;
25360     +           %let outnodeds = &outnode.&vci;
25361     +           %let outlinkds = &outlink.&vci;
25363     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
25364     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
25365     +           %let emuseroutstat = &EM_USER_&outstatds;
25367     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
25368     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
25369     +           %let emuserouttree = &EM_USER_&outtreeds;
25371     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
25372     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
25373     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
25375     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
25376     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
25377     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
25379     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
25380     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
25381     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
25383     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
25384     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
25385     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
25387     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
25388     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
25389     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
25391     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
25392     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
25393     +           %let emuseroutcorr = &EM_USER_&outcorrds;
25395     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
25396     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
25397     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
25399     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
25400     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
25401     +           %let emuseroutnode = &EM_USER_&outnodeds;
25403     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
25404     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
25405     +           %let emuseroutlink = &EM_USER_&outlinkds;
25407     +           proc varclus data=&indata outstat=&emuseroutstat
25408     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
25409     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
25410     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
25411     +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
25412     +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
25413     +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
25414     +           %end;
25416     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
25417     +            maxeigen = &EM_PROPERTY_MAXEIGEN
25418     +            %end;
25420     +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
25421     +                proportion = &EM_PROPERTY_PROPORTION
25422     +           %end;
25423     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
25424     +               summary
25425     +           %end;
25426     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
25427     +               short
25428     +           %end;
25429     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
25430     +               corr trace simple
25431     +           %end;
25432     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
25433     +               noprint
25434     +           %end;
25435     +              outtree=&emuserouttree
25436     +           ;
25437     +           var
25438     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
25439     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
25440     +                %do %while(^%sysfunc(fetch(&dsid)));
25441     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
25442     +                    &_varname
25443     +                %end;
25444     +            %let dsid = %sysfunc(close(&dsid));
25445     +           ;
25446     +           %if %EM_FREQ ne %then %do;
25447     +           Freq %EM_FREQ;
25448     +           %end;
25449     +           run;
25451     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
25453     +            %let gid=&vci;
25454     +            /*--- To make the main result table ----------------------*/
25455     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
25456     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
25457     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
25458     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
25459     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
25460     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
25462     +            /* Inter Cluster Correlation Plot ------------------------*/
25464     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
25465     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
25467     +           /* Create some other data sets for results ---------------*/
25469     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
25470     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
25471     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
25473     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
25475     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
25477     +           %if &vci = 1 %then %do;
25478     +           data &EM_USER_OUTRSQUARE;
25479     +                set &emuseroutrsquare;
25480     +           run;
25481     +           %end;
25482     +           %else %do;
25483     +           data &EM_USER_OUTRSQUARE;
25484     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
25485     +           run;
25486     +           %end;
25487     +           quit;
25488     +       %end;
25490     +       /*---- move this to Score action ------------
25491     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
25492     +       */
25494     +       /* Make Score Gcluster component & correlation  */
25495     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
25497     +       quit;
25498     +       %endline:
25499     +%mend VarClus2;
25502     +%macro Train2;
25504     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
25505     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
25506     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
25507     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
25508     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
25509     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
25510     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
25511     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
25512     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
25513     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
25514     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
25515     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
25516     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
25517     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
25518     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
25519     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
25520     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
25521     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
25525     +    /* Train */
25527     +   /* moved to pretrain ------------
25529     +   %if &EM_IMPORT_DATA eq %then %do;
25530     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25531     +       %goto endtrain2;
25532     +   %end;
25534     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
25535     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25536     +        %goto endtrain2;
25537     +   %end;
25538     +   +-------------------------------------------*/
25540     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
25543     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25545     +        /*----- moved to pretrain ------------
25547     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
25548     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
25549     +                             outvar=&EM_USER_OUTDUMMY,
25550     +                             outdata=_newtrainds,
25551     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
25552     +                              ndummyvars=_ndummyvars
25553     +                            );
25555     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25556     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
25557     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25558     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25559     +                %goto endtrain;
25560     +            %end;
25561     +        %end;
25563     +        +---------------------------------------*/
25564     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25565     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
25566     +          There is no _newtrainds */
25567     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
25568     +                             outstat=&EM_USER_GOUTSTAT,
25569     +                             corrmatrix=Y,
25570     +                             outcorr=&EM_USER_GOUTCORR,
25571     +                             includeclassvar=N,
25572     +                             freq =%EM_FREQ
25573     +                          );
25574     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
25576     +        %end;
25577     +        %else %do;
25578     +         %MakeCorrelation(   indata=_newtrainds,
25579     +                             outstat=&EM_USER_GOUTSTAT,
25580     +                             corrmatrix=Y,
25581     +                             outcorr=&EM_USER_GOUTCORR,
25582     +                             includeclassvar=Y,
25583     +                             freq =%EM_FREQ
25584     +                          );
25585     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
25587     +        %end;
25589     +    %end;
25590     +    %else %do;
25592     +        /* moved to pretrain -------------------
25594     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25595     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
25596     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25597     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25598     +                %goto endtrain;
25599     +            %end;
25600     +        %end;
25601     +         +------------------------------------------*/
25603     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
25604     +                          outstat=&EM_USER_GOUTSTAT,
25605     +                          corrmatrix=Y,
25606     +                          outcorr=&EM_USER_GOUTCORR,
25607     +                          includeclassvar=N,
25608     +                          freq =%EM_FREQ
25609     +                          );
25610     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
25611     +    %end;
25613     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
25614     +                                rsquare = N
25615     +                                );
25616     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
25617     +                      ncluster=&_ngc,
25618     +                      method = Ward,
25619     +                      outtree =&EM_USER_GOUTTREE,
25620     +                      idvar = _VAR_,
25621     +                      outdata=&EM_USER_GOUTGROUP,
25622     +                      rescore = N,
25623     +                      newncluster=_newnclus
25624     +                        );
25626     +   /* store the number of global cluster */
25628     +   data &EM_USER_VARCLUSMETA;
25629     +        set &EM_USER_VARCLUSMETA;
25630     +        NGCluster = &_newnclus;
25631     +   run;
25633     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
25635     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25636     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25637     +            %VarClus2(indata=&EM_IMPORT_DATA,
25638     +                 clusdata=&EM_USER_GOUTGROUP,
25639     +                 ngroup=&_newnclus);
25640     +         %end;
25641     +         %else %do;
25642     +             %VarClus2(indata=_newtrainds,
25643     +                 clusdata=&EM_USER_GOUTGROUP,
25644     +                 ngroup=&_newnclus);
25646     +         %end;
25648     +   %end;
25649     +   %else %do;
25650     +       %VarClus2(indata=&EM_IMPORT_DATA,
25651     +                 clusdata=&EM_USER_GOUTGROUP,
25652     +                 ngroup=&_newnclus);
25653     +   %end;
25655     +   %em_checkerror();
25656     +   %if &EMEXCEPTIONSTRING ne %then %do;
25657     +       %put &em_codebar;
25658     +       %put Error: Variable clustering failed.;
25659     +       %put &em_codebar;
25660     +       %goto endtrain2;
25661     +   %end;
25662     +   /*
25663     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
25664     +   */
25665     +   %endtrain2:
25666     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
25668     +%macro em_copyfile(infref=, outfref=, append=N);
25670     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
25672     +       %let omode =;
25673     +       %if &append=Y %then
25674     +           %let omode = MOD;
25675     +       data _null_;
25676     +          length line $20000;
25677     +          file &outfref &omode lrecl=20000;
25678     +          fid=fopen("&infref",'i',20000,'v');
25679     +          if fid > 0  then do;
25680     +             do while(^fread(fid));
25681     +                rlen = frlen(fid);
25682     +                rc= fget(fid,line,20000);
25683     +                start = length(line)-length(left(line))+1;
25684     +                line=strip(line);
25685     +                put @start line;
25686     +             end;
25687     +             if fid > 0  then rc=fclose(fid);
25688     +          end;
25689     +       run;
25691     +   %end;
25692     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25693      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.FIMPORT_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.07 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25694      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus2_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS2_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.FIMPORT_train outstat= EMWS8.VarClus2_OUTSTAT hi short outtree=EMWS8.VarClus2_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   Dt_Customer Income Kidhome MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines NumCatalogPurchases NumDealsPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth Recency Teenhome Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.18 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: The data set EMWS8.VARCLUS2_OUTSTAT has 113 observations and 20 variables.
NOTE: The data set EMWS8.VARCLUS2_OUTTREE has 26 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.42 seconds
      cpu time            0.26 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25695      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus2_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 6 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename Dt_Customer = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Dt_Customer = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntGoldProds = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntGoldProds = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster Dt_Customer Income Kidhome MntFishProducts MntFruits MntGoldProds ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus2_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 36 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 36 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 36 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 36 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 30 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 6 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 6 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 17 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 17 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 17 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 17 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 17 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus2_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 6 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSSTRUCT has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Dt_Customer = Dt_Customer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kidhome = Kidhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFishProducts = MntFishProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFruits = MntFruits**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntGoldProds = MntGoldProds**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntMeatProducts = MntMeatProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntSweetProducts = MntSweetProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntWines = MntWines**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumCatalogPurchases = NumCatalogPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDealsPurchases = NumDealsPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumStorePurchases = NumStorePurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebPurchases = NumWebPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebVisitsMonth = NumWebVisitsMonth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recency = Recency**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Teenhome = Teenhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSSTRUCT has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus2_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 102 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 102 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 102 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 102 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 85 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 85 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 85 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 85 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 17 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 17 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 17 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 17 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 17 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 17 observations read from the data set WORK._OWNRSQ.
NOTE: There were 17 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 17 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 6 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 17 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 6 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus2_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: There were 6 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 23 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 6 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename Dt_Customer = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Dt_Customer = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntGoldProds = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntGoldProds = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster Dt_Customer Income Kidhome MntFishProducts MntFruits MntGoldProds ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus2_OUTCLUSCORRPLOT out=EMWS8.VarClus2_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 6 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 36 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 36 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 17 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus2_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS2_OUTCORR has 17 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCORR has 17 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus2_OUTCORR out=EMWS8.VarClus2_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 17 observations read from the data set EMWS8.VARCLUS2_OUTCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 289 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 289 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 289 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 289 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 289 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 289 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 289 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 289 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 289 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 289 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 289 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 289 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 289 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 289 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus2_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 23 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTLINK has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus2_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 23 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTNODE has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus2_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 6 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 113 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATSCORE has 8 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+1 * (Dt_Customer - 19553.8697142857)/202.052022727954;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.30408426696055 * (Income - 53205.392)/24410.4277866822;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+-0.23281293159549 * (Kidhome - 0.44142857142857)/0.53859153300391;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+0.39041458573697 * (MntFishProducts - 35.5348571428571)/51.2863252021191;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+0.39735202714034 * (MntFruits - 27.14)/39.9730954102047;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.22608321786998 * (MntGoldProds - 43.2017142857142)/49.9785881267037;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.31017309633718 * (MntMeatProducts - 182.929428571428)/260.336061073568;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+0.39896039869304 * (MntSweetProducts - 26.5468571428571)/38.8858822242907;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.29577588097777 * (MntWines - 306.187428571428)/339.565906100902;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.29980193396944 * (NumCatalogPurchases - 2.87514285714285)/3.70914680981366;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.41810219185626 * (NumDealsPurchases - 2.45914285714285)/2.34171128147754;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.2905224735221 * (NumStorePurchases - 5.77657142857142)/3.28190056994392;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.2747259999943 * (NumWebPurchases - 4.034)/2.65060530598945;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.27259539424177 * (NumWebVisitsMonth - 5.29457142857142)/2.70864402605556;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+1 * (Recency - 48.9188571428571)/28.675311575951;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.54994644376022 * (Teenhome - 0.49085714285714)/0.54746353952922;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.42635322949418 * (Year_Birth - 1968.63428571428)/12.0299935454084;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=11 de Abril de 2016 14H46m,
      Create Time=03 de Abril de 2016 17H26m

NOTE: 28 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11 de Abril de 2016 14H46m,
      Create Time=03 de Abril de 2016 17H26m

NOTE: 28 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25696      
25697      *------------------------------------------------------------*;
25698      * End TRAIN: VarClus2;
25699      *------------------------------------------------------------*;

25700      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25701      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
25702      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25703      ;
MPRINT(EM_DIAGRAM):   ;
25704      ;
MPRINT(EM_DIAGRAM):   ;
25705      ;
MPRINT(EM_DIAGRAM):   ;
25706      ;
MPRINT(EM_DIAGRAM):   ;
25707      quit;
MPRINT(EM_DIAGRAM):   quit;
25708      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25709      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
25710      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25711      /*; *"; *'; */
25712      ;
MPRINT(EM_DIAGRAM):   ;
25713      run;
MPRINT(EM_DIAGRAM):   run;
25714      quit;
MPRINT(EM_DIAGRAM):   quit;
25715      /* Reset EM Options */
25716      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
25717      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
25718      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
