MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H18m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                05 de Março de 2016
Time:                11H18m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TOL3GF "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TOL3GF new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H18m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H18m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22768      proc freq data=EMWS8.VarClus2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus2_VariableSet noprint;
22769      table ROLE*LEVEL/out=WORK.VarClus2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClus2META;
22770      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS8.VARCLUS2_VARIABLESET.
NOTE: The data set WORK.VARCLUS2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22771      proc print data=WORK.VarClus2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClus2META label noobs;
22772      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22773      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22774      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22775      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22776      run;

NOTE: There were 6 observations read from the data set WORK.VARCLUS2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22777      title10;
MPRINT(EM_DIAGRAM):   title10;
22778      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23138      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23139      * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
23140      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23141      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

23142      %let EMEXCEPTIONSTRING=;
23143      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23144      * TRAIN: VarClus2;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus2;
23145      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23146      %let EM_ACTION = TRAIN;
23147      %let syscc = 0;
23148      
23149      %macro main;
23150      
23151         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
23152         %include temp;
23153         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
23154         %include temp;
23155         filename temp;
23156      
23157        %SetProperties;
23158      
23159         %if %upcase(&EM_ACTION) = CREATE %then %do;
23160             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
23161             %include temp;
23162             filename temp;
23163             %create;
23164         %end;
23165         %else
23166         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23167              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
23168                 %include temp;
23169                 filename temp;
23170                 %train;
23171         %end;
23172         %else
23173         %if %upcase(&EM_ACTION) = SCORE %then %do;
23174                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
23175                 %include temp;
23176                 filename temp;
23177                 %score;
23178         %end;
23179         %else
23180         %if %upcase(&EM_ACTION) = REPORT %then %do;
23181                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
23182                 %include temp;
23183                 filename temp;
23184                 %report;
23185         %end;
23186         /*
23187         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
23188             %put 'OPENING TABLE';
23189         %end;
23190         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
23191             %put 'CLOSE TABLE';
23192         %end;
23193         */
23194      %mend main;
23195      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
23197     +/* Initialize property macro variables */
23198     +%macro SetProperties;
23199     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
23200     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
23201     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
23202     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
23203     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
23204     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
23205     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
23206     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
23207     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
23208     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
23209     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
23210     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
23211     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
23213     +%mend SetProperties;
23215     +%Macro MakeDummyVariables(indata=,
23216     +                          outvar=,
23217     +                          outdata=,
23218     +                          fileref=,
23219     +                          recreatecmeta=N, /* optional */
23220     +                          incmeta=,     /* optional */
23221     +                          outcmeta=,    /* optional */
23222     +                          ndummyvars=_ndummyvars
23223     +                          );
23224     +    %global &ndummyvars;
23226     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
23227     +       class
23228     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23229     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23230     +    ;
23231     +    run;
23232     +    %let &ndummyvars = 0;
23233     +    data _null_;
23234     +    %let dsid = %sysfunc(open(work._classout));
23235     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
23236     +    %let dsid = %sysfunc(close(&dsid));
23237     +    run;
23239     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
23240     +       input
23241     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23242     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23243     +        / level=nominal stdize=no;
23244     +       make outvar = &outvar;
23245     +       score data = &indata out =&outdata;
23246     +       code  file=  "&fileref";
23247     +    run;
23248     +    %if &recreatecmeta eq Y %then %do;
23249     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
23250     +    data _tmpds;
23251     +        set _tmpds;
23252     +           ROLE = 'INPUT';
23253     +           LEVEL = 'INTERVAL';
23254     +           CREATOR='DMZIP';
23255     +           if NAME = '_TYPE_' then delete;
23256     +    run;
23257     +    data &outcmeta;
23258     +         set &incmeta _tmpds;
23259     +    run;
23260     +    %end;
23261     +    proc datasets lib=work nolist;
23262     +      delete  _dmdbdat _dmdbcat _classout
23263     +    %if &recreatecmeta eq Y %then %do;
23264     +    _tmpds
23265     +    %end;
23266     +    ;
23267     +    quit;
23268     +%Mend MakeDummyVariables;
23270     +/*--- Determine Optimal Number of Cluster ----
23271     +%macro FindClusNum(statds=, groupds=, minvariation=);
23272     +   %global optnclus;
23273     +   data varclus_tmp(drop=_NAME_);
23274     +      set &statDs;
23275     +      where _type_ ='PROPOR';
23276     +   run;
23277     +   proc sort data=varclus_tmp;
23278     +      by _NCL_;
23279     +   run;
23280     +   proc transpose data=varclus_tmp out=varclus_tmp;
23281     +      by _NCL_;
23282     +      var %EM_INTERVAL_INPUT
23283     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
23284     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
23285     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
23286     +          %do i = 2 %to &nvar;
23287     +          %let varname = %sysfunc(varname(&dsid, &i));
23288     +          &varname
23289     +          %end;
23290     +      %end;
23291     +   ;
23292     +   run;
23294     +   %if &minVariation eq %then %do;
23295     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
23296     +   %end;
23297     +   %if ^(0<&minVariation<100) %then %do;
23298     +       %let minVariation = 90;
23299     +   %end;
23301     +   data _null_;
23302     +      set varclus_tmp end=eof;
23303     +      by _NCL_;
23304     +      retain flag 0;
23305     +      if first._ncl_ then flag=0;
23306     +      if .<col1 < &minVariation then flag=1;
23307     +      if last._ncl_ and ^flag then do;
23308     +         call symput('OPTNCL', _ncl_);
23309     +         stop;
23310     +      end;
23311     +     if eof then call symput('OPTNCL', _ncl_);
23312     +   run;
23314     +   %let optnclus = &OPTNCL;
23316     +   data varclus_tmp(drop=_NCL_ _NAME_);
23317     +      set &statDs;
23318     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
23319     +   run;
23320     +   proc sort data=varclus_tmp;
23321     +      by _TYPE_;
23322     +   run;
23323     +   proc transpose data=varclus_tmp out=varclus_tmp;
23324     +      by _TYPE_;
23325     +   run;
23326     +   proc sort data=varclus_tmp;
23327     +      by _name_ _type_;
23328     +   run;
23330     +  proc transpose data=varclus_tmp out=&groupds;
23331     +      by _NAME_;
23332     +   run;
23333     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
23334     +      by Cluster descending Rsquare;
23335     +      where Cluster ne 0;
23336     +   run;
23337     +   proc datasets lib=work nolist mt=(DATA VIEW);
23338     +      delete varclus_tmp;
23339     +   run;
23340     +   quit;
23341     +%mend findClusNum;
23342     +*/
23344     +%macro getNclusfromTrain(inoutstat=, nc=);
23345     +%global &nc;
23346     +data _null_;
23347     +    set &inoutstat end=eof;
23348     +    if eof then do;
23349     +    call symput("&nc", _ncl_);
23350     +    end;
23351     +run;
23352     +%mend  getNclusfromTrain;
23354     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
23356     +     *--- Build Code to Modify Metadata ---*;
23357     +     filename X "&deltacodefile";
23358     +     data _null_;
23359     +        FILE X;
23360     +        set &groupds end=eof;
23361     +        /*by Cluster;*/
23362     +         if _N_=1 then do;
23363     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
23364     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
23365     +           %end;
23366     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
23367     +           put "if upcase(strip(NAME)) in (";
23368     +        end;
23369     +        if Strip(upcase(Selected)) eq 'YES' then do;
23370     +           string = '"'!!trim(left(VARIABLE))!!'"';
23371     +           put string;
23372     +        end;
23373     +        if eof then do;
23374     +           put ') then ROLE="INPUT";';
23375     +           put 'else ROLE="REJECTED";';
23376     +           put 'end;';
23378     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
23379     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
23380     +           %end;
23381     +        end;
23382     +     run;
23383     +     quit;
23385     +     filename X;
23387     +     quit;
23388     +%mend MakeDeltaCode;
23390     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
23391     +    %if ^%sysfunc(exist(&statds)) %then %do;
23392     +         %goto doendc;
23393     +    %end;
23395     +    data &corrds(drop=_TYPE_ _NCL_) ;
23396     +       set &statds;
23397     +       where _type_ eq 'CORR' ;
23398     +    run ;
23399     +    proc sort data=&corrds;
23400     +       by _NAME_ ;
23401     +    run ;
23402     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
23403     +      BY _NAME_ ;
23404     +    run ;
23405     +    data &corrplotds;
23406     +       length _Y_ $100;
23407     +       set &corrplotDs;
23408     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
23409     +    run ;
23410     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
23411     +       set &corrplotds;
23412     +       where _LABEL_ ne '' ;
23413     +       keep _TMP_ _LABEL_ ;
23414     +    run ;
23415     +    data _null_;
23416     +       nobs=0;
23417     +       dsid = open('varclus_match');
23418     +       if dsid then do;
23419     +          nobs = attrn(dsid, 'NOBS');
23420     +          dsid = close(dsid);
23421     +       end;
23422     +       call symput ('CORR_NOBS', nobs);
23423     +    run;
23424     +    %if &corr_nobs %then %do;
23425     +        proc sort data=varclus_match;
23426     +           by _name_;
23427     +        run ;
23428     +        proc sort data=&corrplotds;
23429     +           by _name_;
23430     +        run ;
23431     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
23432     +           merge varclus_match &corrplotds;
23433     +           by _NAME_ ;
23434     +           if _X_ eq '' then _X_=_NAME_ ;
23435     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
23436     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
23437     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
23439     +       run ;
23440     +    %end;
23441     +    %else %do;
23442     +        proc sort data=&corrplotds;
23443     +           by _name_;
23444     +        run ;
23445     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
23446     +           set &corrplotds;
23447     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
23448     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
23449     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
23451     +        run ;
23452     +    %end;
23453     +    proc sort data=&corrplotds;
23454     +       by _X_ _Y_;
23455     +    run ;
23456     +    proc datasets lib=work nolist mt=(DATA VIEW);
23457     +       delete varclus_match;
23458     +    run;
23459     +    quit;
23461     +%doendc:
23463     +%mend MakeVarClusCorrData;
23465     +%macro MakeStatPlotData(statds= , outstatplotds=);
23466     +   %if %sysfunc(exist(&statds)) %then %do;
23468     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
23469     +          set &statDs;
23470     +          where _type_ in('MEAN', 'STD', 'N');
23471     +       run ;
23472     +       proc transpose data=varclus_tmp out=&outstatplotds;
23473     +          id _TYPE_ ;
23474     +       run ;
23475     +       data &outstatplotds;
23476     +          set &outstatplotds(obs=1000);
23477     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
23478     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
23479     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
23480     +          else SCALEDSTD= STD ;
23481     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
23482     +       run ;
23483     +       proc sort data=&outstatplotds;
23484     +          by descending SCALEDSTD ;
23485     +       run ;
23486     +       proc datasets lib=work nolist mt=(DATA VIEW);
23487     +          delete varclus_tmp;
23488     +       run;
23489     +       quit;
23490     +    %end;
23492     +%mend MakeStatPlotData;
23495     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
23496     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
23497     +    data &EM_USER_OUTSTATSCORE;
23498     +          set &indata;
23499     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
23500     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
23501     +          if _TYPE_ = 'STD' then _NAME_='STD';
23502     +          DROP _TYPE_ _NCL_;
23503     +     run;
23505     +     filename _file_  "&fileRef";
23507     +     data _null_;
23508     +        FILE _file_ MOD;
23509     +        put ' ';
23510     +        put '/*-------------------------------------------------*/';
23511     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
23512     +        put '/*-------------------------------------------------*/';
23513     +        put ' ';
23514     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
23516     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
23517     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
23519     +        %let k = 1;
23520     +        %do %while(^%sysfunc(fetch(&dsid)));
23521     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
23522     +                %if &k > 2 %then %do;
23523     +                 %let cn = %eval(&k-2);
23524     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
23525     +                %end;
23526     +                %let k = %eval(&k+1);
23527     +        %end;
23529     +        %let rc = %sysfunc(rewind(&dsid));
23531     +        %do i= 2 %to &nvar;
23532     +            %let _varname =  %sysfunc(varname(&dsid, &i));
23533     +            %do %while(^%sysfunc(fetch(&dsid)));
23534     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
23535     +                %if &_name = MEAN %then
23536     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
23537     +                %else %if &_name = STD %then
23538     +                %let _std = %sysfunc(getvarn(&dsid, &i));
23539     +                %else %do;
23540     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
23541     +                      %let abscoeff = %sysfunc(abs(&coeff));
23542     +                          %if &abscoeff >  0 %then %do;
23543     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
23544     +                           %end;
23545     +                 %end;
23546     +             %end;
23547     +             %let rc = %sysfunc(rewind(&dsid));
23548     +         %end;
23550     +        %let dsid= %sysfunc(close(&dsid));
23551     +       run;
23552     +%mend CreateScoreCode;
23556     +/*----------------------------------------------------------
23557     +    Instead of using %MakeRSquareData,
23558     +    %MakeVarClusResultTable at macro2.source is used
23559     + +----------------------------------------------------------*/
23562     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
23564     +/* modifying  from ods rsquare = data */
23566     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
23567     +    Length Cluster $16;
23568     +    length Variable $32;
23569     +    Length VariableLabel $64;
23570     +    set &indata; retain CurrentCluster;
23571     +    if NumberOfClusters ^= &ncluster then delete;
23572     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
23573     +    CurrentCluster = Cluster;
23574     +   run;
23575     +proc sort data =&outdata ;
23576     +     by Cluster RsquareRatio;
23577     +run;
23578     +data _tmprsq(drop=index);
23579     +     set &outdata; by Cluster;
23580     +     if first.Cluster then do;
23581     +     index = strip(scan(Cluster,2 ));
23582     +     Variable = "Clus"||index;
23583     +     VariableLabel = "Cluster Component "||index;
23584     +     OwnCluster = 1;
23585     +     NextClosest = .;
23586     +     RsquareRatio = 0;
23587     +     output;
23588     +     end;
23589     +run;
23591     +proc sort data = _tmprsq ;
23592     +     by Cluster RsquareRatio;
23593     +run;
23594     +data &outdata;
23595     +     set &outdata _tmprsq;
23596     +by Cluster;
23597     +run;
23600     +/* Just create the Selected variable with all YES */
23602     +data &outdata;
23603     +    set &outdata; by cluster;
23604     +    length Selected $8;
23605     +    Selected = 'YES';
23606     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23607     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23608     +    rename OwnCluster = RSqWithClusterComp;
23609     +    rename NextClosest = RSqWithNextClusComp;
23610     +run;
23613     +/* Selected = Y/N will be done %score section -----
23615     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
23616     +data &outdata;
23617     +    set &outdata; by cluster;
23618     +    length Selected $8;
23619     +    if first.Cluster then Selected = 'YES';
23620     +    else Selected = 'NO';
23621     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23622     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23623     +    rename OwnCluster = RSqWithClusterComp;
23624     +    rename NextClosest = RSqWithNextClusComp;
23625     +run;
23626     +%end;
23627     +%else %do;
23628     +data &outdata;
23629     +    set &outdata; by cluster;
23630     +    if last.Cluster then Selected = 'YES';
23631     +    else Selected = 'NO';
23632     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
23633     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
23634     +    rename OwnCluster = RSqWithClusterComp;
23635     +    rename NextClosest = RSqWithNextClusComp;
23636     +run;
23637     +%end;
23638     +---------------------------------------------------------------*/
23640     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
23641     +/* to calculate NextClosestClusRsq */
23642     +proc transpose data = &inClusRSquare  out=_clusRsq;
23643     +      by cluster;
23644     +      run;
23645     +data _clusRsq;
23646     +     set _clusRsq;
23647     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
23648     +run;
23650     +proc sort data=_clusRsq;
23651     +    by cluster col1;
23652     +    run;
23653     +data _clusRsq(drop=_NAME_ _LABEL_);
23654     +     set _clusRsq; by cluster;
23655     +     if last.Cluster then output;
23656     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
23657     +     rename COL1 = RSqWithNextClusComp;
23658     +     rename Cluster = Variable;
23659     +     label  Cluster = "Variable";
23660     +run;
23662     +proc sort data =&outdata;
23663     +     by Variable;
23664     +run;
23665     +data &outdata;
23666     +    merge &outdata _clusRsq;
23667     +    by Variable;
23668     +run;
23669     +proc sort data =&outdata;
23670     +by Cluster  RsquareRatio;
23671     +run;
23672     +quit;
23673     +%end;
23675     +proc datasets lib = work nolist;
23676     +     delete _tmprsq _clusRsq;
23677     +     run;
23678     +quit;
23680     +%mend MakeRSquareData;
23683     +/*-------------------------------------------------------------------------*/
23687     +%macro ModifyCorr(indata=,
23688     +                  outdata=,
23689     +                  rsquare = Y
23690     +                  );
23691     +    data corr_tmp;
23692     +        set &indata;
23693     +    run;
23694     +     proc sql;
23695     +           update &indata
23696     +           set
23697     +     %let dsid = %sysfunc(open(work.corr_tmp));
23698     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
23699     +          %do i = 4 %to &nvar;
23700     +          %let _name = %sysfunc(varname(&dsid, &i));
23701     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
23702     +            %else  %let _name_md = &_name;
23703     +            %if &i < &nvar %then %do;
23704     +               &_name = 1- &_name_md ,
23705     +            %end;
23706     +            %else %do;
23707     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
23708     +            %end;
23709     +          %end;
23710     +      %let dsid= %sysfunc(close(&dsid));
23712     +      select * from &indata;
23713     +      run;
23714     +      proc datasets lib = work nolist;
23715     +           delete corr_tmp;
23716     +      run;
23717     +      quit;
23719     + %mend ModifyCorr;
23721     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
23722     +    data &outdata(drop= _NCL_  _TYPE_);
23723     +       set &indata;
23724     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
23725     +       rename _NAME_ = Cluster;
23726     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23727     +    run;
23728     +    %if &RSquare eq Y %then %do;
23729     +     data corr_tmp;
23730     +        set &outdata;
23731     +     run;
23733     +     data &outdata(drop=i);
23734     +          set &outdata;
23735     +          %let dsid = %sysfunc(open(work.corr_tmp));
23736     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
23737     +          %do i = 2 %to &nvar;
23738     +            %let _name = %sysfunc(varname(&dsid, &i));
23739     +            %let _name_md = &_name.**2;
23740     +                &_name = &_name_md;
23741     +          %end;
23742     +      %let dsid= %sysfunc(close(&dsid));
23743     +      run;
23744     +      proc datasets lib = work nolist;
23745     +           delete corr_tmp;
23746     +      run;
23748     +    %end;
23749     +     quit;
23750     +%mend MakeClusStructCorrData;
23752     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
23753     +    data &outdata(drop= _NCL_  _TYPE_);
23754     +       set &indata;
23755     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
23756     +       rename _NAME_ = Cluster;
23757     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23758     +    run;
23759     +    data corr_tmp;
23760     +        set &outdata;
23761     +    run;
23763     +    %let dsid = %sysfunc(open(work.corr_tmp));
23764     +    %let nclus2= %eval(&ncluster+1);
23765     +    data &outdata;
23766     +         set &outdata;
23767     +          %do i = 2 %to &nclus2;
23768     +          %let i_1 = %eval(&i-1);
23769     +            %let _name = %sysfunc(varname(&dsid, &i));
23770     +            %let _newName = Clus&i_1;
23771     +                rename &_name = &_newName; ;
23772     +                *label &_name ="Cluster &i_1";
23773     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
23774     +          %end;
23775     +          keep Cluster
23776     +          %do i = 2 %to &nclus2;
23777     +                %let _name = %sysfunc(varname(&dsid, &i));
23778     +                &_name
23779     +          %end;
23780     +          ;
23781     +    %let dsid= %sysfunc(close(&dsid));
23782     +     run;
23783     +     quit;
23785     +    %if &RSquare eq Y %then %do;
23787     +       data corr_tmp;
23788     +        set &outdata;
23789     +     run;
23791     +     data &outdata(drop=i);
23792     +          set &outdata;
23793     +          %let dsid = %sysfunc(open(work.corr_tmp));
23794     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
23795     +          %do i = 2 %to &nvar;
23796     +            %let _name = %sysfunc(varname(&dsid, &i));
23797     +            %let _name_md = &_name.**2;
23798     +                &_name = &_name_md;
23799     +          %end;
23800     +      %let dsid= %sysfunc(close(&dsid));
23801     +      run;
23802     +    %end;
23804     +    %if &makeplotds eq Y %then %do;
23805     +     proc transpose data = &outdata
23806     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
23807     +          by cluster;
23808     +     run;
23809     +     data &plotds;
23810     +          set  &plotds;
23811     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
23812     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
23813     +     run;
23814     +     %end;
23815     +     proc datasets lib = work nolist;
23816     +           delete corr_tmp;
23817     +     run;
23818     +     quit;
23819     +%mend MakeInterClusCorrData;
23822     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
23824     +data &outlink(drop = Selected);
23825     +     set &indata;
23826     +     LINKID = _N_;
23827     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
23828     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
23829     +run;
23830     +data &outnode(keep=NODEID TYPE LABEL);
23831     +    set &indata;
23832     +    length TYPE $16;
23833     +    rename Variable = NODEID;
23834     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
23835     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
23836     +    then  TYPE = "CLUSTER";
23837     +    else  TYPE="VARIABLE";
23838     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
23839     +run;
23840     +quit;
23841     +%mend MakeClusConstellData;
23845     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
23847     +data &outlink(drop = Selected);
23848     +     set &indata;
23849     +     LINKID = _N_;
23850     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
23851     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
23852     +run;
23853     +data &outnode(keep=NODEID TYPE LABEL);
23854     +    set &indata;
23855     +    length TYPE $16;
23856     +    rename Variable = NODEID;
23857     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
23858     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
23859     +    then  TYPE = "CLUSTER";
23860     +    else  TYPE="VARIABLE";
23861     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
23862     +run;
23863     +quit;
23864     +%mend MakeClusConstellData;
23867     +/*--- This will work only when inds is not a view data -------
23869     +%macro getNVarNObs(inds=, nvar=, nobs=);
23871     +    %global &nvar;
23872     +    %global &nobs;
23873     +    data _null_;
23874     +         dsid = open("&inds");
23875     +         nv = attrn(dsid, 'NVAR');
23876     +         no = attrn(dsid, 'NOBS');
23877     +         dsid = close(dsid);
23878     +         call symput("&nvar", nv);
23879     +         call symput("&nobs", no);
23880     +    run;
23881     +    quit;
23882     +%mend  getNVarNObs;
23884     ++---------------------------------------------------------------*/
23887     +%macro getNVar(inds=, nvar=);
23888     +    %global &nvar;
23889     +    data _null_;
23890     +         dsid = open("&inds");
23891     +         nv = attrn(dsid, 'NVAR');
23892     +         dsid = close(dsid);
23893     +         call symput("&nvar", nv);
23894     +    run;
23895     +    quit;
23896     +%mend  getNVar;
23900     +%macro getNObs(inds=, nobs=);
23901     +    %global &nobs;
23902     +    data _null_;
23903     +        set &inds end=eof;
23904     +        if eof then call symput("&nobs", _N_);
23905     +    run;
23906     +    quit;
23907     +%mend  getNObs;
23909     +%Macro CreateVarclusMeta(trainnum=);
23910     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
23911     +    data &EM_USER_VARCLUSMETA;
23912     +         length TrainNum 8.;
23913     +         length NewTrain $8;
23914     +         length NGCluster 8.;
23915     +         length ExportedComp $16;
23916     +         length HideVariable $8;
23917     +         TrainNum = &trainnum;
23918     +         NewTrain = "Y";
23919     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
23920     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
23921     +         NGCluster = 0; /* zero means no twostage */
23922     +   run;
23923     +   quit;
23924     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
23926     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
23927     +    data &outdata(drop= _NCL_  _TYPE_);
23928     +       set &indata;
23929     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
23930     +       %if &globalclusid ne %then %do;
23931     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
23932     +       rename _NAME_ = Cluster;
23933     +       %end;
23934     +       %else %do;
23935     +        _NAME_ = upcase(_NAME_);
23936     +       rename _NAME_ = Cluster;
23937     +       %end;
23938     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
23939     +    run;
23940     +    data corr_tmp;
23941     +        set &outdata;
23942     +    run;
23944     +    %let dsid = %sysfunc(open(work.corr_tmp));
23945     +    %let nclus2= %eval(&ncluster+1);
23946     +    data &outdata;
23947     +         set &outdata;
23948     +          %do i = 2 %to &nclus2;
23949     +          %let i_1 = %eval(&i-1);
23950     +            %let _name = %sysfunc(varname(&dsid, &i));
23951     +            %if &globalclusid ne %then
23952     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
23953     +                     rename &_name = &_newName;
23954     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
23955     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
23956     +                %end;
23957     +            %else
23958     +                %do; %let _newName = CLUS&i_1;
23959     +                     rename &_name = &_newName;
23960     +                     *label &_name ="Cluster &i_1";
23961     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
23962     +                %end;
23963     +          %end;
23964     +          keep Cluster
23965     +          %do i = 2 %to &nclus2;
23966     +                %let _name = %sysfunc(varname(&dsid, &i));
23967     +                &_name
23968     +          %end;
23969     +          ;
23970     +    %let dsid= %sysfunc(close(&dsid));
23971     +     run;
23972     +     quit;
23974     +    %if &RSquare eq Y %then %do;
23976     +       data corr_tmp;
23977     +        set &outdata;
23978     +     run;
23980     +     data &outdata;
23981     +          set &outdata;
23982     +          %let dsid = %sysfunc(open(work.corr_tmp));
23983     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
23984     +          %do i = 2 %to &nvar;
23985     +            %let _name = %sysfunc(varname(&dsid, &i));
23986     +            %let _name_md = &_name.**2;
23987     +                &_name = &_name_md;
23988     +          %end;
23989     +      %let dsid= %sysfunc(close(&dsid));
23990     +      run;
23991     +    %end;
23993     +    %if &makeplotds eq Y %then %do;
23994     +     proc transpose data = &outdata
23995     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
23996     +          by cluster;
23997     +     run;
23998     +     data &plotds;
23999     +          set  &plotds;
24000     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
24001     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
24002     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
24003     +     run;
24004     +     %end;
24005     +     proc datasets lib = work nolist;
24006     +           delete corr_tmp;
24007     +     run;
24008     +     quit;
24009     +%mend MakeInterClusCorrData;
24011     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
24012     +    data _tmpds(drop= _NCL_);
24013     +       set &indata;
24014     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
24015     +       %if &globalclusid ne %then %do;
24016     +           _NAME_ = "GC&globalclusid.";
24017     +       rename _NAME_ = Cluster;
24018     +       %end;
24019     +       %else %do;
24020     +        _NAME_ = "CLUS";
24021     +        rename _NAME_ = Cluster;
24022     +       %end;
24023     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
24024     +    run;
24025     +    proc transpose data =_tmpds out =&outdata;
24026     +    run;
24028     +    data &outdata(drop=COL1);
24029     +        %if &globalclusid ne %then %do;
24030     +        length GCluster $16;
24031     +        %end;
24032     +        length Cluster $32;
24033     +        length _NAME_ $32;
24034     +         set &outdata;
24035     +         _NAME_ = upcase(_NAME_);
24036     +         rename _NAME_=Variable;
24037     +         *label _NAME_="Variable";
24038     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24039     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24040     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24042     +         %if &globalclusid ne %then %do;
24043     +          GCluster = "GC&globalclusid";
24044     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
24045     +         %end;
24046     +         %else %do;
24047     +         Cluster = "CLUS"||strip(COL1);
24048     +        %end;
24049     +         rename COL2 = RSqWithOwnClusComp;
24050     +         *label COL2 = "R-Square With Own Cluster Component";
24051     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
24053     +   run;
24054     +   proc sort data =&outdata;
24055     +        by Cluster RSqWithOwnClusComp;
24056     +   run;
24057     +   proc datasets lib = work nolist;
24058     +           delete _tmpds;
24059     +   run;
24060     +   quit;
24061     +%mend MakeOwnRSquare;
24063     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
24064     +    data &outdata(drop= _NCL_  _TYPE_);
24065     +       %if &globalclusid ne %then %do;
24066     +        length GCluster $16;
24067     +        %end;
24068     +       set &indata;
24069     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
24070     +       %if &globalclusid ne %then %do;
24071     +         GCluster = "GC&globalclusid";
24072     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
24073     +         rename _NAME_ = Cluster;
24074     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24075     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24077     +       %end;
24078     +       %else %do;
24079     +         _NAME_ = upcase(_NAME_);
24080     +         rename _NAME_ = Cluster;
24081     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24082     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24084     +       %end;
24085     +     run;
24086     +    %if &RSquare eq Y %then %do;
24087     +     data corr_tmp;
24088     +          set &outdata;
24089     +     run;
24090     +     %let istart = 2;
24091     +     %if &globalclusid ne %then %let istart = 3;
24092     +     data &outdata;
24093     +          set &outdata;
24094     +          %let dsid = %sysfunc(open(work.corr_tmp));
24095     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
24096     +          %do i =&istart %to &nvar;
24097     +            %let _name = %sysfunc(varname(&dsid, &i));
24098     +            %let _name_md = &_name.**2;
24099     +                &_name = &_name_md;
24100     +          %end;
24101     +      %let dsid= %sysfunc(close(&dsid));
24102     +      run;
24103     +      proc datasets lib = work nolist;
24104     +           delete corr_tmp;
24105     +      run;
24106     +    %end;
24107     +     quit;
24108     +%mend MakeClusStructCorrData;
24110     +/*
24111     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
24112     +*/
24114     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
24116     +     /* The indata should be the outdata
24117     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
24119     +     proc sort data =&indata out=_tmpclusRsq;
24120     +     by cluster;
24121     +     run;
24123     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
24124     +      by cluster;
24125     +     run;
24127     +     proc sort data=_tmpclusRsq;
24128     +        by _NAME_ COL1;
24129     +     run;
24131     +     data _tmpclusRsq;
24132     +         length _NAME_ $32;
24133     +         set _tmpclusRsq; by _NAME_;
24134     +          _NAME_ = upcase(_NAME_);
24135     +          %if &ncluster ne 1 %then %do;
24136     +             if last._NAME_ then delete;
24137     +          %end;
24138     +          %else %do;
24139     +             COL1 = 0;
24140     +          %end;
24141     +     run;
24142     +     /* need to sort again */
24143     +     proc sort data=_tmpclusRsq;
24144     +        by _NAME_ COL1;
24145     +     run;
24147     +     data &outdata;
24148     +         set _tmpclusRsq; by _NAME_;
24149     +         Cluster = upcase(Cluster);
24150     +         if last._NAME_ then output;
24151     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
24152     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
24153     +         rename COL1 = RSqWithNextClusComp;
24154     +         Cluster = upcase(Cluster);
24155     +         rename Cluster = ClosestCluster;
24156     +         *label  Cluster = "Next Closest Cluster";
24157     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
24158     +         rename _NAME_ = Variable;
24159     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24160     +    run;
24163     +    %if &globalclusid ne %then %do;
24164     +    data &outdata;
24165     +       length GCluster $16;
24166     +       set &outdata;
24167     +       GCluster = "GC&globalclusid";
24168     +       run;
24169     +    %end;
24170     +    proc datasets lib = work nolist;
24171     +           delete _tmpclusRsq;
24172     +    run;
24173     +    quit;
24174     +%mend FindNextClosestClusByVar;
24177     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
24178     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
24179     +     proc sort data =&indata out=_tmpclusRsq;
24180     +     by cluster;
24181     +     run;
24182     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
24183     +     by cluster;
24184     +     run;
24185     +     proc sort data=_tmpclusRsq;
24186     +        by _NAME_ col1;
24187     +     run;
24188     +     data _tmpclusRsq;
24189     +         length _NAME_ $32;
24190     +         set _tmpclusRsq; by _NAME_;
24191     +          _NAME_ = upcase(_NAME_);
24192     +          %if &ncluster ne 1 %then %do;
24193     +             if last._NAME_ then delete;
24194     +          %end;
24195     +          %else %do;
24196     +             COL1 = 0;
24197     +          %end;
24198     +     run;
24199     +     data &outdata;
24200     +         set _tmpclusRsq; by _NAME_;
24201     +         Cluster = upcase(Cluster);
24202     +         if last._NAME_ then output;
24203     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
24204     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
24205     +         rename COL1 = RSqWithNextClusComp;
24206     +         Cluster = upcase(Cluster);
24207     +         rename Cluster = ClosestCluster;
24208     +         *label  Cluster = "Next Closest Cluster";
24209     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
24210     +         rename _NAME_ = Variable;
24211     +         *label  _NAME_ = "Variable";
24212     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24214     +    run;
24215     +    %if &globalclusid ne %then %do;
24216     +    data &outdata;
24217     +       length GCluster $16;
24218     +       set &outdata;
24219     +       GCluster = "GC&globalclusid";
24220     +       run;
24221     +    %end;
24223     +    proc datasets lib = work nolist;
24224     +           delete _tmpclusRsq;
24225     +    run;
24227     +    quit;
24228     +%mend FindNextClosestClusByCluster;
24230     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
24231     +/*----
24232     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
24233     +-----------*/
24235     +proc sort data =&indata1;
24236     +    by Variable;
24237     +run;
24238     +proc sort data =&indata2;
24239     +    by Variable;
24240     +run;
24241     +data &outdata;
24242     +    merge &indata1 &indata2;
24243     +    by Variable;
24244     +    length Type $16;
24245     +    Type = 'Variable';
24246     +    *label Type ='Type';
24247     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
24248     +run;
24251     +data &indata3;
24252     +    set  &indata3 ;
24253     +    length RSqWithOwnClusComp 8.;
24254     +    Cluster = Variable;
24255     +    RSqWithOwnClusComp = 1;
24256     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
24257     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
24258     +    length Type $16;
24259     +    Type = 'ClusterComp';
24260     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
24262     +;
24263     +run;
24265     +proc sort data=&outdata;
24266     +    by Cluster;
24267     +run;
24268     +proc sort data =&indata3;
24269     +    by Cluster;
24270     +run;
24272     +data &outdata;
24273     +     set &outdata &indata3;
24274     +     by Cluster;
24275     +run;
24278     +/* Create the Selected variable with all YES */
24280     +data &outdata;
24281     +     set &outdata;
24282     +     length RsqRatio 8.;
24283     +     length Selected $8;
24284     +     *label RSqRatio = "1-R**2 Ratio";
24285     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
24286     +     *label Selected = "Variable Selected";
24287     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
24288     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
24289     +     Selected ='YES';
24290     +     rename _LABEL_ = Label;
24291     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
24292     +run;
24295     +/*----  Selected = Y/N will be assigened at the %score                   -------+
24296     +        Just create the Selected variable with all YES at the step above
24297     + +------------------------------------------------------------------------------+
24299     +proc sort data=&outdata;
24300     +    by Cluster RsqRatio;
24301     +run;
24303     +%if &selectedcomp eq CLUSTERCOMP %then %do;
24304     +data &outdata;
24305     +     set &outdata; by Cluster;
24306     +     length Selected $8;
24307     +     label Selected = "Variable Selected";
24308     +     if  first.Cluster then Selected ='Yes';
24309     +     else Selected = 'No';
24310     +    run;
24311     +%end;
24312     +%else %do;
24313     +data &outdata(drop = _var _varchange);
24314     +     set &outdata; retain _var 0; by Cluster;
24315     +     length Selected $8;
24316     +     label Selected = "Variable Selected";
24317     +     if first.Cluster then  _varchange = 0;
24318     +     else _varchange =1;
24319     +     if _var ne _varchange then  Selected  = 'Yes';
24320     +     else Selected = 'No';
24321     +     if last.cluster then  _var = 0;
24322     +     else _var = _varchange;
24323     +run;
24324     +%end;
24326     +--------------------------------------------------------------*/
24328     +quit;
24329     +%mend MakeVarClusResultTable;
24331     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
24332     +     proc sort data =&indata;
24333     +        by cluster;
24334     +     run;
24335     +     proc transpose data =&indata
24336     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
24337     +          by cluster;
24338     +     run;
24339     +     data &outdata;
24340     +          set  &outdata;
24341     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24342     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24343     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
24344     +     run;
24345     +     %if &globalclusid ne %then %do;
24346     +     data &outdata;
24347     +          Length GCluster $16;
24348     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24349     +          set  &outdata;
24350     +          GCluster ="GC&globalclusid.";
24351     +          run;
24352     +     %end;
24354     +%Mend MakePlotDataFromCorrTable;
24357     +%macro MakeCorrelation(indata=,
24358     +                       outstat=_tmpoutstat,
24359     +                       corrmatrix=N,
24360     +                       outcorr=_tmpoutcorr,
24361     +                       includeclassvar=N,
24362     +                       target=,
24363     +                       freq=,
24364     +                       weight=);
24365     +   %if &target eq  %then %do;
24367     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
24368     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
24369     +       %if &includeclassvar eq Y %then %do;
24370     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
24371     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
24372     +          %do i = 2 %to &nvar;
24373     +          %let varname = %sysfunc(varname(&dsid, &i));
24374     +          &varname
24375     +          %end;
24376     +       %end;
24377     +       ;
24378     +      %if &freq ne  %then %do;
24379     +          freq &freq;
24380     +      %end;
24381     +      %if &weight ne  %then %do;
24382     +          weight &weight;
24383     +      %end;
24385     +      run;
24386     +      %if &corrmatrix eq Y %then %do;
24387     +      data  &outcorr (drop = _NCL_ _TYPE_);
24388     +           set  &outstat ;
24389     +           if _TYPE_ ='CORR' then output;
24390     +      run;
24391     +      %end;
24392     +    %end;
24393     +    %else %do;
24394     +       proc corr data=&indata outp=&outstat noprint;
24395     +            var
24396     +       %let dsid = %sysfunc(open(&indata));
24397     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
24398     +          %do i = 1 %to &nvar;
24399     +              %let _name = %sysfunc(varname(&dsid, &i));
24400     +              %if &_name ne &target %then;
24401     +              &_name
24402     +           %end;
24403     +        %let dsid= %sysfunc(close(&dsid));
24404     +        ;
24405     +        with &target;
24406     +        run;
24407     +    %end;
24408     +    quit;
24409     +%mend MakeCorrelation;
24412     +%macro MakeCorrelationDistance(indata=,
24413     +                               outdata=,
24414     +                               rsquare = N
24415     +                               );
24416     +    data corr_tmp;
24417     +        set &indata;
24418     +        if _N_ = 1 then do;
24419     +           output;
24420     +           stop;
24421     +         end;
24422     +    run;
24423     +    %if &outdata ne  %then %let  _outdata = &outdata;
24424     +    %else %let _outdata = &indata;
24426     +    data &_outdata;
24427     +         set &indata;
24429     +         %let dsid = %sysfunc(open(work.corr_tmp));
24430     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
24431     +          %do i = 2 %to &nvar;
24432     +              %let _name = %sysfunc(varname(&dsid, &i));
24433     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
24434     +              %else  %let _name_md = &_name;
24435     +              &_name = 1- &_name_md;
24436     +          %end;
24437     +      %let dsid= %sysfunc(close(&dsid));
24438     +      run;
24439     +      proc datasets lib = work nolist;
24440     +           delete corr_tmp;
24441     +      run;
24442     +      quit;
24443     +  %mend MakeCorrelationDistance;
24446     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
24447     +                                   rsquare = N
24448     +                                   );
24449     +    data corr_tmp;
24450     +        set &indata;
24451     +    run;
24452     +    proc sql noprint;
24453     +           update &indata
24454     +           set
24455     +     %let dsid = %sysfunc(open(work.corr_tmp));
24456     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
24457     +          %do i = 4 %to &nvar;
24458     +          %let _name = %sysfunc(varname(&dsid, &i));
24459     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
24460     +            %else  %let _name_md = &_name;
24461     +            %if &i < &nvar %then %do;
24462     +               &_name = 1- &_name_md ,
24463     +            %end;
24464     +            %else %do;
24465     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
24466     +            %end;
24467     +          %end;
24468     +      %let dsid= %sysfunc(close(&dsid));
24470     +      select * from &indata;
24471     +      run;
24472     +     data &indata( drop = _NCL_);
24473     +           set &indata;
24474     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
24475     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
24476     +     run;
24477     +     data &indata(DROP = _NCL_);
24478     +           set &indata;
24479     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
24480     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
24481     +           rename _NAME_ = _VAR_;
24482     +     run;
24483     +     proc datasets lib = work nolist;
24484     +           delete corr_tmp;
24485     +     run;
24486     +     quit;
24487     + %mend UpdateOutStatCorrToDistance;
24490     +%macro HierClusWithCorr(indata= ,
24491     +                        ncluster=,
24492     +                        method = Ward,
24493     +                        outtree = _outtree,
24494     +                        idvar =_VAR_,
24495     +                        outdata=,
24496     +                        rescore = N,
24497     +                        newncluster=
24498     +                        );
24499     +      %global &newncluster;
24500     +      %if &rescore ne Y %then %do;
24501     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
24502     +                   method=&method outtree=&outtree noprint;
24503     +           id &idvar;
24504     +      run;
24505     +      %end;
24506     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
24507     +      run;
24508     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
24509     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
24510     +      run;
24511     +      data _outcontent;
24512     +          set _outcontent;
24513     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
24514     +          index = 1;
24515     +          rename NAME = _NAME_;
24516     +      run;
24517     +      proc sort data=_outcontent;
24518     +          by _NAME_;
24519     +      run;
24520     +      proc sort data =&outdata;
24521     +           by _NAME_;
24522     +      run;
24523     +      data &outdata(drop=index);
24524     +          merge &outdata _outcontent;
24525     +          by _NAME_;
24526     +          if index = . then delete;
24527     +      run;
24528     +      /*-----------------------------------------------------------*/
24529     +      data &outdata;
24530     +           length CLUSNAME $16;
24531     +           set &outdata;
24532     +           if CLUSTER > &ncluster then delete;
24533     +           CLUSNAME='GC'||strip(CLUSTER);
24534     +           *label CLUSNAME = "Cluster Name";
24535     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
24536     +           rename _NAME_ = VARIABLE ;
24537     +           *label _NAME_ = "Variable";
24538     +           *label CLUSTER = "Cluster";
24539     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
24540     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
24541     +      run;
24542     +      proc sort data=&outdata out=&outdata;
24543     +           by CLUSTER;
24544     +      run;
24545     +      proc means data =&outdata noprint;
24546     +           output out=_meanout;
24547     +      run;
24548     +      data _null_;
24549     +            set _meanout;
24550     +            if strip(_STAT_) eq 'MAX' then do;
24551     +            call symput("&newncluster", CLUSTER);
24552     +            stop;
24553     +            end;
24554     +      run;
24556     +      proc datasets lib = work nolist;
24557     +           delete _outcontent _meanout;
24558     +      run;
24559     +      quit;
24560     +%mend  HierClusWithCorr;
24562     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
24564     +     data _tmpindata;
24565     +          set &indata;
24566     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
24567     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
24568     +          if _TYPE_ = 'STD' then _NAME_='STD';
24569     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
24570     +          DROP _TYPE_ _NCL_;
24571     +     run;
24573     +     filename _file_  "&fileRef";
24575     +     data _null_;
24576     +        FILE _file_ MOD;
24577     +        put ' ';
24578     +        put "/*-------------------------------------------------*/";
24579     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
24580     +        put "/*-------------------------------------------------*/";
24581     +        put ' ';
24582     +        %let dsid = %sysfunc(open(work._tmpindata));
24584     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
24585     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
24586     +        %let k = 1;
24587     +        %do %while(^%sysfunc(fetch(&dsid)));
24588     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24589     +               %if &k > 2 %then %do;
24590     +                %let cn = %eval(&k-2);
24591     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
24592     +                %end;
24593     +                %let k = %eval(&k+1);
24595     +        %end;
24596     +        %let rc = %sysfunc(rewind(&dsid));
24598     +        %do j= 2 %to &nvar;
24599     +            %let _varname = %sysfunc(varname(&dsid, &j));
24600     +            %do %while(^%sysfunc(fetch(&dsid)));
24601     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24602     +                %if &_name = MEAN %then
24603     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
24604     +                %else %if &_name = STD %then
24605     +                %let _std = %sysfunc(getvarn(&dsid, &j));
24606     +                %else %do;
24607     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
24608     +                      %let abscoeff = %sysfunc(abs(&coeff));
24609     +                          %if &abscoeff >  0 %then %do;
24610     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
24611     +                           %end;
24612     +                 %end;
24613     +             %end;
24614     +             %let rc = %sysfunc(rewind(&dsid));
24615     +         %end;
24617     +        %let dsid= %sysfunc(close(&dsid));
24619     +     run;
24621     +     filename _file_;
24622     +     proc datasets lib = work nolist;
24623     +           delete _tmpindata;
24624     +     run;
24625     +     quit;
24626     +%mend CreateScoreCode2;
24629     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
24631     +     /*--- Build Code to Modify Metadata ---*/
24632     +     filename X "&deltacodefile";
24633     +     data _null_;
24634     +        FILE X;
24635     +        set &groupds end=eof;
24636     +        if _N_=1 then do;
24637     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
24638     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
24639     +           %end;
24640     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
24641     +           put "if upcase(strip(NAME)) in (";
24642     +        end;
24643     +        if Strip(upcase(Selected)) eq 'YES' then do;
24644     +           string = '"'!!trim(left(VARIABLE))!!'"';
24645     +           put string;
24646     +        end;
24647     +        if eof then do;
24648     +           put ') then ROLE="INPUT";';
24649     +           put 'else ROLE="REJECTED";';
24650     +           put 'end;';
24652     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
24653     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
24654     +           %end;
24655     +        end;
24656     +     run;
24657     +     quit;
24659     +     filename X;
24660     +     quit;
24661     +%mend MakeDeltaCode2;
24663     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
24664     +  %global &ngc;
24665     +  data _null_;
24666     +  %if &indata ne %then %do;
24667     +      %let dsid = %sysfunc(open(&indata));
24668     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
24669     +      %let dsid = %sysfunc(close(&dsid));
24670     +  %end;
24671     +  %else %do;
24672     +       %let nvar = %eval(&ninput+&ndummy); ;
24673     +  %end;
24674     +  %let numgc = %eval(&nvar/&div+2);
24675     +  %let &ngc = &numgc;
24676     +   run;
24677     +  quit;
24678     +%mend getInitialGClusterNumber;
24681     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
24682     +data &outlink(drop = Selected);
24683     +     set &indata;
24684     +     LINKID = _N_;
24685     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
24686     +run;
24687     +data &outnode(keep=NODEID TYPE LABEL);
24688     +    set &indata;
24689     +    length TYPE $16;
24690     +    rename VARIABLE = NODEID;
24691     +    *label  CLUSNAME="Node ID";
24692     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24693     +    TYPE = "VARIABLE";
24694     +    *label TYPE = "Node Type";
24695     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24696     +    run;
24697     +data _tmp(keep=NODEID TYPE LABEL);
24698     +    set &indata;
24699     +    length TYPE $16;
24700     +    rename CLUSNAME = NODEID;
24701     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24702     +    TYPE = "GCLUSTER";
24703     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24704     +    run;
24705     +proc sort data=_tmp;
24706     +    by NODEID;
24707     +run;
24708     +data _tmp;
24709     +    set _tmp; by NODEID;
24710     +    if first.NODEID then output;
24711     +run;
24712     +proc sort data=&outnode;
24713     +    by NODEID;
24714     +run;
24715     +data  &outnode;
24716     +    set _tmp &outnode;
24717     +run;
24718     +proc datasets lib = work nolist;
24719     +     delete _tmp;
24720     +run;
24721     +quit;
24722     +%mend MakeGobalConstellData;
24724     +/* Make contellation plot data among GCLUSTERS */
24726     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
24728     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
24729     +     set &indata;
24730     +     LINKID = _N_;
24731     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
24732     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
24733     +     end;
24734     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
24735     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
24736     +     end;
24737     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
24738     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
24739     +    end;
24740     +run;
24742     +data _tmp_outrsquare;
24743     +        set &inoutrsq;
24744     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
24745     +run;
24747     +proc freq data =_tmp_outrsquare noprint;
24748     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
24749     +run;
24751     +data &outnode(keep=_NAME_ TYPE LABEL);
24752     +    set &outlink;
24753     +    length TYPE $16;
24754     +    length LABEL $100;
24755     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
24757     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
24758     +    TYPE = "GCLUSTER";
24759     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
24760     +    end;
24761     +    else do;
24762     +    TYPE= "ROOT";
24763     +    LABEL= _NAME_;
24764     +    end;
24765     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
24766     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
24767     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
24768     +    run;
24770     +proc sort data=&outnode;
24771     +     by _NAME_;
24772     +proc sort data=_tmp_GCLUSFREQ;
24773     +     by _NAME_;
24774     +run;
24776     +data  &outnode;
24777     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
24778     +     if COUNT=. then COUNT=1;
24779     +run;
24781     +proc datasets lib = work nolist;
24782     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
24783     +run;
24785     +quit;
24786     +%Mend MakeGClusterConstData;
24789     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
24791     +    data _gscoretmpds;
24792     +          set &indata;
24793     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
24794     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
24795     +          if _TYPE_ = 'STD' then _NAME_='STD';
24796     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
24797     +          DROP _TYPE_ _NCL_;
24798     +     run;
24800     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
24801     +        GCluster Component &globalclusid ------ */
24803     +    filename _file_  "&fileref";
24805     +    data _null_;
24806     +        %if &globalclusid eq 1 %then %do;
24807     +          FILE _file_;
24808     +        %end;
24809     +        %else %do;
24810     +          FILE _file_ MOD;
24811     +        %end;
24813     +        %let dsid = %sysfunc(open(work._gscoretmpds));
24814     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
24815     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
24817     +        %let k = 1;
24818     +        %do %while(^%sysfunc(fetch(&dsid)));
24819     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24820     +                %if &k > 2 %then %do;
24821     +                put "&_name = 0 ; ";
24822     +                %end;
24823     +                %let k = %eval(&k+1);
24824     +        %end;
24826     +        %let rc = %sysfunc(rewind(&dsid));
24827     +        %do i= 2 %to &nvar;
24828     +            %let _varname =  %sysfunc(varname(&dsid, &i));
24829     +            %do %while(^%sysfunc(fetch(&dsid)));
24830     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
24831     +                %if &_name = MEAN %then
24832     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
24833     +                %else %if &_name = STD %then
24834     +                %let _std = %sysfunc(getvarn(&dsid, &i));
24835     +                %else %do;
24836     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
24837     +                      %let abscoeff = %sysfunc(abs(&coeff));
24838     +                          %if &abscoeff >  0 %then %do;
24839     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
24840     +                           %end;
24841     +                 %end;
24842     +             %end;
24843     +             %let rc = %sysfunc(rewind(&dsid));
24845     +         %end;
24847     +        %let dsid= %sysfunc(close(&dsid));
24848     +       run;
24851     +       proc datasets lib=work nolist;
24852     +            delete _gscoretmpds;
24853     +       run;
24854     +      quit;
24856     +%mend CreateGClusterScoreCode;
24859     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
24861     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
24862     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
24863     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
24864     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
24865     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
24866     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
24867     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
24868     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
24869     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
24870     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
24871     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
24872     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
24873     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
24874     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
24876     +   filename gsfile "&gscorecode";
24878     +   data &EM_USER_GSCORE;
24879     +             set &indata;
24880     +             %include  gsfile;
24881     +        keep
24882     +        %do i=1 %to &ngcluster;
24883     +         %let gcvarname = GC&i;
24884     +         &gcvarname
24885     +        %end;
24886     +     ;
24887     +   run;
24889     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
24890     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
24891     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
24892     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
24893     +    noprint  ;
24894     +     var
24895     +       %do i=1 %to &ngcluster;
24896     +         %let gcvarname = GC&i;
24897     +         &gcvarname
24898     +        %end;
24899     +   ;
24900     +   run;
24903     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
24904     +   data &EM_USER_GSCORECORRPLOT ;
24905     +        set &EM_USER_GSCORECORRPLOT;
24906     +        rename _X_ = X;
24907     +        rename _Y_ = Y;
24908     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24909     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
24910     +   run;
24912     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
24914     +   data &EM_USER_GSCORETREE;
24915     +        length _NAME_ $32;
24916     +        length _LABEL_ $100;
24917     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
24918     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
24919     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
24920     +        end;else do;
24921     +         _LABEL_ = _NAME_;
24922     +        end;
24923     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
24925     +   run;
24927     +   quit;
24929     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
24934     +%macro train;
24936     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
24937     +   %include temp;
24938     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
24939     +   %include temp;
24940     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
24941     +   %include temp;
24942     +   filename temp;
24944     +   %let VARCLUS_MAXNUMOBS = 100000;
24945     +   %let VARCLUS_MAXNUMVAR = 200;
24946     +   %let trainnum = 0;
24947     +   %let error = 0;
24949     +   %if &EM_IMPORT_DATA eq %then %do;
24950     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
24951     +       %let  error = 1;
24952     +       %goto endtrain;
24953     +   %end;
24955     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
24956     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
24957     +        %let  error = 1;
24958     +        %goto endline;
24959     +    %end;
24961     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
24962     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
24963     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
24964     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
24965     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
24966     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
24968     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
24969     +        %if  &_num_input_total < 2 %then %do;
24970     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
24971     +            %let error = 2;
24972     +            %goto endtrain;
24973     +        %end;
24974     +   %end;
24975     +   %else %do;
24976     +         %if  &_num_input_interval < 2 %then %do;
24977     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
24978     +         %let error = 2;
24979     +         %goto endtrain;
24980     +         %end;
24981     +   %end;
24983     +   %em_checkerror();
24985     +   %if &EMEXCEPTIONSTRING ne %then %do;
24986     +       %goto endtrain;
24987     +   %end;
24989     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
24991     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
24992     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
24993     +                             outvar=&EM_USER_OUTDUMMY,
24994     +                             outdata=_newtrainds,
24995     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
24997     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
24998     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
24999     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25000     +                proc datasets lib=work nolist;
25001     +                delete  _newtrainds;
25002     +                run;
25003     +                quit;
25004     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25005     +                %let error = 3;
25006     +               %goto endtrain;
25007     +            %end;
25008     +        %end;
25010     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
25011     +             %getNVar(inds=_newtrainds, nvar=_nvar);
25013     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
25014     +                %let trainnum = 2;
25015     +            %end;
25016     +            %else %do;
25017     +                %let trainnum = 1;
25018     +            %end;
25019     +        %end;
25020     +    %end;
25021     +    %else %do;
25023     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25025     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
25027     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25029     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25030     +                  %let error = 3;
25031     +                 %goto endtrain;
25032     +            %end;
25033     +        %end;
25036     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
25037     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
25038     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
25039     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
25040     +                %let trainnum = 2;
25041     +            %end;
25042     +            %else %do;
25043     +                %let trainnum = 1;
25044     +            %end;
25045     +        %end;
25047     +   %end;
25049     +    %em_checkerror();
25051     +    %if &EMEXCEPTIONSTRING ne %then %do;
25052     +       %let error = 4;
25053     +       %goto endtrain;
25054     +    %end;
25056     +    %CreateVarclusMeta(trainnum=&trainnum);
25058     +    %if &error > 0 %then  %goto endtrain;
25060     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
25062     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
25063     +           %train1;
25064     +       %end;
25065     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
25066     +           %train2;
25067     +       %end;
25069     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
25070     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
25071     +      %em_copyfile(infref=_in, outfref=_out);
25072     +      filename _in;
25073     +      filename _out;
25076     +   %endtrain:
25079     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
25081     +%macro VarClus(indata=,
25082     +               outstat=,
25083     +               outtree=,
25084     +               vars=,
25085     +               freq=,
25086     +               weight=,
25087     +               includeclassvar=
25088     +               );
25090     +   %if &vars eq %then
25091     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
25093     +       proc varclus data = &indata outstat= &outstat
25094     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
25095     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
25096     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
25097     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
25098     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
25099     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
25100     +       %end;
25102     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
25103     +            maxeigen = &EM_PROPERTY_MAXEIGEN
25104     +       %end;
25106     +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
25107     +            proportion = &EM_PROPERTY_PROPORTION
25108     +       %end;
25109     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
25110     +               summary
25111     +       %end;
25113     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
25114     +           short
25115     +       %end;
25116     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
25117     +           corr trace simple
25118     +       %end;
25119     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
25120     +          noprint
25121     +       %end;
25122     +       outtree=&outtree
25123     +       ;
25124     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
25126     +      %if &includeclassvar eq Y %then %do;
25127     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
25128     +          %if &dsid > 0 %then %do;
25129     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
25130     +              %do i = 2 %to &nvar;
25131     +                  %let varname = %sysfunc(varname(&dsid, &i));
25132     +                   &varname
25133     +              %end;
25135     +          %end;
25136     +      %end;
25138     +      ;
25139     +      /*------------------------
25140     +      %if &freq ne  %then %do;
25141     +          freq &freq;
25142     +      %end;
25143     +      %if &weight ne  %then %do;
25144     +          weight &weight;
25145     +      %end;
25146     +      ----------------------------*/
25147     +      %if %EM_FREQ ne %then %do;
25148     +           Freq %EM_FREQ;
25149     +      %end;
25150     +      ;
25151     +    run;
25152     +    %endline:
25153     +    quit;
25154     +%mend VarClus;
25156     +%macro Train1;
25158     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
25159     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
25160     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
25161     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
25162     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
25163     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
25164     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
25165     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
25166     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
25167     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
25168     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
25169     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
25170     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
25172     +   /*
25173     +     %let VARCLUS_MAXNUMOBS = 100;
25174     +     %let VARCLUS_MAXNUMVAR = 200;
25175     +   */
25177     +   /* Train
25179     +   %if &EM_IMPORT_DATA eq %then %do;
25180     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25181     +       %goto endtrain1;
25182     +   %end;
25184     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
25185     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25186     +        %goto endtrain1;
25187     +   %end;
25188     +   */
25189     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25190     +       /* moved this to pretrain ------------
25192     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
25193     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
25194     +                             outvar=&EM_USER_OUTDUMMY,
25195     +                             outdata=_newtrainds,
25196     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
25198     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25199     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
25200     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
25201     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25202     +                %goto endtrain;
25203     +            %end;
25204     +        %end;
25206     +        +-------------------------------------*/
25208     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25209     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
25210     +          There is no _newtrainds */
25211     +         %VarClus( indata=&EM_IMPORT_DATA,
25212     +                  outstat=&EM_USER_OUTSTAT,
25213     +                  outtree = &EM_USER_OUTTREE,
25214     +                  includeclassvar=N
25215     +                 );
25216     +        %end;
25217     +        %else %do;
25218     +        %VarClus( indata=_newtrainds,
25219     +                  outstat=&EM_USER_OUTSTAT,
25220     +                  outtree = &EM_USER_OUTTREE,
25221     +                  includeclassvar=Y
25222     +                 );
25223     +         proc datasets lib=work nolist;
25224     +              delete  _newtrainds;
25225     +         run;
25226     +         %end;
25227     +    %end;
25228     +    %else %do;
25230     +        /*----- moved this to pretrain ------------
25231     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25232     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
25233     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
25234     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
25235     +                 %goto endtrain;
25236     +            %end;
25237     +        %end;
25238     +        +-------------------------------------*/
25240     +        %VarClus(indata=&EM_IMPORT_DATA,
25241     +                  outstat=&EM_USER_OUTSTAT,
25242     +                  outtree =&EM_USER_OUTTREE,
25243     +                  includeclassvar=N
25244     +               );
25246     +   %end;
25248     +   %em_checkerror();
25250     +   %if &EMEXCEPTIONSTRING ne %then %do;
25251     +       %goto endtrain1;
25252     +   %end;
25253     +    /*
25254     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
25255     +    */
25257     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
25259     +    %let gid=;
25261     +    /*--- To make the main result table ----------------------*/
25263     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
25264     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
25265     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
25266     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
25267     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
25268     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
25270     +   /* Inter Cluster Correlation Plot ------------------------*/
25272     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
25273     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
25275     +   /* Create some other data sets for results ----*/
25277     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
25278     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
25279     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
25281     +  /*---- move this to Score action ------------
25282     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
25283     +   */
25285     +   /* create score code at training time */
25286     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
25287     +   %endtrain1:
25288     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
25291     +%macro VarClus2( indata=,
25292     +                 outdata=,
25293     +                 outstat =outstat,
25294     +                 outrsquare=outrsquare,
25295     +                 outtree = outtree,
25296     +                 outclusstruct = outclusstruct,
25297     +                 outcluscorr =outcluscorr,
25298     +                 outcluscorrplot =outcluscorrplot,
25299     +                 outclusrsquare =outclusrsquare,
25300     +                 outstatplot = outstatplot,
25301     +                 outcorr = outcorr,
25302     +                 outcorrplot = outcorrplot,
25303     +                 clusdata=,
25304     +                 outnode=outnode,
25305     +                 outlink=outlink,
25306     +                 ngroup =1  );
25307     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
25308     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25309     +              %goto endline;
25310     +         %end;
25312     +        %global numglobalcluster;
25313     +        %let  numglobalcluster = &ngroup;
25314     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
25315     +        %do vci =1 %to &ngroup;
25316     +           data tmp_clusdata;
25317     +                set &clusdata;
25318     +                if CLUSTER ne &vci then delete;
25319     +           run;
25320     +           %let outstatds = &outstat.&vci;
25321     +           %let outrsquareds = &outrsquare.&vci;
25322     +           %let outtreeds = &outtree.&vci;
25323     +           %let outclusstuctds = &outclusstruct.&vci;
25324     +           %let outcluscorrds = &outcluscorr.&vci;
25325     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
25326     +           %let outclusrsquareds = &outclussquare.&vci;
25327     +           %let outstatplotds = &outstatplot.&vci;
25328     +           %let outcorrds = &outcorr.&vci;
25329     +           %let outcorrplotds = &outcorrplot.&vci;
25330     +           %let outnodeds = &outnode.&vci;
25331     +           %let outlinkds = &outlink.&vci;
25333     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
25334     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
25335     +           %let emuseroutstat = &EM_USER_&outstatds;
25337     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
25338     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
25339     +           %let emuserouttree = &EM_USER_&outtreeds;
25341     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
25342     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
25343     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
25345     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
25346     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
25347     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
25349     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
25350     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
25351     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
25353     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
25354     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
25355     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
25357     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
25358     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
25359     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
25361     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
25362     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
25363     +           %let emuseroutcorr = &EM_USER_&outcorrds;
25365     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
25366     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
25367     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
25369     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
25370     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
25371     +           %let emuseroutnode = &EM_USER_&outnodeds;
25373     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
25374     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
25375     +           %let emuseroutlink = &EM_USER_&outlinkds;
25377     +           proc varclus data=&indata outstat=&emuseroutstat
25378     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
25379     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
25380     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
25381     +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
25382     +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
25383     +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
25384     +           %end;
25386     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
25387     +            maxeigen = &EM_PROPERTY_MAXEIGEN
25388     +            %end;
25390     +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
25391     +                proportion = &EM_PROPERTY_PROPORTION
25392     +           %end;
25393     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
25394     +               summary
25395     +           %end;
25396     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
25397     +               short
25398     +           %end;
25399     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
25400     +               corr trace simple
25401     +           %end;
25402     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
25403     +               noprint
25404     +           %end;
25405     +              outtree=&emuserouttree
25406     +           ;
25407     +           var
25408     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
25409     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
25410     +                %do %while(^%sysfunc(fetch(&dsid)));
25411     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
25412     +                    &_varname
25413     +                %end;
25414     +            %let dsid = %sysfunc(close(&dsid));
25415     +           ;
25416     +           %if %EM_FREQ ne %then %do;
25417     +           Freq %EM_FREQ;
25418     +           %end;
25419     +           run;
25421     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
25423     +            %let gid=&vci;
25424     +            /*--- To make the main result table ----------------------*/
25425     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
25426     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
25427     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
25428     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
25429     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
25430     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
25432     +            /* Inter Cluster Correlation Plot ------------------------*/
25434     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
25435     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
25437     +           /* Create some other data sets for results ---------------*/
25439     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
25440     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
25441     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
25443     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
25445     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
25447     +           %if &vci = 1 %then %do;
25448     +           data &EM_USER_OUTRSQUARE;
25449     +                set &emuseroutrsquare;
25450     +           run;
25451     +           %end;
25452     +           %else %do;
25453     +           data &EM_USER_OUTRSQUARE;
25454     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
25455     +           run;
25456     +           %end;
25457     +           quit;
25458     +       %end;
25460     +       /*---- move this to Score action ------------
25461     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
25462     +       */
25464     +       /* Make Score Gcluster component & correlation  */
25465     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
25467     +       quit;
25468     +       %endline:
25469     +%mend VarClus2;
25472     +%macro Train2;
25474     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
25475     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
25476     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
25477     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
25478     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
25479     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
25480     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
25481     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
25482     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
25483     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
25484     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
25485     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
25486     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
25487     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
25488     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
25489     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
25490     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
25491     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
25495     +    /* Train */
25497     +   /* moved to pretrain ------------
25499     +   %if &EM_IMPORT_DATA eq %then %do;
25500     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25501     +       %goto endtrain2;
25502     +   %end;
25504     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
25505     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
25506     +        %goto endtrain2;
25507     +   %end;
25508     +   +-------------------------------------------*/
25510     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
25513     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25515     +        /*----- moved to pretrain ------------
25517     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
25518     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
25519     +                             outvar=&EM_USER_OUTDUMMY,
25520     +                             outdata=_newtrainds,
25521     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
25522     +                              ndummyvars=_ndummyvars
25523     +                            );
25525     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25526     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
25527     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25528     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25529     +                %goto endtrain;
25530     +            %end;
25531     +        %end;
25533     +        +---------------------------------------*/
25534     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25535     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
25536     +          There is no _newtrainds */
25537     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
25538     +                             outstat=&EM_USER_GOUTSTAT,
25539     +                             corrmatrix=Y,
25540     +                             outcorr=&EM_USER_GOUTCORR,
25541     +                             includeclassvar=N,
25542     +                             freq =%EM_FREQ
25543     +                          );
25544     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
25546     +        %end;
25547     +        %else %do;
25548     +         %MakeCorrelation(   indata=_newtrainds,
25549     +                             outstat=&EM_USER_GOUTSTAT,
25550     +                             corrmatrix=Y,
25551     +                             outcorr=&EM_USER_GOUTCORR,
25552     +                             includeclassvar=Y,
25553     +                             freq =%EM_FREQ
25554     +                          );
25555     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
25557     +        %end;
25559     +    %end;
25560     +    %else %do;
25562     +        /* moved to pretrain -------------------
25564     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
25565     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
25566     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
25567     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
25568     +                %goto endtrain;
25569     +            %end;
25570     +        %end;
25571     +         +------------------------------------------*/
25573     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
25574     +                          outstat=&EM_USER_GOUTSTAT,
25575     +                          corrmatrix=Y,
25576     +                          outcorr=&EM_USER_GOUTCORR,
25577     +                          includeclassvar=N,
25578     +                          freq =%EM_FREQ
25579     +                          );
25580     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
25581     +    %end;
25583     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
25584     +                                rsquare = N
25585     +                                );
25586     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
25587     +                      ncluster=&_ngc,
25588     +                      method = Ward,
25589     +                      outtree =&EM_USER_GOUTTREE,
25590     +                      idvar = _VAR_,
25591     +                      outdata=&EM_USER_GOUTGROUP,
25592     +                      rescore = N,
25593     +                      newncluster=_newnclus
25594     +                        );
25596     +   /* store the number of global cluster */
25598     +   data &EM_USER_VARCLUSMETA;
25599     +        set &EM_USER_VARCLUSMETA;
25600     +        NGCluster = &_newnclus;
25601     +   run;
25603     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
25605     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25606     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
25607     +            %VarClus2(indata=&EM_IMPORT_DATA,
25608     +                 clusdata=&EM_USER_GOUTGROUP,
25609     +                 ngroup=&_newnclus);
25610     +         %end;
25611     +         %else %do;
25612     +             %VarClus2(indata=_newtrainds,
25613     +                 clusdata=&EM_USER_GOUTGROUP,
25614     +                 ngroup=&_newnclus);
25616     +         %end;
25618     +   %end;
25619     +   %else %do;
25620     +       %VarClus2(indata=&EM_IMPORT_DATA,
25621     +                 clusdata=&EM_USER_GOUTGROUP,
25622     +                 ngroup=&_newnclus);
25623     +   %end;
25625     +   %em_checkerror();
25626     +   %if &EMEXCEPTIONSTRING ne %then %do;
25627     +       %put &em_codebar;
25628     +       %put Error: Variable clustering failed.;
25629     +       %put &em_codebar;
25630     +       %goto endtrain2;
25631     +   %end;
25632     +   /*
25633     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
25634     +   */
25635     +   %endtrain2:
25636     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
25638     +%macro em_copyfile(infref=, outfref=, append=N);
25640     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
25642     +       %let omode =;
25643     +       %if &append=Y %then
25644     +           %let omode = MOD;
25645     +       data _null_;
25646     +          length line $20000;
25647     +          file &outfref &omode lrecl=20000;
25648     +          fid=fopen("&infref",'i',20000,'v');
25649     +          if fid > 0  then do;
25650     +             do while(^fread(fid));
25651     +                rlen = frlen(fid);
25652     +                rc= fget(fid,line,20000);
25653     +                start = length(line)-length(left(line))+1;
25654     +                line=strip(line);
25655     +                put @start line;
25656     +             end;
25657     +             if fid > 0  then rc=fclose(fid);
25658     +          end;
25659     +       run;
25661     +   %end;
25662     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25663      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.FIMPORT_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25664      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus2_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS2_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.FIMPORT_train outstat= EMWS8.VarClus2_OUTSTAT hi short outtree=EMWS8.VarClus2_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   CatPurchase Clothes Dt_Customer Frq HouseKeeping Income Kitchen Mnt NetPurchase Rcn Recomendation SmallAppliances Toys Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

WARNING: 69 of 2500 observations in data set EMWS8.FIMPORT_TRAIN omitted due to missing values.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: The data set EMWS8.VARCLUS2_OUTSTAT has 67 observations and 17 variables.
NOTE: The data set EMWS8.VARCLUS2_OUTTREE has 20 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.39 seconds
      cpu time            0.15 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

25665      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus2_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 4 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename CatPurchase = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CatPurchase = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Clothes = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Clothes = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Dt_Customer = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Dt_Customer = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster CatPurchase Clothes Dt_Customer Frq ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORR has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus2_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 16 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 16 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 16 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 16 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 12 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 12 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 4 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 14 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 14 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 14 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus2_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 4 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSSTRUCT has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus2_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   CatPurchase = CatPurchase**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Clothes = Clothes**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Dt_Customer = Dt_Customer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   HouseKeeping = HouseKeeping**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kitchen = Kitchen**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NetPurchase = NetPurchase**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Rcn = Rcn**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recomendation = Recomendation**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   SmallAppliances = SmallAppliances**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Toys = Toys**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSSTRUCT has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus2_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 42 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 42 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 42 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 14 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 14 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 14 observations read from the data set WORK._OWNRSQ.
NOTE: There were 14 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 14 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 14 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus2_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 4 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename CatPurchase = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CatPurchase = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Clothes = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Clothes = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Dt_Customer = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Dt_Customer = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster CatPurchase Clothes Dt_Customer Frq ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus2_OUTCLUSCORRPLOT out=EMWS8.VarClus2_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 4 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 16 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus2_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 16 observations read from the data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCLUSCORRPLOT has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 14 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus2_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus2_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATPLOT has 14 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS2_OUTCORR has 14 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCORR has 14 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus2_OUTCORR out=EMWS8.VarClus2_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 14 observations read from the data set EMWS8.VARCLUS2_OUTCORR.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 196 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 196 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 196 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 196 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 196 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 196 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 196 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 196 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 196 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus2_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 196 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 196 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 196 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus2_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 196 observations read from the data set EMWS8.VARCLUS2_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS2_OUTCORRPLOT has 196 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus2_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTLINK has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus2_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTNODE has 18 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus2_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus2_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 4 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 67 observations read from the data set EMWS8.VARCLUS2_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS2_OUTSTATSCORE has 6 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.16853847727666 * (CatPurchase - 57.9127930892636)/18.2753236237683;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.35737916956447 * (Clothes - 50.9707939119703)/23.3752615035019;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.688350968544 * (Dt_Customer - 19548.2266556972)/200.159559924324;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.17093166707841 * (Frq - 20.0300287947346)/10.9571332328441;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.29213783342326 * (HouseKeeping - 6.89099136157959)/7.67568210426728;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.17610881807243 * (Income - 74062.8388728918)/28807.225833237;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.29458943450322 * (Kitchen - 6.95763060468942)/7.84832125249858;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.18064326182648 * (Mnt - 656.584385026738)/677.209798905056;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.16853847727666 * (NetPurchase - 42.0872069107363)/18.2753236237683;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+0.688350968544 * (Rcn - 63.2385849444673)/70.0872519734524;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.10684546716932 * (Recomendation - 3.95845331139448)/1.14554132700342;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+1 * (SmallAppliances - 28.2509255450431)/12.607250762032;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.28929048413862 * (Toys - 6.91402714932126)/7.88474151999434;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.17544241218487 * (Year_Birth - 1966.74043603455)/17.0676843728417;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H24m,
      Create Time=03 de Março de 2016 08H24m

NOTE: 23 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 85.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H24m,
      Create Time=03 de Março de 2016 08H24m

NOTE: 23 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 85.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25666      
25667      *------------------------------------------------------------*;
25668      * End TRAIN: VarClus2;
25669      *------------------------------------------------------------*;

25670      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25671      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
25672      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25673      ;
MPRINT(EM_DIAGRAM):   ;
25674      ;
MPRINT(EM_DIAGRAM):   ;
25675      ;
MPRINT(EM_DIAGRAM):   ;
25676      ;
MPRINT(EM_DIAGRAM):   ;
25677      quit;
MPRINT(EM_DIAGRAM):   quit;
25678      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25679      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
25680      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25681      /*; *"; *'; */
25682      ;
MPRINT(EM_DIAGRAM):   ;
25683      run;
MPRINT(EM_DIAGRAM):   run;
25684      quit;
MPRINT(EM_DIAGRAM):   quit;
25685      /* Reset EM Options */
25686      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
25687      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
25688      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
