MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H18m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                05 de Março de 2016
Time:                11H18m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0OX3M2S "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0OX3M2S new;
MPRINT(EM_DIAGRAM):   run;
25790      %let EMEXCEPTIONSTRING=;
25791      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25792      * SCORE: VarClus2;
MPRINT(EM_DIAGRAM):   * SCORE: VarClus2;
25793      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25794      %let EM_ACTION = SCORE;
25795      %let syscc = 0;
25796      
25797      %macro main;
25798      
25799         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
25800         %include temp;
25801         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
25802         %include temp;
25803         filename temp;
25804      
25805        %SetProperties;
25806      
25807         %if %upcase(&EM_ACTION) = CREATE %then %do;
25808             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
25809             %include temp;
25810             filename temp;
25811             %create;
25812         %end;
25813         %else
25814         %if %upcase(&EM_ACTION) = TRAIN %then %do;
25815              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
25816                 %include temp;
25817                 filename temp;
25818                 %train;
25819         %end;
25820         %else
25821         %if %upcase(&EM_ACTION) = SCORE %then %do;
25822                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
25823                 %include temp;
25824                 filename temp;
25825                 %score;
25826         %end;
25827         %else
25828         %if %upcase(&EM_ACTION) = REPORT %then %do;
25829                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
25830                 %include temp;
25831                 filename temp;
25832                 %report;
25833         %end;
25834         /*
25835         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
25836             %put 'OPENING TABLE';
25837         %end;
25838         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
25839             %put 'CLOSE TABLE';
25840         %end;
25841         */
25842      %mend main;
25843      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
25845     +/* Initialize property macro variables */
25846     +%macro SetProperties;
25847     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
25848     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
25849     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
25850     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
25851     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
25852     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
25853     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
25854     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
25855     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
25856     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
25857     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
25858     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
25859     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
25861     +%mend SetProperties;
25863     +%Macro MakeDummyVariables(indata=,
25864     +                          outvar=,
25865     +                          outdata=,
25866     +                          fileref=,
25867     +                          recreatecmeta=N, /* optional */
25868     +                          incmeta=,     /* optional */
25869     +                          outcmeta=,    /* optional */
25870     +                          ndummyvars=_ndummyvars
25871     +                          );
25872     +    %global &ndummyvars;
25874     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
25875     +       class
25876     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25877     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25878     +    ;
25879     +    run;
25880     +    %let &ndummyvars = 0;
25881     +    data _null_;
25882     +    %let dsid = %sysfunc(open(work._classout));
25883     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
25884     +    %let dsid = %sysfunc(close(&dsid));
25885     +    run;
25887     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
25888     +       input
25889     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25890     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25891     +        / level=nominal stdize=no;
25892     +       make outvar = &outvar;
25893     +       score data = &indata out =&outdata;
25894     +       code  file=  "&fileref";
25895     +    run;
25896     +    %if &recreatecmeta eq Y %then %do;
25897     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
25898     +    data _tmpds;
25899     +        set _tmpds;
25900     +           ROLE = 'INPUT';
25901     +           LEVEL = 'INTERVAL';
25902     +           CREATOR='DMZIP';
25903     +           if NAME = '_TYPE_' then delete;
25904     +    run;
25905     +    data &outcmeta;
25906     +         set &incmeta _tmpds;
25907     +    run;
25908     +    %end;
25909     +    proc datasets lib=work nolist;
25910     +      delete  _dmdbdat _dmdbcat _classout
25911     +    %if &recreatecmeta eq Y %then %do;
25912     +    _tmpds
25913     +    %end;
25914     +    ;
25915     +    quit;
25916     +%Mend MakeDummyVariables;
25918     +/*--- Determine Optimal Number of Cluster ----
25919     +%macro FindClusNum(statds=, groupds=, minvariation=);
25920     +   %global optnclus;
25921     +   data varclus_tmp(drop=_NAME_);
25922     +      set &statDs;
25923     +      where _type_ ='PROPOR';
25924     +   run;
25925     +   proc sort data=varclus_tmp;
25926     +      by _NCL_;
25927     +   run;
25928     +   proc transpose data=varclus_tmp out=varclus_tmp;
25929     +      by _NCL_;
25930     +      var %EM_INTERVAL_INPUT
25931     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25932     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
25933     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
25934     +          %do i = 2 %to &nvar;
25935     +          %let varname = %sysfunc(varname(&dsid, &i));
25936     +          &varname
25937     +          %end;
25938     +      %end;
25939     +   ;
25940     +   run;
25942     +   %if &minVariation eq %then %do;
25943     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
25944     +   %end;
25945     +   %if ^(0<&minVariation<100) %then %do;
25946     +       %let minVariation = 90;
25947     +   %end;
25949     +   data _null_;
25950     +      set varclus_tmp end=eof;
25951     +      by _NCL_;
25952     +      retain flag 0;
25953     +      if first._ncl_ then flag=0;
25954     +      if .<col1 < &minVariation then flag=1;
25955     +      if last._ncl_ and ^flag then do;
25956     +         call symput('OPTNCL', _ncl_);
25957     +         stop;
25958     +      end;
25959     +     if eof then call symput('OPTNCL', _ncl_);
25960     +   run;
25962     +   %let optnclus = &OPTNCL;
25964     +   data varclus_tmp(drop=_NCL_ _NAME_);
25965     +      set &statDs;
25966     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
25967     +   run;
25968     +   proc sort data=varclus_tmp;
25969     +      by _TYPE_;
25970     +   run;
25971     +   proc transpose data=varclus_tmp out=varclus_tmp;
25972     +      by _TYPE_;
25973     +   run;
25974     +   proc sort data=varclus_tmp;
25975     +      by _name_ _type_;
25976     +   run;
25978     +  proc transpose data=varclus_tmp out=&groupds;
25979     +      by _NAME_;
25980     +   run;
25981     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
25982     +      by Cluster descending Rsquare;
25983     +      where Cluster ne 0;
25984     +   run;
25985     +   proc datasets lib=work nolist mt=(DATA VIEW);
25986     +      delete varclus_tmp;
25987     +   run;
25988     +   quit;
25989     +%mend findClusNum;
25990     +*/
25992     +%macro getNclusfromTrain(inoutstat=, nc=);
25993     +%global &nc;
25994     +data _null_;
25995     +    set &inoutstat end=eof;
25996     +    if eof then do;
25997     +    call symput("&nc", _ncl_);
25998     +    end;
25999     +run;
26000     +%mend  getNclusfromTrain;
26002     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
26004     +     *--- Build Code to Modify Metadata ---*;
26005     +     filename X "&deltacodefile";
26006     +     data _null_;
26007     +        FILE X;
26008     +        set &groupds end=eof;
26009     +        /*by Cluster;*/
26010     +         if _N_=1 then do;
26011     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
26012     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
26013     +           %end;
26014     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
26015     +           put "if upcase(strip(NAME)) in (";
26016     +        end;
26017     +        if Strip(upcase(Selected)) eq 'YES' then do;
26018     +           string = '"'!!trim(left(VARIABLE))!!'"';
26019     +           put string;
26020     +        end;
26021     +        if eof then do;
26022     +           put ') then ROLE="INPUT";';
26023     +           put 'else ROLE="REJECTED";';
26024     +           put 'end;';
26026     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
26027     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
26028     +           %end;
26029     +        end;
26030     +     run;
26031     +     quit;
26033     +     filename X;
26035     +     quit;
26036     +%mend MakeDeltaCode;
26038     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
26039     +    %if ^%sysfunc(exist(&statds)) %then %do;
26040     +         %goto doendc;
26041     +    %end;
26043     +    data &corrds(drop=_TYPE_ _NCL_) ;
26044     +       set &statds;
26045     +       where _type_ eq 'CORR' ;
26046     +    run ;
26047     +    proc sort data=&corrds;
26048     +       by _NAME_ ;
26049     +    run ;
26050     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
26051     +      BY _NAME_ ;
26052     +    run ;
26053     +    data &corrplotds;
26054     +       length _Y_ $100;
26055     +       set &corrplotDs;
26056     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
26057     +    run ;
26058     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
26059     +       set &corrplotds;
26060     +       where _LABEL_ ne '' ;
26061     +       keep _TMP_ _LABEL_ ;
26062     +    run ;
26063     +    data _null_;
26064     +       nobs=0;
26065     +       dsid = open('varclus_match');
26066     +       if dsid then do;
26067     +          nobs = attrn(dsid, 'NOBS');
26068     +          dsid = close(dsid);
26069     +       end;
26070     +       call symput ('CORR_NOBS', nobs);
26071     +    run;
26072     +    %if &corr_nobs %then %do;
26073     +        proc sort data=varclus_match;
26074     +           by _name_;
26075     +        run ;
26076     +        proc sort data=&corrplotds;
26077     +           by _name_;
26078     +        run ;
26079     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
26080     +           merge varclus_match &corrplotds;
26081     +           by _NAME_ ;
26082     +           if _X_ eq '' then _X_=_NAME_ ;
26083     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
26084     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
26085     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26087     +       run ;
26088     +    %end;
26089     +    %else %do;
26090     +        proc sort data=&corrplotds;
26091     +           by _name_;
26092     +        run ;
26093     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
26094     +           set &corrplotds;
26095     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26096     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26097     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26099     +        run ;
26100     +    %end;
26101     +    proc sort data=&corrplotds;
26102     +       by _X_ _Y_;
26103     +    run ;
26104     +    proc datasets lib=work nolist mt=(DATA VIEW);
26105     +       delete varclus_match;
26106     +    run;
26107     +    quit;
26109     +%doendc:
26111     +%mend MakeVarClusCorrData;
26113     +%macro MakeStatPlotData(statds= , outstatplotds=);
26114     +   %if %sysfunc(exist(&statds)) %then %do;
26116     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
26117     +          set &statDs;
26118     +          where _type_ in('MEAN', 'STD', 'N');
26119     +       run ;
26120     +       proc transpose data=varclus_tmp out=&outstatplotds;
26121     +          id _TYPE_ ;
26122     +       run ;
26123     +       data &outstatplotds;
26124     +          set &outstatplotds(obs=1000);
26125     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
26126     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
26127     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
26128     +          else SCALEDSTD= STD ;
26129     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
26130     +       run ;
26131     +       proc sort data=&outstatplotds;
26132     +          by descending SCALEDSTD ;
26133     +       run ;
26134     +       proc datasets lib=work nolist mt=(DATA VIEW);
26135     +          delete varclus_tmp;
26136     +       run;
26137     +       quit;
26138     +    %end;
26140     +%mend MakeStatPlotData;
26143     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
26144     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
26145     +    data &EM_USER_OUTSTATSCORE;
26146     +          set &indata;
26147     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
26148     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
26149     +          if _TYPE_ = 'STD' then _NAME_='STD';
26150     +          DROP _TYPE_ _NCL_;
26151     +     run;
26153     +     filename _file_  "&fileRef";
26155     +     data _null_;
26156     +        FILE _file_ MOD;
26157     +        put ' ';
26158     +        put '/*-------------------------------------------------*/';
26159     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
26160     +        put '/*-------------------------------------------------*/';
26161     +        put ' ';
26162     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
26164     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
26165     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
26167     +        %let k = 1;
26168     +        %do %while(^%sysfunc(fetch(&dsid)));
26169     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
26170     +                %if &k > 2 %then %do;
26171     +                 %let cn = %eval(&k-2);
26172     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
26173     +                %end;
26174     +                %let k = %eval(&k+1);
26175     +        %end;
26177     +        %let rc = %sysfunc(rewind(&dsid));
26179     +        %do i= 2 %to &nvar;
26180     +            %let _varname =  %sysfunc(varname(&dsid, &i));
26181     +            %do %while(^%sysfunc(fetch(&dsid)));
26182     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
26183     +                %if &_name = MEAN %then
26184     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
26185     +                %else %if &_name = STD %then
26186     +                %let _std = %sysfunc(getvarn(&dsid, &i));
26187     +                %else %do;
26188     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
26189     +                      %let abscoeff = %sysfunc(abs(&coeff));
26190     +                          %if &abscoeff >  0 %then %do;
26191     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
26192     +                           %end;
26193     +                 %end;
26194     +             %end;
26195     +             %let rc = %sysfunc(rewind(&dsid));
26196     +         %end;
26198     +        %let dsid= %sysfunc(close(&dsid));
26199     +       run;
26200     +%mend CreateScoreCode;
26204     +/*----------------------------------------------------------
26205     +    Instead of using %MakeRSquareData,
26206     +    %MakeVarClusResultTable at macro2.source is used
26207     + +----------------------------------------------------------*/
26210     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
26212     +/* modifying  from ods rsquare = data */
26214     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
26215     +    Length Cluster $16;
26216     +    length Variable $32;
26217     +    Length VariableLabel $64;
26218     +    set &indata; retain CurrentCluster;
26219     +    if NumberOfClusters ^= &ncluster then delete;
26220     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
26221     +    CurrentCluster = Cluster;
26222     +   run;
26223     +proc sort data =&outdata ;
26224     +     by Cluster RsquareRatio;
26225     +run;
26226     +data _tmprsq(drop=index);
26227     +     set &outdata; by Cluster;
26228     +     if first.Cluster then do;
26229     +     index = strip(scan(Cluster,2 ));
26230     +     Variable = "Clus"||index;
26231     +     VariableLabel = "Cluster Component "||index;
26232     +     OwnCluster = 1;
26233     +     NextClosest = .;
26234     +     RsquareRatio = 0;
26235     +     output;
26236     +     end;
26237     +run;
26239     +proc sort data = _tmprsq ;
26240     +     by Cluster RsquareRatio;
26241     +run;
26242     +data &outdata;
26243     +     set &outdata _tmprsq;
26244     +by Cluster;
26245     +run;
26248     +/* Just create the Selected variable with all YES */
26250     +data &outdata;
26251     +    set &outdata; by cluster;
26252     +    length Selected $8;
26253     +    Selected = 'YES';
26254     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26255     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26256     +    rename OwnCluster = RSqWithClusterComp;
26257     +    rename NextClosest = RSqWithNextClusComp;
26258     +run;
26261     +/* Selected = Y/N will be done %score section -----
26263     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
26264     +data &outdata;
26265     +    set &outdata; by cluster;
26266     +    length Selected $8;
26267     +    if first.Cluster then Selected = 'YES';
26268     +    else Selected = 'NO';
26269     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26270     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26271     +    rename OwnCluster = RSqWithClusterComp;
26272     +    rename NextClosest = RSqWithNextClusComp;
26273     +run;
26274     +%end;
26275     +%else %do;
26276     +data &outdata;
26277     +    set &outdata; by cluster;
26278     +    if last.Cluster then Selected = 'YES';
26279     +    else Selected = 'NO';
26280     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26281     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26282     +    rename OwnCluster = RSqWithClusterComp;
26283     +    rename NextClosest = RSqWithNextClusComp;
26284     +run;
26285     +%end;
26286     +---------------------------------------------------------------*/
26288     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
26289     +/* to calculate NextClosestClusRsq */
26290     +proc transpose data = &inClusRSquare  out=_clusRsq;
26291     +      by cluster;
26292     +      run;
26293     +data _clusRsq;
26294     +     set _clusRsq;
26295     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
26296     +run;
26298     +proc sort data=_clusRsq;
26299     +    by cluster col1;
26300     +    run;
26301     +data _clusRsq(drop=_NAME_ _LABEL_);
26302     +     set _clusRsq; by cluster;
26303     +     if last.Cluster then output;
26304     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
26305     +     rename COL1 = RSqWithNextClusComp;
26306     +     rename Cluster = Variable;
26307     +     label  Cluster = "Variable";
26308     +run;
26310     +proc sort data =&outdata;
26311     +     by Variable;
26312     +run;
26313     +data &outdata;
26314     +    merge &outdata _clusRsq;
26315     +    by Variable;
26316     +run;
26317     +proc sort data =&outdata;
26318     +by Cluster  RsquareRatio;
26319     +run;
26320     +quit;
26321     +%end;
26323     +proc datasets lib = work nolist;
26324     +     delete _tmprsq _clusRsq;
26325     +     run;
26326     +quit;
26328     +%mend MakeRSquareData;
26331     +/*-------------------------------------------------------------------------*/
26335     +%macro ModifyCorr(indata=,
26336     +                  outdata=,
26337     +                  rsquare = Y
26338     +                  );
26339     +    data corr_tmp;
26340     +        set &indata;
26341     +    run;
26342     +     proc sql;
26343     +           update &indata
26344     +           set
26345     +     %let dsid = %sysfunc(open(work.corr_tmp));
26346     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
26347     +          %do i = 4 %to &nvar;
26348     +          %let _name = %sysfunc(varname(&dsid, &i));
26349     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
26350     +            %else  %let _name_md = &_name;
26351     +            %if &i < &nvar %then %do;
26352     +               &_name = 1- &_name_md ,
26353     +            %end;
26354     +            %else %do;
26355     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
26356     +            %end;
26357     +          %end;
26358     +      %let dsid= %sysfunc(close(&dsid));
26360     +      select * from &indata;
26361     +      run;
26362     +      proc datasets lib = work nolist;
26363     +           delete corr_tmp;
26364     +      run;
26365     +      quit;
26367     + %mend ModifyCorr;
26369     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
26370     +    data &outdata(drop= _NCL_  _TYPE_);
26371     +       set &indata;
26372     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
26373     +       rename _NAME_ = Cluster;
26374     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26375     +    run;
26376     +    %if &RSquare eq Y %then %do;
26377     +     data corr_tmp;
26378     +        set &outdata;
26379     +     run;
26381     +     data &outdata(drop=i);
26382     +          set &outdata;
26383     +          %let dsid = %sysfunc(open(work.corr_tmp));
26384     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26385     +          %do i = 2 %to &nvar;
26386     +            %let _name = %sysfunc(varname(&dsid, &i));
26387     +            %let _name_md = &_name.**2;
26388     +                &_name = &_name_md;
26389     +          %end;
26390     +      %let dsid= %sysfunc(close(&dsid));
26391     +      run;
26392     +      proc datasets lib = work nolist;
26393     +           delete corr_tmp;
26394     +      run;
26396     +    %end;
26397     +     quit;
26398     +%mend MakeClusStructCorrData;
26400     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
26401     +    data &outdata(drop= _NCL_  _TYPE_);
26402     +       set &indata;
26403     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
26404     +       rename _NAME_ = Cluster;
26405     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26406     +    run;
26407     +    data corr_tmp;
26408     +        set &outdata;
26409     +    run;
26411     +    %let dsid = %sysfunc(open(work.corr_tmp));
26412     +    %let nclus2= %eval(&ncluster+1);
26413     +    data &outdata;
26414     +         set &outdata;
26415     +          %do i = 2 %to &nclus2;
26416     +          %let i_1 = %eval(&i-1);
26417     +            %let _name = %sysfunc(varname(&dsid, &i));
26418     +            %let _newName = Clus&i_1;
26419     +                rename &_name = &_newName; ;
26420     +                *label &_name ="Cluster &i_1";
26421     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
26422     +          %end;
26423     +          keep Cluster
26424     +          %do i = 2 %to &nclus2;
26425     +                %let _name = %sysfunc(varname(&dsid, &i));
26426     +                &_name
26427     +          %end;
26428     +          ;
26429     +    %let dsid= %sysfunc(close(&dsid));
26430     +     run;
26431     +     quit;
26433     +    %if &RSquare eq Y %then %do;
26435     +       data corr_tmp;
26436     +        set &outdata;
26437     +     run;
26439     +     data &outdata(drop=i);
26440     +          set &outdata;
26441     +          %let dsid = %sysfunc(open(work.corr_tmp));
26442     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26443     +          %do i = 2 %to &nvar;
26444     +            %let _name = %sysfunc(varname(&dsid, &i));
26445     +            %let _name_md = &_name.**2;
26446     +                &_name = &_name_md;
26447     +          %end;
26448     +      %let dsid= %sysfunc(close(&dsid));
26449     +      run;
26450     +    %end;
26452     +    %if &makeplotds eq Y %then %do;
26453     +     proc transpose data = &outdata
26454     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26455     +          by cluster;
26456     +     run;
26457     +     data &plotds;
26458     +          set  &plotds;
26459     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26460     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26461     +     run;
26462     +     %end;
26463     +     proc datasets lib = work nolist;
26464     +           delete corr_tmp;
26465     +     run;
26466     +     quit;
26467     +%mend MakeInterClusCorrData;
26470     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
26472     +data &outlink(drop = Selected);
26473     +     set &indata;
26474     +     LINKID = _N_;
26475     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
26476     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
26477     +run;
26478     +data &outnode(keep=NODEID TYPE LABEL);
26479     +    set &indata;
26480     +    length TYPE $16;
26481     +    rename Variable = NODEID;
26482     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
26483     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
26484     +    then  TYPE = "CLUSTER";
26485     +    else  TYPE="VARIABLE";
26486     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
26487     +run;
26488     +quit;
26489     +%mend MakeClusConstellData;
26493     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
26495     +data &outlink(drop = Selected);
26496     +     set &indata;
26497     +     LINKID = _N_;
26498     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
26499     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
26500     +run;
26501     +data &outnode(keep=NODEID TYPE LABEL);
26502     +    set &indata;
26503     +    length TYPE $16;
26504     +    rename Variable = NODEID;
26505     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
26506     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
26507     +    then  TYPE = "CLUSTER";
26508     +    else  TYPE="VARIABLE";
26509     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
26510     +run;
26511     +quit;
26512     +%mend MakeClusConstellData;
26515     +/*--- This will work only when inds is not a view data -------
26517     +%macro getNVarNObs(inds=, nvar=, nobs=);
26519     +    %global &nvar;
26520     +    %global &nobs;
26521     +    data _null_;
26522     +         dsid = open("&inds");
26523     +         nv = attrn(dsid, 'NVAR');
26524     +         no = attrn(dsid, 'NOBS');
26525     +         dsid = close(dsid);
26526     +         call symput("&nvar", nv);
26527     +         call symput("&nobs", no);
26528     +    run;
26529     +    quit;
26530     +%mend  getNVarNObs;
26532     ++---------------------------------------------------------------*/
26535     +%macro getNVar(inds=, nvar=);
26536     +    %global &nvar;
26537     +    data _null_;
26538     +         dsid = open("&inds");
26539     +         nv = attrn(dsid, 'NVAR');
26540     +         dsid = close(dsid);
26541     +         call symput("&nvar", nv);
26542     +    run;
26543     +    quit;
26544     +%mend  getNVar;
26548     +%macro getNObs(inds=, nobs=);
26549     +    %global &nobs;
26550     +    data _null_;
26551     +        set &inds end=eof;
26552     +        if eof then call symput("&nobs", _N_);
26553     +    run;
26554     +    quit;
26555     +%mend  getNObs;
26557     +%Macro CreateVarclusMeta(trainnum=);
26558     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
26559     +    data &EM_USER_VARCLUSMETA;
26560     +         length TrainNum 8.;
26561     +         length NewTrain $8;
26562     +         length NGCluster 8.;
26563     +         length ExportedComp $16;
26564     +         length HideVariable $8;
26565     +         TrainNum = &trainnum;
26566     +         NewTrain = "Y";
26567     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
26568     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
26569     +         NGCluster = 0; /* zero means no twostage */
26570     +   run;
26571     +   quit;
26572     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
26574     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
26575     +    data &outdata(drop= _NCL_  _TYPE_);
26576     +       set &indata;
26577     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
26578     +       %if &globalclusid ne %then %do;
26579     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
26580     +       rename _NAME_ = Cluster;
26581     +       %end;
26582     +       %else %do;
26583     +        _NAME_ = upcase(_NAME_);
26584     +       rename _NAME_ = Cluster;
26585     +       %end;
26586     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26587     +    run;
26588     +    data corr_tmp;
26589     +        set &outdata;
26590     +    run;
26592     +    %let dsid = %sysfunc(open(work.corr_tmp));
26593     +    %let nclus2= %eval(&ncluster+1);
26594     +    data &outdata;
26595     +         set &outdata;
26596     +          %do i = 2 %to &nclus2;
26597     +          %let i_1 = %eval(&i-1);
26598     +            %let _name = %sysfunc(varname(&dsid, &i));
26599     +            %if &globalclusid ne %then
26600     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
26601     +                     rename &_name = &_newName;
26602     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
26603     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
26604     +                %end;
26605     +            %else
26606     +                %do; %let _newName = CLUS&i_1;
26607     +                     rename &_name = &_newName;
26608     +                     *label &_name ="Cluster &i_1";
26609     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
26610     +                %end;
26611     +          %end;
26612     +          keep Cluster
26613     +          %do i = 2 %to &nclus2;
26614     +                %let _name = %sysfunc(varname(&dsid, &i));
26615     +                &_name
26616     +          %end;
26617     +          ;
26618     +    %let dsid= %sysfunc(close(&dsid));
26619     +     run;
26620     +     quit;
26622     +    %if &RSquare eq Y %then %do;
26624     +       data corr_tmp;
26625     +        set &outdata;
26626     +     run;
26628     +     data &outdata;
26629     +          set &outdata;
26630     +          %let dsid = %sysfunc(open(work.corr_tmp));
26631     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26632     +          %do i = 2 %to &nvar;
26633     +            %let _name = %sysfunc(varname(&dsid, &i));
26634     +            %let _name_md = &_name.**2;
26635     +                &_name = &_name_md;
26636     +          %end;
26637     +      %let dsid= %sysfunc(close(&dsid));
26638     +      run;
26639     +    %end;
26641     +    %if &makeplotds eq Y %then %do;
26642     +     proc transpose data = &outdata
26643     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26644     +          by cluster;
26645     +     run;
26646     +     data &plotds;
26647     +          set  &plotds;
26648     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26649     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26650     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26651     +     run;
26652     +     %end;
26653     +     proc datasets lib = work nolist;
26654     +           delete corr_tmp;
26655     +     run;
26656     +     quit;
26657     +%mend MakeInterClusCorrData;
26659     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
26660     +    data _tmpds(drop= _NCL_);
26661     +       set &indata;
26662     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
26663     +       %if &globalclusid ne %then %do;
26664     +           _NAME_ = "GC&globalclusid.";
26665     +       rename _NAME_ = Cluster;
26666     +       %end;
26667     +       %else %do;
26668     +        _NAME_ = "CLUS";
26669     +        rename _NAME_ = Cluster;
26670     +       %end;
26671     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26672     +    run;
26673     +    proc transpose data =_tmpds out =&outdata;
26674     +    run;
26676     +    data &outdata(drop=COL1);
26677     +        %if &globalclusid ne %then %do;
26678     +        length GCluster $16;
26679     +        %end;
26680     +        length Cluster $32;
26681     +        length _NAME_ $32;
26682     +         set &outdata;
26683     +         _NAME_ = upcase(_NAME_);
26684     +         rename _NAME_=Variable;
26685     +         *label _NAME_="Variable";
26686     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26687     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26688     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26690     +         %if &globalclusid ne %then %do;
26691     +          GCluster = "GC&globalclusid";
26692     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
26693     +         %end;
26694     +         %else %do;
26695     +         Cluster = "CLUS"||strip(COL1);
26696     +        %end;
26697     +         rename COL2 = RSqWithOwnClusComp;
26698     +         *label COL2 = "R-Square With Own Cluster Component";
26699     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
26701     +   run;
26702     +   proc sort data =&outdata;
26703     +        by Cluster RSqWithOwnClusComp;
26704     +   run;
26705     +   proc datasets lib = work nolist;
26706     +           delete _tmpds;
26707     +   run;
26708     +   quit;
26709     +%mend MakeOwnRSquare;
26711     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
26712     +    data &outdata(drop= _NCL_  _TYPE_);
26713     +       %if &globalclusid ne %then %do;
26714     +        length GCluster $16;
26715     +        %end;
26716     +       set &indata;
26717     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
26718     +       %if &globalclusid ne %then %do;
26719     +         GCluster = "GC&globalclusid";
26720     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
26721     +         rename _NAME_ = Cluster;
26722     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26723     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26725     +       %end;
26726     +       %else %do;
26727     +         _NAME_ = upcase(_NAME_);
26728     +         rename _NAME_ = Cluster;
26729     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26730     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26732     +       %end;
26733     +     run;
26734     +    %if &RSquare eq Y %then %do;
26735     +     data corr_tmp;
26736     +          set &outdata;
26737     +     run;
26738     +     %let istart = 2;
26739     +     %if &globalclusid ne %then %let istart = 3;
26740     +     data &outdata;
26741     +          set &outdata;
26742     +          %let dsid = %sysfunc(open(work.corr_tmp));
26743     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26744     +          %do i =&istart %to &nvar;
26745     +            %let _name = %sysfunc(varname(&dsid, &i));
26746     +            %let _name_md = &_name.**2;
26747     +                &_name = &_name_md;
26748     +          %end;
26749     +      %let dsid= %sysfunc(close(&dsid));
26750     +      run;
26751     +      proc datasets lib = work nolist;
26752     +           delete corr_tmp;
26753     +      run;
26754     +    %end;
26755     +     quit;
26756     +%mend MakeClusStructCorrData;
26758     +/*
26759     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
26760     +*/
26762     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
26764     +     /* The indata should be the outdata
26765     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
26767     +     proc sort data =&indata out=_tmpclusRsq;
26768     +     by cluster;
26769     +     run;
26771     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
26772     +      by cluster;
26773     +     run;
26775     +     proc sort data=_tmpclusRsq;
26776     +        by _NAME_ COL1;
26777     +     run;
26779     +     data _tmpclusRsq;
26780     +         length _NAME_ $32;
26781     +         set _tmpclusRsq; by _NAME_;
26782     +          _NAME_ = upcase(_NAME_);
26783     +          %if &ncluster ne 1 %then %do;
26784     +             if last._NAME_ then delete;
26785     +          %end;
26786     +          %else %do;
26787     +             COL1 = 0;
26788     +          %end;
26789     +     run;
26790     +     /* need to sort again */
26791     +     proc sort data=_tmpclusRsq;
26792     +        by _NAME_ COL1;
26793     +     run;
26795     +     data &outdata;
26796     +         set _tmpclusRsq; by _NAME_;
26797     +         Cluster = upcase(Cluster);
26798     +         if last._NAME_ then output;
26799     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
26800     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
26801     +         rename COL1 = RSqWithNextClusComp;
26802     +         Cluster = upcase(Cluster);
26803     +         rename Cluster = ClosestCluster;
26804     +         *label  Cluster = "Next Closest Cluster";
26805     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
26806     +         rename _NAME_ = Variable;
26807     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26808     +    run;
26811     +    %if &globalclusid ne %then %do;
26812     +    data &outdata;
26813     +       length GCluster $16;
26814     +       set &outdata;
26815     +       GCluster = "GC&globalclusid";
26816     +       run;
26817     +    %end;
26818     +    proc datasets lib = work nolist;
26819     +           delete _tmpclusRsq;
26820     +    run;
26821     +    quit;
26822     +%mend FindNextClosestClusByVar;
26825     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
26826     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
26827     +     proc sort data =&indata out=_tmpclusRsq;
26828     +     by cluster;
26829     +     run;
26830     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
26831     +     by cluster;
26832     +     run;
26833     +     proc sort data=_tmpclusRsq;
26834     +        by _NAME_ col1;
26835     +     run;
26836     +     data _tmpclusRsq;
26837     +         length _NAME_ $32;
26838     +         set _tmpclusRsq; by _NAME_;
26839     +          _NAME_ = upcase(_NAME_);
26840     +          %if &ncluster ne 1 %then %do;
26841     +             if last._NAME_ then delete;
26842     +          %end;
26843     +          %else %do;
26844     +             COL1 = 0;
26845     +          %end;
26846     +     run;
26847     +     data &outdata;
26848     +         set _tmpclusRsq; by _NAME_;
26849     +         Cluster = upcase(Cluster);
26850     +         if last._NAME_ then output;
26851     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
26852     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
26853     +         rename COL1 = RSqWithNextClusComp;
26854     +         Cluster = upcase(Cluster);
26855     +         rename Cluster = ClosestCluster;
26856     +         *label  Cluster = "Next Closest Cluster";
26857     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
26858     +         rename _NAME_ = Variable;
26859     +         *label  _NAME_ = "Variable";
26860     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26862     +    run;
26863     +    %if &globalclusid ne %then %do;
26864     +    data &outdata;
26865     +       length GCluster $16;
26866     +       set &outdata;
26867     +       GCluster = "GC&globalclusid";
26868     +       run;
26869     +    %end;
26871     +    proc datasets lib = work nolist;
26872     +           delete _tmpclusRsq;
26873     +    run;
26875     +    quit;
26876     +%mend FindNextClosestClusByCluster;
26878     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
26879     +/*----
26880     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
26881     +-----------*/
26883     +proc sort data =&indata1;
26884     +    by Variable;
26885     +run;
26886     +proc sort data =&indata2;
26887     +    by Variable;
26888     +run;
26889     +data &outdata;
26890     +    merge &indata1 &indata2;
26891     +    by Variable;
26892     +    length Type $16;
26893     +    Type = 'Variable';
26894     +    *label Type ='Type';
26895     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
26896     +run;
26899     +data &indata3;
26900     +    set  &indata3 ;
26901     +    length RSqWithOwnClusComp 8.;
26902     +    Cluster = Variable;
26903     +    RSqWithOwnClusComp = 1;
26904     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
26905     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
26906     +    length Type $16;
26907     +    Type = 'ClusterComp';
26908     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
26910     +;
26911     +run;
26913     +proc sort data=&outdata;
26914     +    by Cluster;
26915     +run;
26916     +proc sort data =&indata3;
26917     +    by Cluster;
26918     +run;
26920     +data &outdata;
26921     +     set &outdata &indata3;
26922     +     by Cluster;
26923     +run;
26926     +/* Create the Selected variable with all YES */
26928     +data &outdata;
26929     +     set &outdata;
26930     +     length RsqRatio 8.;
26931     +     length Selected $8;
26932     +     *label RSqRatio = "1-R**2 Ratio";
26933     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
26934     +     *label Selected = "Variable Selected";
26935     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
26936     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
26937     +     Selected ='YES';
26938     +     rename _LABEL_ = Label;
26939     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
26940     +run;
26943     +/*----  Selected = Y/N will be assigened at the %score                   -------+
26944     +        Just create the Selected variable with all YES at the step above
26945     + +------------------------------------------------------------------------------+
26947     +proc sort data=&outdata;
26948     +    by Cluster RsqRatio;
26949     +run;
26951     +%if &selectedcomp eq CLUSTERCOMP %then %do;
26952     +data &outdata;
26953     +     set &outdata; by Cluster;
26954     +     length Selected $8;
26955     +     label Selected = "Variable Selected";
26956     +     if  first.Cluster then Selected ='Yes';
26957     +     else Selected = 'No';
26958     +    run;
26959     +%end;
26960     +%else %do;
26961     +data &outdata(drop = _var _varchange);
26962     +     set &outdata; retain _var 0; by Cluster;
26963     +     length Selected $8;
26964     +     label Selected = "Variable Selected";
26965     +     if first.Cluster then  _varchange = 0;
26966     +     else _varchange =1;
26967     +     if _var ne _varchange then  Selected  = 'Yes';
26968     +     else Selected = 'No';
26969     +     if last.cluster then  _var = 0;
26970     +     else _var = _varchange;
26971     +run;
26972     +%end;
26974     +--------------------------------------------------------------*/
26976     +quit;
26977     +%mend MakeVarClusResultTable;
26979     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
26980     +     proc sort data =&indata;
26981     +        by cluster;
26982     +     run;
26983     +     proc transpose data =&indata
26984     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26985     +          by cluster;
26986     +     run;
26987     +     data &outdata;
26988     +          set  &outdata;
26989     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26990     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26991     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
26992     +     run;
26993     +     %if &globalclusid ne %then %do;
26994     +     data &outdata;
26995     +          Length GCluster $16;
26996     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26997     +          set  &outdata;
26998     +          GCluster ="GC&globalclusid.";
26999     +          run;
27000     +     %end;
27002     +%Mend MakePlotDataFromCorrTable;
27005     +%macro MakeCorrelation(indata=,
27006     +                       outstat=_tmpoutstat,
27007     +                       corrmatrix=N,
27008     +                       outcorr=_tmpoutcorr,
27009     +                       includeclassvar=N,
27010     +                       target=,
27011     +                       freq=,
27012     +                       weight=);
27013     +   %if &target eq  %then %do;
27015     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
27016     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
27017     +       %if &includeclassvar eq Y %then %do;
27018     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
27019     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
27020     +          %do i = 2 %to &nvar;
27021     +          %let varname = %sysfunc(varname(&dsid, &i));
27022     +          &varname
27023     +          %end;
27024     +       %end;
27025     +       ;
27026     +      %if &freq ne  %then %do;
27027     +          freq &freq;
27028     +      %end;
27029     +      %if &weight ne  %then %do;
27030     +          weight &weight;
27031     +      %end;
27033     +      run;
27034     +      %if &corrmatrix eq Y %then %do;
27035     +      data  &outcorr (drop = _NCL_ _TYPE_);
27036     +           set  &outstat ;
27037     +           if _TYPE_ ='CORR' then output;
27038     +      run;
27039     +      %end;
27040     +    %end;
27041     +    %else %do;
27042     +       proc corr data=&indata outp=&outstat noprint;
27043     +            var
27044     +       %let dsid = %sysfunc(open(&indata));
27045     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
27046     +          %do i = 1 %to &nvar;
27047     +              %let _name = %sysfunc(varname(&dsid, &i));
27048     +              %if &_name ne &target %then;
27049     +              &_name
27050     +           %end;
27051     +        %let dsid= %sysfunc(close(&dsid));
27052     +        ;
27053     +        with &target;
27054     +        run;
27055     +    %end;
27056     +    quit;
27057     +%mend MakeCorrelation;
27060     +%macro MakeCorrelationDistance(indata=,
27061     +                               outdata=,
27062     +                               rsquare = N
27063     +                               );
27064     +    data corr_tmp;
27065     +        set &indata;
27066     +        if _N_ = 1 then do;
27067     +           output;
27068     +           stop;
27069     +         end;
27070     +    run;
27071     +    %if &outdata ne  %then %let  _outdata = &outdata;
27072     +    %else %let _outdata = &indata;
27074     +    data &_outdata;
27075     +         set &indata;
27077     +         %let dsid = %sysfunc(open(work.corr_tmp));
27078     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
27079     +          %do i = 2 %to &nvar;
27080     +              %let _name = %sysfunc(varname(&dsid, &i));
27081     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
27082     +              %else  %let _name_md = &_name;
27083     +              &_name = 1- &_name_md;
27084     +          %end;
27085     +      %let dsid= %sysfunc(close(&dsid));
27086     +      run;
27087     +      proc datasets lib = work nolist;
27088     +           delete corr_tmp;
27089     +      run;
27090     +      quit;
27091     +  %mend MakeCorrelationDistance;
27094     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
27095     +                                   rsquare = N
27096     +                                   );
27097     +    data corr_tmp;
27098     +        set &indata;
27099     +    run;
27100     +    proc sql noprint;
27101     +           update &indata
27102     +           set
27103     +     %let dsid = %sysfunc(open(work.corr_tmp));
27104     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
27105     +          %do i = 4 %to &nvar;
27106     +          %let _name = %sysfunc(varname(&dsid, &i));
27107     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
27108     +            %else  %let _name_md = &_name;
27109     +            %if &i < &nvar %then %do;
27110     +               &_name = 1- &_name_md ,
27111     +            %end;
27112     +            %else %do;
27113     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
27114     +            %end;
27115     +          %end;
27116     +      %let dsid= %sysfunc(close(&dsid));
27118     +      select * from &indata;
27119     +      run;
27120     +     data &indata( drop = _NCL_);
27121     +           set &indata;
27122     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
27123     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
27124     +     run;
27125     +     data &indata(DROP = _NCL_);
27126     +           set &indata;
27127     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
27128     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
27129     +           rename _NAME_ = _VAR_;
27130     +     run;
27131     +     proc datasets lib = work nolist;
27132     +           delete corr_tmp;
27133     +     run;
27134     +     quit;
27135     + %mend UpdateOutStatCorrToDistance;
27138     +%macro HierClusWithCorr(indata= ,
27139     +                        ncluster=,
27140     +                        method = Ward,
27141     +                        outtree = _outtree,
27142     +                        idvar =_VAR_,
27143     +                        outdata=,
27144     +                        rescore = N,
27145     +                        newncluster=
27146     +                        );
27147     +      %global &newncluster;
27148     +      %if &rescore ne Y %then %do;
27149     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
27150     +                   method=&method outtree=&outtree noprint;
27151     +           id &idvar;
27152     +      run;
27153     +      %end;
27154     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
27155     +      run;
27156     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
27157     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
27158     +      run;
27159     +      data _outcontent;
27160     +          set _outcontent;
27161     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
27162     +          index = 1;
27163     +          rename NAME = _NAME_;
27164     +      run;
27165     +      proc sort data=_outcontent;
27166     +          by _NAME_;
27167     +      run;
27168     +      proc sort data =&outdata;
27169     +           by _NAME_;
27170     +      run;
27171     +      data &outdata(drop=index);
27172     +          merge &outdata _outcontent;
27173     +          by _NAME_;
27174     +          if index = . then delete;
27175     +      run;
27176     +      /*-----------------------------------------------------------*/
27177     +      data &outdata;
27178     +           length CLUSNAME $16;
27179     +           set &outdata;
27180     +           if CLUSTER > &ncluster then delete;
27181     +           CLUSNAME='GC'||strip(CLUSTER);
27182     +           *label CLUSNAME = "Cluster Name";
27183     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
27184     +           rename _NAME_ = VARIABLE ;
27185     +           *label _NAME_ = "Variable";
27186     +           *label CLUSTER = "Cluster";
27187     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
27188     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
27189     +      run;
27190     +      proc sort data=&outdata out=&outdata;
27191     +           by CLUSTER;
27192     +      run;
27193     +      proc means data =&outdata noprint;
27194     +           output out=_meanout;
27195     +      run;
27196     +      data _null_;
27197     +            set _meanout;
27198     +            if strip(_STAT_) eq 'MAX' then do;
27199     +            call symput("&newncluster", CLUSTER);
27200     +            stop;
27201     +            end;
27202     +      run;
27204     +      proc datasets lib = work nolist;
27205     +           delete _outcontent _meanout;
27206     +      run;
27207     +      quit;
27208     +%mend  HierClusWithCorr;
27210     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
27212     +     data _tmpindata;
27213     +          set &indata;
27214     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
27215     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
27216     +          if _TYPE_ = 'STD' then _NAME_='STD';
27217     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
27218     +          DROP _TYPE_ _NCL_;
27219     +     run;
27221     +     filename _file_  "&fileRef";
27223     +     data _null_;
27224     +        FILE _file_ MOD;
27225     +        put ' ';
27226     +        put "/*-------------------------------------------------*/";
27227     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
27228     +        put "/*-------------------------------------------------*/";
27229     +        put ' ';
27230     +        %let dsid = %sysfunc(open(work._tmpindata));
27232     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
27233     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
27234     +        %let k = 1;
27235     +        %do %while(^%sysfunc(fetch(&dsid)));
27236     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27237     +               %if &k > 2 %then %do;
27238     +                %let cn = %eval(&k-2);
27239     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
27240     +                %end;
27241     +                %let k = %eval(&k+1);
27243     +        %end;
27244     +        %let rc = %sysfunc(rewind(&dsid));
27246     +        %do j= 2 %to &nvar;
27247     +            %let _varname = %sysfunc(varname(&dsid, &j));
27248     +            %do %while(^%sysfunc(fetch(&dsid)));
27249     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27250     +                %if &_name = MEAN %then
27251     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
27252     +                %else %if &_name = STD %then
27253     +                %let _std = %sysfunc(getvarn(&dsid, &j));
27254     +                %else %do;
27255     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
27256     +                      %let abscoeff = %sysfunc(abs(&coeff));
27257     +                          %if &abscoeff >  0 %then %do;
27258     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
27259     +                           %end;
27260     +                 %end;
27261     +             %end;
27262     +             %let rc = %sysfunc(rewind(&dsid));
27263     +         %end;
27265     +        %let dsid= %sysfunc(close(&dsid));
27267     +     run;
27269     +     filename _file_;
27270     +     proc datasets lib = work nolist;
27271     +           delete _tmpindata;
27272     +     run;
27273     +     quit;
27274     +%mend CreateScoreCode2;
27277     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
27279     +     /*--- Build Code to Modify Metadata ---*/
27280     +     filename X "&deltacodefile";
27281     +     data _null_;
27282     +        FILE X;
27283     +        set &groupds end=eof;
27284     +        if _N_=1 then do;
27285     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
27286     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
27287     +           %end;
27288     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
27289     +           put "if upcase(strip(NAME)) in (";
27290     +        end;
27291     +        if Strip(upcase(Selected)) eq 'YES' then do;
27292     +           string = '"'!!trim(left(VARIABLE))!!'"';
27293     +           put string;
27294     +        end;
27295     +        if eof then do;
27296     +           put ') then ROLE="INPUT";';
27297     +           put 'else ROLE="REJECTED";';
27298     +           put 'end;';
27300     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
27301     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
27302     +           %end;
27303     +        end;
27304     +     run;
27305     +     quit;
27307     +     filename X;
27308     +     quit;
27309     +%mend MakeDeltaCode2;
27311     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
27312     +  %global &ngc;
27313     +  data _null_;
27314     +  %if &indata ne %then %do;
27315     +      %let dsid = %sysfunc(open(&indata));
27316     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
27317     +      %let dsid = %sysfunc(close(&dsid));
27318     +  %end;
27319     +  %else %do;
27320     +       %let nvar = %eval(&ninput+&ndummy); ;
27321     +  %end;
27322     +  %let numgc = %eval(&nvar/&div+2);
27323     +  %let &ngc = &numgc;
27324     +   run;
27325     +  quit;
27326     +%mend getInitialGClusterNumber;
27329     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
27330     +data &outlink(drop = Selected);
27331     +     set &indata;
27332     +     LINKID = _N_;
27333     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
27334     +run;
27335     +data &outnode(keep=NODEID TYPE LABEL);
27336     +    set &indata;
27337     +    length TYPE $16;
27338     +    rename VARIABLE = NODEID;
27339     +    *label  CLUSNAME="Node ID";
27340     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27341     +    TYPE = "VARIABLE";
27342     +    *label TYPE = "Node Type";
27343     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27344     +    run;
27345     +data _tmp(keep=NODEID TYPE LABEL);
27346     +    set &indata;
27347     +    length TYPE $16;
27348     +    rename CLUSNAME = NODEID;
27349     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27350     +    TYPE = "GCLUSTER";
27351     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27352     +    run;
27353     +proc sort data=_tmp;
27354     +    by NODEID;
27355     +run;
27356     +data _tmp;
27357     +    set _tmp; by NODEID;
27358     +    if first.NODEID then output;
27359     +run;
27360     +proc sort data=&outnode;
27361     +    by NODEID;
27362     +run;
27363     +data  &outnode;
27364     +    set _tmp &outnode;
27365     +run;
27366     +proc datasets lib = work nolist;
27367     +     delete _tmp;
27368     +run;
27369     +quit;
27370     +%mend MakeGobalConstellData;
27372     +/* Make contellation plot data among GCLUSTERS */
27374     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
27376     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
27377     +     set &indata;
27378     +     LINKID = _N_;
27379     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
27380     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
27381     +     end;
27382     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
27383     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
27384     +     end;
27385     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
27386     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
27387     +    end;
27388     +run;
27390     +data _tmp_outrsquare;
27391     +        set &inoutrsq;
27392     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
27393     +run;
27395     +proc freq data =_tmp_outrsquare noprint;
27396     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
27397     +run;
27399     +data &outnode(keep=_NAME_ TYPE LABEL);
27400     +    set &outlink;
27401     +    length TYPE $16;
27402     +    length LABEL $100;
27403     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
27405     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
27406     +    TYPE = "GCLUSTER";
27407     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
27408     +    end;
27409     +    else do;
27410     +    TYPE= "ROOT";
27411     +    LABEL= _NAME_;
27412     +    end;
27413     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27414     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
27415     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27416     +    run;
27418     +proc sort data=&outnode;
27419     +     by _NAME_;
27420     +proc sort data=_tmp_GCLUSFREQ;
27421     +     by _NAME_;
27422     +run;
27424     +data  &outnode;
27425     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
27426     +     if COUNT=. then COUNT=1;
27427     +run;
27429     +proc datasets lib = work nolist;
27430     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
27431     +run;
27433     +quit;
27434     +%Mend MakeGClusterConstData;
27437     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
27439     +    data _gscoretmpds;
27440     +          set &indata;
27441     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
27442     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
27443     +          if _TYPE_ = 'STD' then _NAME_='STD';
27444     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
27445     +          DROP _TYPE_ _NCL_;
27446     +     run;
27448     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
27449     +        GCluster Component &globalclusid ------ */
27451     +    filename _file_  "&fileref";
27453     +    data _null_;
27454     +        %if &globalclusid eq 1 %then %do;
27455     +          FILE _file_;
27456     +        %end;
27457     +        %else %do;
27458     +          FILE _file_ MOD;
27459     +        %end;
27461     +        %let dsid = %sysfunc(open(work._gscoretmpds));
27462     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
27463     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
27465     +        %let k = 1;
27466     +        %do %while(^%sysfunc(fetch(&dsid)));
27467     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27468     +                %if &k > 2 %then %do;
27469     +                put "&_name = 0 ; ";
27470     +                %end;
27471     +                %let k = %eval(&k+1);
27472     +        %end;
27474     +        %let rc = %sysfunc(rewind(&dsid));
27475     +        %do i= 2 %to &nvar;
27476     +            %let _varname =  %sysfunc(varname(&dsid, &i));
27477     +            %do %while(^%sysfunc(fetch(&dsid)));
27478     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27479     +                %if &_name = MEAN %then
27480     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
27481     +                %else %if &_name = STD %then
27482     +                %let _std = %sysfunc(getvarn(&dsid, &i));
27483     +                %else %do;
27484     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
27485     +                      %let abscoeff = %sysfunc(abs(&coeff));
27486     +                          %if &abscoeff >  0 %then %do;
27487     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
27488     +                           %end;
27489     +                 %end;
27490     +             %end;
27491     +             %let rc = %sysfunc(rewind(&dsid));
27493     +         %end;
27495     +        %let dsid= %sysfunc(close(&dsid));
27496     +       run;
27499     +       proc datasets lib=work nolist;
27500     +            delete _gscoretmpds;
27501     +       run;
27502     +      quit;
27504     +%mend CreateGClusterScoreCode;
27507     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
27509     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
27510     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
27511     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
27512     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
27513     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
27514     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
27515     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
27516     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
27517     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
27518     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
27519     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
27520     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
27521     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
27522     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
27524     +   filename gsfile "&gscorecode";
27526     +   data &EM_USER_GSCORE;
27527     +             set &indata;
27528     +             %include  gsfile;
27529     +        keep
27530     +        %do i=1 %to &ngcluster;
27531     +         %let gcvarname = GC&i;
27532     +         &gcvarname
27533     +        %end;
27534     +     ;
27535     +   run;
27537     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
27538     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
27539     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
27540     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
27541     +    noprint  ;
27542     +     var
27543     +       %do i=1 %to &ngcluster;
27544     +         %let gcvarname = GC&i;
27545     +         &gcvarname
27546     +        %end;
27547     +   ;
27548     +   run;
27551     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
27552     +   data &EM_USER_GSCORECORRPLOT ;
27553     +        set &EM_USER_GSCORECORRPLOT;
27554     +        rename _X_ = X;
27555     +        rename _Y_ = Y;
27556     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
27557     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
27558     +   run;
27560     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
27562     +   data &EM_USER_GSCORETREE;
27563     +        length _NAME_ $32;
27564     +        length _LABEL_ $100;
27565     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
27566     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
27567     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
27568     +        end;else do;
27569     +         _LABEL_ = _NAME_;
27570     +        end;
27571     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
27573     +   run;
27575     +   quit;
27577     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
27580     +%macro score;
27582     +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
27583     +%include temp;
27584     +filename temp;
27586     +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
27588     +data _null_;
27589     +         set &EM_USER_VARCLUSMETA;
27590     +         if _N_=1 then
27591     +         call symput('_trainnum', TrainNum);
27592     +         call symput('_exportedcomp', ExportedComp);
27593     +         call symput('_hidevariable', HideVariable);
27594     +         call symput('_newTrain', NewTrain);
27595     +run;
27597     +%if &_newTrain = N %then %do;
27598     +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
27599     +        %else %let _exportedCompChanged = Y;
27600     +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
27601     +        %else  %let _hideVariableChanged = Y;
27602     +%end;
27603     +%else %do;
27604     +        %let _exportedCompChanged = Y;
27605     +        %let _hideVariableChanged = Y;
27606     +%end;
27608     +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
27609     +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
27610     +     %include temp;
27611     +     filename temp;
27612     +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
27613     +%end;
27614     +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
27615     +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
27616     +     %include temp;
27617     +     filename temp;
27618     +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
27619     +%end;
27621     +  /* store  current property values */
27622     + data &EM_USER_VARCLUSMETA;
27623     +       set &EM_USER_VARCLUSMETA;
27624     +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
27625     +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
27626     + run;
27628     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
27632     +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
27633     +     proc sort data =&indata;
27634     +              by Cluster RsqRatio Type;
27635     +     run;
27636     +     /*----------------------------------------------------------------------
27637     +      The Type variabe is used becuse the variable need to be selected
27638     +        instead of Cluster component when only one variable is in the cluster
27639     +     +-----------------------------------------------------------------------*/
27641     +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
27642     +         data &indata;
27643     +              set &indata; by cluster;
27644     +              if first.Cluster then Selected = 'YES';
27645     +              else Selected = 'NO';
27646     +         run;
27647     +         quit;
27648     +    %end;
27649     +    %else %do;
27650     +         data &indata(drop = _var _varchange);
27651     +              set &indata; retain _var 0; by Cluster;
27652     +             if first.Cluster then  _varchange = 0;
27653     +                 else _varchange =1;
27654     +             if _var ne _varchange then  Selected  = 'YES';
27655     +             else Selected = 'NO';
27656     +             if last.cluster then  _var = 0;
27657     +             else _var = _varchange;
27658     +         run;
27659     +         quit;
27660     +    %end;
27661     +%mend ChangeVariableSelectionFlag;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS8.VarClus2_VARCLUSMETA;
MPRINT(SCORE):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(SCORE):   call symput('_exportedcomp', ExportedComp);
MPRINT(SCORE):   call symput('_hidevariable', HideVariable);
MPRINT(SCORE):   call symput('_newTrain', NewTrain);
MPRINT(SCORE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      30:26   
NOTE: There were 1 observations read from the data set EMWS8.VARCLUS2_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
27664     +%macro score1(ExportedCompChanged=,
27665     +              HideVariableChanged=);
27667     +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
27668     +   %if &ExportedCompChanged = Y %then %do;
27669     +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
27670     +   %end;
27671     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
27673     +%mend score1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE1):  ;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   proc sort data =EMWS8.VarClus2_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster RsqRatio Type;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 18 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(CHANGEVARIABLESELECTIONFLAG):   data EMWS8.VarClus2_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   set EMWS8.VarClus2_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by cluster;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if first.Cluster then Selected = 'YES';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else Selected = 'NO';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS2_OUTRSQUARE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CHANGEVARIABLESELECTIONFLAG):   quit;
MPRINT(SCORE1):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   FILE X;
MPRINT(MAKEDELTACODE):   set EMWS8.VarClus2_OUTRSQUARE end=eof;
MPRINT(MAKEDELTACODE):   if _N_=1 then do;
MPRINT(MAKEDELTACODE):   put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
MPRINT(MAKEDELTACODE):   put "if upcase(strip(NAME)) in (";
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if Strip(upcase(Selected)) eq 'YES' then do;
MPRINT(MAKEDELTACODE):   string = '"'!!trim(left(VARIABLE))!!'"';
MPRINT(MAKEDELTACODE):   put string;
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if eof then do;
MPRINT(MAKEDELTACODE):   put ') then ROLE="INPUT";';
MPRINT(MAKEDELTACODE):   put 'else ROLE="REJECTED";';
MPRINT(MAKEDELTACODE):   put 'end;';
MPRINT(MAKEDELTACODE):   put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H18m,
      Create Time=03 de Março de 2016 08H24m

NOTE: 10 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 18 observations read from the data set EMWS8.VARCLUS2_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEDELTACODE):   quit;
MPRINT(MAKEDELTACODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEDELTACODE):   quit;
MPRINT(SCORE1):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS8.VarClus2_VARCLUSMETA;
MPRINT(SCORE):   set EMWS8.VarClus2_VARCLUSMETA;
MPRINT(SCORE):   ExportedComp = "CLUSTERCOMP";
MPRINT(SCORE):   HideVariable = "Y";
MPRINT(SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS8.VARCLUS2_VARCLUSMETA.
NOTE: The data set EMWS8.VARCLUS2_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: VarClus2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27675      
27676      *------------------------------------------------------------*;
27677      * End SCORE: VarClus2;
27678      *------------------------------------------------------------*;

27679      filename emflow "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27680      *------------------------------------------------------------*;
27681      * VarClus2: Scoring DATA data;
27682      *------------------------------------------------------------*;
27683      data EMWS8.VarClus2_TRAIN
27684      / view=EMWS8.VarClus2_TRAIN
27685      ;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus2_TRAIN / view=EMWS8.VarClus2_TRAIN ;
27686      set EMWS8.FIMPORT_train
27687      ;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_train ;
27688      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\EMFLOWSCORE.sas.
27689     +
27690     +/*-------------------------------------------------*/
27691     +/* Varclus Score Code Begins*/
27692     +/*-------------------------------------------------*/
27693     +
27694     +Clus1 = 0 ; /*---Cluster Component 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
27695     +Clus2 = 0 ; /*---Cluster Component 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
27696     +Clus3 = 0 ; /*---Cluster Component 3------ */
MPRINT(EM_DIAGRAM):   Clus3 = 0 ;
27697     +Clus4 = 0 ; /*---Cluster Component 4------ */
MPRINT(EM_DIAGRAM):   Clus4 = 0 ;
27698     +Clus1 = Clus1+0.16853847727666 * (CatPurchase - 57.9127930892636)/18.2753236237683;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.16853847727666 * (CatPurchase - 57.9127930892636)/18.2753236237683;
27699     +Clus2 = Clus2+-0.35737916956447 * (Clothes - 50.9707939119703)/23.3752615035019;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+-0.35737916956447 * (Clothes - 50.9707939119703)/23.3752615035019;
27700     +Clus3 = Clus3+0.688350968544 * (Dt_Customer - 19548.2266556972)/200.159559924324;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+0.688350968544 * (Dt_Customer - 19548.2266556972)/200.159559924324;
27701     +Clus1 = Clus1+0.17093166707841 * (Frq - 20.0300287947346)/10.9571332328441;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.17093166707841 * (Frq - 20.0300287947346)/10.9571332328441;
27702     +Clus2 = Clus2+0.29213783342326 * (HouseKeeping - 6.89099136157959)/7.67568210426728;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.29213783342326 * (HouseKeeping - 6.89099136157959)/7.67568210426728;
27703     +Clus1 = Clus1+0.17610881807243 * (Income - 74062.8388728918)/28807.225833237;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.17610881807243 * (Income - 74062.8388728918)/28807.225833237;
27704     +Clus2 = Clus2+0.29458943450322 * (Kitchen - 6.95763060468942)/7.84832125249858;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.29458943450322 * (Kitchen - 6.95763060468942)/7.84832125249858;
27705     +Clus1 = Clus1+0.18064326182648 * (Mnt - 656.584385026738)/677.209798905056;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.18064326182648 * (Mnt - 656.584385026738)/677.209798905056;
27706     +Clus1 = Clus1+-0.16853847727666 * (NetPurchase - 42.0872069107363)/18.2753236237683;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.16853847727666 * (NetPurchase - 42.0872069107363)/18.2753236237683;
27707     +Clus3 = Clus3+0.688350968544 * (Rcn - 63.2385849444673)/70.0872519734524;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+0.688350968544 * (Rcn - 63.2385849444673)/70.0872519734524;
27708     +Clus1 = Clus1+0.10684546716932 * (Recomendation - 3.95845331139448)/1.14554132700342;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.10684546716932 * (Recomendation - 3.95845331139448)/1.14554132700342;
27709     +Clus4 = Clus4+1 * (SmallAppliances - 28.2509255450431)/12.607250762032;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+1 * (SmallAppliances - 28.2509255450431)/12.607250762032;
27710     +Clus2 = Clus2+0.28929048413862 * (Toys - 6.91402714932126)/7.88474151999434;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.28929048413862 * (Toys - 6.91402714932126)/7.88474151999434;
27711     +Clus1 = Clus1+-0.17544241218487 * (Year_Birth - 1966.74043603455)/17.0676843728417;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.17544241218487 * (Year_Birth - 1966.74043603455)/17.0676843728417;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27712      run;

NOTE: DATA STEP view saved on file EMWS8.VARCLUS2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
27713      quit;
27714      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
27716      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
27717      * VarClus2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * VarClus2: Computing metadata for TRAIN data;
27718      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.VARCLUS2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\VarClus2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.VarClus2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.VarClus2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.VarClus2_TRAIN out=WORK.M0XB_3H1 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XB_3H1;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XB_3H1(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XB_3H1;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XB_3H1;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2GAUJWX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1SZPF18(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GAUJWX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.FIMPORT_train noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.FIMPORT_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "VarClus2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if upcase(strip(NAME)) in ( "CLUS1" "CLUS2" "CLUS3" "CLUS4" ) then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE)) = "REJECTED" then delete ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.VARCLUS2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
