MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.51 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.51 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3J9BPP7 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3J9BPP7 new;
MPRINT(EM_DIAGRAM):   run;
602459     proc transpose data=EMWS8.Reg6_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg6_EMESTIMATE out=WORK.TEMPREG;
602460     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
602461     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG6_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602462     proc transpose data=EMWS8.Reg6_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg6_MAPDS out=WORK.TEMPREG2;
602463     var "PC_1"n--"Year_Birth"n;
MPRINT(EM_DIAGRAM):   var "PC_1"n--"Year_Birth"n;
602464     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG6_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

602465     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
602466     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
602467     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602468     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
602469     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
602470     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602471     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
602472     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
602473     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
602474     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
602475     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 16 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602476     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
602477     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
602478     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
602479     i=1;
MPRINT(EM_DIAGRAM):   i=1;
602480     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
602481     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
602482     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
602483     output;
MPRINT(EM_DIAGRAM):   output;
602484     end;
MPRINT(EM_DIAGRAM):   end;
602485     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 16 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602486     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
602487     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
602488     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set WORK.TEMPREG3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 16 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

602489     filename emflow
602489   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg6: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
602490     *------------------------------------------------------------*;
602491     * Reg6: Scoring DATA data;
602492     *------------------------------------------------------------*;
602493     data EMWS8.Reg6_TRAIN
602494     / view=EMWS8.Reg6_TRAIN
602495     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg6_TRAIN / view=EMWS8.Reg6_TRAIN ;
602496     set EMWS8.PRINCOMP_TRAIN
602497     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
602498     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas.
602499    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
602500    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
602501    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
602502    +
602503    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
602504    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
602505    +
602506    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
602507    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
602508    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
602509    +array REG6DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG6DRF [2] $12 _temporary_ ('1' '0' );
602510    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
602511    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
602512    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
602513    +ARRAY REG6DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG6DRU[2] _TEMPORARY_ (1 0);
602514    +
602515    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
602516    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
602517    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
602518    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
602519    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
602520    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
602521    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
602522    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
602523    +end;
MPRINT(EM_DIAGRAM):   end;
602524    +else do;
MPRINT(EM_DIAGRAM):   else do;
602525    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
602526    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
602527    +   end;
MPRINT(EM_DIAGRAM):   end;
602528    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
602529    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
602530    +   end;
MPRINT(EM_DIAGRAM):   end;
602531    +   else do;
MPRINT(EM_DIAGRAM):   else do;
602532    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
602533    +   end;
MPRINT(EM_DIAGRAM):   end;
602534    +end;
MPRINT(EM_DIAGRAM):   end;
602535    +
602536    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
602537    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
602538    +
602539    +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
602540    +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
602541    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602542    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602543    +end;
MPRINT(EM_DIAGRAM):   end;
602544    +
602545    +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
602546    +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
602547    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602548    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602549    +end;
MPRINT(EM_DIAGRAM):   end;
602550    +
602551    +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
602552    +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
602553    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602554    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602555    +end;
MPRINT(EM_DIAGRAM):   end;
602556    +
602557    +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
602558    +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
602559    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602560    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602561    +end;
MPRINT(EM_DIAGRAM):   end;
602562    +
602563    +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
602564    +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
602565    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602566    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602567    +end;
MPRINT(EM_DIAGRAM):   end;
602568    +
602569    +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
602570    +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
602571    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602572    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602573    +end;
MPRINT(EM_DIAGRAM):   end;
602574    +
602575    +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
602576    +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
602577    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602578    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602579    +end;
MPRINT(EM_DIAGRAM):   end;
602580    +
602581    +*** Check PC_17 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_17 for missing values ;
602582    +if missing( PC_17 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_17 ) then do;
602583    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602584    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602585    +end;
MPRINT(EM_DIAGRAM):   end;
602586    +
602587    +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
602588    +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
602589    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602590    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602591    +end;
MPRINT(EM_DIAGRAM):   end;
602592    +
602593    +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
602594    +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
602595    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602596    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602597    +end;
MPRINT(EM_DIAGRAM):   end;
602598    +
602599    +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
602600    +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
602601    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602602    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602603    +end;
MPRINT(EM_DIAGRAM):   end;
602604    +
602605    +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
602606    +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
602607    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602608    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602609    +end;
MPRINT(EM_DIAGRAM):   end;
602610    +
602611    +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
602612    +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
602613    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602614    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602615    +end;
MPRINT(EM_DIAGRAM):   end;
602616    +
602617    +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
602618    +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
602619    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602620    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602621    +end;
MPRINT(EM_DIAGRAM):   end;
602622    +
602623    +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
602624    +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
602625    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602626    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602627    +end;
MPRINT(EM_DIAGRAM):   end;
602628    +
602629    +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
602630    +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
602631    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602632    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602633    +end;
MPRINT(EM_DIAGRAM):   end;
602634    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
602635    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
602636    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
602637    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
602638    +   goto REG6DR1;
MPRINT(EM_DIAGRAM):   goto REG6DR1;
602639    +end;
MPRINT(EM_DIAGRAM):   end;
602640    +
602641    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
602642    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
602643    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
602644    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
602645    +
602646    +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
602647    +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
602648    +_LP0 = _LP0 + (    0.14665985306277 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.14665985306277 * _TEMP);
602649    +
602650    +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
602651    +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
602652    +_LP0 = _LP0 + (   -0.35651612022221 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35651612022221 * _TEMP);
602653    +
602654    +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
602655    +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
602656    +_LP0 = _LP0 + (    0.11710505973124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11710505973124 * _TEMP);
602657    +
602658    +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
602659    +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
602660    +_LP0 = _LP0 + (   -0.57051174532602 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.57051174532602 * _TEMP);
602661    +
602662    +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
602663    +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
602664    +_LP0 = _LP0 + (    0.23567907379008 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.23567907379008 * _TEMP);
602665    +
602666    +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
602667    +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
602668    +_LP0 = _LP0 + (   -0.14675379655714 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14675379655714 * _TEMP);
602669    +
602670    +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
602671    +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
602672    +_LP0 = _LP0 + (     0.1532794795638 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1532794795638 * _TEMP);
602673    +
602674    +***  Effect: PC_17 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_17 ;
602675    +_TEMP = PC_17 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_17 ;
602676    +_LP0 = _LP0 + (   -0.07671272127102 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07671272127102 * _TEMP);
602677    +
602678    +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
602679    +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
602680    +_LP0 = _LP0 + (   -0.27300360343978 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27300360343978 * _TEMP);
602681    +
602682    +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
602683    +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
602684    +_LP0 = _LP0 + (   -0.05542783391748 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05542783391748 * _TEMP);
602685    +
602686    +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
602687    +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
602688    +_LP0 = _LP0 + (    0.08005077750279 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08005077750279 * _TEMP);
602689    +
602690    +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
602691    +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
602692    +_LP0 = _LP0 + (   -0.19899666057506 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19899666057506 * _TEMP);
602693    +
602694    +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
602695    +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
602696    +_LP0 = _LP0 + (    0.09324100053548 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09324100053548 * _TEMP);
602697    +
602698    +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
602699    +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
602700    +_LP0 = _LP0 + (    0.07981617446529 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.07981617446529 * _TEMP);
602701    +
602702    +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
602703    +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
602704    +_LP0 = _LP0 + (    0.18032379734585 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18032379734585 * _TEMP);
602705    +
602706    +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
602707    +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
602708    +_LP0 = _LP0 + (    0.25568431676368 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.25568431676368 * _TEMP);
602709    +
602710    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
602711    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
602712    +_P0 = probnorm((   -1.53861846947625) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -1.53861846947625) + _LP0);
602713    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
602714    +
602715    +REG6DR1:
602716    +
602717    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG6DR1: *** Residuals;
602718    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
602719    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
602720    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
602721    +end;
MPRINT(EM_DIAGRAM):   end;
602722    +else do;
MPRINT(EM_DIAGRAM):   else do;
602723    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
602724    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
602725    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
602726    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
602727    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
602728    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
602729    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
602730    +   end;
MPRINT(EM_DIAGRAM):   end;
602731    +end;
MPRINT(EM_DIAGRAM):   end;
602732    +
602733    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
602734    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
602735    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
602736    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
602737    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
602738    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
602739    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
602740    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
602741    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
602742    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
602743    +end;
MPRINT(EM_DIAGRAM):   end;
602744    +I_DepVar = REG6DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG6DRF[_IY];
602745    +U_DepVar = REG6DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG6DRU[_IY];
602746    +
602747    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
602748    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
602749    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
602750     run;

NOTE: DATA STEP view saved on file EMWS8.REG6_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
602751     quit;
602752     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
602753     filename emflow
602753   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg6: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
602754     *------------------------------------------------------------*;
602755     * Reg6: Scoring VALIDATE data;
602756     *------------------------------------------------------------*;
602757     data EMWS8.Reg6_VALIDATE
602758     / view=EMWS8.Reg6_VALIDATE
602759     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg6_VALIDATE / view=EMWS8.Reg6_VALIDATE ;
602760     set EMWS8.PRINCOMP_VALIDATE
602761     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
602762     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg6\EMFLOWSCORE.sas.
602763    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
602764    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
602765    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
602766    +
602767    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
602768    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
602769    +
602770    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
602771    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
602772    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
602773    +array REG6DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG6DRF [2] $12 _temporary_ ('1' '0' );
602774    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
602775    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
602776    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
602777    +ARRAY REG6DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG6DRU[2] _TEMPORARY_ (1 0);
602778    +
602779    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
602780    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
602781    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
602782    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
602783    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
602784    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
602785    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
602786    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
602787    +end;
MPRINT(EM_DIAGRAM):   end;
602788    +else do;
MPRINT(EM_DIAGRAM):   else do;
602789    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
602790    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
602791    +   end;
MPRINT(EM_DIAGRAM):   end;
602792    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
602793    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
602794    +   end;
MPRINT(EM_DIAGRAM):   end;
602795    +   else do;
MPRINT(EM_DIAGRAM):   else do;
602796    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
602797    +   end;
MPRINT(EM_DIAGRAM):   end;
602798    +end;
MPRINT(EM_DIAGRAM):   end;
602799    +
602800    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
602801    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
602802    +
602803    +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
602804    +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
602805    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602806    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602807    +end;
MPRINT(EM_DIAGRAM):   end;
602808    +
602809    +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
602810    +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
602811    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602812    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602813    +end;
MPRINT(EM_DIAGRAM):   end;
602814    +
602815    +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
602816    +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
602817    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602818    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602819    +end;
MPRINT(EM_DIAGRAM):   end;
602820    +
602821    +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
602822    +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
602823    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602824    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602825    +end;
MPRINT(EM_DIAGRAM):   end;
602826    +
602827    +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
602828    +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
602829    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602830    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602831    +end;
MPRINT(EM_DIAGRAM):   end;
602832    +
602833    +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
602834    +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
602835    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602836    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602837    +end;
MPRINT(EM_DIAGRAM):   end;
602838    +
602839    +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
602840    +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
602841    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602842    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602843    +end;
MPRINT(EM_DIAGRAM):   end;
602844    +
602845    +*** Check PC_17 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_17 for missing values ;
602846    +if missing( PC_17 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_17 ) then do;
602847    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602848    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602849    +end;
MPRINT(EM_DIAGRAM):   end;
602850    +
602851    +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
602852    +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
602853    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602854    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602855    +end;
MPRINT(EM_DIAGRAM):   end;
602856    +
602857    +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
602858    +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
602859    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602860    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602861    +end;
MPRINT(EM_DIAGRAM):   end;
602862    +
602863    +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
602864    +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
602865    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602866    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602867    +end;
MPRINT(EM_DIAGRAM):   end;
602868    +
602869    +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
602870    +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
602871    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602872    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602873    +end;
MPRINT(EM_DIAGRAM):   end;
602874    +
602875    +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
602876    +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
602877    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602878    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602879    +end;
MPRINT(EM_DIAGRAM):   end;
602880    +
602881    +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
602882    +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
602883    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602884    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602885    +end;
MPRINT(EM_DIAGRAM):   end;
602886    +
602887    +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
602888    +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
602889    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602890    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602891    +end;
MPRINT(EM_DIAGRAM):   end;
602892    +
602893    +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
602894    +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
602895    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
602896    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
602897    +end;
MPRINT(EM_DIAGRAM):   end;
602898    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
602899    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
602900    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
602901    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
602902    +   goto REG6DR1;
MPRINT(EM_DIAGRAM):   goto REG6DR1;
602903    +end;
MPRINT(EM_DIAGRAM):   end;
602904    +
602905    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
602906    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
602907    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
602908    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
602909    +
602910    +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
602911    +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
602912    +_LP0 = _LP0 + (    0.14665985306277 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.14665985306277 * _TEMP);
602913    +
602914    +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
602915    +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
602916    +_LP0 = _LP0 + (   -0.35651612022221 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35651612022221 * _TEMP);
602917    +
602918    +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
602919    +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
602920    +_LP0 = _LP0 + (    0.11710505973124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11710505973124 * _TEMP);
602921    +
602922    +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
602923    +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
602924    +_LP0 = _LP0 + (   -0.57051174532602 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.57051174532602 * _TEMP);
602925    +
602926    +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
602927    +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
602928    +_LP0 = _LP0 + (    0.23567907379008 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.23567907379008 * _TEMP);
602929    +
602930    +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
602931    +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
602932    +_LP0 = _LP0 + (   -0.14675379655714 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14675379655714 * _TEMP);
602933    +
602934    +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
602935    +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
602936    +_LP0 = _LP0 + (     0.1532794795638 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1532794795638 * _TEMP);
602937    +
602938    +***  Effect: PC_17 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_17 ;
602939    +_TEMP = PC_17 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_17 ;
602940    +_LP0 = _LP0 + (   -0.07671272127102 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07671272127102 * _TEMP);
602941    +
602942    +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
602943    +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
602944    +_LP0 = _LP0 + (   -0.27300360343978 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27300360343978 * _TEMP);
602945    +
602946    +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
602947    +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
602948    +_LP0 = _LP0 + (   -0.05542783391748 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05542783391748 * _TEMP);
602949    +
602950    +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
602951    +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
602952    +_LP0 = _LP0 + (    0.08005077750279 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08005077750279 * _TEMP);
602953    +
602954    +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
602955    +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
602956    +_LP0 = _LP0 + (   -0.19899666057506 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19899666057506 * _TEMP);
602957    +
602958    +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
602959    +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
602960    +_LP0 = _LP0 + (    0.09324100053548 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09324100053548 * _TEMP);
602961    +
602962    +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
602963    +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
602964    +_LP0 = _LP0 + (    0.07981617446529 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.07981617446529 * _TEMP);
602965    +
602966    +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
602967    +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
602968    +_LP0 = _LP0 + (    0.18032379734585 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18032379734585 * _TEMP);
602969    +
602970    +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
602971    +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
602972    +_LP0 = _LP0 + (    0.25568431676368 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.25568431676368 * _TEMP);
602973    +
602974    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
602975    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
602976    +_P0 = probnorm((   -1.53861846947625) + _LP0);
MPRINT(EM_DIAGRAM):   _P0 = probnorm(( -1.53861846947625) + _LP0);
602977    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
602978    +
602979    +REG6DR1:
602980    +
602981    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG6DR1: *** Residuals;
602982    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
602983    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
602984    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
602985    +end;
MPRINT(EM_DIAGRAM):   end;
602986    +else do;
MPRINT(EM_DIAGRAM):   else do;
602987    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
602988    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
602989    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
602990    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
602991    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
602992    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
602993    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
602994    +   end;
MPRINT(EM_DIAGRAM):   end;
602995    +end;
MPRINT(EM_DIAGRAM):   end;
602996    +
602997    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
602998    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
602999    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
603000    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
603001    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
603002    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
603003    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
603004    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
603005    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
603006    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
603007    +end;
MPRINT(EM_DIAGRAM):   end;
603008    +I_DepVar = REG6DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG6DRF[_IY];
603009    +U_DepVar = REG6DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG6DRU[_IY];
603010    +
603011    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
603012    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
603013    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
603014     run;

NOTE: DATA STEP view saved on file EMWS8.REG6_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
603015     quit;
603016     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
603017     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
603018     * Reg6: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg6: Computing metadata for TRAIN data;
603019     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG6_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg6\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg6_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg6_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg6_TRAIN out=WORK.M1WQWN5N noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WQWN5N;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WQWN5N(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WQWN5N;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WQWN5N;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M09VL4FL NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08JM8HC(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   set WORK.M09VL4FL;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg6_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg6";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg6";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg6";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg6: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'PC_1' 'PC_10' 'PC_11' 'PC_13' 'PC_14' 'PC_15' 
'PC_16' 'PC_17' 'PC_2' 'PC_3' 'PC_4' 'PC_5' 'PC_6' 'PC_7' 'PC_8' 'PC_9' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg6: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
603355     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
603356     set EMWS8.Reg6_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg6_EMINFO;
603357     where DATA='Reg6' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg6' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
603358     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG6_EMINFO.
      WHERE (DATA='Reg6') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

603359     data EMWS8.Reg6_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg6_EMINFO;
603360     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
603361     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
603362     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG6_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
603366     run;
603367     data EMWS8.Reg6_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg6_EMINFO;
603368     set EMWS8.Reg6_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg6_EMINFO WORK.MODELTEMP_INFO;
603369     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG6_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG6_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

603370     proc sort data = EMWS8.Reg6_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg6_EMINFO NOTHREADS;
603371     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
603372     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG6_EMINFO.
NOTE: The data set EMWS8.REG6_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

603373     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
603374     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
603375     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

603376     proc sort data = EMWS8.Reg6_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg6_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
603377     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
603378     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG6_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

603379     data EMWS8.Reg6_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg6_EMINFO;
603380     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
603381     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
603382     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG6_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

603383     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
603384     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
603385     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
603386     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.REG6_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.REG6_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
