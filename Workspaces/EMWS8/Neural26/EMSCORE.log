MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.02 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.02 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2GU_2IF 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2GU_2IF new;
MPRINT(EM_DIAGRAM):   run;
1040502    data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
1040503    set EMWS8.Neural26_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_OUTKEY;
1040504    if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
1040505    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS8.NEURAL26_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1040506    filename emflow
1040506  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1040507    *------------------------------------------------------------*;
1040508    * Neural26: Scoring DATA data;
1040509    *------------------------------------------------------------*;
1040510    data EMWS8.Neural26_TRAIN
1040511    / view=EMWS8.Neural26_TRAIN
1040512    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_TRAIN / view=EMWS8.Neural26_TRAIN ;
1040513    set EMWS8.Varsel_TRAIN
1040514    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
1040515    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas.
1040516   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1040517   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1040518   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1040519   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1040520   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1040521   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1040522   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1040523   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1040524   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1040525   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1040526   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1040527   +LENGTH _WARN_ $4
1040528   +      F_DepVar  $ 12
1040529   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1040530   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1040531   +
1040532   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1040533   +
1040534   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1040535   +
1040536   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1040537   +
1040538   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1040539   +
1040540   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1040541   +
1040542   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1040543   +
1040544   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1040545   +
1040546   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1040547   +
1040548   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1040549   +
1040550   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1040551   +
1040552   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1040553   +
1040554   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1040555   +
1040556   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1040557   +
1040558   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1040559   +
1040560   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1040561   +
1040562   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1040563   +
1040564   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1040565   +
1040566   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1040567   +
1040568   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1040569   +
1040570   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1040571   +
1040572   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1040573   +
1040574   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1040575   +
1040576   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1040577   +
1040578   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1040579   +
1040580   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1040581   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1040582   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1040583   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1040584   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1040585   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1040586   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040587   +end;
MPRINT(EM_DIAGRAM):   end;
1040588   +else do;
MPRINT(EM_DIAGRAM):   else do;
1040589   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1040590   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1040591   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1040592   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1040593   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1040594   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1040595   +   end;
MPRINT(EM_DIAGRAM):   end;
1040596   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1040597   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1040598   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1040599   +   end;
MPRINT(EM_DIAGRAM):   end;
1040600   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1040601   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1040602   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1040603   +   end;
MPRINT(EM_DIAGRAM):   end;
1040604   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1040605   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1040606   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1040607   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1040608   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040609   +   end;
MPRINT(EM_DIAGRAM):   end;
1040610   +end;
MPRINT(EM_DIAGRAM):   end;
1040611   +
1040612   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040613   +*** Checking missing input Interval
1040614   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1040615   +
1040616   +IF NMISS(
1040617   +   AcceptedCmpTotal ,
1040618   +   Frq ,
1040619   +   Income ,
1040620   +   Mnt ,
1040621   +   MntGoldProds ,
1040622   +   MntMeatProducts ,
1040623   +   MntWines ,
1040624   +   NumDistPurchases ,
1040625   +   RFMstat ,
1040626   +   RMntFrq ,
1040627   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1040628   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1040629   +
1040630   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040631   +END;
MPRINT(EM_DIAGRAM):   END;
1040632   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040633   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1040634   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040635   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1040636   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1040637   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1040638   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1040639   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1040640   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1040641   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1040642   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1040643   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1040644   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1040645   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1040646   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1040647   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1040648   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1040649   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1040650   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1040651   +END;
MPRINT(EM_DIAGRAM):   END;
1040652   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1040653   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1040654   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1040655   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1040656   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1040657   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1040658   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1040659   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1040660   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1040661   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1040662   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1040663   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1040664   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1040665   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1040666   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1040667   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1040668   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1040669   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1040670   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1040671   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1040672   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1040673   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1040674   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1040675   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1040676   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1040677   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1040678   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1040679   +END;
MPRINT(EM_DIAGRAM):   END;
1040680   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040681   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
1040682   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040683   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040684   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1040685   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040686   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1040687   +   H11  =    -0.52455774235062 * S_AcceptedCmpTotal  +      0.8466329583809 *
1040688   +        S_Frq  +    -0.24140635088555 * S_Income  +     1.10423984303161 *
1040689   +        S_Mnt  +    -0.01619058875438 * S_MntGoldProds
1040690   +          +    -0.55263908764573 * S_MntMeatProducts
1040691   +          +    -0.70001086687566 * S_MntWines  +    -0.13954000532733 *
1040692   +        S_NumDistPurchases  +     0.13318250375153 * S_RFMstat
1040693   +          +      0.4272420646455 * S_RMntFrq  +     0.41719267652064 *
1040694   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.52455774235062 * S_AcceptedCmpTotal + 0.8466329583809 * S_Frq + 
-0.24140635088555 * S_Income + 1.10423984303161 * S_Mnt + -0.01619058875438 * S_MntGoldProds + 
-0.55263908764573 * S_MntMeatProducts + -0.70001086687566 * S_MntWines + -0.13954000532733 * 
S_NumDistPurchases + 0.13318250375153 * S_RFMstat + 0.4272420646455 * S_RMntFrq + 
0.41719267652064 * S_Recency ;
1040695   +   H12  =    -0.04686202753184 * S_AcceptedCmpTotal  +     1.54159677165215 *
1040696   +        S_Frq  +      1.5876209259654 * S_Income  +      0.5309695784835 *
1040697   +        S_Mnt  +    -0.52971373734216 * S_MntGoldProds
1040698   +          +     0.06735454992171 * S_MntMeatProducts
1040699   +          +    -0.65753196206072 * S_MntWines  +    -0.43284750594408 *
1040700   +        S_NumDistPurchases  +    -0.15176413476147 * S_RFMstat
1040701   +          +    -0.45476834326399 * S_RMntFrq  +     0.41776804290571 *
1040702   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.04686202753184 * S_AcceptedCmpTotal + 1.54159677165215 * S_Frq 
+ 1.5876209259654 * S_Income + 0.5309695784835 * S_Mnt + -0.52971373734216 * S_MntGoldProds + 
0.06735454992171 * S_MntMeatProducts + -0.65753196206072 * S_MntWines + -0.43284750594408 * 
S_NumDistPurchases + -0.15176413476147 * S_RFMstat + -0.45476834326399 * S_RMntFrq + 
0.41776804290571 * S_Recency ;
1040703   +   H13  =    -0.31352262917412 * S_AcceptedCmpTotal  +     1.63883520018095 *
1040704   +        S_Frq  +     0.02249756771349 * S_Income  +     0.21682603962115 *
1040705   +        S_Mnt  +     0.15589923965689 * S_MntGoldProds
1040706   +          +    -3.43308711980096 * S_MntMeatProducts
1040707   +          +    -0.25180710956094 * S_MntWines  +    -1.36606037284233 *
1040708   +        S_NumDistPurchases  +    -0.42313397988951 * S_RFMstat
1040709   +          +     0.07406816799464 * S_RMntFrq  +     0.32607822998847 *
1040710   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.31352262917412 * S_AcceptedCmpTotal + 1.63883520018095 * S_Frq 
+ 0.02249756771349 * S_Income + 0.21682603962115 * S_Mnt + 0.15589923965689 * S_MntGoldProds + 
-3.43308711980096 * S_MntMeatProducts + -0.25180710956094 * S_MntWines + -1.36606037284233 * 
S_NumDistPurchases + -0.42313397988951 * S_RFMstat + 0.07406816799464 * S_RMntFrq + 
0.32607822998847 * S_Recency ;
1040711   +   H14  =     0.40033548790491 * S_AcceptedCmpTotal  +    -0.40354500664934 *
1040712   +        S_Frq  +      0.3774879421468 * S_Income  +    -0.16410506362553 *
1040713   +        S_Mnt  +     0.02885736564162 * S_MntGoldProds
1040714   +          +     0.71381843077774 * S_MntMeatProducts
1040715   +          +    -0.26487063623892 * S_MntWines  +     1.18188766928145 *
1040716   +        S_NumDistPurchases  +      0.1157647927608 * S_RFMstat
1040717   +          +    -0.05680377377798 * S_RMntFrq  +    -0.89452100436419 *
1040718   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.40033548790491 * S_AcceptedCmpTotal + -0.40354500664934 * S_Frq 
+ 0.3774879421468 * S_Income + -0.16410506362553 * S_Mnt + 0.02885736564162 * S_MntGoldProds + 
0.71381843077774 * S_MntMeatProducts + -0.26487063623892 * S_MntWines + 1.18188766928145 * 
S_NumDistPurchases + 0.1157647927608 * S_RFMstat + -0.05680377377798 * S_RMntFrq + 
-0.89452100436419 * S_Recency ;
1040719   +   H11  = H11  +    -0.53031970918814 * G_Marital_Status0
1040720   +          +    -0.23001488541689 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.53031970918814 * G_Marital_Status0 + -0.23001488541689 * 
G_Marital_Status1 ;
1040721   +   H12  = H12  +     0.29542224963064 * G_Marital_Status0
1040722   +          +    -0.13806446525096 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.29542224963064 * G_Marital_Status0 + -0.13806446525096 * 
G_Marital_Status1 ;
1040723   +   H13  = H13  +    -0.03108243750652 * G_Marital_Status0
1040724   +          +     0.08210849129934 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.03108243750652 * G_Marital_Status0 + 0.08210849129934 * 
G_Marital_Status1 ;
1040725   +   H14  = H14  +     0.42709681519893 * G_Marital_Status0
1040726   +          +     0.09450701323627 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.42709681519893 * G_Marital_Status0 + 0.09450701323627 * 
G_Marital_Status1 ;
1040727   +   H11  =    -0.80237558754999 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.80237558754999 + H11 ;
1040728   +   H12  =     0.47909013828426 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.47909013828426 + H12 ;
1040729   +   H13  =    -1.98531714916096 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.98531714916096 + H13 ;
1040730   +   H14  =    -3.14128712464503 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -3.14128712464503 + H14 ;
1040731   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1040732   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1040733   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1040734   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1040735   +END;
MPRINT(EM_DIAGRAM):   END;
1040736   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1040737   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1040738   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1040739   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1040740   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1040741   +END;
MPRINT(EM_DIAGRAM):   END;
1040742   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040743   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1040744   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040745   +
1040746   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1040747   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1040748   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1040749   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1040750   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1040751   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1040752   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1040753   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1040754   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1040755   +end;
MPRINT(EM_DIAGRAM):   end;
1040756   +else do;
MPRINT(EM_DIAGRAM):   else do;
1040757   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1040758   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1040759   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1040760   +   end;
MPRINT(EM_DIAGRAM):   end;
1040761   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1040762   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1040763   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1040764   +   end;
MPRINT(EM_DIAGRAM):   end;
1040765   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1040766   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1040767   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1040768   +   end;
MPRINT(EM_DIAGRAM):   end;
1040769   +end;
MPRINT(EM_DIAGRAM):   end;
1040770   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1040771   +   P_DepVar1  =    -2.49130347768925 * H11  +    -2.38718075390418 * H12
1040772   +          +    -5.92002796763835 * H13  +     4.95923742700541 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.49130347768925 * H11 + -2.38718075390418 * H12 + 
-5.92002796763835 * H13 + 4.95923742700541 * H14 ;
1040773   +   P_DepVar1  =    -2.59807662162616 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.59807662162616 + P_DepVar1 ;
1040774   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1040775   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1040776   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1040777   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1040778   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1040779   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1040780   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1040781   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1040782   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1040783   +END;
MPRINT(EM_DIAGRAM):   END;
1040784   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1040785   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1040786   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1040787   +END;
MPRINT(EM_DIAGRAM):   END;
1040788   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1040789   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1040790   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1040791   +END;
MPRINT(EM_DIAGRAM):   END;
1040792   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1040793   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1040794   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1040795   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1040796   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1040797   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1040798   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1040799   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040800   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1040801   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040802   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1040803   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1040804   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1040805   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1040806   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1040807   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1040808   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1040809   +END;
MPRINT(EM_DIAGRAM):   END;
1040810   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1040811   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1040812   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1040813   +drop
1040814   +H11
1040815   +H12
1040816   +H13
1040817   +H14
1040818   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
1040819   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1040820    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL26_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1040821    quit;
1040822    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1040823    filename emflow
1040823  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1040824    *------------------------------------------------------------*;
1040825    * Neural26: Scoring VALIDATE data;
1040826    *------------------------------------------------------------*;
1040827    data EMWS8.Neural26_VALIDATE
1040828    / view=EMWS8.Neural26_VALIDATE
1040829    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_VALIDATE / view=EMWS8.Neural26_VALIDATE ;
1040830    set EMWS8.Varsel_VALIDATE
1040831    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
1040832    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas.
1040833   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1040834   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1040835   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1040836   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1040837   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1040838   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1040839   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1040840   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1040841   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1040842   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1040843   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1040844   +LENGTH _WARN_ $4
1040845   +      F_DepVar  $ 12
1040846   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1040847   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1040848   +
1040849   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1040850   +
1040851   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1040852   +
1040853   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1040854   +
1040855   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1040856   +
1040857   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1040858   +
1040859   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1040860   +
1040861   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1040862   +
1040863   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1040864   +
1040865   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1040866   +
1040867   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1040868   +
1040869   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1040870   +
1040871   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1040872   +
1040873   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1040874   +
1040875   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1040876   +
1040877   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1040878   +
1040879   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1040880   +
1040881   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1040882   +
1040883   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1040884   +
1040885   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1040886   +
1040887   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1040888   +
1040889   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1040890   +
1040891   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1040892   +
1040893   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1040894   +
1040895   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1040896   +
1040897   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1040898   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1040899   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1040900   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1040901   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1040902   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1040903   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040904   +end;
MPRINT(EM_DIAGRAM):   end;
1040905   +else do;
MPRINT(EM_DIAGRAM):   else do;
1040906   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1040907   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1040908   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1040909   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1040910   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1040911   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1040912   +   end;
MPRINT(EM_DIAGRAM):   end;
1040913   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1040914   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1040915   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1040916   +   end;
MPRINT(EM_DIAGRAM):   end;
1040917   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1040918   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1040919   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1040920   +   end;
MPRINT(EM_DIAGRAM):   end;
1040921   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1040922   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1040923   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1040924   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1040925   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040926   +   end;
MPRINT(EM_DIAGRAM):   end;
1040927   +end;
MPRINT(EM_DIAGRAM):   end;
1040928   +
1040929   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040930   +*** Checking missing input Interval
1040931   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1040932   +
1040933   +IF NMISS(
1040934   +   AcceptedCmpTotal ,
1040935   +   Frq ,
1040936   +   Income ,
1040937   +   Mnt ,
1040938   +   MntGoldProds ,
1040939   +   MntMeatProducts ,
1040940   +   MntWines ,
1040941   +   NumDistPurchases ,
1040942   +   RFMstat ,
1040943   +   RMntFrq ,
1040944   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1040945   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1040946   +
1040947   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1040948   +END;
MPRINT(EM_DIAGRAM):   END;
1040949   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040950   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1040951   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040952   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1040953   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1040954   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1040955   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1040956   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1040957   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1040958   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1040959   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1040960   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1040961   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1040962   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1040963   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1040964   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1040965   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1040966   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1040967   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1040968   +END;
MPRINT(EM_DIAGRAM):   END;
1040969   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1040970   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1040971   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1040972   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1040973   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1040974   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1040975   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1040976   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1040977   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1040978   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1040979   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1040980   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1040981   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1040982   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1040983   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1040984   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1040985   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1040986   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1040987   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1040988   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1040989   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1040990   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1040991   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1040992   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1040993   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1040994   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1040995   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1040996   +END;
MPRINT(EM_DIAGRAM):   END;
1040997   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1040998   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
1040999   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041000   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041001   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1041002   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041003   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1041004   +   H11  =    -0.52455774235062 * S_AcceptedCmpTotal  +      0.8466329583809 *
1041005   +        S_Frq  +    -0.24140635088555 * S_Income  +     1.10423984303161 *
1041006   +        S_Mnt  +    -0.01619058875438 * S_MntGoldProds
1041007   +          +    -0.55263908764573 * S_MntMeatProducts
1041008   +          +    -0.70001086687566 * S_MntWines  +    -0.13954000532733 *
1041009   +        S_NumDistPurchases  +     0.13318250375153 * S_RFMstat
1041010   +          +      0.4272420646455 * S_RMntFrq  +     0.41719267652064 *
1041011   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.52455774235062 * S_AcceptedCmpTotal + 0.8466329583809 * S_Frq + 
-0.24140635088555 * S_Income + 1.10423984303161 * S_Mnt + -0.01619058875438 * S_MntGoldProds + 
-0.55263908764573 * S_MntMeatProducts + -0.70001086687566 * S_MntWines + -0.13954000532733 * 
S_NumDistPurchases + 0.13318250375153 * S_RFMstat + 0.4272420646455 * S_RMntFrq + 
0.41719267652064 * S_Recency ;
1041012   +   H12  =    -0.04686202753184 * S_AcceptedCmpTotal  +     1.54159677165215 *
1041013   +        S_Frq  +      1.5876209259654 * S_Income  +      0.5309695784835 *
1041014   +        S_Mnt  +    -0.52971373734216 * S_MntGoldProds
1041015   +          +     0.06735454992171 * S_MntMeatProducts
1041016   +          +    -0.65753196206072 * S_MntWines  +    -0.43284750594408 *
1041017   +        S_NumDistPurchases  +    -0.15176413476147 * S_RFMstat
1041018   +          +    -0.45476834326399 * S_RMntFrq  +     0.41776804290571 *
1041019   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.04686202753184 * S_AcceptedCmpTotal + 1.54159677165215 * S_Frq 
+ 1.5876209259654 * S_Income + 0.5309695784835 * S_Mnt + -0.52971373734216 * S_MntGoldProds + 
0.06735454992171 * S_MntMeatProducts + -0.65753196206072 * S_MntWines + -0.43284750594408 * 
S_NumDistPurchases + -0.15176413476147 * S_RFMstat + -0.45476834326399 * S_RMntFrq + 
0.41776804290571 * S_Recency ;
1041020   +   H13  =    -0.31352262917412 * S_AcceptedCmpTotal  +     1.63883520018095 *
1041021   +        S_Frq  +     0.02249756771349 * S_Income  +     0.21682603962115 *
1041022   +        S_Mnt  +     0.15589923965689 * S_MntGoldProds
1041023   +          +    -3.43308711980096 * S_MntMeatProducts
1041024   +          +    -0.25180710956094 * S_MntWines  +    -1.36606037284233 *
1041025   +        S_NumDistPurchases  +    -0.42313397988951 * S_RFMstat
1041026   +          +     0.07406816799464 * S_RMntFrq  +     0.32607822998847 *
1041027   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.31352262917412 * S_AcceptedCmpTotal + 1.63883520018095 * S_Frq 
+ 0.02249756771349 * S_Income + 0.21682603962115 * S_Mnt + 0.15589923965689 * S_MntGoldProds + 
-3.43308711980096 * S_MntMeatProducts + -0.25180710956094 * S_MntWines + -1.36606037284233 * 
S_NumDistPurchases + -0.42313397988951 * S_RFMstat + 0.07406816799464 * S_RMntFrq + 
0.32607822998847 * S_Recency ;
1041028   +   H14  =     0.40033548790491 * S_AcceptedCmpTotal  +    -0.40354500664934 *
1041029   +        S_Frq  +      0.3774879421468 * S_Income  +    -0.16410506362553 *
1041030   +        S_Mnt  +     0.02885736564162 * S_MntGoldProds
1041031   +          +     0.71381843077774 * S_MntMeatProducts
1041032   +          +    -0.26487063623892 * S_MntWines  +     1.18188766928145 *
1041033   +        S_NumDistPurchases  +      0.1157647927608 * S_RFMstat
1041034   +          +    -0.05680377377798 * S_RMntFrq  +    -0.89452100436419 *
1041035   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.40033548790491 * S_AcceptedCmpTotal + -0.40354500664934 * S_Frq 
+ 0.3774879421468 * S_Income + -0.16410506362553 * S_Mnt + 0.02885736564162 * S_MntGoldProds + 
0.71381843077774 * S_MntMeatProducts + -0.26487063623892 * S_MntWines + 1.18188766928145 * 
S_NumDistPurchases + 0.1157647927608 * S_RFMstat + -0.05680377377798 * S_RMntFrq + 
-0.89452100436419 * S_Recency ;
1041036   +   H11  = H11  +    -0.53031970918814 * G_Marital_Status0
1041037   +          +    -0.23001488541689 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.53031970918814 * G_Marital_Status0 + -0.23001488541689 * 
G_Marital_Status1 ;
1041038   +   H12  = H12  +     0.29542224963064 * G_Marital_Status0
1041039   +          +    -0.13806446525096 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.29542224963064 * G_Marital_Status0 + -0.13806446525096 * 
G_Marital_Status1 ;
1041040   +   H13  = H13  +    -0.03108243750652 * G_Marital_Status0
1041041   +          +     0.08210849129934 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.03108243750652 * G_Marital_Status0 + 0.08210849129934 * 
G_Marital_Status1 ;
1041042   +   H14  = H14  +     0.42709681519893 * G_Marital_Status0
1041043   +          +     0.09450701323627 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.42709681519893 * G_Marital_Status0 + 0.09450701323627 * 
G_Marital_Status1 ;
1041044   +   H11  =    -0.80237558754999 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.80237558754999 + H11 ;
1041045   +   H12  =     0.47909013828426 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.47909013828426 + H12 ;
1041046   +   H13  =    -1.98531714916096 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.98531714916096 + H13 ;
1041047   +   H14  =    -3.14128712464503 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -3.14128712464503 + H14 ;
1041048   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1041049   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1041050   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1041051   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1041052   +END;
MPRINT(EM_DIAGRAM):   END;
1041053   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1041054   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1041055   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1041056   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1041057   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1041058   +END;
MPRINT(EM_DIAGRAM):   END;
1041059   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041060   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1041061   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041062   +
1041063   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1041064   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1041065   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1041066   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1041067   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1041068   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1041069   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1041070   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1041071   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1041072   +end;
MPRINT(EM_DIAGRAM):   end;
1041073   +else do;
MPRINT(EM_DIAGRAM):   else do;
1041074   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1041075   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1041076   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1041077   +   end;
MPRINT(EM_DIAGRAM):   end;
1041078   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1041079   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1041080   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1041081   +   end;
MPRINT(EM_DIAGRAM):   end;
1041082   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1041083   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1041084   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1041085   +   end;
MPRINT(EM_DIAGRAM):   end;
1041086   +end;
MPRINT(EM_DIAGRAM):   end;
1041087   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1041088   +   P_DepVar1  =    -2.49130347768925 * H11  +    -2.38718075390418 * H12
1041089   +          +    -5.92002796763835 * H13  +     4.95923742700541 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.49130347768925 * H11 + -2.38718075390418 * H12 + 
-5.92002796763835 * H13 + 4.95923742700541 * H14 ;
1041090   +   P_DepVar1  =    -2.59807662162616 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.59807662162616 + P_DepVar1 ;
1041091   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1041092   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1041093   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1041094   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1041095   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1041096   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1041097   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1041098   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1041099   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1041100   +END;
MPRINT(EM_DIAGRAM):   END;
1041101   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1041102   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1041103   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1041104   +END;
MPRINT(EM_DIAGRAM):   END;
1041105   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1041106   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1041107   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1041108   +END;
MPRINT(EM_DIAGRAM):   END;
1041109   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1041110   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1041111   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1041112   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1041113   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1041114   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1041115   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1041116   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041117   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1041118   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1041119   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1041120   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1041121   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1041122   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1041123   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1041124   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1041125   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1041126   +END;
MPRINT(EM_DIAGRAM):   END;
1041127   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1041128   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1041129   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1041130   +drop
1041131   +H11
1041132   +H12
1041133   +H13
1041134   +H14
1041135   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
1041136   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1041137    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL26_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1041138    quit;
1041139    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1041140    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1041141    * Neural26: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural26: Computing metadata for TRAIN data;
1041142    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL26_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural26_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural26_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural26_TRAIN out=WORK.M1MXCY1G noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MXCY1G;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MXCY1G(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MXCY1G;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MXCY1G;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2VTFJLV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GFC_MS(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VTFJLV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural26";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural26";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1041454    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1041455    set EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_EMINFO;
1041456    where DATA='Neural26' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural26' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
1041457    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL26_EMINFO.
      WHERE (DATA='Neural26') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1041458    data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural26_EMINFO;
1041459    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1041460    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1041461    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
1041465    run;
1041466    data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_EMINFO;
1041467    set EMWS8.Neural26_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_EMINFO WORK.MODELTEMP_INFO;
1041468    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1041469    proc sort data = EMWS8.Neural26_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural26_EMINFO NOTHREADS;
1041470    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1041471    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1041472    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1041473    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1041474    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1041475    proc sort data = EMWS8.Neural26_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural26_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1041476    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1041477    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1041478    data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_EMINFO;
1041479    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1041480    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1041481    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1041482    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1041483    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1041484    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1041485    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL26_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL26_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
