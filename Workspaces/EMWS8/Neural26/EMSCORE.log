MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.08 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                16.08 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O16S_V7T 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O16S_V7T new;
MPRINT(EM_DIAGRAM):   run;
386434     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
386435     set EMWS8.Neural26_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_OUTKEY;
386436     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
386437     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS8.NEURAL26_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

386438     filename emflow
386438   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
386439     *------------------------------------------------------------*;
386440     * Neural26: Scoring DATA data;
386441     *------------------------------------------------------------*;
386442     data EMWS8.Neural26_TRAIN
386443     / view=EMWS8.Neural26_TRAIN
386444     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_TRAIN / view=EMWS8.Neural26_TRAIN ;
386445     set EMWS8.Varsel_TRAIN
386446     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
386447     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas.
386448    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
386449    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
386450    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
386451    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
386452    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
386453    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
386454    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
386455    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
386456    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
386457    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
386458    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
386459    +LENGTH _WARN_ $4
386460    +      F_DepVar  $ 12
386461    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
386462    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
386463    +
386464    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
386465    +
386466    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
386467    +
386468    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
386469    +
386470    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
386471    +
386472    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
386473    +
386474    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
386475    +
386476    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
386477    +
386478    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
386479    +
386480    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
386481    +
386482    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
386483    +
386484    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
386485    +
386486    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
386487    +
386488    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
386489    +
386490    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
386491    +
386492    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
386493    +
386494    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
386495    +
386496    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
386497    +
386498    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386499    +*** Checking missing input Interval
386500    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
386501    +
386502    +IF NMISS(
386503    +   AcceptedCmpTotal ,
386504    +   Mnt ,
386505    +   MntMeatProducts ,
386506    +   NumCatalogPurchases ,
386507    +   RFMstat ,
386508    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
386509    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
386510    +
386511    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
386512    +END;
MPRINT(EM_DIAGRAM):   END;
386513    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386514    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
386515    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386516    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386517    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
386518    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
386519    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
386520    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
386521    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
386522    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
386523    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
386524    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
386525    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
386526    +END;
MPRINT(EM_DIAGRAM):   END;
386527    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386528    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
386529    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
386530    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
386531    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
386532    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
386533    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
386534    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
386535    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
386536    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
386537    +   ELSE S_NumCatalogPurchases
386538    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
386539    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
386540    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
386541    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
386542    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
386543    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
386544    +END;
MPRINT(EM_DIAGRAM):   END;
386545    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386546    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
386547    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386548    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386549    +   H11  =    -1.32887013080833 * S_AcceptedCmpTotal  +    -0.50724376529143 *
386550    +        S_Mnt  +    -2.31207466584574 * S_MntMeatProducts
386551    +          +     1.66204248243123 * S_NumCatalogPurchases
386552    +          +     0.91139639573876 * S_RFMstat  +     0.90117904323306 *
386553    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -1.32887013080833 * S_AcceptedCmpTotal + -0.50724376529143 * S_Mnt 
+ -2.31207466584574 * S_MntMeatProducts + 1.66204248243123 * S_NumCatalogPurchases + 
0.91139639573876 * S_RFMstat + 0.90117904323306 * S_Recency ;
386554    +   H12  =     0.19935482825628 * S_AcceptedCmpTotal  +    -0.41999012494844 *
386555    +        S_Mnt  +     0.13935276620704 * S_MntMeatProducts
386556    +          +     0.10517411385518 * S_NumCatalogPurchases
386557    +          +     0.14575951060102 * S_RFMstat  +    -0.15368379656243 *
386558    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.19935482825628 * S_AcceptedCmpTotal + -0.41999012494844 * S_Mnt 
+ 0.13935276620704 * S_MntMeatProducts + 0.10517411385518 * S_NumCatalogPurchases + 
0.14575951060102 * S_RFMstat + -0.15368379656243 * S_Recency ;
386559    +   H13  =     0.01141683133411 * S_AcceptedCmpTotal  +    -2.39103128626158 *
386560    +        S_Mnt  +     0.66165610064629 * S_MntMeatProducts
386561    +          +     0.31802299478786 * S_NumCatalogPurchases
386562    +          +     0.39893999522481 * S_RFMstat  +     0.78553071824557 *
386563    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.01141683133411 * S_AcceptedCmpTotal + -2.39103128626158 * S_Mnt 
+ 0.66165610064629 * S_MntMeatProducts + 0.31802299478786 * S_NumCatalogPurchases + 
0.39893999522481 * S_RFMstat + 0.78553071824557 * S_Recency ;
386564    +   H14  =     0.75104460836638 * S_AcceptedCmpTotal  +     5.36653803723733 *
386565    +        S_Mnt  +    -2.68720832425549 * S_MntMeatProducts
386566    +          +    -3.68298354669909 * S_NumCatalogPurchases
386567    +          +     1.81688480033748 * S_RFMstat  +    -0.02480268849013 *
386568    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.75104460836638 * S_AcceptedCmpTotal + 5.36653803723733 * S_Mnt + 
-2.68720832425549 * S_MntMeatProducts + -3.68298354669909 * S_NumCatalogPurchases + 
1.81688480033748 * S_RFMstat + -0.02480268849013 * S_Recency ;
386569    +   H11  =    -0.78582930788527 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.78582930788527 + H11 ;
386570    +   H12  =    -0.25553954476433 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.25553954476433 + H12 ;
386571    +   H13  =     2.57612623043965 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 2.57612623043965 + H13 ;
386572    +   H14  =     1.40078346828163 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.40078346828163 + H14 ;
386573    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
386574    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
386575    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
386576    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
386577    +END;
MPRINT(EM_DIAGRAM):   END;
386578    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386579    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
386580    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
386581    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
386582    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
386583    +END;
MPRINT(EM_DIAGRAM):   END;
386584    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386585    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
386586    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386587    +
386588    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
386589    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
386590    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
386591    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
386592    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
386593    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
386594    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
386595    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
386596    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
386597    +end;
MPRINT(EM_DIAGRAM):   end;
386598    +else do;
MPRINT(EM_DIAGRAM):   else do;
386599    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
386600    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
386601    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
386602    +   end;
MPRINT(EM_DIAGRAM):   end;
386603    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
386604    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
386605    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
386606    +   end;
MPRINT(EM_DIAGRAM):   end;
386607    +   else do;
MPRINT(EM_DIAGRAM):   else do;
386608    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
386609    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
386610    +   end;
MPRINT(EM_DIAGRAM):   end;
386611    +end;
MPRINT(EM_DIAGRAM):   end;
386612    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386613    +   P_DepVar1  =    -1.28159406177936 * H11  +     7.81822801591576 * H12
386614    +          +    -2.51597268980748 * H13  +    -1.53058362951093 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.28159406177936 * H11 + 7.81822801591576 * H12 + 
-2.51597268980748 * H13 + -1.53058362951093 * H14 ;
386615    +   P_DepVar1  =       1.105036414978 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.105036414978 + P_DepVar1 ;
386616    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
386617    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
386618    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
386619    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
386620    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
386621    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
386622    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
386623    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
386624    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
386625    +END;
MPRINT(EM_DIAGRAM):   END;
386626    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386627    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
386628    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
386629    +END;
MPRINT(EM_DIAGRAM):   END;
386630    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
386631    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
386632    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
386633    +END;
MPRINT(EM_DIAGRAM):   END;
386634    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
386635    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
386636    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
386637    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
386638    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
386639    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
386640    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
386641    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386642    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
386643    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386644    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
386645    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
386646    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
386647    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
386648    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
386649    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
386650    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
386651    +END;
MPRINT(EM_DIAGRAM):   END;
386652    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
386653    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
386654    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
386655    +drop
386656    +H11
386657    +H12
386658    +H13
386659    +H14
386660    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
386661    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
386662     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL26_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
386663     quit;
386664     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
386665     filename emflow
386665   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
386666     *------------------------------------------------------------*;
386667     * Neural26: Scoring VALIDATE data;
386668     *------------------------------------------------------------*;
386669     data EMWS8.Neural26_VALIDATE
386670     / view=EMWS8.Neural26_VALIDATE
386671     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_VALIDATE / view=EMWS8.Neural26_VALIDATE ;
386672     set EMWS8.Varsel_VALIDATE
386673     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
386674     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural26\EMFLOWSCORE.sas.
386675    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
386676    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
386677    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
386678    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
386679    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
386680    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
386681    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
386682    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
386683    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
386684    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
386685    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
386686    +LENGTH _WARN_ $4
386687    +      F_DepVar  $ 12
386688    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
386689    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
386690    +
386691    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
386692    +
386693    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
386694    +
386695    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
386696    +
386697    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
386698    +
386699    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
386700    +
386701    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
386702    +
386703    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
386704    +
386705    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
386706    +
386707    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
386708    +
386709    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
386710    +
386711    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
386712    +
386713    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
386714    +
386715    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
386716    +
386717    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
386718    +
386719    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
386720    +
386721    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
386722    +
386723    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
386724    +
386725    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386726    +*** Checking missing input Interval
386727    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
386728    +
386729    +IF NMISS(
386730    +   AcceptedCmpTotal ,
386731    +   Mnt ,
386732    +   MntMeatProducts ,
386733    +   NumCatalogPurchases ,
386734    +   RFMstat ,
386735    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
386736    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
386737    +
386738    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
386739    +END;
MPRINT(EM_DIAGRAM):   END;
386740    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386741    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
386742    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386743    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386744    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
386745    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
386746    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
386747    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
386748    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
386749    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
386750    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
386751    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
386752    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
386753    +END;
MPRINT(EM_DIAGRAM):   END;
386754    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386755    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
386756    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
386757    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
386758    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
386759    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
386760    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
386761    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
386762    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
386763    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
386764    +   ELSE S_NumCatalogPurchases
386765    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
386766    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
386767    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
386768    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
386769    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
386770    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
386771    +END;
MPRINT(EM_DIAGRAM):   END;
386772    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386773    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
386774    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386775    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386776    +   H11  =    -1.32887013080833 * S_AcceptedCmpTotal  +    -0.50724376529143 *
386777    +        S_Mnt  +    -2.31207466584574 * S_MntMeatProducts
386778    +          +     1.66204248243123 * S_NumCatalogPurchases
386779    +          +     0.91139639573876 * S_RFMstat  +     0.90117904323306 *
386780    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -1.32887013080833 * S_AcceptedCmpTotal + -0.50724376529143 * S_Mnt 
+ -2.31207466584574 * S_MntMeatProducts + 1.66204248243123 * S_NumCatalogPurchases + 
0.91139639573876 * S_RFMstat + 0.90117904323306 * S_Recency ;
386781    +   H12  =     0.19935482825628 * S_AcceptedCmpTotal  +    -0.41999012494844 *
386782    +        S_Mnt  +     0.13935276620704 * S_MntMeatProducts
386783    +          +     0.10517411385518 * S_NumCatalogPurchases
386784    +          +     0.14575951060102 * S_RFMstat  +    -0.15368379656243 *
386785    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.19935482825628 * S_AcceptedCmpTotal + -0.41999012494844 * S_Mnt 
+ 0.13935276620704 * S_MntMeatProducts + 0.10517411385518 * S_NumCatalogPurchases + 
0.14575951060102 * S_RFMstat + -0.15368379656243 * S_Recency ;
386786    +   H13  =     0.01141683133411 * S_AcceptedCmpTotal  +    -2.39103128626158 *
386787    +        S_Mnt  +     0.66165610064629 * S_MntMeatProducts
386788    +          +     0.31802299478786 * S_NumCatalogPurchases
386789    +          +     0.39893999522481 * S_RFMstat  +     0.78553071824557 *
386790    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.01141683133411 * S_AcceptedCmpTotal + -2.39103128626158 * S_Mnt 
+ 0.66165610064629 * S_MntMeatProducts + 0.31802299478786 * S_NumCatalogPurchases + 
0.39893999522481 * S_RFMstat + 0.78553071824557 * S_Recency ;
386791    +   H14  =     0.75104460836638 * S_AcceptedCmpTotal  +     5.36653803723733 *
386792    +        S_Mnt  +    -2.68720832425549 * S_MntMeatProducts
386793    +          +    -3.68298354669909 * S_NumCatalogPurchases
386794    +          +     1.81688480033748 * S_RFMstat  +    -0.02480268849013 *
386795    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.75104460836638 * S_AcceptedCmpTotal + 5.36653803723733 * S_Mnt + 
-2.68720832425549 * S_MntMeatProducts + -3.68298354669909 * S_NumCatalogPurchases + 
1.81688480033748 * S_RFMstat + -0.02480268849013 * S_Recency ;
386796    +   H11  =    -0.78582930788527 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.78582930788527 + H11 ;
386797    +   H12  =    -0.25553954476433 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.25553954476433 + H12 ;
386798    +   H13  =     2.57612623043965 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 2.57612623043965 + H13 ;
386799    +   H14  =     1.40078346828163 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.40078346828163 + H14 ;
386800    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
386801    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
386802    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
386803    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
386804    +END;
MPRINT(EM_DIAGRAM):   END;
386805    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386806    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
386807    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
386808    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
386809    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
386810    +END;
MPRINT(EM_DIAGRAM):   END;
386811    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386812    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
386813    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386814    +
386815    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
386816    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
386817    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
386818    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
386819    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
386820    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
386821    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
386822    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
386823    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
386824    +end;
MPRINT(EM_DIAGRAM):   end;
386825    +else do;
MPRINT(EM_DIAGRAM):   else do;
386826    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
386827    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
386828    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
386829    +   end;
MPRINT(EM_DIAGRAM):   end;
386830    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
386831    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
386832    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
386833    +   end;
MPRINT(EM_DIAGRAM):   end;
386834    +   else do;
MPRINT(EM_DIAGRAM):   else do;
386835    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
386836    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
386837    +   end;
MPRINT(EM_DIAGRAM):   end;
386838    +end;
MPRINT(EM_DIAGRAM):   end;
386839    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
386840    +   P_DepVar1  =    -1.28159406177936 * H11  +     7.81822801591576 * H12
386841    +          +    -2.51597268980748 * H13  +    -1.53058362951093 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.28159406177936 * H11 + 7.81822801591576 * H12 + 
-2.51597268980748 * H13 + -1.53058362951093 * H14 ;
386842    +   P_DepVar1  =       1.105036414978 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.105036414978 + P_DepVar1 ;
386843    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
386844    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
386845    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
386846    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
386847    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
386848    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
386849    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
386850    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
386851    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
386852    +END;
MPRINT(EM_DIAGRAM):   END;
386853    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
386854    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
386855    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
386856    +END;
MPRINT(EM_DIAGRAM):   END;
386857    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
386858    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
386859    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
386860    +END;
MPRINT(EM_DIAGRAM):   END;
386861    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
386862    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
386863    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
386864    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
386865    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
386866    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
386867    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
386868    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386869    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
386870    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
386871    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
386872    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
386873    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
386874    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
386875    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
386876    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
386877    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
386878    +END;
MPRINT(EM_DIAGRAM):   END;
386879    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
386880    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
386881    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
386882    +drop
386883    +H11
386884    +H12
386885    +H13
386886    +H14
386887    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
386888    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
386889     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL26_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
386890     quit;
386891     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
386892     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
386893     * Neural26: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural26: Computing metadata for TRAIN data;
386894     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL26_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural26\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural26_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural26_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural26_TRAIN out=WORK.M1M8LWWZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M8LWWZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M8LWWZ(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M8LWWZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M8LWWZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2W1NF42 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YBXQBS(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   set WORK.M2W1NF42;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural26";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural26";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural26";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural26: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
387206     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
387207     set EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_EMINFO;
387208     where DATA='Neural26' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural26' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
387209     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL26_EMINFO.
      WHERE (DATA='Neural26') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

387210     data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural26_EMINFO;
387211     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
387212     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
387213     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
387217     run;
387218     data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_EMINFO;
387219     set EMWS8.Neural26_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural26_EMINFO WORK.MODELTEMP_INFO;
387220     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

387221     proc sort data = EMWS8.Neural26_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural26_EMINFO NOTHREADS;
387222     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
387223     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

387224     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
387225     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
387226     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

387227     proc sort data = EMWS8.Neural26_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural26_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
387228     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
387229     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL26_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

387230     data EMWS8.Neural26_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural26_EMINFO;
387231     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
387232     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
387233     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL26_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

387234     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
387235     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
387236     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
387237     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL26_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL26_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
