MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H21m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                05 de Março de 2016
Time:                11H21m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O15CW_WH "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O15CW_WH new;
MPRINT(EM_DIAGRAM):   run;
22159      %let EMEXCEPTIONSTRING=;
22160      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22161      * SCORE: Repl;
MPRINT(EM_DIAGRAM):   * SCORE: Repl;
22162      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22163      %let EM_ACTION = SCORE;
22164      %let syscc = 0;
22165      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
22166      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
22167     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
22168     +   filename macFile catalog 'work.emutil.macro.source';
22169     +   %let _METAOBS = 0;
22171     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
22172     +                   or (&metadata eq ) %then %do;
22173     +       %goto doend;
22174     +   %end;
22175     +   data _null_;
22176     +      length _STRING_ $80;
22177     +      retain _STRING_;
22178     +      set &metadata end=eof;
22179     +      file macFile;
22180     +      %if %nrbquote(&where) ne %then %do;
22181     +          %let whereClause = where (%nrbquote(&where));
22182     +          %unquote(&whereClause);
22183     +      %end;
22184     +      if _N_=1 then do;
22185     +         string = "%"!!"macro &name;";
22186     +         put string;
22187     +      end;
22188     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
22189     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22190     +         if eof then do;
22191     +            put _STRING_;
22192     +            string = "%"!!"mend &name;";
22193     +            put string;
22194     +            %if (&nummacro ne ) %then %do;
22195     +                string = strip(put(_N_, best.));
22196     +                put "%" "global &nummacro;";
22197     +                put "%" "let &nummacro = " string ";";
22198     +                call symput('_METAOBS', string);
22199     +            %end;
22200     +         end;
22201     +      end;
22202     +      else do;
22203     +         put _STRING_;
22204     +         _string_ = TRIM(&key);
22205     +         if eof then do;
22206     +            put _STRING_;
22207     +            string = "%"!!"mend &name;";
22208     +            put string;
22209     +        end;
22210     +      end;
22211     +      if eof then do;
22212     +         string = strip(put(_N_, best.));
22213     +         call symput('_METAOBS', string);
22214     +         %if (&nummacro ne ) %then %do;
22215     +             put "%" "global &nummacro;";
22216     +             put "%" "let &nummacro = " string ";";
22217     +         %end;
22218     +      end;
22219     +   run;
22221     +   %doend:
22222     +   %if ^&_METAOBS %then %do;
22223     +       data _null_;
22224     +          file macFile;
22225     +          put "%" "macro &name;";
22226     +          put "%" "mend &name;";
22227     +          %if (&nummacro ne ) %then %do;
22228     +              put "%" "global &nummacro;";
22229     +              put "%" "let &nummacro = 0;";
22230     +          %end;
22231     +      run;
22232     +   %end;
22233     +   %inc macFile;
22234     +   filename macFile;
22235     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
22236      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
22237       %macro main;
22238      
22239         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
22240         %include temp;
22241         filename temp;
22242      
22243         %if %upcase(&EM_ACTION) = CREATE %then %do;
22244      
22245             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
22246             %include temp;
22247             filename temp;
22248             %create;
22249         %end;
22250         %else
22251         %if %upcase(&EM_ACTION) = TRAIN %then %do;
22252      
22253             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
22254             %include temp;
22255             filename temp;
22256             %train;
22257         %end;
22258         %else
22259         %if %upcase(&EM_ACTION) = SCORE %then %do;
22260      
22261             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
22262             %include temp;
22263             filename temp;
22264             %score;
22265         %end;
22266         %if %upcase(&EM_ACTION) = REPORT %then %do;
22267      
22268             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
22269             %include temp;
22270             filename temp;
22271             %report;
22272         %end;
22273         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
22274             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
22275             %include temp;
22276             filename temp;
22277             %em_replace_openoutclass;
22278         %end;
22279         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
22280             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
22281             %include temp;
22282             filename temp;
22283             %em_replace_closeoutclass;
22284         %end;
22285      %mend main;
22286      
22287      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
22288     +%macro SetProperties;
22289     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
22290     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
22291     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
22292     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
22293     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
22294     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
22295     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
22296     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
22297     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
22298     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
22300     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
22302     +%macro makeLevelData(data=, outclass=);
22303     +   data REPLACE_MODE;
22304     +      set &OUTCLASS;
22305     +      by NAME;
22306     +      if first.name then do;
22307     +         MODEC    = CRAW;
22308     +         MODEN    = NRAW;
22309     +         NORMMODE = LEVEL;
22310     +         output;
22311     +      end;
22312     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
22313     +   run;
22315     +   proc sort data=&EM_DATA_VARIABLESET;
22316     +      by NAME;
22317     +   run;
22318     +   data &data;
22319     +      length UNKWOWNDEFAULT $8;
22320     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
22321     +      by NAME;
22322     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
22323     +      if _a then output;
22324     +   run;
22325     +   proc datasets lib=work nolist;
22326     +      delete REPLACE_MODE;
22327     +   run;
22328     +   quit;
22329     +%mend makeLevelData;
22331     +%macro makeNewNames(limitDs=, classValue=, className=);
22332     +     %let varname = invarname;
22333     +     %let newname = outname;
22334     +     proc sort data=&classValue out=&varname nodupkey;
22335     +        by NAME;
22336     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
22337     +     run;
22338     +     %let classnum=0;
22339     +     %let dsid = %sysfunc(open(&varname));
22340     +     %if &dsid>0 %then %do;
22341     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
22342     +         %let dsid = %sysfunc(close(&dsid));
22343     +     %end;
22345     +     %let varnum=0;
22346     +     %let dsid = %sysfunc(open(&LimitDs));
22347     +     %if &dsid>0 %then %do;
22348     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
22349     +         %let dsid = %sysfunc(close(&dsid));
22350     +     %end;
22352     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
22353     +         %let lib    = %scan(&classname, 1, .);
22354     +         %let member = %scan(&classname, 2, .);
22355     +          proc datasets lib=&lib nolist;
22356     +             delete &member;
22357     +          run;
22358     +          quit;
22359     +         %goto doendmn;
22360     +     %end;
22362     +     data &varname;
22363     +        set
22364     +        %if &classnum %then %do;
22365     +            &varname(keep=NAME)
22366     +        %end;
22367     +        %if &varnum %then %do;
22368     +            &limitDs(keep=NAME)
22369     +        %end;
22370     +        ;
22371     +     run;
22372     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
22373     +        names NAME;
22374     +        prefix REP_;
22375     +     run;
22376     +     proc sort data=&newname;
22377     +        by NAME;
22378     +     run;
22380     +     /* Merge the new names with the limits data set */
22381     +     %if %sysfunc(exist(&limitDs)) %then %do;
22382     +         data &limitDs;
22383     +            merge &newname &limitDs(in=a);
22384     +            by NAME;
22385     +            if a then output;
22386     +         run;
22388     +         %let lib    = %scan(&limitDs, 1, .);
22389     +         %let member = %scan(&limitDs, 2, .);
22390     +          proc datasets lib=&lib nolist;
22391     +             modify &member;
22392     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
22393     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
22394     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
22395     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
22396     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
22397     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
22398     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
22399     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
22400     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
22401     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
22402     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
22403     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
22404     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
22405     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
22406     +         run;
22407     +         quit;
22408     +     %end;
22410     +     /* Merge the new names with the Class Value data set */
22411     +     %if %sysfunc(exist(&classValue)) %then %do;
22412     +         data length;
22413     +            retain newlen 0;
22414     +            set &classValue;
22415     +            by NAME;
22416     +            if type eq 'C' then do;
22417     +               if first.name then do;
22418     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
22419     +                     newlen = max(length, length(strip(replace_value)));
22420     +                  else
22421     +                     newlen = length;
22422     +               end;
22423     +               else do;
22424     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
22425     +                     newlen = max(newlen, length(strip(replace_value)));
22426     +               end;
22427     +            end;
22428     +            else newlen = length;
22429     +            len=length;
22430     +            if last.name then output;
22431     +            keep name len newlen role format type label mlevel;
22432     +         run;
22433     +         data &className;
22434     +            length rformat formatroot $32;
22435     +            merge &newname(in=a) length(in=b);
22436     +            by NAME;
22437     +            length=len;
22438     +            if newlen > len then do;
22439     +               if type eq 'C' and format ne '' then do;
22440     +                  rformat = strip(reverse(format));
22441     +                  do while(indexc(rformat, '.0123456789')=1);
22442     +                     rformat = substr(rformat, 2);
22443     +                  end;
22444     +                  formatroot= upcase(reverse(rformat));
22445     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
22446     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
22447     +                  end;
22448     +               end;
22449     +               length = newlen;
22450     +            end;
22451     +            if a and b then output;
22452     +            KEEP name newname role format mlevel type label length;
22453     +         run;
22454     +     %end;
22456     +     proc datasets lib=work nolist;
22457     +        delete length &varname &newname;
22458     +     run;
22459     +     quit;
22461     +     %doendmn:
22463     +%mend makeNewNames;
22465     +%macro makeVarDeltaCode(LimitDs=);
22466     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
22468     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
22469     +     data _null_;
22470     +        set &LimitDs end=eof;
22471     +        length string $400;
22472     +        file _F1;
22473     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
22474     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
22475     +        %end;
22476     +        %else %do;
22477     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
22478     +            string = '   ROLE="REJECTED";';                         put string;
22479     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
22480     +            string = 'end;';                                        put string;
22481     +        %end;
22482     +        put 'else';
22483     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
22484     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
22485     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
22486     +        put      'end;';
22487     +        if ^eof then
22488     +           put 'else';
22489     +   run;
22490     +   filename _F1;
22492     +    %doendd:
22493     +%mend makeVarDeltaCode;
22495     +%macro makeVarScoreCode(LimitDs=, File=);
22496     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
22498     +     filename sFile "&file";
22499     +     data &LimitDs;
22500     +        set &LimitDs end=eof;
22501     +        length REPLACEMETHODUSED $8 string $400;
22502     +        file sFile;
22503     +        put'* ;';
22504     +        put'* Variable: ' name ';';
22505     +        put '* ;';
22506     +        if strip(label) = '' then label = name;
22507     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
22508     +        put string;
22509     +        put newname '=' name ';';
22510     +        REPLACEMETHODUSED = REPLACEMETHOD;
22511     +        if REPLACEMETHOD = 'DEFAULT' then
22512     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
22513     +                REPLACEMETHODUSED = 'COMPUTED';
22514     +            %end;
22515     +            %else
22516     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
22517     +                REPLACEMETHODUSED = 'MISSING';
22518     +            %end;
22519     +            %else %do;
22520     +                REPLACEMETHODUSED = 'MANUAL';
22521     +            %end;
22523     +        put 'if ' name ' eq . then ' newname  '= . ;';
22524     +        if LowerLimit ne . then do;
22525     +           select(REPLACEMETHODUSED);
22526     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
22527     +              when('MISSING')  REPLACEMINUSED = .;
22528     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
22529     +              otherwise;
22530     +           end;
22531     +           put 'else';
22532     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
22533     +        end;
22534     +        if upperLimit ne . then do;
22535     +           select(REPLACEMETHODUSED);
22536     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
22537     +              when('MISSING')  REPLACEMAXUSED = .;
22538     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
22539     +              otherwise;
22540     +           end;
22541     +           put 'else';
22542     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
22543     +        end;
22544     +        drop string;
22545     +    run;
22546     +    filename sfile;
22547     +    %doendm:
22548     +%mend makeVarScoreCode;
22551     +%macro makeUnknownOptCode(Folder=, Data=);
22552     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
22554     +    %let dsid = %sysfunc(open(&data));
22555     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
22556     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
22558     +    %let oldname=;
22559     +    %do %while(^%sysfunc(fetch(&dsid)));
22560     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
22561     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
22563     +        %if &name ne &oldname %then %do;
22564     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
22565     +            data _null_;
22566     +               set &Data end=eof;
22567     +               where NAME ="&name";
22568     +               length string $400;
22569     +               length newlevel replaceLevel $400;
22570     +               retain string missingFlag;
22571     +               file _F1;
22572     +               if _N_=1 then do;
22573     +                  put '*;';
22574     +                  if format ne '' then do;
22575     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
22576     +                     put string;
22577     +                     put 'if ^(_UFORMAT200 in(';
22578     +                  end;
22579     +                  else do;
22580     +                     if type eq 'C' then do;
22581     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
22582     +                        put string;
22583     +                        put 'if ^(_UFORMAT200 in(';
22584     +                     end;
22585     +                     else
22586     +                        put 'if (';
22587     +                  end;
22588     +                  string='';
22589     +                  missingFlag = 0;
22590     +               end;
22592     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
22593     +                  if format ne '' or type eq 'C' then do;
22594     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
22595     +                     if strip(newLevel) = '' then missingFlag = 1;
22596     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
22597     +                        if string='' then
22598     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
22599     +                        else
22600     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
22601     +                     end;
22602     +                     else do;
22603     +                        put string;
22604     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
22605     +                     end;
22606     +                  end;
22607     +                  else do;
22608     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
22609     +                     put string;
22610     +                  end;
22611     +                  newlevel = ' ';
22612     +               end;
22613     +               else do;
22614     +                  if format ne '' or type eq 'C' then do;
22615     +                     put string;
22616     +                     if ^missingFlag then
22617     +                        string = ', "" )) then ';
22618     +                     else
22619     +                        string = ')) then ';
22620     +                  end;
22621     +                  else
22622     +                     string = strip(name)!!' ne . ) then ';
22623     +                  put string;
22625     +                 select(REPLACE_VALUE);
22626     +                 when('_MODE_') do;
22627     +                    if type eq 'C' then
22628     +                       replaceLevel = NORMMODE;
22629     +                    else
22630     +                       replaceLevel =strip(put(MODEN,BEST.));
22631     +                 end;
22632     +                 when('_MISSING_') do;
22633     +                    if type eq 'C' then replaceLevel = '';
22634     +                    else replaceLevel = '.';
22635     +                 end;
22636     +                 when('_DEFAULT_') do;
22637     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
22638     +                        if type eq 'C' then
22639     +                           replaceLevel = NORMMODE;
22640     +                        else
22641     +                           replaceLevel = strip(put(MODEN,BEST.));
22642     +                    %end;
22643     +                    %else %do;
22644     +                        if type eq 'C' then replaceLevel = '';
22645     +                         else replaceLevel = '.';
22646     +                    %end;
22647     +                  end;
22648     +                  when('') do;
22649     +                  end;
22650     +                  otherwise do;
22651     +                     if type eq 'C' then replaceLevel= replace_Value;
22652     +                     else replaceLevel = replace_Value;
22653     +                  end;
22654     +               end;
22655     +               if type eq 'C' then do;
22656     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
22657     +               end;
22658     +               else do;
22659     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
22660     +               end;
22661     +               put string;
22662     +            end;
22664     +           run;
22665     +           filename _F1;
22666     +           proc datasets lib=work nolist;
22667     +              delete _temp;
22668     +           run;
22669     +           quit;
22671     +           %let oldname = &name;
22672     +        %end;
22673     +    %end;
22674     +    %let dsid = %sysfunc(close(&dsid));
22676     +    %doendu:
22677     +%mend makeUnknownOptCode;
22679     +%macro makeUnknownCode(ScoreFile=, Data=);
22680     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
22682     +   filename _F1 "&ScoreFile" MOD;
22683     +   data _null_;
22684     +      set &Data;
22685     +      length string $400;
22686     +      length newlevel replaceLevel $200;
22687     +      retain string missingFlag;
22688     +      file _F1;
22689     +      by NAME;
22691     +      if _N_=1 then do;
22692     +         put '* ;';
22693     +         put '* Replace Unknown Class Levels ;';
22694     +         put '* ;';
22695     +         put 'length _UFORMAT200 $200;';
22696     +         put 'drop   _UFORMAT200;';
22697     +         put '_UFORMAT200 = " ";';
22698     +      end;
22700     +      if first.name then do;
22701     +         missingFlag = 0;
22702     +         put '*;';
22704     +         if format ne '' then do;
22705     +            call symput('UFormatFlag', '1');
22706     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
22707     +            put string;
22708     +            put 'if ^(_UFORMAT200 in(';
22709     +         end;
22710     +         else do;
22711     +            if type eq 'C' then do;
22712     +               call symput('UFormatFlag', '1');
22713     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
22714     +               put string;
22715     +               put 'if ^(_UFORMAT200 in(';
22716     +            end;
22717     +            else
22718     +               put 'if (';
22719     +         end;
22720     +         string='';
22721     +      end;
22723     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
22724     +        if format ne '' or type eq 'C' then do;
22725     +           newlevel = tranwrd(strip(LEVEL),'"','""');
22726     +           if strip(newLevel) = '' then missingFlag = 1;
22727     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
22728     +              if string='' then
22729     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
22730     +              else
22731     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
22732     +           end;
22733     +           else do;
22734     +              put string;
22735     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
22736     +           end;
22737     +        end;
22738     +        else do;
22739     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
22740     +           put string;
22741     +        end;
22742     +        newlevel = ' ';
22743     +     end;
22744     +     else do;
22745     +        if format ne '' or type eq 'C' then do;
22746     +           put string;
22747     +           if ^missingFlag then
22748     +              string = ', "" )) then ';
22749     +           else
22750     +              string = ')) then ';
22751     +        end;
22752     +        else
22753     +           string = strip(name)!!' ne . ) then ';
22754     +        put string;
22756     +        select(REPLACE_VALUE);
22757     +           when('_MODE_') do;
22758     +              if type eq 'C' then
22759     +                 replaceLevel = NORMMODE;
22760     +              else
22761     +                 replaceLevel =strip(put(MODEN,BEST.));
22762     +           end;
22763     +           when('_MISSING_') do;
22764     +              if type eq 'C' then replaceLevel = '';
22765     +              else replaceLevel = '.';
22766     +           end;
22767     +           when('_DEFAULT_') do;
22768     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
22769     +                  if type eq 'C' then
22770     +                     replaceLevel = NORMMODE;
22771     +                  else
22772     +                     replaceLevel = strip(put(MODEN,BEST.));
22773     +              %end;
22774     +              %else %do;
22775     +                  if type eq 'C' then replaceLevel = '';
22776     +                  else replaceLevel = '.';
22777     +              %end;
22778     +           end;
22779     +           when('') do;
22780     +           end;
22781     +           otherwise do;
22782     +               if type eq 'C' then replaceLevel= replace_Value;
22783     +               else replaceLevel = replace_Value;
22784     +           end;
22785     +        end;
22786     +        if type eq 'C' then do;
22787     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
22788     +        end;
22789     +        else do;
22790     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
22791     +        end;
22792     +        put string;
22793     +     end;
22795     +     run;
22796     +     filename _F1;
22797     +    %doendm:
22798     +%mend makeUnknownCode;
22800     +%macro makeReplaceCode(ScoreFile=, Data=);
22801     +   filename _F1 "&ScoreFile"  MOD;
22802     +   data _null_;
22803     +      length string $400;
22804     +      set &data end=eof;
22805     +      file _F1;
22806     +      by NAME;
22807     +      if _N_=1 then do;
22808     +         put '   ';
22809     +         put '* ;';
22810     +         put '* Replace Specific Class Levels ;';
22811     +         put '* ;';
22812     +         put 'length _UFormat200 $200;';
22813     +         put 'drop   _UFORMAT200;';
22814     +         put '_UFORMAT200 = " ";';
22815     +      end;
22816     +      if first.name then do;
22817     +         put '* ;';
22818     +         string = '* Variable: '!!strip(NAME)!!';';
22819     +         put string;
22820     +         put '* ;';
22821     +         if format ne '' then do;
22822     +            call symput('UFormatFlag', '1');
22823     +            string = "_UFORMAT200 = strip("; put string;
22824     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
22825     +            put string;
22826     +         end;
22827     +         else
22828     +           if type eq 'C' then do;
22829     +              call symput('UFormatFlag', '1');
22830     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
22831     +              put string;
22832     +           end;
22833     +      end;
22834     +      if ^first.name then
22835     +         put 'else';
22836     +      if format ne '' then do;
22837     +         string = tranwrd(strip(LEVEL),'"','""');
22838     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22839     +         put string;
22840     +      end;
22841     +      else do;
22842     +         if type eq 'N' then do;
22843     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
22844     +            put string;
22845     +         end;
22846     +         else do;
22847     +            string = tranwrd(strip(craw),'"','""');
22848     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22849     +            put string;
22850     +         end;
22851     +      end;
22852     +      string = strip(newname)!!'=';
22853     +      if type eq 'C' then do;
22854     +         if upcase(replace_value) eq '_MISSING_' or
22855     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
22856     +         else
22857     +           if upcase(replace_value) eq '_MODE_' or
22858     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
22859     +            then replace_Value =modec;
22860     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
22861     +      end;
22862     +      else do;
22863     +         if upcase(replace_value) eq '_MISSING_' or
22864     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
22865     +         else
22866     +           if upcase(replace_value) eq '_MODE_' or
22867     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
22868     +                  replace_Value =strip(put(moden, BEST.));
22870     +         string = strip(string)!!''!!strip(replace_value)!!';';
22871     +      end;
22872     +      put string;
22873     +    run;
22874     +    filename _F1;
22876     +%mend makeReplaceCode;
22878     +%macro makeReplaceOptCode(Folder=, Data=);
22879     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
22881     +    %let dsid = %sysfunc(open(&data));
22882     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
22883     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
22885     +    %let oldname=;
22886     +    %do %while(^%sysfunc(fetch(&dsid)));
22887     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
22888     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
22890     +        %if &name ne &oldname %then %do;
22891     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
22892     +            data _null_;
22893     +               length string $400;
22894     +               set &Data end=eof;
22895     +               by NAME;
22896     +               where NAME ="&name";
22897     +               file _F1;
22898     +               if _N_=1 then do;
22899     +                  put '* ;';
22900     +                  string = '* Variable: '!!strip(NAME)!!';';
22901     +                  put string;
22902     +                  put '* ;';
22903     +                  if format ne '' then do;
22904     +                     string = "_UFORMAT200 = strip("; put string;
22905     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
22906     +                     put string;
22907     +                  end;
22908     +                  else
22909     +                     if type eq 'C' then do;
22910     +                        call symput('UFormatFlag', '1');
22911     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
22912     +                        put string;
22913     +                    end;
22914     +               end;
22915     +               if ^first.name then
22916     +                  put 'else';
22917     +               if format ne '' then do;
22918     +                  string = tranwrd(strip(LEVEL),'"','""');
22919     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22920     +                  put string;
22921     +               end;
22922     +               else do;
22923     +                  if type eq 'N' then do;
22924     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
22925     +                     put string;
22926     +                  end;
22927     +                  else do;
22928     +                     string = tranwrd(strip(craw),'"','""');
22929     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22930     +                     put string;
22931     +                  end;
22932     +               end;
22933     +               string = strip(newname)!!'=';
22934     +               if type eq 'C' then do;
22935     +                  if upcase(replace_value) eq '_MISSING_' or
22936     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
22937     +                  else
22938     +                     if upcase(replace_value) eq '_MODE_' or
22939     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
22940     +                       then replace_Value =modec;
22941     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
22942     +               end;
22943     +              else do;
22944     +                 if upcase(replace_value) eq '_MISSING_' or
22945     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
22946     +                 else
22947     +                    if upcase(replace_value) eq '_MODE_' or
22948     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
22949     +                        replace_Value =strip(put(moden, BEST.));
22951     +                 string = strip(string)!!''!!strip(replace_value)!!';';
22952     +              end;
22953     +             put string;
22954     +          run;
22955     +          filename _F1;
22957     +           %let oldname = &name;
22958     +        %end;
22959     +    %end;
22960     +    %let dsid = %sysfunc(close(&dsid));
22962     +    %doendr:
22964     +%mend makeReplaceOptCode;
22967     +%macro makeNewVarCode(ScoreFile=, Data=);
22968     +   filename _F1 "&ScoreFile"  MOD;
22969     +   data _null_;
22970     +     length string $400;
22971     +      set &data end=eof;
22972     +      file _F1;
22973     +      if _N_=1 then do;
22974     +         put '   ';
22975     +         put '* ;';
22976     +         put '* Defining New Variables;';
22977     +         put '* ;';
22978     +      end;
22979     +      if type eq 'C' then do;
22980     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
22981     +         put string;
22982     +      end;
22983     +      if strip(label) = '' then label = name;
22984     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
22985     +      put string;
22987     +      if format ne '' then do;
22988     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
22989     +         put string;
22990     +      end;
22991     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
22992     +      put string;
22993     +   run;
22994     +%mend makeNewVarCode;
22996     +%macro makeNewVarOptCode(Folder=, Data=);
22997     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
22998     +    data _temp_;set &data;run;
22999     +    %let dsid = %sysfunc(open(_temp_));
23000     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
23001     +    %do %while(^%sysfunc(fetch(&dsid)));
23002     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
23003     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
23005     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
23006     +        data _null_;
23007     +           length string $400;
23008     +           set &data;
23009     +           where NEWNAME="&newname";
23010     +           file _F1;
23011     +           put '   ';
23012     +           put '* ;';
23013     +           put "* Defining: &newname;";
23014     +           put '* ;';
23015     +           if type eq 'C' then  do;
23016     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
23017     +              put string;
23018     +           end;
23019     +           if strip(label) = '' then label = name;
23020     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
23021     +           put string;
23022     +           if format ne '' then do;
23023     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
23024     +              put string;
23025     +           end;
23026     +           string = strip(newname)!!'='!!strip(name)!!';';
23027     +           put string;
23028     +        run;
23029     +    %end;
23030     +    %let dsid = %sysfunc(close(&dsid));
23031     +   %doendo:
23032     +%mend makeNewVarOptCode;
23034     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
23035     +   %let UFormatFlag = 0;
23037     +   %em_register(key=REPLACECODE, type=FOLDER);
23039     +   /* Generating New Variable Score Code */
23040     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
23042     +   data _tempNewVars;
23043     +      set &nameData;
23044     +      where ROLE ne 'TARGET';
23045     +   run;
23046     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
23047     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
23049     +   proc datasets lib=WORK nolist;
23050     +      delete _tempNewVars;
23051     +   run;
23052     +   quit;
23054     +   /* Generating Publish Score Code */
23055     +   data _temp;
23056     +      set &LevelData;
23057     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
23058     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
23059     +      keep NAME;
23060     +   run;
23062     +   data _temp;
23063     +      merge _temp(in=_a) &Leveldata &nameData;
23064     +      by NAME;
23065     +      if _a then output;
23066     +   run;
23068     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
23069     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
23070     +   proc datasets lib=work nolist;
23071     +      delete _temp;
23072     +   run;
23073     +   quit;
23075     +   data _temp;
23076     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
23077     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
23078     +      by NAME;
23079     +      if _a then output;
23080     +   run;
23082     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
23083     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
23085     +   /* Generating Flow Score Code */
23086     +   data _temp;
23087     +      set &LevelData;
23088     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
23089     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
23090     +      keep NAME;
23091     +   run;
23093     +   data _temp;
23094     +      merge _temp(in=_a) &Leveldata &nameData;
23095     +      by NAME;
23096     +      if _a then output;
23097     +   run;
23098     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
23100     +   data _temp;
23101     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
23102     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
23103     +      by NAME;
23104     +      if _a then output;
23105     +   run;
23107     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
23109     +   %if "&UFormatFlag" = "1" %then %do;
23110     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
23111     +       data _null_;
23112     +          file _F1;
23113     +          put 'length _UFormat200 $200;';
23114     +          put 'drop   _UFORMAT200;';
23115     +          put '_UFORMAT200 = " ";';
23116     +       run;
23117     +       filename _F1;
23118     +   %end;
23120     +%mend makeClassScoreCode;
23122     +%macro makeClassDeltaCode(nameData=_newNames);
23123     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
23125     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
23126     +   data _null_;
23127     +        set &nameData end=eof;
23128     +        length string $400;
23129     +        file _F1;
23130     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
23131     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
23132     +        %end;
23133     +        %else %do;
23134     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
23135     +        %end;
23136     +        put 'else';
23137     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
23138     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
23139     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
23140     +        put      'end;';
23141     +        if ^eof then
23142     +           put 'else';
23143     +   run;
23144     +   %doendm:
23145     +   filename _F1;
23146     +%mend makeClassDeltaCode;
23148     +%macro makeValueReport(Data=, outData=);
23149     +   data &outData;
23150     +      set &data;
23151     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
23152     +      if LEVEL = '_UNKNOWN_' then do;
23153     +         LEVEL='Unknown';
23154     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
23155     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
23156     +         else
23157     +            if REPLACE_VALUE ='_MISSING_' then do;
23158     +               if type eq 'N' then REPLACE_VALUE='.';
23159     +               else REPLACE_VALUE='_blank_';
23160     +            end;
23161     +         %end;
23162     +         %else  %do;
23163     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
23164     +         else
23165     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
23166     +               if type eq 'N' then REPLACE_VALUE='.';
23167     +               else REPLACE_VALUE='_blank_';
23168     +            end;
23169     +         %end;
23170     +      end;
23171     +      else do;
23172     +         if REPLACE_VALUE ='_MISSING_' then do;
23173     +            if type eq 'N' then REPLACE_VALUE='.';
23174     +            else REPLACE_VALUE='_blank_';
23175     +         end;
23176     +         else
23177     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
23178     +      end;
23179     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
23180     +   run;
23181     +%mend makeValueReport;
23183     +%macro makeVarOptCode(LimitDs=, Folder=);
23184     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
23186     +    %let dsid = %sysfunc(open(&limitDs));
23187     +    %do %while(^%sysfunc(fetch(&dsid)));
23188     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
23189     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
23191     +    filename sfile "&Folder.&em_dsep.&newname..sas";
23192     +    data _null_;
23193     +       length string $400;
23194     +       set &LimitDs;
23195     +       where NEWNAME="&newname";
23196     +       file sfile;
23197     +       put '* ;';
23198     +       string = '*Variable: '!!strip(name)!!';';
23199     +       put string;
23200     +       put '* ;';
23201     +       if label eq '' then
23202     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
23203     +       else
23204     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
23205     +       put string;
23206     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
23207     +       put string;
23208     +       replacemin = .;
23209     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
23210     +       put string;
23211     +       if LowerLimit ne . then do;
23212     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
23213     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
23214     +          put 'else';
23215     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
23216     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
23217     +          put string;
23218     +       end;
23219     +       if UpperLimit ne . then do;
23220     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
23221     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
23222     +          put 'else';
23223     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
23224     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
23225     +          put string;
23226     +       end;
23227     +        run;
23228     +        filename sfile;
23229     +    %end;
23230     +    %let dsid = %sysfunc(close(&dsid));
23232     +    %doendo:
23233     +%mend makeVarOptCode;
23235     +%macro score;
23236     +   %em_register(key=REPLACECODE, type=FOLDER);
23238     +   filename x catalog 'sashelp.emutil.em_deldir.source';
23239     +   %inc x;
23240     +   filename x;
23241     +   %delDir(folder=%nrbquote(&em_user_replacecode));
23243     +   data _null_; length rc $200;
23244     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
23245     +   run;
23247     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
23248     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
23249     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
23250     +   data _null_;
23251     +      rc=fdelete('_F1');
23252     +      rc=fdelete('_F2');
23253     +      rc=fdelete('_F3');
23254     +   run;
23255     +   filename _F1;
23256     +   filename _F2;
23257     +   filename _F3;
23259     +   %em_getname(key=OUTCLASS,  type=DATA);
23260     +   %em_getname(key=LIMITS, type=DATA);
23261     +   %em_getname(key=CLASSINFO, type=DATA);
23263     +   /* Retrieve Replacement Values for Class Variables */
23264     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
23266     +   /* Generate Names for Replaced Variables */
23267     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
23269     +   /* Generate score and delta code for Var Variables */
23270     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
23271     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
23272     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
23273     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
23274     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
23276     +       proc print data=&EM_USER_LIMITS label noobs;
23277     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
23278     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
23279     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
23280     +          title9  ' ';
23281     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
23282     +       run;
23283     +       title10;
23284     +  %end;
23286     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
23287     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
23288     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
23289     +   %end;
23291     +   %em_getname(key=VALUES, type=DATA);
23292     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
23293     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
23294     +       %let nobs = 0;
23295     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
23296     +       %if &dsid %then %do;
23297     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
23298     +           %let dsid = %sysfunc(close(&dsid));
23299     +       %end;
23300     +       %if &nobs %then
23301     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
23302     +   %end;
23304     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
23305     +       proc print data=&EM_USER_VALUES label noobs;
23306     +          title9  ' ';
23307     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
23308     +      run;
23309     +      title10;
23310     +  %end;
23312     +   proc datasets lib=work nolist;
23313     +      delete CLASSTEMP;
23314     +   run;
23315     +   quit;
23317     +   %em_register(key=EMSCOREVAR, type=DATA);
23318     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
23319     +   proc datasets lib=&em_lib nolist;
23320     +      delete &scorevarDs;
23321     +   run;
23322     +   quit;
23324     +   %let filrf=mydir;
23325     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
23326     +   %let did=%sysfunc(dopen(&filrf));
23328     +   %if &did %then %do;
23329     +       %let memcount=%sysfunc(dnum(&did));
23330     +       %if &memcount > 0 %then %do;
23331     +           data &em_user_emscorevar;
23332     +              length Name $32 formula $70 file $200;
23333     +              keep NAME Formula file;
23335     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
23336     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
23337     +               output;
23338     +           %end;
23339     +           %do i=1 %to &memcount;
23340     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
23341     +               %let newvar = %scan(&name, 1, .);
23342     +               %if "&newvar" ne "_ALL_" %then %do;
23343     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
23344     +                   output;
23345     +               %end;
23346     +           %end;
23347     +           run;
23348     +       %end;
23349     +  %end;
23350     +  %if &did %then %let did = %sysfunc(dclose(&did));
23353     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
23354     +%macro delDir(folder=);
23355     +   %let filrf=mydir;
23356     +   %let rc=%sysfunc(filename(filrf,&folder));
23357     +   %let did=%sysfunc(dopen(&filrf));
23359     +   %if &did %then %do;
23360     +       %let memcount=%sysfunc(dnum(&did));
23361     +       %if &memcount > 0 %then %do;
23362     +           %do i=1 %to &memcount;
23363     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
23364     +               data _null_;
23365     +                  fname="_temp&i";
23366     +                  rc=filename(fname,"&folder&em_dsep.&name");
23367     +                  if rc = 0 and fexist(fname) then
23368     +                     rc=fdelete(fname);
23369     +                  rc=filename(fname);
23370     +               run;
23371     +           %end;
23372     +       %end;
23373     +       %let rc=%sysfunc(dclose(&did));
23374     +   %end;
23375     +   %let rc = %sysfunc(fdelete(&filrf));
23376     +   %let rc=%sysfunc(filename(filrf));
23377     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_HouseKeeping.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Kitchen.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Toys.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp8";
MPRINT(DELDIR):   rc=filename(fname,"E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl");
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;

WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 26 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   proc sort data=EMWS8.Repl_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;

NOTE: There were 21 observations read from the data set EMWS8.REPL_VARIABLESET.
NOTE: The data set EMWS8.REPL_VARIABLESET has 21 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS8.Repl_OUTCLASS(in=_a) REPLACE_MODE EMWS8.Repl_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "MISSING";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 26 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: There were 5 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 5 observations read from the data set EMWS8.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 26 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;

NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 8 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK.INVARNAME has 5 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set invarname(keep=NAME) EMWS8.Repl_LIMITS(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 5 observations read from the data set WORK.INVARNAME.
NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: The data set WORK.INVARNAME has 8 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 8 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 8 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 8 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS8.Repl_LIMITS;
MPRINT(MAKENEWNAMES):   merge outname EMWS8.Repl_LIMITS(in=a);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if a then output;
MPRINT(MAKENEWNAMES):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 8 observations read from the data set WORK.OUTNAME.
NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: The data set EMWS8.REPL_LIMITS has 3 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=EMWS8 nolist;
MPRINT(MAKENEWNAMES):   modify Repl_LIMITS;
WARNING: Variable REPLACEMETHODUSED not found in data set EMWS8.REPL_LIMITS.
WARNING: Variable REPLACEMINUSED not found in data set EMWS8.REPL_LIMITS.
WARNING: Variable REPLACEDMAXUSED not found in data set EMWS8.REPL_LIMITS.
MPRINT(MAKENEWNAMES):   label NAME = "Variable" NEWNAME = "Replace Variable" CALCMETHOD = "Limits Method" REPLACEMETHODUSED = "Replacement Method Used" LOWERLIMIT = "Lower limit" REPLACEMINUSED = "Lower Replacement Value" UPPERLIMIT = "Upper Limit" 
REPLACEDMAXUSED = "Upper Replacement Value" REPLACEMETHOD = "Replacement Method" REPLACEMIN = "User-Specified Lower Replacement Value" REPLACEMAX = "User-Specified Upper Replacement Value" ROLE = "Role" LEVEL = "Measurement Level" LABEL = "Label";
MPRINT(MAKENEWNAMES):   run;

NOTE: MODIFY was successful for EMWS8.REPL_LIMITS.DATA.
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.32 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 26 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS8.Repl_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 8 observations read from the data set WORK.OUTNAME.
NOTE: There were 5 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS8.REPL_CLASSINFO has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;

NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS8.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS8.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'MISSING';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H46m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 30 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: The data set EMWS8.REPL_LIMITS has 3 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS8.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS8.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'MISSING';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H46m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 30 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: The data set EMWS8.REPL_LIMITS has 3 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVAROPTCODE):   filename sfile "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_HouseKeeping.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS8.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_HouseKeeping";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_HouseKeeping.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 52.
NOTE: There were 1 observations read from the data set EMWS8.REPL_LIMITS.
      WHERE NEWNAME='REP_HouseKeeping';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Kitchen.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS8.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_Kitchen";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Kitchen.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 42.
NOTE: There were 1 observations read from the data set EMWS8.REPL_LIMITS.
      WHERE NEWNAME='REP_Kitchen';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Toys.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS8.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_Toys";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Toys.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 36.
NOTE: There were 1 observations read from the data set EMWS8.REPL_LIMITS.
      WHERE NEWNAME='REP_Toys';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARDELTACODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas";
MPRINT(MAKEVARDELTACODE):   data _null_;
MPRINT(MAKEVARDELTACODE):   set EMWS8.Repl_LIMITS end=eof;
MPRINT(MAKEVARDELTACODE):   length string $400;
MPRINT(MAKEVARDELTACODE):   file _F1;
MPRINT(MAKEVARDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   ROLE="REJECTED";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   COMMENT= "Replaced by '!!"Repl"!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = 'end;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'else';
MPRINT(MAKEVARDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'end;';
MPRINT(MAKEVARDELTACODE):   if ^eof then put 'else';
MPRINT(MAKEVARDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H46m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 29 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 35.
NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS8.Repl_LIMITS label noobs;
MPRINT(SCORE):   var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
MPRINT(SCORE):   label REPLACEMINUSED = "Lower Replacement Value" REPLACEMAXUSED = "Upper Replacement Value";
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Limits and Replacement Values for Interval Variables";
MPRINT(SCORE):   run;

NOTE: There were 3 observations read from the data set EMWS8.REPL_LIMITS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS8.Repl_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=724,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 22 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 4 observations read from the data set EMWS8.REPL_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVARCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=724,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 19 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 4 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;

NOTE: There were 4 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVAROPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Dependents";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Dependents;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 47.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Dependents';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVAROPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Education";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Education;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 45.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Education';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVAROPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Gender";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Gender;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 39.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Gender';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVAROPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Marital_Status";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Marital_Status;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Marital_Status';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 4 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: There were 26 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 23 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=1274,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 30 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 72.
NOTE: There were 23 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Dependents";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas,
      RECFM=V,LRECL=256,File Size (bytes)=151,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 43.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='Dependents';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Education";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas,
      RECFM=V,LRECL=256,File Size (bytes)=171,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 67.
NOTE: There were 8 observations read from the data set WORK._TEMP.
      WHERE NAME='Education';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Gender";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas,
      RECFM=V,LRECL=256,File Size (bytes)=148,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 38.
NOTE: There were 4 observations read from the data set WORK._TEMP.
      WHERE NAME='Gender';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Marital_Status";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas,
      RECFM=V,LRECL=256,File Size (bytes)=206,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 72.
NOTE: There were 8 observations read from the data set WORK._TEMP.
      WHERE NAME='Marital_Status';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 3 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 3 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=1963,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 28 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 37.
NOTE: There were 3 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="Education";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas,
      RECFM=V,LRECL=256,File Size (bytes)=339,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 34.
NOTE: There were 1 observations read from the data set WORK._TEMP.
      WHERE NAME='Education';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="Gender";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas,
      RECFM=V,LRECL=256,File Size (bytes)=260,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 26.
NOTE: There were 1 observations read from the data set WORK._TEMP.
      WHERE NAME='Gender';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="Marital_Status";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas,
      RECFM=V,LRECL=256,File Size (bytes)=389,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 37.
NOTE: There were 1 observations read from the data set WORK._TEMP.
      WHERE NAME='Marital_Status';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 5 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 5 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: There were 26 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 26 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=1362,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 36 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 72.
NOTE: There were 26 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 3 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 3 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=2158,
      Last Modified=05 de Março de 2016 11H22m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 28 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 37.
NOTE: There were 3 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas" MOD;
MPRINT(MAKECLASSSCORECODE):   data _null_;
MPRINT(MAKECLASSSCORECODE):   file _F1;
MPRINT(MAKECLASSSCORECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKECLASSSCORECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKECLASSSCORECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=05 de Março de 2016 11H21m

NOTE: 3 records were written to the file _F1.
      The minimum record length was 18.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS8.Repl_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=496,
      Last Modified=05 de Março de 2016 11H21m,
      Create Time=03 de Março de 2016 08H46m

NOTE: 34 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 46.
NOTE: There were 5 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS8.Repl_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;

NOTE: There were 8 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS8.REPL_VALUES has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "VALUES";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ReplaceLevels";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27591679490912;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   proc print data=EMWS8.Repl_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;

NOTE: There were 8 observations read from the data set EMWS8.REPL_VALUES.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;

NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS8 nolist;
MPRINT(SCORE):   delete Repl_EMSCOREVAR;
MPRINT(SCORE):   run;

NOTE: Deleting EMWS8.REPL_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.37 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   data EMWS8.Repl_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name='';
MPRINT(SCORE):   file="REPLACECODE\_ALL_.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_HouseKeeping";
MPRINT(SCORE):   file="REPLACECODE\REP_HouseKeeping.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Kitchen";
MPRINT(SCORE):   file="REPLACECODE\REP_Kitchen.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Toys";
MPRINT(SCORE):   file="REPLACECODE\REP_Toys.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Dependents";
MPRINT(SCORE):   file="REPLACECODE\REP_Dependents.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Education";
MPRINT(SCORE):   file="REPLACECODE\REP_Education.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Gender";
MPRINT(SCORE):   file="REPLACECODE\REP_Gender.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Marital_Status";
MPRINT(SCORE):   file="REPLACECODE\REP_Marital_Status.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;

NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS8.REPL_EMSCOREVAR has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23378      
23379      *------------------------------------------------------------*;
23380      * End SCORE: Repl;
23381      *------------------------------------------------------------*;

23382      filename emflow "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23383      *------------------------------------------------------------*;
23384      * Repl: Scoring DATA data;
23385      *------------------------------------------------------------*;
23386      data EMWS8.Repl_TRAIN
23387      / view=EMWS8.Repl_TRAIN
23388      ;
MPRINT(EM_DIAGRAM):   data EMWS8.Repl_TRAIN / view=EMWS8.Repl_TRAIN ;
23389      set EMWS8.Plot_TRAIN
23390      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Plot_TRAIN ;
23391      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas.
23392     +* ;
MPRINT(EM_DIAGRAM):   * ;
23393     +* Variable: HouseKeeping ;
MPRINT(EM_DIAGRAM):   * Variable: HouseKeeping ;
23394     +* ;
MPRINT(EM_DIAGRAM):   * ;
23395     +Label REP_HouseKeeping='Replacement: HouseKeeping';
MPRINT(EM_DIAGRAM):   Label REP_HouseKeeping= 'Replacement: HouseKeeping';
23396     +REP_HouseKeeping =HouseKeeping ;
MPRINT(EM_DIAGRAM):   REP_HouseKeeping =HouseKeeping ;
23397     +if HouseKeeping  eq . then REP_HouseKeeping = . ;
MPRINT(EM_DIAGRAM):   if HouseKeeping eq . then REP_HouseKeeping = . ;
23398     +else
23399     +if HouseKeeping <0  then REP_HouseKeeping  = . ;
MPRINT(EM_DIAGRAM):   else if HouseKeeping <0 then REP_HouseKeeping = . ;
23400     +else
23401     +if HouseKeeping >35  then REP_HouseKeeping  = . ;
MPRINT(EM_DIAGRAM):   else if HouseKeeping >35 then REP_HouseKeeping = . ;
23402     +* ;
MPRINT(EM_DIAGRAM):   * ;
23403     +* Variable: Kitchen ;
MPRINT(EM_DIAGRAM):   * Variable: Kitchen ;
23404     +* ;
MPRINT(EM_DIAGRAM):   * ;
23405     +Label REP_Kitchen='Replacement: Kitchen';
MPRINT(EM_DIAGRAM):   Label REP_Kitchen= 'Replacement: Kitchen';
23406     +REP_Kitchen =Kitchen ;
MPRINT(EM_DIAGRAM):   REP_Kitchen =Kitchen ;
23407     +if Kitchen  eq . then REP_Kitchen = . ;
MPRINT(EM_DIAGRAM):   if Kitchen eq . then REP_Kitchen = . ;
23408     +else
23409     +if Kitchen <0  then REP_Kitchen  = . ;
MPRINT(EM_DIAGRAM):   else if Kitchen <0 then REP_Kitchen = . ;
23410     +else
23411     +if Kitchen >40  then REP_Kitchen  = . ;
MPRINT(EM_DIAGRAM):   else if Kitchen >40 then REP_Kitchen = . ;
23412     +* ;
MPRINT(EM_DIAGRAM):   * ;
23413     +* Variable: Toys ;
MPRINT(EM_DIAGRAM):   * Variable: Toys ;
23414     +* ;
MPRINT(EM_DIAGRAM):   * ;
23415     +Label REP_Toys='Replacement: Toys';
MPRINT(EM_DIAGRAM):   Label REP_Toys= 'Replacement: Toys';
23416     +REP_Toys =Toys ;
MPRINT(EM_DIAGRAM):   REP_Toys =Toys ;
23417     +if Toys  eq . then REP_Toys = . ;
MPRINT(EM_DIAGRAM):   if Toys eq . then REP_Toys = . ;
23418     +else
23419     +if Toys <0  then REP_Toys  = . ;
MPRINT(EM_DIAGRAM):   else if Toys <0 then REP_Toys = . ;
23420     +else
23421     +if Toys >40  then REP_Toys  = . ;
MPRINT(EM_DIAGRAM):   else if Toys >40 then REP_Toys = . ;
23422     +
23423     +* ;
MPRINT(EM_DIAGRAM):   * ;
23424     +* Defining New Variables;
MPRINT(EM_DIAGRAM):   * Defining New Variables;
23425     +* ;
MPRINT(EM_DIAGRAM):   * ;
23426     +Label REP_DepVar='Replacement: DepVar';
MPRINT(EM_DIAGRAM):   Label REP_DepVar= 'Replacement: DepVar';
23427     +format REP_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format REP_DepVar BEST.;
23428     +REP_DepVar= DepVar;
MPRINT(EM_DIAGRAM):   REP_DepVar= DepVar;
23429     +Label REP_Dependents='Replacement: Dependents';
MPRINT(EM_DIAGRAM):   Label REP_Dependents= 'Replacement: Dependents';
23430     +format REP_Dependents BEST.;
MPRINT(EM_DIAGRAM):   format REP_Dependents BEST.;
23431     +REP_Dependents= Dependents;
MPRINT(EM_DIAGRAM):   REP_Dependents= Dependents;
23432     +Length REP_Education $10;
MPRINT(EM_DIAGRAM):   Length REP_Education $10;
23433     +Label REP_Education='Replacement: Education';
MPRINT(EM_DIAGRAM):   Label REP_Education= 'Replacement: Education';
23434     +format REP_Education $10.0;
MPRINT(EM_DIAGRAM):   format REP_Education $10.0;
23435     +REP_Education= Education;
MPRINT(EM_DIAGRAM):   REP_Education= Education;
23436     +Length REP_Gender $1;
MPRINT(EM_DIAGRAM):   Length REP_Gender $1;
23437     +Label REP_Gender='Replacement: Gender';
MPRINT(EM_DIAGRAM):   Label REP_Gender= 'Replacement: Gender';
23438     +format REP_Gender $1.0;
MPRINT(EM_DIAGRAM):   format REP_Gender $1.0;
23439     +REP_Gender= Gender;
MPRINT(EM_DIAGRAM):   REP_Gender= Gender;
23440     +Length REP_Marital_Status $12;
MPRINT(EM_DIAGRAM):   Length REP_Marital_Status $12;
23441     +Label REP_Marital_Status='Replacement: Marital_Status';
MPRINT(EM_DIAGRAM):   Label REP_Marital_Status= 'Replacement: Marital_Status';
23442     +format REP_Marital_Status $12.0;
MPRINT(EM_DIAGRAM):   format REP_Marital_Status $12.0;
23443     +REP_Marital_Status= Marital_Status;
MPRINT(EM_DIAGRAM):   REP_Marital_Status= Marital_Status;
23444     +* ;
MPRINT(EM_DIAGRAM):   * ;
23445     +* Replace Unknown Class Levels ;
MPRINT(EM_DIAGRAM):   * Replace Unknown Class Levels ;
23446     +* ;
MPRINT(EM_DIAGRAM):   * ;
23447     +length _UFORMAT200 $200;
MPRINT(EM_DIAGRAM):   length _UFORMAT200 $200;
23448     +drop   _UFORMAT200;
MPRINT(EM_DIAGRAM):   drop _UFORMAT200;
23449     +_UFORMAT200 = " ";
MPRINT(EM_DIAGRAM):   _UFORMAT200 = " ";
23450     +*;
MPRINT(EM_DIAGRAM):   *;
23451     +_UFORMAT200 = strip(put(DepVar,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(DepVar,BEST.));
23452     +if ^(_UFORMAT200 in(
23453     +"0", "1"
23454     +, "" )) then
23455     +REP_DepVar= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_DepVar= .;
23456     +*;
MPRINT(EM_DIAGRAM):   *;
23457     +_UFORMAT200 = strip(put(Dependents,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Dependents,BEST.));
23458     +if ^(_UFORMAT200 in(
23459     +"1", "0"
23460     +, "" )) then
23461     +REP_Dependents= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "1", "0" , "" )) then REP_Dependents= .;
23462     +*;
MPRINT(EM_DIAGRAM):   *;
23463     +_UFORMAT200 = strip(put(Education,$10.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Education,$10.0));
23464     +if ^(_UFORMAT200 in(
23465     +"Graduation", "2n Cycle", "Master", "Basic", "PhD", "", "OldSchool"
23466     +)) then
23467     +REP_Education= "";
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "Graduation", "2n Cycle", "Master", "Basic", "PhD", "", "OldSchool" )) then REP_Education= "";
23468     +*;
MPRINT(EM_DIAGRAM):   *;
23469     +_UFORMAT200 = strip(put(Gender,$1.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Gender,$1.0));
23470     +if ^(_UFORMAT200 in(
23471     +"F", "M", "?"
23472     +, "" )) then
23473     +REP_Gender= "";
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "F", "M", "?" , "" )) then REP_Gender= "";
23474     +*;
MPRINT(EM_DIAGRAM):   *;
23475     +_UFORMAT200 = strip(put(Marital_Status,$12.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Marital_Status,$12.0));
23476     +if ^(_UFORMAT200 in(
23477     +"Married", "Together", "Single", "Divorced", "Widow", "BigConfusion", ""
23478     +)) then
23479     +REP_Marital_Status= "";
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "Married", "Together", "Single", "Divorced", "Widow", "BigConfusion", "" )) then REP_Marital_Status= "";
23480     +
23481     +* ;
MPRINT(EM_DIAGRAM):   * ;
23482     +* Replace Specific Class Levels ;
MPRINT(EM_DIAGRAM):   * Replace Specific Class Levels ;
23483     +* ;
MPRINT(EM_DIAGRAM):   * ;
23484     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
23485     +drop   _UFORMAT200;
MPRINT(EM_DIAGRAM):   drop _UFORMAT200;
23486     +_UFORMAT200 = " ";
MPRINT(EM_DIAGRAM):   _UFORMAT200 = " ";
23487     +* ;
MPRINT(EM_DIAGRAM):   * ;
23488     +* Variable: Education;
MPRINT(EM_DIAGRAM):   * Variable: Education;
23489     +* ;
MPRINT(EM_DIAGRAM):   * ;
23490     +_UFORMAT200 = strip(
23491     +put(Education,$10.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip( put(Education,$10.0));
23492     +if _UFORMAT200 =  "OldSchool" then
23493     +REP_Education="";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "OldSchool" then REP_Education="";
23494     +* ;
MPRINT(EM_DIAGRAM):   * ;
23495     +* Variable: Gender;
MPRINT(EM_DIAGRAM):   * Variable: Gender;
23496     +* ;
MPRINT(EM_DIAGRAM):   * ;
23497     +_UFORMAT200 = strip(
23498     +put(Gender,$1.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip( put(Gender,$1.0));
23499     +if _UFORMAT200 =  "?" then
23500     +REP_Gender="";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "?" then REP_Gender="";
23501     +* ;
MPRINT(EM_DIAGRAM):   * ;
23502     +* Variable: Marital_Status;
MPRINT(EM_DIAGRAM):   * Variable: Marital_Status;
23503     +* ;
MPRINT(EM_DIAGRAM):   * ;
23504     +_UFORMAT200 = strip(
23505     +put(Marital_Status,$12.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip( put(Marital_Status,$12.0));
23506     +if _UFORMAT200 =  "BigConfusion" then
23507     +REP_Marital_Status="";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "BigConfusion" then REP_Marital_Status="";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23508      run;

NOTE: DATA STEP view saved on file EMWS8.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PLOT_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23509      quit;
23510      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23512      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
23513      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
23514      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23515      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23516      * Repl: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl: Computing metadata for TRAIN data;
23517      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REPL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Repl_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Repl_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Repl_TRAIN out=WORK.M1_2SACC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_2SACC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_2SACC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_2SACC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_2SACC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M00WF7ZM NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00KVNM9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   set WORK.M00WF7ZM;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Plot_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Plot_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Repl_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="HouseKeeping" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_HouseKeeping" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Kitchen" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_Kitchen" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Toys" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_Toys" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="DepVar" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_DepVar" then do;
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Dependents" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Dependents" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Education" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Education" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Gender" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Gender" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Marital_Status" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Marital_Status" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.REPL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
