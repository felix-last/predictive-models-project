*------------------------------------------------------------*
User:                Lukas Fahr
Date:                19. April 2016
Time:                16.46 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                19. April 2016
Time:                16.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2AASTL1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2AASTL1 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
29801      proc freq data=EMWS8.Repl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Repl_VariableSet noprint;
29802      table ROLE*LEVEL/out=WORK.ReplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReplMETA;
29803      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.REPL_VARIABLESET.
NOTE: The data set WORK.REPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29804      proc print data=WORK.ReplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReplMETA label noobs;
29805      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
29806      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
29807      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29808      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
29809      run;
 
NOTE: There were 6 observations read from the data set WORK.REPLMETA.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29810      title10;
MPRINT(EM_DIAGRAM):   title10;
29811      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30162      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30163      * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
30164      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
30165      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
30166      %let EMEXCEPTIONSTRING=;
30167      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30168      * TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * TRAIN: Repl;
30169      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30170      %let EM_ACTION = TRAIN;
30171      %let syscc = 0;
30172      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
30173      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
30174     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
30175     +   filename macFile catalog 'work.emutil.macro.source';
30176     +   %let _METAOBS = 0;
30178     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
30179     +                   or (&metadata eq ) %then %do;
30180     +       %goto doend;
30181     +   %end;
30182     +   data _null_;
30183     +      length _STRING_ $80;
30184     +      retain _STRING_;
30185     +      set &metadata end=eof;
30186     +      file macFile;
30187     +      %if %nrbquote(&where) ne %then %do;
30188     +          %let whereClause = where (%nrbquote(&where));
30189     +          %unquote(&whereClause);
30190     +      %end;
30191     +      if _N_=1 then do;
30192     +         string = "%"!!"macro &name;";
30193     +         put string;
30194     +      end;
30195     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
30196     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
30197     +         if eof then do;
30198     +            put _STRING_;
30199     +            string = "%"!!"mend &name;";
30200     +            put string;
30201     +            %if (&nummacro ne ) %then %do;
30202     +                string = strip(put(_N_, best.));
30203     +                put "%" "global &nummacro;";
30204     +                put "%" "let &nummacro = " string ";";
30205     +                call symput('_METAOBS', string);
30206     +            %end;
30207     +         end;
30208     +      end;
30209     +      else do;
30210     +         put _STRING_;
30211     +         _string_ = TRIM(&key);
30212     +         if eof then do;
30213     +            put _STRING_;
30214     +            string = "%"!!"mend &name;";
30215     +            put string;
30216     +        end;
30217     +      end;
30218     +      if eof then do;
30219     +         string = strip(put(_N_, best.));
30220     +         call symput('_METAOBS', string);
30221     +         %if (&nummacro ne ) %then %do;
30222     +             put "%" "global &nummacro;";
30223     +             put "%" "let &nummacro = " string ";";
30224     +         %end;
30225     +      end;
30226     +   run;
30228     +   %doend:
30229     +   %if ^&_METAOBS %then %do;
30230     +       data _null_;
30231     +          file macFile;
30232     +          put "%" "macro &name;";
30233     +          put "%" "mend &name;";
30234     +          %if (&nummacro ne ) %then %do;
30235     +              put "%" "global &nummacro;";
30236     +              put "%" "let &nummacro = 0;";
30237     +          %end;
30238     +      run;
30239     +   %end;
30240     +   %inc macFile;
30241     +   filename macFile;
30242     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
30243      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
30244       %macro main;
30245
30246         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
30247         %include temp;
30248         filename temp;
30249
30250         %if %upcase(&EM_ACTION) = CREATE %then %do;
30251
30252             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
30253             %include temp;
30254             filename temp;
30255             %create;
30256         %end;
30257         %else
30258         %if %upcase(&EM_ACTION) = TRAIN %then %do;
30259
30260             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
30261             %include temp;
30262             filename temp;
30263             %train;
30264         %end;
30265         %else
30266         %if %upcase(&EM_ACTION) = SCORE %then %do;
30267
30268             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
30269             %include temp;
30270             filename temp;
30271             %score;
30272         %end;
30273         %if %upcase(&EM_ACTION) = REPORT %then %do;
30274
30275             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
30276             %include temp;
30277             filename temp;
30278             %report;
30279         %end;
30280         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
30281             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30282             %include temp;
30283             filename temp;
30284             %em_replace_openoutclass;
30285         %end;
30286         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
30287             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30288             %include temp;
30289             filename temp;
30290             %em_replace_closeoutclass;
30291         %end;
30292      %mend main;
30293
30294      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
30295     +%macro SetProperties;
30296     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
30297     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
30298     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
30299     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
30300     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
30301     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
30302     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
30303     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
30304     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
30305     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
30307     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
30309     +%macro getLevels(outData=);
30310     +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
30311     +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
30312     +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
30313     +       data &outData;
30314     +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
30315     +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
30316     +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
30317     +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
30318     +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
30319     +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
30320     +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
30321     +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30322     +          stop;
30323     +       run;
30324     +   %end;
30325     +   %else %do;
30326     +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
30327     +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
30328     +            %let EM_TRAIN_MAXLEVELS= 512;
30330     +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
30331     +          class
30332     +            %EM_BINARY_TARGET
30333     +            %EM_ORDINAL_TARGET
30334     +            %EM_NOMINAL_TARGET
30335     +            %EM_BINARY_INPUT
30336     +            %EM_ORDINAL_INPUT
30337     +            %EM_NOMINAL_INPUT
30338     +            %EM_BINARY_REJECTED
30339     +            %EM_ORDINAL_REJECTED
30340     +            %EM_NOMINAL_REJECTED;
30341     +          %if (%EM_FREQ ne ) %then %do;
30342     +             freq %EM_FREQ;
30343     +         %end;
30344     +       run;
30345     +   %end;
30346     +%mend getLevels;
30348     +%macro makeOutCLass;
30349     +   %em_getname(key=OUTCLASS,  type=DATA);
30350     +   %em_getname(key=NEWVALUES, type=DATA);
30352     +   %let data= REPLACE_DATA;
30353     +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
30354     +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
30355     +          set &EM_USER_OUTCLASS;
30356     +          keep NAME TYPE LEVEL REPLACE_VALUE;
30357     +          where REPLACE_VALUE ne '';
30358     +       run;
30359     +       proc sort data=&Data;
30360     +          by NAME TYPE LEVEL;
30361     +       run;
30362     +   %end;
30364     +   %getLevels(outdata=&EM_USER_OUTCLASS);
30366     +   /* Determine Mode */
30367     +   proc sort data=&EM_USER_OUTCLASS;
30368     +      by NAME DESCENDING FREQUENCY;
30369     +   run;
30370     +   data _null_;
30371     +      dsid = open("&EM_USER_OUTCLASS");
30372     +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
30373     +      dsid = close(dsid);
30374     +      call symput("levelLen", put(max(levelLen, 9), BEST.));
30375     +   run;
30377     +   data &EM_USER_OUTCLASS;
30378     +      length Name $32 LEVEL $&levelLen;
30379     +      set &EM_USER_OUTCLASS;
30380     +      length REPLACE_VALUE $200;
30381     +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30382     +      by NAME;
30383     +      output;
30384     +      if last.name then do;
30385     +         LEVEL="_UNKNOWN_";
30386     +         Frequency=.;
30387     +         CRAW='';
30388     +         NRAW=.;
30389     +         REPLACE_VALUE="_DEFAULT_";
30390     +         output;
30391     +      end;
30392     +   run;
30394     +   /* If the file is a copy of an existing one.  Merge previously specified values */
30395     +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
30396     +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
30397     +          by NAME TYPE LEVEL;
30398     +       run;
30399     +       proc sort data=&EM_USER_OUTCLASS;
30400     +          by NAME TYPE LEVEL;
30401     +       run;
30402     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
30403     +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
30404     +          by NAME TYPE LEVEL;
30405     +          if _a then do;
30406     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
30407     +             output;
30408     +          end;
30409     +       run;
30410     +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
30411     +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
30412     +       proc datasets lib=&lib nolist;
30413     +          delete &member;
30414     +       run;
30416     +   %end;
30418     +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
30419     +   %if %sysfunc(exist(&Data)) %then %do;
30420     +       proc sort data=&EM_USER_OUTCLASS;
30421     +          by NAME TYPE LEVEL;
30422     +       run;
30423     +       proc sort data=&data;
30424     +          by NAME TYPE LEVEL;
30425     +       run;
30426     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
30427     +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
30428     +          by NAME TYPE LEVEL;
30429     +          if _a then do;
30430     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
30431     +             output;
30432     +          end;
30433     +       run;
30434     +   %end;
30435     +   proc sort data=&EM_USER_OUTCLASS;
30436     +      by NAME DESCENDING FREQUENCY;
30437     +   run;
30439     +   %let lib = WORK;
30440     +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
30441     +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
30442     +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
30443     +   %end;
30444     +   %else
30445     +       %let member = &EM_USER_OUTCLASS;
30447     +   proc datasets lib=&lib nolist;
30448     +      modify &member;
30449     +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
30450     +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
30451     +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
30452     +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
30453     +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
30454     +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
30455     +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30456     +     %if %sysfunc(exist(&data)) %then %do;
30457     +          delete &data;
30458     +     %end;
30459     +   run;
30461     +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
30462     +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
30463     +      set &EM_USER_OUTCLASS(in=_a);
30464     +      where REPLACE_VALUE ne '';
30465     +      keep NAME TYPE LEVEL REPLACE_VALUE;
30466     +   run;
30467     +%mend makeOutClass;
30469     +%macro makeVarLimits;
30470     +     %let madsString =;
30471     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
30472     +     %if %sysfunc(exist(work.MADS)) %then %do;
30473     +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
30474     +         %let madsString = MADS;
30475     +         proc append base=work.LIMITS data=work.MADS force;
30476     +         run;
30477     +     %end;
30479     +     %let spacingString = ;
30480     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
30481     +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
30482     +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
30483     +         %let spacingString = SPACING;
30484     +         proc append base=work.LIMITS data=work.SPACINGS force;
30485     +         run;
30486     +     %end;
30488     +     %let percentString = ;
30489     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
30490     +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
30491     +         %makePctLimits(StatsDs=work.PERCENTS);
30492     +         %let percentString = PERCENTS;
30493     +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
30494     +         run;
30495     +     %end;
30497     +     %makeFixedLimits(StatsDs=work.FIXED);
30498     +     %if %sysfunc(exist(work.FIXED)) %then %do;
30499     +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
30500     +         run;
30501     +     %end;
30503     +     %if %sysfunc(exist(work.LIMITS)) %then %do;
30504     +         proc sort data=work.LIMITS;
30505     +            by NAME;
30506     +         run;
30507     +         %em_getName(key=LIMITS, type=DATA);
30508     +         data &EM_USER_LIMITS;
30509     +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
30510     +              by NAME;
30511     +              if _a then output;
30512     +         run;
30513     +     %end;
30517     +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
30518     +          proc print data=&EM_USER_OUTCLASS;run;
30519     +          proc print data=MADS;run;
30520     +          proc print data=spacings;run;
30521     +          proc print data=percents;run;
30522     +          proc print data=limits;run;
30523     +     %end;
30524     +     proc datasets lib=work nolist;
30525     +        delete &madsString &spacingString &percentString limits;
30526     +     run;
30527     +%mend makeVarLimits;
30529     +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
30531     +    %if &method ne PERCENTS %then %do;
30532     +        %em_varmacro(Name=&method, metadata=&metadata,
30533     +                  where=%nrbquote(CALCMETHOD="&method"));
30534     +    %end;
30535     +    %else %do;
30536     +        %em_varmacro(Name=&method, metadata=&metadata,
30537     +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
30538     +    %end;
30539     +    %if %&method eq %then %goto doend;
30541     +    %let optionString=&method;
30543     +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
30544     +    %else
30545     +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
30546     +        %else
30547     +           %if &method=PERCENTS %then %do;
30548     +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
30549     +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
30550     +           %end;
30552     +    &em_codebar;
30553     +    * &EM_NODEID: Method &em_property_method;
30554     +    &EM_codebar;
30555     +    proc stdize data=&data outstat=&outstat out=_null_
30556     +       &optionString
30557     +       ;
30558     +       var  %&method;
30559     +       %if %em_freq ne %then %do;
30560     +           freq %em_freq;
30561     +       %end;
30562     +    run;
30564     +    %if &method=MADS or &method=SPACINGS %then %do;
30565     +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
30566     +           where _TYPE_ in('LOCATION', 'SCALE');
30567     +        run;
30568     +    %end;
30569     +    %else
30570     +        %if &method=PERCENTS %then %do;
30571     +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
30572     +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
30573     +           run;
30574     +       %end;
30575     +   %doend:
30576     +%mend stdize;
30578     +%macro makeLimits(StatsDs=, cutoff=, method=);
30579     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
30580     +    data &StatsDs;
30581     +       set &StatsDs;
30582     +       length CALCMETHOD $10;
30583     +       retain CALCMETHOD "&METHOD";
30584     +       LowerLimit = location - &cutoff*scale;
30585     +       UpperLimit = location + &cutoff*scale;
30586     +       drop location scale;
30587     +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
30588     +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
30589     +    run;
30591     +    %doendm:
30592     +%mend makeLimits;
30594     +%macro makeFixedLimits(statsDs=);
30595     +    data &statsDs;
30596     +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
30597     +       by NAME;
30598     +       select(CALCMETHOD);
30599     +          when('METALIMIT') do;
30600     +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
30601     +          end;
30602     +          when('MANUAL') do;
30603     +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
30604     +             else do;
30605     +                LOWERLIMIT = INTERVALMIN;
30606     +                UPPERLIMIT = INTERVALMAX;
30607     +             end;
30608     +          end;
30609     +          otherwise;
30610     +       end;
30611     +    run;
30612     +    %let nobs=0;
30613     +    %let dsid = %sysfunc(open(&statsDs));
30614     +    %if &dsid>0 %then %do;
30615     +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
30616     +        %let dsid = %sysfunc(close(&dsid));
30617     +    %end;
30618     +    %if ^&nobs %then %do;
30619     +        %let nameDs = %scan(&statsDs, 2, .);
30620     +        proc datasets lib=WORK nolist;
30621     +           delete &nameDs;
30622     +         run;
30623     +    %end;
30625     +%mend makeFixedLimits;
30627     +%macro makePctLimits(StatsDs=);
30628     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
30629     +    data &statsDs;
30630     +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
30631     +       by NAME;
30632     +       select(CALCMETHOD);
30633     +          when('PERCENTS') do;
30634     +             if PMIN eq . and PMAX eq . then delete;
30635     +             else do;
30636     +                LOWERLIMIT = PMIN;
30637     +                UPPERLIMIT = PMAX;
30638     +             end;
30639     +          end;
30640     +          when('STDDEV') do;
30641     +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
30642     +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
30643     +          end;
30644     +          otherwise;
30645     +       end;
30646     +    run;
30647     +   %doendp:
30648     +%mend makePctLimits;
30650     +%macro train;
30652     +   %if "&em_import_data" eq "" %then %do;
30653     +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
30654     +       %goto doendm;
30655     +   %end;
30657     +    /* Process Class variables */
30658     +    %makeOutClass;
30660     +    /* Interval Variables */
30661     +     data VARIABLESET;
30662     +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
30663     +             or (ROLE="INPUT" and USE in("Y", "D")) )));
30664     +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
30665     +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
30666     +     run;
30667     +     proc sort data=VARIABLESET out=VARIABLESET;
30668     +        by NAME;
30669     +     run;
30671     +     %let varnum=0;
30672     +     %let dsid = %sysfunc(open(VARIABLESET));
30673     +     %if &dsid>0 %then %do;
30674     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
30675     +         %let dsid = %sysfunc(close(&dsid));
30676     +     %end;
30677     +     %if ^&varnum %then %do;
30678     +          %em_getName(key=LIMITS, type=DATA);
30679     +          %let limitDs = %scan(&em_user_limits, 2, .);
30680     +          proc datasets lib=&em_lib nolist;
30681     +             delete &limitDs;
30682     +          run;
30683     +     %end;
30684     +     %else %do;
30685     +         %makeVarLimits;
30686     +     %end;
30688     +   %doendm:
30690     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   data REPLACE_DATA(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REPL_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   proc dmdb data=EMWS8.Plot_TRAIN dmdbcat=emdmdb maxlevel=512 nonorm CLASSOUT=EMWS8.Repl_OUTCLASS(drop=CODE FREQPERCENT NMISSPERCENT);
MPRINT(GETLEVELS):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_BINARY_INPUT):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
MPRINT(EM_NOMINAL_INPUT):   Education Marital_Status
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   run;
 
NOTE: Records processed = 3500   Memory used = 511K.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View EMWS8.PLOT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: There were 3500 observations read from the data set EMWS8.PLOT_TRAIN.
NOTE: The data set EMWS8.REPL_OUTCLASS has 24 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 24 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   data _null_;
MPRINT(MAKEOUTCLASS):   dsid = open("EMWS8.Repl_OUTCLASS");
MPRINT(MAKEOUTCLASS):   levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
MPRINT(MAKEOUTCLASS):   dsid = close(dsid);
MPRINT(MAKEOUTCLASS):   call symput("levelLen", put(max(levelLen, 9), BEST.));
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length Name $32 LEVEL $ 12;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length REPLACE_VALUE $200;
MPRINT(MAKEOUTCLASS):   label REPLACE_VALUE= "Replacement Value";
MPRINT(MAKEOUTCLASS):   by NAME;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   if last.name then do;
MPRINT(MAKEOUTCLASS):   LEVEL="_UNKNOWN_";
MPRINT(MAKEOUTCLASS):   Frequency=.;
MPRINT(MAKEOUTCLASS):   CRAW='';
MPRINT(MAKEOUTCLASS):   NRAW=.;
MPRINT(MAKEOUTCLASS):   REPLACE_VALUE="_DEFAULT_";
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 24 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS8.Repl_OUTCLASS(in=_a) REPLACE_DATA(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS8 nolist;
MPRINT(MAKEOUTCLASS):   modify Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   label NAME = "Variable" LEVEL= "Formatted Value" FREQUENCY= "Frequency Count" TYPE= "Type" CRAW= "Character Unformatted Value" NRAW= "Numeric Value" REPLACE_VALUE= "Replacement Value";
NOTE: MODIFY was successful for EMWS8.REPL_OUTCLASS.DATA.
MPRINT(MAKEOUTCLASS):   delete REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: The file EMWS8.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_NEWVALUES / view=EMWS8.Repl_NEWVALUES;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS(in=_a);
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: DATA STEP view saved on file EMWS8.REPL_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data VARIABLESET;
MPRINT(TRAIN):   set EMWS8.Repl_VariableSet(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y") or (ROLE="INPUT" and USE in("Y", "D")) )));
MPRINT(TRAIN):   if CALCMETHOD eq "DEFAULT" then CALCMETHOD="NONE";
MPRINT(TRAIN):   if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
MPRINT(TRAIN):   run;
 
NOTE: There were 17 observations read from the data set EMWS8.REPL_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=VARIABLESET out=VARIABLESET;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete Repl_LIMITS;
MPRINT(TRAIN):   run;
 
NOTE: Deleting EMWS8.REPL_LIMITS (memtype=DATA).
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
30691
30692      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30693      * End TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * End TRAIN: Repl;
30694      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30695      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30696      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
30697      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30698      ;
MPRINT(EM_DIAGRAM):   ;
30699      ;
MPRINT(EM_DIAGRAM):   ;
30700      ;
MPRINT(EM_DIAGRAM):   ;
30701      ;
MPRINT(EM_DIAGRAM):   ;
30702      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
30703      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
30704      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
30705      *------------------------------------------------------------*;
30706      /*; *"; *'; */
30707      ;
30708      run;
30709      quit;
30710      /* Reset EM Options */
30711      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
30712      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
30713      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                16.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1KWLQKK "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1KWLQKK new;
MPRINT(EM_DIAGRAM):   run;
30815      %let EMEXCEPTIONSTRING=;
30816      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30817      * SCORE: Repl;
MPRINT(EM_DIAGRAM):   * SCORE: Repl;
30818      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30819      %let EM_ACTION = SCORE;
30820      %let syscc = 0;
30821      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
30822      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
30823     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
30824     +   filename macFile catalog 'work.emutil.macro.source';
30825     +   %let _METAOBS = 0;
30827     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
30828     +                   or (&metadata eq ) %then %do;
30829     +       %goto doend;
30830     +   %end;
30831     +   data _null_;
30832     +      length _STRING_ $80;
30833     +      retain _STRING_;
30834     +      set &metadata end=eof;
30835     +      file macFile;
30836     +      %if %nrbquote(&where) ne %then %do;
30837     +          %let whereClause = where (%nrbquote(&where));
30838     +          %unquote(&whereClause);
30839     +      %end;
30840     +      if _N_=1 then do;
30841     +         string = "%"!!"macro &name;";
30842     +         put string;
30843     +      end;
30844     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
30845     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
30846     +         if eof then do;
30847     +            put _STRING_;
30848     +            string = "%"!!"mend &name;";
30849     +            put string;
30850     +            %if (&nummacro ne ) %then %do;
30851     +                string = strip(put(_N_, best.));
30852     +                put "%" "global &nummacro;";
30853     +                put "%" "let &nummacro = " string ";";
30854     +                call symput('_METAOBS', string);
30855     +            %end;
30856     +         end;
30857     +      end;
30858     +      else do;
30859     +         put _STRING_;
30860     +         _string_ = TRIM(&key);
30861     +         if eof then do;
30862     +            put _STRING_;
30863     +            string = "%"!!"mend &name;";
30864     +            put string;
30865     +        end;
30866     +      end;
30867     +      if eof then do;
30868     +         string = strip(put(_N_, best.));
30869     +         call symput('_METAOBS', string);
30870     +         %if (&nummacro ne ) %then %do;
30871     +             put "%" "global &nummacro;";
30872     +             put "%" "let &nummacro = " string ";";
30873     +         %end;
30874     +      end;
30875     +   run;
30877     +   %doend:
30878     +   %if ^&_METAOBS %then %do;
30879     +       data _null_;
30880     +          file macFile;
30881     +          put "%" "macro &name;";
30882     +          put "%" "mend &name;";
30883     +          %if (&nummacro ne ) %then %do;
30884     +              put "%" "global &nummacro;";
30885     +              put "%" "let &nummacro = 0;";
30886     +          %end;
30887     +      run;
30888     +   %end;
30889     +   %inc macFile;
30890     +   filename macFile;
30891     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
30892      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
30893       %macro main;
30894
30895         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
30896         %include temp;
30897         filename temp;
30898
30899         %if %upcase(&EM_ACTION) = CREATE %then %do;
30900
30901             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
30902             %include temp;
30903             filename temp;
30904             %create;
30905         %end;
30906         %else
30907         %if %upcase(&EM_ACTION) = TRAIN %then %do;
30908
30909             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
30910             %include temp;
30911             filename temp;
30912             %train;
30913         %end;
30914         %else
30915         %if %upcase(&EM_ACTION) = SCORE %then %do;
30916
30917             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
30918             %include temp;
30919             filename temp;
30920             %score;
30921         %end;
30922         %if %upcase(&EM_ACTION) = REPORT %then %do;
30923
30924             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
30925             %include temp;
30926             filename temp;
30927             %report;
30928         %end;
30929         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
30930             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30931             %include temp;
30932             filename temp;
30933             %em_replace_openoutclass;
30934         %end;
30935         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
30936             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30937             %include temp;
30938             filename temp;
30939             %em_replace_closeoutclass;
30940         %end;
30941      %mend main;
30942
30943      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
30944     +%macro SetProperties;
30945     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
30946     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
30947     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
30948     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
30949     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
30950     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
30951     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
30952     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
30953     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
30954     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
30956     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
30958     +%macro makeLevelData(data=, outclass=);
30959     +   data REPLACE_MODE;
30960     +      set &OUTCLASS;
30961     +      by NAME;
30962     +      if first.name then do;
30963     +         MODEC    = CRAW;
30964     +         MODEN    = NRAW;
30965     +         NORMMODE = LEVEL;
30966     +         output;
30967     +      end;
30968     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
30969     +   run;
30971     +   proc sort data=&EM_DATA_VARIABLESET;
30972     +      by NAME;
30973     +   run;
30974     +   data &data;
30975     +      length UNKWOWNDEFAULT $8;
30976     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
30977     +      by NAME;
30978     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
30979     +      if _a then output;
30980     +   run;
30981     +   proc datasets lib=work nolist;
30982     +      delete REPLACE_MODE;
30983     +   run;
30984     +   quit;
30985     +%mend makeLevelData;
30987     +%macro makeNewNames(limitDs=, classValue=, className=);
30988     +     %let varname = invarname;
30989     +     %let newname = outname;
30990     +     proc sort data=&classValue out=&varname nodupkey;
30991     +        by NAME;
30992     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
30993     +     run;
30994     +     %let classnum=0;
30995     +     %let dsid = %sysfunc(open(&varname));
30996     +     %if &dsid>0 %then %do;
30997     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
30998     +         %let dsid = %sysfunc(close(&dsid));
30999     +     %end;
31001     +     %let varnum=0;
31002     +     %let dsid = %sysfunc(open(&LimitDs));
31003     +     %if &dsid>0 %then %do;
31004     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
31005     +         %let dsid = %sysfunc(close(&dsid));
31006     +     %end;
31008     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
31009     +         %let lib    = %scan(&classname, 1, .);
31010     +         %let member = %scan(&classname, 2, .);
31011     +          proc datasets lib=&lib nolist;
31012     +             delete &member;
31013     +          run;
31014     +          quit;
31015     +         %goto doendmn;
31016     +     %end;
31018     +     data &varname;
31019     +        set
31020     +        %if &classnum %then %do;
31021     +            &varname(keep=NAME)
31022     +        %end;
31023     +        %if &varnum %then %do;
31024     +            &limitDs(keep=NAME)
31025     +        %end;
31026     +        ;
31027     +     run;
31028     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
31029     +        names NAME;
31030     +        prefix REP_;
31031     +     run;
31032     +     proc sort data=&newname;
31033     +        by NAME;
31034     +     run;
31036     +     /* Merge the new names with the limits data set */
31037     +     %if %sysfunc(exist(&limitDs)) %then %do;
31038     +         data &limitDs;
31039     +            merge &newname &limitDs(in=a);
31040     +            by NAME;
31041     +            if a then output;
31042     +         run;
31044     +         %let lib    = %scan(&limitDs, 1, .);
31045     +         %let member = %scan(&limitDs, 2, .);
31046     +          proc datasets lib=&lib nolist;
31047     +             modify &member;
31048     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
31049     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
31050     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
31051     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
31052     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
31053     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
31054     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
31055     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
31056     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
31057     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
31058     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
31059     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
31060     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
31061     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
31062     +         run;
31063     +         quit;
31064     +     %end;
31066     +     /* Merge the new names with the Class Value data set */
31067     +     %if %sysfunc(exist(&classValue)) %then %do;
31068     +         data length;
31069     +            retain newlen 0;
31070     +            set &classValue;
31071     +            by NAME;
31072     +            if type eq 'C' then do;
31073     +               if first.name then do;
31074     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
31075     +                     newlen = max(length, length(strip(replace_value)));
31076     +                  else
31077     +                     newlen = length;
31078     +               end;
31079     +               else do;
31080     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
31081     +                     newlen = max(newlen, length(strip(replace_value)));
31082     +               end;
31083     +            end;
31084     +            else newlen = length;
31085     +            len=length;
31086     +            if last.name then output;
31087     +            keep name len newlen role format type label mlevel;
31088     +         run;
31089     +         data &className;
31090     +            length rformat formatroot $32;
31091     +            merge &newname(in=a) length(in=b);
31092     +            by NAME;
31093     +            length=len;
31094     +            if newlen > len then do;
31095     +               if type eq 'C' and format ne '' then do;
31096     +                  rformat = strip(reverse(format));
31097     +                  do while(indexc(rformat, '.0123456789')=1);
31098     +                     rformat = substr(rformat, 2);
31099     +                  end;
31100     +                  formatroot= upcase(reverse(rformat));
31101     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
31102     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
31103     +                  end;
31104     +               end;
31105     +               length = newlen;
31106     +            end;
31107     +            if a and b then output;
31108     +            KEEP name newname role format mlevel type label length;
31109     +         run;
31110     +     %end;
31112     +     proc datasets lib=work nolist;
31113     +        delete length &varname &newname;
31114     +     run;
31115     +     quit;
31117     +     %doendmn:
31119     +%mend makeNewNames;
31121     +%macro makeVarDeltaCode(LimitDs=);
31122     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
31124     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
31125     +     data _null_;
31126     +        set &LimitDs end=eof;
31127     +        length string $400;
31128     +        file _F1;
31129     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
31130     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
31131     +        %end;
31132     +        %else %do;
31133     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
31134     +            string = '   ROLE="REJECTED";';                         put string;
31135     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
31136     +            string = 'end;';                                        put string;
31137     +        %end;
31138     +        put 'else';
31139     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
31140     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
31141     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
31142     +        put      'end;';
31143     +        if ^eof then
31144     +           put 'else';
31145     +   run;
31146     +   filename _F1;
31148     +    %doendd:
31149     +%mend makeVarDeltaCode;
31151     +%macro makeVarScoreCode(LimitDs=, File=);
31152     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
31154     +     filename sFile "&file";
31155     +     data &LimitDs;
31156     +        set &LimitDs end=eof;
31157     +        length REPLACEMETHODUSED $8 string $400;
31158     +        file sFile;
31159     +        put'* ;';
31160     +        put'* Variable: ' name ';';
31161     +        put '* ;';
31162     +        if strip(label) = '' then label = name;
31163     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
31164     +        put string;
31165     +        put newname '=' name ';';
31166     +        REPLACEMETHODUSED = REPLACEMETHOD;
31167     +        if REPLACEMETHOD = 'DEFAULT' then
31168     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
31169     +                REPLACEMETHODUSED = 'COMPUTED';
31170     +            %end;
31171     +            %else
31172     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
31173     +                REPLACEMETHODUSED = 'MISSING';
31174     +            %end;
31175     +            %else %do;
31176     +                REPLACEMETHODUSED = 'MANUAL';
31177     +            %end;
31179     +        put 'if ' name ' eq . then ' newname  '= . ;';
31180     +        if LowerLimit ne . then do;
31181     +           select(REPLACEMETHODUSED);
31182     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
31183     +              when('MISSING')  REPLACEMINUSED = .;
31184     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
31185     +              otherwise;
31186     +           end;
31187     +           put 'else';
31188     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
31189     +        end;
31190     +        if upperLimit ne . then do;
31191     +           select(REPLACEMETHODUSED);
31192     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
31193     +              when('MISSING')  REPLACEMAXUSED = .;
31194     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
31195     +              otherwise;
31196     +           end;
31197     +           put 'else';
31198     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
31199     +        end;
31200     +        drop string;
31201     +    run;
31202     +    filename sfile;
31203     +    %doendm:
31204     +%mend makeVarScoreCode;
31207     +%macro makeUnknownOptCode(Folder=, Data=);
31208     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
31210     +    %let dsid = %sysfunc(open(&data));
31211     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
31212     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
31214     +    %let oldname=;
31215     +    %do %while(^%sysfunc(fetch(&dsid)));
31216     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
31217     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
31219     +        %if &name ne &oldname %then %do;
31220     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
31221     +            data _null_;
31222     +               set &Data end=eof;
31223     +               where NAME ="&name";
31224     +               length string $400;
31225     +               length newlevel replaceLevel $400;
31226     +               retain string missingFlag;
31227     +               file _F1;
31228     +               if _N_=1 then do;
31229     +                  put '*;';
31230     +                  if format ne '' then do;
31231     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
31232     +                     put string;
31233     +                     put 'if ^(_UFORMAT200 in(';
31234     +                  end;
31235     +                  else do;
31236     +                     if type eq 'C' then do;
31237     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
31238     +                        put string;
31239     +                        put 'if ^(_UFORMAT200 in(';
31240     +                     end;
31241     +                     else
31242     +                        put 'if (';
31243     +                  end;
31244     +                  string='';
31245     +                  missingFlag = 0;
31246     +               end;
31248     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
31249     +                  if format ne '' or type eq 'C' then do;
31250     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
31251     +                     if strip(newLevel) = '' then missingFlag = 1;
31252     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
31253     +                        if string='' then
31254     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
31255     +                        else
31256     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
31257     +                     end;
31258     +                     else do;
31259     +                        put string;
31260     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
31261     +                     end;
31262     +                  end;
31263     +                  else do;
31264     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
31265     +                     put string;
31266     +                  end;
31267     +                  newlevel = ' ';
31268     +               end;
31269     +               else do;
31270     +                  if format ne '' or type eq 'C' then do;
31271     +                     put string;
31272     +                     if ^missingFlag then
31273     +                        string = ', "" )) then ';
31274     +                     else
31275     +                        string = ')) then ';
31276     +                  end;
31277     +                  else
31278     +                     string = strip(name)!!' ne . ) then ';
31279     +                  put string;
31281     +                 select(REPLACE_VALUE);
31282     +                 when('_MODE_') do;
31283     +                    if type eq 'C' then
31284     +                       replaceLevel = NORMMODE;
31285     +                    else
31286     +                       replaceLevel =strip(put(MODEN,BEST.));
31287     +                 end;
31288     +                 when('_MISSING_') do;
31289     +                    if type eq 'C' then replaceLevel = '';
31290     +                    else replaceLevel = '.';
31291     +                 end;
31292     +                 when('_DEFAULT_') do;
31293     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
31294     +                        if type eq 'C' then
31295     +                           replaceLevel = NORMMODE;
31296     +                        else
31297     +                           replaceLevel = strip(put(MODEN,BEST.));
31298     +                    %end;
31299     +                    %else %do;
31300     +                        if type eq 'C' then replaceLevel = '';
31301     +                         else replaceLevel = '.';
31302     +                    %end;
31303     +                  end;
31304     +                  when('') do;
31305     +                  end;
31306     +                  otherwise do;
31307     +                     if type eq 'C' then replaceLevel= replace_Value;
31308     +                     else replaceLevel = replace_Value;
31309     +                  end;
31310     +               end;
31311     +               if type eq 'C' then do;
31312     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
31313     +               end;
31314     +               else do;
31315     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
31316     +               end;
31317     +               put string;
31318     +            end;
31320     +           run;
31321     +           filename _F1;
31322     +           proc datasets lib=work nolist;
31323     +              delete _temp;
31324     +           run;
31325     +           quit;
31327     +           %let oldname = &name;
31328     +        %end;
31329     +    %end;
31330     +    %let dsid = %sysfunc(close(&dsid));
31332     +    %doendu:
31333     +%mend makeUnknownOptCode;
31335     +%macro makeUnknownCode(ScoreFile=, Data=);
31336     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
31338     +   filename _F1 "&ScoreFile" MOD;
31339     +   data _null_;
31340     +      set &Data;
31341     +      length string $400;
31342     +      length newlevel replaceLevel $200;
31343     +      retain string missingFlag;
31344     +      file _F1;
31345     +      by NAME;
31347     +      if _N_=1 then do;
31348     +         put '* ;';
31349     +         put '* Replace Unknown Class Levels ;';
31350     +         put '* ;';
31351     +         put 'length _UFORMAT200 $200;';
31352     +         put 'drop   _UFORMAT200;';
31353     +         put '_UFORMAT200 = " ";';
31354     +      end;
31356     +      if first.name then do;
31357     +         missingFlag = 0;
31358     +         put '*;';
31360     +         if format ne '' then do;
31361     +            call symput('UFormatFlag', '1');
31362     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
31363     +            put string;
31364     +            put 'if ^(_UFORMAT200 in(';
31365     +         end;
31366     +         else do;
31367     +            if type eq 'C' then do;
31368     +               call symput('UFormatFlag', '1');
31369     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
31370     +               put string;
31371     +               put 'if ^(_UFORMAT200 in(';
31372     +            end;
31373     +            else
31374     +               put 'if (';
31375     +         end;
31376     +         string='';
31377     +      end;
31379     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
31380     +        if format ne '' or type eq 'C' then do;
31381     +           newlevel = tranwrd(strip(LEVEL),'"','""');
31382     +           if strip(newLevel) = '' then missingFlag = 1;
31383     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
31384     +              if string='' then
31385     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
31386     +              else
31387     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
31388     +           end;
31389     +           else do;
31390     +              put string;
31391     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
31392     +           end;
31393     +        end;
31394     +        else do;
31395     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
31396     +           put string;
31397     +        end;
31398     +        newlevel = ' ';
31399     +     end;
31400     +     else do;
31401     +        if format ne '' or type eq 'C' then do;
31402     +           put string;
31403     +           if ^missingFlag then
31404     +              string = ', "" )) then ';
31405     +           else
31406     +              string = ')) then ';
31407     +        end;
31408     +        else
31409     +           string = strip(name)!!' ne . ) then ';
31410     +        put string;
31412     +        select(REPLACE_VALUE);
31413     +           when('_MODE_') do;
31414     +              if type eq 'C' then
31415     +                 replaceLevel = NORMMODE;
31416     +              else
31417     +                 replaceLevel =strip(put(MODEN,BEST.));
31418     +           end;
31419     +           when('_MISSING_') do;
31420     +              if type eq 'C' then replaceLevel = '';
31421     +              else replaceLevel = '.';
31422     +           end;
31423     +           when('_DEFAULT_') do;
31424     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
31425     +                  if type eq 'C' then
31426     +                     replaceLevel = NORMMODE;
31427     +                  else
31428     +                     replaceLevel = strip(put(MODEN,BEST.));
31429     +              %end;
31430     +              %else %do;
31431     +                  if type eq 'C' then replaceLevel = '';
31432     +                  else replaceLevel = '.';
31433     +              %end;
31434     +           end;
31435     +           when('') do;
31436     +           end;
31437     +           otherwise do;
31438     +               if type eq 'C' then replaceLevel= replace_Value;
31439     +               else replaceLevel = replace_Value;
31440     +           end;
31441     +        end;
31442     +        if type eq 'C' then do;
31443     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
31444     +        end;
31445     +        else do;
31446     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
31447     +        end;
31448     +        put string;
31449     +     end;
31451     +     run;
31452     +     filename _F1;
31453     +    %doendm:
31454     +%mend makeUnknownCode;
31456     +%macro makeReplaceCode(ScoreFile=, Data=);
31457     +   filename _F1 "&ScoreFile"  MOD;
31458     +   data _null_;
31459     +      length string $400;
31460     +      set &data end=eof;
31461     +      file _F1;
31462     +      by NAME;
31463     +      if _N_=1 then do;
31464     +         put '   ';
31465     +         put '* ;';
31466     +         put '* Replace Specific Class Levels ;';
31467     +         put '* ;';
31468     +         put 'length _UFormat200 $200;';
31469     +         put 'drop   _UFORMAT200;';
31470     +         put '_UFORMAT200 = " ";';
31471     +      end;
31472     +      if first.name then do;
31473     +         put '* ;';
31474     +         string = '* Variable: '!!strip(NAME)!!';';
31475     +         put string;
31476     +         put '* ;';
31477     +         if format ne '' then do;
31478     +            call symput('UFormatFlag', '1');
31479     +            string = "_UFORMAT200 = strip("; put string;
31480     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
31481     +            put string;
31482     +         end;
31483     +         else
31484     +           if type eq 'C' then do;
31485     +              call symput('UFormatFlag', '1');
31486     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
31487     +              put string;
31488     +           end;
31489     +      end;
31490     +      if ^first.name then
31491     +         put 'else';
31492     +      if format ne '' then do;
31493     +         string = tranwrd(strip(LEVEL),'"','""');
31494     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
31495     +         put string;
31496     +      end;
31497     +      else do;
31498     +         if type eq 'N' then do;
31499     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
31500     +            put string;
31501     +         end;
31502     +         else do;
31503     +            string = tranwrd(strip(craw),'"','""');
31504     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
31505     +            put string;
31506     +         end;
31507     +      end;
31508     +      string = strip(newname)!!'=';
31509     +      if type eq 'C' then do;
31510     +         if upcase(replace_value) eq '_MISSING_' or
31511     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
31512     +         else
31513     +           if upcase(replace_value) eq '_MODE_' or
31514     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
31515     +            then replace_Value =modec;
31516     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
31517     +      end;
31518     +      else do;
31519     +         if upcase(replace_value) eq '_MISSING_' or
31520     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
31521     +         else
31522     +           if upcase(replace_value) eq '_MODE_' or
31523     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
31524     +                  replace_Value =strip(put(moden, BEST.));
31526     +         string = strip(string)!!''!!strip(replace_value)!!';';
31527     +      end;
31528     +      put string;
31529     +    run;
31530     +    filename _F1;
31532     +%mend makeReplaceCode;
31534     +%macro makeReplaceOptCode(Folder=, Data=);
31535     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
31537     +    %let dsid = %sysfunc(open(&data));
31538     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
31539     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
31541     +    %let oldname=;
31542     +    %do %while(^%sysfunc(fetch(&dsid)));
31543     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
31544     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
31546     +        %if &name ne &oldname %then %do;
31547     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
31548     +            data _null_;
31549     +               length string $400;
31550     +               set &Data end=eof;
31551     +               by NAME;
31552     +               where NAME ="&name";
31553     +               file _F1;
31554     +               if _N_=1 then do;
31555     +                  put '* ;';
31556     +                  string = '* Variable: '!!strip(NAME)!!';';
31557     +                  put string;
31558     +                  put '* ;';
31559     +                  if format ne '' then do;
31560     +                     string = "_UFORMAT200 = strip("; put string;
31561     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
31562     +                     put string;
31563     +                  end;
31564     +                  else
31565     +                     if type eq 'C' then do;
31566     +                        call symput('UFormatFlag', '1');
31567     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
31568     +                        put string;
31569     +                    end;
31570     +               end;
31571     +               if ^first.name then
31572     +                  put 'else';
31573     +               if format ne '' then do;
31574     +                  string = tranwrd(strip(LEVEL),'"','""');
31575     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
31576     +                  put string;
31577     +               end;
31578     +               else do;
31579     +                  if type eq 'N' then do;
31580     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
31581     +                     put string;
31582     +                  end;
31583     +                  else do;
31584     +                     string = tranwrd(strip(craw),'"','""');
31585     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
31586     +                     put string;
31587     +                  end;
31588     +               end;
31589     +               string = strip(newname)!!'=';
31590     +               if type eq 'C' then do;
31591     +                  if upcase(replace_value) eq '_MISSING_' or
31592     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
31593     +                  else
31594     +                     if upcase(replace_value) eq '_MODE_' or
31595     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
31596     +                       then replace_Value =modec;
31597     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
31598     +               end;
31599     +              else do;
31600     +                 if upcase(replace_value) eq '_MISSING_' or
31601     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
31602     +                 else
31603     +                    if upcase(replace_value) eq '_MODE_' or
31604     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
31605     +                        replace_Value =strip(put(moden, BEST.));
31607     +                 string = strip(string)!!''!!strip(replace_value)!!';';
31608     +              end;
31609     +             put string;
31610     +          run;
31611     +          filename _F1;
31613     +           %let oldname = &name;
31614     +        %end;
31615     +    %end;
31616     +    %let dsid = %sysfunc(close(&dsid));
31618     +    %doendr:
31620     +%mend makeReplaceOptCode;
31623     +%macro makeNewVarCode(ScoreFile=, Data=);
31624     +   filename _F1 "&ScoreFile"  MOD;
31625     +   data _null_;
31626     +     length string $400;
31627     +      set &data end=eof;
31628     +      file _F1;
31629     +      if _N_=1 then do;
31630     +         put '   ';
31631     +         put '* ;';
31632     +         put '* Defining New Variables;';
31633     +         put '* ;';
31634     +      end;
31635     +      if type eq 'C' then do;
31636     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
31637     +         put string;
31638     +      end;
31639     +      if strip(label) = '' then label = name;
31640     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
31641     +      put string;
31643     +      if format ne '' then do;
31644     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
31645     +         put string;
31646     +      end;
31647     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
31648     +      put string;
31649     +   run;
31650     +%mend makeNewVarCode;
31652     +%macro makeNewVarOptCode(Folder=, Data=);
31653     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
31654     +    data _temp_;set &data;run;
31655     +    %let dsid = %sysfunc(open(_temp_));
31656     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
31657     +    %do %while(^%sysfunc(fetch(&dsid)));
31658     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
31659     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
31661     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
31662     +        data _null_;
31663     +           length string $400;
31664     +           set &data;
31665     +           where NEWNAME="&newname";
31666     +           file _F1;
31667     +           put '   ';
31668     +           put '* ;';
31669     +           put "* Defining: &newname;";
31670     +           put '* ;';
31671     +           if type eq 'C' then  do;
31672     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
31673     +              put string;
31674     +           end;
31675     +           if strip(label) = '' then label = name;
31676     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
31677     +           put string;
31678     +           if format ne '' then do;
31679     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
31680     +              put string;
31681     +           end;
31682     +           string = strip(newname)!!'='!!strip(name)!!';';
31683     +           put string;
31684     +        run;
31685     +    %end;
31686     +    %let dsid = %sysfunc(close(&dsid));
31687     +   %doendo:
31688     +%mend makeNewVarOptCode;
31690     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
31691     +   %let UFormatFlag = 0;
31693     +   %em_register(key=REPLACECODE, type=FOLDER);
31695     +   /* Generating New Variable Score Code */
31696     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
31698     +   data _tempNewVars;
31699     +      set &nameData;
31700     +      where ROLE ne 'TARGET';
31701     +   run;
31702     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
31703     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
31705     +   proc datasets lib=WORK nolist;
31706     +      delete _tempNewVars;
31707     +   run;
31708     +   quit;
31710     +   /* Generating Publish Score Code */
31711     +   data _temp;
31712     +      set &LevelData;
31713     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
31714     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
31715     +      keep NAME;
31716     +   run;
31718     +   data _temp;
31719     +      merge _temp(in=_a) &Leveldata &nameData;
31720     +      by NAME;
31721     +      if _a then output;
31722     +   run;
31724     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
31725     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
31726     +   proc datasets lib=work nolist;
31727     +      delete _temp;
31728     +   run;
31729     +   quit;
31731     +   data _temp;
31732     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
31733     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
31734     +      by NAME;
31735     +      if _a then output;
31736     +   run;
31738     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
31739     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
31741     +   /* Generating Flow Score Code */
31742     +   data _temp;
31743     +      set &LevelData;
31744     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
31745     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
31746     +      keep NAME;
31747     +   run;
31749     +   data _temp;
31750     +      merge _temp(in=_a) &Leveldata &nameData;
31751     +      by NAME;
31752     +      if _a then output;
31753     +   run;
31754     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
31756     +   data _temp;
31757     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
31758     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
31759     +      by NAME;
31760     +      if _a then output;
31761     +   run;
31763     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
31765     +   %if "&UFormatFlag" = "1" %then %do;
31766     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
31767     +       data _null_;
31768     +          file _F1;
31769     +          put 'length _UFormat200 $200;';
31770     +          put 'drop   _UFORMAT200;';
31771     +          put '_UFORMAT200 = " ";';
31772     +       run;
31773     +       filename _F1;
31774     +   %end;
31776     +%mend makeClassScoreCode;
31778     +%macro makeClassDeltaCode(nameData=_newNames);
31779     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
31781     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
31782     +   data _null_;
31783     +        set &nameData end=eof;
31784     +        length string $400;
31785     +        file _F1;
31786     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
31787     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
31788     +        %end;
31789     +        %else %do;
31790     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
31791     +        %end;
31792     +        put 'else';
31793     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
31794     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
31795     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
31796     +        put      'end;';
31797     +        if ^eof then
31798     +           put 'else';
31799     +   run;
31800     +   %doendm:
31801     +   filename _F1;
31802     +%mend makeClassDeltaCode;
31804     +%macro makeValueReport(Data=, outData=);
31805     +   data &outData;
31806     +      set &data;
31807     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
31808     +      if LEVEL = '_UNKNOWN_' then do;
31809     +         LEVEL='Unknown';
31810     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
31811     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
31812     +         else
31813     +            if REPLACE_VALUE ='_MISSING_' then do;
31814     +               if type eq 'N' then REPLACE_VALUE='.';
31815     +               else REPLACE_VALUE='_blank_';
31816     +            end;
31817     +         %end;
31818     +         %else  %do;
31819     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
31820     +         else
31821     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
31822     +               if type eq 'N' then REPLACE_VALUE='.';
31823     +               else REPLACE_VALUE='_blank_';
31824     +            end;
31825     +         %end;
31826     +      end;
31827     +      else do;
31828     +         if REPLACE_VALUE ='_MISSING_' then do;
31829     +            if type eq 'N' then REPLACE_VALUE='.';
31830     +            else REPLACE_VALUE='_blank_';
31831     +         end;
31832     +         else
31833     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
31834     +      end;
31835     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
31836     +   run;
31837     +%mend makeValueReport;
31839     +%macro makeVarOptCode(LimitDs=, Folder=);
31840     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
31842     +    %let dsid = %sysfunc(open(&limitDs));
31843     +    %do %while(^%sysfunc(fetch(&dsid)));
31844     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
31845     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
31847     +    filename sfile "&Folder.&em_dsep.&newname..sas";
31848     +    data _null_;
31849     +       length string $400;
31850     +       set &LimitDs;
31851     +       where NEWNAME="&newname";
31852     +       file sfile;
31853     +       put '* ;';
31854     +       string = '*Variable: '!!strip(name)!!';';
31855     +       put string;
31856     +       put '* ;';
31857     +       if label eq '' then
31858     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
31859     +       else
31860     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
31861     +       put string;
31862     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
31863     +       put string;
31864     +       replacemin = .;
31865     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
31866     +       put string;
31867     +       if LowerLimit ne . then do;
31868     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
31869     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
31870     +          put 'else';
31871     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
31872     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
31873     +          put string;
31874     +       end;
31875     +       if UpperLimit ne . then do;
31876     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
31877     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
31878     +          put 'else';
31879     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
31880     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
31881     +          put string;
31882     +       end;
31883     +        run;
31884     +        filename sfile;
31885     +    %end;
31886     +    %let dsid = %sysfunc(close(&dsid));
31888     +    %doendo:
31889     +%mend makeVarOptCode;
31891     +%macro score;
31892     +   %em_register(key=REPLACECODE, type=FOLDER);
31894     +   filename x catalog 'sashelp.emutil.em_deldir.source';
31895     +   %inc x;
31896     +   filename x;
31897     +   %delDir(folder=%nrbquote(&em_user_replacecode));
31899     +   data _null_; length rc $200;
31900     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
31901     +   run;
31903     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
31904     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
31905     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
31906     +   data _null_;
31907     +      rc=fdelete('_F1');
31908     +      rc=fdelete('_F2');
31909     +      rc=fdelete('_F3');
31910     +   run;
31911     +   filename _F1;
31912     +   filename _F2;
31913     +   filename _F3;
31915     +   %em_getname(key=OUTCLASS,  type=DATA);
31916     +   %em_getname(key=LIMITS, type=DATA);
31917     +   %em_getname(key=CLASSINFO, type=DATA);
31919     +   /* Retrieve Replacement Values for Class Variables */
31920     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
31922     +   /* Generate Names for Replaced Variables */
31923     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
31925     +   /* Generate score and delta code for Var Variables */
31926     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
31927     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
31928     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
31929     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
31930     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
31932     +       proc print data=&EM_USER_LIMITS label noobs;
31933     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
31934     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
31935     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
31936     +          title9  ' ';
31937     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
31938     +       run;
31939     +       title10;
31940     +  %end;
31942     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
31943     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
31944     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
31945     +   %end;
31947     +   %em_getname(key=VALUES, type=DATA);
31948     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
31949     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
31950     +       %let nobs = 0;
31951     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
31952     +       %if &dsid %then %do;
31953     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
31954     +           %let dsid = %sysfunc(close(&dsid));
31955     +       %end;
31956     +       %if &nobs %then
31957     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
31958     +   %end;
31960     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
31961     +       proc print data=&EM_USER_VALUES label noobs;
31962     +          title9  ' ';
31963     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
31964     +      run;
31965     +      title10;
31966     +  %end;
31968     +   proc datasets lib=work nolist;
31969     +      delete CLASSTEMP;
31970     +   run;
31971     +   quit;
31973     +   %em_register(key=EMSCOREVAR, type=DATA);
31974     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
31975     +   proc datasets lib=&em_lib nolist;
31976     +      delete &scorevarDs;
31977     +   run;
31978     +   quit;
31980     +   %let filrf=mydir;
31981     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
31982     +   %let did=%sysfunc(dopen(&filrf));
31984     +   %if &did %then %do;
31985     +       %let memcount=%sysfunc(dnum(&did));
31986     +       %if &memcount > 0 %then %do;
31987     +           data &em_user_emscorevar;
31988     +              length Name $32 formula $70 file $200;
31989     +              keep NAME Formula file;
31991     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
31992     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
31993     +               output;
31994     +           %end;
31995     +           %do i=1 %to &memcount;
31996     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
31997     +               %let newvar = %scan(&name, 1, .);
31998     +               %if "&newvar" ne "_ALL_" %then %do;
31999     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
32000     +                   output;
32001     +               %end;
32002     +           %end;
32003     +           run;
32004     +       %end;
32005     +  %end;
32006     +  %if &did %then %let did = %sysfunc(dclose(&did));
32009     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
32010     +%macro delDir(folder=);
32011     +   %let filrf=mydir;
32012     +   %let rc=%sysfunc(filename(filrf,&folder));
32013     +   %let did=%sysfunc(dopen(&filrf));
32015     +   %if &did %then %do;
32016     +       %let memcount=%sysfunc(dnum(&did));
32017     +       %if &memcount > 0 %then %do;
32018     +           %do i=1 %to &memcount;
32019     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
32020     +               data _null_;
32021     +                  fname="_temp&i";
32022     +                  rc=filename(fname,"&folder&em_dsep.&name");
32023     +                  if rc = 0 and fexist(fname) then
32024     +                     rc=fdelete(fname);
32025     +                  rc=filename(fname);
32026     +               run;
32027     +           %end;
32028     +       %end;
32029     +       %let rc=%sysfunc(dclose(&did));
32030     +   %end;
32031     +   %let rc = %sysfunc(fdelete(&filrf));
32032     +   %let rc=%sysfunc(filename(filrf));
32033     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Dependents.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Gender.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_HouseKeeping.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Kitchen.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Toys.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp8";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "C:\\predictive-models-project\Workspaces\EMWS8\Repl");
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;
 
WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKELEVELDATA):   proc sort data=EMWS8.Repl_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;
 
NOTE: There were 33 observations read from the data set EMWS8.REPL_VARIABLESET.
NOTE: The data set EMWS8.REPL_VARIABLESET has 33 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS8.Repl_OUTCLASS(in=_a) REPLACE_MODE EMWS8.Repl_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "MISSING";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: There were 9 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 11 observations read from the data set EMWS8.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 33 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;
 
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 9 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.INVARNAME has 9 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set invarname(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 9 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.INVARNAME has 9 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 9 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 9 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 9 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 33 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   data EMWS8.Repl_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 9 observations read from the data set WORK.OUTNAME.
NOTE: There were 9 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS8.REPL_CLASSINFO has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
The SAS System
 
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS8.Repl_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 33 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REPL_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVARCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 30 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 8 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;
 
NOTE: There were 8 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp1.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_AcceptedCmp1";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_AcceptedCmp1;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp1.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_AcceptedCmp1';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp2.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_AcceptedCmp2";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_AcceptedCmp2;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp2.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_AcceptedCmp2';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp3.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_AcceptedCmp3";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_AcceptedCmp3;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp3.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_AcceptedCmp3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp4.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_AcceptedCmp4";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_AcceptedCmp4;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp4.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_AcceptedCmp4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp5.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_AcceptedCmp5";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_AcceptedCmp5;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp5.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_AcceptedCmp5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Complain.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Complain";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Complain;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Complain.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 43.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Complain';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Education";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Education;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 45.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Education';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_Marital_Status";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_Marital_Status;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 55.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_Marital_Status';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 8 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 8 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP.
NOTE: There were 33 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 30 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=1018,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 54 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 52.
NOTE: There were 30 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp1.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="AcceptedCmp1";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp1.sas,
      RECFM=V,LRECL=256,File Size (bytes)=163,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 45.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='AcceptedCmp1';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp2.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="AcceptedCmp2";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp2.sas,
      RECFM=V,LRECL=256,File Size (bytes)=163,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 45.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='AcceptedCmp2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp3.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="AcceptedCmp3";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp3.sas,
      RECFM=V,LRECL=256,File Size (bytes)=163,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 45.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='AcceptedCmp3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp4.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="AcceptedCmp4";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp4.sas,
      RECFM=V,LRECL=256,File Size (bytes)=163,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 45.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='AcceptedCmp4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp5.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="AcceptedCmp5";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_AcceptedCmp5.sas,
      RECFM=V,LRECL=256,File Size (bytes)=163,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 45.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='AcceptedCmp5';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Complain.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Complain";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Complain.sas,
      RECFM=V,LRECL=256,File Size (bytes)=139,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 41.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='Complain';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Education";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Education.sas,
      RECFM=V,LRECL=256,File Size (bytes)=171,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 50.
NOTE: There were 6 observations read from the data set WORK._TEMP.
      WHERE NAME='Education';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas" MOD;
MPRINT(MAKEUNKNOWNOPTCODE):   data _null_;
MPRINT(MAKEUNKNOWNOPTCODE):   set _temp end=eof;
MPRINT(MAKEUNKNOWNOPTCODE):   where NAME ="Marital_Status";
MPRINT(MAKEUNKNOWNOPTCODE):   length string $400;
MPRINT(MAKEUNKNOWNOPTCODE):   length newlevel replaceLevel $400;
MPRINT(MAKEUNKNOWNOPTCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNOPTCODE):   file _F1;
MPRINT(MAKEUNKNOWNOPTCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put '*;';
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   string='';
MPRINT(MAKEUNKNOWNOPTCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^eof and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNOPTCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNOPTCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNOPTCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   when('') do;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   otherwise do;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   else do;
MPRINT(MAKEUNKNOWNOPTCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   put string;
MPRINT(MAKEUNKNOWNOPTCODE):   end;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\REP_Marital_Status.sas,
      RECFM=V,LRECL=256,File Size (bytes)=204,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 6 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 52.
NOTE: There were 6 observations read from the data set WORK._TEMP.
      WHERE NAME='Marital_Status';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEUNKNOWNOPTCODE):   proc datasets lib=work nolist;
MPRINT(MAKEUNKNOWNOPTCODE):   delete _temp;
MPRINT(MAKEUNKNOWNOPTCODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: File WORK._TEMP (memtype=DATA) cannot be deleted because it is in use.
MPRINT(MAKEUNKNOWNOPTCODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=2158,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 9 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 9 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: There were 33 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 33 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=1106,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 60 records were written to the file _F1.
      The minimum record length was 2.
      The maximum record length was 52.
NOTE: There were 33 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS8.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=2353,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas" MOD;
MPRINT(MAKECLASSSCORECODE):   data _null_;
MPRINT(MAKECLASSSCORECODE):   file _F1;
MPRINT(MAKECLASSSCORECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKECLASSSCORECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKECLASSSCORECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\REPLACECODE\_ALL_.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=19. April 2016 16.46 Uhr
 
NOTE: 3 records were written to the file _F1.
      The minimum record length was 18.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS8.Repl_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 62 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 46.
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS8.Repl_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;
 
NOTE: There were 9 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS8.REPL_VALUES has 9 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "VALUES";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ReplaceLevels";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64458239853595;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(SCORE):   proc print data=EMWS8.Repl_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.REPL_VALUES.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS8 nolist;
MPRINT(SCORE):   delete Repl_EMSCOREVAR;
MPRINT(SCORE):   run;
 
NOTE: Deleting EMWS8.REPL_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(SCORE):   data EMWS8.Repl_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name='';
MPRINT(SCORE):   file="REPLACECODE\_ALL_.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_AcceptedCmp1";
MPRINT(SCORE):   file="REPLACECODE\REP_AcceptedCmp1.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_AcceptedCmp2";
MPRINT(SCORE):   file="REPLACECODE\REP_AcceptedCmp2.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_AcceptedCmp3";
MPRINT(SCORE):   file="REPLACECODE\REP_AcceptedCmp3.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_AcceptedCmp4";
MPRINT(SCORE):   file="REPLACECODE\REP_AcceptedCmp4.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_AcceptedCmp5";
MPRINT(SCORE):   file="REPLACECODE\REP_AcceptedCmp5.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Complain";
MPRINT(SCORE):   file="REPLACECODE\REP_Complain.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Education";
MPRINT(SCORE):   file="REPLACECODE\REP_Education.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_Marital_Status";
MPRINT(SCORE):   file="REPLACECODE\REP_Marital_Status.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;
 
NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS8.REPL_EMSCOREVAR has 9 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32034
32035      *------------------------------------------------------------*;
32036      * End SCORE: Repl;
32037      *------------------------------------------------------------*;
 
32038      filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32039      *------------------------------------------------------------*;
32040      * Repl: Scoring DATA data;
32041      *------------------------------------------------------------*;
32042      data EMWS8.Repl_TRAIN
32043      / view=EMWS8.Repl_TRAIN
32044      ;
MPRINT(EM_DIAGRAM):   data EMWS8.Repl_TRAIN / view=EMWS8.Repl_TRAIN ;
32045      set EMWS8.Plot_TRAIN
32046      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Plot_TRAIN ;
32047      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMFLOWSCORE.sas.
32048     +
32049     +* ;
MPRINT(EM_DIAGRAM):   * ;
32050     +* Defining New Variables;
MPRINT(EM_DIAGRAM):   * Defining New Variables;
32051     +* ;
MPRINT(EM_DIAGRAM):   * ;
32052     +Label REP_AcceptedCmp1='Replacement: AcceptedCmp1';
MPRINT(EM_DIAGRAM):   Label REP_AcceptedCmp1= 'Replacement: AcceptedCmp1';
32053     +format REP_AcceptedCmp1 BEST.;
MPRINT(EM_DIAGRAM):   format REP_AcceptedCmp1 BEST.;
32054     +REP_AcceptedCmp1= AcceptedCmp1;
MPRINT(EM_DIAGRAM):   REP_AcceptedCmp1= AcceptedCmp1;
32055     +Label REP_AcceptedCmp2='Replacement: AcceptedCmp2';
MPRINT(EM_DIAGRAM):   Label REP_AcceptedCmp2= 'Replacement: AcceptedCmp2';
32056     +format REP_AcceptedCmp2 BEST.;
MPRINT(EM_DIAGRAM):   format REP_AcceptedCmp2 BEST.;
32057     +REP_AcceptedCmp2= AcceptedCmp2;
MPRINT(EM_DIAGRAM):   REP_AcceptedCmp2= AcceptedCmp2;
32058     +Label REP_AcceptedCmp3='Replacement: AcceptedCmp3';
MPRINT(EM_DIAGRAM):   Label REP_AcceptedCmp3= 'Replacement: AcceptedCmp3';
32059     +format REP_AcceptedCmp3 BEST.;
MPRINT(EM_DIAGRAM):   format REP_AcceptedCmp3 BEST.;
32060     +REP_AcceptedCmp3= AcceptedCmp3;
MPRINT(EM_DIAGRAM):   REP_AcceptedCmp3= AcceptedCmp3;
32061     +Label REP_AcceptedCmp4='Replacement: AcceptedCmp4';
MPRINT(EM_DIAGRAM):   Label REP_AcceptedCmp4= 'Replacement: AcceptedCmp4';
32062     +format REP_AcceptedCmp4 BEST.;
MPRINT(EM_DIAGRAM):   format REP_AcceptedCmp4 BEST.;
32063     +REP_AcceptedCmp4= AcceptedCmp4;
MPRINT(EM_DIAGRAM):   REP_AcceptedCmp4= AcceptedCmp4;
32064     +Label REP_AcceptedCmp5='Replacement: AcceptedCmp5';
MPRINT(EM_DIAGRAM):   Label REP_AcceptedCmp5= 'Replacement: AcceptedCmp5';
32065     +format REP_AcceptedCmp5 BEST.;
MPRINT(EM_DIAGRAM):   format REP_AcceptedCmp5 BEST.;
32066     +REP_AcceptedCmp5= AcceptedCmp5;
MPRINT(EM_DIAGRAM):   REP_AcceptedCmp5= AcceptedCmp5;
32067     +Label REP_Complain='Replacement: Complain';
MPRINT(EM_DIAGRAM):   Label REP_Complain= 'Replacement: Complain';
32068     +format REP_Complain BEST.;
MPRINT(EM_DIAGRAM):   format REP_Complain BEST.;
32069     +REP_Complain= Complain;
MPRINT(EM_DIAGRAM):   REP_Complain= Complain;
32070     +Label REP_DepVar='Replacement: DepVar';
MPRINT(EM_DIAGRAM):   Label REP_DepVar= 'Replacement: DepVar';
32071     +format REP_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format REP_DepVar BEST.;
32072     +REP_DepVar= DepVar;
MPRINT(EM_DIAGRAM):   REP_DepVar= DepVar;
32073     +Length REP_Education $10;
MPRINT(EM_DIAGRAM):   Length REP_Education $10;
32074     +Label REP_Education='Replacement: Education';
MPRINT(EM_DIAGRAM):   Label REP_Education= 'Replacement: Education';
32075     +format REP_Education $10.0;
MPRINT(EM_DIAGRAM):   format REP_Education $10.0;
32076     +REP_Education= Education;
MPRINT(EM_DIAGRAM):   REP_Education= Education;
32077     +Length REP_Marital_Status $8;
MPRINT(EM_DIAGRAM):   Length REP_Marital_Status $8;
32078     +Label REP_Marital_Status='Replacement: Marital_Status';
MPRINT(EM_DIAGRAM):   Label REP_Marital_Status= 'Replacement: Marital_Status';
32079     +format REP_Marital_Status $8.0;
MPRINT(EM_DIAGRAM):   format REP_Marital_Status $8.0;
32080     +REP_Marital_Status= Marital_Status;
MPRINT(EM_DIAGRAM):   REP_Marital_Status= Marital_Status;
32081     +* ;
MPRINT(EM_DIAGRAM):   * ;
32082     +* Replace Unknown Class Levels ;
MPRINT(EM_DIAGRAM):   * Replace Unknown Class Levels ;
32083     +* ;
MPRINT(EM_DIAGRAM):   * ;
32084     +length _UFORMAT200 $200;
MPRINT(EM_DIAGRAM):   length _UFORMAT200 $200;
32085     +drop   _UFORMAT200;
MPRINT(EM_DIAGRAM):   drop _UFORMAT200;
32086     +_UFORMAT200 = " ";
MPRINT(EM_DIAGRAM):   _UFORMAT200 = " ";
32087     +*;
MPRINT(EM_DIAGRAM):   *;
32088     +_UFORMAT200 = strip(put(AcceptedCmp1,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(AcceptedCmp1,BEST.));
32089     +if ^(_UFORMAT200 in(
32090     +"0", "1"
32091     +, "" )) then
32092     +REP_AcceptedCmp1= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_AcceptedCmp1= .;
32093     +*;
MPRINT(EM_DIAGRAM):   *;
32094     +_UFORMAT200 = strip(put(AcceptedCmp2,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(AcceptedCmp2,BEST.));
32095     +if ^(_UFORMAT200 in(
32096     +"0", "1"
32097     +, "" )) then
32098     +REP_AcceptedCmp2= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_AcceptedCmp2= .;
32099     +*;
MPRINT(EM_DIAGRAM):   *;
32100     +_UFORMAT200 = strip(put(AcceptedCmp3,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(AcceptedCmp3,BEST.));
32101     +if ^(_UFORMAT200 in(
32102     +"0", "1"
32103     +, "" )) then
32104     +REP_AcceptedCmp3= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_AcceptedCmp3= .;
32105     +*;
MPRINT(EM_DIAGRAM):   *;
32106     +_UFORMAT200 = strip(put(AcceptedCmp4,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(AcceptedCmp4,BEST.));
32107     +if ^(_UFORMAT200 in(
32108     +"0", "1"
32109     +, "" )) then
32110     +REP_AcceptedCmp4= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_AcceptedCmp4= .;
32111     +*;
MPRINT(EM_DIAGRAM):   *;
32112     +_UFORMAT200 = strip(put(AcceptedCmp5,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(AcceptedCmp5,BEST.));
32113     +if ^(_UFORMAT200 in(
32114     +"0", "1"
32115     +, "" )) then
32116     +REP_AcceptedCmp5= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_AcceptedCmp5= .;
32117     +*;
MPRINT(EM_DIAGRAM):   *;
32118     +_UFORMAT200 = strip(put(Complain,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Complain,BEST.));
32119     +if ^(_UFORMAT200 in(
32120     +"0", "1"
32121     +, "" )) then
32122     +REP_Complain= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_Complain= .;
32123     +*;
MPRINT(EM_DIAGRAM):   *;
32124     +_UFORMAT200 = strip(put(DepVar,BEST.));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(DepVar,BEST.));
32125     +if ^(_UFORMAT200 in(
32126     +"0", "1"
32127     +, "" )) then
32128     +REP_DepVar= .;
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "0", "1" , "" )) then REP_DepVar= .;
32129     +*;
MPRINT(EM_DIAGRAM):   *;
32130     +_UFORMAT200 = strip(put(Education,$10.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Education,$10.0));
32131     +if ^(_UFORMAT200 in(
32132     +"Graduation", "PhD", "Master", "2n Cycle", "Basic"
32133     +, "" )) then
32134     +REP_Education= "";
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "Graduation", "PhD", "Master", "2n Cycle", "Basic" , "" )) then REP_Education= "";
32135     +*;
MPRINT(EM_DIAGRAM):   *;
32136     +_UFORMAT200 = strip(put(Marital_Status,$8.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(put(Marital_Status,$8.0));
32137     +if ^(_UFORMAT200 in(
32138     +"Married", "Together", "Single", "Divorced", "Widow"
32139     +, "" )) then
32140     +REP_Marital_Status= "";
MPRINT(EM_DIAGRAM):   if ^(_UFORMAT200 in( "Married", "Together", "Single", "Divorced", "Widow" , "" )) then REP_Marital_Status= "";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32141      run;
 
NOTE: DATA STEP view saved on file EMWS8.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PLOT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
32142      quit;
32143      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
32145      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
32146      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
32147      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
32148      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32149      * Repl: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl: Computing metadata for TRAIN data;
32150      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.REPL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\Repl\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Repl_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Repl_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Repl_TRAIN out=WORK.M2AY4867 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2AY4867;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2AY4867(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2AY4867;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2AY4867;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M357NAG6 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ESPRTZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   set WORK.M357NAG6;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Plot_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Plot_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Repl_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="AcceptedCmp1" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_AcceptedCmp1" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="AcceptedCmp2" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_AcceptedCmp2" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="AcceptedCmp3" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_AcceptedCmp3" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="AcceptedCmp4" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_AcceptedCmp4" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="AcceptedCmp5" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_AcceptedCmp5" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Complain" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Complain" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="DepVar" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_DepVar" then do;
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Education" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Education" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="Marital_Status" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_Marital_Status" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.REPL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                19. April 2016
Time:                16.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3HIPTY3 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3HIPTY3 new;
MPRINT(EM_DIAGRAM):   run;
32534      %let EMEXCEPTIONSTRING=;
32535      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32536      * REPORT: Repl;
MPRINT(EM_DIAGRAM):   * REPORT: Repl;
32537      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32538      %let EM_ACTION = REPORT;
32539      %let syscc = 0;
32540      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
32541      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
32542     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
32543     +   filename macFile catalog 'work.emutil.macro.source';
32544     +   %let _METAOBS = 0;
32546     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
32547     +                   or (&metadata eq ) %then %do;
32548     +       %goto doend;
32549     +   %end;
32550     +   data _null_;
32551     +      length _STRING_ $80;
32552     +      retain _STRING_;
32553     +      set &metadata end=eof;
32554     +      file macFile;
32555     +      %if %nrbquote(&where) ne %then %do;
32556     +          %let whereClause = where (%nrbquote(&where));
32557     +          %unquote(&whereClause);
32558     +      %end;
32559     +      if _N_=1 then do;
32560     +         string = "%"!!"macro &name;";
32561     +         put string;
32562     +      end;
32563     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
32564     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
32565     +         if eof then do;
32566     +            put _STRING_;
32567     +            string = "%"!!"mend &name;";
32568     +            put string;
32569     +            %if (&nummacro ne ) %then %do;
32570     +                string = strip(put(_N_, best.));
32571     +                put "%" "global &nummacro;";
32572     +                put "%" "let &nummacro = " string ";";
32573     +                call symput('_METAOBS', string);
32574     +            %end;
32575     +         end;
32576     +      end;
32577     +      else do;
32578     +         put _STRING_;
32579     +         _string_ = TRIM(&key);
32580     +         if eof then do;
32581     +            put _STRING_;
32582     +            string = "%"!!"mend &name;";
32583     +            put string;
32584     +        end;
32585     +      end;
32586     +      if eof then do;
32587     +         string = strip(put(_N_, best.));
32588     +         call symput('_METAOBS', string);
32589     +         %if (&nummacro ne ) %then %do;
32590     +             put "%" "global &nummacro;";
32591     +             put "%" "let &nummacro = " string ";";
32592     +         %end;
32593     +      end;
32594     +   run;
32596     +   %doend:
32597     +   %if ^&_METAOBS %then %do;
32598     +       data _null_;
32599     +          file macFile;
32600     +          put "%" "macro &name;";
32601     +          put "%" "mend &name;";
32602     +          %if (&nummacro ne ) %then %do;
32603     +              put "%" "global &nummacro;";
32604     +              put "%" "let &nummacro = 0;";
32605     +          %end;
32606     +      run;
32607     +   %end;
32608     +   %inc macFile;
32609     +   filename macFile;
32610     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
32611      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
32612       %macro main;
32613
32614         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
32615         %include temp;
32616         filename temp;
32617
32618         %if %upcase(&EM_ACTION) = CREATE %then %do;
32619
32620             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
32621             %include temp;
32622             filename temp;
32623             %create;
32624         %end;
32625         %else
32626         %if %upcase(&EM_ACTION) = TRAIN %then %do;
32627
32628             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
32629             %include temp;
32630             filename temp;
32631             %train;
32632         %end;
32633         %else
32634         %if %upcase(&EM_ACTION) = SCORE %then %do;
32635
32636             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
32637             %include temp;
32638             filename temp;
32639             %score;
32640         %end;
32641         %if %upcase(&EM_ACTION) = REPORT %then %do;
32642
32643             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
32644             %include temp;
32645             filename temp;
32646             %report;
32647         %end;
32648         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
32649             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
32650             %include temp;
32651             filename temp;
32652             %em_replace_openoutclass;
32653         %end;
32654         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
32655             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
32656             %include temp;
32657             filename temp;
32658             %em_replace_closeoutclass;
32659         %end;
32660      %mend main;
32661
32662      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
32663     +%macro SetProperties;
32664     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
32665     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
32666     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
32667     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
32668     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
32669     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
32670     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
32671     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
32672     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
32673     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
32675     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_REPORT.SOURCE.
32677     +%macro makeNameDs(namedata=, limitDs=, classname=);
32678     +    %let classnum=0;
32679     +    %let dsid = %sysfunc(open(&classname));
32680     +    %if &dsid>0 %then %do;
32681     +        %let classnum = %sysfunc(attrn(&dsid, NOBS));
32682     +        %let dsid = %sysfunc(close(&dsid));
32683     +    %end;
32685     +    %let varnum=0;
32686     +    %let dsid = %sysfunc(open(&LimitDs));
32687     +    %if &dsid>0 %then %do;
32688     +        %let varnum = %sysfunc(attrn(&dsid, NOBS));
32689     +        %let dsid = %sysfunc(close(&dsid));
32690     +    %end;
32691     +    %if ^&varnum and  ^&classnum %then %goto doendmnd;
32693     +    data &nameData;
32694     +       set
32695     +       %if &varnum %then %do;
32696     +          &limitDs
32697     +      %end;
32698     +      %if &classnum %then %do;
32699     +          &classname
32700     +      %end;
32701     +    ;
32702     +    run;
32703     +    proc sort data=&nameData;
32704     +       by name;
32705     +    run;
32707     +    %doendmnd:
32708     +%mend makeNameDs;
32710     +%macro countReplace(FileRef1=, dataRole=, data=, CountData=);
32711     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, VIEW))) or (&data eq ) %then %goto doendm;
32713     +   data _temp;
32714     +      length DataRole $8;
32715     +      DataRole ="&DataRole";
32716     +      array _ReplaceCount{&ReplaceNum} (
32717     +      %do i=1 %to &ReplaceNum;
32718     +          0
32719     +      %end;
32720     +      );
32721     +      array _DIFF{&ReplaceNum};
32722     +      retain _ReplaceCount1 -- _ReplaceCount&ReplaceNum;
32723     +      set &data end=eof;
32724     +      %inc &FileRef1;
32725     +      do i=1 to &ReplaceNum;
32726     +         if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
32727     +      end;
32728     +      keep DataRole _ReplaceCount:;
32729     +      if eof then
32730     +         output;
32731     +   run;
32732     +   proc append base=&CountData data=_temp;
32733     +   run;
32734     +   proc datasets lib=WORK nolist;
32735     +      delete _temp;
32736     +   run;
32738     +   %doendm:
32740     +%mend;
32742     +%macro makeCountReport(nameData=, outData=countData);
32743     +   %if ^%sysfunc(exist(&nameData))%then %goto doendmc;
32745     +   %global ReplaceNum;
32746     +   %let ReplaceNum=0;
32747     +   %let dsid = %sysfunc(open(&namedata));
32748     +   %if &dsid>0 %then %do;
32749     +       %let ReplaceNum = %sysfunc(attrn(&dsid, NOBS));
32750     +       %let dsid = %sysfunc(close(&dsid));
32751     +   %end;
32752     +   %if ^&ReplaceNum %then %goto doendmc;
32754     +   %EM_REGISTER(key=DiffCode, TYPE=FILE, EXTENSION=sas);
32755     +   filename _F1 "&EM_USER_DiffCode";
32757     +   data _null_;
32758     +      length string $200;
32759     +      set &namedata;
32760     +      file _F1;
32761     +      string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
32762     +      put string;
32763     +      string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
32764     +      put string;
32765     +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
32766     +      put string;
32767     +      put ' else ';
32768     +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
32769     +      put string;
32770     +   run;
32771     +   %countReplace(FileRef1=_F1, dataRole=Train, data=&EM_EXPORT_TRAIN,    CountData=_tempCount);
32772     +   %countReplace(FileRef1=_F1, dataRole=Valide,data=&EM_EXPORT_VALIDATE, CountData=_tempCount);
32773     +   %countReplace(FileRef1=_F1, dataRole=Test,  data=&EM_EXPORT_TEST,     CountData=_tempCount);
32775     +   filename _F1;
32777     +   %let validateFlag = 0;
32778     +   %let testFlag     = 0;
32779     +   %if (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW)))
32780     +                  and (&EM_IMPORT_VALIDATE ne ) %then %do;
32781     +        %let validateFlag = 1;
32782     +    %end;
32783     +    %if (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST, VIEW)))
32784     +                    and (&EM_IMPORT_TEST ne ) %then %do;
32785     +          %let testFlag   = 1;
32786     +    %end;
32788     +    proc transpose data=_tempCount out=&outData(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN
32789     +      %if &validateFlag = 1 %then %do;
32790     +          Col2=VALIDATE
32791     +      %end;
32792     +      %if &testFlag = 1 %then %do;
32793     +          Col3=TEST
32794     +      %end;
32796     +      ));
32797     +   run;
32799     +   %let lib = WORK;
32800     +   %if %index(&outData, .) %then %do;
32801     +       %let lib    = %scan(&outData, 1, .);
32802     +       %let member = %scan(&outData, 2, .);
32803     +   %end;
32804     +   %else
32805     +       %let member = &outData;
32806     +  proc sort data=&outdata;
32807     +     by name;
32808     +  run;
32809     +  data &outData;
32810     +      merge &namedata(keep=NAME ROLE LABEL) &outData;
32811     +      by NAME;
32812     +   run;
32813     +   proc datasets lib=&lib nolist;
32814     +      modify &member;
32815     +      label NAME =  "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
32816     +            ROLE =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel   , NOQUOTE))"
32817     +            LABEL=  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))"
32818     +            TRAIN=  "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel   , NOQUOTE))"
32819     +      %if &validateFlag = 1 %then %do;
32820     +            VALIDATE= "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel   , NOQUOTE))"
32821     +      %end;
32822     +      %if &testFlag = 1 %then %do;
32823     +            TEST= "%sysfunc(sasmsg(sashelp.dmine, rpt_test_vlabel   , NOQUOTE))"
32824     +      %end;
32825     +      ;
32826     +   run;
32827     +   proc print data=&em_user_count label;
32828     +      title9  ' ';
32829     +      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_replacecount_title, NOQUOTE))";
32830     +   run;
32831     +   title10;
32832     +   proc datasets lib=WORK nolist;
32833     +      delete _tempCount;
32834     +   run;
32836     +  %doendmc:
32837     +%mend makeCountReport;
32839     +%macro report;
32840     +   %em_getname(key=COUNT,        type=DATA);
32841     +   %em_getname(key=REPORTLIMITS, type=DATA);
32842     +   %em_getname(key=LIMITS,       type=DATA);
32843     +   %em_getname(key=CLASSINFO,    type=DATA);
32845     +  /* Generating Reports */
32846     +   %let lib     = %scan(&EM_USER_COUNT, 1, .);
32847     +   %let member =;
32848     +   %if %sysfunc(exist(&em_user_reportlimits)) %then %let member = %scan(&EM_USER_REPORTLIMITS, 2, .);
32849     +   %if %sysfunc(exist(&em_user_count))        %then %let member = &member %scan(&EM_USER_count, 2, .);
32850     +   %if "&member" ne "" %then %do;
32851     +       proc datasets lib=&lib nolist;
32852     +         delete &member;
32853     +       run;
32854     +       quit;
32855     +   %end;
32857     +   %let limitFlag = %sysfunc(exist(&em_user_limits));
32858     +    %if ^&limitFlag and  ^%sysfunc(exist(&em_user_classinfo)) %then %goto doendr;
32860     +    %if &limitFlag %then %do;
32861     +        data &em_user_reportlimits;
32862     +           set &em_user_limits;
32863     +           label REPLACEMETHODUSED = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
32864     +                 REPLACEMINUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
32865     +                 REPLACEMAXUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
32866     +           drop ROLE LEVEL REPLACEMETHOD REPLACEMIN REPLACEMAX;
32867     +        run;
32868     +        %EM_REPORT(key=REPORTLIMITS,  viewtype=DATA, block=MODEL, description=ReplaceInterval, autoDisplay=Y);
32869     +    %end;
32871     +    %if &em_property_CountReport=Y %then %do;
32872     +        %makeNameDs(namedata=newVarInfo, limitDs=&em_user_limits, classname=&em_user_classinfo);
32874     +        %let labeloption = %sysfunc(getoption(label));
32875     +        options LABEL;run;
32877     +        %makeCountReport(namedata=newVarInfo, outdata=&EM_USER_COUNT);
32879     +        options &labeloption;run;
32881     +        %EM_REPORT(key=COUNT, viewtype=DATA, block=MODEL, description=ReplaceCount, autoDisplay=Y);
32882     +   %end;
32883     +   proc datasets lib=WORK nolist;
32884     +      delete newVarInfo;
32885     +   run;
32886     +   %doendr:
32887     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(MAKENAMEDS):   data newVarInfo;
MPRINT(MAKENAMEDS):   set EMWS8.Repl_CLASSINFO ;
MPRINT(MAKENAMEDS):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.REPL_CLASSINFO.
NOTE: The data set WORK.NEWVARINFO has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENAMEDS):   proc sort data=newVarInfo;
MPRINT(MAKENAMEDS):   by name;
MPRINT(MAKENAMEDS):   run;
 
NOTE: There were 9 observations read from the data set WORK.NEWVARINFO.
NOTE: The data set WORK.NEWVARINFO has 9 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   options LABEL;
MPRINT(REPORT):  run;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("DiffCode");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "DiffCode";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "sas";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\DiffCode.sas";
MPRINT(MAKECOUNTREPORT):   data _null_;
MPRINT(MAKECOUNTREPORT):   length string $200;
MPRINT(MAKECOUNTREPORT):   set newVarInfo;
MPRINT(MAKECOUNTREPORT):   file _F1;
MPRINT(MAKECOUNTREPORT):   string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   put ' else ';
MPRINT(MAKECOUNTREPORT):   string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Repl\DiffCode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 16.46 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 45 records were written to the file _F1.
      The minimum record length was 6.
      The maximum record length was 44.
NOTE: There were 9 observations read from the data set WORK.NEWVARINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(COUNTREPLACE):   data _temp;
MPRINT(COUNTREPLACE):   length DataRole $8;
MPRINT(COUNTREPLACE):   DataRole ="Train";
MPRINT(COUNTREPLACE):   array _ReplaceCount{9} ( 0 0 0 0 0 0 0 0 0 );
MPRINT(COUNTREPLACE):   array _DIFF{9};
MPRINT(COUNTREPLACE):   retain _ReplaceCount1 -- _ReplaceCount9;
MPRINT(COUNTREPLACE):   set EMWS8.Repl_TRAIN end=eof;
NOTE: %INCLUDE (level 1) file _F1 is file C:\\predictive-models-project\Workspaces\EMWS8\Repl\DiffCode.sas.
32888     +Label _ReplaceCount1 = "AcceptedCmp1";
MPRINT(COUNTREPLACE):   Label _ReplaceCount1 = "AcceptedCmp1";
32889     +if AcceptedCmp1 ne REP_AcceptedCmp1 then
32890     +_DIFF1= 1;
MPRINT(COUNTREPLACE):   if AcceptedCmp1 ne REP_AcceptedCmp1 then _DIFF1= 1;
32891     + else
32892     +_DIFF1= 0;
MPRINT(COUNTREPLACE):   else _DIFF1= 0;
32893     +Label _ReplaceCount2 = "AcceptedCmp2";
MPRINT(COUNTREPLACE):   Label _ReplaceCount2 = "AcceptedCmp2";
32894     +if AcceptedCmp2 ne REP_AcceptedCmp2 then
32895     +_DIFF2= 1;
MPRINT(COUNTREPLACE):   if AcceptedCmp2 ne REP_AcceptedCmp2 then _DIFF2= 1;
32896     + else
32897     +_DIFF2= 0;
MPRINT(COUNTREPLACE):   else _DIFF2= 0;
32898     +Label _ReplaceCount3 = "AcceptedCmp3";
MPRINT(COUNTREPLACE):   Label _ReplaceCount3 = "AcceptedCmp3";
32899     +if AcceptedCmp3 ne REP_AcceptedCmp3 then
32900     +_DIFF3= 1;
MPRINT(COUNTREPLACE):   if AcceptedCmp3 ne REP_AcceptedCmp3 then _DIFF3= 1;
32901     + else
32902     +_DIFF3= 0;
MPRINT(COUNTREPLACE):   else _DIFF3= 0;
32903     +Label _ReplaceCount4 = "AcceptedCmp4";
MPRINT(COUNTREPLACE):   Label _ReplaceCount4 = "AcceptedCmp4";
32904     +if AcceptedCmp4 ne REP_AcceptedCmp4 then
32905     +_DIFF4= 1;
MPRINT(COUNTREPLACE):   if AcceptedCmp4 ne REP_AcceptedCmp4 then _DIFF4= 1;
32906     + else
32907     +_DIFF4= 0;
MPRINT(COUNTREPLACE):   else _DIFF4= 0;
32908     +Label _ReplaceCount5 = "AcceptedCmp5";
MPRINT(COUNTREPLACE):   Label _ReplaceCount5 = "AcceptedCmp5";
32909     +if AcceptedCmp5 ne REP_AcceptedCmp5 then
32910     +_DIFF5= 1;
MPRINT(COUNTREPLACE):   if AcceptedCmp5 ne REP_AcceptedCmp5 then _DIFF5= 1;
32911     + else
32912     +_DIFF5= 0;
MPRINT(COUNTREPLACE):   else _DIFF5= 0;
32913     +Label _ReplaceCount6 = "Complain";
MPRINT(COUNTREPLACE):   Label _ReplaceCount6 = "Complain";
32914     +if Complain ne REP_Complain then
32915     +_DIFF6= 1;
MPRINT(COUNTREPLACE):   if Complain ne REP_Complain then _DIFF6= 1;
32916     + else
32917     +_DIFF6= 0;
MPRINT(COUNTREPLACE):   else _DIFF6= 0;
32918     +Label _ReplaceCount7 = "DepVar";
MPRINT(COUNTREPLACE):   Label _ReplaceCount7 = "DepVar";
32919     +if DepVar ne REP_DepVar then
32920     +_DIFF7= 1;
MPRINT(COUNTREPLACE):   if DepVar ne REP_DepVar then _DIFF7= 1;
32921     + else
32922     +_DIFF7= 0;
MPRINT(COUNTREPLACE):   else _DIFF7= 0;
32923     +Label _ReplaceCount8 = "Education";
MPRINT(COUNTREPLACE):   Label _ReplaceCount8 = "Education";
32924     +if Education ne REP_Education then
32925     +_DIFF8= 1;
MPRINT(COUNTREPLACE):   if Education ne REP_Education then _DIFF8= 1;
32926     + else
32927     +_DIFF8= 0;
MPRINT(COUNTREPLACE):   else _DIFF8= 0;
32928     +Label _ReplaceCount9 = "Marital_Status";
MPRINT(COUNTREPLACE):   Label _ReplaceCount9 = "Marital_Status";
32929     +if Marital_Status ne REP_Marital_Status then
32930     +_DIFF9= 1;
MPRINT(COUNTREPLACE):   if Marital_Status ne REP_Marital_Status then _DIFF9= 1;
32931     + else
32932     +_DIFF9= 0;
MPRINT(COUNTREPLACE):   else _DIFF9= 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(COUNTREPLACE):   do i=1 to 9;
MPRINT(COUNTREPLACE):   if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
MPRINT(COUNTREPLACE):   end;
MPRINT(COUNTREPLACE):   keep DataRole _ReplaceCount:;
MPRINT(COUNTREPLACE):   if eof then output;
MPRINT(COUNTREPLACE):   run;
 
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: View EMWS8.REPL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 3500 observations read from the data set EMWS8.PLOT_TRAIN.
NOTE: There were 3500 observations read from the data set EMWS8.REPL_TRAIN.
NOTE: The data set WORK._TEMP has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(COUNTREPLACE):   proc append base=_tempCount data=_temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Appending WORK._TEMP to WORK._TEMPCOUNT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMPCOUNT has 1 observations and 10 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(COUNTREPLACE):   proc datasets lib=WORK nolist;
MPRINT(COUNTREPLACE):   delete _temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc transpose data=_tempCount out=EMWS8.Repl_COUNT(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN ));
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMPCOUNT.
NOTE: The data set EMWS8.REPL_COUNT has 9 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc sort data=EMWS8.Repl_COUNT;
MPRINT(MAKECOUNTREPORT):   by name;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.REPL_COUNT.
NOTE: The data set EMWS8.REPL_COUNT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):   data EMWS8.Repl_COUNT;
MPRINT(MAKECOUNTREPORT):   merge newVarInfo(keep=NAME ROLE LABEL) EMWS8.Repl_COUNT;
MPRINT(MAKECOUNTREPORT):   by NAME;
MPRINT(MAKECOUNTREPORT):   run;
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 9 observations read from the data set WORK.NEWVARINFO.
NOTE: There were 9 observations read from the data set EMWS8.REPL_COUNT.
NOTE: The data set EMWS8.REPL_COUNT has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc datasets lib=EMWS8 nolist;
MPRINT(MAKECOUNTREPORT):   modify Repl_COUNT;
MPRINT(MAKECOUNTREPORT):   label NAME = "Variable" ROLE = "Role" LABEL= "Label" TRAIN= "Train" ;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: MODIFY was successful for EMWS8.REPL_COUNT.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc print data=EMWS8.Repl_COUNT label;
MPRINT(MAKECOUNTREPORT):   title9 ' ';
MPRINT(MAKECOUNTREPORT):   title10 "Replacement Counts";
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.REPL_COUNT.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):   title10;
MPRINT(MAKECOUNTREPORT):   proc datasets lib=WORK nolist;
MPRINT(MAKECOUNTREPORT):   delete _tempCount;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: Deleting WORK._TEMPCOUNT (memtype=DATA).
MPRINT(REPORT):  ;
MPRINT(REPORT):   options LABEL;
MPRINT(REPORT):  run;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COUNT";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ReplaceCount";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.6188209129585;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets lib=WORK nolist;
MPRINT(REPORT):   delete newVarInfo;
MPRINT(REPORT):   run;
 
NOTE: Deleting WORK.NEWVARINFO (memtype=DATA).
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
32933
32934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32935      * End REPORT: Repl;
MPRINT(EM_DIAGRAM):   * End REPORT: Repl;
32936      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32937      /* Reset EM Options */
32938      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
32939      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
32940      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
32941      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.EM_USER_REPORT;
32942      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
32943      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
