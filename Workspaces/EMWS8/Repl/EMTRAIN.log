MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H21m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                05 de Março de 2016
Time:                11H21m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3LH2X7H "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3LH2X7H new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H21m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "05 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11H21m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'E:\Datamining\DataMining_Lab\Tugas\Workspaces\EMWS8\Repl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21148      proc freq data=EMWS8.Repl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Repl_VariableSet noprint;
21149      table ROLE*LEVEL/out=WORK.ReplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReplMETA;
21150      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS8.REPL_VARIABLESET.
NOTE: The data set WORK.REPLMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

21151      proc print data=WORK.ReplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReplMETA label noobs;
21152      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21153      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21154      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21155      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21156      run;

NOTE: There were 5 observations read from the data set WORK.REPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21157      title10;
MPRINT(EM_DIAGRAM):   title10;
21158      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21500      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21501      * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
21502      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21503      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21504      %let EMEXCEPTIONSTRING=;
21505      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21506      * TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * TRAIN: Repl;
21507      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21508      %let EM_ACTION = TRAIN;
21509      %let syscc = 0;
21510      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
21511      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21512     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21513     +   filename macFile catalog 'work.emutil.macro.source';
21514     +   %let _METAOBS = 0;
21516     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21517     +                   or (&metadata eq ) %then %do;
21518     +       %goto doend;
21519     +   %end;
21520     +   data _null_;
21521     +      length _STRING_ $80;
21522     +      retain _STRING_;
21523     +      set &metadata end=eof;
21524     +      file macFile;
21525     +      %if %nrbquote(&where) ne %then %do;
21526     +          %let whereClause = where (%nrbquote(&where));
21527     +          %unquote(&whereClause);
21528     +      %end;
21529     +      if _N_=1 then do;
21530     +         string = "%"!!"macro &name;";
21531     +         put string;
21532     +      end;
21533     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21534     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21535     +         if eof then do;
21536     +            put _STRING_;
21537     +            string = "%"!!"mend &name;";
21538     +            put string;
21539     +            %if (&nummacro ne ) %then %do;
21540     +                string = strip(put(_N_, best.));
21541     +                put "%" "global &nummacro;";
21542     +                put "%" "let &nummacro = " string ";";
21543     +                call symput('_METAOBS', string);
21544     +            %end;
21545     +         end;
21546     +      end;
21547     +      else do;
21548     +         put _STRING_;
21549     +         _string_ = TRIM(&key);
21550     +         if eof then do;
21551     +            put _STRING_;
21552     +            string = "%"!!"mend &name;";
21553     +            put string;
21554     +        end;
21555     +      end;
21556     +      if eof then do;
21557     +         string = strip(put(_N_, best.));
21558     +         call symput('_METAOBS', string);
21559     +         %if (&nummacro ne ) %then %do;
21560     +             put "%" "global &nummacro;";
21561     +             put "%" "let &nummacro = " string ";";
21562     +         %end;
21563     +      end;
21564     +   run;
21566     +   %doend:
21567     +   %if ^&_METAOBS %then %do;
21568     +       data _null_;
21569     +          file macFile;
21570     +          put "%" "macro &name;";
21571     +          put "%" "mend &name;";
21572     +          %if (&nummacro ne ) %then %do;
21573     +              put "%" "global &nummacro;";
21574     +              put "%" "let &nummacro = 0;";
21575     +          %end;
21576     +      run;
21577     +   %end;
21578     +   %inc macFile;
21579     +   filename macFile;
21580     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
21581      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
21582       %macro main;
21583      
21584         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
21585         %include temp;
21586         filename temp;
21587      
21588         %if %upcase(&EM_ACTION) = CREATE %then %do;
21589      
21590             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
21591             %include temp;
21592             filename temp;
21593             %create;
21594         %end;
21595         %else
21596         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21597      
21598             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
21599             %include temp;
21600             filename temp;
21601             %train;
21602         %end;
21603         %else
21604         %if %upcase(&EM_ACTION) = SCORE %then %do;
21605      
21606             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
21607             %include temp;
21608             filename temp;
21609             %score;
21610         %end;
21611         %if %upcase(&EM_ACTION) = REPORT %then %do;
21612      
21613             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
21614             %include temp;
21615             filename temp;
21616             %report;
21617         %end;
21618         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
21619             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
21620             %include temp;
21621             filename temp;
21622             %em_replace_openoutclass;
21623         %end;
21624         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
21625             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
21626             %include temp;
21627             filename temp;
21628             %em_replace_closeoutclass;
21629         %end;
21630      %mend main;
21631      
21632      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
21633     +%macro SetProperties;
21634     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
21635     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
21636     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
21637     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
21638     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
21639     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
21640     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
21641     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
21642     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
21643     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
21645     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
21647     +%macro getLevels(outData=);
21648     +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
21649     +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
21650     +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
21651     +       data &outData;
21652     +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
21653     +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
21654     +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
21655     +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
21656     +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
21657     +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
21658     +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
21659     +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
21660     +          stop;
21661     +       run;
21662     +   %end;
21663     +   %else %do;
21664     +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
21665     +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
21666     +            %let EM_TRAIN_MAXLEVELS= 512;
21668     +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
21669     +          class
21670     +            %EM_BINARY_TARGET
21671     +            %EM_ORDINAL_TARGET
21672     +            %EM_NOMINAL_TARGET
21673     +            %EM_BINARY_INPUT
21674     +            %EM_ORDINAL_INPUT
21675     +            %EM_NOMINAL_INPUT
21676     +            %EM_BINARY_REJECTED
21677     +            %EM_ORDINAL_REJECTED
21678     +            %EM_NOMINAL_REJECTED;
21679     +          %if (%EM_FREQ ne ) %then %do;
21680     +             freq %EM_FREQ;
21681     +         %end;
21682     +       run;
21683     +   %end;
21684     +%mend getLevels;
21686     +%macro makeOutCLass;
21687     +   %em_getname(key=OUTCLASS,  type=DATA);
21688     +   %em_getname(key=NEWVALUES, type=DATA);
21690     +   %let data= REPLACE_DATA;
21691     +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
21692     +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
21693     +          set &EM_USER_OUTCLASS;
21694     +          keep NAME TYPE LEVEL REPLACE_VALUE;
21695     +          where REPLACE_VALUE ne '';
21696     +       run;
21697     +       proc sort data=&Data;
21698     +          by NAME TYPE LEVEL;
21699     +       run;
21700     +   %end;
21702     +   %getLevels(outdata=&EM_USER_OUTCLASS);
21704     +   /* Determine Mode */
21705     +   proc sort data=&EM_USER_OUTCLASS;
21706     +      by NAME DESCENDING FREQUENCY;
21707     +   run;
21708     +   data _null_;
21709     +      dsid = open("&EM_USER_OUTCLASS");
21710     +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
21711     +      dsid = close(dsid);
21712     +      call symput("levelLen", put(max(levelLen, 9), BEST.));
21713     +   run;
21715     +   data &EM_USER_OUTCLASS;
21716     +      length Name $32 LEVEL $&levelLen;
21717     +      set &EM_USER_OUTCLASS;
21718     +      length REPLACE_VALUE $200;
21719     +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
21720     +      by NAME;
21721     +      output;
21722     +      if last.name then do;
21723     +         LEVEL="_UNKNOWN_";
21724     +         Frequency=.;
21725     +         CRAW='';
21726     +         NRAW=.;
21727     +         REPLACE_VALUE="_DEFAULT_";
21728     +         output;
21729     +      end;
21730     +   run;
21732     +   /* If the file is a copy of an existing one.  Merge previously specified values */
21733     +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
21734     +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
21735     +          by NAME TYPE LEVEL;
21736     +       run;
21737     +       proc sort data=&EM_USER_OUTCLASS;
21738     +          by NAME TYPE LEVEL;
21739     +       run;
21740     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
21741     +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
21742     +          by NAME TYPE LEVEL;
21743     +          if _a then do;
21744     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
21745     +             output;
21746     +          end;
21747     +       run;
21748     +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
21749     +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
21750     +       proc datasets lib=&lib nolist;
21751     +          delete &member;
21752     +       run;
21754     +   %end;
21756     +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
21757     +   %if %sysfunc(exist(&Data)) %then %do;
21758     +       proc sort data=&EM_USER_OUTCLASS;
21759     +          by NAME TYPE LEVEL;
21760     +       run;
21761     +       proc sort data=&data;
21762     +          by NAME TYPE LEVEL;
21763     +       run;
21764     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
21765     +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
21766     +          by NAME TYPE LEVEL;
21767     +          if _a then do;
21768     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
21769     +             output;
21770     +          end;
21771     +       run;
21772     +   %end;
21773     +   proc sort data=&EM_USER_OUTCLASS;
21774     +      by NAME DESCENDING FREQUENCY;
21775     +   run;
21777     +   %let lib = WORK;
21778     +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
21779     +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
21780     +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
21781     +   %end;
21782     +   %else
21783     +       %let member = &EM_USER_OUTCLASS;
21785     +   proc datasets lib=&lib nolist;
21786     +      modify &member;
21787     +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
21788     +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
21789     +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
21790     +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
21791     +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
21792     +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
21793     +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
21794     +     %if %sysfunc(exist(&data)) %then %do;
21795     +          delete &data;
21796     +     %end;
21797     +   run;
21799     +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
21800     +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
21801     +      set &EM_USER_OUTCLASS(in=_a);
21802     +      where REPLACE_VALUE ne '';
21803     +      keep NAME TYPE LEVEL REPLACE_VALUE;
21804     +   run;
21805     +%mend makeOutClass;
21807     +%macro makeVarLimits;
21808     +     %let madsString =;
21809     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
21810     +     %if %sysfunc(exist(work.MADS)) %then %do;
21811     +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
21812     +         %let madsString = MADS;
21813     +         proc append base=work.LIMITS data=work.MADS force;
21814     +         run;
21815     +     %end;
21817     +     %let spacingString = ;
21818     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
21819     +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
21820     +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
21821     +         %let spacingString = SPACING;
21822     +         proc append base=work.LIMITS data=work.SPACINGS force;
21823     +         run;
21824     +     %end;
21826     +     %let percentString = ;
21827     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
21828     +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
21829     +         %makePctLimits(StatsDs=work.PERCENTS);
21830     +         %let percentString = PERCENTS;
21831     +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
21832     +         run;
21833     +     %end;
21835     +     %makeFixedLimits(StatsDs=work.FIXED);
21836     +     %if %sysfunc(exist(work.FIXED)) %then %do;
21837     +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
21838     +         run;
21839     +     %end;
21841     +     %if %sysfunc(exist(work.LIMITS)) %then %do;
21842     +         proc sort data=work.LIMITS;
21843     +            by NAME;
21844     +         run;
21845     +         %em_getName(key=LIMITS, type=DATA);
21846     +         data &EM_USER_LIMITS;
21847     +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
21848     +              by NAME;
21849     +              if _a then output;
21850     +         run;
21851     +     %end;
21855     +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
21856     +          proc print data=&EM_USER_OUTCLASS;run;
21857     +          proc print data=MADS;run;
21858     +          proc print data=spacings;run;
21859     +          proc print data=percents;run;
21860     +          proc print data=limits;run;
21861     +     %end;
21862     +     proc datasets lib=work nolist;
21863     +        delete &madsString &spacingString &percentString limits;
21864     +     run;
21865     +%mend makeVarLimits;
21867     +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
21869     +    %if &method ne PERCENTS %then %do;
21870     +        %em_varmacro(Name=&method, metadata=&metadata,
21871     +                  where=%nrbquote(CALCMETHOD="&method"));
21872     +    %end;
21873     +    %else %do;
21874     +        %em_varmacro(Name=&method, metadata=&metadata,
21875     +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
21876     +    %end;
21877     +    %if %&method eq %then %goto doend;
21879     +    %let optionString=&method;
21881     +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
21882     +    %else
21883     +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
21884     +        %else
21885     +           %if &method=PERCENTS %then %do;
21886     +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
21887     +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
21888     +           %end;
21890     +    &em_codebar;
21891     +    * &EM_NODEID: Method &em_property_method;
21892     +    &EM_codebar;
21893     +    proc stdize data=&data outstat=&outstat out=_null_
21894     +       &optionString
21895     +       ;
21896     +       var  %&method;
21897     +       %if %em_freq ne %then %do;
21898     +           freq %em_freq;
21899     +       %end;
21900     +    run;
21902     +    %if &method=MADS or &method=SPACINGS %then %do;
21903     +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
21904     +           where _TYPE_ in('LOCATION', 'SCALE');
21905     +        run;
21906     +    %end;
21907     +    %else
21908     +        %if &method=PERCENTS %then %do;
21909     +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
21910     +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
21911     +           run;
21912     +       %end;
21913     +   %doend:
21914     +%mend stdize;
21916     +%macro makeLimits(StatsDs=, cutoff=, method=);
21917     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
21918     +    data &StatsDs;
21919     +       set &StatsDs;
21920     +       length CALCMETHOD $10;
21921     +       retain CALCMETHOD "&METHOD";
21922     +       LowerLimit = location - &cutoff*scale;
21923     +       UpperLimit = location + &cutoff*scale;
21924     +       drop location scale;
21925     +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
21926     +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
21927     +    run;
21929     +    %doendm:
21930     +%mend makeLimits;
21932     +%macro makeFixedLimits(statsDs=);
21933     +    data &statsDs;
21934     +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
21935     +       by NAME;
21936     +       select(CALCMETHOD);
21937     +          when('METALIMIT') do;
21938     +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
21939     +          end;
21940     +          when('MANUAL') do;
21941     +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
21942     +             else do;
21943     +                LOWERLIMIT = INTERVALMIN;
21944     +                UPPERLIMIT = INTERVALMAX;
21945     +             end;
21946     +          end;
21947     +          otherwise;
21948     +       end;
21949     +    run;
21950     +    %let nobs=0;
21951     +    %let dsid = %sysfunc(open(&statsDs));
21952     +    %if &dsid>0 %then %do;
21953     +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
21954     +        %let dsid = %sysfunc(close(&dsid));
21955     +    %end;
21956     +    %if ^&nobs %then %do;
21957     +        %let nameDs = %scan(&statsDs, 2, .);
21958     +        proc datasets lib=WORK nolist;
21959     +           delete &nameDs;
21960     +         run;
21961     +    %end;
21963     +%mend makeFixedLimits;
21965     +%macro makePctLimits(StatsDs=);
21966     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
21967     +    data &statsDs;
21968     +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
21969     +       by NAME;
21970     +       select(CALCMETHOD);
21971     +          when('PERCENTS') do;
21972     +             if PMIN eq . and PMAX eq . then delete;
21973     +             else do;
21974     +                LOWERLIMIT = PMIN;
21975     +                UPPERLIMIT = PMAX;
21976     +             end;
21977     +          end;
21978     +          when('STDDEV') do;
21979     +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
21980     +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
21981     +          end;
21982     +          otherwise;
21983     +       end;
21984     +    run;
21985     +   %doendp:
21986     +%mend makePctLimits;
21988     +%macro train;
21990     +   %if "&em_import_data" eq "" %then %do;
21991     +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
21992     +       %goto doendm;
21993     +   %end;
21995     +    /* Process Class variables */
21996     +    %makeOutClass;
21998     +    /* Interval Variables */
21999     +     data VARIABLESET;
22000     +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
22001     +             or (ROLE="INPUT" and USE in("Y", "D")) )));
22002     +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
22003     +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
22004     +     run;
22005     +     proc sort data=VARIABLESET out=VARIABLESET;
22006     +        by NAME;
22007     +     run;
22009     +     %let varnum=0;
22010     +     %let dsid = %sysfunc(open(VARIABLESET));
22011     +     %if &dsid>0 %then %do;
22012     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
22013     +         %let dsid = %sysfunc(close(&dsid));
22014     +     %end;
22015     +     %if ^&varnum %then %do;
22016     +          %em_getName(key=LIMITS, type=DATA);
22017     +          %let limitDs = %scan(&em_user_limits, 2, .);
22018     +          proc datasets lib=&em_lib nolist;
22019     +             delete &limitDs;
22020     +          run;
22021     +     %end;
22022     +     %else %do;
22023     +         %makeVarLimits;
22024     +     %end;
22026     +   %doendm:
22028     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   data REPLACE_DATA(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 8 observations read from the data set EMWS8.REPL_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   proc dmdb data=EMWS8.Plot_TRAIN dmdbcat=emdmdb maxlevel=512 nonorm CLASSOUT=EMWS8.Repl_OUTCLASS(drop=CODE FREQPERCENT NMISSPERCENT);
MPRINT(GETLEVELS):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_BINARY_INPUT):   Dependents Gender
MPRINT(EM_NOMINAL_INPUT):   Education Marital_Status
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   run;

NOTE: Records processed = 2500   Memory used = 511K.
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View EMWS8.PLOT_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.06 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: There were 2500 observations read from the data set EMWS8.PLOT_TRAIN.
NOTE: The data set EMWS8.REPL_OUTCLASS has 21 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.21 seconds
      cpu time            0.09 seconds
      

MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 21 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data _null_;
MPRINT(MAKEOUTCLASS):   dsid = open("EMWS8.Repl_OUTCLASS");
MPRINT(MAKEOUTCLASS):   levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
MPRINT(MAKEOUTCLASS):   dsid = close(dsid);
MPRINT(MAKEOUTCLASS):   call symput("levelLen", put(max(levelLen, 9), BEST.));
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length Name $32 LEVEL $ 12;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length REPLACE_VALUE $200;
MPRINT(MAKEOUTCLASS):   label REPLACE_VALUE= "Replacement Value";
MPRINT(MAKEOUTCLASS):   by NAME;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   if last.name then do;
MPRINT(MAKEOUTCLASS):   LEVEL="_UNKNOWN_";
MPRINT(MAKEOUTCLASS):   Frequency=.;
MPRINT(MAKEOUTCLASS):   CRAW='';
MPRINT(MAKEOUTCLASS):   NRAW=.;
MPRINT(MAKEOUTCLASS):   REPLACE_VALUE="_DEFAULT_";
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 21 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 26 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 26 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 26 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS8.Repl_OUTCLASS(in=_a) REPLACE_DATA(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 26 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS8.REPL_OUTCLASS has 26 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 26 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 26 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS8 nolist;
MPRINT(MAKEOUTCLASS):   modify Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   label NAME = "Variable" LEVEL= "Formatted Value" FREQUENCY= "Frequency Count" TYPE= "Type" CRAW= "Character Unformatted Value" NRAW= "Numeric Value" REPLACE_VALUE= "Replacement Value";
NOTE: MODIFY was successful for EMWS8.REPL_OUTCLASS.DATA.
MPRINT(MAKEOUTCLASS):   delete REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   run;

NOTE: The file EMWS8.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.37 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_NEWVALUES / view=EMWS8.Repl_NEWVALUES;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS(in=_a);
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA STEP view saved on file EMWS8.REPL_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data VARIABLESET;
MPRINT(TRAIN):   set EMWS8.Repl_VariableSet(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y") or (ROLE="INPUT" and USE in("Y", "D")) )));
MPRINT(TRAIN):   if CALCMETHOD eq "DEFAULT" then CALCMETHOD="NONE";
MPRINT(TRAIN):   if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS8.REPL_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 3 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=VARIABLESET out=VARIABLESET;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 3 observations read from the data set WORK.VARIABLESET.
NOTE: The data set WORK.VARIABLESET has 3 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD="MADS");
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD='MADS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro MADS;";
MPRINT(EM_VARMACRO):   put "%" "mend MADS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 11.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22029     +%macro MADS;
22030     +%mend MADS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD="SPACINGS");
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD='SPACINGS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro SPACINGS;";
MPRINT(EM_VARMACRO):   put "%" "mend SPACINGS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22031     +%macro SPACINGS;
22032     +%mend SPACINGS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD in("STDDEV", "PERCENTS"));
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD in ('PERCENTS', 'STDDEV');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro PERCENTS;";
MPRINT(EM_VARMACRO):   put "%" "mend PERCENTS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sábado, 05 de Março de 2016 11H21m,
      Last Modified=Sábado, 05 de Março de 2016 11H21m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2168_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22033     +%macro PERCENTS;
22034     +%mend PERCENTS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEFIXEDLIMITS):   data work.FIXED;
MPRINT(MAKEFIXEDLIMITS):   set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
MPRINT(MAKEFIXEDLIMITS):   by NAME;
MPRINT(MAKEFIXEDLIMITS):   select(CALCMETHOD);
MPRINT(MAKEFIXEDLIMITS):   when('METALIMIT') do;
MPRINT(MAKEFIXEDLIMITS):   if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   when('MANUAL') do;
MPRINT(MAKEFIXEDLIMITS):   if INTERVALMIN eq . and INTERVALMAX eq . then delete;
MPRINT(MAKEFIXEDLIMITS):   else do;
MPRINT(MAKEFIXEDLIMITS):   LOWERLIMIT = INTERVALMIN;
MPRINT(MAKEFIXEDLIMITS):   UPPERLIMIT = INTERVALMAX;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   otherwise;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   run;

NOTE: There were 3 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD in ('MANUAL', 'METALIMIT');
NOTE: The data set WORK.FIXED has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEVARLIMITS):   proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
MPRINT(MAKEVARLIMITS):   run;

NOTE: Appending WORK.FIXED to WORK.LIMITS.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 3 observations read from the data set WORK.FIXED.
NOTE: The data set WORK.LIMITS has 3 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARLIMITS):   proc sort data=work.LIMITS;
MPRINT(MAKEVARLIMITS):   by NAME;
MPRINT(MAKEVARLIMITS):   run;

NOTE: There were 3 observations read from the data set WORK.LIMITS.
NOTE: The data set WORK.LIMITS has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEVARLIMITS):   data EMWS8.Repl_LIMITS;
MPRINT(MAKEVARLIMITS):   merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
MPRINT(MAKEVARLIMITS):   by NAME;
MPRINT(MAKEVARLIMITS):   if _a then output;
MPRINT(MAKEVARLIMITS):   run;

NOTE: There were 3 observations read from the data set WORK.LIMITS.
NOTE: There were 3 observations read from the data set WORK.VARIABLESET.
NOTE: The data set EMWS8.REPL_LIMITS has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARLIMITS):   proc datasets lib=work nolist;
MPRINT(MAKEVARLIMITS):   delete limits;
MPRINT(MAKEVARLIMITS):   run;

NOTE: Deleting WORK.LIMITS (memtype=DATA).
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
22035      
22036      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22037      * End TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * End TRAIN: Repl;
22038      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22039      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22040      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22041      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22042      ;
MPRINT(EM_DIAGRAM):   ;
22043      ;
MPRINT(EM_DIAGRAM):   ;
22044      ;
MPRINT(EM_DIAGRAM):   ;
22045      ;
MPRINT(EM_DIAGRAM):   ;
22046      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
22047      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
22048      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
22049      *------------------------------------------------------------*;
22050      /*; *"; *'; */
22051      ;
22052      run;
22053      quit;
22054      /* Reset EM Options */
22055      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22056      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22057      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
