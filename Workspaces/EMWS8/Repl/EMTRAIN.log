MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                19. April 2016
Time:                16.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2AASTL1 "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2AASTL1 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\Repl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
29801      proc freq data=EMWS8.Repl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Repl_VariableSet noprint;
29802      table ROLE*LEVEL/out=WORK.ReplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReplMETA;
29803      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.REPL_VARIABLESET.
NOTE: The data set WORK.REPLMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29804      proc print data=WORK.ReplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReplMETA label noobs;
29805      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
29806      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
29807      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29808      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
29809      run;

NOTE: There were 6 observations read from the data set WORK.REPLMETA.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29810      title10;
MPRINT(EM_DIAGRAM):   title10;
29811      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30162      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30163      * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
30164      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
30165      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

30166      %let EMEXCEPTIONSTRING=;
30167      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30168      * TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * TRAIN: Repl;
30169      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30170      %let EM_ACTION = TRAIN;
30171      %let syscc = 0;
30172      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
30173      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
30174     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
30175     +   filename macFile catalog 'work.emutil.macro.source';
30176     +   %let _METAOBS = 0;
30178     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
30179     +                   or (&metadata eq ) %then %do;
30180     +       %goto doend;
30181     +   %end;
30182     +   data _null_;
30183     +      length _STRING_ $80;
30184     +      retain _STRING_;
30185     +      set &metadata end=eof;
30186     +      file macFile;
30187     +      %if %nrbquote(&where) ne %then %do;
30188     +          %let whereClause = where (%nrbquote(&where));
30189     +          %unquote(&whereClause);
30190     +      %end;
30191     +      if _N_=1 then do;
30192     +         string = "%"!!"macro &name;";
30193     +         put string;
30194     +      end;
30195     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
30196     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
30197     +         if eof then do;
30198     +            put _STRING_;
30199     +            string = "%"!!"mend &name;";
30200     +            put string;
30201     +            %if (&nummacro ne ) %then %do;
30202     +                string = strip(put(_N_, best.));
30203     +                put "%" "global &nummacro;";
30204     +                put "%" "let &nummacro = " string ";";
30205     +                call symput('_METAOBS', string);
30206     +            %end;
30207     +         end;
30208     +      end;
30209     +      else do;
30210     +         put _STRING_;
30211     +         _string_ = TRIM(&key);
30212     +         if eof then do;
30213     +            put _STRING_;
30214     +            string = "%"!!"mend &name;";
30215     +            put string;
30216     +        end;
30217     +      end;
30218     +      if eof then do;
30219     +         string = strip(put(_N_, best.));
30220     +         call symput('_METAOBS', string);
30221     +         %if (&nummacro ne ) %then %do;
30222     +             put "%" "global &nummacro;";
30223     +             put "%" "let &nummacro = " string ";";
30224     +         %end;
30225     +      end;
30226     +   run;
30228     +   %doend:
30229     +   %if ^&_METAOBS %then %do;
30230     +       data _null_;
30231     +          file macFile;
30232     +          put "%" "macro &name;";
30233     +          put "%" "mend &name;";
30234     +          %if (&nummacro ne ) %then %do;
30235     +              put "%" "global &nummacro;";
30236     +              put "%" "let &nummacro = 0;";
30237     +          %end;
30238     +      run;
30239     +   %end;
30240     +   %inc macFile;
30241     +   filename macFile;
30242     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
30243      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
30244       %macro main;
30245      
30246         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
30247         %include temp;
30248         filename temp;
30249      
30250         %if %upcase(&EM_ACTION) = CREATE %then %do;
30251      
30252             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
30253             %include temp;
30254             filename temp;
30255             %create;
30256         %end;
30257         %else
30258         %if %upcase(&EM_ACTION) = TRAIN %then %do;
30259      
30260             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
30261             %include temp;
30262             filename temp;
30263             %train;
30264         %end;
30265         %else
30266         %if %upcase(&EM_ACTION) = SCORE %then %do;
30267      
30268             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
30269             %include temp;
30270             filename temp;
30271             %score;
30272         %end;
30273         %if %upcase(&EM_ACTION) = REPORT %then %do;
30274      
30275             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
30276             %include temp;
30277             filename temp;
30278             %report;
30279         %end;
30280         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
30281             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30282             %include temp;
30283             filename temp;
30284             %em_replace_openoutclass;
30285         %end;
30286         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
30287             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
30288             %include temp;
30289             filename temp;
30290             %em_replace_closeoutclass;
30291         %end;
30292      %mend main;
30293      
30294      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
30295     +%macro SetProperties;
30296     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
30297     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
30298     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
30299     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
30300     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
30301     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
30302     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
30303     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
30304     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
30305     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
30307     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
30309     +%macro getLevels(outData=);
30310     +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
30311     +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
30312     +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
30313     +       data &outData;
30314     +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
30315     +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
30316     +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
30317     +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
30318     +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
30319     +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
30320     +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
30321     +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30322     +          stop;
30323     +       run;
30324     +   %end;
30325     +   %else %do;
30326     +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
30327     +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
30328     +            %let EM_TRAIN_MAXLEVELS= 512;
30330     +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
30331     +          class
30332     +            %EM_BINARY_TARGET
30333     +            %EM_ORDINAL_TARGET
30334     +            %EM_NOMINAL_TARGET
30335     +            %EM_BINARY_INPUT
30336     +            %EM_ORDINAL_INPUT
30337     +            %EM_NOMINAL_INPUT
30338     +            %EM_BINARY_REJECTED
30339     +            %EM_ORDINAL_REJECTED
30340     +            %EM_NOMINAL_REJECTED;
30341     +          %if (%EM_FREQ ne ) %then %do;
30342     +             freq %EM_FREQ;
30343     +         %end;
30344     +       run;
30345     +   %end;
30346     +%mend getLevels;
30348     +%macro makeOutCLass;
30349     +   %em_getname(key=OUTCLASS,  type=DATA);
30350     +   %em_getname(key=NEWVALUES, type=DATA);
30352     +   %let data= REPLACE_DATA;
30353     +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
30354     +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
30355     +          set &EM_USER_OUTCLASS;
30356     +          keep NAME TYPE LEVEL REPLACE_VALUE;
30357     +          where REPLACE_VALUE ne '';
30358     +       run;
30359     +       proc sort data=&Data;
30360     +          by NAME TYPE LEVEL;
30361     +       run;
30362     +   %end;
30364     +   %getLevels(outdata=&EM_USER_OUTCLASS);
30366     +   /* Determine Mode */
30367     +   proc sort data=&EM_USER_OUTCLASS;
30368     +      by NAME DESCENDING FREQUENCY;
30369     +   run;
30370     +   data _null_;
30371     +      dsid = open("&EM_USER_OUTCLASS");
30372     +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
30373     +      dsid = close(dsid);
30374     +      call symput("levelLen", put(max(levelLen, 9), BEST.));
30375     +   run;
30377     +   data &EM_USER_OUTCLASS;
30378     +      length Name $32 LEVEL $&levelLen;
30379     +      set &EM_USER_OUTCLASS;
30380     +      length REPLACE_VALUE $200;
30381     +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30382     +      by NAME;
30383     +      output;
30384     +      if last.name then do;
30385     +         LEVEL="_UNKNOWN_";
30386     +         Frequency=.;
30387     +         CRAW='';
30388     +         NRAW=.;
30389     +         REPLACE_VALUE="_DEFAULT_";
30390     +         output;
30391     +      end;
30392     +   run;
30394     +   /* If the file is a copy of an existing one.  Merge previously specified values */
30395     +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
30396     +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
30397     +          by NAME TYPE LEVEL;
30398     +       run;
30399     +       proc sort data=&EM_USER_OUTCLASS;
30400     +          by NAME TYPE LEVEL;
30401     +       run;
30402     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
30403     +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
30404     +          by NAME TYPE LEVEL;
30405     +          if _a then do;
30406     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
30407     +             output;
30408     +          end;
30409     +       run;
30410     +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
30411     +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
30412     +       proc datasets lib=&lib nolist;
30413     +          delete &member;
30414     +       run;
30416     +   %end;
30418     +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
30419     +   %if %sysfunc(exist(&Data)) %then %do;
30420     +       proc sort data=&EM_USER_OUTCLASS;
30421     +          by NAME TYPE LEVEL;
30422     +       run;
30423     +       proc sort data=&data;
30424     +          by NAME TYPE LEVEL;
30425     +       run;
30426     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
30427     +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
30428     +          by NAME TYPE LEVEL;
30429     +          if _a then do;
30430     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
30431     +             output;
30432     +          end;
30433     +       run;
30434     +   %end;
30435     +   proc sort data=&EM_USER_OUTCLASS;
30436     +      by NAME DESCENDING FREQUENCY;
30437     +   run;
30439     +   %let lib = WORK;
30440     +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
30441     +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
30442     +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
30443     +   %end;
30444     +   %else
30445     +       %let member = &EM_USER_OUTCLASS;
30447     +   proc datasets lib=&lib nolist;
30448     +      modify &member;
30449     +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
30450     +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
30451     +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
30452     +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
30453     +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
30454     +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
30455     +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
30456     +     %if %sysfunc(exist(&data)) %then %do;
30457     +          delete &data;
30458     +     %end;
30459     +   run;
30461     +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
30462     +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
30463     +      set &EM_USER_OUTCLASS(in=_a);
30464     +      where REPLACE_VALUE ne '';
30465     +      keep NAME TYPE LEVEL REPLACE_VALUE;
30466     +   run;
30467     +%mend makeOutClass;
30469     +%macro makeVarLimits;
30470     +     %let madsString =;
30471     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
30472     +     %if %sysfunc(exist(work.MADS)) %then %do;
30473     +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
30474     +         %let madsString = MADS;
30475     +         proc append base=work.LIMITS data=work.MADS force;
30476     +         run;
30477     +     %end;
30479     +     %let spacingString = ;
30480     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
30481     +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
30482     +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
30483     +         %let spacingString = SPACING;
30484     +         proc append base=work.LIMITS data=work.SPACINGS force;
30485     +         run;
30486     +     %end;
30488     +     %let percentString = ;
30489     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
30490     +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
30491     +         %makePctLimits(StatsDs=work.PERCENTS);
30492     +         %let percentString = PERCENTS;
30493     +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
30494     +         run;
30495     +     %end;
30497     +     %makeFixedLimits(StatsDs=work.FIXED);
30498     +     %if %sysfunc(exist(work.FIXED)) %then %do;
30499     +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
30500     +         run;
30501     +     %end;
30503     +     %if %sysfunc(exist(work.LIMITS)) %then %do;
30504     +         proc sort data=work.LIMITS;
30505     +            by NAME;
30506     +         run;
30507     +         %em_getName(key=LIMITS, type=DATA);
30508     +         data &EM_USER_LIMITS;
30509     +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
30510     +              by NAME;
30511     +              if _a then output;
30512     +         run;
30513     +     %end;
30517     +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
30518     +          proc print data=&EM_USER_OUTCLASS;run;
30519     +          proc print data=MADS;run;
30520     +          proc print data=spacings;run;
30521     +          proc print data=percents;run;
30522     +          proc print data=limits;run;
30523     +     %end;
30524     +     proc datasets lib=work nolist;
30525     +        delete &madsString &spacingString &percentString limits;
30526     +     run;
30527     +%mend makeVarLimits;
30529     +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
30531     +    %if &method ne PERCENTS %then %do;
30532     +        %em_varmacro(Name=&method, metadata=&metadata,
30533     +                  where=%nrbquote(CALCMETHOD="&method"));
30534     +    %end;
30535     +    %else %do;
30536     +        %em_varmacro(Name=&method, metadata=&metadata,
30537     +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
30538     +    %end;
30539     +    %if %&method eq %then %goto doend;
30541     +    %let optionString=&method;
30543     +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
30544     +    %else
30545     +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
30546     +        %else
30547     +           %if &method=PERCENTS %then %do;
30548     +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
30549     +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
30550     +           %end;
30552     +    &em_codebar;
30553     +    * &EM_NODEID: Method &em_property_method;
30554     +    &EM_codebar;
30555     +    proc stdize data=&data outstat=&outstat out=_null_
30556     +       &optionString
30557     +       ;
30558     +       var  %&method;
30559     +       %if %em_freq ne %then %do;
30560     +           freq %em_freq;
30561     +       %end;
30562     +    run;
30564     +    %if &method=MADS or &method=SPACINGS %then %do;
30565     +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
30566     +           where _TYPE_ in('LOCATION', 'SCALE');
30567     +        run;
30568     +    %end;
30569     +    %else
30570     +        %if &method=PERCENTS %then %do;
30571     +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
30572     +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
30573     +           run;
30574     +       %end;
30575     +   %doend:
30576     +%mend stdize;
30578     +%macro makeLimits(StatsDs=, cutoff=, method=);
30579     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
30580     +    data &StatsDs;
30581     +       set &StatsDs;
30582     +       length CALCMETHOD $10;
30583     +       retain CALCMETHOD "&METHOD";
30584     +       LowerLimit = location - &cutoff*scale;
30585     +       UpperLimit = location + &cutoff*scale;
30586     +       drop location scale;
30587     +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
30588     +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
30589     +    run;
30591     +    %doendm:
30592     +%mend makeLimits;
30594     +%macro makeFixedLimits(statsDs=);
30595     +    data &statsDs;
30596     +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
30597     +       by NAME;
30598     +       select(CALCMETHOD);
30599     +          when('METALIMIT') do;
30600     +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
30601     +          end;
30602     +          when('MANUAL') do;
30603     +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
30604     +             else do;
30605     +                LOWERLIMIT = INTERVALMIN;
30606     +                UPPERLIMIT = INTERVALMAX;
30607     +             end;
30608     +          end;
30609     +          otherwise;
30610     +       end;
30611     +    run;
30612     +    %let nobs=0;
30613     +    %let dsid = %sysfunc(open(&statsDs));
30614     +    %if &dsid>0 %then %do;
30615     +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
30616     +        %let dsid = %sysfunc(close(&dsid));
30617     +    %end;
30618     +    %if ^&nobs %then %do;
30619     +        %let nameDs = %scan(&statsDs, 2, .);
30620     +        proc datasets lib=WORK nolist;
30621     +           delete &nameDs;
30622     +         run;
30623     +    %end;
30625     +%mend makeFixedLimits;
30627     +%macro makePctLimits(StatsDs=);
30628     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
30629     +    data &statsDs;
30630     +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
30631     +       by NAME;
30632     +       select(CALCMETHOD);
30633     +          when('PERCENTS') do;
30634     +             if PMIN eq . and PMAX eq . then delete;
30635     +             else do;
30636     +                LOWERLIMIT = PMIN;
30637     +                UPPERLIMIT = PMAX;
30638     +             end;
30639     +          end;
30640     +          when('STDDEV') do;
30641     +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
30642     +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
30643     +          end;
30644     +          otherwise;
30645     +       end;
30646     +    run;
30647     +   %doendp:
30648     +%mend makePctLimits;
30650     +%macro train;
30652     +   %if "&em_import_data" eq "" %then %do;
30653     +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
30654     +       %goto doendm;
30655     +   %end;
30657     +    /* Process Class variables */
30658     +    %makeOutClass;
30660     +    /* Interval Variables */
30661     +     data VARIABLESET;
30662     +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
30663     +             or (ROLE="INPUT" and USE in("Y", "D")) )));
30664     +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
30665     +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
30666     +     run;
30667     +     proc sort data=VARIABLESET out=VARIABLESET;
30668     +        by NAME;
30669     +     run;
30671     +     %let varnum=0;
30672     +     %let dsid = %sysfunc(open(VARIABLESET));
30673     +     %if &dsid>0 %then %do;
30674     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
30675     +         %let dsid = %sysfunc(close(&dsid));
30676     +     %end;
30677     +     %if ^&varnum %then %do;
30678     +          %em_getName(key=LIMITS, type=DATA);
30679     +          %let limitDs = %scan(&em_user_limits, 2, .);
30680     +          proc datasets lib=&em_lib nolist;
30681     +             delete &limitDs;
30682     +          run;
30683     +     %end;
30684     +     %else %do;
30685     +         %makeVarLimits;
30686     +     %end;
30688     +   %doendm:
30690     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   data REPLACE_DATA(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 8 observations read from the data set EMWS8.REPL_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set WORK.REPLACE_DATA has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   proc dmdb data=EMWS8.Plot_TRAIN dmdbcat=emdmdb maxlevel=512 nonorm CLASSOUT=EMWS8.Repl_OUTCLASS(drop=CODE FREQPERCENT NMISSPERCENT);
MPRINT(GETLEVELS):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_BINARY_INPUT):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
MPRINT(EM_NOMINAL_INPUT):   Education Marital_Status
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   run;

NOTE: Records processed = 3500   Memory used = 511K.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View EMWS8.PLOT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: There were 3500 observations read from the data set EMWS8.PLOT_TRAIN.
NOTE: The data set EMWS8.REPL_OUTCLASS has 24 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 24 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data _null_;
MPRINT(MAKEOUTCLASS):   dsid = open("EMWS8.Repl_OUTCLASS");
MPRINT(MAKEOUTCLASS):   levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
MPRINT(MAKEOUTCLASS):   dsid = close(dsid);
MPRINT(MAKEOUTCLASS):   call symput("levelLen", put(max(levelLen, 9), BEST.));
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length Name $32 LEVEL $ 12;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length REPLACE_VALUE $200;
MPRINT(MAKEOUTCLASS):   label REPLACE_VALUE= "Replacement Value";
MPRINT(MAKEOUTCLASS):   by NAME;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   if last.name then do;
MPRINT(MAKEOUTCLASS):   LEVEL="_UNKNOWN_";
MPRINT(MAKEOUTCLASS):   Frequency=.;
MPRINT(MAKEOUTCLASS):   CRAW='';
MPRINT(MAKEOUTCLASS):   NRAW=.;
MPRINT(MAKEOUTCLASS):   REPLACE_VALUE="_DEFAULT_";
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 24 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS8.Repl_OUTCLASS(in=_a) REPLACE_DATA(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: There were 8 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS8.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 33 observations read from the data set EMWS8.REPL_OUTCLASS.
NOTE: The data set EMWS8.REPL_OUTCLASS has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS8 nolist;
MPRINT(MAKEOUTCLASS):   modify Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   label NAME = "Variable" LEVEL= "Formatted Value" FREQUENCY= "Frequency Count" TYPE= "Type" CRAW= "Character Unformatted Value" NRAW= "Numeric Value" REPLACE_VALUE= "Replacement Value";
NOTE: MODIFY was successful for EMWS8.REPL_OUTCLASS.DATA.
MPRINT(MAKEOUTCLASS):   delete REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   run;

NOTE: The file EMWS8.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS8.Repl_NEWVALUES / view=EMWS8.Repl_NEWVALUES;
MPRINT(MAKEOUTCLASS):   set EMWS8.Repl_OUTCLASS(in=_a);
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA STEP view saved on file EMWS8.REPL_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data VARIABLESET;
MPRINT(TRAIN):   set EMWS8.Repl_VariableSet(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y") or (ROLE="INPUT" and USE in("Y", "D")) )));
MPRINT(TRAIN):   if CALCMETHOD eq "DEFAULT" then CALCMETHOD="NONE";
MPRINT(TRAIN):   if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
MPRINT(TRAIN):   run;

NOTE: There were 17 observations read from the data set EMWS8.REPL_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=VARIABLESET out=VARIABLESET;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS8 nolist;
MPRINT(TRAIN):   delete Repl_LIMITS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.REPL_LIMITS (memtype=DATA).
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
30691      
30692      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30693      * End TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * End TRAIN: Repl;
30694      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30695      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30696      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
30697      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30698      ;
MPRINT(EM_DIAGRAM):   ;
30699      ;
MPRINT(EM_DIAGRAM):   ;
30700      ;
MPRINT(EM_DIAGRAM):   ;
30701      ;
MPRINT(EM_DIAGRAM):   ;
30702      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
30703      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
30704      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
30705      *------------------------------------------------------------*;
30706      /*; *"; *'; */
30707      ;
30708      run;
30709      quit;
30710      /* Reset EM Options */
30711      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
30712      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
30713      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
