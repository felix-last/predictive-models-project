NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
15515      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15516      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15517      put '<Node Id="FIMPORT" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Run" Pid="9008" Gridid=""/>';
15518      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15519      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning update before running 
* datetime : 21APR2016:18:27:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15721      %let emexceptionString =;
15722      %let EMEXCEPTIONSTRING=;
15723      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
15724      * UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT;
15725      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15726      %let EM_ACTION = UPDATE;
15727      %let syscc = 0;
15728      /* Fimport.source */
15729      %macro main;
15730            %if %upcase(&EM_ACTION) = CREATE %then %do;
15731               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
15732               %include temp;
15733               filename temp;
15734               %create;
15735            %end;
15736            %else
15737            %if %upcase(&EM_ACTION) = TRAIN %then %do;
15738               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
15739               %include temp;
15740               filename temp;
15741               %train;
15742            %end;
15743            %else
15744            %if %upcase(&EM_ACTION) = UPDATE %then %do;
15745               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
15746               %include temp;
15747               filename temp;
15748               %update;
15749            %end;
15750            %else
15751            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
15752               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15753               %include temp;
15754               filename temp;
15755               %property;
15756            %end;
15757             %else
15758            %if %upcase(&EM_ACTION) = SCORE %then %do;
15759               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
15760               %include temp;
15761               filename temp;
15762               %score;
15763            %end;
15764            %else
15765            %if %upcase(&EM_ACTION) = REPORT %then %do;
15766               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
15767               %include temp;
15768               filename temp;
15769               %report;
15770            %end;
15771            %else
15772            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
15773               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15774               %include temp;
15775               filename temp;
15776               %openvariableset;
15777            %end;
15778            %else
15779            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
15780               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15781               %include temp;
15782               filename temp;
15783               %closevariableset;
15784            %end;
15785      %mend main;
15786      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
15787     +%macro update;
15788     +    %let oldrole = %str();
15789     +    data _null_;
15790     +       set &em_data_exportset;
15791     +       where NODEPORT='TRAIN';
15792     +       call symput('oldrole', ROLE);
15793     +    run;
15794     +    %if &oldrole ne &em_property_role %then %do;
15795     +        data &em_data_exportset;
15796     +           set &em_data_exportset;
15797     +           if NODEPORT='TRAIN' then do;
15798     +              ROLE="&em_property_role";
15799     +              NEEDUPDATE='Y';
15800     +              EXPORT='Y';
15801     +           end;
15802     +        run;
15803     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
15804     +        data _null_;
15805     +           file x;
15806     +           put ' ';
15807     +        run;
15808     +        filename x;
15809     +    %end;
15810     +    %else %do;
15811     +        data &em_data_exportset;
15812     +           set &em_data_exportset;
15813     +           if NODEPORT='TRAIN' then do;
15814     +              ROLE="&em_property_role";
15815     +              NEEDUPDATE='Y';
15816     +              EXPORT='Y';
15817     +           end;
15818     +        run;
15819     +    %end;
15821     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
15822     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
15823     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
15824     +           set &em_user_emcmetadefault;
15825     +           drop DROP;
15826     +           where DROP='N';
15827     +        run;
15828     +    %end;
15830     +%mend update;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):   data EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   set EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="TRAIN";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15835      *------------------------------------------------------------*;
15836      * End UPDATE: FIMPORT;
15837      *------------------------------------------------------------*;

15838      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : End update 
* datetime : 21APR2016:18:27:22 
* 
*------------------------------------------------------------* 
15840      %em_getactionstatus(emlib =EMWS8, nodeid=FIMPORT);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

15841      %let em_Train = N;
15842      %let em_Score = N;
15843      %let em_Report = N;
15844      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "FIMPORT" has already run. 
Node "FIMPORT" succeeded. 
15845      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15846      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15847      put '<Node Id="FIMPORT" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Complete" Pid="9008" Gridid=""/>';
15848      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "EMCODE5" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "FILTER" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
15849      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15850      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15851      put '<Node Id="FIMPORT2" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT2" Event="Run" Pid="9008" Gridid=""/>';
15852      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15853      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT2 : Beginning update before running 
* datetime : 21APR2016:18:27:22 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16055      %let emexceptionString =;
16056      %let EMEXCEPTIONSTRING=;
16057      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16058      * UPDATE: FIMPORT2;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT2;
16059      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16060      %let EM_ACTION = UPDATE;
16061      %let syscc = 0;
16062      /* Fimport.source */
16063      %macro main;
16064            %if %upcase(&EM_ACTION) = CREATE %then %do;
16065               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
16066               %include temp;
16067               filename temp;
16068               %create;
16069            %end;
16070            %else
16071            %if %upcase(&EM_ACTION) = TRAIN %then %do;
16072               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
16073               %include temp;
16074               filename temp;
16075               %train;
16076            %end;
16077            %else
16078            %if %upcase(&EM_ACTION) = UPDATE %then %do;
16079               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
16080               %include temp;
16081               filename temp;
16082               %update;
16083            %end;
16084            %else
16085            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
16086               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16087               %include temp;
16088               filename temp;
16089               %property;
16090            %end;
16091             %else
16092            %if %upcase(&EM_ACTION) = SCORE %then %do;
16093               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
16094               %include temp;
16095               filename temp;
16096               %score;
16097            %end;
16098            %else
16099            %if %upcase(&EM_ACTION) = REPORT %then %do;
16100               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
16101               %include temp;
16102               filename temp;
16103               %report;
16104            %end;
16105            %else
16106            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
16107               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16108               %include temp;
16109               filename temp;
16110               %openvariableset;
16111            %end;
16112            %else
16113            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
16114               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16115               %include temp;
16116               filename temp;
16117               %closevariableset;
16118            %end;
16119      %mend main;
16120      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
16121     +%macro update;
16122     +    %let oldrole = %str();
16123     +    data _null_;
16124     +       set &em_data_exportset;
16125     +       where NODEPORT='TRAIN';
16126     +       call symput('oldrole', ROLE);
16127     +    run;
16128     +    %if &oldrole ne &em_property_role %then %do;
16129     +        data &em_data_exportset;
16130     +           set &em_data_exportset;
16131     +           if NODEPORT='TRAIN' then do;
16132     +              ROLE="&em_property_role";
16133     +              NEEDUPDATE='Y';
16134     +              EXPORT='Y';
16135     +           end;
16136     +        run;
16137     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
16138     +        data _null_;
16139     +           file x;
16140     +           put ' ';
16141     +        run;
16142     +        filename x;
16143     +    %end;
16144     +    %else %do;
16145     +        data &em_data_exportset;
16146     +           set &em_data_exportset;
16147     +           if NODEPORT='TRAIN' then do;
16148     +              ROLE="&em_property_role";
16149     +              NEEDUPDATE='Y';
16150     +              EXPORT='Y';
16151     +           end;
16152     +        run;
16153     +    %end;
16155     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
16156     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
16157     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
16158     +           set &em_user_emcmetadefault;
16159     +           drop DROP;
16160     +           where DROP='N';
16161     +        run;
16162     +    %end;
16164     +%mend update;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS8.FIMPORT2_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT2_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):   data EMWS8.FIMPORT2_ExportSet;
MPRINT(UPDATE):   set EMWS8.FIMPORT2_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="SCORE";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT2_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT2_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16169      *------------------------------------------------------------*;
16170      * End UPDATE: FIMPORT2;
16171      *------------------------------------------------------------*;

16172      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT2 : End update 
* datetime : 21APR2016:18:27:22 
* 
*------------------------------------------------------------* 
16174      %em_getactionstatus(emlib =EMWS8, nodeid=FIMPORT2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16175      %let em_Train = N;
16176      %let em_Score = N;
16177      %let em_Report = N;
16178      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "FIMPORT2" has already run. 
Node "FIMPORT2" succeeded. 
16179      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16180      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16181      put '<Node Id="FIMPORT2" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT2" Event="Complete" Pid="9008" Gridid=""/>';
16182      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "EMCODE5" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "FILTER" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16183      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16184      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16185      put '<Node Id="Filter3" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Run" Pid="9008" Gridid=""/>';
16186      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16187      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Filter3 : Beginning update before running 
* datetime : 21APR2016:18:27:23 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Filter3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\Filter3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Filter3 : End update 
* datetime : 21APR2016:18:27:23 
* 
*------------------------------------------------------------* 
16207      %em_getactionstatus(emlib =EMWS8, nodeid=Filter3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16208      %let em_Train = N;
16209      %let em_Score = N;
16210      %let em_Report = N;
16211      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Filter3" has already run. 
Node "Filter3" succeeded. 
16212      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16213      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16214      put '<Node Id="Filter3" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Complete" Pid="9008" Gridid=""/>';
16215      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "FILTER" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16216      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16217      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16218      put '<Node Id="Plot" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Plot" Event="Run" Pid="9008" Gridid=""/>';
16219      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16220      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Plot : Beginning update before running 
* datetime : 21APR2016:18:27:24 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Plot_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\Plot\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Plot : End update 
* datetime : 21APR2016:18:27:24 
* 
*------------------------------------------------------------* 
16240      %em_getactionstatus(emlib =EMWS8, nodeid=Plot);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16241      %let em_Train = N;
16242      %let em_Score = N;
16243      %let em_Report = N;
16244      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Plot" has already run. 
Node "Plot" succeeded. 
16245      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16246      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16247      put '<Node Id="Plot" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Plot" Event="Complete" Pid="9008" Gridid=""/>';
16248      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "FILTER" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16249      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16250      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16251      put '<Node Id="VarClus2" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus2" Event="Run" Pid="9008" Gridid=""/>';
16252      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16253      %let emloopmode =;
*------------------------------------------------------------* 
* 
* VarClus2 : Beginning update before running 
* datetime : 21APR2016:18:27:25 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.VarClus2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
16510      %let emexceptionString =;
16511      %let EMEXCEPTIONSTRING=;
16512      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16513      * UPDATE: VarClus2;
MPRINT(EM_DIAGRAM):   * UPDATE: VarClus2;
16514      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16515      %let EM_ACTION = UPDATE;
16516      %let syscc = 0;
16517      
16518      %macro main;
16519      
16520         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
16521         %include temp;
16522         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
16523         %include temp;
16524         filename temp;
16525      
16526        %SetProperties;
16527      
16528         %if %upcase(&EM_ACTION) = CREATE %then %do;
16529             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
16530             %include temp;
16531             filename temp;
16532             %create;
16533         %end;
16534         %else
16535         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16536              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
16537                 %include temp;
16538                 filename temp;
16539                 %train;
16540         %end;
16541         %else
16542         %if %upcase(&EM_ACTION) = SCORE %then %do;
16543                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
16544                 %include temp;
16545                 filename temp;
16546                 %score;
16547         %end;
16548         %else
16549         %if %upcase(&EM_ACTION) = REPORT %then %do;
16550                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
16551                 %include temp;
16552                 filename temp;
16553                 %report;
16554         %end;
16555         /*
16556         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
16557             %put 'OPENING TABLE';
16558         %end;
16559         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
16560             %put 'CLOSE TABLE';
16561         %end;
16562         */
16563      %mend main;
16564      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
16566     +/* Initialize property macro variables */
16567     +%macro SetProperties;
16568     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
16569     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
16570     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
16571     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
16572     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
16573     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
16574     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
16575     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
16576     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
16577     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
16578     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
16579     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
16580     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
16582     +%mend SetProperties;
16584     +%Macro MakeDummyVariables(indata=,
16585     +                          outvar=,
16586     +                          outdata=,
16587     +                          fileref=,
16588     +                          recreatecmeta=N, /* optional */
16589     +                          incmeta=,     /* optional */
16590     +                          outcmeta=,    /* optional */
16591     +                          ndummyvars=_ndummyvars
16592     +                          );
16593     +    %global &ndummyvars;
16595     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
16596     +       class
16597     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16598     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16599     +    ;
16600     +    run;
16601     +    %let &ndummyvars = 0;
16602     +    data _null_;
16603     +    %let dsid = %sysfunc(open(work._classout));
16604     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
16605     +    %let dsid = %sysfunc(close(&dsid));
16606     +    run;
16608     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
16609     +       input
16610     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16611     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16612     +        / level=nominal stdize=no;
16613     +       make outvar = &outvar;
16614     +       score data = &indata out =&outdata;
16615     +       code  file=  "&fileref";
16616     +    run;
16617     +    %if &recreatecmeta eq Y %then %do;
16618     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
16619     +    data _tmpds;
16620     +        set _tmpds;
16621     +           ROLE = 'INPUT';
16622     +           LEVEL = 'INTERVAL';
16623     +           CREATOR='DMZIP';
16624     +           if NAME = '_TYPE_' then delete;
16625     +    run;
16626     +    data &outcmeta;
16627     +         set &incmeta _tmpds;
16628     +    run;
16629     +    %end;
16630     +    proc datasets lib=work nolist;
16631     +      delete  _dmdbdat _dmdbcat _classout
16632     +    %if &recreatecmeta eq Y %then %do;
16633     +    _tmpds
16634     +    %end;
16635     +    ;
16636     +    quit;
16637     +%Mend MakeDummyVariables;
16639     +/*--- Determine Optimal Number of Cluster ----
16640     +%macro FindClusNum(statds=, groupds=, minvariation=);
16641     +   %global optnclus;
16642     +   data varclus_tmp(drop=_NAME_);
16643     +      set &statDs;
16644     +      where _type_ ='PROPOR';
16645     +   run;
16646     +   proc sort data=varclus_tmp;
16647     +      by _NCL_;
16648     +   run;
16649     +   proc transpose data=varclus_tmp out=varclus_tmp;
16650     +      by _NCL_;
16651     +      var %EM_INTERVAL_INPUT
16652     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16653     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16654     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
16655     +          %do i = 2 %to &nvar;
16656     +          %let varname = %sysfunc(varname(&dsid, &i));
16657     +          &varname
16658     +          %end;
16659     +      %end;
16660     +   ;
16661     +   run;
16663     +   %if &minVariation eq %then %do;
16664     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
16665     +   %end;
16666     +   %if ^(0<&minVariation<100) %then %do;
16667     +       %let minVariation = 90;
16668     +   %end;
16670     +   data _null_;
16671     +      set varclus_tmp end=eof;
16672     +      by _NCL_;
16673     +      retain flag 0;
16674     +      if first._ncl_ then flag=0;
16675     +      if .<col1 < &minVariation then flag=1;
16676     +      if last._ncl_ and ^flag then do;
16677     +         call symput('OPTNCL', _ncl_);
16678     +         stop;
16679     +      end;
16680     +     if eof then call symput('OPTNCL', _ncl_);
16681     +   run;
16683     +   %let optnclus = &OPTNCL;
16685     +   data varclus_tmp(drop=_NCL_ _NAME_);
16686     +      set &statDs;
16687     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
16688     +   run;
16689     +   proc sort data=varclus_tmp;
16690     +      by _TYPE_;
16691     +   run;
16692     +   proc transpose data=varclus_tmp out=varclus_tmp;
16693     +      by _TYPE_;
16694     +   run;
16695     +   proc sort data=varclus_tmp;
16696     +      by _name_ _type_;
16697     +   run;
16699     +  proc transpose data=varclus_tmp out=&groupds;
16700     +      by _NAME_;
16701     +   run;
16702     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
16703     +      by Cluster descending Rsquare;
16704     +      where Cluster ne 0;
16705     +   run;
16706     +   proc datasets lib=work nolist mt=(DATA VIEW);
16707     +      delete varclus_tmp;
16708     +   run;
16709     +   quit;
16710     +%mend findClusNum;
16711     +*/
16713     +%macro getNclusfromTrain(inoutstat=, nc=);
16714     +%global &nc;
16715     +data _null_;
16716     +    set &inoutstat end=eof;
16717     +    if eof then do;
16718     +    call symput("&nc", _ncl_);
16719     +    end;
16720     +run;
16721     +%mend  getNclusfromTrain;
16723     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
16725     +     *--- Build Code to Modify Metadata ---*;
16726     +     filename X "&deltacodefile";
16727     +     data _null_;
16728     +        FILE X;
16729     +        set &groupds end=eof;
16730     +        /*by Cluster;*/
16731     +         if _N_=1 then do;
16732     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16733     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16734     +           %end;
16735     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16736     +           put "if upcase(strip(NAME)) in (";
16737     +        end;
16738     +        if Strip(upcase(Selected)) eq 'YES' then do;
16739     +           string = '"'!!trim(left(VARIABLE))!!'"';
16740     +           put string;
16741     +        end;
16742     +        if eof then do;
16743     +           put ') then ROLE="INPUT";';
16744     +           put 'else ROLE="REJECTED";';
16745     +           put 'end;';
16747     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16748     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16749     +           %end;
16750     +        end;
16751     +     run;
16752     +     quit;
16754     +     filename X;
16756     +     quit;
16757     +%mend MakeDeltaCode;
16759     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
16760     +    %if ^%sysfunc(exist(&statds)) %then %do;
16761     +         %goto doendc;
16762     +    %end;
16764     +    data &corrds(drop=_TYPE_ _NCL_) ;
16765     +       set &statds;
16766     +       where _type_ eq 'CORR' ;
16767     +    run ;
16768     +    proc sort data=&corrds;
16769     +       by _NAME_ ;
16770     +    run ;
16771     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
16772     +      BY _NAME_ ;
16773     +    run ;
16774     +    data &corrplotds;
16775     +       length _Y_ $100;
16776     +       set &corrplotDs;
16777     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
16778     +    run ;
16779     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
16780     +       set &corrplotds;
16781     +       where _LABEL_ ne '' ;
16782     +       keep _TMP_ _LABEL_ ;
16783     +    run ;
16784     +    data _null_;
16785     +       nobs=0;
16786     +       dsid = open('varclus_match');
16787     +       if dsid then do;
16788     +          nobs = attrn(dsid, 'NOBS');
16789     +          dsid = close(dsid);
16790     +       end;
16791     +       call symput ('CORR_NOBS', nobs);
16792     +    run;
16793     +    %if &corr_nobs %then %do;
16794     +        proc sort data=varclus_match;
16795     +           by _name_;
16796     +        run ;
16797     +        proc sort data=&corrplotds;
16798     +           by _name_;
16799     +        run ;
16800     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
16801     +           merge varclus_match &corrplotds;
16802     +           by _NAME_ ;
16803     +           if _X_ eq '' then _X_=_NAME_ ;
16804     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16805     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16806     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16808     +       run ;
16809     +    %end;
16810     +    %else %do;
16811     +        proc sort data=&corrplotds;
16812     +           by _name_;
16813     +        run ;
16814     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
16815     +           set &corrplotds;
16816     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16817     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16818     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16820     +        run ;
16821     +    %end;
16822     +    proc sort data=&corrplotds;
16823     +       by _X_ _Y_;
16824     +    run ;
16825     +    proc datasets lib=work nolist mt=(DATA VIEW);
16826     +       delete varclus_match;
16827     +    run;
16828     +    quit;
16830     +%doendc:
16832     +%mend MakeVarClusCorrData;
16834     +%macro MakeStatPlotData(statds= , outstatplotds=);
16835     +   %if %sysfunc(exist(&statds)) %then %do;
16837     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
16838     +          set &statDs;
16839     +          where _type_ in('MEAN', 'STD', 'N');
16840     +       run ;
16841     +       proc transpose data=varclus_tmp out=&outstatplotds;
16842     +          id _TYPE_ ;
16843     +       run ;
16844     +       data &outstatplotds;
16845     +          set &outstatplotds(obs=1000);
16846     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
16847     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16848     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
16849     +          else SCALEDSTD= STD ;
16850     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
16851     +       run ;
16852     +       proc sort data=&outstatplotds;
16853     +          by descending SCALEDSTD ;
16854     +       run ;
16855     +       proc datasets lib=work nolist mt=(DATA VIEW);
16856     +          delete varclus_tmp;
16857     +       run;
16858     +       quit;
16859     +    %end;
16861     +%mend MakeStatPlotData;
16864     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
16865     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
16866     +    data &EM_USER_OUTSTATSCORE;
16867     +          set &indata;
16868     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16869     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16870     +          if _TYPE_ = 'STD' then _NAME_='STD';
16871     +          DROP _TYPE_ _NCL_;
16872     +     run;
16874     +     filename _file_  "&fileRef";
16876     +     data _null_;
16877     +        FILE _file_ MOD;
16878     +        put ' ';
16879     +        put '/*-------------------------------------------------*/';
16880     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
16881     +        put '/*-------------------------------------------------*/';
16882     +        put ' ';
16883     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
16885     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16886     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16888     +        %let k = 1;
16889     +        %do %while(^%sysfunc(fetch(&dsid)));
16890     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16891     +                %if &k > 2 %then %do;
16892     +                 %let cn = %eval(&k-2);
16893     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
16894     +                %end;
16895     +                %let k = %eval(&k+1);
16896     +        %end;
16898     +        %let rc = %sysfunc(rewind(&dsid));
16900     +        %do i= 2 %to &nvar;
16901     +            %let _varname =  %sysfunc(varname(&dsid, &i));
16902     +            %do %while(^%sysfunc(fetch(&dsid)));
16903     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16904     +                %if &_name = MEAN %then
16905     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16906     +                %else %if &_name = STD %then
16907     +                %let _std = %sysfunc(getvarn(&dsid, &i));
16908     +                %else %do;
16909     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16910     +                      %let abscoeff = %sysfunc(abs(&coeff));
16911     +                          %if &abscoeff >  0 %then %do;
16912     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16913     +                           %end;
16914     +                 %end;
16915     +             %end;
16916     +             %let rc = %sysfunc(rewind(&dsid));
16917     +         %end;
16919     +        %let dsid= %sysfunc(close(&dsid));
16920     +       run;
16921     +%mend CreateScoreCode;
16925     +/*----------------------------------------------------------
16926     +    Instead of using %MakeRSquareData,
16927     +    %MakeVarClusResultTable at macro2.source is used
16928     + +----------------------------------------------------------*/
16931     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
16933     +/* modifying  from ods rsquare = data */
16935     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
16936     +    Length Cluster $16;
16937     +    length Variable $32;
16938     +    Length VariableLabel $64;
16939     +    set &indata; retain CurrentCluster;
16940     +    if NumberOfClusters ^= &ncluster then delete;
16941     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
16942     +    CurrentCluster = Cluster;
16943     +   run;
16944     +proc sort data =&outdata ;
16945     +     by Cluster RsquareRatio;
16946     +run;
16947     +data _tmprsq(drop=index);
16948     +     set &outdata; by Cluster;
16949     +     if first.Cluster then do;
16950     +     index = strip(scan(Cluster,2 ));
16951     +     Variable = "Clus"||index;
16952     +     VariableLabel = "Cluster Component "||index;
16953     +     OwnCluster = 1;
16954     +     NextClosest = .;
16955     +     RsquareRatio = 0;
16956     +     output;
16957     +     end;
16958     +run;
16960     +proc sort data = _tmprsq ;
16961     +     by Cluster RsquareRatio;
16962     +run;
16963     +data &outdata;
16964     +     set &outdata _tmprsq;
16965     +by Cluster;
16966     +run;
16969     +/* Just create the Selected variable with all YES */
16971     +data &outdata;
16972     +    set &outdata; by cluster;
16973     +    length Selected $8;
16974     +    Selected = 'YES';
16975     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16976     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16977     +    rename OwnCluster = RSqWithClusterComp;
16978     +    rename NextClosest = RSqWithNextClusComp;
16979     +run;
16982     +/* Selected = Y/N will be done %score section -----
16984     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
16985     +data &outdata;
16986     +    set &outdata; by cluster;
16987     +    length Selected $8;
16988     +    if first.Cluster then Selected = 'YES';
16989     +    else Selected = 'NO';
16990     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16991     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16992     +    rename OwnCluster = RSqWithClusterComp;
16993     +    rename NextClosest = RSqWithNextClusComp;
16994     +run;
16995     +%end;
16996     +%else %do;
16997     +data &outdata;
16998     +    set &outdata; by cluster;
16999     +    if last.Cluster then Selected = 'YES';
17000     +    else Selected = 'NO';
17001     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
17002     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
17003     +    rename OwnCluster = RSqWithClusterComp;
17004     +    rename NextClosest = RSqWithNextClusComp;
17005     +run;
17006     +%end;
17007     +---------------------------------------------------------------*/
17009     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
17010     +/* to calculate NextClosestClusRsq */
17011     +proc transpose data = &inClusRSquare  out=_clusRsq;
17012     +      by cluster;
17013     +      run;
17014     +data _clusRsq;
17015     +     set _clusRsq;
17016     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
17017     +run;
17019     +proc sort data=_clusRsq;
17020     +    by cluster col1;
17021     +    run;
17022     +data _clusRsq(drop=_NAME_ _LABEL_);
17023     +     set _clusRsq; by cluster;
17024     +     if last.Cluster then output;
17025     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
17026     +     rename COL1 = RSqWithNextClusComp;
17027     +     rename Cluster = Variable;
17028     +     label  Cluster = "Variable";
17029     +run;
17031     +proc sort data =&outdata;
17032     +     by Variable;
17033     +run;
17034     +data &outdata;
17035     +    merge &outdata _clusRsq;
17036     +    by Variable;
17037     +run;
17038     +proc sort data =&outdata;
17039     +by Cluster  RsquareRatio;
17040     +run;
17041     +quit;
17042     +%end;
17044     +proc datasets lib = work nolist;
17045     +     delete _tmprsq _clusRsq;
17046     +     run;
17047     +quit;
17049     +%mend MakeRSquareData;
17052     +/*-------------------------------------------------------------------------*/
17056     +%macro ModifyCorr(indata=,
17057     +                  outdata=,
17058     +                  rsquare = Y
17059     +                  );
17060     +    data corr_tmp;
17061     +        set &indata;
17062     +    run;
17063     +     proc sql;
17064     +           update &indata
17065     +           set
17066     +     %let dsid = %sysfunc(open(work.corr_tmp));
17067     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
17068     +          %do i = 4 %to &nvar;
17069     +          %let _name = %sysfunc(varname(&dsid, &i));
17070     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
17071     +            %else  %let _name_md = &_name;
17072     +            %if &i < &nvar %then %do;
17073     +               &_name = 1- &_name_md ,
17074     +            %end;
17075     +            %else %do;
17076     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
17077     +            %end;
17078     +          %end;
17079     +      %let dsid= %sysfunc(close(&dsid));
17081     +      select * from &indata;
17082     +      run;
17083     +      proc datasets lib = work nolist;
17084     +           delete corr_tmp;
17085     +      run;
17086     +      quit;
17088     + %mend ModifyCorr;
17090     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
17091     +    data &outdata(drop= _NCL_  _TYPE_);
17092     +       set &indata;
17093     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
17094     +       rename _NAME_ = Cluster;
17095     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
17096     +    run;
17097     +    %if &RSquare eq Y %then %do;
17098     +     data corr_tmp;
17099     +        set &outdata;
17100     +     run;
17102     +     data &outdata(drop=i);
17103     +          set &outdata;
17104     +          %let dsid = %sysfunc(open(work.corr_tmp));
17105     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17106     +          %do i = 2 %to &nvar;
17107     +            %let _name = %sysfunc(varname(&dsid, &i));
17108     +            %let _name_md = &_name.**2;
17109     +                &_name = &_name_md;
17110     +          %end;
17111     +      %let dsid= %sysfunc(close(&dsid));
17112     +      run;
17113     +      proc datasets lib = work nolist;
17114     +           delete corr_tmp;
17115     +      run;
17117     +    %end;
17118     +     quit;
17119     +%mend MakeClusStructCorrData;
17121     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
17122     +    data &outdata(drop= _NCL_  _TYPE_);
17123     +       set &indata;
17124     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
17125     +       rename _NAME_ = Cluster;
17126     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
17127     +    run;
17128     +    data corr_tmp;
17129     +        set &outdata;
17130     +    run;
17132     +    %let dsid = %sysfunc(open(work.corr_tmp));
17133     +    %let nclus2= %eval(&ncluster+1);
17134     +    data &outdata;
17135     +         set &outdata;
17136     +          %do i = 2 %to &nclus2;
17137     +          %let i_1 = %eval(&i-1);
17138     +            %let _name = %sysfunc(varname(&dsid, &i));
17139     +            %let _newName = Clus&i_1;
17140     +                rename &_name = &_newName; ;
17141     +                *label &_name ="Cluster &i_1";
17142     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
17143     +          %end;
17144     +          keep Cluster
17145     +          %do i = 2 %to &nclus2;
17146     +                %let _name = %sysfunc(varname(&dsid, &i));
17147     +                &_name
17148     +          %end;
17149     +          ;
17150     +    %let dsid= %sysfunc(close(&dsid));
17151     +     run;
17152     +     quit;
17154     +    %if &RSquare eq Y %then %do;
17156     +       data corr_tmp;
17157     +        set &outdata;
17158     +     run;
17160     +     data &outdata(drop=i);
17161     +          set &outdata;
17162     +          %let dsid = %sysfunc(open(work.corr_tmp));
17163     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17164     +          %do i = 2 %to &nvar;
17165     +            %let _name = %sysfunc(varname(&dsid, &i));
17166     +            %let _name_md = &_name.**2;
17167     +                &_name = &_name_md;
17168     +          %end;
17169     +      %let dsid= %sysfunc(close(&dsid));
17170     +      run;
17171     +    %end;
17173     +    %if &makeplotds eq Y %then %do;
17174     +     proc transpose data = &outdata
17175     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
17176     +          by cluster;
17177     +     run;
17178     +     data &plotds;
17179     +          set  &plotds;
17180     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
17181     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
17182     +     run;
17183     +     %end;
17184     +     proc datasets lib = work nolist;
17185     +           delete corr_tmp;
17186     +     run;
17187     +     quit;
17188     +%mend MakeInterClusCorrData;
17191     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
17193     +data &outlink(drop = Selected);
17194     +     set &indata;
17195     +     LINKID = _N_;
17196     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
17197     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
17198     +run;
17199     +data &outnode(keep=NODEID TYPE LABEL);
17200     +    set &indata;
17201     +    length TYPE $16;
17202     +    rename Variable = NODEID;
17203     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
17204     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
17205     +    then  TYPE = "CLUSTER";
17206     +    else  TYPE="VARIABLE";
17207     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
17208     +run;
17209     +quit;
17210     +%mend MakeClusConstellData;
17214     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
17216     +data &outlink(drop = Selected);
17217     +     set &indata;
17218     +     LINKID = _N_;
17219     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
17220     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
17221     +run;
17222     +data &outnode(keep=NODEID TYPE LABEL);
17223     +    set &indata;
17224     +    length TYPE $16;
17225     +    rename Variable = NODEID;
17226     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
17227     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
17228     +    then  TYPE = "CLUSTER";
17229     +    else  TYPE="VARIABLE";
17230     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
17231     +run;
17232     +quit;
17233     +%mend MakeClusConstellData;
17236     +/*--- This will work only when inds is not a view data -------
17238     +%macro getNVarNObs(inds=, nvar=, nobs=);
17240     +    %global &nvar;
17241     +    %global &nobs;
17242     +    data _null_;
17243     +         dsid = open("&inds");
17244     +         nv = attrn(dsid, 'NVAR');
17245     +         no = attrn(dsid, 'NOBS');
17246     +         dsid = close(dsid);
17247     +         call symput("&nvar", nv);
17248     +         call symput("&nobs", no);
17249     +    run;
17250     +    quit;
17251     +%mend  getNVarNObs;
17253     ++---------------------------------------------------------------*/
17256     +%macro getNVar(inds=, nvar=);
17257     +    %global &nvar;
17258     +    data _null_;
17259     +         dsid = open("&inds");
17260     +         nv = attrn(dsid, 'NVAR');
17261     +         dsid = close(dsid);
17262     +         call symput("&nvar", nv);
17263     +    run;
17264     +    quit;
17265     +%mend  getNVar;
17269     +%macro getNObs(inds=, nobs=);
17270     +    %global &nobs;
17271     +    data _null_;
17272     +        set &inds end=eof;
17273     +        if eof then call symput("&nobs", _N_);
17274     +    run;
17275     +    quit;
17276     +%mend  getNObs;
17278     +%Macro CreateVarclusMeta(trainnum=);
17279     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
17280     +    data &EM_USER_VARCLUSMETA;
17281     +         length TrainNum 8.;
17282     +         length NewTrain $8;
17283     +         length NGCluster 8.;
17284     +         length ExportedComp $16;
17285     +         length HideVariable $8;
17286     +         TrainNum = &trainnum;
17287     +         NewTrain = "Y";
17288     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
17289     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
17290     +         NGCluster = 0; /* zero means no twostage */
17291     +   run;
17292     +   quit;
17293     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
17295     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
17296     +    data &outdata(drop= _NCL_  _TYPE_);
17297     +       set &indata;
17298     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
17299     +       %if &globalclusid ne %then %do;
17300     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
17301     +       rename _NAME_ = Cluster;
17302     +       %end;
17303     +       %else %do;
17304     +        _NAME_ = upcase(_NAME_);
17305     +       rename _NAME_ = Cluster;
17306     +       %end;
17307     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
17308     +    run;
17309     +    data corr_tmp;
17310     +        set &outdata;
17311     +    run;
17313     +    %let dsid = %sysfunc(open(work.corr_tmp));
17314     +    %let nclus2= %eval(&ncluster+1);
17315     +    data &outdata;
17316     +         set &outdata;
17317     +          %do i = 2 %to &nclus2;
17318     +          %let i_1 = %eval(&i-1);
17319     +            %let _name = %sysfunc(varname(&dsid, &i));
17320     +            %if &globalclusid ne %then
17321     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
17322     +                     rename &_name = &_newName;
17323     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
17324     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
17325     +                %end;
17326     +            %else
17327     +                %do; %let _newName = CLUS&i_1;
17328     +                     rename &_name = &_newName;
17329     +                     *label &_name ="Cluster &i_1";
17330     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
17331     +                %end;
17332     +          %end;
17333     +          keep Cluster
17334     +          %do i = 2 %to &nclus2;
17335     +                %let _name = %sysfunc(varname(&dsid, &i));
17336     +                &_name
17337     +          %end;
17338     +          ;
17339     +    %let dsid= %sysfunc(close(&dsid));
17340     +     run;
17341     +     quit;
17343     +    %if &RSquare eq Y %then %do;
17345     +       data corr_tmp;
17346     +        set &outdata;
17347     +     run;
17349     +     data &outdata;
17350     +          set &outdata;
17351     +          %let dsid = %sysfunc(open(work.corr_tmp));
17352     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17353     +          %do i = 2 %to &nvar;
17354     +            %let _name = %sysfunc(varname(&dsid, &i));
17355     +            %let _name_md = &_name.**2;
17356     +                &_name = &_name_md;
17357     +          %end;
17358     +      %let dsid= %sysfunc(close(&dsid));
17359     +      run;
17360     +    %end;
17362     +    %if &makeplotds eq Y %then %do;
17363     +     proc transpose data = &outdata
17364     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
17365     +          by cluster;
17366     +     run;
17367     +     data &plotds;
17368     +          set  &plotds;
17369     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
17370     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
17371     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
17372     +     run;
17373     +     %end;
17374     +     proc datasets lib = work nolist;
17375     +           delete corr_tmp;
17376     +     run;
17377     +     quit;
17378     +%mend MakeInterClusCorrData;
17380     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
17381     +    data _tmpds(drop= _NCL_);
17382     +       set &indata;
17383     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
17384     +       %if &globalclusid ne %then %do;
17385     +           _NAME_ = "GC&globalclusid.";
17386     +       rename _NAME_ = Cluster;
17387     +       %end;
17388     +       %else %do;
17389     +        _NAME_ = "CLUS";
17390     +        rename _NAME_ = Cluster;
17391     +       %end;
17392     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
17393     +    run;
17394     +    proc transpose data =_tmpds out =&outdata;
17395     +    run;
17397     +    data &outdata(drop=COL1);
17398     +        %if &globalclusid ne %then %do;
17399     +        length GCluster $16;
17400     +        %end;
17401     +        length Cluster $32;
17402     +        length _NAME_ $32;
17403     +         set &outdata;
17404     +         _NAME_ = upcase(_NAME_);
17405     +         rename _NAME_=Variable;
17406     +         *label _NAME_="Variable";
17407     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17408     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17409     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17411     +         %if &globalclusid ne %then %do;
17412     +          GCluster = "GC&globalclusid";
17413     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
17414     +         %end;
17415     +         %else %do;
17416     +         Cluster = "CLUS"||strip(COL1);
17417     +        %end;
17418     +         rename COL2 = RSqWithOwnClusComp;
17419     +         *label COL2 = "R-Square With Own Cluster Component";
17420     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
17422     +   run;
17423     +   proc sort data =&outdata;
17424     +        by Cluster RSqWithOwnClusComp;
17425     +   run;
17426     +   proc datasets lib = work nolist;
17427     +           delete _tmpds;
17428     +   run;
17429     +   quit;
17430     +%mend MakeOwnRSquare;
17432     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
17433     +    data &outdata(drop= _NCL_  _TYPE_);
17434     +       %if &globalclusid ne %then %do;
17435     +        length GCluster $16;
17436     +        %end;
17437     +       set &indata;
17438     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
17439     +       %if &globalclusid ne %then %do;
17440     +         GCluster = "GC&globalclusid";
17441     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
17442     +         rename _NAME_ = Cluster;
17443     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17444     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17446     +       %end;
17447     +       %else %do;
17448     +         _NAME_ = upcase(_NAME_);
17449     +         rename _NAME_ = Cluster;
17450     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17451     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17453     +       %end;
17454     +     run;
17455     +    %if &RSquare eq Y %then %do;
17456     +     data corr_tmp;
17457     +          set &outdata;
17458     +     run;
17459     +     %let istart = 2;
17460     +     %if &globalclusid ne %then %let istart = 3;
17461     +     data &outdata;
17462     +          set &outdata;
17463     +          %let dsid = %sysfunc(open(work.corr_tmp));
17464     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17465     +          %do i =&istart %to &nvar;
17466     +            %let _name = %sysfunc(varname(&dsid, &i));
17467     +            %let _name_md = &_name.**2;
17468     +                &_name = &_name_md;
17469     +          %end;
17470     +      %let dsid= %sysfunc(close(&dsid));
17471     +      run;
17472     +      proc datasets lib = work nolist;
17473     +           delete corr_tmp;
17474     +      run;
17475     +    %end;
17476     +     quit;
17477     +%mend MakeClusStructCorrData;
17479     +/*
17480     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
17481     +*/
17483     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
17485     +     /* The indata should be the outdata
17486     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
17488     +     proc sort data =&indata out=_tmpclusRsq;
17489     +     by cluster;
17490     +     run;
17492     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
17493     +      by cluster;
17494     +     run;
17496     +     proc sort data=_tmpclusRsq;
17497     +        by _NAME_ COL1;
17498     +     run;
17500     +     data _tmpclusRsq;
17501     +         length _NAME_ $32;
17502     +         set _tmpclusRsq; by _NAME_;
17503     +          _NAME_ = upcase(_NAME_);
17504     +          %if &ncluster ne 1 %then %do;
17505     +             if last._NAME_ then delete;
17506     +          %end;
17507     +          %else %do;
17508     +             COL1 = 0;
17509     +          %end;
17510     +     run;
17511     +     /* need to sort again */
17512     +     proc sort data=_tmpclusRsq;
17513     +        by _NAME_ COL1;
17514     +     run;
17516     +     data &outdata;
17517     +         set _tmpclusRsq; by _NAME_;
17518     +         Cluster = upcase(Cluster);
17519     +         if last._NAME_ then output;
17520     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
17521     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
17522     +         rename COL1 = RSqWithNextClusComp;
17523     +         Cluster = upcase(Cluster);
17524     +         rename Cluster = ClosestCluster;
17525     +         *label  Cluster = "Next Closest Cluster";
17526     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
17527     +         rename _NAME_ = Variable;
17528     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17529     +    run;
17532     +    %if &globalclusid ne %then %do;
17533     +    data &outdata;
17534     +       length GCluster $16;
17535     +       set &outdata;
17536     +       GCluster = "GC&globalclusid";
17537     +       run;
17538     +    %end;
17539     +    proc datasets lib = work nolist;
17540     +           delete _tmpclusRsq;
17541     +    run;
17542     +    quit;
17543     +%mend FindNextClosestClusByVar;
17546     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
17547     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
17548     +     proc sort data =&indata out=_tmpclusRsq;
17549     +     by cluster;
17550     +     run;
17551     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
17552     +     by cluster;
17553     +     run;
17554     +     proc sort data=_tmpclusRsq;
17555     +        by _NAME_ col1;
17556     +     run;
17557     +     data _tmpclusRsq;
17558     +         length _NAME_ $32;
17559     +         set _tmpclusRsq; by _NAME_;
17560     +          _NAME_ = upcase(_NAME_);
17561     +          %if &ncluster ne 1 %then %do;
17562     +             if last._NAME_ then delete;
17563     +          %end;
17564     +          %else %do;
17565     +             COL1 = 0;
17566     +          %end;
17567     +     run;
17568     +     data &outdata;
17569     +         set _tmpclusRsq; by _NAME_;
17570     +         Cluster = upcase(Cluster);
17571     +         if last._NAME_ then output;
17572     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
17573     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
17574     +         rename COL1 = RSqWithNextClusComp;
17575     +         Cluster = upcase(Cluster);
17576     +         rename Cluster = ClosestCluster;
17577     +         *label  Cluster = "Next Closest Cluster";
17578     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
17579     +         rename _NAME_ = Variable;
17580     +         *label  _NAME_ = "Variable";
17581     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17583     +    run;
17584     +    %if &globalclusid ne %then %do;
17585     +    data &outdata;
17586     +       length GCluster $16;
17587     +       set &outdata;
17588     +       GCluster = "GC&globalclusid";
17589     +       run;
17590     +    %end;
17592     +    proc datasets lib = work nolist;
17593     +           delete _tmpclusRsq;
17594     +    run;
17596     +    quit;
17597     +%mend FindNextClosestClusByCluster;
17599     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
17600     +/*----
17601     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
17602     +-----------*/
17604     +proc sort data =&indata1;
17605     +    by Variable;
17606     +run;
17607     +proc sort data =&indata2;
17608     +    by Variable;
17609     +run;
17610     +data &outdata;
17611     +    merge &indata1 &indata2;
17612     +    by Variable;
17613     +    length Type $16;
17614     +    Type = 'Variable';
17615     +    *label Type ='Type';
17616     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
17617     +run;
17620     +data &indata3;
17621     +    set  &indata3 ;
17622     +    length RSqWithOwnClusComp 8.;
17623     +    Cluster = Variable;
17624     +    RSqWithOwnClusComp = 1;
17625     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
17626     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
17627     +    length Type $16;
17628     +    Type = 'ClusterComp';
17629     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
17631     +;
17632     +run;
17634     +proc sort data=&outdata;
17635     +    by Cluster;
17636     +run;
17637     +proc sort data =&indata3;
17638     +    by Cluster;
17639     +run;
17641     +data &outdata;
17642     +     set &outdata &indata3;
17643     +     by Cluster;
17644     +run;
17647     +/* Create the Selected variable with all YES */
17649     +data &outdata;
17650     +     set &outdata;
17651     +     length RsqRatio 8.;
17652     +     length Selected $8;
17653     +     *label RSqRatio = "1-R**2 Ratio";
17654     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
17655     +     *label Selected = "Variable Selected";
17656     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
17657     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
17658     +     Selected ='YES';
17659     +     rename _LABEL_ = Label;
17660     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17661     +run;
17664     +/*----  Selected = Y/N will be assigened at the %score                   -------+
17665     +        Just create the Selected variable with all YES at the step above
17666     + +------------------------------------------------------------------------------+
17668     +proc sort data=&outdata;
17669     +    by Cluster RsqRatio;
17670     +run;
17672     +%if &selectedcomp eq CLUSTERCOMP %then %do;
17673     +data &outdata;
17674     +     set &outdata; by Cluster;
17675     +     length Selected $8;
17676     +     label Selected = "Variable Selected";
17677     +     if  first.Cluster then Selected ='Yes';
17678     +     else Selected = 'No';
17679     +    run;
17680     +%end;
17681     +%else %do;
17682     +data &outdata(drop = _var _varchange);
17683     +     set &outdata; retain _var 0; by Cluster;
17684     +     length Selected $8;
17685     +     label Selected = "Variable Selected";
17686     +     if first.Cluster then  _varchange = 0;
17687     +     else _varchange =1;
17688     +     if _var ne _varchange then  Selected  = 'Yes';
17689     +     else Selected = 'No';
17690     +     if last.cluster then  _var = 0;
17691     +     else _var = _varchange;
17692     +run;
17693     +%end;
17695     +--------------------------------------------------------------*/
17697     +quit;
17698     +%mend MakeVarClusResultTable;
17700     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
17701     +     proc sort data =&indata;
17702     +        by cluster;
17703     +     run;
17704     +     proc transpose data =&indata
17705     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
17706     +          by cluster;
17707     +     run;
17708     +     data &outdata;
17709     +          set  &outdata;
17710     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17711     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17712     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
17713     +     run;
17714     +     %if &globalclusid ne %then %do;
17715     +     data &outdata;
17716     +          Length GCluster $16;
17717     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17718     +          set  &outdata;
17719     +          GCluster ="GC&globalclusid.";
17720     +          run;
17721     +     %end;
17723     +%Mend MakePlotDataFromCorrTable;
17726     +%macro MakeCorrelation(indata=,
17727     +                       outstat=_tmpoutstat,
17728     +                       corrmatrix=N,
17729     +                       outcorr=_tmpoutcorr,
17730     +                       includeclassvar=N,
17731     +                       target=,
17732     +                       freq=,
17733     +                       weight=);
17734     +   %if &target eq  %then %do;
17736     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
17737     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17738     +       %if &includeclassvar eq Y %then %do;
17739     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17740     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17741     +          %do i = 2 %to &nvar;
17742     +          %let varname = %sysfunc(varname(&dsid, &i));
17743     +          &varname
17744     +          %end;
17745     +       %end;
17746     +       ;
17747     +      %if &freq ne  %then %do;
17748     +          freq &freq;
17749     +      %end;
17750     +      %if &weight ne  %then %do;
17751     +          weight &weight;
17752     +      %end;
17754     +      run;
17755     +      %if &corrmatrix eq Y %then %do;
17756     +      data  &outcorr (drop = _NCL_ _TYPE_);
17757     +           set  &outstat ;
17758     +           if _TYPE_ ='CORR' then output;
17759     +      run;
17760     +      %end;
17761     +    %end;
17762     +    %else %do;
17763     +       proc corr data=&indata outp=&outstat noprint;
17764     +            var
17765     +       %let dsid = %sysfunc(open(&indata));
17766     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
17767     +          %do i = 1 %to &nvar;
17768     +              %let _name = %sysfunc(varname(&dsid, &i));
17769     +              %if &_name ne &target %then;
17770     +              &_name
17771     +           %end;
17772     +        %let dsid= %sysfunc(close(&dsid));
17773     +        ;
17774     +        with &target;
17775     +        run;
17776     +    %end;
17777     +    quit;
17778     +%mend MakeCorrelation;
17781     +%macro MakeCorrelationDistance(indata=,
17782     +                               outdata=,
17783     +                               rsquare = N
17784     +                               );
17785     +    data corr_tmp;
17786     +        set &indata;
17787     +        if _N_ = 1 then do;
17788     +           output;
17789     +           stop;
17790     +         end;
17791     +    run;
17792     +    %if &outdata ne  %then %let  _outdata = &outdata;
17793     +    %else %let _outdata = &indata;
17795     +    data &_outdata;
17796     +         set &indata;
17798     +         %let dsid = %sysfunc(open(work.corr_tmp));
17799     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
17800     +          %do i = 2 %to &nvar;
17801     +              %let _name = %sysfunc(varname(&dsid, &i));
17802     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
17803     +              %else  %let _name_md = &_name;
17804     +              &_name = 1- &_name_md;
17805     +          %end;
17806     +      %let dsid= %sysfunc(close(&dsid));
17807     +      run;
17808     +      proc datasets lib = work nolist;
17809     +           delete corr_tmp;
17810     +      run;
17811     +      quit;
17812     +  %mend MakeCorrelationDistance;
17815     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
17816     +                                   rsquare = N
17817     +                                   );
17818     +    data corr_tmp;
17819     +        set &indata;
17820     +    run;
17821     +    proc sql noprint;
17822     +           update &indata
17823     +           set
17824     +     %let dsid = %sysfunc(open(work.corr_tmp));
17825     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
17826     +          %do i = 4 %to &nvar;
17827     +          %let _name = %sysfunc(varname(&dsid, &i));
17828     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
17829     +            %else  %let _name_md = &_name;
17830     +            %if &i < &nvar %then %do;
17831     +               &_name = 1- &_name_md ,
17832     +            %end;
17833     +            %else %do;
17834     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
17835     +            %end;
17836     +          %end;
17837     +      %let dsid= %sysfunc(close(&dsid));
17839     +      select * from &indata;
17840     +      run;
17841     +     data &indata( drop = _NCL_);
17842     +           set &indata;
17843     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
17844     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
17845     +     run;
17846     +     data &indata(DROP = _NCL_);
17847     +           set &indata;
17848     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
17849     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
17850     +           rename _NAME_ = _VAR_;
17851     +     run;
17852     +     proc datasets lib = work nolist;
17853     +           delete corr_tmp;
17854     +     run;
17855     +     quit;
17856     + %mend UpdateOutStatCorrToDistance;
17859     +%macro HierClusWithCorr(indata= ,
17860     +                        ncluster=,
17861     +                        method = Ward,
17862     +                        outtree = _outtree,
17863     +                        idvar =_VAR_,
17864     +                        outdata=,
17865     +                        rescore = N,
17866     +                        newncluster=
17867     +                        );
17868     +      %global &newncluster;
17869     +      %if &rescore ne Y %then %do;
17870     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
17871     +                   method=&method outtree=&outtree noprint;
17872     +           id &idvar;
17873     +      run;
17874     +      %end;
17875     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
17876     +      run;
17877     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
17878     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
17879     +      run;
17880     +      data _outcontent;
17881     +          set _outcontent;
17882     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
17883     +          index = 1;
17884     +          rename NAME = _NAME_;
17885     +      run;
17886     +      proc sort data=_outcontent;
17887     +          by _NAME_;
17888     +      run;
17889     +      proc sort data =&outdata;
17890     +           by _NAME_;
17891     +      run;
17892     +      data &outdata(drop=index);
17893     +          merge &outdata _outcontent;
17894     +          by _NAME_;
17895     +          if index = . then delete;
17896     +      run;
17897     +      /*-----------------------------------------------------------*/
17898     +      data &outdata;
17899     +           length CLUSNAME $16;
17900     +           set &outdata;
17901     +           if CLUSTER > &ncluster then delete;
17902     +           CLUSNAME='GC'||strip(CLUSTER);
17903     +           *label CLUSNAME = "Cluster Name";
17904     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
17905     +           rename _NAME_ = VARIABLE ;
17906     +           *label _NAME_ = "Variable";
17907     +           *label CLUSTER = "Cluster";
17908     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17909     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17910     +      run;
17911     +      proc sort data=&outdata out=&outdata;
17912     +           by CLUSTER;
17913     +      run;
17914     +      proc means data =&outdata noprint;
17915     +           output out=_meanout;
17916     +      run;
17917     +      data _null_;
17918     +            set _meanout;
17919     +            if strip(_STAT_) eq 'MAX' then do;
17920     +            call symput("&newncluster", CLUSTER);
17921     +            stop;
17922     +            end;
17923     +      run;
17925     +      proc datasets lib = work nolist;
17926     +           delete _outcontent _meanout;
17927     +      run;
17928     +      quit;
17929     +%mend  HierClusWithCorr;
17931     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
17933     +     data _tmpindata;
17934     +          set &indata;
17935     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17936     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17937     +          if _TYPE_ = 'STD' then _NAME_='STD';
17938     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
17939     +          DROP _TYPE_ _NCL_;
17940     +     run;
17942     +     filename _file_  "&fileRef";
17944     +     data _null_;
17945     +        FILE _file_ MOD;
17946     +        put ' ';
17947     +        put "/*-------------------------------------------------*/";
17948     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
17949     +        put "/*-------------------------------------------------*/";
17950     +        put ' ';
17951     +        %let dsid = %sysfunc(open(work._tmpindata));
17953     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17954     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17955     +        %let k = 1;
17956     +        %do %while(^%sysfunc(fetch(&dsid)));
17957     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17958     +               %if &k > 2 %then %do;
17959     +                %let cn = %eval(&k-2);
17960     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
17961     +                %end;
17962     +                %let k = %eval(&k+1);
17964     +        %end;
17965     +        %let rc = %sysfunc(rewind(&dsid));
17967     +        %do j= 2 %to &nvar;
17968     +            %let _varname = %sysfunc(varname(&dsid, &j));
17969     +            %do %while(^%sysfunc(fetch(&dsid)));
17970     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17971     +                %if &_name = MEAN %then
17972     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
17973     +                %else %if &_name = STD %then
17974     +                %let _std = %sysfunc(getvarn(&dsid, &j));
17975     +                %else %do;
17976     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
17977     +                      %let abscoeff = %sysfunc(abs(&coeff));
17978     +                          %if &abscoeff >  0 %then %do;
17979     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17980     +                           %end;
17981     +                 %end;
17982     +             %end;
17983     +             %let rc = %sysfunc(rewind(&dsid));
17984     +         %end;
17986     +        %let dsid= %sysfunc(close(&dsid));
17988     +     run;
17990     +     filename _file_;
17991     +     proc datasets lib = work nolist;
17992     +           delete _tmpindata;
17993     +     run;
17994     +     quit;
17995     +%mend CreateScoreCode2;
17998     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
18000     +     /*--- Build Code to Modify Metadata ---*/
18001     +     filename X "&deltacodefile";
18002     +     data _null_;
18003     +        FILE X;
18004     +        set &groupds end=eof;
18005     +        if _N_=1 then do;
18006     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18007     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18008     +           %end;
18009     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18010     +           put "if upcase(strip(NAME)) in (";
18011     +        end;
18012     +        if Strip(upcase(Selected)) eq 'YES' then do;
18013     +           string = '"'!!trim(left(VARIABLE))!!'"';
18014     +           put string;
18015     +        end;
18016     +        if eof then do;
18017     +           put ') then ROLE="INPUT";';
18018     +           put 'else ROLE="REJECTED";';
18019     +           put 'end;';
18021     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18022     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18023     +           %end;
18024     +        end;
18025     +     run;
18026     +     quit;
18028     +     filename X;
18029     +     quit;
18030     +%mend MakeDeltaCode2;
18032     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
18033     +  %global &ngc;
18034     +  data _null_;
18035     +  %if &indata ne %then %do;
18036     +      %let dsid = %sysfunc(open(&indata));
18037     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
18038     +      %let dsid = %sysfunc(close(&dsid));
18039     +  %end;
18040     +  %else %do;
18041     +       %let nvar = %eval(&ninput+&ndummy); ;
18042     +  %end;
18043     +  %let numgc = %eval(&nvar/&div+2);
18044     +  %let &ngc = &numgc;
18045     +   run;
18046     +  quit;
18047     +%mend getInitialGClusterNumber;
18050     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
18051     +data &outlink(drop = Selected);
18052     +     set &indata;
18053     +     LINKID = _N_;
18054     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
18055     +run;
18056     +data &outnode(keep=NODEID TYPE LABEL);
18057     +    set &indata;
18058     +    length TYPE $16;
18059     +    rename VARIABLE = NODEID;
18060     +    *label  CLUSNAME="Node ID";
18061     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
18062     +    TYPE = "VARIABLE";
18063     +    *label TYPE = "Node Type";
18064     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
18065     +    run;
18066     +data _tmp(keep=NODEID TYPE LABEL);
18067     +    set &indata;
18068     +    length TYPE $16;
18069     +    rename CLUSNAME = NODEID;
18070     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
18071     +    TYPE = "GCLUSTER";
18072     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
18073     +    run;
18074     +proc sort data=_tmp;
18075     +    by NODEID;
18076     +run;
18077     +data _tmp;
18078     +    set _tmp; by NODEID;
18079     +    if first.NODEID then output;
18080     +run;
18081     +proc sort data=&outnode;
18082     +    by NODEID;
18083     +run;
18084     +data  &outnode;
18085     +    set _tmp &outnode;
18086     +run;
18087     +proc datasets lib = work nolist;
18088     +     delete _tmp;
18089     +run;
18090     +quit;
18091     +%mend MakeGobalConstellData;
18093     +/* Make contellation plot data among GCLUSTERS */
18095     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
18097     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
18098     +     set &indata;
18099     +     LINKID = _N_;
18100     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
18101     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
18102     +     end;
18103     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
18104     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
18105     +     end;
18106     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
18107     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
18108     +    end;
18109     +run;
18111     +data _tmp_outrsquare;
18112     +        set &inoutrsq;
18113     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
18114     +run;
18116     +proc freq data =_tmp_outrsquare noprint;
18117     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
18118     +run;
18120     +data &outnode(keep=_NAME_ TYPE LABEL);
18121     +    set &outlink;
18122     +    length TYPE $16;
18123     +    length LABEL $100;
18124     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
18126     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
18127     +    TYPE = "GCLUSTER";
18128     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
18129     +    end;
18130     +    else do;
18131     +    TYPE= "ROOT";
18132     +    LABEL= _NAME_;
18133     +    end;
18134     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
18135     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18136     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
18137     +    run;
18139     +proc sort data=&outnode;
18140     +     by _NAME_;
18141     +proc sort data=_tmp_GCLUSFREQ;
18142     +     by _NAME_;
18143     +run;
18145     +data  &outnode;
18146     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
18147     +     if COUNT=. then COUNT=1;
18148     +run;
18150     +proc datasets lib = work nolist;
18151     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
18152     +run;
18154     +quit;
18155     +%Mend MakeGClusterConstData;
18158     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
18160     +    data _gscoretmpds;
18161     +          set &indata;
18162     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
18163     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18164     +          if _TYPE_ = 'STD' then _NAME_='STD';
18165     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
18166     +          DROP _TYPE_ _NCL_;
18167     +     run;
18169     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
18170     +        GCluster Component &globalclusid ------ */
18172     +    filename _file_  "&fileref";
18174     +    data _null_;
18175     +        %if &globalclusid eq 1 %then %do;
18176     +          FILE _file_;
18177     +        %end;
18178     +        %else %do;
18179     +          FILE _file_ MOD;
18180     +        %end;
18182     +        %let dsid = %sysfunc(open(work._gscoretmpds));
18183     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18184     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18186     +        %let k = 1;
18187     +        %do %while(^%sysfunc(fetch(&dsid)));
18188     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18189     +                %if &k > 2 %then %do;
18190     +                put "&_name = 0 ; ";
18191     +                %end;
18192     +                %let k = %eval(&k+1);
18193     +        %end;
18195     +        %let rc = %sysfunc(rewind(&dsid));
18196     +        %do i= 2 %to &nvar;
18197     +            %let _varname =  %sysfunc(varname(&dsid, &i));
18198     +            %do %while(^%sysfunc(fetch(&dsid)));
18199     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18200     +                %if &_name = MEAN %then
18201     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18202     +                %else %if &_name = STD %then
18203     +                %let _std = %sysfunc(getvarn(&dsid, &i));
18204     +                %else %do;
18205     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18206     +                      %let abscoeff = %sysfunc(abs(&coeff));
18207     +                          %if &abscoeff >  0 %then %do;
18208     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18209     +                           %end;
18210     +                 %end;
18211     +             %end;
18212     +             %let rc = %sysfunc(rewind(&dsid));
18214     +         %end;
18216     +        %let dsid= %sysfunc(close(&dsid));
18217     +       run;
18220     +       proc datasets lib=work nolist;
18221     +            delete _gscoretmpds;
18222     +       run;
18223     +      quit;
18225     +%mend CreateGClusterScoreCode;
18228     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
18230     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
18231     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
18232     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
18233     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
18234     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
18235     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
18236     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
18237     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
18238     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
18239     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
18240     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
18241     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
18242     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
18243     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
18245     +   filename gsfile "&gscorecode";
18247     +   data &EM_USER_GSCORE;
18248     +             set &indata;
18249     +             %include  gsfile;
18250     +        keep
18251     +        %do i=1 %to &ngcluster;
18252     +         %let gcvarname = GC&i;
18253     +         &gcvarname
18254     +        %end;
18255     +     ;
18256     +   run;
18258     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
18259     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
18260     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
18261     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
18262     +    noprint  ;
18263     +     var
18264     +       %do i=1 %to &ngcluster;
18265     +         %let gcvarname = GC&i;
18266     +         &gcvarname
18267     +        %end;
18268     +   ;
18269     +   run;
18272     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
18273     +   data &EM_USER_GSCORECORRPLOT ;
18274     +        set &EM_USER_GSCORECORRPLOT;
18275     +        rename _X_ = X;
18276     +        rename _Y_ = Y;
18277     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18278     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18279     +   run;
18281     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
18283     +   data &EM_USER_GSCORETREE;
18284     +        length _NAME_ $32;
18285     +        length _LABEL_ $100;
18286     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
18287     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
18288     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
18289     +        end;else do;
18290     +         _LABEL_ = _NAME_;
18291     +        end;
18292     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18294     +   run;
18296     +   quit;
18298     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: VarClus2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18301      
18302      *------------------------------------------------------------*;
18303      * End UPDATE: VarClus2;
18304      *------------------------------------------------------------*;

18305      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* VarClus2 : End update 
* datetime : 21APR2016:18:27:25 
* 
*------------------------------------------------------------* 
18307      %em_getactionstatus(emlib =EMWS8, nodeid=VarClus2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18308      %let em_Train = N;
18309      %let em_Score = N;
18310      %let em_Report = N;
18311      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "VarClus2" has already run. 
Node "VarClus2" succeeded. 
18312      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18313      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18314      put '<Node Id="VarClus2" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus2" Event="Complete" Pid="9008" Gridid=""/>';
18315      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "FILTER" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18316      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18317      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18318      put '<Node Id="Stat" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Run" Pid="9008" Gridid=""/>';
18319      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18320      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Stat : Beginning update before running 
* datetime : 21APR2016:18:27:26 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Stat_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\Stat\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Stat : End update 
* datetime : 21APR2016:18:27:26 
* 
*------------------------------------------------------------* 
18341      %em_getactionstatus(emlib =EMWS8, nodeid=Stat);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18342      %let em_Train = N;
18343      %let em_Score = N;
18344      %let em_Report = N;
18345      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Stat" has already run. 
Node "Stat" succeeded. 
18346      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18347      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18348      put '<Node Id="Stat" Event="Complete" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Complete" Pid="9008" Gridid=""/>';
18349      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "EMCODE" 
Traverser: WaitingNode "STAT2" 
Traverser: WaitingNode "GRFEXPL" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "PLOT2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP2" 
Traverser: WaitingNode "ENSMBL" 
Traverser: WaitingNode "ENSMBL5" 
Traverser: WaitingNode "ENSMBL14" 
Traverser: WaitingNode "ENSMBL25" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "ENSMBL29" 
Traverser: WaitingNode "ENSMBL28" 
Traverser: WaitingNode "ENSMBL32" 
Traverser: WaitingNode "ENSMBL27" 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "ENSMBL31" 
Traverser: WaitingNode "ENSMBL13" 
Traverser: WaitingNode "ENSMBL26" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "ENSMBL30" 
Traverser: WaitingNode "REG8" 
Traverser: WaitingNode "TREE4" 
Traverser: WaitingNode "NEURAL29" 
Traverser: WaitingNode "ENSMBL4" 
Traverser: WaitingNode "ENSMBL19" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL27" 
Traverser: WaitingNode "NEURAL25" 
Traverser: WaitingNode "NEURAL24" 
Traverser: WaitingNode "ENSMBL20" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL28" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL26" 
Traverser: WaitingNode "ENSMBL8" 
Traverser: WaitingNode "REG6" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "ENSMBL2" 
Traverser: WaitingNode "NEURAL17" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "ENSMBL16" 
Traverser: WaitingNode "ENSMBL6" 
Traverser: WaitingNode "NEURAL12" 
Traverser: WaitingNode "NEURAL16" 
Traverser: WaitingNode "NEURAL15" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "PRINCOMP" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "ENSMBL15" 
Traverser: WaitingNode "NEURAL19" 
Traverser: WaitingNode "NEURAL23" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "ENSMBL3" 
Traverser: WaitingNode "ENSMBL17" 
Traverser: WaitingNode "REG7" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL20" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "ENSMBL18" 
Traverser: WaitingNode "NEURAL21" 
Traverser: WaitingNode "NEURAL22" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL18" 
Traverser: WaitingNode "ENSMBL7" 
Traverser: WaitingNode "REG9" 
Traverser: WaitingNode "TREE5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "ENSMBL9" 
Traverser: WaitingNode "ENSMBL21" 
Traverser: WaitingNode "REG10" 
Traverser: WaitingNode "NEURAL30" 
Traverser: WaitingNode "NEURAL33" 
Traverser: WaitingNode "NEURAL31" 
Traverser: WaitingNode "ENSMBL22" 
Traverser: WaitingNode "NEURAL35" 
Traverser: WaitingNode "NEURAL34" 
Traverser: WaitingNode "META2" 
Traverser: WaitingNode "NEURAL32" 
Traverser: WaitingNode "ENSMBL10" 
Traverser: WaitingNode "REG12" 
Traverser: WaitingNode "TREE6" 
Traverser: WaitingNode "NEURAL42" 
Traverser: WaitingNode "ENSMBL12" 
Traverser: WaitingNode "ENSMBL11" 
Traverser: WaitingNode "ENSMBL23" 
Traverser: WaitingNode "REG11" 
Traverser: WaitingNode "NEURAL36" 
Traverser: WaitingNode "NEURAL41" 
Traverser: WaitingNode "NEURAL40" 
Traverser: WaitingNode "NEURAL39" 
Traverser: WaitingNode "NEURAL38" 
Traverser: WaitingNode "META3" 
Traverser: WaitingNode "NEURAL37" 
Traverser: WaitingNode "ENSMBL24" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "EMCODE2" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE3" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "EMCODE6" 
Traverser: WaitingNode "ENSMBL36" 
Traverser: WaitingNode "ENSMBL37" 
Traverser: WaitingNode "AUTONEURAL6" 
Traverser: WaitingNode "AUTONEURAL8" 
Traverser: WaitingNode "CNTRL4" 
Traverser: WaitingNode "ENSMBL38" 
Traverser: WaitingNode "ENSMBL42" 
Traverser: WaitingNode "ENSMBL43" 
Traverser: WaitingNode "ENSMBL44" 
Traverser: WaitingNode "ENSMBL45" 
Traverser: WaitingNode "ENSMBL46" 
Traverser: WaitingNode "AUTONEURAL9" 
Traverser: WaitingNode "AUTONEURAL11" 
Traverser: WaitingNode "AUTONEURAL12" 
Traverser: WaitingNode "CNTRL5" 
Traverser: WaitingNode "AUTONEURAL7" 
Traverser: WaitingNode "EMCODE4" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "META" 
Traverser: WaitingNode "AUTONEURAL10" 
Traverser: WaitingNode "CNTRL6" 
Traverser: WaitingNode "ENSMBL47" 
Traverser: WaitingNode "MDLCOMP3" 
Traverser: WaitingNode "CNTRL3" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18350      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18351      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18352      put '<Node Id="EMCODE7" Event="Run" Pid="9008" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="EMCODE7" Event="Run" Pid="9008" Gridid=""/>';
18353      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WN7LF-Leave,
      Local Host IP addr=fe80::8985:a1d7:b0a7:c9d0%11,
      Peer Hostname Name=WN7LF-Leave,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=4960,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18354      %let emloopmode =;
*------------------------------------------------------------* 
* 
* EMCODE7 : Beginning update before running 
* datetime : 21APR2016:18:27:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.EMCODE7_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\EMCODE7\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* EMCODE7 : End update 
* datetime : 21APR2016:18:27:27 
* 
*------------------------------------------------------------* 
18386      %em_getactionstatus(emlib =EMWS8, nodeid=EMCODE7);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18387      %let em_Train = Y;
18388      %let em_Score = N;
18389      %let em_Report = N;
18390      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

18391      %let emloopmode =;
18392      %let emloopnumber =0;
18393      %let emloopId =EMCODE7;
*------------------------------------------------------------* 
* 
* EMCODE7 : Running 
* datetime : 21APR2016:18:27:27 
* 
*------------------------------------------------------------* 
18394      %let SYSCC =0;
18395      %let EMGROUPMODE =;
18396      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L1J280FS "C:\\predictive-models-project\Workspaces\EMWS8\EMCODE7\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L1J280FS new;
MPRINT(EM_DIAGRAM):   run;
