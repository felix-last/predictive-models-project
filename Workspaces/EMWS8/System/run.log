NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
15515      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15516      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15517      put '<Node Id="FIMPORT" Event="Run" Pid="8144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Run" Pid="8144" Gridid=""/>';
15518      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-LQ8L5TJ,
      Local Host IP addr=fe80::5c70:6efb:b9ee:1b1d%6,
      Peer Hostname Name=DESKTOP-LQ8L5TJ,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=49937,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15519      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning update before running 
* datetime : 11APR2016:14:46:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15721      %let emexceptionString =;
15722      %let EMEXCEPTIONSTRING=;
15723      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
15724      * UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT;
15725      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15726      %let EM_ACTION = UPDATE;
15727      %let syscc = 0;
15728      /* Fimport.source */
15729      %macro main;
15730            %if %upcase(&EM_ACTION) = CREATE %then %do;
15731               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
15732               %include temp;
15733               filename temp;
15734               %create;
15735            %end;
15736            %else
15737            %if %upcase(&EM_ACTION) = TRAIN %then %do;
15738               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
15739               %include temp;
15740               filename temp;
15741               %train;
15742            %end;
15743            %else
15744            %if %upcase(&EM_ACTION) = UPDATE %then %do;
15745               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
15746               %include temp;
15747               filename temp;
15748               %update;
15749            %end;
15750            %else
15751            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
15752               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15753               %include temp;
15754               filename temp;
15755               %property;
15756            %end;
15757             %else
15758            %if %upcase(&EM_ACTION) = SCORE %then %do;
15759               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
15760               %include temp;
15761               filename temp;
15762               %score;
15763            %end;
15764            %else
15765            %if %upcase(&EM_ACTION) = REPORT %then %do;
15766               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
15767               %include temp;
15768               filename temp;
15769               %report;
15770            %end;
15771            %else
15772            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
15773               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15774               %include temp;
15775               filename temp;
15776               %openvariableset;
15777            %end;
15778            %else
15779            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
15780               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15781               %include temp;
15782               filename temp;
15783               %closevariableset;
15784            %end;
15785      %mend main;
15786      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
15787     +%macro update;
15788     +    %let oldrole = %str();
15789     +    data _null_;
15790     +       set &em_data_exportset;
15791     +       where NODEPORT='TRAIN';
15792     +       call symput('oldrole', ROLE);
15793     +    run;
15794     +    %if &oldrole ne &em_property_role %then %do;
15795     +        data &em_data_exportset;
15796     +           set &em_data_exportset;
15797     +           if NODEPORT='TRAIN' then do;
15798     +              ROLE="&em_property_role";
15799     +              NEEDUPDATE='Y';
15800     +              EXPORT='Y';
15801     +           end;
15802     +        run;
15803     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
15804     +        data _null_;
15805     +           file x;
15806     +           put ' ';
15807     +        run;
15808     +        filename x;
15809     +    %end;
15810     +    %else %do;
15811     +        data &em_data_exportset;
15812     +           set &em_data_exportset;
15813     +           if NODEPORT='TRAIN' then do;
15814     +              ROLE="&em_property_role";
15815     +              NEEDUPDATE='Y';
15816     +              EXPORT='Y';
15817     +           end;
15818     +        run;
15819     +    %end;
15821     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
15822     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
15823     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
15824     +           set &em_user_emcmetadefault;
15825     +           drop DROP;
15826     +           where DROP='N';
15827     +        run;
15828     +    %end;
15830     +%mend update;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):   data EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   set EMWS8.FIMPORT_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="TRAIN";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS8.FIMPORT_EXPORTSET.
NOTE: The data set EMWS8.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
15835      *------------------------------------------------------------*;
15836      * End UPDATE: FIMPORT;
15837      *------------------------------------------------------------*;

15838      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\FIMPORT\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : End update 
* datetime : 11APR2016:14:46:01 
* 
*------------------------------------------------------------* 
15840      %em_getactionstatus(emlib =EMWS8, nodeid=FIMPORT);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

15841      %let em_Train = N;
15842      %let em_Score = N;
15843      %let em_Report = N;
15844      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "FIMPORT" has already run. 
Node "FIMPORT" succeeded. 
15845      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15846      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15847      put '<Node Id="FIMPORT" Event="Complete" Pid="8144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Complete" Pid="8144" Gridid=""/>';
15848      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-LQ8L5TJ,
      Local Host IP addr=fe80::5c70:6efb:b9ee:1b1d%6,
      Peer Hostname Name=DESKTOP-LQ8L5TJ,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=49937,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_readyNode_note 
15849      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15850      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15851      put '<Node Id="VarClus2" Event="Run" Pid="8144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus2" Event="Run" Pid="8144" Gridid=""/>';
15852      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-LQ8L5TJ,
      Local Host IP addr=fe80::5c70:6efb:b9ee:1b1d%6,
      Peer Hostname Name=DESKTOP-LQ8L5TJ,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=49937,Lrecl=256,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15853      %let emloopmode =;
*------------------------------------------------------------* 
* 
* VarClus2 : Beginning update before running 
* datetime : 11APR2016:14:46:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.VarClus2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
15884      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
15885      * VarClus2: Update Variables Set;
MPRINT(EM_DIAGRAM):   * VarClus2: Update Variables Set;
15886      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

15887      proc sort data=EMWS8.FIMPORT_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.FIMPORT_CMeta_TRAIN out=_SortedVar;
15888      by name;
MPRINT(EM_DIAGRAM):   by name;
15889      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 34 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

15890      proc sort data=EMWS8.VarClus2_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.VarClus2_VariableSet;
15891      by name;
MPRINT(EM_DIAGRAM):   by name;
15892      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.VARCLUS2_VARIABLESET.
NOTE: The data set EMWS8.VARCLUS2_VARIABLESET has 34 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15893      data EMWS8.VarClus2_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus2_VariableSet;
15894      merge _SortedVar(in=_a) EMWS8.VarClus2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS8.VarClus2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
15895      by name;
MPRINT(EM_DIAGRAM):   by name;
15896      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
15897      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
15898      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
15899      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 34 observations read from the data set EMWS8.VARCLUS2_VARIABLESET.
NOTE: The data set EMWS8.VARCLUS2_VARIABLESET has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15900      * VarClus2: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * VarClus2: End of Update Variables Set;
15901      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
16128      %let emexceptionString =;
16129      %let EMEXCEPTIONSTRING=;
16130      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16131      * UPDATE: VarClus2;
MPRINT(EM_DIAGRAM):   * UPDATE: VarClus2;
16132      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16133      %let EM_ACTION = UPDATE;
16134      %let syscc = 0;
16135      
16136      %macro main;
16137      
16138         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
16139         %include temp;
16140         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
16141         %include temp;
16142         filename temp;
16143      
16144        %SetProperties;
16145      
16146         %if %upcase(&EM_ACTION) = CREATE %then %do;
16147             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
16148             %include temp;
16149             filename temp;
16150             %create;
16151         %end;
16152         %else
16153         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16154              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
16155                 %include temp;
16156                 filename temp;
16157                 %train;
16158         %end;
16159         %else
16160         %if %upcase(&EM_ACTION) = SCORE %then %do;
16161                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
16162                 %include temp;
16163                 filename temp;
16164                 %score;
16165         %end;
16166         %else
16167         %if %upcase(&EM_ACTION) = REPORT %then %do;
16168                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
16169                 %include temp;
16170                 filename temp;
16171                 %report;
16172         %end;
16173         /*
16174         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
16175             %put 'OPENING TABLE';
16176         %end;
16177         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
16178             %put 'CLOSE TABLE';
16179         %end;
16180         */
16181      %mend main;
16182      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
16184     +/* Initialize property macro variables */
16185     +%macro SetProperties;
16186     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
16187     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
16188     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
16189     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
16190     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
16191     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
16192     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
16193     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
16194     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
16195     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
16196     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
16197     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
16198     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
16200     +%mend SetProperties;
16202     +%Macro MakeDummyVariables(indata=,
16203     +                          outvar=,
16204     +                          outdata=,
16205     +                          fileref=,
16206     +                          recreatecmeta=N, /* optional */
16207     +                          incmeta=,     /* optional */
16208     +                          outcmeta=,    /* optional */
16209     +                          ndummyvars=_ndummyvars
16210     +                          );
16211     +    %global &ndummyvars;
16213     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
16214     +       class
16215     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16216     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16217     +    ;
16218     +    run;
16219     +    %let &ndummyvars = 0;
16220     +    data _null_;
16221     +    %let dsid = %sysfunc(open(work._classout));
16222     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
16223     +    %let dsid = %sysfunc(close(&dsid));
16224     +    run;
16226     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
16227     +       input
16228     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16229     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16230     +        / level=nominal stdize=no;
16231     +       make outvar = &outvar;
16232     +       score data = &indata out =&outdata;
16233     +       code  file=  "&fileref";
16234     +    run;
16235     +    %if &recreatecmeta eq Y %then %do;
16236     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
16237     +    data _tmpds;
16238     +        set _tmpds;
16239     +           ROLE = 'INPUT';
16240     +           LEVEL = 'INTERVAL';
16241     +           CREATOR='DMZIP';
16242     +           if NAME = '_TYPE_' then delete;
16243     +    run;
16244     +    data &outcmeta;
16245     +         set &incmeta _tmpds;
16246     +    run;
16247     +    %end;
16248     +    proc datasets lib=work nolist;
16249     +      delete  _dmdbdat _dmdbcat _classout
16250     +    %if &recreatecmeta eq Y %then %do;
16251     +    _tmpds
16252     +    %end;
16253     +    ;
16254     +    quit;
16255     +%Mend MakeDummyVariables;
16257     +/*--- Determine Optimal Number of Cluster ----
16258     +%macro FindClusNum(statds=, groupds=, minvariation=);
16259     +   %global optnclus;
16260     +   data varclus_tmp(drop=_NAME_);
16261     +      set &statDs;
16262     +      where _type_ ='PROPOR';
16263     +   run;
16264     +   proc sort data=varclus_tmp;
16265     +      by _NCL_;
16266     +   run;
16267     +   proc transpose data=varclus_tmp out=varclus_tmp;
16268     +      by _NCL_;
16269     +      var %EM_INTERVAL_INPUT
16270     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16271     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16272     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
16273     +          %do i = 2 %to &nvar;
16274     +          %let varname = %sysfunc(varname(&dsid, &i));
16275     +          &varname
16276     +          %end;
16277     +      %end;
16278     +   ;
16279     +   run;
16281     +   %if &minVariation eq %then %do;
16282     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
16283     +   %end;
16284     +   %if ^(0<&minVariation<100) %then %do;
16285     +       %let minVariation = 90;
16286     +   %end;
16288     +   data _null_;
16289     +      set varclus_tmp end=eof;
16290     +      by _NCL_;
16291     +      retain flag 0;
16292     +      if first._ncl_ then flag=0;
16293     +      if .<col1 < &minVariation then flag=1;
16294     +      if last._ncl_ and ^flag then do;
16295     +         call symput('OPTNCL', _ncl_);
16296     +         stop;
16297     +      end;
16298     +     if eof then call symput('OPTNCL', _ncl_);
16299     +   run;
16301     +   %let optnclus = &OPTNCL;
16303     +   data varclus_tmp(drop=_NCL_ _NAME_);
16304     +      set &statDs;
16305     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
16306     +   run;
16307     +   proc sort data=varclus_tmp;
16308     +      by _TYPE_;
16309     +   run;
16310     +   proc transpose data=varclus_tmp out=varclus_tmp;
16311     +      by _TYPE_;
16312     +   run;
16313     +   proc sort data=varclus_tmp;
16314     +      by _name_ _type_;
16315     +   run;
16317     +  proc transpose data=varclus_tmp out=&groupds;
16318     +      by _NAME_;
16319     +   run;
16320     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
16321     +      by Cluster descending Rsquare;
16322     +      where Cluster ne 0;
16323     +   run;
16324     +   proc datasets lib=work nolist mt=(DATA VIEW);
16325     +      delete varclus_tmp;
16326     +   run;
16327     +   quit;
16328     +%mend findClusNum;
16329     +*/
16331     +%macro getNclusfromTrain(inoutstat=, nc=);
16332     +%global &nc;
16333     +data _null_;
16334     +    set &inoutstat end=eof;
16335     +    if eof then do;
16336     +    call symput("&nc", _ncl_);
16337     +    end;
16338     +run;
16339     +%mend  getNclusfromTrain;
16341     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
16343     +     *--- Build Code to Modify Metadata ---*;
16344     +     filename X "&deltacodefile";
16345     +     data _null_;
16346     +        FILE X;
16347     +        set &groupds end=eof;
16348     +        /*by Cluster;*/
16349     +         if _N_=1 then do;
16350     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16351     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16352     +           %end;
16353     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16354     +           put "if upcase(strip(NAME)) in (";
16355     +        end;
16356     +        if Strip(upcase(Selected)) eq 'YES' then do;
16357     +           string = '"'!!trim(left(VARIABLE))!!'"';
16358     +           put string;
16359     +        end;
16360     +        if eof then do;
16361     +           put ') then ROLE="INPUT";';
16362     +           put 'else ROLE="REJECTED";';
16363     +           put 'end;';
16365     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16366     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16367     +           %end;
16368     +        end;
16369     +     run;
16370     +     quit;
16372     +     filename X;
16374     +     quit;
16375     +%mend MakeDeltaCode;
16377     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
16378     +    %if ^%sysfunc(exist(&statds)) %then %do;
16379     +         %goto doendc;
16380     +    %end;
16382     +    data &corrds(drop=_TYPE_ _NCL_) ;
16383     +       set &statds;
16384     +       where _type_ eq 'CORR' ;
16385     +    run ;
16386     +    proc sort data=&corrds;
16387     +       by _NAME_ ;
16388     +    run ;
16389     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
16390     +      BY _NAME_ ;
16391     +    run ;
16392     +    data &corrplotds;
16393     +       length _Y_ $100;
16394     +       set &corrplotDs;
16395     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
16396     +    run ;
16397     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
16398     +       set &corrplotds;
16399     +       where _LABEL_ ne '' ;
16400     +       keep _TMP_ _LABEL_ ;
16401     +    run ;
16402     +    data _null_;
16403     +       nobs=0;
16404     +       dsid = open('varclus_match');
16405     +       if dsid then do;
16406     +          nobs = attrn(dsid, 'NOBS');
16407     +          dsid = close(dsid);
16408     +       end;
16409     +       call symput ('CORR_NOBS', nobs);
16410     +    run;
16411     +    %if &corr_nobs %then %do;
16412     +        proc sort data=varclus_match;
16413     +           by _name_;
16414     +        run ;
16415     +        proc sort data=&corrplotds;
16416     +           by _name_;
16417     +        run ;
16418     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
16419     +           merge varclus_match &corrplotds;
16420     +           by _NAME_ ;
16421     +           if _X_ eq '' then _X_=_NAME_ ;
16422     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16423     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16424     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16426     +       run ;
16427     +    %end;
16428     +    %else %do;
16429     +        proc sort data=&corrplotds;
16430     +           by _name_;
16431     +        run ;
16432     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
16433     +           set &corrplotds;
16434     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16435     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16436     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16438     +        run ;
16439     +    %end;
16440     +    proc sort data=&corrplotds;
16441     +       by _X_ _Y_;
16442     +    run ;
16443     +    proc datasets lib=work nolist mt=(DATA VIEW);
16444     +       delete varclus_match;
16445     +    run;
16446     +    quit;
16448     +%doendc:
16450     +%mend MakeVarClusCorrData;
16452     +%macro MakeStatPlotData(statds= , outstatplotds=);
16453     +   %if %sysfunc(exist(&statds)) %then %do;
16455     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
16456     +          set &statDs;
16457     +          where _type_ in('MEAN', 'STD', 'N');
16458     +       run ;
16459     +       proc transpose data=varclus_tmp out=&outstatplotds;
16460     +          id _TYPE_ ;
16461     +       run ;
16462     +       data &outstatplotds;
16463     +          set &outstatplotds(obs=1000);
16464     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
16465     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16466     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
16467     +          else SCALEDSTD= STD ;
16468     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
16469     +       run ;
16470     +       proc sort data=&outstatplotds;
16471     +          by descending SCALEDSTD ;
16472     +       run ;
16473     +       proc datasets lib=work nolist mt=(DATA VIEW);
16474     +          delete varclus_tmp;
16475     +       run;
16476     +       quit;
16477     +    %end;
16479     +%mend MakeStatPlotData;
16482     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
16483     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
16484     +    data &EM_USER_OUTSTATSCORE;
16485     +          set &indata;
16486     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16487     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16488     +          if _TYPE_ = 'STD' then _NAME_='STD';
16489     +          DROP _TYPE_ _NCL_;
16490     +     run;
16492     +     filename _file_  "&fileRef";
16494     +     data _null_;
16495     +        FILE _file_ MOD;
16496     +        put ' ';
16497     +        put '/*-------------------------------------------------*/';
16498     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
16499     +        put '/*-------------------------------------------------*/';
16500     +        put ' ';
16501     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
16503     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16504     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16506     +        %let k = 1;
16507     +        %do %while(^%sysfunc(fetch(&dsid)));
16508     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16509     +                %if &k > 2 %then %do;
16510     +                 %let cn = %eval(&k-2);
16511     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
16512     +                %end;
16513     +                %let k = %eval(&k+1);
16514     +        %end;
16516     +        %let rc = %sysfunc(rewind(&dsid));
16518     +        %do i= 2 %to &nvar;
16519     +            %let _varname =  %sysfunc(varname(&dsid, &i));
16520     +            %do %while(^%sysfunc(fetch(&dsid)));
16521     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16522     +                %if &_name = MEAN %then
16523     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16524     +                %else %if &_name = STD %then
16525     +                %let _std = %sysfunc(getvarn(&dsid, &i));
16526     +                %else %do;
16527     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16528     +                      %let abscoeff = %sysfunc(abs(&coeff));
16529     +                          %if &abscoeff >  0 %then %do;
16530     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16531     +                           %end;
16532     +                 %end;
16533     +             %end;
16534     +             %let rc = %sysfunc(rewind(&dsid));
16535     +         %end;
16537     +        %let dsid= %sysfunc(close(&dsid));
16538     +       run;
16539     +%mend CreateScoreCode;
16543     +/*----------------------------------------------------------
16544     +    Instead of using %MakeRSquareData,
16545     +    %MakeVarClusResultTable at macro2.source is used
16546     + +----------------------------------------------------------*/
16549     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
16551     +/* modifying  from ods rsquare = data */
16553     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
16554     +    Length Cluster $16;
16555     +    length Variable $32;
16556     +    Length VariableLabel $64;
16557     +    set &indata; retain CurrentCluster;
16558     +    if NumberOfClusters ^= &ncluster then delete;
16559     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
16560     +    CurrentCluster = Cluster;
16561     +   run;
16562     +proc sort data =&outdata ;
16563     +     by Cluster RsquareRatio;
16564     +run;
16565     +data _tmprsq(drop=index);
16566     +     set &outdata; by Cluster;
16567     +     if first.Cluster then do;
16568     +     index = strip(scan(Cluster,2 ));
16569     +     Variable = "Clus"||index;
16570     +     VariableLabel = "Cluster Component "||index;
16571     +     OwnCluster = 1;
16572     +     NextClosest = .;
16573     +     RsquareRatio = 0;
16574     +     output;
16575     +     end;
16576     +run;
16578     +proc sort data = _tmprsq ;
16579     +     by Cluster RsquareRatio;
16580     +run;
16581     +data &outdata;
16582     +     set &outdata _tmprsq;
16583     +by Cluster;
16584     +run;
16587     +/* Just create the Selected variable with all YES */
16589     +data &outdata;
16590     +    set &outdata; by cluster;
16591     +    length Selected $8;
16592     +    Selected = 'YES';
16593     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16594     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16595     +    rename OwnCluster = RSqWithClusterComp;
16596     +    rename NextClosest = RSqWithNextClusComp;
16597     +run;
16600     +/* Selected = Y/N will be done %score section -----
16602     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
16603     +data &outdata;
16604     +    set &outdata; by cluster;
16605     +    length Selected $8;
16606     +    if first.Cluster then Selected = 'YES';
16607     +    else Selected = 'NO';
16608     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16609     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16610     +    rename OwnCluster = RSqWithClusterComp;
16611     +    rename NextClosest = RSqWithNextClusComp;
16612     +run;
16613     +%end;
16614     +%else %do;
16615     +data &outdata;
16616     +    set &outdata; by cluster;
16617     +    if last.Cluster then Selected = 'YES';
16618     +    else Selected = 'NO';
16619     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16620     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16621     +    rename OwnCluster = RSqWithClusterComp;
16622     +    rename NextClosest = RSqWithNextClusComp;
16623     +run;
16624     +%end;
16625     +---------------------------------------------------------------*/
16627     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
16628     +/* to calculate NextClosestClusRsq */
16629     +proc transpose data = &inClusRSquare  out=_clusRsq;
16630     +      by cluster;
16631     +      run;
16632     +data _clusRsq;
16633     +     set _clusRsq;
16634     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
16635     +run;
16637     +proc sort data=_clusRsq;
16638     +    by cluster col1;
16639     +    run;
16640     +data _clusRsq(drop=_NAME_ _LABEL_);
16641     +     set _clusRsq; by cluster;
16642     +     if last.Cluster then output;
16643     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
16644     +     rename COL1 = RSqWithNextClusComp;
16645     +     rename Cluster = Variable;
16646     +     label  Cluster = "Variable";
16647     +run;
16649     +proc sort data =&outdata;
16650     +     by Variable;
16651     +run;
16652     +data &outdata;
16653     +    merge &outdata _clusRsq;
16654     +    by Variable;
16655     +run;
16656     +proc sort data =&outdata;
16657     +by Cluster  RsquareRatio;
16658     +run;
16659     +quit;
16660     +%end;
16662     +proc datasets lib = work nolist;
16663     +     delete _tmprsq _clusRsq;
16664     +     run;
16665     +quit;
16667     +%mend MakeRSquareData;
16670     +/*-------------------------------------------------------------------------*/
16674     +%macro ModifyCorr(indata=,
16675     +                  outdata=,
16676     +                  rsquare = Y
16677     +                  );
16678     +    data corr_tmp;
16679     +        set &indata;
16680     +    run;
16681     +     proc sql;
16682     +           update &indata
16683     +           set
16684     +     %let dsid = %sysfunc(open(work.corr_tmp));
16685     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16686     +          %do i = 4 %to &nvar;
16687     +          %let _name = %sysfunc(varname(&dsid, &i));
16688     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16689     +            %else  %let _name_md = &_name;
16690     +            %if &i < &nvar %then %do;
16691     +               &_name = 1- &_name_md ,
16692     +            %end;
16693     +            %else %do;
16694     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
16695     +            %end;
16696     +          %end;
16697     +      %let dsid= %sysfunc(close(&dsid));
16699     +      select * from &indata;
16700     +      run;
16701     +      proc datasets lib = work nolist;
16702     +           delete corr_tmp;
16703     +      run;
16704     +      quit;
16706     + %mend ModifyCorr;
16708     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
16709     +    data &outdata(drop= _NCL_  _TYPE_);
16710     +       set &indata;
16711     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16712     +       rename _NAME_ = Cluster;
16713     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16714     +    run;
16715     +    %if &RSquare eq Y %then %do;
16716     +     data corr_tmp;
16717     +        set &outdata;
16718     +     run;
16720     +     data &outdata(drop=i);
16721     +          set &outdata;
16722     +          %let dsid = %sysfunc(open(work.corr_tmp));
16723     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16724     +          %do i = 2 %to &nvar;
16725     +            %let _name = %sysfunc(varname(&dsid, &i));
16726     +            %let _name_md = &_name.**2;
16727     +                &_name = &_name_md;
16728     +          %end;
16729     +      %let dsid= %sysfunc(close(&dsid));
16730     +      run;
16731     +      proc datasets lib = work nolist;
16732     +           delete corr_tmp;
16733     +      run;
16735     +    %end;
16736     +     quit;
16737     +%mend MakeClusStructCorrData;
16739     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
16740     +    data &outdata(drop= _NCL_  _TYPE_);
16741     +       set &indata;
16742     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16743     +       rename _NAME_ = Cluster;
16744     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16745     +    run;
16746     +    data corr_tmp;
16747     +        set &outdata;
16748     +    run;
16750     +    %let dsid = %sysfunc(open(work.corr_tmp));
16751     +    %let nclus2= %eval(&ncluster+1);
16752     +    data &outdata;
16753     +         set &outdata;
16754     +          %do i = 2 %to &nclus2;
16755     +          %let i_1 = %eval(&i-1);
16756     +            %let _name = %sysfunc(varname(&dsid, &i));
16757     +            %let _newName = Clus&i_1;
16758     +                rename &_name = &_newName; ;
16759     +                *label &_name ="Cluster &i_1";
16760     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16761     +          %end;
16762     +          keep Cluster
16763     +          %do i = 2 %to &nclus2;
16764     +                %let _name = %sysfunc(varname(&dsid, &i));
16765     +                &_name
16766     +          %end;
16767     +          ;
16768     +    %let dsid= %sysfunc(close(&dsid));
16769     +     run;
16770     +     quit;
16772     +    %if &RSquare eq Y %then %do;
16774     +       data corr_tmp;
16775     +        set &outdata;
16776     +     run;
16778     +     data &outdata(drop=i);
16779     +          set &outdata;
16780     +          %let dsid = %sysfunc(open(work.corr_tmp));
16781     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16782     +          %do i = 2 %to &nvar;
16783     +            %let _name = %sysfunc(varname(&dsid, &i));
16784     +            %let _name_md = &_name.**2;
16785     +                &_name = &_name_md;
16786     +          %end;
16787     +      %let dsid= %sysfunc(close(&dsid));
16788     +      run;
16789     +    %end;
16791     +    %if &makeplotds eq Y %then %do;
16792     +     proc transpose data = &outdata
16793     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16794     +          by cluster;
16795     +     run;
16796     +     data &plotds;
16797     +          set  &plotds;
16798     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16799     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16800     +     run;
16801     +     %end;
16802     +     proc datasets lib = work nolist;
16803     +           delete corr_tmp;
16804     +     run;
16805     +     quit;
16806     +%mend MakeInterClusCorrData;
16809     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16811     +data &outlink(drop = Selected);
16812     +     set &indata;
16813     +     LINKID = _N_;
16814     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16815     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16816     +run;
16817     +data &outnode(keep=NODEID TYPE LABEL);
16818     +    set &indata;
16819     +    length TYPE $16;
16820     +    rename Variable = NODEID;
16821     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16822     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16823     +    then  TYPE = "CLUSTER";
16824     +    else  TYPE="VARIABLE";
16825     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16826     +run;
16827     +quit;
16828     +%mend MakeClusConstellData;
16832     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16834     +data &outlink(drop = Selected);
16835     +     set &indata;
16836     +     LINKID = _N_;
16837     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16838     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16839     +run;
16840     +data &outnode(keep=NODEID TYPE LABEL);
16841     +    set &indata;
16842     +    length TYPE $16;
16843     +    rename Variable = NODEID;
16844     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16845     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16846     +    then  TYPE = "CLUSTER";
16847     +    else  TYPE="VARIABLE";
16848     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16849     +run;
16850     +quit;
16851     +%mend MakeClusConstellData;
16854     +/*--- This will work only when inds is not a view data -------
16856     +%macro getNVarNObs(inds=, nvar=, nobs=);
16858     +    %global &nvar;
16859     +    %global &nobs;
16860     +    data _null_;
16861     +         dsid = open("&inds");
16862     +         nv = attrn(dsid, 'NVAR');
16863     +         no = attrn(dsid, 'NOBS');
16864     +         dsid = close(dsid);
16865     +         call symput("&nvar", nv);
16866     +         call symput("&nobs", no);
16867     +    run;
16868     +    quit;
16869     +%mend  getNVarNObs;
16871     ++---------------------------------------------------------------*/
16874     +%macro getNVar(inds=, nvar=);
16875     +    %global &nvar;
16876     +    data _null_;
16877     +         dsid = open("&inds");
16878     +         nv = attrn(dsid, 'NVAR');
16879     +         dsid = close(dsid);
16880     +         call symput("&nvar", nv);
16881     +    run;
16882     +    quit;
16883     +%mend  getNVar;
16887     +%macro getNObs(inds=, nobs=);
16888     +    %global &nobs;
16889     +    data _null_;
16890     +        set &inds end=eof;
16891     +        if eof then call symput("&nobs", _N_);
16892     +    run;
16893     +    quit;
16894     +%mend  getNObs;
16896     +%Macro CreateVarclusMeta(trainnum=);
16897     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
16898     +    data &EM_USER_VARCLUSMETA;
16899     +         length TrainNum 8.;
16900     +         length NewTrain $8;
16901     +         length NGCluster 8.;
16902     +         length ExportedComp $16;
16903     +         length HideVariable $8;
16904     +         TrainNum = &trainnum;
16905     +         NewTrain = "Y";
16906     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
16907     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
16908     +         NGCluster = 0; /* zero means no twostage */
16909     +   run;
16910     +   quit;
16911     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
16913     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
16914     +    data &outdata(drop= _NCL_  _TYPE_);
16915     +       set &indata;
16916     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16917     +       %if &globalclusid ne %then %do;
16918     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16919     +       rename _NAME_ = Cluster;
16920     +       %end;
16921     +       %else %do;
16922     +        _NAME_ = upcase(_NAME_);
16923     +       rename _NAME_ = Cluster;
16924     +       %end;
16925     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16926     +    run;
16927     +    data corr_tmp;
16928     +        set &outdata;
16929     +    run;
16931     +    %let dsid = %sysfunc(open(work.corr_tmp));
16932     +    %let nclus2= %eval(&ncluster+1);
16933     +    data &outdata;
16934     +         set &outdata;
16935     +          %do i = 2 %to &nclus2;
16936     +          %let i_1 = %eval(&i-1);
16937     +            %let _name = %sysfunc(varname(&dsid, &i));
16938     +            %if &globalclusid ne %then
16939     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
16940     +                     rename &_name = &_newName;
16941     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
16942     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
16943     +                %end;
16944     +            %else
16945     +                %do; %let _newName = CLUS&i_1;
16946     +                     rename &_name = &_newName;
16947     +                     *label &_name ="Cluster &i_1";
16948     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16949     +                %end;
16950     +          %end;
16951     +          keep Cluster
16952     +          %do i = 2 %to &nclus2;
16953     +                %let _name = %sysfunc(varname(&dsid, &i));
16954     +                &_name
16955     +          %end;
16956     +          ;
16957     +    %let dsid= %sysfunc(close(&dsid));
16958     +     run;
16959     +     quit;
16961     +    %if &RSquare eq Y %then %do;
16963     +       data corr_tmp;
16964     +        set &outdata;
16965     +     run;
16967     +     data &outdata;
16968     +          set &outdata;
16969     +          %let dsid = %sysfunc(open(work.corr_tmp));
16970     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16971     +          %do i = 2 %to &nvar;
16972     +            %let _name = %sysfunc(varname(&dsid, &i));
16973     +            %let _name_md = &_name.**2;
16974     +                &_name = &_name_md;
16975     +          %end;
16976     +      %let dsid= %sysfunc(close(&dsid));
16977     +      run;
16978     +    %end;
16980     +    %if &makeplotds eq Y %then %do;
16981     +     proc transpose data = &outdata
16982     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16983     +          by cluster;
16984     +     run;
16985     +     data &plotds;
16986     +          set  &plotds;
16987     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16988     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16989     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16990     +     run;
16991     +     %end;
16992     +     proc datasets lib = work nolist;
16993     +           delete corr_tmp;
16994     +     run;
16995     +     quit;
16996     +%mend MakeInterClusCorrData;
16998     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
16999     +    data _tmpds(drop= _NCL_);
17000     +       set &indata;
17001     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
17002     +       %if &globalclusid ne %then %do;
17003     +           _NAME_ = "GC&globalclusid.";
17004     +       rename _NAME_ = Cluster;
17005     +       %end;
17006     +       %else %do;
17007     +        _NAME_ = "CLUS";
17008     +        rename _NAME_ = Cluster;
17009     +       %end;
17010     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
17011     +    run;
17012     +    proc transpose data =_tmpds out =&outdata;
17013     +    run;
17015     +    data &outdata(drop=COL1);
17016     +        %if &globalclusid ne %then %do;
17017     +        length GCluster $16;
17018     +        %end;
17019     +        length Cluster $32;
17020     +        length _NAME_ $32;
17021     +         set &outdata;
17022     +         _NAME_ = upcase(_NAME_);
17023     +         rename _NAME_=Variable;
17024     +         *label _NAME_="Variable";
17025     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17026     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17027     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17029     +         %if &globalclusid ne %then %do;
17030     +          GCluster = "GC&globalclusid";
17031     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
17032     +         %end;
17033     +         %else %do;
17034     +         Cluster = "CLUS"||strip(COL1);
17035     +        %end;
17036     +         rename COL2 = RSqWithOwnClusComp;
17037     +         *label COL2 = "R-Square With Own Cluster Component";
17038     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
17040     +   run;
17041     +   proc sort data =&outdata;
17042     +        by Cluster RSqWithOwnClusComp;
17043     +   run;
17044     +   proc datasets lib = work nolist;
17045     +           delete _tmpds;
17046     +   run;
17047     +   quit;
17048     +%mend MakeOwnRSquare;
17050     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
17051     +    data &outdata(drop= _NCL_  _TYPE_);
17052     +       %if &globalclusid ne %then %do;
17053     +        length GCluster $16;
17054     +        %end;
17055     +       set &indata;
17056     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
17057     +       %if &globalclusid ne %then %do;
17058     +         GCluster = "GC&globalclusid";
17059     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
17060     +         rename _NAME_ = Cluster;
17061     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17062     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17064     +       %end;
17065     +       %else %do;
17066     +         _NAME_ = upcase(_NAME_);
17067     +         rename _NAME_ = Cluster;
17068     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17069     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17071     +       %end;
17072     +     run;
17073     +    %if &RSquare eq Y %then %do;
17074     +     data corr_tmp;
17075     +          set &outdata;
17076     +     run;
17077     +     %let istart = 2;
17078     +     %if &globalclusid ne %then %let istart = 3;
17079     +     data &outdata;
17080     +          set &outdata;
17081     +          %let dsid = %sysfunc(open(work.corr_tmp));
17082     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17083     +          %do i =&istart %to &nvar;
17084     +            %let _name = %sysfunc(varname(&dsid, &i));
17085     +            %let _name_md = &_name.**2;
17086     +                &_name = &_name_md;
17087     +          %end;
17088     +      %let dsid= %sysfunc(close(&dsid));
17089     +      run;
17090     +      proc datasets lib = work nolist;
17091     +           delete corr_tmp;
17092     +      run;
17093     +    %end;
17094     +     quit;
17095     +%mend MakeClusStructCorrData;
17097     +/*
17098     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
17099     +*/
17101     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
17103     +     /* The indata should be the outdata
17104     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
17106     +     proc sort data =&indata out=_tmpclusRsq;
17107     +     by cluster;
17108     +     run;
17110     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
17111     +      by cluster;
17112     +     run;
17114     +     proc sort data=_tmpclusRsq;
17115     +        by _NAME_ COL1;
17116     +     run;
17118     +     data _tmpclusRsq;
17119     +         length _NAME_ $32;
17120     +         set _tmpclusRsq; by _NAME_;
17121     +          _NAME_ = upcase(_NAME_);
17122     +          %if &ncluster ne 1 %then %do;
17123     +             if last._NAME_ then delete;
17124     +          %end;
17125     +          %else %do;
17126     +             COL1 = 0;
17127     +          %end;
17128     +     run;
17129     +     /* need to sort again */
17130     +     proc sort data=_tmpclusRsq;
17131     +        by _NAME_ COL1;
17132     +     run;
17134     +     data &outdata;
17135     +         set _tmpclusRsq; by _NAME_;
17136     +         Cluster = upcase(Cluster);
17137     +         if last._NAME_ then output;
17138     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
17139     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
17140     +         rename COL1 = RSqWithNextClusComp;
17141     +         Cluster = upcase(Cluster);
17142     +         rename Cluster = ClosestCluster;
17143     +         *label  Cluster = "Next Closest Cluster";
17144     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
17145     +         rename _NAME_ = Variable;
17146     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17147     +    run;
17150     +    %if &globalclusid ne %then %do;
17151     +    data &outdata;
17152     +       length GCluster $16;
17153     +       set &outdata;
17154     +       GCluster = "GC&globalclusid";
17155     +       run;
17156     +    %end;
17157     +    proc datasets lib = work nolist;
17158     +           delete _tmpclusRsq;
17159     +    run;
17160     +    quit;
17161     +%mend FindNextClosestClusByVar;
17164     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
17165     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
17166     +     proc sort data =&indata out=_tmpclusRsq;
17167     +     by cluster;
17168     +     run;
17169     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
17170     +     by cluster;
17171     +     run;
17172     +     proc sort data=_tmpclusRsq;
17173     +        by _NAME_ col1;
17174     +     run;
17175     +     data _tmpclusRsq;
17176     +         length _NAME_ $32;
17177     +         set _tmpclusRsq; by _NAME_;
17178     +          _NAME_ = upcase(_NAME_);
17179     +          %if &ncluster ne 1 %then %do;
17180     +             if last._NAME_ then delete;
17181     +          %end;
17182     +          %else %do;
17183     +             COL1 = 0;
17184     +          %end;
17185     +     run;
17186     +     data &outdata;
17187     +         set _tmpclusRsq; by _NAME_;
17188     +         Cluster = upcase(Cluster);
17189     +         if last._NAME_ then output;
17190     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
17191     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
17192     +         rename COL1 = RSqWithNextClusComp;
17193     +         Cluster = upcase(Cluster);
17194     +         rename Cluster = ClosestCluster;
17195     +         *label  Cluster = "Next Closest Cluster";
17196     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
17197     +         rename _NAME_ = Variable;
17198     +         *label  _NAME_ = "Variable";
17199     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17201     +    run;
17202     +    %if &globalclusid ne %then %do;
17203     +    data &outdata;
17204     +       length GCluster $16;
17205     +       set &outdata;
17206     +       GCluster = "GC&globalclusid";
17207     +       run;
17208     +    %end;
17210     +    proc datasets lib = work nolist;
17211     +           delete _tmpclusRsq;
17212     +    run;
17214     +    quit;
17215     +%mend FindNextClosestClusByCluster;
17217     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
17218     +/*----
17219     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
17220     +-----------*/
17222     +proc sort data =&indata1;
17223     +    by Variable;
17224     +run;
17225     +proc sort data =&indata2;
17226     +    by Variable;
17227     +run;
17228     +data &outdata;
17229     +    merge &indata1 &indata2;
17230     +    by Variable;
17231     +    length Type $16;
17232     +    Type = 'Variable';
17233     +    *label Type ='Type';
17234     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
17235     +run;
17238     +data &indata3;
17239     +    set  &indata3 ;
17240     +    length RSqWithOwnClusComp 8.;
17241     +    Cluster = Variable;
17242     +    RSqWithOwnClusComp = 1;
17243     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
17244     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
17245     +    length Type $16;
17246     +    Type = 'ClusterComp';
17247     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
17249     +;
17250     +run;
17252     +proc sort data=&outdata;
17253     +    by Cluster;
17254     +run;
17255     +proc sort data =&indata3;
17256     +    by Cluster;
17257     +run;
17259     +data &outdata;
17260     +     set &outdata &indata3;
17261     +     by Cluster;
17262     +run;
17265     +/* Create the Selected variable with all YES */
17267     +data &outdata;
17268     +     set &outdata;
17269     +     length RsqRatio 8.;
17270     +     length Selected $8;
17271     +     *label RSqRatio = "1-R**2 Ratio";
17272     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
17273     +     *label Selected = "Variable Selected";
17274     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
17275     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
17276     +     Selected ='YES';
17277     +     rename _LABEL_ = Label;
17278     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17279     +run;
17282     +/*----  Selected = Y/N will be assigened at the %score                   -------+
17283     +        Just create the Selected variable with all YES at the step above
17284     + +------------------------------------------------------------------------------+
17286     +proc sort data=&outdata;
17287     +    by Cluster RsqRatio;
17288     +run;
17290     +%if &selectedcomp eq CLUSTERCOMP %then %do;
17291     +data &outdata;
17292     +     set &outdata; by Cluster;
17293     +     length Selected $8;
17294     +     label Selected = "Variable Selected";
17295     +     if  first.Cluster then Selected ='Yes';
17296     +     else Selected = 'No';
17297     +    run;
17298     +%end;
17299     +%else %do;
17300     +data &outdata(drop = _var _varchange);
17301     +     set &outdata; retain _var 0; by Cluster;
17302     +     length Selected $8;
17303     +     label Selected = "Variable Selected";
17304     +     if first.Cluster then  _varchange = 0;
17305     +     else _varchange =1;
17306     +     if _var ne _varchange then  Selected  = 'Yes';
17307     +     else Selected = 'No';
17308     +     if last.cluster then  _var = 0;
17309     +     else _var = _varchange;
17310     +run;
17311     +%end;
17313     +--------------------------------------------------------------*/
17315     +quit;
17316     +%mend MakeVarClusResultTable;
17318     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
17319     +     proc sort data =&indata;
17320     +        by cluster;
17321     +     run;
17322     +     proc transpose data =&indata
17323     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
17324     +          by cluster;
17325     +     run;
17326     +     data &outdata;
17327     +          set  &outdata;
17328     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17329     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17330     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
17331     +     run;
17332     +     %if &globalclusid ne %then %do;
17333     +     data &outdata;
17334     +          Length GCluster $16;
17335     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17336     +          set  &outdata;
17337     +          GCluster ="GC&globalclusid.";
17338     +          run;
17339     +     %end;
17341     +%Mend MakePlotDataFromCorrTable;
17344     +%macro MakeCorrelation(indata=,
17345     +                       outstat=_tmpoutstat,
17346     +                       corrmatrix=N,
17347     +                       outcorr=_tmpoutcorr,
17348     +                       includeclassvar=N,
17349     +                       target=,
17350     +                       freq=,
17351     +                       weight=);
17352     +   %if &target eq  %then %do;
17354     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
17355     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17356     +       %if &includeclassvar eq Y %then %do;
17357     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17358     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
17359     +          %do i = 2 %to &nvar;
17360     +          %let varname = %sysfunc(varname(&dsid, &i));
17361     +          &varname
17362     +          %end;
17363     +       %end;
17364     +       ;
17365     +      %if &freq ne  %then %do;
17366     +          freq &freq;
17367     +      %end;
17368     +      %if &weight ne  %then %do;
17369     +          weight &weight;
17370     +      %end;
17372     +      run;
17373     +      %if &corrmatrix eq Y %then %do;
17374     +      data  &outcorr (drop = _NCL_ _TYPE_);
17375     +           set  &outstat ;
17376     +           if _TYPE_ ='CORR' then output;
17377     +      run;
17378     +      %end;
17379     +    %end;
17380     +    %else %do;
17381     +       proc corr data=&indata outp=&outstat noprint;
17382     +            var
17383     +       %let dsid = %sysfunc(open(&indata));
17384     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
17385     +          %do i = 1 %to &nvar;
17386     +              %let _name = %sysfunc(varname(&dsid, &i));
17387     +              %if &_name ne &target %then;
17388     +              &_name
17389     +           %end;
17390     +        %let dsid= %sysfunc(close(&dsid));
17391     +        ;
17392     +        with &target;
17393     +        run;
17394     +    %end;
17395     +    quit;
17396     +%mend MakeCorrelation;
17399     +%macro MakeCorrelationDistance(indata=,
17400     +                               outdata=,
17401     +                               rsquare = N
17402     +                               );
17403     +    data corr_tmp;
17404     +        set &indata;
17405     +        if _N_ = 1 then do;
17406     +           output;
17407     +           stop;
17408     +         end;
17409     +    run;
17410     +    %if &outdata ne  %then %let  _outdata = &outdata;
17411     +    %else %let _outdata = &indata;
17413     +    data &_outdata;
17414     +         set &indata;
17416     +         %let dsid = %sysfunc(open(work.corr_tmp));
17417     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
17418     +          %do i = 2 %to &nvar;
17419     +              %let _name = %sysfunc(varname(&dsid, &i));
17420     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
17421     +              %else  %let _name_md = &_name;
17422     +              &_name = 1- &_name_md;
17423     +          %end;
17424     +      %let dsid= %sysfunc(close(&dsid));
17425     +      run;
17426     +      proc datasets lib = work nolist;
17427     +           delete corr_tmp;
17428     +      run;
17429     +      quit;
17430     +  %mend MakeCorrelationDistance;
17433     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
17434     +                                   rsquare = N
17435     +                                   );
17436     +    data corr_tmp;
17437     +        set &indata;
17438     +    run;
17439     +    proc sql noprint;
17440     +           update &indata
17441     +           set
17442     +     %let dsid = %sysfunc(open(work.corr_tmp));
17443     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
17444     +          %do i = 4 %to &nvar;
17445     +          %let _name = %sysfunc(varname(&dsid, &i));
17446     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
17447     +            %else  %let _name_md = &_name;
17448     +            %if &i < &nvar %then %do;
17449     +               &_name = 1- &_name_md ,
17450     +            %end;
17451     +            %else %do;
17452     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
17453     +            %end;
17454     +          %end;
17455     +      %let dsid= %sysfunc(close(&dsid));
17457     +      select * from &indata;
17458     +      run;
17459     +     data &indata( drop = _NCL_);
17460     +           set &indata;
17461     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
17462     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
17463     +     run;
17464     +     data &indata(DROP = _NCL_);
17465     +           set &indata;
17466     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
17467     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
17468     +           rename _NAME_ = _VAR_;
17469     +     run;
17470     +     proc datasets lib = work nolist;
17471     +           delete corr_tmp;
17472     +     run;
17473     +     quit;
17474     + %mend UpdateOutStatCorrToDistance;
17477     +%macro HierClusWithCorr(indata= ,
17478     +                        ncluster=,
17479     +                        method = Ward,
17480     +                        outtree = _outtree,
17481     +                        idvar =_VAR_,
17482     +                        outdata=,
17483     +                        rescore = N,
17484     +                        newncluster=
17485     +                        );
17486     +      %global &newncluster;
17487     +      %if &rescore ne Y %then %do;
17488     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
17489     +                   method=&method outtree=&outtree noprint;
17490     +           id &idvar;
17491     +      run;
17492     +      %end;
17493     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
17494     +      run;
17495     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
17496     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
17497     +      run;
17498     +      data _outcontent;
17499     +          set _outcontent;
17500     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
17501     +          index = 1;
17502     +          rename NAME = _NAME_;
17503     +      run;
17504     +      proc sort data=_outcontent;
17505     +          by _NAME_;
17506     +      run;
17507     +      proc sort data =&outdata;
17508     +           by _NAME_;
17509     +      run;
17510     +      data &outdata(drop=index);
17511     +          merge &outdata _outcontent;
17512     +          by _NAME_;
17513     +          if index = . then delete;
17514     +      run;
17515     +      /*-----------------------------------------------------------*/
17516     +      data &outdata;
17517     +           length CLUSNAME $16;
17518     +           set &outdata;
17519     +           if CLUSTER > &ncluster then delete;
17520     +           CLUSNAME='GC'||strip(CLUSTER);
17521     +           *label CLUSNAME = "Cluster Name";
17522     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
17523     +           rename _NAME_ = VARIABLE ;
17524     +           *label _NAME_ = "Variable";
17525     +           *label CLUSTER = "Cluster";
17526     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17527     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17528     +      run;
17529     +      proc sort data=&outdata out=&outdata;
17530     +           by CLUSTER;
17531     +      run;
17532     +      proc means data =&outdata noprint;
17533     +           output out=_meanout;
17534     +      run;
17535     +      data _null_;
17536     +            set _meanout;
17537     +            if strip(_STAT_) eq 'MAX' then do;
17538     +            call symput("&newncluster", CLUSTER);
17539     +            stop;
17540     +            end;
17541     +      run;
17543     +      proc datasets lib = work nolist;
17544     +           delete _outcontent _meanout;
17545     +      run;
17546     +      quit;
17547     +%mend  HierClusWithCorr;
17549     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
17551     +     data _tmpindata;
17552     +          set &indata;
17553     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17554     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17555     +          if _TYPE_ = 'STD' then _NAME_='STD';
17556     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
17557     +          DROP _TYPE_ _NCL_;
17558     +     run;
17560     +     filename _file_  "&fileRef";
17562     +     data _null_;
17563     +        FILE _file_ MOD;
17564     +        put ' ';
17565     +        put "/*-------------------------------------------------*/";
17566     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
17567     +        put "/*-------------------------------------------------*/";
17568     +        put ' ';
17569     +        %let dsid = %sysfunc(open(work._tmpindata));
17571     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17572     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17573     +        %let k = 1;
17574     +        %do %while(^%sysfunc(fetch(&dsid)));
17575     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17576     +               %if &k > 2 %then %do;
17577     +                %let cn = %eval(&k-2);
17578     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
17579     +                %end;
17580     +                %let k = %eval(&k+1);
17582     +        %end;
17583     +        %let rc = %sysfunc(rewind(&dsid));
17585     +        %do j= 2 %to &nvar;
17586     +            %let _varname = %sysfunc(varname(&dsid, &j));
17587     +            %do %while(^%sysfunc(fetch(&dsid)));
17588     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17589     +                %if &_name = MEAN %then
17590     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
17591     +                %else %if &_name = STD %then
17592     +                %let _std = %sysfunc(getvarn(&dsid, &j));
17593     +                %else %do;
17594     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
17595     +                      %let abscoeff = %sysfunc(abs(&coeff));
17596     +                          %if &abscoeff >  0 %then %do;
17597     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17598     +                           %end;
17599     +                 %end;
17600     +             %end;
17601     +             %let rc = %sysfunc(rewind(&dsid));
17602     +         %end;
17604     +        %let dsid= %sysfunc(close(&dsid));
17606     +     run;
17608     +     filename _file_;
17609     +     proc datasets lib = work nolist;
17610     +           delete _tmpindata;
17611     +     run;
17612     +     quit;
17613     +%mend CreateScoreCode2;
17616     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
17618     +     /*--- Build Code to Modify Metadata ---*/
17619     +     filename X "&deltacodefile";
17620     +     data _null_;
17621     +        FILE X;
17622     +        set &groupds end=eof;
17623     +        if _N_=1 then do;
17624     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17625     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17626     +           %end;
17627     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17628     +           put "if upcase(strip(NAME)) in (";
17629     +        end;
17630     +        if Strip(upcase(Selected)) eq 'YES' then do;
17631     +           string = '"'!!trim(left(VARIABLE))!!'"';
17632     +           put string;
17633     +        end;
17634     +        if eof then do;
17635     +           put ') then ROLE="INPUT";';
17636     +           put 'else ROLE="REJECTED";';
17637     +           put 'end;';
17639     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17640     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17641     +           %end;
17642     +        end;
17643     +     run;
17644     +     quit;
17646     +     filename X;
17647     +     quit;
17648     +%mend MakeDeltaCode2;
17650     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
17651     +  %global &ngc;
17652     +  data _null_;
17653     +  %if &indata ne %then %do;
17654     +      %let dsid = %sysfunc(open(&indata));
17655     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
17656     +      %let dsid = %sysfunc(close(&dsid));
17657     +  %end;
17658     +  %else %do;
17659     +       %let nvar = %eval(&ninput+&ndummy); ;
17660     +  %end;
17661     +  %let numgc = %eval(&nvar/&div+2);
17662     +  %let &ngc = &numgc;
17663     +   run;
17664     +  quit;
17665     +%mend getInitialGClusterNumber;
17668     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
17669     +data &outlink(drop = Selected);
17670     +     set &indata;
17671     +     LINKID = _N_;
17672     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
17673     +run;
17674     +data &outnode(keep=NODEID TYPE LABEL);
17675     +    set &indata;
17676     +    length TYPE $16;
17677     +    rename VARIABLE = NODEID;
17678     +    *label  CLUSNAME="Node ID";
17679     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17680     +    TYPE = "VARIABLE";
17681     +    *label TYPE = "Node Type";
17682     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17683     +    run;
17684     +data _tmp(keep=NODEID TYPE LABEL);
17685     +    set &indata;
17686     +    length TYPE $16;
17687     +    rename CLUSNAME = NODEID;
17688     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17689     +    TYPE = "GCLUSTER";
17690     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17691     +    run;
17692     +proc sort data=_tmp;
17693     +    by NODEID;
17694     +run;
17695     +data _tmp;
17696     +    set _tmp; by NODEID;
17697     +    if first.NODEID then output;
17698     +run;
17699     +proc sort data=&outnode;
17700     +    by NODEID;
17701     +run;
17702     +data  &outnode;
17703     +    set _tmp &outnode;
17704     +run;
17705     +proc datasets lib = work nolist;
17706     +     delete _tmp;
17707     +run;
17708     +quit;
17709     +%mend MakeGobalConstellData;
17711     +/* Make contellation plot data among GCLUSTERS */
17713     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
17715     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
17716     +     set &indata;
17717     +     LINKID = _N_;
17718     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
17719     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
17720     +     end;
17721     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
17722     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
17723     +     end;
17724     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
17725     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
17726     +    end;
17727     +run;
17729     +data _tmp_outrsquare;
17730     +        set &inoutrsq;
17731     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
17732     +run;
17734     +proc freq data =_tmp_outrsquare noprint;
17735     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
17736     +run;
17738     +data &outnode(keep=_NAME_ TYPE LABEL);
17739     +    set &outlink;
17740     +    length TYPE $16;
17741     +    length LABEL $100;
17742     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
17744     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17745     +    TYPE = "GCLUSTER";
17746     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17747     +    end;
17748     +    else do;
17749     +    TYPE= "ROOT";
17750     +    LABEL= _NAME_;
17751     +    end;
17752     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17753     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17754     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17755     +    run;
17757     +proc sort data=&outnode;
17758     +     by _NAME_;
17759     +proc sort data=_tmp_GCLUSFREQ;
17760     +     by _NAME_;
17761     +run;
17763     +data  &outnode;
17764     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
17765     +     if COUNT=. then COUNT=1;
17766     +run;
17768     +proc datasets lib = work nolist;
17769     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
17770     +run;
17772     +quit;
17773     +%Mend MakeGClusterConstData;
17776     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
17778     +    data _gscoretmpds;
17779     +          set &indata;
17780     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
17781     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17782     +          if _TYPE_ = 'STD' then _NAME_='STD';
17783     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
17784     +          DROP _TYPE_ _NCL_;
17785     +     run;
17787     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17788     +        GCluster Component &globalclusid ------ */
17790     +    filename _file_  "&fileref";
17792     +    data _null_;
17793     +        %if &globalclusid eq 1 %then %do;
17794     +          FILE _file_;
17795     +        %end;
17796     +        %else %do;
17797     +          FILE _file_ MOD;
17798     +        %end;
17800     +        %let dsid = %sysfunc(open(work._gscoretmpds));
17801     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17802     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17804     +        %let k = 1;
17805     +        %do %while(^%sysfunc(fetch(&dsid)));
17806     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17807     +                %if &k > 2 %then %do;
17808     +                put "&_name = 0 ; ";
17809     +                %end;
17810     +                %let k = %eval(&k+1);
17811     +        %end;
17813     +        %let rc = %sysfunc(rewind(&dsid));
17814     +        %do i= 2 %to &nvar;
17815     +            %let _varname =  %sysfunc(varname(&dsid, &i));
17816     +            %do %while(^%sysfunc(fetch(&dsid)));
17817     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17818     +                %if &_name = MEAN %then
17819     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
17820     +                %else %if &_name = STD %then
17821     +                %let _std = %sysfunc(getvarn(&dsid, &i));
17822     +                %else %do;
17823     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
17824     +                      %let abscoeff = %sysfunc(abs(&coeff));
17825     +                          %if &abscoeff >  0 %then %do;
17826     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17827     +                           %end;
17828     +                 %end;
17829     +             %end;
17830     +             %let rc = %sysfunc(rewind(&dsid));
17832     +         %end;
17834     +        %let dsid= %sysfunc(close(&dsid));
17835     +       run;
17838     +       proc datasets lib=work nolist;
17839     +            delete _gscoretmpds;
17840     +       run;
17841     +      quit;
17843     +%mend CreateGClusterScoreCode;
17846     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
17848     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
17849     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
17850     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
17851     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
17852     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
17853     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
17854     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
17855     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
17856     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
17857     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
17858     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
17859     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
17860     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
17861     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
17863     +   filename gsfile "&gscorecode";
17865     +   data &EM_USER_GSCORE;
17866     +             set &indata;
17867     +             %include  gsfile;
17868     +        keep
17869     +        %do i=1 %to &ngcluster;
17870     +         %let gcvarname = GC&i;
17871     +         &gcvarname
17872     +        %end;
17873     +     ;
17874     +   run;
17876     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
17877     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17878     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17879     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17880     +    noprint  ;
17881     +     var
17882     +       %do i=1 %to &ngcluster;
17883     +         %let gcvarname = GC&i;
17884     +         &gcvarname
17885     +        %end;
17886     +   ;
17887     +   run;
17890     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
17891     +   data &EM_USER_GSCORECORRPLOT ;
17892     +        set &EM_USER_GSCORECORRPLOT;
17893     +        rename _X_ = X;
17894     +        rename _Y_ = Y;
17895     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17896     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17897     +   run;
17899     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
17901     +   data &EM_USER_GSCORETREE;
17902     +        length _NAME_ $32;
17903     +        length _LABEL_ $100;
17904     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
17905     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17906     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17907     +        end;else do;
17908     +         _LABEL_ = _NAME_;
17909     +        end;
17910     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17912     +   run;
17914     +   quit;
17916     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: VarClus2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17919      
17920      *------------------------------------------------------------*;
17921      * End UPDATE: VarClus2;
17922      *------------------------------------------------------------*;

17923      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* VarClus2 : End update 
* datetime : 11APR2016:14:46:02 
* 
*------------------------------------------------------------* 
17925      %em_getactionstatus(emlib =EMWS8, nodeid=VarClus2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17926      %let em_Train = Y;
17927      %let em_Report = Y;
17928      %let em_Score = Y;
17929      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17930      %let emloopmode =;
17931      %let emloopnumber =0;
17932      %let emloopId =VarClus2;
*------------------------------------------------------------* 
* 
* VarClus2 : Running 
* datetime : 11APR2016:14:46:02 
* 
*------------------------------------------------------------* 
17933      %let SYSCC =0;
17934      %let EMGROUPMODE =;
17935      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L21E56L1 "C:\\predictive-models-project\Workspaces\EMWS8\VarClus2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L21E56L1 new;
MPRINT(EM_DIAGRAM):   run;
