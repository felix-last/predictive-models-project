MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0ZSHDJ4 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0ZSHDJ4 new;
MPRINT(EM_DIAGRAM):   run;
665793     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
665794     set EMWS8.Neural17_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_OUTKEY;
665795     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
665796     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.NEURAL17_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

665797     filename emflow
665797   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
665798     *------------------------------------------------------------*;
665799     * Neural17: Scoring DATA data;
665800     *------------------------------------------------------------*;
665801     data EMWS8.Neural17_TRAIN
665802     / view=EMWS8.Neural17_TRAIN
665803     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_TRAIN / view=EMWS8.Neural17_TRAIN ;
665804     set EMWS8.PRINCOMP_TRAIN
665805     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
665806     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
665807    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665808    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
665809    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665810    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
665811    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
665812    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
665813    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
665814    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
665815    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
665816    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
665817    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
665818    +LENGTH _WARN_ $4
665819    +      F_DepVar  $ 12
665820    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
665821    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
665822    +
665823    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
665824    +
665825    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
665826    +
665827    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
665828    +
665829    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
665830    +
665831    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
665832    +
665833    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
665834    +
665835    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
665836    +
665837    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
665838    +
665839    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
665840    +
665841    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
665842    +
665843    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
665844    +
665845    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
665846    +
665847    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
665848    +
665849    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
665850    +
665851    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
665852    +
665853    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
665854    +
665855    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
665856    +
665857    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
665858    +
665859    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
665860    +
665861    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
665862    +
665863    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
665864    +
665865    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
665866    +
665867    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
665868    +
665869    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
665870    +
665871    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
665872    +
665873    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
665874    +
665875    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
665876    +
665877    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
665878    +
665879    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
665880    +
665881    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
665882    +
665883    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
665884    +
665885    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665886    +*** Checking missing input Interval
665887    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
665888    +
665889    +IF NMISS(
665890    +   PC_1 ,
665891    +   PC_10 ,
665892    +   PC_11 ,
665893    +   PC_12 ,
665894    +   PC_13 ,
665895    +   PC_14 ,
665896    +   PC_15 ,
665897    +   PC_16 ,
665898    +   PC_17 ,
665899    +   PC_2 ,
665900    +   PC_3 ,
665901    +   PC_4 ,
665902    +   PC_5 ,
665903    +   PC_6 ,
665904    +   PC_7 ,
665905    +   PC_8 ,
665906    +   PC_9 ,
665907    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
665908    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
665909    +
665910    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
665911    +END;
MPRINT(EM_DIAGRAM):   END;
665912    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665913    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
665914    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665915    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
665916    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
665917    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
665918    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
665919    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
665920    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
665921    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
665922    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
665923    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
665924    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
665925    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
665926    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
665927    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
665928    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
665929    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
665930    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
665931    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
665932    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
665933    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
665934    +END;
MPRINT(EM_DIAGRAM):   END;
665935    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
665936    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
665937    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
665938    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
665939    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
665940    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
665941    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
665942    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
665943    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
665944    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
665945    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
665946    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
665947    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
665948    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
665949    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
665950    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
665951    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
665952    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
665953    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
665954    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
665955    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
665956    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
665957    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
665958    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
665959    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
665960    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
665961    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
665962    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
665963    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
665964    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
665965    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
665966    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
665967    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
665968    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
665969    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
665970    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
665971    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
665972    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
665973    +END;
MPRINT(EM_DIAGRAM):   END;
665974    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665975    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
665976    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665977    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
665978    +   H11  =     0.47325245705958 * S_PC_1  +    -0.32671142398967 * S_PC_10
665979    +          +     0.57615604162363 * S_PC_11  +     0.48317613203035 * S_PC_12
665980    +          +    -1.05930077532746 * S_PC_13  +      0.5007465821401 * S_PC_14
665981    +          +    -0.41547054463424 * S_PC_15  +     0.11424432442491 * S_PC_16
665982    +          +    -0.18725136577655 * S_PC_17  +    -0.20911601322263 * S_PC_2
665983    +          +    -0.49196475041965 * S_PC_3  +     0.14740529866596 * S_PC_4
665984    +          +    -0.03165374814882 * S_PC_5  +     0.09311598667036 * S_PC_6
665985    +          +     0.30417718065062 * S_PC_7  +     0.32373700790503 * S_PC_8
665986    +          +     0.28212613081564 * S_PC_9  +     0.38601735765022 *
665987    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.47325245705958 * S_PC_1 + -0.32671142398967 * S_PC_10 + 
0.57615604162363 * S_PC_11 + 0.48317613203035 * S_PC_12 + -1.05930077532746 * S_PC_13 + 
0.5007465821401 * S_PC_14 + -0.41547054463424 * S_PC_15 + 0.11424432442491 * S_PC_16 + 
-0.18725136577655 * S_PC_17 + -0.20911601322263 * S_PC_2 + -0.49196475041965 * S_PC_3 + 
0.14740529866596 * S_PC_4 + -0.03165374814882 * S_PC_5 + 0.09311598667036 * S_PC_6 + 
0.30417718065062 * S_PC_7 + 0.32373700790503 * S_PC_8 + 0.28212613081564 * S_PC_9 + 
0.38601735765022 * S_Year_Birth ;
665988    +   H12  =      0.3985278956759 * S_PC_1  +     0.27103948298477 * S_PC_10
665989    +          +     0.01165110369557 * S_PC_11  +     0.21404029328035 * S_PC_12
665990    +          +    -0.27042984265444 * S_PC_13  +     0.04657202774732 * S_PC_14
665991    +          +     0.36682212283702 * S_PC_15  +     0.58999310845876 * S_PC_16
665992    +          +    -0.63185338323755 * S_PC_17  +    -0.47445887654202 * S_PC_2
665993    +          +     0.05620683889662 * S_PC_3  +    -0.27699101353178 * S_PC_4
665994    +          +    -0.13567281097834 * S_PC_5  +    -0.18272982323213 * S_PC_6
665995    +          +     0.20610837478777 * S_PC_7  +     0.10320859948764 * S_PC_8
665996    +          +     0.12065281442441 * S_PC_9  +     -0.0605809550752 *
665997    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.3985278956759 * S_PC_1 + 0.27103948298477 * S_PC_10 + 
0.01165110369557 * S_PC_11 + 0.21404029328035 * S_PC_12 + -0.27042984265444 * S_PC_13 + 
0.04657202774732 * S_PC_14 + 0.36682212283702 * S_PC_15 + 0.58999310845876 * S_PC_16 + 
-0.63185338323755 * S_PC_17 + -0.47445887654202 * S_PC_2 + 0.05620683889662 * S_PC_3 + 
-0.27699101353178 * S_PC_4 + -0.13567281097834 * S_PC_5 + -0.18272982323213 * S_PC_6 + 
0.20610837478777 * S_PC_7 + 0.10320859948764 * S_PC_8 + 0.12065281442441 * S_PC_9 + 
-0.0605809550752 * S_Year_Birth ;
665998    +   H13  =    -0.77180379369522 * S_PC_1  +    -0.09323855070306 * S_PC_10
665999    +          +    -0.23585334471306 * S_PC_11  +     0.04781156320899 * S_PC_12
666000    +          +     -0.3700858361991 * S_PC_13  +     0.85937640415965 * S_PC_14
666001    +          +    -0.06138271078998 * S_PC_15  +      0.1938030316727 * S_PC_16
666002    +          +     0.07804776520336 * S_PC_17  +    -1.09437999462919 * S_PC_2
666003    +          +    -0.41042427670929 * S_PC_3  +     0.41399292129101 * S_PC_4
666004    +          +    -0.15565409173322 * S_PC_5  +     0.17868269952098 * S_PC_6
666005    +          +    -0.02576921888753 * S_PC_7  +     0.38854380533175 * S_PC_8
666006    +          +    -0.07735504596308 * S_PC_9  +    -0.35295170383727 *
666007    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.77180379369522 * S_PC_1 + -0.09323855070306 * S_PC_10 + 
-0.23585334471306 * S_PC_11 + 0.04781156320899 * S_PC_12 + -0.3700858361991 * S_PC_13 + 
0.85937640415965 * S_PC_14 + -0.06138271078998 * S_PC_15 + 0.1938030316727 * S_PC_16 + 
0.07804776520336 * S_PC_17 + -1.09437999462919 * S_PC_2 + -0.41042427670929 * S_PC_3 + 
0.41399292129101 * S_PC_4 + -0.15565409173322 * S_PC_5 + 0.17868269952098 * S_PC_6 + 
-0.02576921888753 * S_PC_7 + 0.38854380533175 * S_PC_8 + -0.07735504596308 * S_PC_9 + 
-0.35295170383727 * S_Year_Birth ;
666008    +   H14  =     0.04368609067765 * S_PC_1  +     0.37976440519635 * S_PC_10
666009    +          +    -0.69771643809086 * S_PC_11  +    -0.71232608576467 * S_PC_12
666010    +          +     0.79608037977429 * S_PC_13  +     0.16506021136243 * S_PC_14
666011    +          +     -0.0039906388458 * S_PC_15  +    -0.11495714358476 * S_PC_16
666012    +          +     0.52938088883283 * S_PC_17  +     0.33511180051287 * S_PC_2
666013    +          +    -0.12564500455882 * S_PC_3  +     0.41012234993818 * S_PC_4
666014    +          +     0.48470626278461 * S_PC_5  +    -0.24151100494349 * S_PC_6
666015    +          +      0.3467371231118 * S_PC_7  +    -0.18816547856508 * S_PC_8
666016    +          +    -0.18662279057133 * S_PC_9  +    -0.00309017760375 *
666017    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.04368609067765 * S_PC_1 + 0.37976440519635 * S_PC_10 + 
-0.69771643809086 * S_PC_11 + -0.71232608576467 * S_PC_12 + 0.79608037977429 * S_PC_13 + 
0.16506021136243 * S_PC_14 + -0.0039906388458 * S_PC_15 + -0.11495714358476 * S_PC_16 + 
0.52938088883283 * S_PC_17 + 0.33511180051287 * S_PC_2 + -0.12564500455882 * S_PC_3 + 
0.41012234993818 * S_PC_4 + 0.48470626278461 * S_PC_5 + -0.24151100494349 * S_PC_6 + 
0.3467371231118 * S_PC_7 + -0.18816547856508 * S_PC_8 + -0.18662279057133 * S_PC_9 + 
-0.00309017760375 * S_Year_Birth ;
666018    +   H15  =     0.91853423521641 * S_PC_1  +    -0.48239932050051 * S_PC_10
666019    +          +    -0.24272827898405 * S_PC_11  +    -0.71536663613851 * S_PC_12
666020    +          +     -0.1314182451163 * S_PC_13  +    -0.11795982814623 * S_PC_14
666021    +          +     0.00161755426146 * S_PC_15  +     0.04899139354401 * S_PC_16
666022    +          +     0.53464493570325 * S_PC_17  +    -0.47531778464622 * S_PC_2
666023    +          +     0.41378563773052 * S_PC_3  +       0.387319318796 * S_PC_4
666024    +          +    -0.73158261568046 * S_PC_5  +    -0.14612596243075 * S_PC_6
666025    +          +    -0.48284476016458 * S_PC_7  +    -0.41782202704696 * S_PC_8
666026    +          +     0.49641564645767 * S_PC_9  +     0.06250518871044 *
666027    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.91853423521641 * S_PC_1 + -0.48239932050051 * S_PC_10 + 
-0.24272827898405 * S_PC_11 + -0.71536663613851 * S_PC_12 + -0.1314182451163 * S_PC_13 + 
-0.11795982814623 * S_PC_14 + 0.00161755426146 * S_PC_15 + 0.04899139354401 * S_PC_16 + 
0.53464493570325 * S_PC_17 + -0.47531778464622 * S_PC_2 + 0.41378563773052 * S_PC_3 + 
0.387319318796 * S_PC_4 + -0.73158261568046 * S_PC_5 + -0.14612596243075 * S_PC_6 + 
-0.48284476016458 * S_PC_7 + -0.41782202704696 * S_PC_8 + 0.49641564645767 * S_PC_9 + 
0.06250518871044 * S_Year_Birth ;
666028    +   H16  =     0.70819105687391 * S_PC_1  +    -0.48513931652328 * S_PC_10
666029    +          +    -0.72348482492828 * S_PC_11  +    -0.28919233666817 * S_PC_12
666030    +          +     0.03554690029559 * S_PC_13  +    -0.18335863094816 * S_PC_14
666031    +          +     0.04948435041765 * S_PC_15  +      0.0232442481254 * S_PC_16
666032    +          +     0.09612244556808 * S_PC_17  +     0.24278682258458 * S_PC_2
666033    +          +     0.66667876657747 * S_PC_3  +    -0.42590544872659 * S_PC_4
666034    +          +     0.01277961498761 * S_PC_5  +      0.1340903514811 * S_PC_6
666035    +          +    -0.12551702696581 * S_PC_7  +     0.67711554270472 * S_PC_8
666036    +          +     0.59807247520609 * S_PC_9  +    -0.24911534258655 *
666037    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.70819105687391 * S_PC_1 + -0.48513931652328 * S_PC_10 + 
-0.72348482492828 * S_PC_11 + -0.28919233666817 * S_PC_12 + 0.03554690029559 * S_PC_13 + 
-0.18335863094816 * S_PC_14 + 0.04948435041765 * S_PC_15 + 0.0232442481254 * S_PC_16 + 
0.09612244556808 * S_PC_17 + 0.24278682258458 * S_PC_2 + 0.66667876657747 * S_PC_3 + 
-0.42590544872659 * S_PC_4 + 0.01277961498761 * S_PC_5 + 0.1340903514811 * S_PC_6 + 
-0.12551702696581 * S_PC_7 + 0.67711554270472 * S_PC_8 + 0.59807247520609 * S_PC_9 + 
-0.24911534258655 * S_Year_Birth ;
666038    +   H11  =    -0.95564978319691 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.95564978319691 + H11 ;
666039    +   H12  =     0.98269674890534 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98269674890534 + H12 ;
666040    +   H13  =    -1.65400569197651 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.65400569197651 + H13 ;
666041    +   H14  =    -1.58663025393249 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58663025393249 + H14 ;
666042    +   H15  =    -1.48054935824057 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.48054935824057 + H15 ;
666043    +   H16  =    -2.01558271631483 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -2.01558271631483 + H16 ;
666044    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
666045    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
666046    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
666047    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
666048    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
666049    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
666050    +END;
MPRINT(EM_DIAGRAM):   END;
666051    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666052    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
666053    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
666054    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
666055    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
666056    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
666057    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
666058    +END;
MPRINT(EM_DIAGRAM):   END;
666059    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666060    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
666061    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666062    +
666063    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
666064    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
666065    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
666066    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
666067    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
666068    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
666069    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
666070    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666071    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666072    +end;
MPRINT(EM_DIAGRAM):   end;
666073    +else do;
MPRINT(EM_DIAGRAM):   else do;
666074    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
666075    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
666076    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
666077    +   end;
MPRINT(EM_DIAGRAM):   end;
666078    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
666079    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
666080    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
666081    +   end;
MPRINT(EM_DIAGRAM):   end;
666082    +   else do;
MPRINT(EM_DIAGRAM):   else do;
666083    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666084    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666085    +   end;
MPRINT(EM_DIAGRAM):   end;
666086    +end;
MPRINT(EM_DIAGRAM):   end;
666087    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666088    +   P_DepVar1  =     2.43727835295856 * H11  +     0.59490358065993 * H12
666089    +          +     1.32848776996251 * H13  +    -1.54926506480899 * H14
666090    +          +     1.54357123271319 * H15  +     1.82788795118491 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.43727835295856 * H11 + 0.59490358065993 * H12 + 
1.32848776996251 * H13 + -1.54926506480899 * H14 + 1.54357123271319 * H15 + 1.82788795118491 * 
H16 ;
666091    +   P_DepVar1  =    -0.73131741718223 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73131741718223 + P_DepVar1 ;
666092    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
666093    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
666094    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
666095    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
666096    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
666097    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
666098    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
666099    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
666100    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
666101    +END;
MPRINT(EM_DIAGRAM):   END;
666102    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666103    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
666104    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
666105    +END;
MPRINT(EM_DIAGRAM):   END;
666106    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
666107    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
666108    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
666109    +END;
MPRINT(EM_DIAGRAM):   END;
666110    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
666111    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
666112    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
666113    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
666114    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
666115    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
666116    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
The SAS System

666117    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666118    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
666119    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666120    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
666121    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
666122    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
666123    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
666124    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
666125    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
666126    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
666127    +END;
MPRINT(EM_DIAGRAM):   END;
666128    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666129    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
666130    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666131    +drop
666132    +H11
666133    +H12
666134    +H13
666135    +H14
666136    +H15
666137    +H16
666138    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
666139    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
666140     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
666141     quit;
666142     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
666143     filename emflow
666143   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
666144     *------------------------------------------------------------*;
666145     * Neural17: Scoring VALIDATE data;
666146     *------------------------------------------------------------*;
666147     data EMWS8.Neural17_VALIDATE
666148     / view=EMWS8.Neural17_VALIDATE
666149     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_VALIDATE / view=EMWS8.Neural17_VALIDATE ;
666150     set EMWS8.PRINCOMP_VALIDATE
666151     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
666152     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
666153    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
666154    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
666155    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
666156    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
666157    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
666158    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
666159    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
666160    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
666161    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
666162    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
666163    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
666164    +LENGTH _WARN_ $4
666165    +      F_DepVar  $ 12
666166    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
666167    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
666168    +
666169    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
666170    +
666171    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
666172    +
666173    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
666174    +
666175    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
666176    +
666177    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
666178    +
666179    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
666180    +
666181    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
666182    +
666183    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
666184    +
666185    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
666186    +
666187    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
666188    +
666189    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
666190    +
666191    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
666192    +
666193    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
666194    +
666195    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
666196    +
666197    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
666198    +
666199    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
666200    +
666201    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
666202    +
666203    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
666204    +
666205    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
666206    +
666207    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
666208    +
666209    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
666210    +
666211    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
666212    +
666213    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
666214    +
666215    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
666216    +
666217    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
666218    +
666219    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
666220    +
666221    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
666222    +
666223    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
666224    +
666225    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
666226    +
666227    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
666228    +
666229    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
666230    +
666231    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666232    +*** Checking missing input Interval
666233    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
666234    +
666235    +IF NMISS(
666236    +   PC_1 ,
666237    +   PC_10 ,
666238    +   PC_11 ,
666239    +   PC_12 ,
666240    +   PC_13 ,
666241    +   PC_14 ,
666242    +   PC_15 ,
666243    +   PC_16 ,
666244    +   PC_17 ,
666245    +   PC_2 ,
666246    +   PC_3 ,
666247    +   PC_4 ,
666248    +   PC_5 ,
666249    +   PC_6 ,
666250    +   PC_7 ,
666251    +   PC_8 ,
666252    +   PC_9 ,
666253    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
666254    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
666255    +
666256    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
666257    +END;
MPRINT(EM_DIAGRAM):   END;
666258    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666259    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
666260    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666261    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666262    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
666263    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
666264    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
666265    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
666266    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
666267    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
666268    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
666269    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
666270    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
666271    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
666272    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
666273    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
666274    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
666275    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
666276    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
666277    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
666278    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
666279    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
666280    +END;
MPRINT(EM_DIAGRAM):   END;
666281    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666282    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
666283    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
666284    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
666285    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
666286    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
666287    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
666288    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
666289    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
666290    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
666291    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
666292    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
666293    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
666294    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
666295    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
666296    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
666297    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
666298    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
666299    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
666300    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
666301    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
666302    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
666303    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
666304    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
666305    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
666306    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
666307    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
666308    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
666309    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
666310    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
666311    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
666312    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
666313    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
666314    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
666315    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
666316    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
666317    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
666318    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
666319    +END;
MPRINT(EM_DIAGRAM):   END;
666320    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666321    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
666322    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666323    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666324    +   H11  =     0.47325245705958 * S_PC_1  +    -0.32671142398967 * S_PC_10
666325    +          +     0.57615604162363 * S_PC_11  +     0.48317613203035 * S_PC_12
666326    +          +    -1.05930077532746 * S_PC_13  +      0.5007465821401 * S_PC_14
666327    +          +    -0.41547054463424 * S_PC_15  +     0.11424432442491 * S_PC_16
666328    +          +    -0.18725136577655 * S_PC_17  +    -0.20911601322263 * S_PC_2
666329    +          +    -0.49196475041965 * S_PC_3  +     0.14740529866596 * S_PC_4
666330    +          +    -0.03165374814882 * S_PC_5  +     0.09311598667036 * S_PC_6
666331    +          +     0.30417718065062 * S_PC_7  +     0.32373700790503 * S_PC_8
666332    +          +     0.28212613081564 * S_PC_9  +     0.38601735765022 *
666333    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.47325245705958 * S_PC_1 + -0.32671142398967 * S_PC_10 + 
0.57615604162363 * S_PC_11 + 0.48317613203035 * S_PC_12 + -1.05930077532746 * S_PC_13 + 
0.5007465821401 * S_PC_14 + -0.41547054463424 * S_PC_15 + 0.11424432442491 * S_PC_16 + 
-0.18725136577655 * S_PC_17 + -0.20911601322263 * S_PC_2 + -0.49196475041965 * S_PC_3 + 
0.14740529866596 * S_PC_4 + -0.03165374814882 * S_PC_5 + 0.09311598667036 * S_PC_6 + 
0.30417718065062 * S_PC_7 + 0.32373700790503 * S_PC_8 + 0.28212613081564 * S_PC_9 + 
0.38601735765022 * S_Year_Birth ;
666334    +   H12  =      0.3985278956759 * S_PC_1  +     0.27103948298477 * S_PC_10
666335    +          +     0.01165110369557 * S_PC_11  +     0.21404029328035 * S_PC_12
666336    +          +    -0.27042984265444 * S_PC_13  +     0.04657202774732 * S_PC_14
666337    +          +     0.36682212283702 * S_PC_15  +     0.58999310845876 * S_PC_16
666338    +          +    -0.63185338323755 * S_PC_17  +    -0.47445887654202 * S_PC_2
666339    +          +     0.05620683889662 * S_PC_3  +    -0.27699101353178 * S_PC_4
666340    +          +    -0.13567281097834 * S_PC_5  +    -0.18272982323213 * S_PC_6
666341    +          +     0.20610837478777 * S_PC_7  +     0.10320859948764 * S_PC_8
666342    +          +     0.12065281442441 * S_PC_9  +     -0.0605809550752 *
666343    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.3985278956759 * S_PC_1 + 0.27103948298477 * S_PC_10 + 
0.01165110369557 * S_PC_11 + 0.21404029328035 * S_PC_12 + -0.27042984265444 * S_PC_13 + 
0.04657202774732 * S_PC_14 + 0.36682212283702 * S_PC_15 + 0.58999310845876 * S_PC_16 + 
-0.63185338323755 * S_PC_17 + -0.47445887654202 * S_PC_2 + 0.05620683889662 * S_PC_3 + 
-0.27699101353178 * S_PC_4 + -0.13567281097834 * S_PC_5 + -0.18272982323213 * S_PC_6 + 
0.20610837478777 * S_PC_7 + 0.10320859948764 * S_PC_8 + 0.12065281442441 * S_PC_9 + 
-0.0605809550752 * S_Year_Birth ;
666344    +   H13  =    -0.77180379369522 * S_PC_1  +    -0.09323855070306 * S_PC_10
666345    +          +    -0.23585334471306 * S_PC_11  +     0.04781156320899 * S_PC_12
666346    +          +     -0.3700858361991 * S_PC_13  +     0.85937640415965 * S_PC_14
666347    +          +    -0.06138271078998 * S_PC_15  +      0.1938030316727 * S_PC_16
666348    +          +     0.07804776520336 * S_PC_17  +    -1.09437999462919 * S_PC_2
666349    +          +    -0.41042427670929 * S_PC_3  +     0.41399292129101 * S_PC_4
666350    +          +    -0.15565409173322 * S_PC_5  +     0.17868269952098 * S_PC_6
666351    +          +    -0.02576921888753 * S_PC_7  +     0.38854380533175 * S_PC_8
666352    +          +    -0.07735504596308 * S_PC_9  +    -0.35295170383727 *
666353    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.77180379369522 * S_PC_1 + -0.09323855070306 * S_PC_10 + 
-0.23585334471306 * S_PC_11 + 0.04781156320899 * S_PC_12 + -0.3700858361991 * S_PC_13 + 
0.85937640415965 * S_PC_14 + -0.06138271078998 * S_PC_15 + 0.1938030316727 * S_PC_16 + 
0.07804776520336 * S_PC_17 + -1.09437999462919 * S_PC_2 + -0.41042427670929 * S_PC_3 + 
0.41399292129101 * S_PC_4 + -0.15565409173322 * S_PC_5 + 0.17868269952098 * S_PC_6 + 
-0.02576921888753 * S_PC_7 + 0.38854380533175 * S_PC_8 + -0.07735504596308 * S_PC_9 + 
-0.35295170383727 * S_Year_Birth ;
666354    +   H14  =     0.04368609067765 * S_PC_1  +     0.37976440519635 * S_PC_10
666355    +          +    -0.69771643809086 * S_PC_11  +    -0.71232608576467 * S_PC_12
666356    +          +     0.79608037977429 * S_PC_13  +     0.16506021136243 * S_PC_14
666357    +          +     -0.0039906388458 * S_PC_15  +    -0.11495714358476 * S_PC_16
666358    +          +     0.52938088883283 * S_PC_17  +     0.33511180051287 * S_PC_2
666359    +          +    -0.12564500455882 * S_PC_3  +     0.41012234993818 * S_PC_4
666360    +          +     0.48470626278461 * S_PC_5  +    -0.24151100494349 * S_PC_6
666361    +          +      0.3467371231118 * S_PC_7  +    -0.18816547856508 * S_PC_8
666362    +          +    -0.18662279057133 * S_PC_9  +    -0.00309017760375 *
666363    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.04368609067765 * S_PC_1 + 0.37976440519635 * S_PC_10 + 
-0.69771643809086 * S_PC_11 + -0.71232608576467 * S_PC_12 + 0.79608037977429 * S_PC_13 + 
0.16506021136243 * S_PC_14 + -0.0039906388458 * S_PC_15 + -0.11495714358476 * S_PC_16 + 
0.52938088883283 * S_PC_17 + 0.33511180051287 * S_PC_2 + -0.12564500455882 * S_PC_3 + 
0.41012234993818 * S_PC_4 + 0.48470626278461 * S_PC_5 + -0.24151100494349 * S_PC_6 + 
0.3467371231118 * S_PC_7 + -0.18816547856508 * S_PC_8 + -0.18662279057133 * S_PC_9 + 
-0.00309017760375 * S_Year_Birth ;
666364    +   H15  =     0.91853423521641 * S_PC_1  +    -0.48239932050051 * S_PC_10
666365    +          +    -0.24272827898405 * S_PC_11  +    -0.71536663613851 * S_PC_12
666366    +          +     -0.1314182451163 * S_PC_13  +    -0.11795982814623 * S_PC_14
666367    +          +     0.00161755426146 * S_PC_15  +     0.04899139354401 * S_PC_16
666368    +          +     0.53464493570325 * S_PC_17  +    -0.47531778464622 * S_PC_2
666369    +          +     0.41378563773052 * S_PC_3  +       0.387319318796 * S_PC_4
666370    +          +    -0.73158261568046 * S_PC_5  +    -0.14612596243075 * S_PC_6
666371    +          +    -0.48284476016458 * S_PC_7  +    -0.41782202704696 * S_PC_8
666372    +          +     0.49641564645767 * S_PC_9  +     0.06250518871044 *
666373    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.91853423521641 * S_PC_1 + -0.48239932050051 * S_PC_10 + 
-0.24272827898405 * S_PC_11 + -0.71536663613851 * S_PC_12 + -0.1314182451163 * S_PC_13 + 
-0.11795982814623 * S_PC_14 + 0.00161755426146 * S_PC_15 + 0.04899139354401 * S_PC_16 + 
0.53464493570325 * S_PC_17 + -0.47531778464622 * S_PC_2 + 0.41378563773052 * S_PC_3 + 
0.387319318796 * S_PC_4 + -0.73158261568046 * S_PC_5 + -0.14612596243075 * S_PC_6 + 
-0.48284476016458 * S_PC_7 + -0.41782202704696 * S_PC_8 + 0.49641564645767 * S_PC_9 + 
0.06250518871044 * S_Year_Birth ;
666374    +   H16  =     0.70819105687391 * S_PC_1  +    -0.48513931652328 * S_PC_10
666375    +          +    -0.72348482492828 * S_PC_11  +    -0.28919233666817 * S_PC_12
666376    +          +     0.03554690029559 * S_PC_13  +    -0.18335863094816 * S_PC_14
666377    +          +     0.04948435041765 * S_PC_15  +      0.0232442481254 * S_PC_16
666378    +          +     0.09612244556808 * S_PC_17  +     0.24278682258458 * S_PC_2
666379    +          +     0.66667876657747 * S_PC_3  +    -0.42590544872659 * S_PC_4
666380    +          +     0.01277961498761 * S_PC_5  +      0.1340903514811 * S_PC_6
666381    +          +    -0.12551702696581 * S_PC_7  +     0.67711554270472 * S_PC_8
666382    +          +     0.59807247520609 * S_PC_9  +    -0.24911534258655 *
666383    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.70819105687391 * S_PC_1 + -0.48513931652328 * S_PC_10 + 
-0.72348482492828 * S_PC_11 + -0.28919233666817 * S_PC_12 + 0.03554690029559 * S_PC_13 + 
-0.18335863094816 * S_PC_14 + 0.04948435041765 * S_PC_15 + 0.0232442481254 * S_PC_16 + 
0.09612244556808 * S_PC_17 + 0.24278682258458 * S_PC_2 + 0.66667876657747 * S_PC_3 + 
-0.42590544872659 * S_PC_4 + 0.01277961498761 * S_PC_5 + 0.1340903514811 * S_PC_6 + 
-0.12551702696581 * S_PC_7 + 0.67711554270472 * S_PC_8 + 0.59807247520609 * S_PC_9 + 
-0.24911534258655 * S_Year_Birth ;
666384    +   H11  =    -0.95564978319691 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.95564978319691 + H11 ;
666385    +   H12  =     0.98269674890534 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98269674890534 + H12 ;
666386    +   H13  =    -1.65400569197651 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.65400569197651 + H13 ;
666387    +   H14  =    -1.58663025393249 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58663025393249 + H14 ;
666388    +   H15  =    -1.48054935824057 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.48054935824057 + H15 ;
666389    +   H16  =    -2.01558271631483 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -2.01558271631483 + H16 ;
666390    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
666391    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
666392    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
666393    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
666394    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
666395    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
666396    +END;
MPRINT(EM_DIAGRAM):   END;
666397    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666398    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
666399    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
666400    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
666401    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
666402    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
666403    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
666404    +END;
MPRINT(EM_DIAGRAM):   END;
666405    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666406    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
666407    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666408    +
666409    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
666410    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
666411    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
666412    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
666413    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
666414    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
666415    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
666416    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666417    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666418    +end;
MPRINT(EM_DIAGRAM):   end;
666419    +else do;
MPRINT(EM_DIAGRAM):   else do;
666420    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
666421    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
666422    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
666423    +   end;
MPRINT(EM_DIAGRAM):   end;
666424    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
666425    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
666426    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
666427    +   end;
MPRINT(EM_DIAGRAM):   end;
666428    +   else do;
MPRINT(EM_DIAGRAM):   else do;
666429    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666430    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666431    +   end;
MPRINT(EM_DIAGRAM):   end;
666432    +end;
MPRINT(EM_DIAGRAM):   end;
666433    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666434    +   P_DepVar1  =     2.43727835295856 * H11  +     0.59490358065993 * H12
666435    +          +     1.32848776996251 * H13  +    -1.54926506480899 * H14
666436    +          +     1.54357123271319 * H15  +     1.82788795118491 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.43727835295856 * H11 + 0.59490358065993 * H12 + 
1.32848776996251 * H13 + -1.54926506480899 * H14 + 1.54357123271319 * H15 + 1.82788795118491 * 
H16 ;
666437    +   P_DepVar1  =    -0.73131741718223 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73131741718223 + P_DepVar1 ;
666438    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
666439    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
666440    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
666441    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
666442    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
666443    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
666444    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
666445    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
666446    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
666447    +END;
MPRINT(EM_DIAGRAM):   END;
666448    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666449    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
666450    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
666451    +END;
MPRINT(EM_DIAGRAM):   END;
666452    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
666453    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
666454    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
666455    +END;
MPRINT(EM_DIAGRAM):   END;
666456    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
666457    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
666458    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
666459    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
666460    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
666461    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
666462    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
666463    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666464    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
666465    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666466    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
666467    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
666468    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
666469    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
666470    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
666471    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
666472    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
666473    +END;
MPRINT(EM_DIAGRAM):   END;
666474    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666475    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
666476    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666477    +drop
666478    +H11
666479    +H12
666480    +H13
666481    +H14
666482    +H15
666483    +H16
666484    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
666485    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
666486     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
666487     quit;
666488     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
666489     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
666490     * Neural17: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural17: Computing metadata for TRAIN data;
666491     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural17_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural17_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural17_TRAIN out=WORK.M3KWOCED noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KWOCED;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KWOCED(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KWOCED;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KWOCED;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1_Z130O NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0GRUI8I(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_Z130O;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural17";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural17";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
666803     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
666804     set EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO;
666805     where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
666806     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL17_EMINFO.
      WHERE (DATA='Neural17') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

666807     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural17_EMINFO;
666808     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
666809     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
666810     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
666814     run;
666815     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
666816     set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
666817     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666818     proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
666819     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666820     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666821     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
666822     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666823     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666824     proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
666825     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666826     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666827     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
666828     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
666829     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666830     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

666831     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
666832     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
666833     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
666834     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL17_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
