MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.12 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                11.12 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2WKZKLB 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2WKZKLB new;
MPRINT(EM_DIAGRAM):   run;
658699     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
658700     set EMWS8.Neural17_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_OUTKEY;
658701     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
658702     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.NEURAL17_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

658703     filename emflow
658703   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
658704     *------------------------------------------------------------*;
658705     * Neural17: Scoring DATA data;
658706     *------------------------------------------------------------*;
658707     data EMWS8.Neural17_TRAIN
658708     / view=EMWS8.Neural17_TRAIN
658709     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_TRAIN / view=EMWS8.Neural17_TRAIN ;
658710     set EMWS8.PRINCOMP_TRAIN
658711     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
658712     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
658713    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
658714    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
658715    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
658716    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
658717    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
658718    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
658719    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
658720    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
658721    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
658722    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
658723    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
658724    +LENGTH _WARN_ $4
658725    +      F_DepVar  $ 12
658726    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
658727    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
658728    +
658729    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
658730    +
658731    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
658732    +
658733    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
658734    +
658735    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
658736    +
658737    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
658738    +
658739    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
658740    +
658741    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
658742    +
658743    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
658744    +
658745    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
658746    +
658747    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
658748    +
658749    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
658750    +
658751    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
658752    +
658753    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
658754    +
658755    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
658756    +
658757    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
658758    +
658759    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
658760    +
658761    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
658762    +
658763    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
658764    +
658765    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
658766    +
658767    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
658768    +
658769    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
658770    +
658771    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
658772    +
658773    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
658774    +
658775    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
658776    +
658777    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
658778    +
658779    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
658780    +
658781    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
658782    +
658783    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
658784    +
658785    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
658786    +
658787    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
658788    +
658789    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
658790    +
658791    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658792    +*** Checking missing input Interval
658793    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
658794    +
658795    +IF NMISS(
658796    +   PC_1 ,
658797    +   PC_10 ,
658798    +   PC_11 ,
658799    +   PC_12 ,
658800    +   PC_13 ,
658801    +   PC_14 ,
658802    +   PC_15 ,
658803    +   PC_16 ,
658804    +   PC_17 ,
658805    +   PC_2 ,
658806    +   PC_3 ,
658807    +   PC_4 ,
658808    +   PC_5 ,
658809    +   PC_6 ,
658810    +   PC_7 ,
658811    +   PC_8 ,
658812    +   PC_9 ,
658813    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
658814    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
658815    +
658816    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
658817    +END;
MPRINT(EM_DIAGRAM):   END;
658818    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658819    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
658820    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658821    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
658822    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
658823    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
658824    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
658825    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
658826    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
658827    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
658828    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
658829    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
658830    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
658831    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
658832    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
658833    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
658834    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
658835    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
658836    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
658837    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
658838    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
658839    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
658840    +END;
MPRINT(EM_DIAGRAM):   END;
658841    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
658842    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
658843    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
658844    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
658845    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
658846    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
658847    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
658848    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
658849    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
658850    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
658851    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
658852    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
658853    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
658854    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
658855    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
658856    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
658857    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
658858    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
658859    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
658860    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
658861    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
658862    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
658863    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
658864    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
658865    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
658866    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
658867    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
658868    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
658869    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
658870    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
658871    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
658872    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
658873    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
658874    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
658875    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
658876    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
658877    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
658878    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
658879    +END;
MPRINT(EM_DIAGRAM):   END;
658880    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658881    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
658882    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658883    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
658884    +   H11  =      0.4572037399939 * S_PC_1  +    -0.33924067655378 * S_PC_10
658885    +          +     0.57141385115112 * S_PC_11  +     0.48487316549189 * S_PC_12
658886    +          +    -1.05031657956537 * S_PC_13  +         0.5266100628 * S_PC_14
658887    +          +    -0.40664215599546 * S_PC_15  +     0.12584985353518 * S_PC_16
658888    +          +    -0.18726079041205 * S_PC_17  +    -0.21051549627173 * S_PC_2
658889    +          +    -0.50083883209613 * S_PC_3  +     0.15037036519111 * S_PC_4
658890    +          +    -0.06091340223564 * S_PC_5  +     0.12052144993899 * S_PC_6
658891    +          +       0.332356321128 * S_PC_7  +     0.31706599410802 * S_PC_8
658892    +          +     0.27650701530647 * S_PC_9  +     0.36756441254936 *
658893    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4572037399939 * S_PC_1 + -0.33924067655378 * S_PC_10 + 
0.57141385115112 * S_PC_11 + 0.48487316549189 * S_PC_12 + -1.05031657956537 * S_PC_13 + 
0.5266100628 * S_PC_14 + -0.40664215599546 * S_PC_15 + 0.12584985353518 * S_PC_16 + 
-0.18726079041205 * S_PC_17 + -0.21051549627173 * S_PC_2 + -0.50083883209613 * S_PC_3 + 
0.15037036519111 * S_PC_4 + -0.06091340223564 * S_PC_5 + 0.12052144993899 * S_PC_6 + 
0.332356321128 * S_PC_7 + 0.31706599410802 * S_PC_8 + 0.27650701530647 * S_PC_9 + 
0.36756441254936 * S_Year_Birth ;
658894    +   H12  =     0.39344846914742 * S_PC_1  +     0.23972559280802 * S_PC_10
658895    +          +     0.01471125669581 * S_PC_11  +     0.20856923684903 * S_PC_12
658896    +          +    -0.29177209177854 * S_PC_13  +     0.03707095215892 * S_PC_14
658897    +          +     0.38334701775474 * S_PC_15  +      0.5863505707375 * S_PC_16
658898    +          +    -0.62562899968641 * S_PC_17  +    -0.44298666943655 * S_PC_2
658899    +          +        0.04346878824 * S_PC_3  +     -0.2694267850657 * S_PC_4
658900    +          +    -0.12543247097847 * S_PC_5  +     -0.1896504822101 * S_PC_6
658901    +          +     0.18228845542316 * S_PC_7  +     0.09948287582483 * S_PC_8
658902    +          +     0.08527418828587 * S_PC_9  +    -0.07133810194976 *
658903    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39344846914742 * S_PC_1 + 0.23972559280802 * S_PC_10 + 
0.01471125669581 * S_PC_11 + 0.20856923684903 * S_PC_12 + -0.29177209177854 * S_PC_13 + 
0.03707095215892 * S_PC_14 + 0.38334701775474 * S_PC_15 + 0.5863505707375 * S_PC_16 + 
-0.62562899968641 * S_PC_17 + -0.44298666943655 * S_PC_2 + 0.04346878824 * S_PC_3 + 
-0.2694267850657 * S_PC_4 + -0.12543247097847 * S_PC_5 + -0.1896504822101 * S_PC_6 + 
0.18228845542316 * S_PC_7 + 0.09948287582483 * S_PC_8 + 0.08527418828587 * S_PC_9 + 
-0.07133810194976 * S_Year_Birth ;
658904    +   H13  =    -0.73548355547467 * S_PC_1  +    -0.10402810694097 * S_PC_10
658905    +          +    -0.23530243081797 * S_PC_11  +     0.05157777911367 * S_PC_12
658906    +          +    -0.37308967195093 * S_PC_13  +     0.84460260270185 * S_PC_14
658907    +          +    -0.06322469233111 * S_PC_15  +     0.19066414060707 * S_PC_16
658908    +          +     0.06331857444725 * S_PC_17  +    -1.07880141314119 * S_PC_2
658909    +          +    -0.40445464921802 * S_PC_3  +     0.42151508961402 * S_PC_4
658910    +          +    -0.15204543817335 * S_PC_5  +     0.18602427623316 * S_PC_6
658911    +          +    -0.04709706814842 * S_PC_7  +     0.36586874220739 * S_PC_8
658912    +          +    -0.06991289454926 * S_PC_9  +    -0.36834643959125 *
658913    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.73548355547467 * S_PC_1 + -0.10402810694097 * S_PC_10 + 
-0.23530243081797 * S_PC_11 + 0.05157777911367 * S_PC_12 + -0.37308967195093 * S_PC_13 + 
0.84460260270185 * S_PC_14 + -0.06322469233111 * S_PC_15 + 0.19066414060707 * S_PC_16 + 
0.06331857444725 * S_PC_17 + -1.07880141314119 * S_PC_2 + -0.40445464921802 * S_PC_3 + 
0.42151508961402 * S_PC_4 + -0.15204543817335 * S_PC_5 + 0.18602427623316 * S_PC_6 + 
-0.04709706814842 * S_PC_7 + 0.36586874220739 * S_PC_8 + -0.06991289454926 * S_PC_9 + 
-0.36834643959125 * S_Year_Birth ;
658914    +   H14  =     0.03645017761422 * S_PC_1  +     0.35836366205085 * S_PC_10
658915    +          +    -0.67037688965042 * S_PC_11  +    -0.69506985454419 * S_PC_12
658916    +          +     0.75476319829716 * S_PC_13  +     0.17842794890744 * S_PC_14
658917    +          +    -0.02555345712531 * S_PC_15  +    -0.09809436799607 * S_PC_16
658918    +          +     0.53989601368165 * S_PC_17  +     0.34066718426356 * S_PC_2
658919    +          +    -0.13975214313923 * S_PC_3  +     0.39764818364136 * S_PC_4
658920    +          +     0.48005328630412 * S_PC_5  +    -0.24963672499963 * S_PC_6
658921    +          +     0.33581189577795 * S_PC_7  +    -0.20453271114584 * S_PC_8
658922    +          +    -0.18026723512126 * S_PC_9  +    -0.01794612569398 *
658923    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03645017761422 * S_PC_1 + 0.35836366205085 * S_PC_10 + 
-0.67037688965042 * S_PC_11 + -0.69506985454419 * S_PC_12 + 0.75476319829716 * S_PC_13 + 
0.17842794890744 * S_PC_14 + -0.02555345712531 * S_PC_15 + -0.09809436799607 * S_PC_16 + 
0.53989601368165 * S_PC_17 + 0.34066718426356 * S_PC_2 + -0.13975214313923 * S_PC_3 + 
0.39764818364136 * S_PC_4 + 0.48005328630412 * S_PC_5 + -0.24963672499963 * S_PC_6 + 
0.33581189577795 * S_PC_7 + -0.20453271114584 * S_PC_8 + -0.18026723512126 * S_PC_9 + 
-0.01794612569398 * S_Year_Birth ;
658924    +   H15  =     0.87819286617219 * S_PC_1  +    -0.45680333333833 * S_PC_10
658925    +          +    -0.19222569004196 * S_PC_11  +    -0.69150047873875 * S_PC_12
658926    +          +    -0.15732640647119 * S_PC_13  +     -0.1113321891333 * S_PC_14
658927    +          +     0.02739308651489 * S_PC_15  +     0.03470872151577 * S_PC_16
658928    +          +     0.52347238904566 * S_PC_17  +    -0.48104910756428 * S_PC_2
658929    +          +     0.39717000994127 * S_PC_3  +     0.40508698052766 * S_PC_4
658930    +          +    -0.70416241168868 * S_PC_5  +    -0.15695961262575 * S_PC_6
658931    +          +    -0.50463412391796 * S_PC_7  +    -0.42242933925107 * S_PC_8
658932    +          +     0.48601170602465 * S_PC_9  +     0.05218649760104 *
658933    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.87819286617219 * S_PC_1 + -0.45680333333833 * S_PC_10 + 
-0.19222569004196 * S_PC_11 + -0.69150047873875 * S_PC_12 + -0.15732640647119 * S_PC_13 + 
-0.1113321891333 * S_PC_14 + 0.02739308651489 * S_PC_15 + 0.03470872151577 * S_PC_16 + 
0.52347238904566 * S_PC_17 + -0.48104910756428 * S_PC_2 + 0.39717000994127 * S_PC_3 + 
0.40508698052766 * S_PC_4 + -0.70416241168868 * S_PC_5 + -0.15695961262575 * S_PC_6 + 
-0.50463412391796 * S_PC_7 + -0.42242933925107 * S_PC_8 + 0.48601170602465 * S_PC_9 + 
0.05218649760104 * S_Year_Birth ;
658934    +   H16  =     0.71314442719152 * S_PC_1  +    -0.48254803601996 * S_PC_10
658935    +          +     -0.7055040284859 * S_PC_11  +    -0.28771421134443 * S_PC_12
658936    +          +     0.03904298770718 * S_PC_13  +    -0.19570881459626 * S_PC_14
658937    +          +     0.06318106643827 * S_PC_15  +     0.02221515221124 * S_PC_16
658938    +          +     0.08250149766469 * S_PC_17  +     0.24785323093961 * S_PC_2
658939    +          +     0.67272562474514 * S_PC_3  +    -0.40883740914753 * S_PC_4
658940    +          +     0.01526133771642 * S_PC_5  +     0.13815654365502 * S_PC_6
658941    +          +    -0.13763305233903 * S_PC_7  +     0.65046077839767 * S_PC_8
658942    +          +     0.59590047615822 * S_PC_9  +    -0.23180740400042 *
658943    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.71314442719152 * S_PC_1 + -0.48254803601996 * S_PC_10 + 
-0.7055040284859 * S_PC_11 + -0.28771421134443 * S_PC_12 + 0.03904298770718 * S_PC_13 + 
-0.19570881459626 * S_PC_14 + 0.06318106643827 * S_PC_15 + 0.02221515221124 * S_PC_16 + 
0.08250149766469 * S_PC_17 + 0.24785323093961 * S_PC_2 + 0.67272562474514 * S_PC_3 + 
-0.40883740914753 * S_PC_4 + 0.01526133771642 * S_PC_5 + 0.13815654365502 * S_PC_6 + 
-0.13763305233903 * S_PC_7 + 0.65046077839767 * S_PC_8 + 0.59590047615822 * S_PC_9 + 
-0.23180740400042 * S_Year_Birth ;
658944    +   H11  =    -0.96567698220965 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96567698220965 + H11 ;
658945    +   H12  =     0.98497546600771 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98497546600771 + H12 ;
658946    +   H13  =    -1.66780990072659 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66780990072659 + H13 ;
658947    +   H14  =    -1.58958109115035 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58958109115035 + H14 ;
658948    +   H15  =     -1.4698438300852 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.4698438300852 + H15 ;
658949    +   H16  =    -1.96875059181844 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.96875059181844 + H16 ;
658950    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
658951    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
658952    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
658953    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
658954    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
658955    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
658956    +END;
MPRINT(EM_DIAGRAM):   END;
658957    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
658958    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
658959    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
658960    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
658961    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
658962    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
658963    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
658964    +END;
MPRINT(EM_DIAGRAM):   END;
658965    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658966    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
658967    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
658968    +
658969    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
658970    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
658971    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
658972    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
658973    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
658974    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
658975    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
658976    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
658977    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
658978    +end;
MPRINT(EM_DIAGRAM):   end;
658979    +else do;
MPRINT(EM_DIAGRAM):   else do;
658980    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
658981    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
658982    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
658983    +   end;
MPRINT(EM_DIAGRAM):   end;
658984    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
658985    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
658986    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
658987    +   end;
MPRINT(EM_DIAGRAM):   end;
658988    +   else do;
MPRINT(EM_DIAGRAM):   else do;
658989    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
658990    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
658991    +   end;
MPRINT(EM_DIAGRAM):   end;
658992    +end;
MPRINT(EM_DIAGRAM):   end;
658993    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
658994    +   P_DepVar1  =     2.39531584340828 * H11  +      0.5615033898018 * H12
658995    +          +     1.33226164827793 * H13  +    -1.50665895392278 * H14
658996    +          +     1.50663887827851 * H15  +      1.7690093184365 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.39531584340828 * H11 + 0.5615033898018 * H12 + 
1.33226164827793 * H13 + -1.50665895392278 * H14 + 1.50663887827851 * H15 + 1.7690093184365 * 
H16 ;
658997    +   P_DepVar1  =    -0.73096588852494 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73096588852494 + P_DepVar1 ;
658998    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
658999    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
659000    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
659001    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
659002    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
659003    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
659004    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
659005    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
659006    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
659007    +END;
MPRINT(EM_DIAGRAM):   END;
659008    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659009    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
659010    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
659011    +END;
MPRINT(EM_DIAGRAM):   END;
659012    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
659013    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
659014    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
659015    +END;
MPRINT(EM_DIAGRAM):   END;
659016    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
659017    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
659018    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
659019    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
659020    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
659021    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
659022    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
659023    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659024    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
659025    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659026    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
659027    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
659028    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
659029    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
659030    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
659031    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
659032    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
659033    +END;
MPRINT(EM_DIAGRAM):   END;
659034    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659035    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
659036    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659037    +drop
659038    +H11
659039    +H12
659040    +H13
659041    +H14
659042    +H15
659043    +H16
659044    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
659045    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
659046     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_DIAGRAM):   quit;
659047     quit;
659048     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
659049     filename emflow
659049   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
659050     *------------------------------------------------------------*;
659051     * Neural17: Scoring VALIDATE data;
659052     *------------------------------------------------------------*;
659053     data EMWS8.Neural17_VALIDATE
659054     / view=EMWS8.Neural17_VALIDATE
659055     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_VALIDATE / view=EMWS8.Neural17_VALIDATE ;
659056     set EMWS8.PRINCOMP_VALIDATE
659057     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
659058     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
659059    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659060    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
659061    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659062    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
659063    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
659064    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
659065    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
659066    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
659067    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
659068    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
659069    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
659070    +LENGTH _WARN_ $4
659071    +      F_DepVar  $ 12
659072    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
659073    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
659074    +
659075    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
659076    +
659077    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
659078    +
659079    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
659080    +
659081    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
659082    +
659083    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
659084    +
659085    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
659086    +
659087    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
659088    +
659089    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
659090    +
659091    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
659092    +
659093    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
659094    +
659095    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
659096    +
659097    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
659098    +
659099    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
659100    +
659101    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
659102    +
659103    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
659104    +
659105    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
659106    +
659107    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
659108    +
659109    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
659110    +
659111    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
659112    +
659113    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
659114    +
659115    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
659116    +
659117    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
659118    +
659119    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
659120    +
659121    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
659122    +
659123    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659124    +
659125    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
659126    +
659127    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
659128    +
659129    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
659130    +
659131    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
659132    +
659133    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
659134    +
659135    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
659136    +
659137    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659138    +*** Checking missing input Interval
659139    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
659140    +
659141    +IF NMISS(
659142    +   PC_1 ,
659143    +   PC_10 ,
659144    +   PC_11 ,
659145    +   PC_12 ,
659146    +   PC_13 ,
659147    +   PC_14 ,
659148    +   PC_15 ,
659149    +   PC_16 ,
659150    +   PC_17 ,
659151    +   PC_2 ,
659152    +   PC_3 ,
659153    +   PC_4 ,
659154    +   PC_5 ,
659155    +   PC_6 ,
659156    +   PC_7 ,
659157    +   PC_8 ,
659158    +   PC_9 ,
659159    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
659160    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
659161    +
659162    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
659163    +END;
MPRINT(EM_DIAGRAM):   END;
659164    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659165    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
659166    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659167    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659168    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659169    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659170    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659171    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659172    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659173    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659174    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659175    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659176    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659177    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659178    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659179    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659180    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659181    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659182    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659183    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659184    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659185    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659186    +END;
MPRINT(EM_DIAGRAM):   END;
659187    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659188    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
659189    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659190    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
659191    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659192    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
659193    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659194    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
659195    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659196    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
659197    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659198    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
659199    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659200    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
659201    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659202    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
659203    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659204    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
659205    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659206    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
659207    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659208    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
659209    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659210    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
659211    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659212    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
659213    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659214    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
659215    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659216    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
659217    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659218    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
659219    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659220    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
659221    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659222    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
659223    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
659224    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659225    +END;
MPRINT(EM_DIAGRAM):   END;
659226    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659227    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
659228    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659229    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659230    +   H11  =      0.4572037399939 * S_PC_1  +    -0.33924067655378 * S_PC_10
659231    +          +     0.57141385115112 * S_PC_11  +     0.48487316549189 * S_PC_12
659232    +          +    -1.05031657956537 * S_PC_13  +         0.5266100628 * S_PC_14
659233    +          +    -0.40664215599546 * S_PC_15  +     0.12584985353518 * S_PC_16
659234    +          +    -0.18726079041205 * S_PC_17  +    -0.21051549627173 * S_PC_2
659235    +          +    -0.50083883209613 * S_PC_3  +     0.15037036519111 * S_PC_4
659236    +          +    -0.06091340223564 * S_PC_5  +     0.12052144993899 * S_PC_6
659237    +          +       0.332356321128 * S_PC_7  +     0.31706599410802 * S_PC_8
659238    +          +     0.27650701530647 * S_PC_9  +     0.36756441254936 *
659239    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4572037399939 * S_PC_1 + -0.33924067655378 * S_PC_10 + 
0.57141385115112 * S_PC_11 + 0.48487316549189 * S_PC_12 + -1.05031657956537 * S_PC_13 + 
0.5266100628 * S_PC_14 + -0.40664215599546 * S_PC_15 + 0.12584985353518 * S_PC_16 + 
-0.18726079041205 * S_PC_17 + -0.21051549627173 * S_PC_2 + -0.50083883209613 * S_PC_3 + 
0.15037036519111 * S_PC_4 + -0.06091340223564 * S_PC_5 + 0.12052144993899 * S_PC_6 + 
0.332356321128 * S_PC_7 + 0.31706599410802 * S_PC_8 + 0.27650701530647 * S_PC_9 + 
0.36756441254936 * S_Year_Birth ;
659240    +   H12  =     0.39344846914742 * S_PC_1  +     0.23972559280802 * S_PC_10
659241    +          +     0.01471125669581 * S_PC_11  +     0.20856923684903 * S_PC_12
659242    +          +    -0.29177209177854 * S_PC_13  +     0.03707095215892 * S_PC_14
659243    +          +     0.38334701775474 * S_PC_15  +      0.5863505707375 * S_PC_16
659244    +          +    -0.62562899968641 * S_PC_17  +    -0.44298666943655 * S_PC_2
659245    +          +        0.04346878824 * S_PC_3  +     -0.2694267850657 * S_PC_4
659246    +          +    -0.12543247097847 * S_PC_5  +     -0.1896504822101 * S_PC_6
659247    +          +     0.18228845542316 * S_PC_7  +     0.09948287582483 * S_PC_8
659248    +          +     0.08527418828587 * S_PC_9  +    -0.07133810194976 *
659249    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39344846914742 * S_PC_1 + 0.23972559280802 * S_PC_10 + 
0.01471125669581 * S_PC_11 + 0.20856923684903 * S_PC_12 + -0.29177209177854 * S_PC_13 + 
0.03707095215892 * S_PC_14 + 0.38334701775474 * S_PC_15 + 0.5863505707375 * S_PC_16 + 
-0.62562899968641 * S_PC_17 + -0.44298666943655 * S_PC_2 + 0.04346878824 * S_PC_3 + 
-0.2694267850657 * S_PC_4 + -0.12543247097847 * S_PC_5 + -0.1896504822101 * S_PC_6 + 
0.18228845542316 * S_PC_7 + 0.09948287582483 * S_PC_8 + 0.08527418828587 * S_PC_9 + 
-0.07133810194976 * S_Year_Birth ;
659250    +   H13  =    -0.73548355547467 * S_PC_1  +    -0.10402810694097 * S_PC_10
659251    +          +    -0.23530243081797 * S_PC_11  +     0.05157777911367 * S_PC_12
659252    +          +    -0.37308967195093 * S_PC_13  +     0.84460260270185 * S_PC_14
659253    +          +    -0.06322469233111 * S_PC_15  +     0.19066414060707 * S_PC_16
659254    +          +     0.06331857444725 * S_PC_17  +    -1.07880141314119 * S_PC_2
659255    +          +    -0.40445464921802 * S_PC_3  +     0.42151508961402 * S_PC_4
659256    +          +    -0.15204543817335 * S_PC_5  +     0.18602427623316 * S_PC_6
659257    +          +    -0.04709706814842 * S_PC_7  +     0.36586874220739 * S_PC_8
659258    +          +    -0.06991289454926 * S_PC_9  +    -0.36834643959125 *
659259    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.73548355547467 * S_PC_1 + -0.10402810694097 * S_PC_10 + 
-0.23530243081797 * S_PC_11 + 0.05157777911367 * S_PC_12 + -0.37308967195093 * S_PC_13 + 
0.84460260270185 * S_PC_14 + -0.06322469233111 * S_PC_15 + 0.19066414060707 * S_PC_16 + 
0.06331857444725 * S_PC_17 + -1.07880141314119 * S_PC_2 + -0.40445464921802 * S_PC_3 + 
0.42151508961402 * S_PC_4 + -0.15204543817335 * S_PC_5 + 0.18602427623316 * S_PC_6 + 
-0.04709706814842 * S_PC_7 + 0.36586874220739 * S_PC_8 + -0.06991289454926 * S_PC_9 + 
-0.36834643959125 * S_Year_Birth ;
659260    +   H14  =     0.03645017761422 * S_PC_1  +     0.35836366205085 * S_PC_10
659261    +          +    -0.67037688965042 * S_PC_11  +    -0.69506985454419 * S_PC_12
659262    +          +     0.75476319829716 * S_PC_13  +     0.17842794890744 * S_PC_14
659263    +          +    -0.02555345712531 * S_PC_15  +    -0.09809436799607 * S_PC_16
659264    +          +     0.53989601368165 * S_PC_17  +     0.34066718426356 * S_PC_2
659265    +          +    -0.13975214313923 * S_PC_3  +     0.39764818364136 * S_PC_4
659266    +          +     0.48005328630412 * S_PC_5  +    -0.24963672499963 * S_PC_6
659267    +          +     0.33581189577795 * S_PC_7  +    -0.20453271114584 * S_PC_8
659268    +          +    -0.18026723512126 * S_PC_9  +    -0.01794612569398 *
659269    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03645017761422 * S_PC_1 + 0.35836366205085 * S_PC_10 + 
-0.67037688965042 * S_PC_11 + -0.69506985454419 * S_PC_12 + 0.75476319829716 * S_PC_13 + 
0.17842794890744 * S_PC_14 + -0.02555345712531 * S_PC_15 + -0.09809436799607 * S_PC_16 + 
0.53989601368165 * S_PC_17 + 0.34066718426356 * S_PC_2 + -0.13975214313923 * S_PC_3 + 
0.39764818364136 * S_PC_4 + 0.48005328630412 * S_PC_5 + -0.24963672499963 * S_PC_6 + 
0.33581189577795 * S_PC_7 + -0.20453271114584 * S_PC_8 + -0.18026723512126 * S_PC_9 + 
-0.01794612569398 * S_Year_Birth ;
659270    +   H15  =     0.87819286617219 * S_PC_1  +    -0.45680333333833 * S_PC_10
659271    +          +    -0.19222569004196 * S_PC_11  +    -0.69150047873875 * S_PC_12
659272    +          +    -0.15732640647119 * S_PC_13  +     -0.1113321891333 * S_PC_14
659273    +          +     0.02739308651489 * S_PC_15  +     0.03470872151577 * S_PC_16
659274    +          +     0.52347238904566 * S_PC_17  +    -0.48104910756428 * S_PC_2
659275    +          +     0.39717000994127 * S_PC_3  +     0.40508698052766 * S_PC_4
659276    +          +    -0.70416241168868 * S_PC_5  +    -0.15695961262575 * S_PC_6
659277    +          +    -0.50463412391796 * S_PC_7  +    -0.42242933925107 * S_PC_8
659278    +          +     0.48601170602465 * S_PC_9  +     0.05218649760104 *
659279    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.87819286617219 * S_PC_1 + -0.45680333333833 * S_PC_10 + 
-0.19222569004196 * S_PC_11 + -0.69150047873875 * S_PC_12 + -0.15732640647119 * S_PC_13 + 
-0.1113321891333 * S_PC_14 + 0.02739308651489 * S_PC_15 + 0.03470872151577 * S_PC_16 + 
0.52347238904566 * S_PC_17 + -0.48104910756428 * S_PC_2 + 0.39717000994127 * S_PC_3 + 
0.40508698052766 * S_PC_4 + -0.70416241168868 * S_PC_5 + -0.15695961262575 * S_PC_6 + 
-0.50463412391796 * S_PC_7 + -0.42242933925107 * S_PC_8 + 0.48601170602465 * S_PC_9 + 
0.05218649760104 * S_Year_Birth ;
659280    +   H16  =     0.71314442719152 * S_PC_1  +    -0.48254803601996 * S_PC_10
659281    +          +     -0.7055040284859 * S_PC_11  +    -0.28771421134443 * S_PC_12
659282    +          +     0.03904298770718 * S_PC_13  +    -0.19570881459626 * S_PC_14
659283    +          +     0.06318106643827 * S_PC_15  +     0.02221515221124 * S_PC_16
659284    +          +     0.08250149766469 * S_PC_17  +     0.24785323093961 * S_PC_2
659285    +          +     0.67272562474514 * S_PC_3  +    -0.40883740914753 * S_PC_4
659286    +          +     0.01526133771642 * S_PC_5  +     0.13815654365502 * S_PC_6
659287    +          +    -0.13763305233903 * S_PC_7  +     0.65046077839767 * S_PC_8
659288    +          +     0.59590047615822 * S_PC_9  +    -0.23180740400042 *
659289    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.71314442719152 * S_PC_1 + -0.48254803601996 * S_PC_10 + 
-0.7055040284859 * S_PC_11 + -0.28771421134443 * S_PC_12 + 0.03904298770718 * S_PC_13 + 
-0.19570881459626 * S_PC_14 + 0.06318106643827 * S_PC_15 + 0.02221515221124 * S_PC_16 + 
0.08250149766469 * S_PC_17 + 0.24785323093961 * S_PC_2 + 0.67272562474514 * S_PC_3 + 
-0.40883740914753 * S_PC_4 + 0.01526133771642 * S_PC_5 + 0.13815654365502 * S_PC_6 + 
-0.13763305233903 * S_PC_7 + 0.65046077839767 * S_PC_8 + 0.59590047615822 * S_PC_9 + 
-0.23180740400042 * S_Year_Birth ;
659290    +   H11  =    -0.96567698220965 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96567698220965 + H11 ;
659291    +   H12  =     0.98497546600771 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98497546600771 + H12 ;
659292    +   H13  =    -1.66780990072659 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66780990072659 + H13 ;
659293    +   H14  =    -1.58958109115035 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58958109115035 + H14 ;
659294    +   H15  =     -1.4698438300852 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.4698438300852 + H15 ;
659295    +   H16  =    -1.96875059181844 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.96875059181844 + H16 ;
659296    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
659297    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
659298    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
659299    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
659300    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
659301    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
659302    +END;
MPRINT(EM_DIAGRAM):   END;
659303    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659304    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
659305    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
659306    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
659307    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
659308    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
659309    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
659310    +END;
MPRINT(EM_DIAGRAM):   END;
659311    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659312    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
659313    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659314    +
659315    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
659316    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
659317    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659318    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
659319    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
659320    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
659321    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
659322    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659323    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659324    +end;
MPRINT(EM_DIAGRAM):   end;
659325    +else do;
MPRINT(EM_DIAGRAM):   else do;
659326    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
659327    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
659328    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
659329    +   end;
MPRINT(EM_DIAGRAM):   end;
659330    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
659331    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
659332    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
659333    +   end;
MPRINT(EM_DIAGRAM):   end;
659334    +   else do;
MPRINT(EM_DIAGRAM):   else do;
659335    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659336    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659337    +   end;
MPRINT(EM_DIAGRAM):   end;
659338    +end;
MPRINT(EM_DIAGRAM):   end;
659339    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659340    +   P_DepVar1  =     2.39531584340828 * H11  +      0.5615033898018 * H12
659341    +          +     1.33226164827793 * H13  +    -1.50665895392278 * H14
659342    +          +     1.50663887827851 * H15  +      1.7690093184365 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.39531584340828 * H11 + 0.5615033898018 * H12 + 
1.33226164827793 * H13 + -1.50665895392278 * H14 + 1.50663887827851 * H15 + 1.7690093184365 * 
H16 ;
659343    +   P_DepVar1  =    -0.73096588852494 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73096588852494 + P_DepVar1 ;
659344    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
659345    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
659346    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
659347    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
659348    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
659349    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
659350    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
659351    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
659352    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
659353    +END;
MPRINT(EM_DIAGRAM):   END;
659354    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659355    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
659356    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
659357    +END;
MPRINT(EM_DIAGRAM):   END;
659358    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
659359    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
659360    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
659361    +END;
MPRINT(EM_DIAGRAM):   END;
659362    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
659363    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
659364    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
659365    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
659366    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
659367    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
659368    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
659369    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659370    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
659371    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659372    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
659373    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
659374    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
659375    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
659376    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
659377    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
659378    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
659379    +END;
MPRINT(EM_DIAGRAM):   END;
659380    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659381    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
659382    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659383    +drop
659384    +H11
659385    +H12
659386    +H13
659387    +H14
659388    +H15
659389    +H16
659390    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
659391    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
659392     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
659393     quit;
659394     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
659395     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
659396     * Neural17: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural17: Computing metadata for TRAIN data;
659397     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural17_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural17_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural17_TRAIN out=WORK.M0IXI_KR noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0IXI_KR;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0IXI_KR(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0IXI_KR;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0IXI_KR;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M06TBOOW NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IZXCQB(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
The SAS System

MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TBOOW;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural17";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural17";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
659709     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
659710     set EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO;
659711     where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
659712     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL17_EMINFO.
      WHERE (DATA='Neural17') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

659713     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural17_EMINFO;
659714     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
659715     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
659716     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
659720     run;
659721     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
659722     set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
659723     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

659724     proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
659725     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
659726     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

659727     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
659728     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
659729     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

659730     proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
659731     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
659732     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

659733     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
659734     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
659735     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
659736     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

659737     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
659738     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
659739     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
659740     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
NOTE: View EMWS8.NEURAL17_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
