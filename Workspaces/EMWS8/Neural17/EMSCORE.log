MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O09Z4PLE 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O09Z4PLE new;
MPRINT(EM_DIAGRAM):   run;
681297     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
681298     set EMWS8.Neural17_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_OUTKEY;
681299     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
681300     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.NEURAL17_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

681301     filename emflow
681301   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681302     *------------------------------------------------------------*;
681303     * Neural17: Scoring DATA data;
681304     *------------------------------------------------------------*;
681305     data EMWS8.Neural17_TRAIN
681306     / view=EMWS8.Neural17_TRAIN
681307     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_TRAIN / view=EMWS8.Neural17_TRAIN ;
681308     set EMWS8.PRINCOMP_TRAIN
681309     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
681310     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
681311    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681312    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
681313    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681314    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
681315    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
681316    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
681317    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
681318    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
681319    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
681320    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
681321    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
681322    +LENGTH _WARN_ $4
681323    +      F_DepVar  $ 12
681324    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
681325    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
681326    +
681327    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
681328    +
681329    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
681330    +
681331    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
681332    +
681333    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
681334    +
681335    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
681336    +
681337    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
681338    +
681339    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
681340    +
681341    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
681342    +
681343    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
681344    +
681345    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
681346    +
681347    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
681348    +
681349    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
681350    +
681351    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
681352    +
681353    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
681354    +
681355    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
681356    +
681357    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
681358    +
681359    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
681360    +
681361    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
681362    +
681363    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
681364    +
681365    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
681366    +
681367    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
681368    +
681369    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
681370    +
681371    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
681372    +
681373    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
681374    +
681375    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681376    +
681377    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
681378    +
681379    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
681380    +
681381    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
681382    +
681383    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
681384    +
681385    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
681386    +
681387    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
681388    +
681389    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681390    +*** Checking missing input Interval
681391    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
681392    +
681393    +IF NMISS(
681394    +   PC_1 ,
681395    +   PC_10 ,
681396    +   PC_11 ,
681397    +   PC_12 ,
681398    +   PC_13 ,
681399    +   PC_14 ,
681400    +   PC_15 ,
681401    +   PC_16 ,
681402    +   PC_17 ,
681403    +   PC_2 ,
681404    +   PC_3 ,
681405    +   PC_4 ,
681406    +   PC_5 ,
681407    +   PC_6 ,
681408    +   PC_7 ,
681409    +   PC_8 ,
681410    +   PC_9 ,
681411    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
681412    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
681413    +
681414    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
681415    +END;
MPRINT(EM_DIAGRAM):   END;
681416    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681417    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
681418    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681419    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681420    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
681421    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
681422    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
681423    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
681424    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
681425    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
681426    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
681427    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
681428    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
681429    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
681430    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
681431    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
681432    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
681433    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
681434    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
681435    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
681436    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
681437    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681438    +END;
MPRINT(EM_DIAGRAM):   END;
681439    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681440    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
681441    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
681442    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
681443    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
681444    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
681445    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
681446    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
681447    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
681448    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
681449    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
681450    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
681451    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
681452    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
681453    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
681454    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
681455    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
681456    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
681457    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
681458    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
681459    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
681460    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
681461    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
681462    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
681463    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
681464    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
681465    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
681466    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
681467    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
681468    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
681469    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
681470    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
681471    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
681472    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
681473    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
681474    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
681475    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
681476    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681477    +END;
MPRINT(EM_DIAGRAM):   END;
681478    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681479    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
681480    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681481    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681482    +   H11  =      0.4640556659307 * S_PC_1  +    -0.33462522014566 * S_PC_10
681483    +          +     0.56806418894822 * S_PC_11  +     0.47755179162972 * S_PC_12
681484    +          +    -1.05081910003147 * S_PC_13  +     0.51924824879327 * S_PC_14
681485    +          +    -0.40498769195755 * S_PC_15  +     0.12870488597274 * S_PC_16
681486    +          +    -0.18386984954493 * S_PC_17  +     -0.2086299332252 * S_PC_2
681487    +          +    -0.50252958940538 * S_PC_3  +     0.15534767510019 * S_PC_4
681488    +          +    -0.06309817063591 * S_PC_5  +     0.11574559455719 * S_PC_6
681489    +          +     0.32449679316348 * S_PC_7  +     0.30800540848273 * S_PC_8
681490    +          +     0.27935517346427 * S_PC_9  +     0.37069240076102 *
681491    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4640556659307 * S_PC_1 + -0.33462522014566 * S_PC_10 + 
0.56806418894822 * S_PC_11 + 0.47755179162972 * S_PC_12 + -1.05081910003147 * S_PC_13 + 
0.51924824879327 * S_PC_14 + -0.40498769195755 * S_PC_15 + 0.12870488597274 * S_PC_16 + 
-0.18386984954493 * S_PC_17 + -0.2086299332252 * S_PC_2 + -0.50252958940538 * S_PC_3 + 
0.15534767510019 * S_PC_4 + -0.06309817063591 * S_PC_5 + 0.11574559455719 * S_PC_6 + 
0.32449679316348 * S_PC_7 + 0.30800540848273 * S_PC_8 + 0.27935517346427 * S_PC_9 + 
0.37069240076102 * S_Year_Birth ;
681492    +   H12  =     0.39410399313223 * S_PC_1  +     0.24787065969983 * S_PC_10
681493    +          +     0.01252810266568 * S_PC_11  +      0.2112853368947 * S_PC_12
681494    +          +    -0.28943433543997 * S_PC_13  +       0.039416623543 * S_PC_14
681495    +          +     0.38042528163165 * S_PC_15  +     0.58727213716292 * S_PC_16
681496    +          +    -0.62894185015376 * S_PC_17  +    -0.45301915449406 * S_PC_2
681497    +          +     0.04877645916167 * S_PC_3  +    -0.26981835195451 * S_PC_4
681498    +          +    -0.13085816602216 * S_PC_5  +    -0.18793881101225 * S_PC_6
681499    +          +     0.18670477755191 * S_PC_7  +     0.10054352014255 * S_PC_8
681500    +          +     0.09310848306663 * S_PC_9  +    -0.06981710025305 *
681501    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39410399313223 * S_PC_1 + 0.24787065969983 * S_PC_10 + 
0.01252810266568 * S_PC_11 + 0.2112853368947 * S_PC_12 + -0.28943433543997 * S_PC_13 + 
0.039416623543 * S_PC_14 + 0.38042528163165 * S_PC_15 + 0.58727213716292 * S_PC_16 + 
-0.62894185015376 * S_PC_17 + -0.45301915449406 * S_PC_2 + 0.04877645916167 * S_PC_3 + 
-0.26981835195451 * S_PC_4 + -0.13085816602216 * S_PC_5 + -0.18793881101225 * S_PC_6 + 
0.18670477755191 * S_PC_7 + 0.10054352014255 * S_PC_8 + 0.09310848306663 * S_PC_9 + 
-0.06981710025305 * S_Year_Birth ;
681502    +   H13  =    -0.74618513684454 * S_PC_1  +    -0.09872426408083 * S_PC_10
681503    +          +    -0.23798160464408 * S_PC_11  +     0.04757319577054 * S_PC_12
681504    +          +    -0.37388357209966 * S_PC_13  +     0.84808088438719 * S_PC_14
681505    +          +    -0.05926306123652 * S_PC_15  +     0.18815097741352 * S_PC_16
681506    +          +     0.06905915680373 * S_PC_17  +    -1.08258627714779 * S_PC_2
681507    +          +    -0.40649973463746 * S_PC_3  +     0.42001548371963 * S_PC_4
681508    +          +     -0.1534389075544 * S_PC_5  +     0.18740639829009 * S_PC_6
681509    +          +    -0.04408545619191 * S_PC_7  +     0.36698801026128 * S_PC_8
681510    +          +    -0.07205131499531 * S_PC_9  +    -0.36825369917548 *
681511    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.74618513684454 * S_PC_1 + -0.09872426408083 * S_PC_10 + 
-0.23798160464408 * S_PC_11 + 0.04757319577054 * S_PC_12 + -0.37388357209966 * S_PC_13 + 
0.84808088438719 * S_PC_14 + -0.05926306123652 * S_PC_15 + 0.18815097741352 * S_PC_16 + 
0.06905915680373 * S_PC_17 + -1.08258627714779 * S_PC_2 + -0.40649973463746 * S_PC_3 + 
0.42001548371963 * S_PC_4 + -0.1534389075544 * S_PC_5 + 0.18740639829009 * S_PC_6 + 
-0.04408545619191 * S_PC_7 + 0.36698801026128 * S_PC_8 + -0.07205131499531 * S_PC_9 + 
-0.36825369917548 * S_Year_Birth ;
681512    +   H14  =     0.03862803097854 * S_PC_1  +     0.36123885865628 * S_PC_10
681513    +          +    -0.67560468649741 * S_PC_11  +    -0.69577537640908 * S_PC_12
681514    +          +     0.76281192398282 * S_PC_13  +     0.17769449989379 * S_PC_14
681515    +          +    -0.02693737417861 * S_PC_15  +    -0.10347641425241 * S_PC_16
681516    +          +     0.53814093155394 * S_PC_17  +     0.33997107384624 * S_PC_2
681517    +          +    -0.13802497891101 * S_PC_3  +     0.40245616650516 * S_PC_4
681518    +          +     0.48103095271792 * S_PC_5  +    -0.25102974356893 * S_PC_6
681519    +          +     0.33678040132276 * S_PC_7  +    -0.19457240527678 * S_PC_8
681520    +          +     -0.1781281379998 * S_PC_9  +    -0.01527450737168 *
681521    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03862803097854 * S_PC_1 + 0.36123885865628 * S_PC_10 + 
-0.67560468649741 * S_PC_11 + -0.69577537640908 * S_PC_12 + 0.76281192398282 * S_PC_13 + 
0.17769449989379 * S_PC_14 + -0.02693737417861 * S_PC_15 + -0.10347641425241 * S_PC_16 + 
0.53814093155394 * S_PC_17 + 0.33997107384624 * S_PC_2 + -0.13802497891101 * S_PC_3 + 
0.40245616650516 * S_PC_4 + 0.48103095271792 * S_PC_5 + -0.25102974356893 * S_PC_6 + 
0.33678040132276 * S_PC_7 + -0.19457240527678 * S_PC_8 + -0.1781281379998 * S_PC_9 + 
-0.01527450737168 * S_Year_Birth ;
681522    +   H15  =     0.88303191844461 * S_PC_1  +    -0.46238003710472 * S_PC_10
681523    +          +    -0.20085501521888 * S_PC_11  +    -0.70197238540328 * S_PC_12
681524    +          +    -0.14564265232718 * S_PC_13  +    -0.11158041083613 * S_PC_14
681525    +          +     0.02474516981163 * S_PC_15  +     0.03797715835251 * S_PC_16
681526    +          +     0.52678061960714 * S_PC_17  +    -0.48106600242342 * S_PC_2
681527    +          +      0.3976982347327 * S_PC_3  +     0.40547333642751 * S_PC_4
681528    +          +    -0.71062834957535 * S_PC_5  +    -0.15338067613858 * S_PC_6
681529    +          +    -0.49919762898936 * S_PC_7  +    -0.42650670881449 * S_PC_8
681530    +          +     0.48631507078449 * S_PC_9  +      0.0497794049348 *
681531    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.88303191844461 * S_PC_1 + -0.46238003710472 * S_PC_10 + 
-0.20085501521888 * S_PC_11 + -0.70197238540328 * S_PC_12 + -0.14564265232718 * S_PC_13 + 
-0.11158041083613 * S_PC_14 + 0.02474516981163 * S_PC_15 + 0.03797715835251 * S_PC_16 + 
0.52678061960714 * S_PC_17 + -0.48106600242342 * S_PC_2 + 0.3976982347327 * S_PC_3 + 
0.40547333642751 * S_PC_4 + -0.71062834957535 * S_PC_5 + -0.15338067613858 * S_PC_6 + 
-0.49919762898936 * S_PC_7 + -0.42650670881449 * S_PC_8 + 0.48631507078449 * S_PC_9 + 
0.0497794049348 * S_Year_Birth ;
681532    +   H16  =     0.70691086447732 * S_PC_1  +    -0.47946522460485 * S_PC_10
681533    +          +    -0.71026241368882 * S_PC_11  +    -0.29297239152668 * S_PC_12
681534    +          +     0.03684601929927 * S_PC_13  +    -0.19380463617056 * S_PC_14
681535    +          +     0.06034168116607 * S_PC_15  +     0.02617203331832 * S_PC_16
681536    +          +     0.08436353742259 * S_PC_17  +     0.25125330241669 * S_PC_2
681537    +          +     0.67024506325126 * S_PC_3  +     -0.4104513299531 * S_PC_4
681538    +          +     0.01439811017846 * S_PC_5  +      0.1353699477934 * S_PC_6
681539    +          +    -0.13772050569005 * S_PC_7  +     0.65217587480338 * S_PC_8
681540    +          +     0.59972905640062 * S_PC_9  +    -0.23864759601162 *
681541    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.70691086447732 * S_PC_1 + -0.47946522460485 * S_PC_10 + 
-0.71026241368882 * S_PC_11 + -0.29297239152668 * S_PC_12 + 0.03684601929927 * S_PC_13 + 
-0.19380463617056 * S_PC_14 + 0.06034168116607 * S_PC_15 + 0.02617203331832 * S_PC_16 + 
0.08436353742259 * S_PC_17 + 0.25125330241669 * S_PC_2 + 0.67024506325126 * S_PC_3 + 
-0.4104513299531 * S_PC_4 + 0.01439811017846 * S_PC_5 + 0.1353699477934 * S_PC_6 + 
-0.13772050569005 * S_PC_7 + 0.65217587480338 * S_PC_8 + 0.59972905640062 * S_PC_9 + 
-0.23864759601162 * S_Year_Birth ;
681542    +   H11  =    -0.96473164506576 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96473164506576 + H11 ;
681543    +   H12  =     0.98279255842783 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98279255842783 + H12 ;
681544    +   H13  =    -1.66611685085053 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66611685085053 + H13 ;
681545    +   H14  =    -1.58832310532425 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58832310532425 + H14 ;
681546    +   H15  =    -1.47322442289085 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.47322442289085 + H15 ;
681547    +   H16  =    -1.98186768764291 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.98186768764291 + H16 ;
681548    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
681549    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
681550    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
681551    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
681552    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
681553    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
681554    +END;
MPRINT(EM_DIAGRAM):   END;
681555    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681556    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
681557    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
681558    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
681559    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
681560    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
681561    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
681562    +END;
MPRINT(EM_DIAGRAM):   END;
681563    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681564    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
681565    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681566    +
681567    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
681568    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
681569    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681570    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
681571    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
681572    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
681573    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
681574    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681575    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681576    +end;
MPRINT(EM_DIAGRAM):   end;
681577    +else do;
MPRINT(EM_DIAGRAM):   else do;
681578    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
681579    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
681580    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
681581    +   end;
MPRINT(EM_DIAGRAM):   end;
681582    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
681583    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
681584    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
681585    +   end;
MPRINT(EM_DIAGRAM):   end;
681586    +   else do;
MPRINT(EM_DIAGRAM):   else do;
681587    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681588    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681589    +   end;
MPRINT(EM_DIAGRAM):   end;
681590    +end;
MPRINT(EM_DIAGRAM):   end;
681591    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681592    +   P_DepVar1  =     2.40220964164359 * H11  +     0.57143659221088 * H12
681593    +          +     1.33946010617365 * H13  +    -1.50955086610503 * H14
681594    +          +     1.52090527627884 * H15  +     1.78582940995754 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.40220964164359 * H11 + 0.57143659221088 * H12 + 
1.33946010617365 * H13 + -1.50955086610503 * H14 + 1.52090527627884 * H15 + 1.78582940995754 * 
H16 ;
681595    +   P_DepVar1  =    -0.73688900091284 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73688900091284 + P_DepVar1 ;
681596    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
681597    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
681598    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
681599    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
681600    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
681601    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
681602    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
681603    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
681604    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
681605    +END;
MPRINT(EM_DIAGRAM):   END;
681606    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681607    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
681608    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
681609    +END;
MPRINT(EM_DIAGRAM):   END;
681610    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
681611    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
681612    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
681613    +END;
MPRINT(EM_DIAGRAM):   END;
681614    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
681615    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
681616    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
681617    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
681618    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
681619    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
681620    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
681621    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681622    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
681623    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681624    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
681625    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
681626    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
681627    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
681628    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
681629    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
681630    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
681631    +END;
MPRINT(EM_DIAGRAM):   END;
681632    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681633    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
681634    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681635    +drop
681636    +H11
681637    +H12
681638    +H13
681639    +H14
681640    +H15
681641    +H16
681642    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
681643    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
681644     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
681645     quit;
681646     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
681647     filename emflow
681647   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681648     *------------------------------------------------------------*;
681649     * Neural17: Scoring VALIDATE data;
681650     *------------------------------------------------------------*;
681651     data EMWS8.Neural17_VALIDATE
681652     / view=EMWS8.Neural17_VALIDATE
681653     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_VALIDATE / view=EMWS8.Neural17_VALIDATE ;
681654     set EMWS8.PRINCOMP_VALIDATE
681655     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
681656     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
681657    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681658    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
681659    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681660    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
681661    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
681662    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
681663    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
681664    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
681665    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
681666    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
681667    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
681668    +LENGTH _WARN_ $4
681669    +      F_DepVar  $ 12
681670    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
681671    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
681672    +
681673    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
681674    +
681675    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
681676    +
681677    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
681678    +
681679    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
681680    +
681681    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
681682    +
681683    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
681684    +
681685    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
681686    +
681687    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
681688    +
681689    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
681690    +
681691    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
681692    +
681693    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
681694    +
681695    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
681696    +
681697    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
681698    +
681699    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
681700    +
681701    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
681702    +
681703    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
681704    +
681705    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
681706    +
681707    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
681708    +
681709    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
681710    +
681711    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
681712    +
681713    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
681714    +
681715    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
681716    +
681717    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
681718    +
681719    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
681720    +
681721    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681722    +
681723    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
681724    +
681725    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
681726    +
681727    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
681728    +
681729    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
681730    +
681731    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
681732    +
681733    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
681734    +
681735    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681736    +*** Checking missing input Interval
681737    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
681738    +
681739    +IF NMISS(
681740    +   PC_1 ,
681741    +   PC_10 ,
681742    +   PC_11 ,
681743    +   PC_12 ,
681744    +   PC_13 ,
681745    +   PC_14 ,
681746    +   PC_15 ,
681747    +   PC_16 ,
681748    +   PC_17 ,
681749    +   PC_2 ,
681750    +   PC_3 ,
681751    +   PC_4 ,
681752    +   PC_5 ,
681753    +   PC_6 ,
681754    +   PC_7 ,
681755    +   PC_8 ,
681756    +   PC_9 ,
681757    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
681758    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
681759    +
681760    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
681761    +END;
MPRINT(EM_DIAGRAM):   END;
681762    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681763    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
681764    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681765    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681766    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
681767    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
681768    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
681769    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
681770    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
681771    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
681772    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
681773    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
681774    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
681775    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
681776    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
681777    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
681778    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
681779    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
681780    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
681781    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
681782    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
681783    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681784    +END;
MPRINT(EM_DIAGRAM):   END;
681785    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681786    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
681787    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
681788    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
681789    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
681790    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
681791    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
681792    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
681793    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
681794    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
681795    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
681796    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
681797    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
681798    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
681799    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
681800    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
681801    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
681802    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
681803    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
681804    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
681805    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
681806    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
681807    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
681808    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
681809    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
681810    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
681811    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
681812    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
681813    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
681814    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
681815    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
681816    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
681817    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
681818    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
681819    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
681820    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
681821    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
681822    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681823    +END;
MPRINT(EM_DIAGRAM):   END;
681824    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681825    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
681826    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681827    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681828    +   H11  =      0.4640556659307 * S_PC_1  +    -0.33462522014566 * S_PC_10
681829    +          +     0.56806418894822 * S_PC_11  +     0.47755179162972 * S_PC_12
681830    +          +    -1.05081910003147 * S_PC_13  +     0.51924824879327 * S_PC_14
681831    +          +    -0.40498769195755 * S_PC_15  +     0.12870488597274 * S_PC_16
681832    +          +    -0.18386984954493 * S_PC_17  +     -0.2086299332252 * S_PC_2
681833    +          +    -0.50252958940538 * S_PC_3  +     0.15534767510019 * S_PC_4
681834    +          +    -0.06309817063591 * S_PC_5  +     0.11574559455719 * S_PC_6
681835    +          +     0.32449679316348 * S_PC_7  +     0.30800540848273 * S_PC_8
681836    +          +     0.27935517346427 * S_PC_9  +     0.37069240076102 *
681837    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4640556659307 * S_PC_1 + -0.33462522014566 * S_PC_10 + 
0.56806418894822 * S_PC_11 + 0.47755179162972 * S_PC_12 + -1.05081910003147 * S_PC_13 + 
0.51924824879327 * S_PC_14 + -0.40498769195755 * S_PC_15 + 0.12870488597274 * S_PC_16 + 
-0.18386984954493 * S_PC_17 + -0.2086299332252 * S_PC_2 + -0.50252958940538 * S_PC_3 + 
0.15534767510019 * S_PC_4 + -0.06309817063591 * S_PC_5 + 0.11574559455719 * S_PC_6 + 
0.32449679316348 * S_PC_7 + 0.30800540848273 * S_PC_8 + 0.27935517346427 * S_PC_9 + 
0.37069240076102 * S_Year_Birth ;
681838    +   H12  =     0.39410399313223 * S_PC_1  +     0.24787065969983 * S_PC_10
681839    +          +     0.01252810266568 * S_PC_11  +      0.2112853368947 * S_PC_12
681840    +          +    -0.28943433543997 * S_PC_13  +       0.039416623543 * S_PC_14
681841    +          +     0.38042528163165 * S_PC_15  +     0.58727213716292 * S_PC_16
681842    +          +    -0.62894185015376 * S_PC_17  +    -0.45301915449406 * S_PC_2
681843    +          +     0.04877645916167 * S_PC_3  +    -0.26981835195451 * S_PC_4
681844    +          +    -0.13085816602216 * S_PC_5  +    -0.18793881101225 * S_PC_6
681845    +          +     0.18670477755191 * S_PC_7  +     0.10054352014255 * S_PC_8
681846    +          +     0.09310848306663 * S_PC_9  +    -0.06981710025305 *
681847    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39410399313223 * S_PC_1 + 0.24787065969983 * S_PC_10 + 
0.01252810266568 * S_PC_11 + 0.2112853368947 * S_PC_12 + -0.28943433543997 * S_PC_13 + 
0.039416623543 * S_PC_14 + 0.38042528163165 * S_PC_15 + 0.58727213716292 * S_PC_16 + 
-0.62894185015376 * S_PC_17 + -0.45301915449406 * S_PC_2 + 0.04877645916167 * S_PC_3 + 
-0.26981835195451 * S_PC_4 + -0.13085816602216 * S_PC_5 + -0.18793881101225 * S_PC_6 + 
0.18670477755191 * S_PC_7 + 0.10054352014255 * S_PC_8 + 0.09310848306663 * S_PC_9 + 
-0.06981710025305 * S_Year_Birth ;
681848    +   H13  =    -0.74618513684454 * S_PC_1  +    -0.09872426408083 * S_PC_10
681849    +          +    -0.23798160464408 * S_PC_11  +     0.04757319577054 * S_PC_12
681850    +          +    -0.37388357209966 * S_PC_13  +     0.84808088438719 * S_PC_14
681851    +          +    -0.05926306123652 * S_PC_15  +     0.18815097741352 * S_PC_16
681852    +          +     0.06905915680373 * S_PC_17  +    -1.08258627714779 * S_PC_2
681853    +          +    -0.40649973463746 * S_PC_3  +     0.42001548371963 * S_PC_4
681854    +          +     -0.1534389075544 * S_PC_5  +     0.18740639829009 * S_PC_6
681855    +          +    -0.04408545619191 * S_PC_7  +     0.36698801026128 * S_PC_8
681856    +          +    -0.07205131499531 * S_PC_9  +    -0.36825369917548 *
681857    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.74618513684454 * S_PC_1 + -0.09872426408083 * S_PC_10 + 
-0.23798160464408 * S_PC_11 + 0.04757319577054 * S_PC_12 + -0.37388357209966 * S_PC_13 + 
0.84808088438719 * S_PC_14 + -0.05926306123652 * S_PC_15 + 0.18815097741352 * S_PC_16 + 
0.06905915680373 * S_PC_17 + -1.08258627714779 * S_PC_2 + -0.40649973463746 * S_PC_3 + 
0.42001548371963 * S_PC_4 + -0.1534389075544 * S_PC_5 + 0.18740639829009 * S_PC_6 + 
-0.04408545619191 * S_PC_7 + 0.36698801026128 * S_PC_8 + -0.07205131499531 * S_PC_9 + 
-0.36825369917548 * S_Year_Birth ;
681858    +   H14  =     0.03862803097854 * S_PC_1  +     0.36123885865628 * S_PC_10
681859    +          +    -0.67560468649741 * S_PC_11  +    -0.69577537640908 * S_PC_12
681860    +          +     0.76281192398282 * S_PC_13  +     0.17769449989379 * S_PC_14
681861    +          +    -0.02693737417861 * S_PC_15  +    -0.10347641425241 * S_PC_16
681862    +          +     0.53814093155394 * S_PC_17  +     0.33997107384624 * S_PC_2
681863    +          +    -0.13802497891101 * S_PC_3  +     0.40245616650516 * S_PC_4
681864    +          +     0.48103095271792 * S_PC_5  +    -0.25102974356893 * S_PC_6
681865    +          +     0.33678040132276 * S_PC_7  +    -0.19457240527678 * S_PC_8
681866    +          +     -0.1781281379998 * S_PC_9  +    -0.01527450737168 *
681867    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03862803097854 * S_PC_1 + 0.36123885865628 * S_PC_10 + 
-0.67560468649741 * S_PC_11 + -0.69577537640908 * S_PC_12 + 0.76281192398282 * S_PC_13 + 
0.17769449989379 * S_PC_14 + -0.02693737417861 * S_PC_15 + -0.10347641425241 * S_PC_16 + 
0.53814093155394 * S_PC_17 + 0.33997107384624 * S_PC_2 + -0.13802497891101 * S_PC_3 + 
0.40245616650516 * S_PC_4 + 0.48103095271792 * S_PC_5 + -0.25102974356893 * S_PC_6 + 
0.33678040132276 * S_PC_7 + -0.19457240527678 * S_PC_8 + -0.1781281379998 * S_PC_9 + 
-0.01527450737168 * S_Year_Birth ;
681868    +   H15  =     0.88303191844461 * S_PC_1  +    -0.46238003710472 * S_PC_10
681869    +          +    -0.20085501521888 * S_PC_11  +    -0.70197238540328 * S_PC_12
681870    +          +    -0.14564265232718 * S_PC_13  +    -0.11158041083613 * S_PC_14
681871    +          +     0.02474516981163 * S_PC_15  +     0.03797715835251 * S_PC_16
681872    +          +     0.52678061960714 * S_PC_17  +    -0.48106600242342 * S_PC_2
681873    +          +      0.3976982347327 * S_PC_3  +     0.40547333642751 * S_PC_4
681874    +          +    -0.71062834957535 * S_PC_5  +    -0.15338067613858 * S_PC_6
681875    +          +    -0.49919762898936 * S_PC_7  +    -0.42650670881449 * S_PC_8
681876    +          +     0.48631507078449 * S_PC_9  +      0.0497794049348 *
681877    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.88303191844461 * S_PC_1 + -0.46238003710472 * S_PC_10 + 
-0.20085501521888 * S_PC_11 + -0.70197238540328 * S_PC_12 + -0.14564265232718 * S_PC_13 + 
-0.11158041083613 * S_PC_14 + 0.02474516981163 * S_PC_15 + 0.03797715835251 * S_PC_16 + 
0.52678061960714 * S_PC_17 + -0.48106600242342 * S_PC_2 + 0.3976982347327 * S_PC_3 + 
0.40547333642751 * S_PC_4 + -0.71062834957535 * S_PC_5 + -0.15338067613858 * S_PC_6 + 
-0.49919762898936 * S_PC_7 + -0.42650670881449 * S_PC_8 + 0.48631507078449 * S_PC_9 + 
0.0497794049348 * S_Year_Birth ;
681878    +   H16  =     0.70691086447732 * S_PC_1  +    -0.47946522460485 * S_PC_10
681879    +          +    -0.71026241368882 * S_PC_11  +    -0.29297239152668 * S_PC_12
681880    +          +     0.03684601929927 * S_PC_13  +    -0.19380463617056 * S_PC_14
681881    +          +     0.06034168116607 * S_PC_15  +     0.02617203331832 * S_PC_16
681882    +          +     0.08436353742259 * S_PC_17  +     0.25125330241669 * S_PC_2
681883    +          +     0.67024506325126 * S_PC_3  +     -0.4104513299531 * S_PC_4
681884    +          +     0.01439811017846 * S_PC_5  +      0.1353699477934 * S_PC_6
681885    +          +    -0.13772050569005 * S_PC_7  +     0.65217587480338 * S_PC_8
681886    +          +     0.59972905640062 * S_PC_9  +    -0.23864759601162 *
681887    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.70691086447732 * S_PC_1 + -0.47946522460485 * S_PC_10 + 
-0.71026241368882 * S_PC_11 + -0.29297239152668 * S_PC_12 + 0.03684601929927 * S_PC_13 + 
-0.19380463617056 * S_PC_14 + 0.06034168116607 * S_PC_15 + 0.02617203331832 * S_PC_16 + 
0.08436353742259 * S_PC_17 + 0.25125330241669 * S_PC_2 + 0.67024506325126 * S_PC_3 + 
-0.4104513299531 * S_PC_4 + 0.01439811017846 * S_PC_5 + 0.1353699477934 * S_PC_6 + 
-0.13772050569005 * S_PC_7 + 0.65217587480338 * S_PC_8 + 0.59972905640062 * S_PC_9 + 
-0.23864759601162 * S_Year_Birth ;
681888    +   H11  =    -0.96473164506576 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96473164506576 + H11 ;
681889    +   H12  =     0.98279255842783 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98279255842783 + H12 ;
681890    +   H13  =    -1.66611685085053 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66611685085053 + H13 ;
681891    +   H14  =    -1.58832310532425 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58832310532425 + H14 ;
681892    +   H15  =    -1.47322442289085 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.47322442289085 + H15 ;
681893    +   H16  =    -1.98186768764291 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.98186768764291 + H16 ;
681894    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
681895    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
681896    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
681897    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
681898    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
681899    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
681900    +END;
MPRINT(EM_DIAGRAM):   END;
681901    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681902    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
681903    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
681904    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
681905    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
681906    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
681907    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
681908    +END;
MPRINT(EM_DIAGRAM):   END;
681909    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681910    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
681911    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681912    +
681913    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
681914    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
681915    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681916    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
681917    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
681918    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
681919    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
681920    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681921    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681922    +end;
MPRINT(EM_DIAGRAM):   end;
681923    +else do;
MPRINT(EM_DIAGRAM):   else do;
681924    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
681925    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
681926    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
681927    +   end;
MPRINT(EM_DIAGRAM):   end;
681928    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
681929    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
681930    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
681931    +   end;
MPRINT(EM_DIAGRAM):   end;
681932    +   else do;
MPRINT(EM_DIAGRAM):   else do;
681933    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681934    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681935    +   end;
MPRINT(EM_DIAGRAM):   end;
681936    +end;
MPRINT(EM_DIAGRAM):   end;
681937    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681938    +   P_DepVar1  =     2.40220964164359 * H11  +     0.57143659221088 * H12
681939    +          +     1.33946010617365 * H13  +    -1.50955086610503 * H14
681940    +          +     1.52090527627884 * H15  +     1.78582940995754 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.40220964164359 * H11 + 0.57143659221088 * H12 + 
1.33946010617365 * H13 + -1.50955086610503 * H14 + 1.52090527627884 * H15 + 1.78582940995754 * 
H16 ;
681941    +   P_DepVar1  =    -0.73688900091284 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73688900091284 + P_DepVar1 ;
681942    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
681943    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
681944    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
681945    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
681946    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
681947    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
681948    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
681949    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
681950    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
681951    +END;
MPRINT(EM_DIAGRAM):   END;
681952    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681953    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
681954    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
681955    +END;
MPRINT(EM_DIAGRAM):   END;
681956    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
681957    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
681958    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
681959    +END;
MPRINT(EM_DIAGRAM):   END;
681960    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
681961    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
681962    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
681963    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
681964    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
681965    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
681966    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
681967    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681968    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
681969    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681970    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
681971    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
681972    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
681973    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
681974    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
681975    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
681976    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
681977    +END;
MPRINT(EM_DIAGRAM):   END;
681978    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681979    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
681980    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681981    +drop
681982    +H11
681983    +H12
681984    +H13
681985    +H14
681986    +H15
681987    +H16
681988    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
681989    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
681990     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
681991     quit;
681992     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
681993     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
681994     * Neural17: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural17: Computing metadata for TRAIN data;
681995     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural17_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural17_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural17_TRAIN out=WORK.M0N9V5VS noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N9V5VS;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N9V5VS(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N9V5VS;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N9V5VS;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1QVC3TA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M269I3KI(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QVC3TA;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural17";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural17";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
682307     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
682308     set EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO;
682309     where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
682310     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL17_EMINFO.
      WHERE (DATA='Neural17') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682311     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural17_EMINFO;
682312     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
682313     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
682314     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
682318     run;
682319     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
682320     set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
682321     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682322     proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
682323     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682324     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682325     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
682326     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682327     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

682328     proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
682329     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682330     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682331     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
682332     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
682333     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682334     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682335     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
682336     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
682337     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
682338     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL17_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
