MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.30 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                12.30 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_S3W6N 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_S3W6N new;
MPRINT(EM_DIAGRAM):   run;
659019     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
659020     set EMWS8.Neural17_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_OUTKEY;
659021     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
659022     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.NEURAL17_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

659023     filename emflow
659023   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
659024     *------------------------------------------------------------*;
659025     * Neural17: Scoring DATA data;
659026     *------------------------------------------------------------*;
659027     data EMWS8.Neural17_TRAIN
659028     / view=EMWS8.Neural17_TRAIN
659029     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_TRAIN / view=EMWS8.Neural17_TRAIN ;
659030     set EMWS8.PRINCOMP_TRAIN
659031     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
659032     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
659033    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659034    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
659035    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659036    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
659037    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
659038    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
659039    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
659040    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
659041    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
659042    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
659043    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
659044    +LENGTH _WARN_ $4
659045    +      F_DepVar  $ 12
659046    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
659047    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
659048    +
659049    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
659050    +
659051    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
659052    +
659053    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
659054    +
659055    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
659056    +
659057    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
The SAS System

659058    +
659059    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
659060    +
659061    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
659062    +
659063    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
659064    +
659065    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
659066    +
659067    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
659068    +
659069    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
659070    +
659071    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
659072    +
659073    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
659074    +
659075    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
659076    +
659077    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
659078    +
659079    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
659080    +
659081    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
659082    +
659083    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
659084    +
659085    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
659086    +
659087    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
659088    +
659089    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
659090    +
659091    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
659092    +
659093    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
659094    +
659095    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
659096    +
659097    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659098    +
659099    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
659100    +
659101    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
659102    +
659103    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
659104    +
659105    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
659106    +
659107    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
659108    +
659109    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
659110    +
659111    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659112    +*** Checking missing input Interval
659113    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
659114    +
659115    +IF NMISS(
659116    +   PC_1 ,
659117    +   PC_10 ,
659118    +   PC_11 ,
659119    +   PC_12 ,
659120    +   PC_13 ,
659121    +   PC_14 ,
659122    +   PC_15 ,
659123    +   PC_16 ,
659124    +   PC_17 ,
659125    +   PC_2 ,
659126    +   PC_3 ,
659127    +   PC_4 ,
659128    +   PC_5 ,
659129    +   PC_6 ,
659130    +   PC_7 ,
659131    +   PC_8 ,
659132    +   PC_9 ,
659133    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
659134    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
659135    +
659136    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
659137    +END;
MPRINT(EM_DIAGRAM):   END;
659138    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659139    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
659140    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659141    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659142    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659143    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659144    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659145    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659146    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659147    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659148    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659149    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659150    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659151    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659152    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659153    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659154    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659155    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659156    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659157    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659158    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659159    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659160    +END;
MPRINT(EM_DIAGRAM):   END;
659161    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659162    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
659163    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659164    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
659165    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659166    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
659167    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659168    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
659169    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659170    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
659171    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659172    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
659173    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659174    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
659175    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659176    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
659177    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659178    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
659179    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659180    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
659181    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659182    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
659183    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659184    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
659185    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659186    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
659187    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659188    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
659189    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659190    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
659191    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659192    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
659193    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659194    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
659195    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659196    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
659197    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
659198    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659199    +END;
MPRINT(EM_DIAGRAM):   END;
659200    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659201    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
659202    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659203    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659204    +   H11  =      0.4572037399939 * S_PC_1  +    -0.33924067655378 * S_PC_10
659205    +          +     0.57141385115112 * S_PC_11  +     0.48487316549189 * S_PC_12
659206    +          +    -1.05031657956537 * S_PC_13  +         0.5266100628 * S_PC_14
659207    +          +    -0.40664215599546 * S_PC_15  +     0.12584985353518 * S_PC_16
659208    +          +    -0.18726079041205 * S_PC_17  +    -0.21051549627173 * S_PC_2
659209    +          +    -0.50083883209613 * S_PC_3  +     0.15037036519111 * S_PC_4
659210    +          +    -0.06091340223564 * S_PC_5  +     0.12052144993899 * S_PC_6
659211    +          +       0.332356321128 * S_PC_7  +     0.31706599410802 * S_PC_8
659212    +          +     0.27650701530647 * S_PC_9  +     0.36756441254936 *
659213    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4572037399939 * S_PC_1 + -0.33924067655378 * S_PC_10 + 
0.57141385115112 * S_PC_11 + 0.48487316549189 * S_PC_12 + -1.05031657956537 * S_PC_13 + 
0.5266100628 * S_PC_14 + -0.40664215599546 * S_PC_15 + 0.12584985353518 * S_PC_16 + 
-0.18726079041205 * S_PC_17 + -0.21051549627173 * S_PC_2 + -0.50083883209613 * S_PC_3 + 
0.15037036519111 * S_PC_4 + -0.06091340223564 * S_PC_5 + 0.12052144993899 * S_PC_6 + 
0.332356321128 * S_PC_7 + 0.31706599410802 * S_PC_8 + 0.27650701530647 * S_PC_9 + 
0.36756441254936 * S_Year_Birth ;
659214    +   H12  =     0.39344846914742 * S_PC_1  +     0.23972559280802 * S_PC_10
659215    +          +     0.01471125669581 * S_PC_11  +     0.20856923684903 * S_PC_12
659216    +          +    -0.29177209177854 * S_PC_13  +     0.03707095215892 * S_PC_14
659217    +          +     0.38334701775474 * S_PC_15  +      0.5863505707375 * S_PC_16
659218    +          +    -0.62562899968641 * S_PC_17  +    -0.44298666943655 * S_PC_2
659219    +          +        0.04346878824 * S_PC_3  +     -0.2694267850657 * S_PC_4
659220    +          +    -0.12543247097847 * S_PC_5  +     -0.1896504822101 * S_PC_6
659221    +          +     0.18228845542316 * S_PC_7  +     0.09948287582483 * S_PC_8
659222    +          +     0.08527418828587 * S_PC_9  +    -0.07133810194976 *
659223    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39344846914742 * S_PC_1 + 0.23972559280802 * S_PC_10 + 
0.01471125669581 * S_PC_11 + 0.20856923684903 * S_PC_12 + -0.29177209177854 * S_PC_13 + 
0.03707095215892 * S_PC_14 + 0.38334701775474 * S_PC_15 + 0.5863505707375 * S_PC_16 + 
-0.62562899968641 * S_PC_17 + -0.44298666943655 * S_PC_2 + 0.04346878824 * S_PC_3 + 
-0.2694267850657 * S_PC_4 + -0.12543247097847 * S_PC_5 + -0.1896504822101 * S_PC_6 + 
0.18228845542316 * S_PC_7 + 0.09948287582483 * S_PC_8 + 0.08527418828587 * S_PC_9 + 
-0.07133810194976 * S_Year_Birth ;
659224    +   H13  =    -0.73548355547467 * S_PC_1  +    -0.10402810694097 * S_PC_10
659225    +          +    -0.23530243081797 * S_PC_11  +     0.05157777911367 * S_PC_12
659226    +          +    -0.37308967195093 * S_PC_13  +     0.84460260270185 * S_PC_14
659227    +          +    -0.06322469233111 * S_PC_15  +     0.19066414060707 * S_PC_16
659228    +          +     0.06331857444725 * S_PC_17  +    -1.07880141314119 * S_PC_2
659229    +          +    -0.40445464921802 * S_PC_3  +     0.42151508961402 * S_PC_4
659230    +          +    -0.15204543817335 * S_PC_5  +     0.18602427623316 * S_PC_6
659231    +          +    -0.04709706814842 * S_PC_7  +     0.36586874220739 * S_PC_8
659232    +          +    -0.06991289454926 * S_PC_9  +    -0.36834643959125 *
659233    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.73548355547467 * S_PC_1 + -0.10402810694097 * S_PC_10 + 
-0.23530243081797 * S_PC_11 + 0.05157777911367 * S_PC_12 + -0.37308967195093 * S_PC_13 + 
0.84460260270185 * S_PC_14 + -0.06322469233111 * S_PC_15 + 0.19066414060707 * S_PC_16 + 
0.06331857444725 * S_PC_17 + -1.07880141314119 * S_PC_2 + -0.40445464921802 * S_PC_3 + 
0.42151508961402 * S_PC_4 + -0.15204543817335 * S_PC_5 + 0.18602427623316 * S_PC_6 + 
-0.04709706814842 * S_PC_7 + 0.36586874220739 * S_PC_8 + -0.06991289454926 * S_PC_9 + 
-0.36834643959125 * S_Year_Birth ;
659234    +   H14  =     0.03645017761422 * S_PC_1  +     0.35836366205085 * S_PC_10
659235    +          +    -0.67037688965042 * S_PC_11  +    -0.69506985454419 * S_PC_12
659236    +          +     0.75476319829716 * S_PC_13  +     0.17842794890744 * S_PC_14
659237    +          +    -0.02555345712531 * S_PC_15  +    -0.09809436799607 * S_PC_16
659238    +          +     0.53989601368165 * S_PC_17  +     0.34066718426356 * S_PC_2
659239    +          +    -0.13975214313923 * S_PC_3  +     0.39764818364136 * S_PC_4
659240    +          +     0.48005328630412 * S_PC_5  +    -0.24963672499963 * S_PC_6
659241    +          +     0.33581189577795 * S_PC_7  +    -0.20453271114584 * S_PC_8
659242    +          +    -0.18026723512126 * S_PC_9  +    -0.01794612569398 *
659243    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03645017761422 * S_PC_1 + 0.35836366205085 * S_PC_10 + 
-0.67037688965042 * S_PC_11 + -0.69506985454419 * S_PC_12 + 0.75476319829716 * S_PC_13 + 
0.17842794890744 * S_PC_14 + -0.02555345712531 * S_PC_15 + -0.09809436799607 * S_PC_16 + 
0.53989601368165 * S_PC_17 + 0.34066718426356 * S_PC_2 + -0.13975214313923 * S_PC_3 + 
0.39764818364136 * S_PC_4 + 0.48005328630412 * S_PC_5 + -0.24963672499963 * S_PC_6 + 
0.33581189577795 * S_PC_7 + -0.20453271114584 * S_PC_8 + -0.18026723512126 * S_PC_9 + 
-0.01794612569398 * S_Year_Birth ;
659244    +   H15  =     0.87819286617219 * S_PC_1  +    -0.45680333333833 * S_PC_10
659245    +          +    -0.19222569004196 * S_PC_11  +    -0.69150047873875 * S_PC_12
659246    +          +    -0.15732640647119 * S_PC_13  +     -0.1113321891333 * S_PC_14
659247    +          +     0.02739308651489 * S_PC_15  +     0.03470872151577 * S_PC_16
659248    +          +     0.52347238904566 * S_PC_17  +    -0.48104910756428 * S_PC_2
659249    +          +     0.39717000994127 * S_PC_3  +     0.40508698052766 * S_PC_4
659250    +          +    -0.70416241168868 * S_PC_5  +    -0.15695961262575 * S_PC_6
659251    +          +    -0.50463412391796 * S_PC_7  +    -0.42242933925107 * S_PC_8
659252    +          +     0.48601170602465 * S_PC_9  +     0.05218649760104 *
659253    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.87819286617219 * S_PC_1 + -0.45680333333833 * S_PC_10 + 
-0.19222569004196 * S_PC_11 + -0.69150047873875 * S_PC_12 + -0.15732640647119 * S_PC_13 + 
-0.1113321891333 * S_PC_14 + 0.02739308651489 * S_PC_15 + 0.03470872151577 * S_PC_16 + 
0.52347238904566 * S_PC_17 + -0.48104910756428 * S_PC_2 + 0.39717000994127 * S_PC_3 + 
0.40508698052766 * S_PC_4 + -0.70416241168868 * S_PC_5 + -0.15695961262575 * S_PC_6 + 
-0.50463412391796 * S_PC_7 + -0.42242933925107 * S_PC_8 + 0.48601170602465 * S_PC_9 + 
0.05218649760104 * S_Year_Birth ;
659254    +   H16  =     0.71314442719152 * S_PC_1  +    -0.48254803601996 * S_PC_10
659255    +          +     -0.7055040284859 * S_PC_11  +    -0.28771421134443 * S_PC_12
659256    +          +     0.03904298770718 * S_PC_13  +    -0.19570881459626 * S_PC_14
659257    +          +     0.06318106643827 * S_PC_15  +     0.02221515221124 * S_PC_16
659258    +          +     0.08250149766469 * S_PC_17  +     0.24785323093961 * S_PC_2
659259    +          +     0.67272562474514 * S_PC_3  +    -0.40883740914753 * S_PC_4
659260    +          +     0.01526133771642 * S_PC_5  +     0.13815654365502 * S_PC_6
659261    +          +    -0.13763305233903 * S_PC_7  +     0.65046077839767 * S_PC_8
659262    +          +     0.59590047615822 * S_PC_9  +    -0.23180740400042 *
659263    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.71314442719152 * S_PC_1 + -0.48254803601996 * S_PC_10 + 
-0.7055040284859 * S_PC_11 + -0.28771421134443 * S_PC_12 + 0.03904298770718 * S_PC_13 + 
-0.19570881459626 * S_PC_14 + 0.06318106643827 * S_PC_15 + 0.02221515221124 * S_PC_16 + 
0.08250149766469 * S_PC_17 + 0.24785323093961 * S_PC_2 + 0.67272562474514 * S_PC_3 + 
-0.40883740914753 * S_PC_4 + 0.01526133771642 * S_PC_5 + 0.13815654365502 * S_PC_6 + 
-0.13763305233903 * S_PC_7 + 0.65046077839767 * S_PC_8 + 0.59590047615822 * S_PC_9 + 
-0.23180740400042 * S_Year_Birth ;
659264    +   H11  =    -0.96567698220965 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96567698220965 + H11 ;
659265    +   H12  =     0.98497546600771 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98497546600771 + H12 ;
659266    +   H13  =    -1.66780990072659 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66780990072659 + H13 ;
659267    +   H14  =    -1.58958109115035 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58958109115035 + H14 ;
659268    +   H15  =     -1.4698438300852 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.4698438300852 + H15 ;
659269    +   H16  =    -1.96875059181844 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.96875059181844 + H16 ;
659270    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
659271    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
659272    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
659273    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
659274    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
659275    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
659276    +END;
MPRINT(EM_DIAGRAM):   END;
659277    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659278    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
659279    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
659280    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
659281    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
659282    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
659283    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
659284    +END;
MPRINT(EM_DIAGRAM):   END;
659285    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659286    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
659287    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659288    +
659289    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
659290    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
659291    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659292    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
659293    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
659294    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
659295    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
659296    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659297    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659298    +end;
MPRINT(EM_DIAGRAM):   end;
659299    +else do;
MPRINT(EM_DIAGRAM):   else do;
659300    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
659301    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
659302    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
659303    +   end;
MPRINT(EM_DIAGRAM):   end;
659304    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
659305    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
659306    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
659307    +   end;
MPRINT(EM_DIAGRAM):   end;
659308    +   else do;
MPRINT(EM_DIAGRAM):   else do;
659309    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659310    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659311    +   end;
MPRINT(EM_DIAGRAM):   end;
659312    +end;
MPRINT(EM_DIAGRAM):   end;
659313    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659314    +   P_DepVar1  =     2.39531584340828 * H11  +      0.5615033898018 * H12
659315    +          +     1.33226164827793 * H13  +    -1.50665895392278 * H14
659316    +          +     1.50663887827851 * H15  +      1.7690093184365 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.39531584340828 * H11 + 0.5615033898018 * H12 + 
1.33226164827793 * H13 + -1.50665895392278 * H14 + 1.50663887827851 * H15 + 1.7690093184365 * 
H16 ;
659317    +   P_DepVar1  =    -0.73096588852494 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73096588852494 + P_DepVar1 ;
659318    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
659319    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
659320    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
659321    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
659322    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
659323    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
659324    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
659325    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
659326    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
659327    +END;
MPRINT(EM_DIAGRAM):   END;
659328    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659329    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
659330    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
659331    +END;
MPRINT(EM_DIAGRAM):   END;
659332    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
659333    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
659334    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
659335    +END;
MPRINT(EM_DIAGRAM):   END;
659336    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
659337    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
659338    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
659339    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
659340    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
659341    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
659342    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
659343    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659344    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
659345    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659346    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
659347    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
659348    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
659349    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
659350    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
659351    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
659352    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
659353    +END;
MPRINT(EM_DIAGRAM):   END;
659354    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659355    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
659356    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659357    +drop
659358    +H11
659359    +H12
659360    +H13
659361    +H14
659362    +H15
659363    +H16
659364    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
659365    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
659366     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
659367     quit;
659368     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
659369     filename emflow
659369   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
659370     *------------------------------------------------------------*;
659371     * Neural17: Scoring VALIDATE data;
659372     *------------------------------------------------------------*;
659373     data EMWS8.Neural17_VALIDATE
659374     / view=EMWS8.Neural17_VALIDATE
659375     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_VALIDATE / view=EMWS8.Neural17_VALIDATE ;
659376     set EMWS8.PRINCOMP_VALIDATE
659377     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
659378     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural17\EMFLOWSCORE.sas.
659379    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659380    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
659381    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
659382    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
659383    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
659384    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
659385    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
659386    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
659387    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
659388    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
659389    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
659390    +LENGTH _WARN_ $4
659391    +      F_DepVar  $ 12
659392    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
659393    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
659394    +
659395    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
659396    +
659397    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
659398    +
659399    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
659400    +
659401    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
659402    +
659403    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
659404    +
659405    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
659406    +
659407    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
659408    +
659409    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
659410    +
659411    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
659412    +
659413    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
659414    +
659415    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
659416    +
659417    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
659418    +
659419    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
659420    +
659421    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
659422    +
659423    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
659424    +
659425    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
659426    +
659427    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
659428    +
659429    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
659430    +
659431    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
659432    +
659433    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
659434    +
659435    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
659436    +
659437    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
659438    +
659439    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
659440    +
659441    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
659442    +
659443    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659444    +
659445    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
659446    +
659447    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
659448    +
659449    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
659450    +
659451    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
659452    +
659453    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
659454    +
659455    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
659456    +
659457    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659458    +*** Checking missing input Interval
659459    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
659460    +
659461    +IF NMISS(
659462    +   PC_1 ,
659463    +   PC_10 ,
659464    +   PC_11 ,
659465    +   PC_12 ,
659466    +   PC_13 ,
659467    +   PC_14 ,
659468    +   PC_15 ,
659469    +   PC_16 ,
659470    +   PC_17 ,
659471    +   PC_2 ,
659472    +   PC_3 ,
659473    +   PC_4 ,
659474    +   PC_5 ,
659475    +   PC_6 ,
659476    +   PC_7 ,
659477    +   PC_8 ,
659478    +   PC_9 ,
659479    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
659480    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
659481    +
659482    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
659483    +END;
MPRINT(EM_DIAGRAM):   END;
659484    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659485    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
659486    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659487    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659488    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659489    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659490    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659491    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659492    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659493    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659494    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659495    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659496    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659497    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659498    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659499    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659500    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659501    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659502    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659503    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659504    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659505    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659506    +END;
MPRINT(EM_DIAGRAM):   END;
659507    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659508    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
659509    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
659510    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
659511    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
659512    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
659513    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
659514    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
659515    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
659516    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
659517    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
659518    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
659519    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
659520    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
659521    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
659522    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
659523    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
659524    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
659525    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
659526    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
659527    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
659528    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
659529    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
659530    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
659531    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
659532    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
659533    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
659534    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
659535    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
659536    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
659537    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
659538    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
659539    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
659540    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
659541    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
659542    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
659543    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
659544    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
659545    +END;
MPRINT(EM_DIAGRAM):   END;
659546    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659547    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
659548    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659549    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659550    +   H11  =      0.4572037399939 * S_PC_1  +    -0.33924067655378 * S_PC_10
659551    +          +     0.57141385115112 * S_PC_11  +     0.48487316549189 * S_PC_12
659552    +          +    -1.05031657956537 * S_PC_13  +         0.5266100628 * S_PC_14
659553    +          +    -0.40664215599546 * S_PC_15  +     0.12584985353518 * S_PC_16
659554    +          +    -0.18726079041205 * S_PC_17  +    -0.21051549627173 * S_PC_2
659555    +          +    -0.50083883209613 * S_PC_3  +     0.15037036519111 * S_PC_4
659556    +          +    -0.06091340223564 * S_PC_5  +     0.12052144993899 * S_PC_6
659557    +          +       0.332356321128 * S_PC_7  +     0.31706599410802 * S_PC_8
659558    +          +     0.27650701530647 * S_PC_9  +     0.36756441254936 *
659559    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.4572037399939 * S_PC_1 + -0.33924067655378 * S_PC_10 + 
0.57141385115112 * S_PC_11 + 0.48487316549189 * S_PC_12 + -1.05031657956537 * S_PC_13 + 
0.5266100628 * S_PC_14 + -0.40664215599546 * S_PC_15 + 0.12584985353518 * S_PC_16 + 
-0.18726079041205 * S_PC_17 + -0.21051549627173 * S_PC_2 + -0.50083883209613 * S_PC_3 + 
0.15037036519111 * S_PC_4 + -0.06091340223564 * S_PC_5 + 0.12052144993899 * S_PC_6 + 
0.332356321128 * S_PC_7 + 0.31706599410802 * S_PC_8 + 0.27650701530647 * S_PC_9 + 
0.36756441254936 * S_Year_Birth ;
659560    +   H12  =     0.39344846914742 * S_PC_1  +     0.23972559280802 * S_PC_10
659561    +          +     0.01471125669581 * S_PC_11  +     0.20856923684903 * S_PC_12
659562    +          +    -0.29177209177854 * S_PC_13  +     0.03707095215892 * S_PC_14
659563    +          +     0.38334701775474 * S_PC_15  +      0.5863505707375 * S_PC_16
659564    +          +    -0.62562899968641 * S_PC_17  +    -0.44298666943655 * S_PC_2
659565    +          +        0.04346878824 * S_PC_3  +     -0.2694267850657 * S_PC_4
659566    +          +    -0.12543247097847 * S_PC_5  +     -0.1896504822101 * S_PC_6
659567    +          +     0.18228845542316 * S_PC_7  +     0.09948287582483 * S_PC_8
659568    +          +     0.08527418828587 * S_PC_9  +    -0.07133810194976 *
659569    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.39344846914742 * S_PC_1 + 0.23972559280802 * S_PC_10 + 
0.01471125669581 * S_PC_11 + 0.20856923684903 * S_PC_12 + -0.29177209177854 * S_PC_13 + 
0.03707095215892 * S_PC_14 + 0.38334701775474 * S_PC_15 + 0.5863505707375 * S_PC_16 + 
-0.62562899968641 * S_PC_17 + -0.44298666943655 * S_PC_2 + 0.04346878824 * S_PC_3 + 
-0.2694267850657 * S_PC_4 + -0.12543247097847 * S_PC_5 + -0.1896504822101 * S_PC_6 + 
0.18228845542316 * S_PC_7 + 0.09948287582483 * S_PC_8 + 0.08527418828587 * S_PC_9 + 
-0.07133810194976 * S_Year_Birth ;
659570    +   H13  =    -0.73548355547467 * S_PC_1  +    -0.10402810694097 * S_PC_10
659571    +          +    -0.23530243081797 * S_PC_11  +     0.05157777911367 * S_PC_12
659572    +          +    -0.37308967195093 * S_PC_13  +     0.84460260270185 * S_PC_14
659573    +          +    -0.06322469233111 * S_PC_15  +     0.19066414060707 * S_PC_16
659574    +          +     0.06331857444725 * S_PC_17  +    -1.07880141314119 * S_PC_2
659575    +          +    -0.40445464921802 * S_PC_3  +     0.42151508961402 * S_PC_4
659576    +          +    -0.15204543817335 * S_PC_5  +     0.18602427623316 * S_PC_6
659577    +          +    -0.04709706814842 * S_PC_7  +     0.36586874220739 * S_PC_8
659578    +          +    -0.06991289454926 * S_PC_9  +    -0.36834643959125 *
659579    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.73548355547467 * S_PC_1 + -0.10402810694097 * S_PC_10 + 
-0.23530243081797 * S_PC_11 + 0.05157777911367 * S_PC_12 + -0.37308967195093 * S_PC_13 + 
0.84460260270185 * S_PC_14 + -0.06322469233111 * S_PC_15 + 0.19066414060707 * S_PC_16 + 
0.06331857444725 * S_PC_17 + -1.07880141314119 * S_PC_2 + -0.40445464921802 * S_PC_3 + 
0.42151508961402 * S_PC_4 + -0.15204543817335 * S_PC_5 + 0.18602427623316 * S_PC_6 + 
-0.04709706814842 * S_PC_7 + 0.36586874220739 * S_PC_8 + -0.06991289454926 * S_PC_9 + 
-0.36834643959125 * S_Year_Birth ;
659580    +   H14  =     0.03645017761422 * S_PC_1  +     0.35836366205085 * S_PC_10
659581    +          +    -0.67037688965042 * S_PC_11  +    -0.69506985454419 * S_PC_12
659582    +          +     0.75476319829716 * S_PC_13  +     0.17842794890744 * S_PC_14
659583    +          +    -0.02555345712531 * S_PC_15  +    -0.09809436799607 * S_PC_16
659584    +          +     0.53989601368165 * S_PC_17  +     0.34066718426356 * S_PC_2
659585    +          +    -0.13975214313923 * S_PC_3  +     0.39764818364136 * S_PC_4
659586    +          +     0.48005328630412 * S_PC_5  +    -0.24963672499963 * S_PC_6
659587    +          +     0.33581189577795 * S_PC_7  +    -0.20453271114584 * S_PC_8
659588    +          +    -0.18026723512126 * S_PC_9  +    -0.01794612569398 *
659589    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 0.03645017761422 * S_PC_1 + 0.35836366205085 * S_PC_10 + 
-0.67037688965042 * S_PC_11 + -0.69506985454419 * S_PC_12 + 0.75476319829716 * S_PC_13 + 
0.17842794890744 * S_PC_14 + -0.02555345712531 * S_PC_15 + -0.09809436799607 * S_PC_16 + 
0.53989601368165 * S_PC_17 + 0.34066718426356 * S_PC_2 + -0.13975214313923 * S_PC_3 + 
0.39764818364136 * S_PC_4 + 0.48005328630412 * S_PC_5 + -0.24963672499963 * S_PC_6 + 
0.33581189577795 * S_PC_7 + -0.20453271114584 * S_PC_8 + -0.18026723512126 * S_PC_9 + 
-0.01794612569398 * S_Year_Birth ;
659590    +   H15  =     0.87819286617219 * S_PC_1  +    -0.45680333333833 * S_PC_10
659591    +          +    -0.19222569004196 * S_PC_11  +    -0.69150047873875 * S_PC_12
659592    +          +    -0.15732640647119 * S_PC_13  +     -0.1113321891333 * S_PC_14
659593    +          +     0.02739308651489 * S_PC_15  +     0.03470872151577 * S_PC_16
659594    +          +     0.52347238904566 * S_PC_17  +    -0.48104910756428 * S_PC_2
659595    +          +     0.39717000994127 * S_PC_3  +     0.40508698052766 * S_PC_4
659596    +          +    -0.70416241168868 * S_PC_5  +    -0.15695961262575 * S_PC_6
659597    +          +    -0.50463412391796 * S_PC_7  +    -0.42242933925107 * S_PC_8
659598    +          +     0.48601170602465 * S_PC_9  +     0.05218649760104 *
659599    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.87819286617219 * S_PC_1 + -0.45680333333833 * S_PC_10 + 
-0.19222569004196 * S_PC_11 + -0.69150047873875 * S_PC_12 + -0.15732640647119 * S_PC_13 + 
-0.1113321891333 * S_PC_14 + 0.02739308651489 * S_PC_15 + 0.03470872151577 * S_PC_16 + 
0.52347238904566 * S_PC_17 + -0.48104910756428 * S_PC_2 + 0.39717000994127 * S_PC_3 + 
0.40508698052766 * S_PC_4 + -0.70416241168868 * S_PC_5 + -0.15695961262575 * S_PC_6 + 
-0.50463412391796 * S_PC_7 + -0.42242933925107 * S_PC_8 + 0.48601170602465 * S_PC_9 + 
0.05218649760104 * S_Year_Birth ;
659600    +   H16  =     0.71314442719152 * S_PC_1  +    -0.48254803601996 * S_PC_10
659601    +          +     -0.7055040284859 * S_PC_11  +    -0.28771421134443 * S_PC_12
659602    +          +     0.03904298770718 * S_PC_13  +    -0.19570881459626 * S_PC_14
659603    +          +     0.06318106643827 * S_PC_15  +     0.02221515221124 * S_PC_16
659604    +          +     0.08250149766469 * S_PC_17  +     0.24785323093961 * S_PC_2
659605    +          +     0.67272562474514 * S_PC_3  +    -0.40883740914753 * S_PC_4
659606    +          +     0.01526133771642 * S_PC_5  +     0.13815654365502 * S_PC_6
659607    +          +    -0.13763305233903 * S_PC_7  +     0.65046077839767 * S_PC_8
659608    +          +     0.59590047615822 * S_PC_9  +    -0.23180740400042 *
659609    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.71314442719152 * S_PC_1 + -0.48254803601996 * S_PC_10 + 
-0.7055040284859 * S_PC_11 + -0.28771421134443 * S_PC_12 + 0.03904298770718 * S_PC_13 + 
-0.19570881459626 * S_PC_14 + 0.06318106643827 * S_PC_15 + 0.02221515221124 * S_PC_16 + 
0.08250149766469 * S_PC_17 + 0.24785323093961 * S_PC_2 + 0.67272562474514 * S_PC_3 + 
-0.40883740914753 * S_PC_4 + 0.01526133771642 * S_PC_5 + 0.13815654365502 * S_PC_6 + 
-0.13763305233903 * S_PC_7 + 0.65046077839767 * S_PC_8 + 0.59590047615822 * S_PC_9 + 
-0.23180740400042 * S_Year_Birth ;
659610    +   H11  =    -0.96567698220965 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.96567698220965 + H11 ;
659611    +   H12  =     0.98497546600771 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.98497546600771 + H12 ;
659612    +   H13  =    -1.66780990072659 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.66780990072659 + H13 ;
659613    +   H14  =    -1.58958109115035 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.58958109115035 + H14 ;
659614    +   H15  =     -1.4698438300852 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.4698438300852 + H15 ;
659615    +   H16  =    -1.96875059181844 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.96875059181844 + H16 ;
659616    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
659617    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
659618    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
659619    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
659620    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
659621    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
659622    +END;
MPRINT(EM_DIAGRAM):   END;
659623    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659624    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
659625    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
659626    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
659627    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
659628    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
659629    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
659630    +END;
MPRINT(EM_DIAGRAM):   END;
659631    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659632    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
659633    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659634    +
659635    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
659636    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
659637    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
659638    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
659639    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
659640    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
659641    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
659642    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659643    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659644    +end;
MPRINT(EM_DIAGRAM):   end;
659645    +else do;
MPRINT(EM_DIAGRAM):   else do;
659646    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
659647    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
659648    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
659649    +   end;
MPRINT(EM_DIAGRAM):   end;
659650    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
659651    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
659652    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
659653    +   end;
MPRINT(EM_DIAGRAM):   end;
659654    +   else do;
MPRINT(EM_DIAGRAM):   else do;
659655    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
659656    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
659657    +   end;
MPRINT(EM_DIAGRAM):   end;
659658    +end;
MPRINT(EM_DIAGRAM):   end;
659659    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
659660    +   P_DepVar1  =     2.39531584340828 * H11  +      0.5615033898018 * H12
659661    +          +     1.33226164827793 * H13  +    -1.50665895392278 * H14
659662    +          +     1.50663887827851 * H15  +      1.7690093184365 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.39531584340828 * H11 + 0.5615033898018 * H12 + 
1.33226164827793 * H13 + -1.50665895392278 * H14 + 1.50663887827851 * H15 + 1.7690093184365 * 
H16 ;
659663    +   P_DepVar1  =    -0.73096588852494 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.73096588852494 + P_DepVar1 ;
659664    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
659665    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
659666    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
659667    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
659668    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
659669    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
659670    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
659671    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
659672    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
659673    +END;
MPRINT(EM_DIAGRAM):   END;
659674    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
659675    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
659676    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
659677    +END;
MPRINT(EM_DIAGRAM):   END;
659678    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
659679    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
659680    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
659681    +END;
MPRINT(EM_DIAGRAM):   END;
659682    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
659683    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
659684    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
659685    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
659686    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
659687    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
659688    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
659689    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659690    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
659691    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
659692    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
659693    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
659694    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
659695    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
659696    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
659697    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
659698    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
659699    +END;
MPRINT(EM_DIAGRAM):   END;
659700    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659701    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
659702    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
659703    +drop
659704    +H11
659705    +H12
659706    +H13
659707    +H14
659708    +H15
659709    +H16
659710    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
659711    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
659712     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL17_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
659713     quit;
659714     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
659715     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
659716     * Neural17: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural17: Computing metadata for TRAIN data;
659717     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural17\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural17_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural17_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural17_TRAIN out=WORK.M2ADO5NQ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ADO5NQ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ADO5NQ(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ADO5NQ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ADO5NQ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M209SN1M NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3B0UN55(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   set WORK.M209SN1M;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural17";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural17";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural17";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural17: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
660029     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
660030     set EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO;
660031     where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
660032     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL17_EMINFO.
      WHERE (DATA='Neural17') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660033     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural17_EMINFO;
660034     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
660035     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
660036     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
660040     run;
660041     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
660042     set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural17_EMINFO WORK.MODELTEMP_INFO;
660043     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660044     proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural17_EMINFO NOTHREADS;
660045     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
660046     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660047     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
660048     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
660049     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660050     proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
660051     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
660052     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL17_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660053     data EMWS8.Neural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural17_EMINFO;
660054     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
660055     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
660056     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL17_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

660057     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
660058     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
660059     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
660060     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL17_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
