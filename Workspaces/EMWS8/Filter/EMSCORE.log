MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "08 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22H38m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                08 de Março de 2016
Time:                22H38m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QQAG0Q "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\Filter\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QQAG0Q new;
MPRINT(EM_DIAGRAM):   run;
34979      proc sort data=EMWS8.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Filter_INTERVAL;
34980      by name;
MPRINT(EM_DIAGRAM):   by name;
34981      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

34982      proc print data=EMWS8.Filter_INTERVAL(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Filter_INTERVAL(obs=500) noobs label;
34983      where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
MPRINT(EM_DIAGRAM):   where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
34984      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterintervallimits_title,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Filter Limits for Interval Variables";
34985      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
34986      run;

NOTE: There were 14 observations read from the data set EMWS8.FILTER_INTERVAL.
      WHERE (INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N');
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

34987      title9;
MPRINT(EM_DIAGRAM):   title9;
34988      title10;
MPRINT(EM_DIAGRAM):   title10;
34989      proc sort data=EMWS8.Filter_CLASS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Filter_CLASS;
34990      by NAME VALUE;
MPRINT(EM_DIAGRAM):   by NAME VALUE;
34991      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS8.FILTER_CLASS.
NOTE: The data set EMWS8.FILTER_CLASS has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

34992      proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS8 nolist;
34993      modify Filter_CLASS;
MPRINT(EM_DIAGRAM):   modify Filter_CLASS;
34994      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,      NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel,         NOQUOTE))" VALUE = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel,        NOQUOTE))" LABEL =
34995         "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,        NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel,    NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable" ROLE = "Role" VALUE = "Level" LABEL = "Label" COUNT = "Train Count" PERCENT = "Train Percent";
MPRINT(EM_DIAGRAM):   run;
34996      run;

NOTE: MODIFY was successful for EMWS8.FILTER_CLASS.DATA.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.40 seconds
      cpu time            0.03 seconds
      

34997      proc print data=EMWS8.Filter_CLASS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Filter_CLASS(obs=500) noobs label;
34998      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterexcludeclass_title,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Excluded Class Values";
34999      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
35000      run;

NOTE: There were 7 observations read from the data set EMWS8.FILTER_CLASS.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

35001      title9;
MPRINT(EM_DIAGRAM):   title9;
35002      title10;
MPRINT(EM_DIAGRAM):   title10;
35003      data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
MPRINT(EM_DIAGRAM):    data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
35004      set EMWS8.Stat_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Stat_TRAIN;
35005      
35006      
35007      length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
35008      drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
35009      _FILTERFMT1= put(Dependents,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(Dependents,BEST.);
35010      length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
35011      drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
35012      %dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
35013      
35014      
35015      length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
35016      drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
35017      _FILTERFMT2= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(Education,$10.0);
35018      
35019      
35020      length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
35021      drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
35022      _FILTERFMT3= put(Gender,$1.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(Gender,$1.0);
35023      
35024      
35025      length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
35026      drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
35027      _FILTERFMT4= put(Marital_Status,$12.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(Marital_Status,$12.0);
35028      if
35029      _FILTERNORM1 not in ( '.')
35030       and
35031      _FILTERFMT2 not in ( ' ' , 'OldSchool')
35032       and
35033      _FILTERFMT3 not in ( ' ' , '?')
35034       and
35035      _FILTERFMT4 not in ( ' ' , 'BigConfusion')
35036      and
35037      ( CatPurchase ne .)
35038      and ( Clothes ne .)
35039      and ( Dt_Customer ne .)
35040      and ( Frq ne .)
35041      and ( HouseKeeping ne . and (0<=HouseKeeping) and (HouseKeeping<=40))
35042      and ( Income ne .)
35043      and ( Kitchen ne . and (0<=Kitchen) and (Kitchen<=40))
35044      and ( Mnt ne .)
35045      and ( NetPurchase ne .)
35046      and ( Rcn ne .)
35047      and ( Recomendation ne .)
35048      and ( SmallAppliances ne .)
35049      and ( Toys ne . and (0<=Toys) and (Toys<=35))
35050      and ( Year_Birth ne .)
35051      then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERFMT2 not in ( ' ' , 'OldSchool') and _FILTERFMT3 not in ( ' ' , '?') and _FILTERFMT4 not in ( ' ' , 'BigConfusion') and ( CatPurchase ne .) and ( Clothes ne .) and ( Dt_Customer ne .) and ( 
Frq ne .) and ( HouseKeeping ne . and (0<=HouseKeeping) and (HouseKeeping<=40)) and ( Income ne .) and ( Kitchen ne . and (0<=Kitchen) and (Kitchen<=40)) and ( Mnt ne .) and ( NetPurchase ne .) and ( Rcn ne .) and ( Recomendation ne .) and ( 
SmallAppliances ne .) and ( Toys ne . and (0<=Toys) and (Toys<=35)) and ( Year_Birth ne .) then do;
35052      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
35053      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
35054      end;
MPRINT(EM_DIAGRAM):   end;
35055      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
35056      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
35057      if M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER = 0;
35058      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file WORK.DATA_FILTERED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.STAT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

35059      data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
MPRINT(EM_DIAGRAM):   data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
35060      set EMWS8.Stat_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Stat_TRAIN;
35061      
35062      
35063      length _FILTERFMT1  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT1 $200;
35064      drop _FILTERFMT1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT1 ;
35065      _FILTERFMT1= put(Dependents,BEST.);
MPRINT(EM_DIAGRAM):   _FILTERFMT1= put(Dependents,BEST.);
35066      length _FILTERNORM1  $32;
MPRINT(EM_DIAGRAM):   length _FILTERNORM1 $32;
35067      drop _FILTERNORM1 ;
MPRINT(EM_DIAGRAM):   drop _FILTERNORM1 ;
35068      %dmnormcp(_FILTERFMT1,_FILTERNORM1);
MPRINT(DMNORMCP):   _FILTERNORM1=dmnorm(_FILTERFMT1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
35069      
35070      
35071      length _FILTERFMT2  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT2 $200;
35072      drop _FILTERFMT2 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT2 ;
35073      _FILTERFMT2= put(Education,$10.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT2= put(Education,$10.0);
35074      
35075      
35076      length _FILTERFMT3  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT3 $200;
35077      drop _FILTERFMT3 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT3 ;
35078      _FILTERFMT3= put(Gender,$1.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT3= put(Gender,$1.0);
35079      
35080      
35081      length _FILTERFMT4  $200;
MPRINT(EM_DIAGRAM):   length _FILTERFMT4 $200;
35082      drop _FILTERFMT4 ;
MPRINT(EM_DIAGRAM):   drop _FILTERFMT4 ;
35083      _FILTERFMT4= put(Marital_Status,$12.0);
MPRINT(EM_DIAGRAM):   _FILTERFMT4= put(Marital_Status,$12.0);
35084      if
35085      _FILTERNORM1 not in ( '.')
35086       and
35087      _FILTERFMT2 not in ( ' ' , 'OldSchool')
35088       and
35089      _FILTERFMT3 not in ( ' ' , '?')
35090       and
35091      _FILTERFMT4 not in ( ' ' , 'BigConfusion')
35092      and
35093      ( CatPurchase ne .)
35094      and ( Clothes ne .)
35095      and ( Dt_Customer ne .)
35096      and ( Frq ne .)
35097      and ( HouseKeeping ne . and (0<=HouseKeeping) and (HouseKeeping<=40))
35098      and ( Income ne .)
35099      and ( Kitchen ne . and (0<=Kitchen) and (Kitchen<=40))
35100      and ( Mnt ne .)
35101      and ( NetPurchase ne .)
35102      and ( Rcn ne .)
35103      and ( Recomendation ne .)
35104      and ( SmallAppliances ne .)
35105      and ( Toys ne . and (0<=Toys) and (Toys<=35))
35106      and ( Year_Birth ne .)
35107      then do;
MPRINT(EM_DIAGRAM):   if _FILTERNORM1 not in ( '.') and _FILTERFMT2 not in ( ' ' , 'OldSchool') and _FILTERFMT3 not in ( ' ' , '?') and _FILTERFMT4 not in ( ' ' , 'BigConfusion') and ( CatPurchase ne .) and ( Clothes ne .) and ( Dt_Customer ne .) and ( 
Frq ne .) and ( HouseKeeping ne . and (0<=HouseKeeping) and (HouseKeeping<=40)) and ( Income ne .) and ( Kitchen ne . and (0<=Kitchen) and (Kitchen<=40)) and ( Mnt ne .) and ( NetPurchase ne .) and ( Rcn ne .) and ( Recomendation ne .) and ( 
SmallAppliances ne .) and ( Toys ne . and (0<=Toys) and (Toys<=35)) and ( Year_Birth ne .) then do;
35108      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
35109      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
35110      end;
MPRINT(EM_DIAGRAM):   end;
35111      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
35112      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
35113      if M_FILTER = 1;
MPRINT(EM_DIAGRAM):   if M_FILTER = 1;
35114      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file WORK.DATA_EXCLUDED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.STAT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * createcountreport;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS8.Stat_TRAIN;
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View EMWS8.STAT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from WORK.DATA_FILTERED;
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: View WORK.DATA_FILTERED.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.STAT_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
35115      data WORK.FilterCOUNT;
MPRINT(EM_DIAGRAM):    data WORK.FilterCOUNT;
35116      length DATAROLE $16;
MPRINT(EM_DIAGRAM):   length DATAROLE $16;
35117      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))" FILTERED = "%sysfunc(sasmsg(sashelp.dmine, rpt_filtered_vlabel, NOQUOTE))" EXCLUDED = "%sysfunc(sasmsg(sashelp.dmine, rpt_excluded_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" FILTERED = "Filtered" EXCLUDED = "Excluded";
35118      DATAROLE = 'TRAIN';
MPRINT(EM_DIAGRAM):   DATAROLE = 'TRAIN';
35119      DATA = 2500;
MPRINT(EM_DIAGRAM):   DATA = 2500;
35120      FILTERED = 2332;
MPRINT(EM_DIAGRAM):   FILTERED = 2332;
35121      EXCLUDED = 168;
MPRINT(EM_DIAGRAM):   EXCLUDED = 168;
35122      output;
MPRINT(EM_DIAGRAM):   output;
35123      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.FILTERCOUNT has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

35124      proc print data=WORK.FilterCOUNT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FilterCOUNT noobs label;
35125      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35126      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_numberobs_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Number Of Observations";
MPRINT(EM_DIAGRAM):   run;
35127      run;

NOTE: There were 1 observations read from the data set WORK.FILTERCOUNT.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

35128      title9;
MPRINT(EM_DIAGRAM):   title9;
35129      title10;
MPRINT(EM_DIAGRAM):   title10;
35130      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35131      * createstattable;
MPRINT(EM_DIAGRAM):   * createstattable;
35132      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35133      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35134      * Filter: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBClass Macro ;
35135      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35136      %macro DMDBClass;
35137          DepVar(DESC) Dependents(ASC) Education(ASC) Gender(ASC) Marital_Status(ASC)
35138      %mend DMDBClass;
35139      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35140      * Filter: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBVar Macro ;
35141      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35142      %macro DMDBVar;
35143          CatPurchase Clothes Dt_Customer Frq HouseKeeping Income Kitchen Mnt
35144         NetPurchase Rcn Recomendation SmallAppliances Toys Year_Birth
35145      %mend DMDBVar;
35146      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35147      * Filter: Create DMDB;
MPRINT(EM_DIAGRAM):   * Filter: Create DMDB;
35148      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35149      proc dmdb batch data=WORK.DATA_FILTERED
35150      dmdbcat=WORK.Filter_DMDB
35151      varout=WORK.FILTER_VARSTATS
35152      maxlevel = 513
35153      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.DATA_FILTERED dmdbcat=WORK.Filter_DMDB varout=WORK.FILTER_VARSTATS maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
35154      class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC) Dependents(ASC) Education(ASC) Gender(ASC) Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
35155      var %DMDBVar;
MPRINT(DMDBVAR):   CatPurchase Clothes Dt_Customer Frq HouseKeeping Income Kitchen Mnt NetPurchase Rcn Recomendation SmallAppliances Toys Year_Birth
MPRINT(EM_DIAGRAM):  ;
35156      target
35157      DepVar
35158      ;
MPRINT(EM_DIAGRAM):   target DepVar ;
35159      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Records processed = 2332   Memory used = 511K.
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: There were 2500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: View WORK.DATA_FILTERED.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2500 observations read from the data set EMWS8.STAT_TRAIN.
NOTE: There were 2332 observations read from the data set WORK.DATA_FILTERED.
NOTE: The data set WORK.FILTER_VARSTATS has 14 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
35160      quit;
35161      *--- end code ---*;

35162      data WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):    data WORK.FILTER_VARSTATS;
35163      length DATAROLE $10 TYPE $8 NAME $32;
MPRINT(EM_DIAGRAM):   length DATAROLE $10 TYPE $8 NAME $32;
35164      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
35165      label N = "%sysfunc(sasmsg(sashelp.dmine, rpt_nonMiss_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label N = "Non Missing";
35166      label NMISS = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NMISS = "Missing";
35167      label MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MIN = "Minimum";
35168      label MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MAX = "Maximum";
35169      label MEAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MEAN = "Mean";
35170      label STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label STD = "Standard Deviation";
35171      label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Skewness";
35172      label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Kurtosis";
35173      label NUMCAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NUMCAT = "Number of Levels";
35174      retain DATAROLE "TRAIN" type "FILTERED";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" type "FILTERED";
35175      set WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   set WORK.FILTER_VARSTATS;
35176      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable NUMCAT is uninitialized.
NOTE: There were 14 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: The data set WORK.FILTER_VARSTATS has 14 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35177      proc append base=EMWS8.Filter_STATS data=WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Filter_STATS data=WORK.FILTER_VARSTATS;
35178      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK.FILTER_VARSTATS to EMWS8.FILTER_STATS.
NOTE: There were 14 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: 14 observations added.
NOTE: The data set EMWS8.FILTER_STATS has 28 observations and 11 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

35179      proc sort data=EMWS8.Filter_STATS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Filter_STATS;
35180      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
35181      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 28 observations read from the data set EMWS8.FILTER_STATS.
NOTE: The data set EMWS8.FILTER_STATS has 28 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

35182      proc transpose data=EMWS8.Filter_STATS out=EMWS8.Filter_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Filter_STATS out=EMWS8.Filter_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
35183      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
35184      id TYPE;
MPRINT(EM_DIAGRAM):   id TYPE;
35185      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 28 observations read from the data set EMWS8.FILTER_STATS.
NOTE: The data set EMWS8.FILTER_STATS has 112 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

35186      proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS8 nolist;
35187      modify Filter_STATS;
MPRINT(EM_DIAGRAM):   modify Filter_STATS;
35188      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" STATISTIC = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))" FILTERED="Filtered" ORIGINAL = "%sysfunc(sasmsg(sashelp.dmine, rpt_original_vlabel,
35188    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Variable" STATISTIC = "Statistics" FILTERED= "Filtered" ORIGINAL = "Original";
MPRINT(EM_DIAGRAM):   run;
35189      run;

NOTE: MODIFY was successful for EMWS8.FILTER_STATS.DATA.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.39 seconds
      cpu time            0.01 seconds
      

35190      proc sort data=EMWS8.Filter_STATS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter_STATS;
35191      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
35192      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 112 observations read from the data set EMWS8.FILTER_STATS.
NOTE: The data set EMWS8.FILTER_STATS has 112 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35193      %let _cn = %sysfunc(getoption(CENTER));
35194      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
35195      proc print data=EMWS8.Filter_STATS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Filter_STATS(obs=500) noobs label;
35196      var STATISTIC ORIGINAL
35197      FILTERED
35198      ;
MPRINT(EM_DIAGRAM):   var STATISTIC ORIGINAL FILTERED ;
35199      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
35200      where ORIGINAL ne .;
MPRINT(EM_DIAGRAM):   where ORIGINAL ne .;
35201      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterstat_title,    NOQUOTE, FILTERED))";
MPRINT(EM_DIAGRAM):   title9 "Statistics for Original and FILTERED Data";
35202      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
35203      run;

NOTE: There were 112 observations read from the data set EMWS8.FILTER_STATS.
      WHERE ORIGINAL not = .;
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

35204      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
35205      title9;
MPRINT(EM_DIAGRAM):   title9;
35206      title10;
MPRINT(EM_DIAGRAM):   title10;
35207      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35208      * createhistogramtable;
MPRINT(EM_DIAGRAM):   * createhistogramtable;
35209      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35210      data WORK.FilterDMDBC;
MPRINT(EM_DIAGRAM):   data WORK.FilterDMDBC;
35211      set WORK.FilterDMDBC(where=(report='Y'));
MPRINT(EM_DIAGRAM):   set WORK.FilterDMDBC(where=(report='Y'));
35212      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE report='Y';
NOTE: The data set WORK.FILTERDMDBC has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

35213      filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
MPRINT(EM_DIAGRAM):    filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
35214      %inc vdist;
NOTE: %INCLUDE (level 1) file VDIST is file SASHELP.EMUTIL.EM_VARDIST.SOURCE.
35215     +%macro var_profile(DATA=, OUTPUT=_INTERVAL, VARS=, METADATA=, COMPUTESTAT=Y, STAT=_STAT, PCTLSTAT=_PCTLSTAT, FREQ=,
35216     +                   BINDATA=, BIN=Y, NUMBARS=8, MINMAX=N);
35217     +   %let _em_nodeid = EM;
35218     +   %if %symexist(EM_NODEID) %then %do;
35219     +       %let _em_nodeid = &em_nodeid;
35220     +   %end;
35222     +   %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingsummarystats_note, NOQUOTE, &_em_nodeid));
35223     +   %put &EM_CODEBAR;
35224     +   %put * &msgString;
35225     +   %put &EM_CODEBAR;
35227     +   /* Process metadata data set */
35228     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
35229     +   %if %sysfunc(exist(&metadata))>0 and (&metadata ne ) %then %do;
35230     +       %let FREQ=;
35231     +       %let _nobs=0;
35232     +       data _null;
35233     +          set &metadata(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
35234     +          if eof then call symput('_nobs', put(_N_, best.));
35235     +       run;
35236     +       %if "&_nobs" ne "0" %then %do;
35237     +           data _null_;
35238     +              file _mac;
35239     +              length _VARS $80; retain _vars;
35240     +              if _n_ =1 then put '%macro _vars;';
35241     +              set &metadata end=eof;
35242     +              where LEVEL = 'INTERVAL' or ROLE='FREQ';
35243     +              if ROLE='FREQ' then call symput('FREQ', trim(NAME));
35244     +              else do;
35245     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
35246     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
35247     +                 else do;
35248     +                    put _Vars;
35249     +                    _vars = strip(NAME);
35250     +                 end;
35251     +              end;
35253     +              if eof then do;
35254     +                 put _Vars;
35255     +                 put '%mend _vars;';
35256     +              end;
35257     +           run;
35258     +       %end;
35259     +       %else %do;
35260     +           data _null_;
35261     +              file _mac;
35262     +              put '%macro _vars;';
35263     +              put '%mend _vars;';
35264     +           run;
35265     +       %end;
35266     +   %end;
35267     +   %else %do;
35268     +       data _null_;
35269     +          file _mac;
35270     +          put '%macro _vars;';
35271     +          put '%mend _vars;';
35272     +       run;
35273     +   %end;
35274     +   %inc _mac;
35275     +   filename _mac;
35277     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
35279     +   /* Check if FREQ variable is in the data set */
35280     +   %if &freq ne %then %do;
35281     +       data _null_;
35282     +          dsid = open("&data");
35283     +          if dsid>0 then do;
35284     +               if varnum(dsid, "&FREQ")<1 then
35285     +                  call symput('FREQ', '');
35286     +               dsid = close(dsid);
35287     +          end;
35288     +       run;
35289     +   %end;
35291     +   %if &bindata eq %then %do;
35292     +       %let bindata = _BOUNDS;
35293     +       proc datasets lib=work nolist mt=(DATA VIEW);
35294     +          delete _BOUNDS;
35295     +       run;
35296     +   %end;
35298     +   %global _EM_VARDISTOBS_MAX;
35299     +   %let _EM_VARDISTOBS_MAX = 1000000;
35301     +   %if %symexist(EM_VARDISTOBS_MAX) %then %do;
35302     +       %let _EM_VARDISTOBS_MAX= %eval(&EM_VARDISTOBS_MAX);
35303     +   %end;
35305     +   %if &computeStat = Y %then %do;
35306     +       proc dmdb data=&DATA(obs=&_EM_VARDISTOBS_MAX) varout=&STAT(rename=(NAME=VARIABLE));
35307     +          var %_Vars &vars;
35308     +          %if &FREQ ne %then %do;
35309     +              freq &FREQ;
35310     +          %end;
35311     +       run;
35312     +       proc sort data=&stat;
35313     +          by VARIABLE;
35314     +       run;
35316     +       %if ^%sysfunc(indexc(&STAT, .)) %then %do;
35317     +           %let _library = WORK;
35318     +           %let _member  = &STAT;
35319     +      %end;
35320     +      %else %do;
35321     +          %let _library = %scan(&STAT, 1, .);
35322     +          %let _member  = %scan(&STAT, 2, .);
35323     +      %end;
35325     +      proc datasets library=&_library nolist;
35326     +         modify &_member;
35327     +         label NMISS    = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
35328     +         label MIN      = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
35329     +         label MAX      = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
35330     +         label MEAN     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
35331     +         label STD      = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
35332     +         label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
35333     +         label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
35334     +      run;
35335     +      quit;
35336     +   %end;
35338     +   %if &BIN ne N %then %do;
35339     +       %if %sysfunc(exist(&bindata))<1 %then %do;
35340     +           %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingmidpoints_note, NOQUOTE, &_em_nodeid));
35341     +           %put &EM_CODEBAR;
35342     +           %put * &msgString;
35343     +           %put &EM_CODEBAR;
35344     +           filename fref catalog 'work.em.profileformat.source';
35346     +            %let _maxlevel = %eval(&numbars + 1);
35347     +            proc dmdb data=&data(obs=&_EM_VARDISTOBS_MAX) classout=_CLASSOUT maxlevel=&_maxlevel;
35348     +               class %_vars &vars;
35349     +            run;
35350     +            proc freq data=_CLASSOUT ORDER=DATA noprint;
35351     +               table NAME / OUT = _COUNT(where=(COUNT<&_maxlevel));
35352     +            run;
35353     +           proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
35354     +              by NAME;
35355     +           run;
35356     +           proc sort data=_CLASSOUT;
35357     +              by NAME;
35358     +          run;
35359     +          proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
35360     +             var NRAW;
35361     +             by NAME;
35362     +          run;
35363     +          proc delete data=WORK._CLASSOUT;
35364     +          run;
35365     +          data _null_;
35366     +             dsid = open('_DISCRETEMID');
35367     +             if dsid then do;
35368     +                call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
35369     +                dsid = close(dsid);
35370     +             end;
35371     +          run;
35372     +          data _DISCRETEMID;
35373     +             merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
35374     +             keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars _NUMCLASSBINS_;
35375     +             by VARIABLE;
35376     +             if _b then output;
35377     +          run;
35379     +          data _EMVARDIST / view=_EMVARDIST;
35380     +             set &DATA(keep=%_VARS &vars &FREQ  obs=&_EM_VARDISTOBS_MAX);
35381     +          run;
35382     +          proc stdize data=_EMVARDIST outstat=&pctlstat  out=_null_ pctlpts=(0 5 25 50 75 95 100);
35383     +             var %_vars &vars;
35384     +             %if &FREQ ne %then %do;
35385     +                 freq &FREQ / notrunc;
35386     +             %end;
35387     +          run;
35388     +          proc datasets lib=WORK NOLIST;
35389     +             delete _EMVARDIST / mt=view;
35390     +          run;
35391     +          quit;
35392     +          %if %upcase(&minmax) = Y %then %do;
35393     +              proc transpose data=&pctlstat out=_MINMAXDATA(rename=(_NAME_=VARIABLE COL1=MIN COL2=MAX));
35394     +                 where  _type_ in('P0', 'P100');
35395     +              run;
35396     +              data _MINMAXDATA(keep=Variable Value Pos);
35397     +                 set _MINMAXDATA;
35398     +                 label VARIABLE  = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
35399     +                 Value = min; Pos=1; output;
35400     +                 Value = max; Pos=3; output;
35401     +              run;
35402     +          %end;
35403     +          proc transpose data=&pctlstat out=&bindata(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5
35404     +                                                             COL3=P95 COL4=MAX));
35405     +             where  _type_ in('P0', 'P5', 'P95', 'P100');
35406     +          run;
35407     +          proc sort data=&bindata;
35408     +             by VARIABLE;
35409     +          run;
35411     +          %let new_numbars=%eval(&NUMBARS+12);
35412     +          data &bindata;
35413     +             set &bindata;
35414     +             length Format $12;
35415     +             array _midpoint{&new_NUMBARS};
35416     +             array _bounds{&new_NUMBARS};
35417     +             if (max - min)>1e-10 then do;
35418     +                step = abs(P95-P5)/&NUMBARS;
35419     +                lstep = abs(p5- min)/5;
35420     +                ustep = abs(max-p95)/5;
35421     +                /* No outlying values */;
35422     +                if lstep<=step and ustep<=step then do;
35423     +                   step = abs(MIN-MAX)/&NUMBARS;
35424     +                   START=MIN;
35425     +                   do i=1 to &numbars;
35426     +                      _bounds(i)   = MIN + i*step;      if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
35427     +                      _midpoint(i) = MIN+ (i-0.5)*step; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
35428     +                   end;
35429     +                   %let new_numbars = &numbars;
35430     +                end;
35431     +                else do;
35432     +                   if lstep<=step then do;
35433     +                      step = abs(MIN-P95)/&NUMBARS;
35434     +                      /* Start Histogram at MIN value */
35435     +                      do i=1 to &NUMBARS;
35436     +                         _bounds(i)   = MIN + i*step;       if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
35437     +                         _midpoint(i) = MIN+ (i-0.5)*step;  if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
35438     +                      end;
35439     +                      /* Make BINS with upper outliers width */
35440     +                      do i=1 to 5;
35441     +                         numbars = &numbars + i;
35442     +                         _bounds(numbars)   = P95 + i*ustep;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
35443     +                         _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
35444     +                      end;
35445     +                       %let new_numbars = %eval(&numbars+5);
35446     +                   end;
35447     +                   else do;
35448     +                      /* Make BINS with lower outliers width */
35449     +                      do i=1 to 5;
35450     +                         _bounds(i)   = P5 - (5-i)*lstep; if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
35451     +                         _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
35452     +                      end;
35453     +                      if ustep<= step then do;
35454     +                         step = abs(P5-MAX)/&NUMBARS;
35455     +                         /* End Histogram at MAX value */
35456     +                         do i=1 to &NUMBARS;
35457     +                            numbars = i+5;
35458     +                            _bounds(numbars)   = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
35459     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
35460     +                         end;
35461     +                          %let new_numbars = %eval(&numbars+5);
35462     +                      end;
35463     +                      else do;
35464     +                         do i=1 to &NUMBARS;
35465     +                            numbars = i+5;
35466     +                            _bounds(numbars)  = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
35467     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
35468     +                         end;
35469     +                         /* Make BINS with upper outliers width */
35470     +                         do i=1 to 5;
35471     +                            numbars = &numbars+5+i;
35472     +                            _bounds(numbars)   = P95 + i*ustep; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
35473     +                            _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
35474     +                         end;
35475     +                         %let new_numbars = %eval(&numbars+10);
35476     +                      end;
35477     +                   end;
35478     +                end;
35479     +             end;
35480     +             else do;
35481     +                _bounds(1)   = MIN;
35482     +                _midpoint(1) = MIN;
35483     +             end;
35484     +             Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
35485     +          run;
35486     +          %if %sysfunc(exist(_DISCRETEMID)) %then %do;
35487     +              data &bindata;
35488     +                 merge &bindata _DISCRETEMID(in = _b);
35489     +                 by VARIABLE;
35490     +                 if _b then _DISCRETE=1;
35491     +                 else _DISCRETE=0;
35492     +              run;
35493     +          %end;
35495     +          data _null_;
35496     +             file fref;
35497     +             set &bindata end=eof;
35498     +             array _bounds{&NEW_NUMBARS};
35499     +             array _midpoint{&NEW_NUMBARS};
35500     +             if _n_=1 then
35501     +                put 'proc format;';
35503     +             put 'value ' Format;
35504     +             if _DISCRETE then do;
35505     +                 do i=1 to &numbars;
35506     +                    _MID = _midpoint{i};
35507     +                    if _MID ne . and i<= _NUMCLASSBINS_ then
35508     +                       put _MID '="' _MID '"';
35509     +                 end;
35510     +                 put ';';
35511     +             end;
35512     +             else do;
35513     +                if min eq max then do;
35514     +                   put 'low - high ="' MIN '";';
35515     +                end;
35516     +                else do;
35517     +                   _LB  = MIN;
35518     +                   _MID = _midpoint{1};
35519     +                   _UB  = _bounds{1};
35520     +                   put 'LOW -' _UB '="' _MID '"';
35522     +                   do i=1 to &NEW_NUMBARS-1;
35523     +                      _LB  = _bounds{i};
35524     +                      j=i+1;
35525     +                      _MID = _midpoint{j};
35526     +                      _UB  = _bounds{j};
35527     +                      if (_UB ne .) and (_LB ne _UB) then do;
35528     +                         if _UB>=MAX then
35529     +                            put _LB '-HIGH="' _MID '"';
35530     +                         else
35531     +                            put _LB '-' _UB '="' _MID '"';
35532     +                      end;
35533     +                   end;
35534     +                end;
35535     +             end;
35536     +             put ';';
35537     +             if eof then put 'run;';
35538     +          run;
35540     +          %inc fref;
35542     +          filename fref;
35543     +      %end;
35545     +      data _binneddata / view=_binneddata;
35546     +         set &DATA(obs=&_EM_VARDISTOBS_MAX);
35548     +         %let dsid    =%sysfunc(open(&bindata));
35549     +         %let namenum = %sysfunc(varnum(&dsid, VARIABLE));
35550     +         %let fmtnum  = %sysfunc(varnum(&dsid, FORMAT));
35551     +         %let obs = %sysfunc(fetch(&dsid));
35553     +         %if (&obs=0) %then %do;
35554     +             format
35555     +         %end;
35557     +         %let _count = 0;
35558     +         %do %while(&obs=0);
35559     +             %let _count = %eval(&_count +1);
35560     +             %let _name = %sysfunc(getvarc(&dsid, &namenum));
35561     +             %let _fmtname = %sysfunc(getvarc(&dsid, &fmtnum));
35562     +             %do;
35563     +                &_name &_fmtname..
35564     +             %end;
35565     +             %let obs = %sysfunc(fetch(&dsid));
35566     +         %end;
35567     +         %let dsid=%sysfunc(close(&dsid));
35568     +         ;
35569     +      run;
35570     +   %end;
35572     +    %if &bin ne N %then %do;
35573     +        proc dmdb data=_binneddata(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
35574     +    %end;
35575     +    %else %do;
35576     +        proc dmdb data = &data(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
35577     +    %end;
35578     +      class %_vars &vars;
35579     +      %if &FREQ ne %then %do;
35580     +          freq &FREQ;
35581     +      %end;
35582     +   run;
35583     +   data &output;
35584     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
35585     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
35586     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
35587     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
35588     +      set _temptab;
35589     +      format VALUE 12.3 count;
35590     +      value = inputn(level, 'best12.');
35591     +      keep VARIABLE COUNT PERCENT VALUE;
35592     +   run;
35593     +   %if &BIN ne N and %sysfunc(exist(_MINMAXDATA)) and &minmax=Y %then %do;
35594     +       data &output;
35595     +          set &output(in=_a) _MINMAXDATA;
35596     +          if _a then Pos=2;
35597     +       run;
35598     +       proc sort data=&output out=&output(drop=pos);
35599     +          by VARIABLE POS VALUE;
35600     +          where VALUE ne .;
35601     +       run;
35602     +   %end;
35603     +   proc datasets lib=work nolist mt=(DATA VIEW);
35604     +      delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
35605     +   run;
35606     +   quit;
35608     +   %doend:
35609     +%mend var_profile;
NOTE: %INCLUDE (level 1) ending.
35610      filename vdist;
MPRINT(EM_DIAGRAM):   filename vdist;
NOTE: Fileref VDIST has been deassigned.
35611      %let em_nodeid = Filter;
35612      %var_profile(DATA=EMWS8.Stat_TRAIN, OUTPUT=WORK._HISTDATA, METADATA=WORK.FilterDMDBC, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, FREQ=, BIN=Y, NUMBARS= 16);
*------------------------------------------------------------*
* Filter: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Terça-feira, 08 de Março de 2016 22H38m,
      Last Modified=Terça-feira, 08 de Março de 2016 22H38m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD4976_VM-SAS-PC_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
35613     +%macro _vars;
35614     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

35615      %var_profile(DATA=WORK.DATA_FILTERED, OUTPUT=WORK._HISTDATA, METADATA=WORK.FilterDMDBC, COMPUTESTAT=N, STAT=_STAT, BIN=Y, BINDATA=_bindata, NUMBARS= 16);
MPRINT(EM_DIAGRAM):   
*------------------------------------------------------------*
* Filter: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Terça-feira, 08 de Março de 2016 22H38m,
      Last Modified=Terça-feira, 08 de Março de 2016 22H38m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD4976_VM-SAS-PC_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
35616     +%macro _vars;
35617     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

35618      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35619      * Filter: Creating Bar Chart Table;
MPRINT(EM_DIAGRAM):   * Filter: Creating Bar Chart Table;
35620      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35621      filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
MPRINT(EM_DIAGRAM):   filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
35622      %inc cdist;
NOTE: %INCLUDE (level 1) file CDIST is file SASHELP.EMUTIL.EM_CLASSDIST.SOURCE.
35623     +%macro class_profile(DATA=, OUTPUT=_CLASS, VARS=, METADATA=, WHERE=, STAT=_STAT, FREQ=);
35624     +   %if %INDEX(&EM_DEBUG, LOG SOURCE) %then %do;
35625     +       %put *** Statistics for Class variables ***;
35626     +       %put >>> DATA= &data  OUTPUT= &output;
35627     +       %put >>> VAR= &vars;
35628     +       %put >>> WHERE=  &where;
35629     +       %put >>> FREQ=  &freq;
35630     +   %end;
35632     +      /* Process metadata data set */
35633     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
35634     +   %if %sysfunc(exist(&metadata))>0 and ("&metadata" ne "") %then %do;
35635     +       %let FREQ=;
35636     +       %let _nobs=0;
35637     +       data _null;
35638     +          set &metadata(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
35639     +          if eof then call symput('_nobs', put(_N_, best.));
35640     +       run;
35641     +       %if "&_nobs" ne "0" %then %do;
35642     +           data _null_;
35643     +              file _mac;
35644     +              length _VARS $80; retain _vars;
35645     +              if _n_ =1 then put '%macro _vars;';
35646     +              set &metadata end=eof;
35647     +              where LEVEL ne 'INTERVAL' or ROLE='FREQ';
35648     +              if ROLE='FREQ' then call symput('FREQ', NAME);
35649     +              else do;
35650     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
35651     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
35652     +                 else do;
35653     +                    put _Vars;
35654     +                    _vars = strip(NAME);
35655     +                 end;
35656     +              end;
35657     +              if eof then do;
35658     +                 put _Vars;
35659     +                 put '%mend _vars;';
35660     +              end;
35661     +           run;
35662     +       %end;
35663     +       %else %do;
35664     +           data _null_;
35665     +              file _mac;
35666     +              put '%macro _vars;';
35667     +              put '%mend _vars;';
35668     +           run;
35669     +       %end;
35670     +   %end;
35671     +   %else %do;
35672     +       data _null_;
35673     +          file _mac;
35674     +          put '%macro _vars;';
35675     +          put '%mend _vars;';
35676     +       run;
35677     +   %end;
35678     +   %inc _mac;
35679     +   filename _mac;
35681     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
35683     +   /* Check if FREQ variable is in the data set */
35684     +   %if &freq ne %then %do;
35685     +       data _null_;
35686     +          dsid = open("&data");
35687     +          if dsid>0 then do;
35688     +               if varnum(dsid, "&FREQ")<1 then
35689     +                  call symput('FREQ', '');
35690     +               dsid = close(dsid);
35691     +          end;
35692     +       run;
35693     +   %end;
35695     +   proc dmdb data=&DATA  nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
35696     +      class %_Vars &vars;
35697     +      %if &FREQ ne %then %do;
35698     +          freq &FREQ;
35699     +      %end;
35700     +      %if %bquote(&WHERE) ne %then %do;
35701     +            where &WHERE;
35702     +      %end;
35703     +   run;
35704     +   proc sort data=_tempclass;
35705     +      by VARIABLE;
35706     +   run;
35707     +   data &output;
35708     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
35709     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
35710     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
35711     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
35712     +      set _tempclass;
35713     +      format COUNT;
35714     +      keep VARIABLE COUNT PERCENT VALUE;
35715     +   run;
35716     +   proc means data=&output noprint;
35717     +      class VARIABLE;
35718     +      var COUNT;
35719     +      output out=&STAT N=NUMCAT;
35720     +   run;
35721     +   data &STAT;
35722     +      set &STAT;
35723     +      where _TYPE_=1;
35724     +      KEEP VARIABLE NUMCAT;
35725     +      label NUMCAT   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
35726     +      format NUMCAT 8.;
35727     +   run;
35728     +   proc datasets lib=work nolist;
35729     +      delete _tempclass;
35730     +   run;
35731     +   quit;
35733     +   %doend:
35734     +%mend class_profile;
NOTE: %INCLUDE (level 1) ending.
35736      filename cdist;
MPRINT(EM_DIAGRAM):   filename cdist;
NOTE: Fileref CDIST has been deassigned.
35737      %let em_nodeid = Filter;
35738      %class_profile(DATA=EMWS8.Stat_TRAIN, OUTPUT=WORK._BARDATA, METADATA=WORK.FilterDMDBC, STAT=_STAT);
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Terça-feira, 08 de Março de 2016 22H38m,
      Last Modified=Terça-feira, 08 de Março de 2016 22H38m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD4976_VM-SAS-PC_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
35739     +%macro _vars;
35740     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

35741      %class_profile(DATA=WORK.DATA_FILTERED, OUTPUT=WORK._BARDATA, METADATA=WORK.FilterDMDBC, STAT=_STAT);
MPRINT(EM_DIAGRAM):   
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Terça-feira, 08 de Março de 2016 22H38m,
      Last Modified=Terça-feira, 08 de Março de 2016 22H38m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD4976_VM-SAS-PC_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
35742     +%macro _vars;
35743     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

35744      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35745      * Filter: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Filter: Computing metadata for TRAIN data;
35746      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\Filter\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Filter_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Filter_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Filter_TRAIN out=WORK.M2KJ_350 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KJ_350;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KJ_350(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KJ_350;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KJ_350;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1N3JG_C NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HRJCXK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N3JG_C;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Stat_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Stat_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Filter_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Filter";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Filter: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="M_FILTER" then do;
MPRINT(EM_DIAGRAM):   role ="REJECTED";
MPRINT(EM_DIAGRAM):   level = "BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
