MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3JYRI33 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3JYRI33 new;
MPRINT(EM_DIAGRAM):   run;
706454     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
706455     set EMWS8.Neural16_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_OUTKEY;
706456     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
706457     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS8.NEURAL16_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

706458     filename emflow
706458   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
706459     *------------------------------------------------------------*;
706460     * Neural16: Scoring DATA data;
706461     *------------------------------------------------------------*;
706462     data EMWS8.Neural16_TRAIN
706463     / view=EMWS8.Neural16_TRAIN
706464     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_TRAIN / view=EMWS8.Neural16_TRAIN ;
706465     set EMWS8.PRINCOMP_TRAIN
706466     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
706467     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
706468    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
706469    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
706470    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
706471    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
706472    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
706473    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
706474    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
706475    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
706476    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
706477    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
706478    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
706479    +LENGTH _WARN_ $4
706480    +      F_DepVar  $ 12
706481    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
706482    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
706483    +
706484    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
706485    +
706486    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
706487    +
706488    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
706489    +
706490    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
706491    +
706492    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
706493    +
706494    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
706495    +
706496    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
706497    +
706498    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
706499    +
706500    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
706501    +
706502    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
706503    +
706504    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
706505    +
706506    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
706507    +
706508    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
706509    +
706510    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
706511    +
706512    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
706513    +
706514    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
706515    +
706516    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
706517    +
706518    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
706519    +
706520    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
706521    +
706522    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
706523    +
706524    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
706525    +
706526    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
706527    +
706528    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
706529    +
706530    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
706531    +
706532    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
706533    +
706534    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
706535    +
706536    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
706537    +
706538    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
706539    +
706540    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
706541    +
706542    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
706543    +
706544    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706545    +*** Checking missing input Interval
706546    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
706547    +
706548    +IF NMISS(
706549    +   PC_1 ,
706550    +   PC_10 ,
706551    +   PC_11 ,
706552    +   PC_12 ,
706553    +   PC_13 ,
706554    +   PC_14 ,
706555    +   PC_15 ,
706556    +   PC_16 ,
706557    +   PC_17 ,
706558    +   PC_2 ,
706559    +   PC_3 ,
706560    +   PC_4 ,
706561    +   PC_5 ,
706562    +   PC_6 ,
706563    +   PC_7 ,
706564    +   PC_8 ,
706565    +   PC_9 ,
706566    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
706567    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
706568    +
706569    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
706570    +END;
MPRINT(EM_DIAGRAM):   END;
706571    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706572    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
706573    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706574    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
706575    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
706576    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
706577    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
706578    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
706579    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
706580    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
706581    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
706582    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
706583    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
706584    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
706585    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
706586    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
706587    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
706588    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
706589    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
706590    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
706591    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
706592    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
706593    +END;
MPRINT(EM_DIAGRAM):   END;
706594    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
706595    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
706596    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
706597    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
706598    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
706599    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
706600    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
706601    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
706602    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
706603    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
706604    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
706605    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
706606    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
706607    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
706608    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
706609    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
706610    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
706611    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
706612    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
706613    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
706614    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
706615    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
706616    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
706617    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
706618    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
706619    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
706620    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
706621    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
706622    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
706623    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
706624    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
706625    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
706626    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
706627    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
706628    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
706629    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
706630    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
706631    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
706632    +END;
MPRINT(EM_DIAGRAM):   END;
706633    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706634    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
706635    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706636    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
706637    +   H11  =     0.53288365215883 * S_PC_1  +    -0.08501802527388 * S_PC_10
706638    +          +     0.24294632091272 * S_PC_11  +     0.08564368899296 * S_PC_12
706639    +          +    -0.53035830408083 * S_PC_13  +      0.5121391020649 * S_PC_14
706640    +          +    -0.23443462397451 * S_PC_15  +     0.12589911049936 * S_PC_16
706641    +          +    -0.16239710130802 * S_PC_17  +    -0.32581426758909 * S_PC_2
706642    +          +    -0.20464216366267 * S_PC_3  +     0.22276947045479 * S_PC_4
706643    +          +    -0.35154873877133 * S_PC_5  +     0.10083593662047 * S_PC_6
706644    +          +     0.15800533701906 * S_PC_7  +     0.50548257072689 * S_PC_8
706645    +          +     0.39514364275998 * S_PC_9  +     0.32515045755807 *
706646    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.53288365215883 * S_PC_1 + -0.08501802527388 * S_PC_10 + 
0.24294632091272 * S_PC_11 + 0.08564368899296 * S_PC_12 + -0.53035830408083 * S_PC_13 + 
0.5121391020649 * S_PC_14 + -0.23443462397451 * S_PC_15 + 0.12589911049936 * S_PC_16 + 
-0.16239710130802 * S_PC_17 + -0.32581426758909 * S_PC_2 + -0.20464216366267 * S_PC_3 + 
0.22276947045479 * S_PC_4 + -0.35154873877133 * S_PC_5 + 0.10083593662047 * S_PC_6 + 
0.15800533701906 * S_PC_7 + 0.50548257072689 * S_PC_8 + 0.39514364275998 * S_PC_9 + 
0.32515045755807 * S_Year_Birth ;
706647    +   H12  =      -0.043853655425 * S_PC_1  +    -0.19061724013711 * S_PC_10
706648    +          +     0.26459557006509 * S_PC_11  +      0.2593207707985 * S_PC_12
706649    +          +    -0.26786865073847 * S_PC_13  +     0.13899553547117 * S_PC_14
706650    +          +     0.07350772183608 * S_PC_15  +     0.00796758440415 * S_PC_16
706651    +          +     0.48180384116801 * S_PC_17  +     0.07267308309752 * S_PC_2
706652    +          +    -0.20689007049594 * S_PC_3  +    -0.17050866522825 * S_PC_4
706653    +          +    -0.14946225165934 * S_PC_5  +     0.30652242877121 * S_PC_6
706654    +          +     0.28357405053753 * S_PC_7  +     0.46480336446244 * S_PC_8
706655    +          +     0.01609583032462 * S_PC_9  +     0.00173398137223 *
706656    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.043853655425 * S_PC_1 + -0.19061724013711 * S_PC_10 + 
0.26459557006509 * S_PC_11 + 0.2593207707985 * S_PC_12 + -0.26786865073847 * S_PC_13 + 
0.13899553547117 * S_PC_14 + 0.07350772183608 * S_PC_15 + 0.00796758440415 * S_PC_16 + 
0.48180384116801 * S_PC_17 + 0.07267308309752 * S_PC_2 + -0.20689007049594 * S_PC_3 + 
-0.17050866522825 * S_PC_4 + -0.14946225165934 * S_PC_5 + 0.30652242877121 * S_PC_6 + 
0.28357405053753 * S_PC_7 + 0.46480336446244 * S_PC_8 + 0.01609583032462 * S_PC_9 + 
0.00173398137223 * S_Year_Birth ;
706657    +   H13  =    -0.36172085298258 * S_PC_1  +     0.66454780959691 * S_PC_10
706658    +          +    -0.27424530083647 * S_PC_11  +    -0.34999384973279 * S_PC_12
706659    +          +     0.96571997824994 * S_PC_13  +    -0.36525616159781 * S_PC_14
706660    +          +     0.46903433790652 * S_PC_15  +    -0.13367107580258 * S_PC_16
706661    +          +     0.33228828632054 * S_PC_17  +     0.28683205801308 * S_PC_2
706662    +          +     0.00962623192071 * S_PC_3  +     0.15618263559078 * S_PC_4
706663    +          +     0.24047625456325 * S_PC_5  +    -0.16784430119656 * S_PC_6
706664    +          +     0.12766842516835 * S_PC_7  +     0.02728867423451 * S_PC_8
706665    +          +    -0.01057162381608 * S_PC_9  +     0.15356656474238 *
706666    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.36172085298258 * S_PC_1 + 0.66454780959691 * S_PC_10 + 
-0.27424530083647 * S_PC_11 + -0.34999384973279 * S_PC_12 + 0.96571997824994 * S_PC_13 + 
-0.36525616159781 * S_PC_14 + 0.46903433790652 * S_PC_15 + -0.13367107580258 * S_PC_16 + 
0.33228828632054 * S_PC_17 + 0.28683205801308 * S_PC_2 + 0.00962623192071 * S_PC_3 + 
0.15618263559078 * S_PC_4 + 0.24047625456325 * S_PC_5 + -0.16784430119656 * S_PC_6 + 
0.12766842516835 * S_PC_7 + 0.02728867423451 * S_PC_8 + -0.01057162381608 * S_PC_9 + 
0.15356656474238 * S_Year_Birth ;
706667    +   H14  =    -0.77762173235679 * S_PC_1  +     0.20311836899828 * S_PC_10
706668    +          +     0.12507847019416 * S_PC_11  +     0.32850760820196 * S_PC_12
706669    +          +     -0.1850635096084 * S_PC_13  +     0.20783488029059 * S_PC_14
706670    +          +     0.03207086028489 * S_PC_15  +     0.06842826028734 * S_PC_16
706671    +          +    -0.13846289457178 * S_PC_17  +    -0.61658925214495 * S_PC_2
706672    +          +    -0.54111347434373 * S_PC_3  +      0.8995010772565 * S_PC_4
706673    +          +      -0.158174904418 * S_PC_5  +    -0.36746497451964 * S_PC_6
706674    +          +     0.32851201705378 * S_PC_7  +     0.49799179152659 * S_PC_8
706675    +          +     0.23615619563106 * S_PC_9  +     0.03393148113156 *
706676    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.77762173235679 * S_PC_1 + 0.20311836899828 * S_PC_10 + 
0.12507847019416 * S_PC_11 + 0.32850760820196 * S_PC_12 + -0.1850635096084 * S_PC_13 + 
0.20783488029059 * S_PC_14 + 0.03207086028489 * S_PC_15 + 0.06842826028734 * S_PC_16 + 
-0.13846289457178 * S_PC_17 + -0.61658925214495 * S_PC_2 + -0.54111347434373 * S_PC_3 + 
0.8995010772565 * S_PC_4 + -0.158174904418 * S_PC_5 + -0.36746497451964 * S_PC_6 + 
0.32851201705378 * S_PC_7 + 0.49799179152659 * S_PC_8 + 0.23615619563106 * S_PC_9 + 
0.03393148113156 * S_Year_Birth ;
706677    +   H15  =     0.90554749997523 * S_PC_1  +     -0.3290576311032 * S_PC_10
706678    +          +    -0.21593329857816 * S_PC_11  +    -0.34649204173026 * S_PC_12
706679    +          +    -0.20990183909634 * S_PC_13  +    -0.17079973355312 * S_PC_14
706680    +          +     0.14391061023113 * S_PC_15  +     0.03643832628016 * S_PC_16
706681    +          +     0.30965019234785 * S_PC_17  +     -0.2157740573946 * S_PC_2
706682    +          +     0.36116182108773 * S_PC_3  +    -0.24039625990695 * S_PC_4
706683    +          +     0.04132169245218 * S_PC_5  +     0.21230339433421 * S_PC_6
706684    +          +    -0.07744976205828 * S_PC_7  +    -0.17745981465076 * S_PC_8
706685    +          +      0.3436289305111 * S_PC_9  +    -0.03436733240154 *
706686    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.90554749997523 * S_PC_1 + -0.3290576311032 * S_PC_10 + 
-0.21593329857816 * S_PC_11 + -0.34649204173026 * S_PC_12 + -0.20990183909634 * S_PC_13 + 
-0.17079973355312 * S_PC_14 + 0.14391061023113 * S_PC_15 + 0.03643832628016 * S_PC_16 + 
0.30965019234785 * S_PC_17 + -0.2157740573946 * S_PC_2 + 0.36116182108773 * S_PC_3 + 
-0.24039625990695 * S_PC_4 + 0.04132169245218 * S_PC_5 + 0.21230339433421 * S_PC_6 + 
-0.07744976205828 * S_PC_7 + -0.17745981465076 * S_PC_8 + 0.3436289305111 * S_PC_9 + 
-0.03436733240154 * S_Year_Birth ;
706687    +   H11  =    -0.58643762144681 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.58643762144681 + H11 ;
706688    +   H12  =    -1.05096976253293 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.05096976253293 + H12 ;
706689    +   H13  =    -0.45250942632339 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.45250942632339 + H13 ;
706690    +   H14  =    -1.05415585264877 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.05415585264877 + H14 ;
706691    +   H15  =     -1.6599474552435 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.6599474552435 + H15 ;
706692    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
706693    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
706694    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
706695    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
706696    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
706697    +END;
MPRINT(EM_DIAGRAM):   END;
706698    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
706699    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
706700    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
706701    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
706702    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
706703    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
706704    +END;
MPRINT(EM_DIAGRAM):   END;
706705    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706706    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
706707    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706708    +
706709    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
706710    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
706711    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
706712    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
706713    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
706714    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
706715    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
706716    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
706717    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
706718    +end;
MPRINT(EM_DIAGRAM):   end;
706719    +else do;
MPRINT(EM_DIAGRAM):   else do;
706720    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
706721    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
706722    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
706723    +   end;
MPRINT(EM_DIAGRAM):   end;
706724    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
706725    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
706726    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
706727    +   end;
MPRINT(EM_DIAGRAM):   end;
706728    +   else do;
MPRINT(EM_DIAGRAM):   else do;
706729    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
706730    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
706731    +   end;
MPRINT(EM_DIAGRAM):   end;
706732    +end;
MPRINT(EM_DIAGRAM):   end;
706733    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
706734    +   P_DepVar1  =     1.26475679673828 * H11  +     0.18488626431834 * H12
706735    +          +    -2.54175886922293 * H13  +      1.5651604630991 * H14
706736    +          +     2.65835020050467 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.26475679673828 * H11 + 0.18488626431834 * H12 + 
-2.54175886922293 * H13 + 1.5651604630991 * H14 + 2.65835020050467 * H15 ;
706737    +   P_DepVar1  =    -1.12065382757581 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.12065382757581 + P_DepVar1 ;
706738    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
706739    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
706740    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
706741    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
706742    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
706743    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
706744    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
706745    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
706746    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
706747    +END;
MPRINT(EM_DIAGRAM):   END;
706748    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
706749    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
706750    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
706751    +END;
MPRINT(EM_DIAGRAM):   END;
706752    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
706753    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
706754    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
706755    +END;
MPRINT(EM_DIAGRAM):   END;
706756    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
706757    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
706758    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
706759    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
706760    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
706761    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
706762    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
706763    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706764    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
706765    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706766    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
706767    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
706768    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
706769    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
706770    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
706771    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
706772    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
706773    +END;
MPRINT(EM_DIAGRAM):   END;
706774    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
706775    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
706776    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
706777    +drop
706778    +H11
706779    +H12
706780    +H13
706781    +H14
706782    +H15
706783    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
706784    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
706785     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
706786     quit;
706787     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
706788     filename emflow
706788   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
706789     *------------------------------------------------------------*;
706790     * Neural16: Scoring VALIDATE data;
706791     *------------------------------------------------------------*;
706792     data EMWS8.Neural16_VALIDATE
706793     / view=EMWS8.Neural16_VALIDATE
706794     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_VALIDATE / view=EMWS8.Neural16_VALIDATE ;
706795     set EMWS8.PRINCOMP_VALIDATE
706796     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
706797     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
706798    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
706799    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
706800    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
706801    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
706802    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
706803    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
706804    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
706805    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
706806    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
706807    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
706808    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
706809    +LENGTH _WARN_ $4
706810    +      F_DepVar  $ 12
706811    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
706812    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
706813    +
706814    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
706815    +
706816    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
706817    +
706818    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
706819    +
706820    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
706821    +
706822    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
706823    +
706824    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
706825    +
706826    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
706827    +
706828    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
706829    +
706830    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
706831    +
706832    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
706833    +
706834    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
706835    +
706836    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
706837    +
706838    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
706839    +
706840    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
706841    +
706842    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
706843    +
706844    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
706845    +
706846    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
706847    +
706848    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
706849    +
706850    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
706851    +
706852    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
706853    +
706854    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
706855    +
706856    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
706857    +
706858    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
706859    +
706860    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
706861    +
706862    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
706863    +
706864    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
706865    +
706866    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
706867    +
706868    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
706869    +
706870    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
706871    +
706872    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
706873    +
706874    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706875    +*** Checking missing input Interval
706876    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
706877    +
706878    +IF NMISS(
706879    +   PC_1 ,
706880    +   PC_10 ,
706881    +   PC_11 ,
706882    +   PC_12 ,
706883    +   PC_13 ,
706884    +   PC_14 ,
706885    +   PC_15 ,
706886    +   PC_16 ,
706887    +   PC_17 ,
706888    +   PC_2 ,
706889    +   PC_3 ,
706890    +   PC_4 ,
706891    +   PC_5 ,
706892    +   PC_6 ,
706893    +   PC_7 ,
706894    +   PC_8 ,
706895    +   PC_9 ,
706896    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
706897    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
706898    +
706899    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
706900    +END;
MPRINT(EM_DIAGRAM):   END;
706901    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706902    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
706903    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706904    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
706905    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
706906    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
706907    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
706908    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
706909    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
706910    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
706911    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
706912    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
706913    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
706914    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
706915    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
706916    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
706917    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
706918    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
706919    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
706920    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
706921    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
706922    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
706923    +END;
MPRINT(EM_DIAGRAM):   END;
706924    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
706925    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
706926    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
706927    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
706928    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
706929    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
706930    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
706931    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
706932    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
706933    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
706934    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
706935    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
706936    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
706937    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
706938    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
706939    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
706940    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
706941    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
706942    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
706943    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
706944    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
706945    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
706946    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
706947    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
706948    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
706949    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
706950    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
706951    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
706952    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
706953    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
706954    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
706955    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
706956    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
706957    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
706958    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
706959    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
706960    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
706961    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
706962    +END;
MPRINT(EM_DIAGRAM):   END;
706963    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706964    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
706965    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
706966    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
706967    +   H11  =     0.53288365215883 * S_PC_1  +    -0.08501802527388 * S_PC_10
706968    +          +     0.24294632091272 * S_PC_11  +     0.08564368899296 * S_PC_12
706969    +          +    -0.53035830408083 * S_PC_13  +      0.5121391020649 * S_PC_14
706970    +          +    -0.23443462397451 * S_PC_15  +     0.12589911049936 * S_PC_16
706971    +          +    -0.16239710130802 * S_PC_17  +    -0.32581426758909 * S_PC_2
706972    +          +    -0.20464216366267 * S_PC_3  +     0.22276947045479 * S_PC_4
706973    +          +    -0.35154873877133 * S_PC_5  +     0.10083593662047 * S_PC_6
706974    +          +     0.15800533701906 * S_PC_7  +     0.50548257072689 * S_PC_8
706975    +          +     0.39514364275998 * S_PC_9  +     0.32515045755807 *
706976    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.53288365215883 * S_PC_1 + -0.08501802527388 * S_PC_10 + 
0.24294632091272 * S_PC_11 + 0.08564368899296 * S_PC_12 + -0.53035830408083 * S_PC_13 + 
0.5121391020649 * S_PC_14 + -0.23443462397451 * S_PC_15 + 0.12589911049936 * S_PC_16 + 
-0.16239710130802 * S_PC_17 + -0.32581426758909 * S_PC_2 + -0.20464216366267 * S_PC_3 + 
0.22276947045479 * S_PC_4 + -0.35154873877133 * S_PC_5 + 0.10083593662047 * S_PC_6 + 
0.15800533701906 * S_PC_7 + 0.50548257072689 * S_PC_8 + 0.39514364275998 * S_PC_9 + 
0.32515045755807 * S_Year_Birth ;
706977    +   H12  =      -0.043853655425 * S_PC_1  +    -0.19061724013711 * S_PC_10
706978    +          +     0.26459557006509 * S_PC_11  +      0.2593207707985 * S_PC_12
706979    +          +    -0.26786865073847 * S_PC_13  +     0.13899553547117 * S_PC_14
706980    +          +     0.07350772183608 * S_PC_15  +     0.00796758440415 * S_PC_16
706981    +          +     0.48180384116801 * S_PC_17  +     0.07267308309752 * S_PC_2
706982    +          +    -0.20689007049594 * S_PC_3  +    -0.17050866522825 * S_PC_4
706983    +          +    -0.14946225165934 * S_PC_5  +     0.30652242877121 * S_PC_6
706984    +          +     0.28357405053753 * S_PC_7  +     0.46480336446244 * S_PC_8
706985    +          +     0.01609583032462 * S_PC_9  +     0.00173398137223 *
706986    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.043853655425 * S_PC_1 + -0.19061724013711 * S_PC_10 + 
0.26459557006509 * S_PC_11 + 0.2593207707985 * S_PC_12 + -0.26786865073847 * S_PC_13 + 
0.13899553547117 * S_PC_14 + 0.07350772183608 * S_PC_15 + 0.00796758440415 * S_PC_16 + 
0.48180384116801 * S_PC_17 + 0.07267308309752 * S_PC_2 + -0.20689007049594 * S_PC_3 + 
-0.17050866522825 * S_PC_4 + -0.14946225165934 * S_PC_5 + 0.30652242877121 * S_PC_6 + 
0.28357405053753 * S_PC_7 + 0.46480336446244 * S_PC_8 + 0.01609583032462 * S_PC_9 + 
0.00173398137223 * S_Year_Birth ;
706987    +   H13  =    -0.36172085298258 * S_PC_1  +     0.66454780959691 * S_PC_10
706988    +          +    -0.27424530083647 * S_PC_11  +    -0.34999384973279 * S_PC_12
706989    +          +     0.96571997824994 * S_PC_13  +    -0.36525616159781 * S_PC_14
706990    +          +     0.46903433790652 * S_PC_15  +    -0.13367107580258 * S_PC_16
706991    +          +     0.33228828632054 * S_PC_17  +     0.28683205801308 * S_PC_2
706992    +          +     0.00962623192071 * S_PC_3  +     0.15618263559078 * S_PC_4
706993    +          +     0.24047625456325 * S_PC_5  +    -0.16784430119656 * S_PC_6
706994    +          +     0.12766842516835 * S_PC_7  +     0.02728867423451 * S_PC_8
706995    +          +    -0.01057162381608 * S_PC_9  +     0.15356656474238 *
706996    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.36172085298258 * S_PC_1 + 0.66454780959691 * S_PC_10 + 
-0.27424530083647 * S_PC_11 + -0.34999384973279 * S_PC_12 + 0.96571997824994 * S_PC_13 + 
-0.36525616159781 * S_PC_14 + 0.46903433790652 * S_PC_15 + -0.13367107580258 * S_PC_16 + 
0.33228828632054 * S_PC_17 + 0.28683205801308 * S_PC_2 + 0.00962623192071 * S_PC_3 + 
0.15618263559078 * S_PC_4 + 0.24047625456325 * S_PC_5 + -0.16784430119656 * S_PC_6 + 
0.12766842516835 * S_PC_7 + 0.02728867423451 * S_PC_8 + -0.01057162381608 * S_PC_9 + 
0.15356656474238 * S_Year_Birth ;
706997    +   H14  =    -0.77762173235679 * S_PC_1  +     0.20311836899828 * S_PC_10
706998    +          +     0.12507847019416 * S_PC_11  +     0.32850760820196 * S_PC_12
706999    +          +     -0.1850635096084 * S_PC_13  +     0.20783488029059 * S_PC_14
707000    +          +     0.03207086028489 * S_PC_15  +     0.06842826028734 * S_PC_16
707001    +          +    -0.13846289457178 * S_PC_17  +    -0.61658925214495 * S_PC_2
707002    +          +    -0.54111347434373 * S_PC_3  +      0.8995010772565 * S_PC_4
707003    +          +      -0.158174904418 * S_PC_5  +    -0.36746497451964 * S_PC_6
707004    +          +     0.32851201705378 * S_PC_7  +     0.49799179152659 * S_PC_8
707005    +          +     0.23615619563106 * S_PC_9  +     0.03393148113156 *
707006    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.77762173235679 * S_PC_1 + 0.20311836899828 * S_PC_10 + 
0.12507847019416 * S_PC_11 + 0.32850760820196 * S_PC_12 + -0.1850635096084 * S_PC_13 + 
0.20783488029059 * S_PC_14 + 0.03207086028489 * S_PC_15 + 0.06842826028734 * S_PC_16 + 
-0.13846289457178 * S_PC_17 + -0.61658925214495 * S_PC_2 + -0.54111347434373 * S_PC_3 + 
0.8995010772565 * S_PC_4 + -0.158174904418 * S_PC_5 + -0.36746497451964 * S_PC_6 + 
0.32851201705378 * S_PC_7 + 0.49799179152659 * S_PC_8 + 0.23615619563106 * S_PC_9 + 
0.03393148113156 * S_Year_Birth ;
707007    +   H15  =     0.90554749997523 * S_PC_1  +     -0.3290576311032 * S_PC_10
707008    +          +    -0.21593329857816 * S_PC_11  +    -0.34649204173026 * S_PC_12
707009    +          +    -0.20990183909634 * S_PC_13  +    -0.17079973355312 * S_PC_14
707010    +          +     0.14391061023113 * S_PC_15  +     0.03643832628016 * S_PC_16
707011    +          +     0.30965019234785 * S_PC_17  +     -0.2157740573946 * S_PC_2
707012    +          +     0.36116182108773 * S_PC_3  +    -0.24039625990695 * S_PC_4
707013    +          +     0.04132169245218 * S_PC_5  +     0.21230339433421 * S_PC_6
707014    +          +    -0.07744976205828 * S_PC_7  +    -0.17745981465076 * S_PC_8
707015    +          +      0.3436289305111 * S_PC_9  +    -0.03436733240154 *
707016    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.90554749997523 * S_PC_1 + -0.3290576311032 * S_PC_10 + 
-0.21593329857816 * S_PC_11 + -0.34649204173026 * S_PC_12 + -0.20990183909634 * S_PC_13 + 
-0.17079973355312 * S_PC_14 + 0.14391061023113 * S_PC_15 + 0.03643832628016 * S_PC_16 + 
0.30965019234785 * S_PC_17 + -0.2157740573946 * S_PC_2 + 0.36116182108773 * S_PC_3 + 
-0.24039625990695 * S_PC_4 + 0.04132169245218 * S_PC_5 + 0.21230339433421 * S_PC_6 + 
-0.07744976205828 * S_PC_7 + -0.17745981465076 * S_PC_8 + 0.3436289305111 * S_PC_9 + 
-0.03436733240154 * S_Year_Birth ;
707017    +   H11  =    -0.58643762144681 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.58643762144681 + H11 ;
707018    +   H12  =    -1.05096976253293 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.05096976253293 + H12 ;
707019    +   H13  =    -0.45250942632339 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.45250942632339 + H13 ;
707020    +   H14  =    -1.05415585264877 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.05415585264877 + H14 ;
707021    +   H15  =     -1.6599474552435 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.6599474552435 + H15 ;
707022    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
707023    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
707024    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
707025    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
707026    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
707027    +END;
MPRINT(EM_DIAGRAM):   END;
707028    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
707029    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
707030    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
707031    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
707032    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
707033    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
707034    +END;
MPRINT(EM_DIAGRAM):   END;
707035    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
707036    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
707037    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
707038    +
707039    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
707040    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
707041    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
707042    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
707043    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
707044    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
707045    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
707046    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
707047    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
707048    +end;
MPRINT(EM_DIAGRAM):   end;
707049    +else do;
MPRINT(EM_DIAGRAM):   else do;
707050    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
707051    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
707052    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
707053    +   end;
MPRINT(EM_DIAGRAM):   end;
707054    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
707055    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
707056    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
707057    +   end;
MPRINT(EM_DIAGRAM):   end;
707058    +   else do;
MPRINT(EM_DIAGRAM):   else do;
707059    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
707060    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
707061    +   end;
MPRINT(EM_DIAGRAM):   end;
707062    +end;
MPRINT(EM_DIAGRAM):   end;
707063    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
707064    +   P_DepVar1  =     1.26475679673828 * H11  +     0.18488626431834 * H12
707065    +          +    -2.54175886922293 * H13  +      1.5651604630991 * H14
707066    +          +     2.65835020050467 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.26475679673828 * H11 + 0.18488626431834 * H12 + 
-2.54175886922293 * H13 + 1.5651604630991 * H14 + 2.65835020050467 * H15 ;
707067    +   P_DepVar1  =    -1.12065382757581 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.12065382757581 + P_DepVar1 ;
707068    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
707069    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
707070    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
707071    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
707072    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
707073    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
707074    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
707075    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
707076    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
707077    +END;
MPRINT(EM_DIAGRAM):   END;
707078    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
707079    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
707080    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
707081    +END;
MPRINT(EM_DIAGRAM):   END;
707082    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
707083    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
707084    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
707085    +END;
MPRINT(EM_DIAGRAM):   END;
707086    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
707087    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
707088    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
707089    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
707090    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
707091    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
707092    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
707093    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
707094    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
707095    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
707096    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
707097    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
707098    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
707099    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
707100    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
707101    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
707102    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
707103    +END;
MPRINT(EM_DIAGRAM):   END;
707104    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
707105    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
707106    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
707107    +drop
707108    +H11
707109    +H12
707110    +H13
707111    +H14
707112    +H15
707113    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
707114    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
707115     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
707116     quit;
707117     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
707118     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
707119     * Neural16: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural16: Computing metadata for TRAIN data;
707120     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural16_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural16_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural16_TRAIN out=WORK.M350RRTH noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M350RRTH;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M350RRTH(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M350RRTH;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M350RRTH;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0AHOLSF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12XFEAF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   set WORK.M0AHOLSF;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural16";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural16";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
707432     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
707433     set EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO;
707434     where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
707435     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL16_EMINFO.
      WHERE (DATA='Neural16') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707436     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural16_EMINFO;
707437     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
707438     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
707439     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
707443     run;
707444     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
707445     set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
707446     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707447     proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
707448     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
707449     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707450     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
707451     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
707452     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707453     proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
707454     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
707455     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707456     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
707457     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
707458     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
707459     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

707460     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
707461     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
707462     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
707463     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL16_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
