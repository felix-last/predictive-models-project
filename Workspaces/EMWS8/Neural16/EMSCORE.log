MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1DDSMS4 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1DDSMS4 new;
MPRINT(EM_DIAGRAM):   run;
681521     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
681522     set EMWS8.Neural16_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_OUTKEY;
681523     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
681524     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS8.NEURAL16_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

681525     filename emflow
681525   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681526     *------------------------------------------------------------*;
681527     * Neural16: Scoring DATA data;
681528     *------------------------------------------------------------*;
681529     data EMWS8.Neural16_TRAIN
681530     / view=EMWS8.Neural16_TRAIN
681531     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_TRAIN / view=EMWS8.Neural16_TRAIN ;
681532     set EMWS8.PRINCOMP_TRAIN
681533     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
681534     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
681535    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681536    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
681537    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681538    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
681539    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
681540    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
681541    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
681542    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
681543    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
681544    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
681545    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
681546    +LENGTH _WARN_ $4
681547    +      F_DepVar  $ 12
681548    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
681549    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
681550    +
681551    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
681552    +
681553    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
681554    +
681555    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
681556    +
681557    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
681558    +
681559    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
681560    +
681561    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
681562    +
681563    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
681564    +
681565    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
681566    +
681567    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
681568    +
681569    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
681570    +
681571    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
681572    +
681573    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
681574    +
681575    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
681576    +
681577    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
681578    +
681579    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
681580    +
681581    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
681582    +
681583    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
681584    +
681585    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
681586    +
681587    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
681588    +
681589    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
681590    +
681591    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
681592    +
681593    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
681594    +
681595    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
681596    +
681597    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681598    +
681599    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
681600    +
681601    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
681602    +
681603    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
681604    +
681605    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
681606    +
681607    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
681608    +
681609    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
681610    +
681611    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681612    +*** Checking missing input Interval
681613    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
681614    +
681615    +IF NMISS(
681616    +   PC_1 ,
681617    +   PC_10 ,
681618    +   PC_11 ,
681619    +   PC_12 ,
681620    +   PC_13 ,
681621    +   PC_14 ,
681622    +   PC_15 ,
681623    +   PC_16 ,
681624    +   PC_17 ,
681625    +   PC_2 ,
681626    +   PC_3 ,
681627    +   PC_4 ,
681628    +   PC_5 ,
681629    +   PC_6 ,
681630    +   PC_7 ,
681631    +   PC_8 ,
681632    +   PC_9 ,
681633    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
681634    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
681635    +
681636    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
681637    +END;
MPRINT(EM_DIAGRAM):   END;
681638    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681639    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
681640    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681641    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681642    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
681643    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
681644    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
681645    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
681646    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
681647    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
681648    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
681649    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
681650    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
681651    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
681652    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
681653    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
681654    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
681655    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
681656    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
681657    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
681658    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
681659    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681660    +END;
MPRINT(EM_DIAGRAM):   END;
681661    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681662    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
681663    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
681664    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
681665    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
681666    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
681667    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
681668    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
681669    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
681670    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
681671    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
681672    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
681673    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
681674    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
681675    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
681676    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
681677    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
681678    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
681679    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
681680    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
681681    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
681682    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
681683    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
681684    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
681685    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
681686    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
681687    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
681688    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
681689    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
681690    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
681691    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
681692    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
681693    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
681694    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
681695    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
681696    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
681697    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
681698    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681699    +END;
MPRINT(EM_DIAGRAM):   END;
681700    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681701    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
681702    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681703    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681704    +   H11  =     0.68853093447805 * S_PC_1  +    -0.09785920988283 * S_PC_10
681705    +          +      0.2262793582311 * S_PC_11  +     0.42419074975693 * S_PC_12
681706    +          +    -0.54317932872036 * S_PC_13  +     0.53519140067144 * S_PC_14
681707    +          +     -0.1744270307344 * S_PC_15  +     0.18241008555072 * S_PC_16
681708    +          +    -0.25060854902398 * S_PC_17  +    -0.25611405781684 * S_PC_2
681709    +          +    -0.00673065558238 * S_PC_3  +     0.09320597300518 * S_PC_4
681710    +          +    -0.33203252569739 * S_PC_5  +     0.00590705460674 * S_PC_6
681711    +          +     0.06208675544437 * S_PC_7  +     0.33116857183597 * S_PC_8
681712    +          +     0.51908545428588 * S_PC_9  +     0.48276727358582 *
681713    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.68853093447805 * S_PC_1 + -0.09785920988283 * S_PC_10 + 
0.2262793582311 * S_PC_11 + 0.42419074975693 * S_PC_12 + -0.54317932872036 * S_PC_13 + 
0.53519140067144 * S_PC_14 + -0.1744270307344 * S_PC_15 + 0.18241008555072 * S_PC_16 + 
-0.25060854902398 * S_PC_17 + -0.25611405781684 * S_PC_2 + -0.00673065558238 * S_PC_3 + 
0.09320597300518 * S_PC_4 + -0.33203252569739 * S_PC_5 + 0.00590705460674 * S_PC_6 + 
0.06208675544437 * S_PC_7 + 0.33116857183597 * S_PC_8 + 0.51908545428588 * S_PC_9 + 
0.48276727358582 * S_Year_Birth ;
681714    +   H12  =     -0.0070856196308 * S_PC_1  +    -0.18611152691043 * S_PC_10
681715    +          +     0.22534257578583 * S_PC_11  +     0.33020451143395 * S_PC_12
681716    +          +    -0.24237020186597 * S_PC_13  +     0.10222438754058 * S_PC_14
681717    +          +      0.0802825515844 * S_PC_15  +    -0.03133698522933 * S_PC_16
681718    +          +     0.49736449030833 * S_PC_17  +     0.02917890141067 * S_PC_2
681719    +          +    -0.22205362046804 * S_PC_3  +    -0.13304083494845 * S_PC_4
681720    +          +    -0.21899822137746 * S_PC_5  +      0.3085123234701 * S_PC_6
681721    +          +     0.27342786456998 * S_PC_7  +      0.5031708850414 * S_PC_8
681722    +          +     0.01033471788288 * S_PC_9  +     0.03378228698717 *
681723    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.0070856196308 * S_PC_1 + -0.18611152691043 * S_PC_10 + 
0.22534257578583 * S_PC_11 + 0.33020451143395 * S_PC_12 + -0.24237020186597 * S_PC_13 + 
0.10222438754058 * S_PC_14 + 0.0802825515844 * S_PC_15 + -0.03133698522933 * S_PC_16 + 
0.49736449030833 * S_PC_17 + 0.02917890141067 * S_PC_2 + -0.22205362046804 * S_PC_3 + 
-0.13304083494845 * S_PC_4 + -0.21899822137746 * S_PC_5 + 0.3085123234701 * S_PC_6 + 
0.27342786456998 * S_PC_7 + 0.5031708850414 * S_PC_8 + 0.01033471788288 * S_PC_9 + 
0.03378228698717 * S_Year_Birth ;
681724    +   H13  =     -0.3421890003062 * S_PC_1  +     0.61136704886339 * S_PC_10
681725    +          +    -0.40153427369952 * S_PC_11  +    -0.33462028191119 * S_PC_12
681726    +          +     0.90217520388187 * S_PC_13  +    -0.33102298102444 * S_PC_14
681727    +          +     0.44286773830646 * S_PC_15  +     -0.1743340863053 * S_PC_16
681728    +          +     0.33888590637073 * S_PC_17  +     0.30033175969591 * S_PC_2
681729    +          +    -0.06198456990062 * S_PC_3  +     0.15206104869693 * S_PC_4
681730    +          +     0.19687028324531 * S_PC_5  +    -0.14869138924001 * S_PC_6
681731    +          +     0.23507525658256 * S_PC_7  +     0.01699882178668 * S_PC_8
681732    +          +     0.15026892128111 * S_PC_9  +     0.18169263767525 *
681733    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.3421890003062 * S_PC_1 + 0.61136704886339 * S_PC_10 + 
-0.40153427369952 * S_PC_11 + -0.33462028191119 * S_PC_12 + 0.90217520388187 * S_PC_13 + 
-0.33102298102444 * S_PC_14 + 0.44286773830646 * S_PC_15 + -0.1743340863053 * S_PC_16 + 
0.33888590637073 * S_PC_17 + 0.30033175969591 * S_PC_2 + -0.06198456990062 * S_PC_3 + 
0.15206104869693 * S_PC_4 + 0.19687028324531 * S_PC_5 + -0.14869138924001 * S_PC_6 + 
0.23507525658256 * S_PC_7 + 0.01699882178668 * S_PC_8 + 0.15026892128111 * S_PC_9 + 
0.18169263767525 * S_Year_Birth ;
681734    +   H14  =    -0.89374260994687 * S_PC_1  +     0.01863540801984 * S_PC_10
681735    +          +     0.18088063260308 * S_PC_11  +      0.2353606921317 * S_PC_12
681736    +          +    -0.32363539668716 * S_PC_13  +     0.27108196537367 * S_PC_14
681737    +          +     0.06388106840059 * S_PC_15  +     0.05316247489981 * S_PC_16
681738    +          +    -0.16157724090976 * S_PC_17  +    -0.75647334309377 * S_PC_2
681739    +          +    -0.68065535863554 * S_PC_3  +     0.92989247031513 * S_PC_4
681740    +          +    -0.24569733058495 * S_PC_5  +    -0.37834002395712 * S_PC_6
681741    +          +     0.33331169771304 * S_PC_7  +     0.63251953048222 * S_PC_8
681742    +          +     0.25962175141496 * S_PC_9  +     -0.1729707105916 *
681743    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.89374260994687 * S_PC_1 + 0.01863540801984 * S_PC_10 + 
0.18088063260308 * S_PC_11 + 0.2353606921317 * S_PC_12 + -0.32363539668716 * S_PC_13 + 
0.27108196537367 * S_PC_14 + 0.06388106840059 * S_PC_15 + 0.05316247489981 * S_PC_16 + 
-0.16157724090976 * S_PC_17 + -0.75647334309377 * S_PC_2 + -0.68065535863554 * S_PC_3 + 
0.92989247031513 * S_PC_4 + -0.24569733058495 * S_PC_5 + -0.37834002395712 * S_PC_6 + 
0.33331169771304 * S_PC_7 + 0.63251953048222 * S_PC_8 + 0.25962175141496 * S_PC_9 + 
-0.1729707105916 * S_Year_Birth ;
681744    +   H15  =     1.01217214844086 * S_PC_1  +    -0.35814334623573 * S_PC_10
681745    +          +    -0.29760011496376 * S_PC_11  +    -0.49659019896438 * S_PC_12
681746    +          +    -0.33762765910786 * S_PC_13  +    -0.09661228531408 * S_PC_14
681747    +          +     0.03016943976546 * S_PC_15  +     0.03847356369148 * S_PC_16
681748    +          +     0.23068042546991 * S_PC_17  +    -0.18214607129888 * S_PC_2
681749    +          +      0.2948848371398 * S_PC_3  +    -0.21096950783847 * S_PC_4
681750    +          +     -0.0076338973148 * S_PC_5  +      0.1810467647118 * S_PC_6
681751    +          +    -0.02747507656548 * S_PC_7  +    -0.12412383565914 * S_PC_8
681752    +          +     0.38941553651228 * S_PC_9  +    -0.01702181419661 *
681753    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 1.01217214844086 * S_PC_1 + -0.35814334623573 * S_PC_10 + 
-0.29760011496376 * S_PC_11 + -0.49659019896438 * S_PC_12 + -0.33762765910786 * S_PC_13 + 
-0.09661228531408 * S_PC_14 + 0.03016943976546 * S_PC_15 + 0.03847356369148 * S_PC_16 + 
0.23068042546991 * S_PC_17 + -0.18214607129888 * S_PC_2 + 0.2948848371398 * S_PC_3 + 
-0.21096950783847 * S_PC_4 + -0.0076338973148 * S_PC_5 + 0.1810467647118 * S_PC_6 + 
-0.02747507656548 * S_PC_7 + -0.12412383565914 * S_PC_8 + 0.38941553651228 * S_PC_9 + 
-0.01702181419661 * S_Year_Birth ;
681754    +   H11  =    -0.57247481264101 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.57247481264101 + H11 ;
681755    +   H12  =    -1.06998164899914 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.06998164899914 + H12 ;
681756    +   H13  =    -0.62403822966094 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.62403822966094 + H13 ;
681757    +   H14  =    -0.98843273802183 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.98843273802183 + H14 ;
681758    +   H15  =    -1.85576808009036 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.85576808009036 + H15 ;
681759    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
681760    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
681761    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
681762    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
681763    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
681764    +END;
MPRINT(EM_DIAGRAM):   END;
681765    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681766    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
681767    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
681768    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
681769    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
681770    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
681771    +END;
MPRINT(EM_DIAGRAM):   END;
681772    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681773    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
681774    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681775    +
681776    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
681777    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
681778    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681779    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
681780    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
681781    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
681782    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
681783    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681784    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681785    +end;
MPRINT(EM_DIAGRAM):   end;
681786    +else do;
MPRINT(EM_DIAGRAM):   else do;
681787    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
681788    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
681789    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
681790    +   end;
MPRINT(EM_DIAGRAM):   end;
681791    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
681792    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
681793    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
681794    +   end;
MPRINT(EM_DIAGRAM):   end;
681795    +   else do;
MPRINT(EM_DIAGRAM):   else do;
681796    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
681797    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
681798    +   end;
MPRINT(EM_DIAGRAM):   end;
681799    +end;
MPRINT(EM_DIAGRAM):   end;
681800    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681801    +   P_DepVar1  =     1.25623874740517 * H11  +      0.3331047690966 * H12
681802    +          +    -2.49839030053881 * H13  +     1.87210386082699 * H14
681803    +          +     2.90192651429203 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.25623874740517 * H11 + 0.3331047690966 * H12 + 
-2.49839030053881 * H13 + 1.87210386082699 * H14 + 2.90192651429203 * H15 ;
681804    +   P_DepVar1  =    -1.10300629264999 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.10300629264999 + P_DepVar1 ;
681805    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
681806    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
681807    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
681808    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
681809    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
681810    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
681811    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
681812    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
681813    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
681814    +END;
MPRINT(EM_DIAGRAM):   END;
681815    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681816    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
681817    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
681818    +END;
MPRINT(EM_DIAGRAM):   END;
681819    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
681820    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
681821    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
681822    +END;
MPRINT(EM_DIAGRAM):   END;
681823    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
681824    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
681825    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
681826    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
681827    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
681828    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
681829    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
681830    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681831    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
681832    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681833    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
681834    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
681835    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
681836    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
681837    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
681838    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
681839    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
681840    +END;
MPRINT(EM_DIAGRAM):   END;
681841    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681842    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
681843    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
681844    +drop
681845    +H11
681846    +H12
681847    +H13
681848    +H14
681849    +H15
681850    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
681851    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
681852     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
681853     quit;
681854     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
681855     filename emflow
681855   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681856     *------------------------------------------------------------*;
681857     * Neural16: Scoring VALIDATE data;
681858     *------------------------------------------------------------*;
681859     data EMWS8.Neural16_VALIDATE
681860     / view=EMWS8.Neural16_VALIDATE
681861     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_VALIDATE / view=EMWS8.Neural16_VALIDATE ;
681862     set EMWS8.PRINCOMP_VALIDATE
681863     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
681864     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
681865    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681866    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
681867    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
681868    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
681869    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
681870    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
681871    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
681872    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
681873    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
681874    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
681875    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
681876    +LENGTH _WARN_ $4
681877    +      F_DepVar  $ 12
681878    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
681879    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
681880    +
681881    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
681882    +
681883    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
681884    +
681885    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
681886    +
681887    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
681888    +
681889    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
681890    +
681891    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
681892    +
681893    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
681894    +
681895    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
681896    +
681897    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
681898    +
681899    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
681900    +
681901    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
681902    +
681903    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
681904    +
681905    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
681906    +
681907    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
681908    +
681909    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
681910    +
681911    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
681912    +
681913    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
681914    +
681915    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
681916    +
681917    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
681918    +
681919    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
681920    +
681921    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
681922    +
681923    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
681924    +
681925    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
681926    +
681927    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
681928    +
681929    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
681930    +
681931    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
681932    +
681933    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
681934    +
681935    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
681936    +
681937    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
681938    +
681939    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
681940    +
681941    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681942    +*** Checking missing input Interval
681943    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
681944    +
681945    +IF NMISS(
681946    +   PC_1 ,
681947    +   PC_10 ,
681948    +   PC_11 ,
681949    +   PC_12 ,
681950    +   PC_13 ,
681951    +   PC_14 ,
681952    +   PC_15 ,
681953    +   PC_16 ,
681954    +   PC_17 ,
681955    +   PC_2 ,
681956    +   PC_3 ,
681957    +   PC_4 ,
681958    +   PC_5 ,
681959    +   PC_6 ,
681960    +   PC_7 ,
681961    +   PC_8 ,
681962    +   PC_9 ,
681963    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
681964    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
681965    +
681966    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
681967    +END;
MPRINT(EM_DIAGRAM):   END;
681968    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681969    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
681970    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
681971    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
681972    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
681973    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
681974    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
681975    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
681976    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
681977    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
681978    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
681979    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
681980    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
681981    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
681982    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
681983    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
681984    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
681985    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
681986    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
681987    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
681988    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
681989    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
681990    +END;
MPRINT(EM_DIAGRAM):   END;
681991    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
681992    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
681993    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
681994    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
681995    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
681996    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
681997    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
681998    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
681999    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
682000    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
682001    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
682002    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
682003    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
682004    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
682005    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
682006    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
682007    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
682008    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
682009    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
682010    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
682011    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
682012    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
682013    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
682014    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
682015    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
682016    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
682017    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
682018    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
682019    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
682020    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
682021    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
682022    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
682023    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
682024    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
682025    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
682026    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
682027    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
682028    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
682029    +END;
MPRINT(EM_DIAGRAM):   END;
682030    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682031    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
682032    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682033    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
682034    +   H11  =     0.68853093447805 * S_PC_1  +    -0.09785920988283 * S_PC_10
682035    +          +      0.2262793582311 * S_PC_11  +     0.42419074975693 * S_PC_12
682036    +          +    -0.54317932872036 * S_PC_13  +     0.53519140067144 * S_PC_14
682037    +          +     -0.1744270307344 * S_PC_15  +     0.18241008555072 * S_PC_16
682038    +          +    -0.25060854902398 * S_PC_17  +    -0.25611405781684 * S_PC_2
682039    +          +    -0.00673065558238 * S_PC_3  +     0.09320597300518 * S_PC_4
682040    +          +    -0.33203252569739 * S_PC_5  +     0.00590705460674 * S_PC_6
682041    +          +     0.06208675544437 * S_PC_7  +     0.33116857183597 * S_PC_8
682042    +          +     0.51908545428588 * S_PC_9  +     0.48276727358582 *
682043    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.68853093447805 * S_PC_1 + -0.09785920988283 * S_PC_10 + 
0.2262793582311 * S_PC_11 + 0.42419074975693 * S_PC_12 + -0.54317932872036 * S_PC_13 + 
0.53519140067144 * S_PC_14 + -0.1744270307344 * S_PC_15 + 0.18241008555072 * S_PC_16 + 
-0.25060854902398 * S_PC_17 + -0.25611405781684 * S_PC_2 + -0.00673065558238 * S_PC_3 + 
0.09320597300518 * S_PC_4 + -0.33203252569739 * S_PC_5 + 0.00590705460674 * S_PC_6 + 
0.06208675544437 * S_PC_7 + 0.33116857183597 * S_PC_8 + 0.51908545428588 * S_PC_9 + 
0.48276727358582 * S_Year_Birth ;
682044    +   H12  =     -0.0070856196308 * S_PC_1  +    -0.18611152691043 * S_PC_10
682045    +          +     0.22534257578583 * S_PC_11  +     0.33020451143395 * S_PC_12
682046    +          +    -0.24237020186597 * S_PC_13  +     0.10222438754058 * S_PC_14
682047    +          +      0.0802825515844 * S_PC_15  +    -0.03133698522933 * S_PC_16
682048    +          +     0.49736449030833 * S_PC_17  +     0.02917890141067 * S_PC_2
682049    +          +    -0.22205362046804 * S_PC_3  +    -0.13304083494845 * S_PC_4
682050    +          +    -0.21899822137746 * S_PC_5  +      0.3085123234701 * S_PC_6
682051    +          +     0.27342786456998 * S_PC_7  +      0.5031708850414 * S_PC_8
682052    +          +     0.01033471788288 * S_PC_9  +     0.03378228698717 *
682053    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.0070856196308 * S_PC_1 + -0.18611152691043 * S_PC_10 + 
0.22534257578583 * S_PC_11 + 0.33020451143395 * S_PC_12 + -0.24237020186597 * S_PC_13 + 
0.10222438754058 * S_PC_14 + 0.0802825515844 * S_PC_15 + -0.03133698522933 * S_PC_16 + 
0.49736449030833 * S_PC_17 + 0.02917890141067 * S_PC_2 + -0.22205362046804 * S_PC_3 + 
-0.13304083494845 * S_PC_4 + -0.21899822137746 * S_PC_5 + 0.3085123234701 * S_PC_6 + 
0.27342786456998 * S_PC_7 + 0.5031708850414 * S_PC_8 + 0.01033471788288 * S_PC_9 + 
0.03378228698717 * S_Year_Birth ;
682054    +   H13  =     -0.3421890003062 * S_PC_1  +     0.61136704886339 * S_PC_10
682055    +          +    -0.40153427369952 * S_PC_11  +    -0.33462028191119 * S_PC_12
682056    +          +     0.90217520388187 * S_PC_13  +    -0.33102298102444 * S_PC_14
682057    +          +     0.44286773830646 * S_PC_15  +     -0.1743340863053 * S_PC_16
682058    +          +     0.33888590637073 * S_PC_17  +     0.30033175969591 * S_PC_2
682059    +          +    -0.06198456990062 * S_PC_3  +     0.15206104869693 * S_PC_4
682060    +          +     0.19687028324531 * S_PC_5  +    -0.14869138924001 * S_PC_6
682061    +          +     0.23507525658256 * S_PC_7  +     0.01699882178668 * S_PC_8
682062    +          +     0.15026892128111 * S_PC_9  +     0.18169263767525 *
682063    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.3421890003062 * S_PC_1 + 0.61136704886339 * S_PC_10 + 
-0.40153427369952 * S_PC_11 + -0.33462028191119 * S_PC_12 + 0.90217520388187 * S_PC_13 + 
-0.33102298102444 * S_PC_14 + 0.44286773830646 * S_PC_15 + -0.1743340863053 * S_PC_16 + 
0.33888590637073 * S_PC_17 + 0.30033175969591 * S_PC_2 + -0.06198456990062 * S_PC_3 + 
0.15206104869693 * S_PC_4 + 0.19687028324531 * S_PC_5 + -0.14869138924001 * S_PC_6 + 
0.23507525658256 * S_PC_7 + 0.01699882178668 * S_PC_8 + 0.15026892128111 * S_PC_9 + 
0.18169263767525 * S_Year_Birth ;
682064    +   H14  =    -0.89374260994687 * S_PC_1  +     0.01863540801984 * S_PC_10
682065    +          +     0.18088063260308 * S_PC_11  +      0.2353606921317 * S_PC_12
682066    +          +    -0.32363539668716 * S_PC_13  +     0.27108196537367 * S_PC_14
682067    +          +     0.06388106840059 * S_PC_15  +     0.05316247489981 * S_PC_16
682068    +          +    -0.16157724090976 * S_PC_17  +    -0.75647334309377 * S_PC_2
682069    +          +    -0.68065535863554 * S_PC_3  +     0.92989247031513 * S_PC_4
682070    +          +    -0.24569733058495 * S_PC_5  +    -0.37834002395712 * S_PC_6
682071    +          +     0.33331169771304 * S_PC_7  +     0.63251953048222 * S_PC_8
682072    +          +     0.25962175141496 * S_PC_9  +     -0.1729707105916 *
682073    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.89374260994687 * S_PC_1 + 0.01863540801984 * S_PC_10 + 
0.18088063260308 * S_PC_11 + 0.2353606921317 * S_PC_12 + -0.32363539668716 * S_PC_13 + 
0.27108196537367 * S_PC_14 + 0.06388106840059 * S_PC_15 + 0.05316247489981 * S_PC_16 + 
-0.16157724090976 * S_PC_17 + -0.75647334309377 * S_PC_2 + -0.68065535863554 * S_PC_3 + 
0.92989247031513 * S_PC_4 + -0.24569733058495 * S_PC_5 + -0.37834002395712 * S_PC_6 + 
0.33331169771304 * S_PC_7 + 0.63251953048222 * S_PC_8 + 0.25962175141496 * S_PC_9 + 
-0.1729707105916 * S_Year_Birth ;
682074    +   H15  =     1.01217214844086 * S_PC_1  +    -0.35814334623573 * S_PC_10
682075    +          +    -0.29760011496376 * S_PC_11  +    -0.49659019896438 * S_PC_12
682076    +          +    -0.33762765910786 * S_PC_13  +    -0.09661228531408 * S_PC_14
682077    +          +     0.03016943976546 * S_PC_15  +     0.03847356369148 * S_PC_16
682078    +          +     0.23068042546991 * S_PC_17  +    -0.18214607129888 * S_PC_2
682079    +          +      0.2948848371398 * S_PC_3  +    -0.21096950783847 * S_PC_4
682080    +          +     -0.0076338973148 * S_PC_5  +      0.1810467647118 * S_PC_6
682081    +          +    -0.02747507656548 * S_PC_7  +    -0.12412383565914 * S_PC_8
682082    +          +     0.38941553651228 * S_PC_9  +    -0.01702181419661 *
682083    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 1.01217214844086 * S_PC_1 + -0.35814334623573 * S_PC_10 + 
-0.29760011496376 * S_PC_11 + -0.49659019896438 * S_PC_12 + -0.33762765910786 * S_PC_13 + 
-0.09661228531408 * S_PC_14 + 0.03016943976546 * S_PC_15 + 0.03847356369148 * S_PC_16 + 
0.23068042546991 * S_PC_17 + -0.18214607129888 * S_PC_2 + 0.2948848371398 * S_PC_3 + 
-0.21096950783847 * S_PC_4 + -0.0076338973148 * S_PC_5 + 0.1810467647118 * S_PC_6 + 
-0.02747507656548 * S_PC_7 + -0.12412383565914 * S_PC_8 + 0.38941553651228 * S_PC_9 + 
-0.01702181419661 * S_Year_Birth ;
682084    +   H11  =    -0.57247481264101 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.57247481264101 + H11 ;
682085    +   H12  =    -1.06998164899914 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.06998164899914 + H12 ;
682086    +   H13  =    -0.62403822966094 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.62403822966094 + H13 ;
682087    +   H14  =    -0.98843273802183 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.98843273802183 + H14 ;
682088    +   H15  =    -1.85576808009036 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.85576808009036 + H15 ;
682089    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
682090    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
682091    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
682092    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
682093    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
682094    +END;
MPRINT(EM_DIAGRAM):   END;
682095    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
682096    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
682097    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
682098    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
682099    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
682100    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
682101    +END;
MPRINT(EM_DIAGRAM):   END;
682102    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682103    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
682104    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682105    +
682106    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
682107    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
682108    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
682109    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
682110    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
682111    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
682112    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
682113    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
682114    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
682115    +end;
MPRINT(EM_DIAGRAM):   end;
682116    +else do;
MPRINT(EM_DIAGRAM):   else do;
682117    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
682118    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
682119    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
682120    +   end;
MPRINT(EM_DIAGRAM):   end;
682121    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
682122    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
682123    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
682124    +   end;
MPRINT(EM_DIAGRAM):   end;
682125    +   else do;
MPRINT(EM_DIAGRAM):   else do;
682126    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
682127    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
682128    +   end;
MPRINT(EM_DIAGRAM):   end;
682129    +end;
MPRINT(EM_DIAGRAM):   end;
682130    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
682131    +   P_DepVar1  =     1.25623874740517 * H11  +      0.3331047690966 * H12
682132    +          +    -2.49839030053881 * H13  +     1.87210386082699 * H14
682133    +          +     2.90192651429203 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.25623874740517 * H11 + 0.3331047690966 * H12 + 
-2.49839030053881 * H13 + 1.87210386082699 * H14 + 2.90192651429203 * H15 ;
682134    +   P_DepVar1  =    -1.10300629264999 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.10300629264999 + P_DepVar1 ;
682135    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
682136    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
682137    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
682138    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
682139    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
682140    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
682141    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
682142    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
682143    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
682144    +END;
MPRINT(EM_DIAGRAM):   END;
682145    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
682146    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
682147    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
682148    +END;
MPRINT(EM_DIAGRAM):   END;
682149    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
682150    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
682151    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
682152    +END;
MPRINT(EM_DIAGRAM):   END;
682153    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
682154    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
682155    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
682156    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
682157    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
682158    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
682159    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
682160    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682161    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
682162    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
682163    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
682164    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
682165    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
682166    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
682167    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
682168    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
682169    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
682170    +END;
MPRINT(EM_DIAGRAM):   END;
682171    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
682172    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
682173    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
682174    +drop
682175    +H11
682176    +H12
682177    +H13
682178    +H14
682179    +H15
682180    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
682181    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
682182     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
682183     quit;
682184     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
682185     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682186     * Neural16: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural16: Computing metadata for TRAIN data;
682187     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural16_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural16_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural16_TRAIN out=WORK.M05PZQ27 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05PZQ27;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M05PZQ27(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05PZQ27;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M05PZQ27;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M075L3AY NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1O6T3FG(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   set WORK.M075L3AY;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural16";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural16";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
682499     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
682500     set EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO;
682501     where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
682502     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL16_EMINFO.
      WHERE (DATA='Neural16') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

682503     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural16_EMINFO;
682504     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
682505     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
682506     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
682510     run;
682511     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
682512     set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
682513     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682514     proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
682515     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682516     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

682517     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
682518     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682519     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682520     proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
682521     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682522     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

682523     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
682524     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
682525     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
682526     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

682527     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
682528     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
682529     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
682530     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL16_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
