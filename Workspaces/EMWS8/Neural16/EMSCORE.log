MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.30 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                12.30 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0847JPS 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0847JPS new;
MPRINT(EM_DIAGRAM):   run;
643323     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
643324     set EMWS8.Neural16_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_OUTKEY;
643325     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
643326     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS8.NEURAL16_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

643327     filename emflow
643327   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
643328     *------------------------------------------------------------*;
643329     * Neural16: Scoring DATA data;
643330     *------------------------------------------------------------*;
643331     data EMWS8.Neural16_TRAIN
643332     / view=EMWS8.Neural16_TRAIN
643333     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_TRAIN / view=EMWS8.Neural16_TRAIN ;
643334     set EMWS8.PRINCOMP_TRAIN
643335     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
643336     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
643337    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
643338    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
643339    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
643340    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
643341    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
643342    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
643343    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
643344    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
643345    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
643346    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
643347    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
643348    +LENGTH _WARN_ $4
643349    +      F_DepVar  $ 12
643350    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
643351    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
643352    +
643353    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
643354    +
643355    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
643356    +
643357    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
643358    +
643359    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
643360    +
643361    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
643362    +
643363    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
643364    +
643365    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
643366    +
643367    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
643368    +
643369    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
643370    +
643371    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
643372    +
643373    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
643374    +
643375    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
643376    +
643377    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
643378    +
643379    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
643380    +
643381    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
643382    +
643383    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
643384    +
643385    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
643386    +
643387    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
643388    +
643389    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
643390    +
643391    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
643392    +
643393    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
643394    +
643395    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
643396    +
643397    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
643398    +
643399    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
643400    +
643401    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
643402    +
643403    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
643404    +
643405    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
643406    +
643407    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
643408    +
643409    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
643410    +
643411    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
643412    +
643413    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643414    +*** Checking missing input Interval
643415    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
643416    +
643417    +IF NMISS(
643418    +   PC_1 ,
643419    +   PC_10 ,
643420    +   PC_11 ,
643421    +   PC_12 ,
643422    +   PC_13 ,
643423    +   PC_14 ,
643424    +   PC_15 ,
643425    +   PC_16 ,
643426    +   PC_17 ,
643427    +   PC_2 ,
643428    +   PC_3 ,
643429    +   PC_4 ,
643430    +   PC_5 ,
643431    +   PC_6 ,
643432    +   PC_7 ,
643433    +   PC_8 ,
643434    +   PC_9 ,
643435    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
643436    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
643437    +
643438    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
643439    +END;
MPRINT(EM_DIAGRAM):   END;
643440    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643441    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
643442    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643443    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643444    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
643445    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
643446    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
643447    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
643448    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
643449    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
643450    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
643451    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
643452    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
643453    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
643454    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
643455    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
643456    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
643457    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
643458    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
643459    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
643460    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
643461    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
643462    +END;
MPRINT(EM_DIAGRAM):   END;
643463    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643464    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
643465    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
643466    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
643467    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
643468    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
643469    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
643470    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
643471    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
643472    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
643473    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
643474    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
643475    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
643476    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
643477    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
643478    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
643479    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
643480    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
643481    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
643482    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
643483    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
643484    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
643485    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
643486    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
643487    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
643488    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
643489    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
643490    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
643491    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
643492    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
643493    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
643494    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
643495    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
643496    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
643497    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
643498    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
643499    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
643500    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
643501    +END;
MPRINT(EM_DIAGRAM):   END;
643502    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643503    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
643504    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643505    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643506    +   H11  =     0.53288365215883 * S_PC_1  +    -0.08501802527388 * S_PC_10
643507    +          +     0.24294632091272 * S_PC_11  +     0.08564368899296 * S_PC_12
643508    +          +    -0.53035830408083 * S_PC_13  +      0.5121391020649 * S_PC_14
643509    +          +    -0.23443462397451 * S_PC_15  +     0.12589911049936 * S_PC_16
643510    +          +    -0.16239710130802 * S_PC_17  +    -0.32581426758909 * S_PC_2
643511    +          +    -0.20464216366267 * S_PC_3  +     0.22276947045479 * S_PC_4
643512    +          +    -0.35154873877133 * S_PC_5  +     0.10083593662047 * S_PC_6
643513    +          +     0.15800533701906 * S_PC_7  +     0.50548257072689 * S_PC_8
643514    +          +     0.39514364275998 * S_PC_9  +     0.32515045755807 *
643515    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.53288365215883 * S_PC_1 + -0.08501802527388 * S_PC_10 + 
0.24294632091272 * S_PC_11 + 0.08564368899296 * S_PC_12 + -0.53035830408083 * S_PC_13 + 
0.5121391020649 * S_PC_14 + -0.23443462397451 * S_PC_15 + 0.12589911049936 * S_PC_16 + 
-0.16239710130802 * S_PC_17 + -0.32581426758909 * S_PC_2 + -0.20464216366267 * S_PC_3 + 
0.22276947045479 * S_PC_4 + -0.35154873877133 * S_PC_5 + 0.10083593662047 * S_PC_6 + 
0.15800533701906 * S_PC_7 + 0.50548257072689 * S_PC_8 + 0.39514364275998 * S_PC_9 + 
0.32515045755807 * S_Year_Birth ;
643516    +   H12  =      -0.043853655425 * S_PC_1  +    -0.19061724013711 * S_PC_10
643517    +          +     0.26459557006509 * S_PC_11  +      0.2593207707985 * S_PC_12
643518    +          +    -0.26786865073847 * S_PC_13  +     0.13899553547117 * S_PC_14
643519    +          +     0.07350772183608 * S_PC_15  +     0.00796758440415 * S_PC_16
643520    +          +     0.48180384116801 * S_PC_17  +     0.07267308309752 * S_PC_2
643521    +          +    -0.20689007049594 * S_PC_3  +    -0.17050866522825 * S_PC_4
643522    +          +    -0.14946225165934 * S_PC_5  +     0.30652242877121 * S_PC_6
643523    +          +     0.28357405053753 * S_PC_7  +     0.46480336446244 * S_PC_8
643524    +          +     0.01609583032462 * S_PC_9  +     0.00173398137223 *
643525    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.043853655425 * S_PC_1 + -0.19061724013711 * S_PC_10 + 
0.26459557006509 * S_PC_11 + 0.2593207707985 * S_PC_12 + -0.26786865073847 * S_PC_13 + 
0.13899553547117 * S_PC_14 + 0.07350772183608 * S_PC_15 + 0.00796758440415 * S_PC_16 + 
0.48180384116801 * S_PC_17 + 0.07267308309752 * S_PC_2 + -0.20689007049594 * S_PC_3 + 
-0.17050866522825 * S_PC_4 + -0.14946225165934 * S_PC_5 + 0.30652242877121 * S_PC_6 + 
0.28357405053753 * S_PC_7 + 0.46480336446244 * S_PC_8 + 0.01609583032462 * S_PC_9 + 
0.00173398137223 * S_Year_Birth ;
643526    +   H13  =    -0.36172085298258 * S_PC_1  +     0.66454780959691 * S_PC_10
643527    +          +    -0.27424530083647 * S_PC_11  +    -0.34999384973279 * S_PC_12
643528    +          +     0.96571997824994 * S_PC_13  +    -0.36525616159781 * S_PC_14
643529    +          +     0.46903433790652 * S_PC_15  +    -0.13367107580258 * S_PC_16
643530    +          +     0.33228828632054 * S_PC_17  +     0.28683205801308 * S_PC_2
643531    +          +     0.00962623192071 * S_PC_3  +     0.15618263559078 * S_PC_4
643532    +          +     0.24047625456325 * S_PC_5  +    -0.16784430119656 * S_PC_6
643533    +          +     0.12766842516835 * S_PC_7  +     0.02728867423451 * S_PC_8
643534    +          +    -0.01057162381608 * S_PC_9  +     0.15356656474238 *
643535    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.36172085298258 * S_PC_1 + 0.66454780959691 * S_PC_10 + 
-0.27424530083647 * S_PC_11 + -0.34999384973279 * S_PC_12 + 0.96571997824994 * S_PC_13 + 
-0.36525616159781 * S_PC_14 + 0.46903433790652 * S_PC_15 + -0.13367107580258 * S_PC_16 + 
0.33228828632054 * S_PC_17 + 0.28683205801308 * S_PC_2 + 0.00962623192071 * S_PC_3 + 
0.15618263559078 * S_PC_4 + 0.24047625456325 * S_PC_5 + -0.16784430119656 * S_PC_6 + 
0.12766842516835 * S_PC_7 + 0.02728867423451 * S_PC_8 + -0.01057162381608 * S_PC_9 + 
0.15356656474238 * S_Year_Birth ;
643536    +   H14  =    -0.77762173235679 * S_PC_1  +     0.20311836899828 * S_PC_10
643537    +          +     0.12507847019416 * S_PC_11  +     0.32850760820196 * S_PC_12
643538    +          +     -0.1850635096084 * S_PC_13  +     0.20783488029059 * S_PC_14
643539    +          +     0.03207086028489 * S_PC_15  +     0.06842826028734 * S_PC_16
643540    +          +    -0.13846289457178 * S_PC_17  +    -0.61658925214495 * S_PC_2
643541    +          +    -0.54111347434373 * S_PC_3  +      0.8995010772565 * S_PC_4
643542    +          +      -0.158174904418 * S_PC_5  +    -0.36746497451964 * S_PC_6
643543    +          +     0.32851201705378 * S_PC_7  +     0.49799179152659 * S_PC_8
643544    +          +     0.23615619563106 * S_PC_9  +     0.03393148113156 *
643545    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.77762173235679 * S_PC_1 + 0.20311836899828 * S_PC_10 + 
0.12507847019416 * S_PC_11 + 0.32850760820196 * S_PC_12 + -0.1850635096084 * S_PC_13 + 
0.20783488029059 * S_PC_14 + 0.03207086028489 * S_PC_15 + 0.06842826028734 * S_PC_16 + 
-0.13846289457178 * S_PC_17 + -0.61658925214495 * S_PC_2 + -0.54111347434373 * S_PC_3 + 
0.8995010772565 * S_PC_4 + -0.158174904418 * S_PC_5 + -0.36746497451964 * S_PC_6 + 
0.32851201705378 * S_PC_7 + 0.49799179152659 * S_PC_8 + 0.23615619563106 * S_PC_9 + 
0.03393148113156 * S_Year_Birth ;
643546    +   H15  =     0.90554749997523 * S_PC_1  +     -0.3290576311032 * S_PC_10
643547    +          +    -0.21593329857816 * S_PC_11  +    -0.34649204173026 * S_PC_12
643548    +          +    -0.20990183909634 * S_PC_13  +    -0.17079973355312 * S_PC_14
643549    +          +     0.14391061023113 * S_PC_15  +     0.03643832628016 * S_PC_16
643550    +          +     0.30965019234785 * S_PC_17  +     -0.2157740573946 * S_PC_2
643551    +          +     0.36116182108773 * S_PC_3  +    -0.24039625990695 * S_PC_4
643552    +          +     0.04132169245218 * S_PC_5  +     0.21230339433421 * S_PC_6
643553    +          +    -0.07744976205828 * S_PC_7  +    -0.17745981465076 * S_PC_8
643554    +          +      0.3436289305111 * S_PC_9  +    -0.03436733240154 *
643555    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.90554749997523 * S_PC_1 + -0.3290576311032 * S_PC_10 + 
-0.21593329857816 * S_PC_11 + -0.34649204173026 * S_PC_12 + -0.20990183909634 * S_PC_13 + 
-0.17079973355312 * S_PC_14 + 0.14391061023113 * S_PC_15 + 0.03643832628016 * S_PC_16 + 
0.30965019234785 * S_PC_17 + -0.2157740573946 * S_PC_2 + 0.36116182108773 * S_PC_3 + 
-0.24039625990695 * S_PC_4 + 0.04132169245218 * S_PC_5 + 0.21230339433421 * S_PC_6 + 
-0.07744976205828 * S_PC_7 + -0.17745981465076 * S_PC_8 + 0.3436289305111 * S_PC_9 + 
-0.03436733240154 * S_Year_Birth ;
643556    +   H11  =    -0.58643762144681 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.58643762144681 + H11 ;
643557    +   H12  =    -1.05096976253293 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.05096976253293 + H12 ;
643558    +   H13  =    -0.45250942632339 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.45250942632339 + H13 ;
643559    +   H14  =    -1.05415585264877 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.05415585264877 + H14 ;
643560    +   H15  =     -1.6599474552435 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.6599474552435 + H15 ;
643561    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
643562    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
643563    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
643564    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
643565    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
643566    +END;
MPRINT(EM_DIAGRAM):   END;
643567    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643568    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
643569    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
643570    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
643571    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
643572    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
643573    +END;
MPRINT(EM_DIAGRAM):   END;
643574    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643575    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
643576    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643577    +
643578    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
643579    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
643580    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
643581    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
643582    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
643583    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
643584    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
643585    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
643586    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
643587    +end;
MPRINT(EM_DIAGRAM):   end;
643588    +else do;
MPRINT(EM_DIAGRAM):   else do;
643589    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
643590    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
643591    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
643592    +   end;
MPRINT(EM_DIAGRAM):   end;
643593    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
643594    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
643595    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
643596    +   end;
MPRINT(EM_DIAGRAM):   end;
643597    +   else do;
MPRINT(EM_DIAGRAM):   else do;
643598    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
643599    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
643600    +   end;
MPRINT(EM_DIAGRAM):   end;
643601    +end;
MPRINT(EM_DIAGRAM):   end;
643602    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643603    +   P_DepVar1  =     1.26475679673828 * H11  +     0.18488626431834 * H12
643604    +          +    -2.54175886922293 * H13  +      1.5651604630991 * H14
643605    +          +     2.65835020050467 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.26475679673828 * H11 + 0.18488626431834 * H12 + 
-2.54175886922293 * H13 + 1.5651604630991 * H14 + 2.65835020050467 * H15 ;
643606    +   P_DepVar1  =    -1.12065382757581 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.12065382757581 + P_DepVar1 ;
643607    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
643608    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
643609    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
643610    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
643611    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
643612    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
643613    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
643614    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
643615    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
643616    +END;
MPRINT(EM_DIAGRAM):   END;
643617    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643618    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
643619    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
643620    +END;
MPRINT(EM_DIAGRAM):   END;
643621    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
643622    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
643623    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
643624    +END;
MPRINT(EM_DIAGRAM):   END;
643625    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
643626    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
643627    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
643628    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
643629    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
643630    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
643631    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
643632    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643633    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
643634    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643635    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
643636    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
643637    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
643638    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
643639    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
643640    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
643641    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
643642    +END;
MPRINT(EM_DIAGRAM):   END;
643643    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
643644    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
643645    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
643646    +drop
643647    +H11
643648    +H12
643649    +H13
643650    +H14
643651    +H15
643652    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
643653    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
643654     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
643655     quit;
643656     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
643657     filename emflow
643657   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
643658     *------------------------------------------------------------*;
643659     * Neural16: Scoring VALIDATE data;
643660     *------------------------------------------------------------*;
643661     data EMWS8.Neural16_VALIDATE
643662     / view=EMWS8.Neural16_VALIDATE
643663     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_VALIDATE / view=EMWS8.Neural16_VALIDATE ;
643664     set EMWS8.PRINCOMP_VALIDATE
643665     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
643666     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural16\EMFLOWSCORE.sas.
643667    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
643668    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
643669    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
643670    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
643671    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
643672    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
643673    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
643674    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
643675    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
643676    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
643677    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
643678    +LENGTH _WARN_ $4
643679    +      F_DepVar  $ 12
643680    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
643681    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
643682    +
643683    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
643684    +
643685    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
643686    +
643687    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
643688    +
643689    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
643690    +
643691    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
643692    +
643693    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
643694    +
643695    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
643696    +
643697    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
643698    +
643699    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
643700    +
643701    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
643702    +
643703    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
643704    +
643705    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
643706    +
643707    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
643708    +
643709    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
643710    +
643711    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
643712    +
643713    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
643714    +
643715    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
643716    +
643717    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
643718    +
643719    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
643720    +
643721    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
643722    +
643723    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
643724    +
643725    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
643726    +
643727    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
643728    +
643729    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
643730    +
643731    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
643732    +
643733    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
643734    +
643735    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
643736    +
643737    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
643738    +
643739    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
643740    +
643741    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
643742    +
643743    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643744    +*** Checking missing input Interval
643745    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
643746    +
643747    +IF NMISS(
643748    +   PC_1 ,
643749    +   PC_10 ,
643750    +   PC_11 ,
643751    +   PC_12 ,
643752    +   PC_13 ,
643753    +   PC_14 ,
643754    +   PC_15 ,
643755    +   PC_16 ,
643756    +   PC_17 ,
643757    +   PC_2 ,
643758    +   PC_3 ,
643759    +   PC_4 ,
643760    +   PC_5 ,
643761    +   PC_6 ,
643762    +   PC_7 ,
643763    +   PC_8 ,
643764    +   PC_9 ,
643765    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
643766    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
643767    +
643768    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
643769    +END;
MPRINT(EM_DIAGRAM):   END;
643770    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643771    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
643772    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643773    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643774    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
643775    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
643776    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
643777    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
643778    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
643779    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
643780    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
643781    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
643782    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
643783    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
643784    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
643785    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
643786    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
643787    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
643788    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
643789    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
643790    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
643791    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
643792    +END;
MPRINT(EM_DIAGRAM):   END;
643793    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643794    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
643795    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
643796    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
643797    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
643798    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
643799    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
643800    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
643801    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
643802    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
643803    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
643804    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
643805    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
643806    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
643807    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
643808    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
643809    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
643810    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
643811    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
643812    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
643813    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
643814    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
643815    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
643816    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
643817    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
643818    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
643819    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
643820    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
643821    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
643822    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
643823    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
643824    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
643825    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
643826    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
643827    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
643828    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
643829    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
643830    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
643831    +END;
MPRINT(EM_DIAGRAM):   END;
643832    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643833    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
643834    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643835    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643836    +   H11  =     0.53288365215883 * S_PC_1  +    -0.08501802527388 * S_PC_10
643837    +          +     0.24294632091272 * S_PC_11  +     0.08564368899296 * S_PC_12
643838    +          +    -0.53035830408083 * S_PC_13  +      0.5121391020649 * S_PC_14
643839    +          +    -0.23443462397451 * S_PC_15  +     0.12589911049936 * S_PC_16
643840    +          +    -0.16239710130802 * S_PC_17  +    -0.32581426758909 * S_PC_2
643841    +          +    -0.20464216366267 * S_PC_3  +     0.22276947045479 * S_PC_4
643842    +          +    -0.35154873877133 * S_PC_5  +     0.10083593662047 * S_PC_6
643843    +          +     0.15800533701906 * S_PC_7  +     0.50548257072689 * S_PC_8
643844    +          +     0.39514364275998 * S_PC_9  +     0.32515045755807 *
643845    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.53288365215883 * S_PC_1 + -0.08501802527388 * S_PC_10 + 
0.24294632091272 * S_PC_11 + 0.08564368899296 * S_PC_12 + -0.53035830408083 * S_PC_13 + 
0.5121391020649 * S_PC_14 + -0.23443462397451 * S_PC_15 + 0.12589911049936 * S_PC_16 + 
-0.16239710130802 * S_PC_17 + -0.32581426758909 * S_PC_2 + -0.20464216366267 * S_PC_3 + 
0.22276947045479 * S_PC_4 + -0.35154873877133 * S_PC_5 + 0.10083593662047 * S_PC_6 + 
0.15800533701906 * S_PC_7 + 0.50548257072689 * S_PC_8 + 0.39514364275998 * S_PC_9 + 
0.32515045755807 * S_Year_Birth ;
643846    +   H12  =      -0.043853655425 * S_PC_1  +    -0.19061724013711 * S_PC_10
643847    +          +     0.26459557006509 * S_PC_11  +      0.2593207707985 * S_PC_12
643848    +          +    -0.26786865073847 * S_PC_13  +     0.13899553547117 * S_PC_14
643849    +          +     0.07350772183608 * S_PC_15  +     0.00796758440415 * S_PC_16
643850    +          +     0.48180384116801 * S_PC_17  +     0.07267308309752 * S_PC_2
643851    +          +    -0.20689007049594 * S_PC_3  +    -0.17050866522825 * S_PC_4
643852    +          +    -0.14946225165934 * S_PC_5  +     0.30652242877121 * S_PC_6
643853    +          +     0.28357405053753 * S_PC_7  +     0.46480336446244 * S_PC_8
643854    +          +     0.01609583032462 * S_PC_9  +     0.00173398137223 *
643855    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.043853655425 * S_PC_1 + -0.19061724013711 * S_PC_10 + 
0.26459557006509 * S_PC_11 + 0.2593207707985 * S_PC_12 + -0.26786865073847 * S_PC_13 + 
0.13899553547117 * S_PC_14 + 0.07350772183608 * S_PC_15 + 0.00796758440415 * S_PC_16 + 
0.48180384116801 * S_PC_17 + 0.07267308309752 * S_PC_2 + -0.20689007049594 * S_PC_3 + 
-0.17050866522825 * S_PC_4 + -0.14946225165934 * S_PC_5 + 0.30652242877121 * S_PC_6 + 
0.28357405053753 * S_PC_7 + 0.46480336446244 * S_PC_8 + 0.01609583032462 * S_PC_9 + 
0.00173398137223 * S_Year_Birth ;
643856    +   H13  =    -0.36172085298258 * S_PC_1  +     0.66454780959691 * S_PC_10
643857    +          +    -0.27424530083647 * S_PC_11  +    -0.34999384973279 * S_PC_12
643858    +          +     0.96571997824994 * S_PC_13  +    -0.36525616159781 * S_PC_14
643859    +          +     0.46903433790652 * S_PC_15  +    -0.13367107580258 * S_PC_16
643860    +          +     0.33228828632054 * S_PC_17  +     0.28683205801308 * S_PC_2
643861    +          +     0.00962623192071 * S_PC_3  +     0.15618263559078 * S_PC_4
643862    +          +     0.24047625456325 * S_PC_5  +    -0.16784430119656 * S_PC_6
643863    +          +     0.12766842516835 * S_PC_7  +     0.02728867423451 * S_PC_8
643864    +          +    -0.01057162381608 * S_PC_9  +     0.15356656474238 *
643865    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.36172085298258 * S_PC_1 + 0.66454780959691 * S_PC_10 + 
-0.27424530083647 * S_PC_11 + -0.34999384973279 * S_PC_12 + 0.96571997824994 * S_PC_13 + 
-0.36525616159781 * S_PC_14 + 0.46903433790652 * S_PC_15 + -0.13367107580258 * S_PC_16 + 
0.33228828632054 * S_PC_17 + 0.28683205801308 * S_PC_2 + 0.00962623192071 * S_PC_3 + 
0.15618263559078 * S_PC_4 + 0.24047625456325 * S_PC_5 + -0.16784430119656 * S_PC_6 + 
0.12766842516835 * S_PC_7 + 0.02728867423451 * S_PC_8 + -0.01057162381608 * S_PC_9 + 
0.15356656474238 * S_Year_Birth ;
643866    +   H14  =    -0.77762173235679 * S_PC_1  +     0.20311836899828 * S_PC_10
643867    +          +     0.12507847019416 * S_PC_11  +     0.32850760820196 * S_PC_12
643868    +          +     -0.1850635096084 * S_PC_13  +     0.20783488029059 * S_PC_14
643869    +          +     0.03207086028489 * S_PC_15  +     0.06842826028734 * S_PC_16
643870    +          +    -0.13846289457178 * S_PC_17  +    -0.61658925214495 * S_PC_2
643871    +          +    -0.54111347434373 * S_PC_3  +      0.8995010772565 * S_PC_4
643872    +          +      -0.158174904418 * S_PC_5  +    -0.36746497451964 * S_PC_6
643873    +          +     0.32851201705378 * S_PC_7  +     0.49799179152659 * S_PC_8
643874    +          +     0.23615619563106 * S_PC_9  +     0.03393148113156 *
643875    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.77762173235679 * S_PC_1 + 0.20311836899828 * S_PC_10 + 
0.12507847019416 * S_PC_11 + 0.32850760820196 * S_PC_12 + -0.1850635096084 * S_PC_13 + 
0.20783488029059 * S_PC_14 + 0.03207086028489 * S_PC_15 + 0.06842826028734 * S_PC_16 + 
-0.13846289457178 * S_PC_17 + -0.61658925214495 * S_PC_2 + -0.54111347434373 * S_PC_3 + 
0.8995010772565 * S_PC_4 + -0.158174904418 * S_PC_5 + -0.36746497451964 * S_PC_6 + 
0.32851201705378 * S_PC_7 + 0.49799179152659 * S_PC_8 + 0.23615619563106 * S_PC_9 + 
0.03393148113156 * S_Year_Birth ;
643876    +   H15  =     0.90554749997523 * S_PC_1  +     -0.3290576311032 * S_PC_10
643877    +          +    -0.21593329857816 * S_PC_11  +    -0.34649204173026 * S_PC_12
643878    +          +    -0.20990183909634 * S_PC_13  +    -0.17079973355312 * S_PC_14
643879    +          +     0.14391061023113 * S_PC_15  +     0.03643832628016 * S_PC_16
643880    +          +     0.30965019234785 * S_PC_17  +     -0.2157740573946 * S_PC_2
643881    +          +     0.36116182108773 * S_PC_3  +    -0.24039625990695 * S_PC_4
643882    +          +     0.04132169245218 * S_PC_5  +     0.21230339433421 * S_PC_6
643883    +          +    -0.07744976205828 * S_PC_7  +    -0.17745981465076 * S_PC_8
643884    +          +      0.3436289305111 * S_PC_9  +    -0.03436733240154 *
643885    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = 0.90554749997523 * S_PC_1 + -0.3290576311032 * S_PC_10 + 
-0.21593329857816 * S_PC_11 + -0.34649204173026 * S_PC_12 + -0.20990183909634 * S_PC_13 + 
-0.17079973355312 * S_PC_14 + 0.14391061023113 * S_PC_15 + 0.03643832628016 * S_PC_16 + 
0.30965019234785 * S_PC_17 + -0.2157740573946 * S_PC_2 + 0.36116182108773 * S_PC_3 + 
-0.24039625990695 * S_PC_4 + 0.04132169245218 * S_PC_5 + 0.21230339433421 * S_PC_6 + 
-0.07744976205828 * S_PC_7 + -0.17745981465076 * S_PC_8 + 0.3436289305111 * S_PC_9 + 
-0.03436733240154 * S_Year_Birth ;
643886    +   H11  =    -0.58643762144681 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.58643762144681 + H11 ;
643887    +   H12  =    -1.05096976253293 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.05096976253293 + H12 ;
643888    +   H13  =    -0.45250942632339 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.45250942632339 + H13 ;
643889    +   H14  =    -1.05415585264877 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.05415585264877 + H14 ;
643890    +   H15  =     -1.6599474552435 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.6599474552435 + H15 ;
643891    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
643892    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
643893    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
643894    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
643895    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
643896    +END;
MPRINT(EM_DIAGRAM):   END;
643897    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643898    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
643899    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
643900    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
643901    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
643902    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
643903    +END;
MPRINT(EM_DIAGRAM):   END;
643904    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643905    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
643906    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643907    +
643908    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
643909    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
643910    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
643911    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
643912    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
643913    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
643914    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
643915    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
643916    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
643917    +end;
MPRINT(EM_DIAGRAM):   end;
643918    +else do;
MPRINT(EM_DIAGRAM):   else do;
643919    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
643920    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
643921    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
643922    +   end;
MPRINT(EM_DIAGRAM):   end;
643923    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
643924    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
643925    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
643926    +   end;
MPRINT(EM_DIAGRAM):   end;
643927    +   else do;
MPRINT(EM_DIAGRAM):   else do;
643928    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
643929    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
643930    +   end;
MPRINT(EM_DIAGRAM):   end;
643931    +end;
MPRINT(EM_DIAGRAM):   end;
643932    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
643933    +   P_DepVar1  =     1.26475679673828 * H11  +     0.18488626431834 * H12
643934    +          +    -2.54175886922293 * H13  +      1.5651604630991 * H14
643935    +          +     2.65835020050467 * H15 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.26475679673828 * H11 + 0.18488626431834 * H12 + 
-2.54175886922293 * H13 + 1.5651604630991 * H14 + 2.65835020050467 * H15 ;
643936    +   P_DepVar1  =    -1.12065382757581 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.12065382757581 + P_DepVar1 ;
643937    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
643938    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
643939    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
643940    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
643941    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
643942    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
643943    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
643944    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
643945    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
643946    +END;
MPRINT(EM_DIAGRAM):   END;
643947    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
643948    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
643949    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
643950    +END;
MPRINT(EM_DIAGRAM):   END;
643951    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
643952    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
643953    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
643954    +END;
MPRINT(EM_DIAGRAM):   END;
643955    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
643956    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
643957    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
643958    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
643959    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
643960    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
643961    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
643962    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643963    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
643964    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
643965    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
643966    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
643967    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
643968    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
643969    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
643970    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
643971    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
643972    +END;
MPRINT(EM_DIAGRAM):   END;
643973    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
643974    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
643975    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
643976    +drop
643977    +H11
643978    +H12
643979    +H13
643980    +H14
643981    +H15
643982    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
643983    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
643984     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL16_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
643985     quit;
643986     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
643987     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
643988     * Neural16: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural16: Computing metadata for TRAIN data;
643989     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural16\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural16_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural16_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural16_TRAIN out=WORK.M2NW6TXO noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2NW6TXO;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NW6TXO(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2NW6TXO;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NW6TXO;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1KV09ID NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1EW0GEH(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KV09ID;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural16";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural16";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural16";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural16: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
644301     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
644302     set EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO;
644303     where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural16' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
644304     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL16_EMINFO.
      WHERE (DATA='Neural16') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

644305     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural16_EMINFO;
644306     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
644307     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
644308     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
644312     run;
644313     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
644314     set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural16_EMINFO WORK.MODELTEMP_INFO;
644315     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644316     proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural16_EMINFO NOTHREADS;
644317     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644318     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

644319     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
644320     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644321     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644322     proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural16_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
644323     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644324     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL16_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644325     data EMWS8.Neural16_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural16_EMINFO;
644326     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
644327     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644328     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL16_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

644329     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
644330     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
644331     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
644332     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL16_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL16_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
