MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.48 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                15.48 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O19IVPGW 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O19IVPGW new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.48 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.48 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
86831      proc freq data=EMWS8.Boost2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Boost2_VariableSet noprint;
86832      table ROLE*LEVEL/out=WORK.Boost2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Boost2META;
86833      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS8.BOOST2_VARIABLESET.
NOTE: The data set WORK.BOOST2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

86834      proc print data=WORK.Boost2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost2META label noobs;
86835      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
86836      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
86836    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
86836    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
86837      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
86838      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
86839      run;

NOTE: There were 5 observations read from the data set WORK.BOOST2META.
NOTE: The PROCEDURE PRINT printed page 107.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

86840      title10;
MPRINT(EM_DIAGRAM):   title10;
86841      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Varsel_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Boost2_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost2_DepVar_DD 
out=EMWS8.Boost2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
86888      data WORK.Boost2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
86889      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
86890      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
86890    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
86890    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
86891         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
86891    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
86891    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
86892      set EMWS8.BOOST2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.BOOST2_DEPVAR_DM( where=(_TYPE_="TARGET"));
86893      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
86894      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
86895      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
86896      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
86897      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
86898      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
86899      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
86900      end;
MPRINT(EM_DIAGRAM):   end;
86901      output;
MPRINT(EM_DIAGRAM):   output;
86902      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.BOOST2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

86903      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
86904      proc print data=WORK.Boost2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost2_EVENT noobs label;
86905      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
86906      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
86907      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
86908      run;

NOTE: There were 1 observations read from the data set WORK.BOOST2_EVENT.
NOTE: The PROCEDURE PRINT printed page 108.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

86909      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
86910      proc print data = EMWS8.Boost2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Boost2_DepVar_DM noobs label;
86911      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
86912      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
86913      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
86913    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
86913    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
86914      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
86915      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
86916      run;

NOTE: There were 7 observations read from the data set EMWS8.BOOST2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 109.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

86917      title10;
MPRINT(EM_DIAGRAM):   title10;
86918      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
87386      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
87387      * Boost2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost2: Generation of macros and macro variables;
87388      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
87389      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

87390      %let EMEXCEPTIONSTRING=;
87391      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
87392      * TRAIN: Boost2;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost2;
87393      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
87394      %let EM_ACTION = TRAIN;
87395      %let syscc = 0;
87396      %macro main;
87397      
87398        filename temp catalog 'sashelp.emmodl.boost_macros.source';
87399        %include temp;
87400        filename temp;
87401      
87402        %setProperties;
87403      
87404        %if %upcase(&EM_ACTION) = CREATE %then %do;
87405          filename temp catalog 'sashelp.emmodl.boost_create.source';
87406          %include temp;
87407          filename temp;
87408      
87409          %create;
87410        %end;
87411      
87412         %else
87413         %if %upcase(&EM_ACTION) = TRAIN %then %do;
87414      
87415             filename temp catalog 'sashelp.emmodl.boost_train.source';
87416             %include temp;
87417             filename temp;
87418             %train;
87419         %end;
87420      
87421        %else
87422        %if %upcase(&EM_ACTION) = SCORE %then %do;
87423          filename temp catalog 'sashelp.emmodl.boost_score.source';
87424          %include temp;
87425          filename temp;
87426      
87427          %score;
87428      
87429        %end;
87430      
87431        %else
87432        %if %upcase(&EM_ACTION) = REPORT %then %do;
87433      
87434             filename temp catalog 'sashelp.emmodl.boost_report.source';
87435             %include temp;
87436             filename temp;
87437      
87438             %report;
87439         %end;
87440      
87441         %doendm:
87442      %mend main;
87443      
87444      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
87446     +%macro SetProperties;
87448     +     /* boost options */
87449     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
87450     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
87451     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
87452     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
87453     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
87454     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
87455     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
87456     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
87457     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
87458     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
87459     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
87460     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
87462     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
87463     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
87464     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
87465     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
87466     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
87467     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
87468     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
87469     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
87471     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
87472     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
87473     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
87474     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
87476     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
87477     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
87478     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
87480     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
87484     +%macro train;
87486     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
87487     +   %include temp;
87488     +   filename temp;
87490     +   %if &EM_IMPORT_DATA eq %then %do;
87491     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
87492     +       %put &em_codebar;
87493     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
87493    !+NOQUOTE));
87494     +       %put &errormsg;
87495     +       %put &em_codebar;
87496     +       %goto doendm;
87497     +   %end;
87498     +   %else
87499     +       %let EMEXCEPTIONSTRING =;
87501     +   %if  &EM_NUM_TARGET ne 1 %then %do;
87502     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
87503     +        %put &em_codebar;
87504     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
87504    !+NOQUOTE));
87505     +        %put &errormsg;
87506     +        %put &em_codebar;
87507     +        %goto doendm;
87508     +   %end;
87510     +   %let target_level = %EM_TARGET_LEVEL;
87511     +   %let target_var = %EM_TARGET;
87513     +   /* check actual num of target levels */
87514     +   %if (&target_Level eq BINARY) %then %do;
87515     +      %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&target_Var,
87516     +                              nLevel=_nTargetLevel );
87517     +      %if &_nTargetLevel  > 2 %then %do;
87518     +        %let EMEXCEPTIONSTRING =
87518    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
87519     +        %put &em_codebar;
87520     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
87520    !+NOQUOTE));
87521     +        %put &errormsg;
87522     +        %put &em_codebar;
87523     +        %goto doendm;
87524     +      %end;
87525     +   %end;
87527     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
87527    !+(&EM_NUM_ORDINAL_INPUT < 1)
87528     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
87529     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
87530     +        %put &em_codebar;
87531     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
87531    !+;
87532     +        %put &errormsg;
87533     +        %put &em_codebar;
87534     +        %goto doendm;
87535     +   %end;
87537     +   /* Initialize property macro variables */
87538     +   %SetProperties;
87540     +   /* data sets */
87541     +   %EM_GETNAME(key=MODEL, type=DATA);
87542     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
87543     +   %EM_GETNAME(key=SUBFIT, type=DATA);
87544     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
87546     +   /* files
87547     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
87549     +   /* retrieve target information */
87550     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
87552     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
87553     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
87554     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
87555     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
87556     +   %do %while(^ %sysfunc(fetch(&dsid)));
87557     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
87558     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
87559     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
87560     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
87561     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
87562     +   %end;
87563     +   %let dsid = %sysfunc(close(&dsid));
87565     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
87565    !+support ordinal target */
87566     +   %if &Target_Level eq ORDINAL %then %do;
87567     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
87568     +        %put &em_codebar;
87569     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
87569    !+error_invalidordinaltarget_note, NOQUOTE));
87570     +        %put &errormsg;
87571     +        %put &em_codebar;
87572     +        %goto doendm;
87573     +   %end;
87575     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
87575    !+thrown */
87576     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
87576    !+)) %then %do;
87577     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
87578     +        %put &em_codebar;
87579     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
87579    !+NOQUOTE));
87580     +        %put &errormsg;
87581     +        %put &em_codebar;
87582     +        %goto doendm;
87583     +   %end;
87585     +   %runBoostProcedure;
87588     +   %doendm:
87589     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
87590     +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
87591     +  %global &nLevel;
87592     +  proc dmdb batch data=&indata
87593     +    classout=_tmp_dmdbout;
87594     +    class &target;
87595     +  run;
87596     +  data _tmp_dmdbout;
87597     +    set _tmp_dmdbout;
87598     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
87599     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
87600     +  run;
87601     +  data _null_;
87602     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
87603     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
87604     +    %let dsid = %sysfunc(close(&dsid));
87605     +     call symput("&nLevel", put(&_obs, Best12.));
87606     +  run;
87608     +  proc datasets lib=work nolist;
87609     +     delete _tmp_dmdbout;
87610     +  run;
87611     +  quit;
87612     +%Mend CheckBinaryTargetLevel;
87615     +%macro runBoostProcedure;
87617     +  proc sql;
87618     +    reset noprint;
87619     +    select count(*) into :nobs from &EM_IMPORT_DATA;
87620     +  quit;
87622     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
87624     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
87625     +      iterations = &EM_PROPERTY_ITERATIONS
87626     +    %end;
87628     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
87629     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
87630     +       trainproportion = &tprop
87631     +    %end;
87633     +    %if &EM_PROPERTY_SEED ne %then %do;
87634     +       seed = &EM_PROPERTY_SEED
87635     +    %end;
87637     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
87638     +       shrinkage = &EM_PROPERTY_SHRINKAGE
87639     +    %end;
87641     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
87642     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
87643     +    %end;
87645     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
87646     +    %if &splitsize ge &nobs %then %do;
87647     +       %let splitsize= .;
87648     +    %end;
87649     +    %if &splitsize ne . %then %do;
87650     +      splitsize = &splitsize
87651     +    %end;
87653     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
87654     +      mincatsize = &EM_PROPERTY_MINCATSIZE
87655     +    %end;
87657     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
87658     +       maxbranch = &EM_PROPERTY_MAXBRANCH
87659     +    %end;
87661     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
87662     +       maxdepth = &EM_PROPERTY_MAXDEPTH
87663     +    %end;
87665     +    %let nsurrs = ;
87666     +    %if &EM_PROPERTY_NSURRS ne %then %do;
87667     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
87667    !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
87668     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
87669     +      maxsurrs = &nsurrs
87670     +    %end;
87672     +    %if &EM_PROPERTY_MISSING ne %then %do;
87673     +      Missing = &EM_PROPERTY_MISSING
87674     +    %end;
87676     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
87677     +      reusevar = &EM_PROPERTY_REUSEVAR
87678     +    %end;
87679     +/*
87680     +    %if &EM_PROPERTY_PRECISION ne %then %do;
87681     +      intervaldecimals=&EM_PROPERTY_PRECISION
87682     +    %end;
87683     +*/
87684     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
87685     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
87686     +    %end;
87688     +    %if &Target_Event ne %then %do;
87689     +      Event="&Target_Event"
87690     +    %end;
87692     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
87693     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
87694     +    %end;
87696     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
87697     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
87698     +    %end;
87700     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
87701     +      %if &EM_PROPERTY_HUBER ne %then %do;
87702     +        Huber=&EM_PROPERTY_HUBER
87703     +      %end;
87704     +    %end;
87705     +    ;
87707     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
87708     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
87709     +    %end;
87711     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
87711    !+ne  %then %do;
87712     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
87712    !+%EM_NOMINAL_REJECTED / level = nominal;
87713     +    %end;
87715     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
87716     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
87717     +    %end;
87719     +    %if %EM_FREQ ne %then %do;
87720     +       freq %EM_FREQ;
87721     +    %end;
87723     +    target %EM_TARGET / level = &TARGET_LEVEL;
87725     +    &EM_DEC_STATEMENT;
87727     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
87728     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
87729     +    %end;
87730     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
87731     +       nodesize = &EM_PROPERTY_NODESIZE
87732     +    %end;
87733     +    ;
87734     +    save model=&EM_USER_MODEL;
87735     +  run;
87736     +  quit;
87737     +  %em_checkerror();
87739     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Varsel_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS8.Varsel_TRAIN;
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS8.Varsel_TRAIN iterations = 
1000 trainproportion = 1 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 20 
maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 15 Exhaustive = 5000 
Event="1                               " CategoricalBins = 100 IntervalBins = 300 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Mnt MntMeatProducts NumCatalogPurchases RFMstat 
Recency
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(RUNBOOSTPROCEDURE):   / level = BINARY;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS8.Boost2_MODEL;
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1566034 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 57655296 bytes.
NOTE: Passed training data 5000 times.
NOTE: Current TREEBOOST model contains 1000 trees.
NOTE: Training used 443728 bytes of work memory.
NOTE: The data set EMWS8.BOOST2_MODEL has 124342 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           28.74 seconds
      cpu time            27.02 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           28.76 seconds
      cpu time            27.02 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

87742      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
87743      
87744      *------------------------------------------------------------*;
87745      * End TRAIN: Boost2;
87746      *------------------------------------------------------------*;

87747      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
87748      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
87749      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
87750      ;
MPRINT(EM_DIAGRAM):   ;
87751      ;
MPRINT(EM_DIAGRAM):   ;
87752      ;
MPRINT(EM_DIAGRAM):   ;
87753      ;
MPRINT(EM_DIAGRAM):   ;
87754      quit;
MPRINT(EM_DIAGRAM):   quit;
87755      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
87756      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
87757      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
87758      /*; *"; *'; */
87759      ;
MPRINT(EM_DIAGRAM):   ;
87760      run;
MPRINT(EM_DIAGRAM):   run;
87761      quit;
MPRINT(EM_DIAGRAM):   quit;
87762      /* Reset EM Options */
87763      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
87764      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
87765      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
