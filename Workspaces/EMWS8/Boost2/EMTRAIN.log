MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.11 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                15.11 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3UM8ZRU 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3UM8ZRU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.11 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.11 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\Boost2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
65912      proc freq data=EMWS8.Boost2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Boost2_VariableSet noprint;
65913      table ROLE*LEVEL/out=WORK.Boost2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Boost2META;
65914      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS8.BOOST2_VARIABLESET.
NOTE: The data set WORK.BOOST2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

65915      proc print data=WORK.Boost2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost2META label noobs;
65916      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
65917      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
65917    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
65917    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
65918      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65919      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
65920      run;

NOTE: There were 5 observations read from the data set WORK.BOOST2META.
NOTE: The PROCEDURE PRINT printed page 68.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

65921      title10;
MPRINT(EM_DIAGRAM):   title10;
65922      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Varsel_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Boost2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Boost2_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost2_DepVar_DD 
out=EMWS8.Boost2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
65969      data WORK.Boost2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
65970      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
65971      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
65971    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
65971    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
65972         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
65972    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
65972    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
65973      set EMWS8.BOOST2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.BOOST2_DEPVAR_DM( where=(_TYPE_="TARGET"));
65974      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
65975      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
65976      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
65977      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
65978      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
65979      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
65980      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
65981      end;
MPRINT(EM_DIAGRAM):   end;
65982      output;
MPRINT(EM_DIAGRAM):   output;
65983      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.BOOST2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

65984      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65985      proc print data=WORK.Boost2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost2_EVENT noobs label;
65986      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
65987      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65988      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
65989      run;

NOTE: There were 1 observations read from the data set WORK.BOOST2_EVENT.
NOTE: The PROCEDURE PRINT printed page 69.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

65990      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
65991      proc print data = EMWS8.Boost2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Boost2_DepVar_DM noobs label;
65992      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
65993      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
65994      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
65994    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
65994    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
65995      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65996      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
65997      run;

NOTE: There were 7 observations read from the data set EMWS8.BOOST2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 70.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

65998      title10;
MPRINT(EM_DIAGRAM):   title10;
65999      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
66466      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66467      * Boost2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost2: Generation of macros and macro variables;
66468      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
66469      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

66470      %let EMEXCEPTIONSTRING=;
66471      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66472      * TRAIN: Boost2;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost2;
66473      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66474      %let EM_ACTION = TRAIN;
66475      %let syscc = 0;
66476      %macro main;
66477      
66478        filename temp catalog 'sashelp.emmodl.boost_macros.source';
66479        %include temp;
66480        filename temp;
66481      
66482        %setProperties;
66483      
66484        %if %upcase(&EM_ACTION) = CREATE %then %do;
66485          filename temp catalog 'sashelp.emmodl.boost_create.source';
66486          %include temp;
66487          filename temp;
66488      
66489          %create;
66490        %end;
66491      
66492         %else
66493         %if %upcase(&EM_ACTION) = TRAIN %then %do;
66494      
66495             filename temp catalog 'sashelp.emmodl.boost_train.source';
66496             %include temp;
66497             filename temp;
66498             %train;
66499         %end;
66500      
66501        %else
66502        %if %upcase(&EM_ACTION) = SCORE %then %do;
66503          filename temp catalog 'sashelp.emmodl.boost_score.source';
66504          %include temp;
66505          filename temp;
66506      
66507          %score;
66508      
66509        %end;
66510      
66511        %else
66512        %if %upcase(&EM_ACTION) = REPORT %then %do;
66513      
66514             filename temp catalog 'sashelp.emmodl.boost_report.source';
66515             %include temp;
66516             filename temp;
66517      
66518             %report;
66519         %end;
66520      
66521         %doendm:
66522      %mend main;
66523      
66524      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
66526     +%macro SetProperties;
66528     +     /* boost options */
66529     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
66530     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
66531     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
66532     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
66533     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
66534     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
66535     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
66536     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
66537     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
66538     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
66539     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
66540     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
66542     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
66543     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
66544     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
66545     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
66546     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
66547     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
66548     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
66549     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
66551     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
66552     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
66553     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
66554     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
66556     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
66557     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
66558     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
66560     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
66564     +%macro train;
66566     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
66567     +   %include temp;
66568     +   filename temp;
66570     +   %if &EM_IMPORT_DATA eq %then %do;
66571     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
66572     +       %put &em_codebar;
66573     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
66573    !+NOQUOTE));
66574     +       %put &errormsg;
66575     +       %put &em_codebar;
66576     +       %goto doendm;
66577     +   %end;
66578     +   %else
66579     +       %let EMEXCEPTIONSTRING =;
66581     +   %if  &EM_NUM_TARGET ne 1 %then %do;
66582     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
66583     +        %put &em_codebar;
66584     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
66584    !+NOQUOTE));
66585     +        %put &errormsg;
66586     +        %put &em_codebar;
66587     +        %goto doendm;
66588     +   %end;
66590     +   %let target_level = %EM_TARGET_LEVEL;
66591     +   %let target_var = %EM_TARGET;
66593     +   /* check actual num of target levels */
66594     +   %if (&target_Level eq BINARY) %then %do;
66595     +      %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&target_Var,
66596     +                              nLevel=_nTargetLevel );
66597     +      %if &_nTargetLevel  > 2 %then %do;
66598     +        %let EMEXCEPTIONSTRING =
66598    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
66599     +        %put &em_codebar;
66600     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
66600    !+NOQUOTE));
66601     +        %put &errormsg;
66602     +        %put &em_codebar;
66603     +        %goto doendm;
66604     +      %end;
66605     +   %end;
66607     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
66607    !+(&EM_NUM_ORDINAL_INPUT < 1)
66608     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
66609     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
66610     +        %put &em_codebar;
66611     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
66611    !+;
66612     +        %put &errormsg;
66613     +        %put &em_codebar;
66614     +        %goto doendm;
66615     +   %end;
66617     +   /* Initialize property macro variables */
66618     +   %SetProperties;
66620     +   /* data sets */
66621     +   %EM_GETNAME(key=MODEL, type=DATA);
66622     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
66623     +   %EM_GETNAME(key=SUBFIT, type=DATA);
66624     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
66626     +   /* files
66627     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
66629     +   /* retrieve target information */
66630     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
66632     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
66633     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
66634     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
66635     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
66636     +   %do %while(^ %sysfunc(fetch(&dsid)));
66637     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
66638     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
66639     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
66640     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
66641     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
66642     +   %end;
66643     +   %let dsid = %sysfunc(close(&dsid));
66645     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
66645    !+support ordinal target */
66646     +   %if &Target_Level eq ORDINAL %then %do;
66647     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
66648     +        %put &em_codebar;
66649     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
66649    !+error_invalidordinaltarget_note, NOQUOTE));
66650     +        %put &errormsg;
66651     +        %put &em_codebar;
66652     +        %goto doendm;
66653     +   %end;
66655     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
66655    !+thrown */
66656     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
66656    !+)) %then %do;
66657     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
66658     +        %put &em_codebar;
66659     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
66659    !+NOQUOTE));
66660     +        %put &errormsg;
66661     +        %put &em_codebar;
66662     +        %goto doendm;
66663     +   %end;
66665     +   %runBoostProcedure;
66668     +   %doendm:
66669     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
66670     +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
66671     +  %global &nLevel;
66672     +  proc dmdb batch data=&indata
66673     +    classout=_tmp_dmdbout;
66674     +    class &target;
66675     +  run;
66676     +  data _tmp_dmdbout;
66677     +    set _tmp_dmdbout;
66678     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
66679     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
66680     +  run;
66681     +  data _null_;
66682     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
66683     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
66684     +    %let dsid = %sysfunc(close(&dsid));
66685     +     call symput("&nLevel", put(&_obs, Best12.));
66686     +  run;
66688     +  proc datasets lib=work nolist;
66689     +     delete _tmp_dmdbout;
66690     +  run;
66691     +  quit;
66692     +%Mend CheckBinaryTargetLevel;
66695     +%macro runBoostProcedure;
66697     +  proc sql;
66698     +    reset noprint;
66699     +    select count(*) into :nobs from &EM_IMPORT_DATA;
66700     +  quit;
66702     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
66704     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
66705     +      iterations = &EM_PROPERTY_ITERATIONS
66706     +    %end;
66708     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
66709     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
66710     +       trainproportion = &tprop
66711     +    %end;
66713     +    %if &EM_PROPERTY_SEED ne %then %do;
66714     +       seed = &EM_PROPERTY_SEED
66715     +    %end;
66717     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
66718     +       shrinkage = &EM_PROPERTY_SHRINKAGE
66719     +    %end;
66721     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
66722     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
66723     +    %end;
66725     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
66726     +    %if &splitsize ge &nobs %then %do;
66727     +       %let splitsize= .;
66728     +    %end;
66729     +    %if &splitsize ne . %then %do;
66730     +      splitsize = &splitsize
66731     +    %end;
66733     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
66734     +      mincatsize = &EM_PROPERTY_MINCATSIZE
66735     +    %end;
66737     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
66738     +       maxbranch = &EM_PROPERTY_MAXBRANCH
66739     +    %end;
66741     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
66742     +       maxdepth = &EM_PROPERTY_MAXDEPTH
66743     +    %end;
66745     +    %let nsurrs = ;
66746     +    %if &EM_PROPERTY_NSURRS ne %then %do;
66747     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
66747    !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
66748     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
66749     +      maxsurrs = &nsurrs
66750     +    %end;
66752     +    %if &EM_PROPERTY_MISSING ne %then %do;
66753     +      Missing = &EM_PROPERTY_MISSING
66754     +    %end;
66756     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
66757     +      reusevar = &EM_PROPERTY_REUSEVAR
66758     +    %end;
66759     +/*
66760     +    %if &EM_PROPERTY_PRECISION ne %then %do;
66761     +      intervaldecimals=&EM_PROPERTY_PRECISION
66762     +    %end;
66763     +*/
66764     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
66765     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
66766     +    %end;
66768     +    %if &Target_Event ne %then %do;
66769     +      Event="&Target_Event"
66770     +    %end;
66772     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
66773     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
66774     +    %end;
66776     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
66777     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
66778     +    %end;
66780     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
66781     +      %if &EM_PROPERTY_HUBER ne %then %do;
66782     +        Huber=&EM_PROPERTY_HUBER
66783     +      %end;
66784     +    %end;
66785     +    ;
66787     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
66788     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
66789     +    %end;
66791     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
66791    !+ne  %then %do;
66792     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
66792    !+%EM_NOMINAL_REJECTED / level = nominal;
66793     +    %end;
66795     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
66796     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
66797     +    %end;
66799     +    %if %EM_FREQ ne %then %do;
66800     +       freq %EM_FREQ;
66801     +    %end;
66803     +    target %EM_TARGET / level = &TARGET_LEVEL;
66805     +    &EM_DEC_STATEMENT;
66807     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
66808     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
66809     +    %end;
66810     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
66811     +       nodesize = &EM_PROPERTY_NODESIZE
66812     +    %end;
66813     +    ;
66814     +    save model=&EM_USER_MODEL;
66815     +  run;
66816     +  quit;
66817     +  %em_checkerror();
66819     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Varsel_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS8.Varsel_TRAIN;
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS8.Varsel_TRAIN iterations = 
1000 trainproportion = 1 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 20 
maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 15 Exhaustive = 5000 
Event="1                               " CategoricalBins = 100 IntervalBins = 300 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Income Mnt NumDistPurchases RFMstat RMntFrq
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(RUNBOOSTPROCEDURE):   / level = BINARY;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS8.Boost2_MODEL;
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1566850 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 57655296 bytes.
NOTE: Passed training data 5000 times.
NOTE: Current TREEBOOST model contains 1000 trees.
NOTE: Training used 443728 bytes of work memory.
NOTE: The data set EMWS8.BOOST2_MODEL has 124984 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           19.73 seconds
      cpu time            19.50 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           19.73 seconds
      cpu time            19.51 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

66822      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66823      
66824      *------------------------------------------------------------*;
66825      * End TRAIN: Boost2;
66826      *------------------------------------------------------------*;

66827      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66828      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
66829      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66830      ;
MPRINT(EM_DIAGRAM):   ;
66831      ;
MPRINT(EM_DIAGRAM):   ;
66832      ;
MPRINT(EM_DIAGRAM):   ;
66833      ;
MPRINT(EM_DIAGRAM):   ;
66834      quit;
MPRINT(EM_DIAGRAM):   quit;
66835      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66836      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
66837      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66838      /*; *"; *'; */
66839      ;
MPRINT(EM_DIAGRAM):   ;
66840      run;
MPRINT(EM_DIAGRAM):   run;
66841      quit;
MPRINT(EM_DIAGRAM):   quit;
66842      /* Reset EM Options */
66843      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
66844      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
66845      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
