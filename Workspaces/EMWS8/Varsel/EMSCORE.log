MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_XT1ZO "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_XT1ZO new;
MPRINT(EM_DIAGRAM):   run;
138507     filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Varsel: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
138508     *------------------------------------------------------------*;
138509     * Varsel: Scoring DATA data;
138510     *------------------------------------------------------------*;
138511     data EMWS8.Varsel_TRAIN
138512     / view=EMWS8.Varsel_TRAIN
138513     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_TRAIN / view=EMWS8.Varsel_TRAIN ;
138514     set EMWS8.Part_TRAIN
138515     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_TRAIN ;
138516     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
138517    +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
138518    +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
138519    +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
138520    +
138521    +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
138522    +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
138523    +
138524    +
138525    +/*----G_Marital_Status begin----*/
138526    +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   length _NORM8 $ 8;
138527    +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
138528    +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
138529    +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
138530    +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
138531    +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
138532    +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
138533    +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
138534    +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
138535    +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
138536    +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
138537    +end;
MPRINT(EM_DIAGRAM):   end;
138538    +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status= "Grouped Levels for Marital_Status";
138539    +/*----G_Marital_Status end----*/
138540    +
138541    +
138542    +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
138543    +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
138544    +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
138545     run;

NOTE: DATA STEP view saved on file EMWS8.VARSEL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
138546     quit;
138547     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
138548     filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Varsel: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
138549     *------------------------------------------------------------*;
138550     * Varsel: Scoring VALIDATE data;
138551     *------------------------------------------------------------*;
138552     data EMWS8.Varsel_VALIDATE
138553     / view=EMWS8.Varsel_VALIDATE
138554     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_VALIDATE / view=EMWS8.Varsel_VALIDATE ;
138555     set EMWS8.Part_VALIDATE
138556     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_VALIDATE ;
138557     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\Varsel\EMFLOWSCORE.sas.
138558    +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
138559    +*** Begin Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMINE ***;
138560    +******************************************;
MPRINT(EM_DIAGRAM):   ******************************************;
138561    +
138562    +length _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   length _WARN_ $ 4;
138563    +label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
138564    +
138565    +
138566    +/*----G_Marital_Status begin----*/
138567    +length _NORM8 $ 8;
MPRINT(EM_DIAGRAM):   length _NORM8 $ 8;
138568    +_NORM8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _NORM8 = put( Marital_Status , $8. );
138569    +%DMNORMIP( _NORM8 )
MPRINT(DMNORMIP):   call dmnorm(_NORM8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
138570    +drop _NORM8;
MPRINT(EM_DIAGRAM):   drop _NORM8;
138571    +select(_NORM8);
MPRINT(EM_DIAGRAM):   select(_NORM8);
138572    +  when("DIVORCED" ) G_Marital_Status = 1;
MPRINT(EM_DIAGRAM):   when("DIVORCED" ) G_Marital_Status = 1;
138573    +  when("MARRIED " ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("MARRIED " ) G_Marital_Status = 2;
138574    +  when("SINGLE  " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("SINGLE  " ) G_Marital_Status = 0;
138575    +  when("TOGETHER" ) G_Marital_Status = 2;
MPRINT(EM_DIAGRAM):   when("TOGETHER" ) G_Marital_Status = 2;
138576    +  when("WIDOW   " ) G_Marital_Status = 0;
MPRINT(EM_DIAGRAM):   when("WIDOW   " ) G_Marital_Status = 0;
138577    +  otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   otherwise substr(_WARN_, 2, 1) = 'U';
138578    +end;
MPRINT(EM_DIAGRAM):   end;
138579    +label G_Marital_Status="Grouped Levels for Marital_Status";
MPRINT(EM_DIAGRAM):   label G_Marital_Status= "Grouped Levels for Marital_Status";
138580    +/*----G_Marital_Status end----*/
138581    +
138582    +
138583    +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
138584    +*** End Scoring Code from PROC DMINE ***;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMINE ***;
138585    +****************************************;
MPRINT(EM_DIAGRAM):   ****************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
138586     run;

NOTE: DATA STEP view saved on file EMWS8.VARSEL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
138587     quit;
138588     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
138589     options nosource;
MPRINT(EM_DIAGRAM):    options nosource;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_R2DS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_OUTRSQUARE;
MPRINT(EM_DIAGRAM):   label Effect = "Effect";
MPRINT(EM_DIAGRAM):   label DF = "Degree of Freedom";
MPRINT(EM_DIAGRAM):   label RSquare = "R-Square";
MPRINT(EM_DIAGRAM):   rename RSquare = R2;
MPRINT(EM_DIAGRAM):   keep Effect DF RSquare;
MPRINT(EM_DIAGRAM):   if Type="AOV16" then delete;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 57 observations read from the data set EMWS8.VARSEL_OUTRSQUARE.
NOTE: The data set EMWS8.VARSEL_R2DS has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Varsel_R2DS;
MPRINT(EM_DIAGRAM):   by descending R2;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.VARSEL_R2DS.
NOTE: The data set EMWS8.VARSEL_R2DS has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    data EMWS8.Varsel_EFFECTDS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_OUTEFFECT;
MPRINT(EM_DIAGRAM):   label RSquare = "Sequential R-Square";
MPRINT(EM_DIAGRAM):   label Effect = "Effect";
MPRINT(EM_DIAGRAM):   label DF = "Degree of Freedom";
MPRINT(EM_DIAGRAM):   Rename RSquare = R2;
MPRINT(EM_DIAGRAM):   keep Effect DF RSquare;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS8.VARSEL_OUTEFFECT.
NOTE: The data set EMWS8.VARSEL_EFFECTDS has 15 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Varsel_EFFECTDS;
MPRINT(EM_DIAGRAM):   by descending R2;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS8.VARSEL_EFFECTDS.
NOTE: The data set EMWS8.VARSEL_EFFECTDS has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Varsel: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\Varsel\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Varsel_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Varsel_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Varsel_TRAIN out=WORK.M088Z9XJ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M088Z9XJ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M088Z9XJ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M088Z9XJ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M088Z9XJ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1Z8MTQV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2EVX46X(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Z8MTQV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Varsel";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Varsel: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'ACCEPTEDCMP1' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP2' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP3' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP4' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP5' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'AGE' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'COMPLAIN' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EDUCATION' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'HIGHEREDUCATIONBINARY' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'KIDHOME' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MARITAL_STATUS' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MNTFISHPRODUCTS' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MNTWINES' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MONTHSASCUSTOMER' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMDEALSPURCHASES' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMDISTPURCHASES' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMSTOREPURCHASES' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMWEBVISITSMONTH' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'TEENHOME' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'YEAR_BIRTH' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   if upcase(strip(name)) = "G_MARITAL_STATUS" then level = "NOMINAL";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    options nonotes nosource;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_RESULTEDVARS(keep = NAME ROLE LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_CMETA_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   length COMMENT $300;
MPRINT(EM_DIAGRAM):   label COMMENT = "Reasons for Rejection";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'ACCEPTEDCMP1' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP2' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP3' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP4' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ACCEPTEDCMP5' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'AGE' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'COMPLAIN' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EDUCATION' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'HIGHEREDUCATIONBINARY' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'KIDHOME' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MARITAL_STATUS' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value, Group variable preferred";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MNTFISHPRODUCTS' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MNTWINES' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'MONTHSASCUSTOMER' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMDEALSPURCHASES' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMDISTPURCHASES' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMSTOREPURCHASES' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'NUMWEBVISITSMONTH' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'TEENHOME' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Small R-square value";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'YEAR_BIRTH' then do;
MPRINT(EM_DIAGRAM):   comment = "Varsel:Unused variable";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   if ROLE not in ('REJECTED' 'INPUT') then delete;
MPRINT(EM_DIAGRAM):   if upcase(name) = "YEAR_BIRTH" and role = 'INPUT' then COMMENT = "Varsel :Unused Input";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Varsel_UNUSEDINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'YEAR_BIRTH' then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'YEAR_BIRTH' then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
MPRINT(EM_DIAGRAM):   run;
139055     run;

139056     data EMWS8.Varsel_CMETA_NONREJECTS EMWS8.Varsel_CMETA_REJECTS;
MPRINT(EM_DIAGRAM):    data EMWS8.Varsel_CMETA_NONREJECTS EMWS8.Varsel_CMETA_REJECTS;
139057     set EMWS8.Varsel_CMETA_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_CMETA_TRAIN;
139058     if ROLE ='REJECTED' then output EMWS8.Varsel_CMETA_REJECTS;
MPRINT(EM_DIAGRAM):   if ROLE ='REJECTED' then output EMWS8.Varsel_CMETA_REJECTS;
139059     else output EMWS8.Varsel_CMETA_NONREJECTS;
MPRINT(EM_DIAGRAM):   else output EMWS8.Varsel_CMETA_NONREJECTS;
139060     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set EMWS8.VARSEL_CMETA_TRAIN.
NOTE: The data set EMWS8.VARSEL_CMETA_NONREJECTS has 18 observations and 20 variables.
NOTE: The data set EMWS8.VARSEL_CMETA_REJECTS has 20 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

139061     data EMWS8.Varsel_CMETA_TRAIN;
MPRINT(EM_DIAGRAM):    data EMWS8.Varsel_CMETA_TRAIN;
139062     set EMWS8.Varsel_CMETA_NONREJECTS;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_CMETA_NONREJECTS;
139063     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARSEL_CMETA_NONREJECTS.
NOTE: The data set EMWS8.VARSEL_CMETA_TRAIN has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

139064     data WORK._tmp_meta_;
MPRINT(EM_DIAGRAM):    data WORK._tmp_meta_;
139065     set EMWS8.Varsel_CMETA_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_CMETA_TRAIN;
139066     if ROLE ^= 'INPUT' then delete;
MPRINT(EM_DIAGRAM):   if ROLE ^= 'INPUT' then delete;
139067     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARSEL_CMETA_TRAIN.
NOTE: The data set WORK._TMP_META_ has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
