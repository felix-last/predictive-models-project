MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VA4JZC 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VA4JZC new;
MPRINT(EM_DIAGRAM):   run;
690792     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
690793     set EMWS8.Neural15_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural15_OUTKEY;
690794     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
690795     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.NEURAL15_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

690796     filename emflow
690796   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural15: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
690797     *------------------------------------------------------------*;
690798     * Neural15: Scoring DATA data;
690799     *------------------------------------------------------------*;
690800     data EMWS8.Neural15_TRAIN
690801     / view=EMWS8.Neural15_TRAIN
690802     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural15_TRAIN / view=EMWS8.Neural15_TRAIN ;
690803     set EMWS8.PRINCOMP_TRAIN
690804     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
690805     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas.
690806    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
690807    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
690808    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
690809    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
690810    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
690811    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
690812    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
690813    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
690814    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
690815    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
690816    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
690817    +LENGTH _WARN_ $4
690818    +      F_DepVar  $ 12
690819    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
690820    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
690821    +
690822    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
690823    +
690824    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
690825    +
690826    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
690827    +
690828    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
690829    +
690830    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
690831    +
690832    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
690833    +
690834    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
690835    +
690836    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
690837    +
690838    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
690839    +
690840    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
690841    +
690842    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
690843    +
690844    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
690845    +
690846    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
690847    +
690848    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
690849    +
690850    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
690851    +
690852    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
690853    +
690854    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
690855    +
690856    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
690857    +
690858    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
690859    +
690860    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
690861    +
690862    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
690863    +
690864    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
690865    +
690866    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
690867    +
690868    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
690869    +
690870    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
690871    +
690872    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
690873    +
690874    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
690875    +
690876    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
690877    +
690878    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
690879    +
690880    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
690881    +*** Checking missing input Interval
690882    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
690883    +
690884    +IF NMISS(
690885    +   PC_1 ,
690886    +   PC_10 ,
690887    +   PC_11 ,
690888    +   PC_12 ,
690889    +   PC_13 ,
690890    +   PC_14 ,
690891    +   PC_15 ,
690892    +   PC_16 ,
690893    +   PC_17 ,
690894    +   PC_2 ,
690895    +   PC_3 ,
690896    +   PC_4 ,
690897    +   PC_5 ,
690898    +   PC_6 ,
690899    +   PC_7 ,
690900    +   PC_8 ,
690901    +   PC_9 ,
690902    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
690903    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
690904    +
690905    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
690906    +END;
MPRINT(EM_DIAGRAM):   END;
690907    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
690908    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
690909    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
690910    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
690911    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
690912    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
690913    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
690914    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
690915    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
690916    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
690917    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
690918    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
690919    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
690920    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
690921    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
690922    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
690923    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
690924    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
690925    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
690926    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
690927    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
690928    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
690929    +END;
MPRINT(EM_DIAGRAM):   END;
690930    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
690931    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
690932    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
690933    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
690934    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
690935    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
690936    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
690937    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
690938    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
690939    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
690940    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
690941    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
690942    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
690943    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
690944    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
690945    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
690946    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
690947    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
690948    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
690949    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
690950    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
690951    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
690952    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
690953    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
690954    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
690955    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
690956    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
690957    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
690958    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
690959    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
The SAS System

MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
690960    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
690961    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
690962    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
690963    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
690964    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
690965    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
690966    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
690967    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
690968    +END;
MPRINT(EM_DIAGRAM):   END;
690969    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
690970    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
690971    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
690972    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
690973    +   H11  =     0.46869680071829 * S_PC_1  +     0.53515767845021 * S_PC_10
690974    +          +     0.91332134879585 * S_PC_11  +    -0.56549380766669 * S_PC_12
690975    +          +    -0.47439134786924 * S_PC_13  +     0.15706747636881 * S_PC_14
690976    +          +    -0.28121143620248 * S_PC_15  +     -0.0660630641321 * S_PC_16
690977    +          +    -0.16936399393449 * S_PC_17  +    -0.69766306821055 * S_PC_2
690978    +          +    -0.61273247065427 * S_PC_3  +    -0.65421711112506 * S_PC_4
690979    +          +      1.8885310176882 * S_PC_5  +    -0.14678899976605 * S_PC_6
690980    +          +     0.81361432077057 * S_PC_7  +    -2.23765638170408 * S_PC_8
690981    +          +    -0.33522612975501 * S_PC_9  +     0.29777310391692 *
690982    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.46869680071829 * S_PC_1 + 0.53515767845021 * S_PC_10 + 
0.91332134879585 * S_PC_11 + -0.56549380766669 * S_PC_12 + -0.47439134786924 * S_PC_13 + 
0.15706747636881 * S_PC_14 + -0.28121143620248 * S_PC_15 + -0.0660630641321 * S_PC_16 + 
-0.16936399393449 * S_PC_17 + -0.69766306821055 * S_PC_2 + -0.61273247065427 * S_PC_3 + 
-0.65421711112506 * S_PC_4 + 1.8885310176882 * S_PC_5 + -0.14678899976605 * S_PC_6 + 
0.81361432077057 * S_PC_7 + -2.23765638170408 * S_PC_8 + -0.33522612975501 * S_PC_9 + 
0.29777310391692 * S_Year_Birth ;
690983    +   H12  =     0.25019246202603 * S_PC_1  +    -0.30132926594914 * S_PC_10
690984    +          +     0.26623921153752 * S_PC_11  +     0.25927452133438 * S_PC_12
690985    +          +    -0.70972225295583 * S_PC_13  +     0.35153331784932 * S_PC_14
690986    +          +    -0.18518300487726 * S_PC_15  +     0.15976527110357 * S_PC_16
690987    +          +    -0.10232312091379 * S_PC_17  +     -0.3658127360462 * S_PC_2
690988    +          +    -0.32891504317723 * S_PC_3  +     0.21036562324713 * S_PC_4
690989    +          +     0.10489569651468 * S_PC_5  +    -0.03965052645582 * S_PC_6
690990    +          +     0.06588275037854 * S_PC_7  +     0.21368149742997 * S_PC_8
690991    +          +     0.16575991499598 * S_PC_9  +     0.37678142817356 *
690992    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.25019246202603 * S_PC_1 + -0.30132926594914 * S_PC_10 + 
0.26623921153752 * S_PC_11 + 0.25927452133438 * S_PC_12 + -0.70972225295583 * S_PC_13 + 
0.35153331784932 * S_PC_14 + -0.18518300487726 * S_PC_15 + 0.15976527110357 * S_PC_16 + 
-0.10232312091379 * S_PC_17 + -0.3658127360462 * S_PC_2 + -0.32891504317723 * S_PC_3 + 
0.21036562324713 * S_PC_4 + 0.10489569651468 * S_PC_5 + -0.03965052645582 * S_PC_6 + 
0.06588275037854 * S_PC_7 + 0.21368149742997 * S_PC_8 + 0.16575991499598 * S_PC_9 + 
0.37678142817356 * S_Year_Birth ;
690993    +   H13  =     0.56598278715964 * S_PC_1  +     -0.6560131519929 * S_PC_10
690994    +          +     0.86276673043983 * S_PC_11  +     0.93659160239074 * S_PC_12
690995    +          +    -1.05127453906738 * S_PC_13  +     0.52450101291782 * S_PC_14
690996    +          +     -0.7200559717032 * S_PC_15  +    -0.05498035311125 * S_PC_16
690997    +          +    -0.70645259409595 * S_PC_17  +      -0.622311716538 * S_PC_2
690998    +          +      -0.018691247623 * S_PC_3  +    -0.08650926014452 * S_PC_4
690999    +          +    -0.55234613902769 * S_PC_5  +     0.36877773908022 * S_PC_6
691000    +          +    -0.42943894582997 * S_PC_7  +    -0.18854707726599 * S_PC_8
691001    +          +    -0.03989102982446 * S_PC_9  +    -0.08146217707249 *
691002    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = 0.56598278715964 * S_PC_1 + -0.6560131519929 * S_PC_10 + 
0.86276673043983 * S_PC_11 + 0.93659160239074 * S_PC_12 + -1.05127453906738 * S_PC_13 + 
0.52450101291782 * S_PC_14 + -0.7200559717032 * S_PC_15 + -0.05498035311125 * S_PC_16 + 
-0.70645259409595 * S_PC_17 + -0.622311716538 * S_PC_2 + -0.018691247623 * S_PC_3 + 
-0.08650926014452 * S_PC_4 + -0.55234613902769 * S_PC_5 + 0.36877773908022 * S_PC_6 + 
-0.42943894582997 * S_PC_7 + -0.18854707726599 * S_PC_8 + -0.03989102982446 * S_PC_9 + 
-0.08146217707249 * S_Year_Birth ;
691003    +   H14  =     1.00641864527646 * S_PC_1  +    -0.41346599515815 * S_PC_10
691004    +          +    -0.34661992582662 * S_PC_11  +    -0.67272292331443 * S_PC_12
691005    +          +    -0.33569738775899 * S_PC_13  +    -0.02890913575241 * S_PC_14
691006    +          +     -0.0605515198529 * S_PC_15  +     0.03571249559281 * S_PC_16
691007    +          +      0.2847703627343 * S_PC_17  +    -0.16271629589908 * S_PC_2
691008    +          +     0.52964147468074 * S_PC_3  +    -0.33068934270513 * S_PC_4
691009    +          +     0.07238724351739 * S_PC_5  +    -0.03272511854832 * S_PC_6
691010    +          +    -0.07339911070876 * S_PC_7  +    -0.29046574671064 * S_PC_8
691011    +          +     0.47930932535214 * S_PC_9  +      0.0318506115502 *
691012    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 1.00641864527646 * S_PC_1 + -0.41346599515815 * S_PC_10 + 
-0.34661992582662 * S_PC_11 + -0.67272292331443 * S_PC_12 + -0.33569738775899 * S_PC_13 + 
-0.02890913575241 * S_PC_14 + -0.0605515198529 * S_PC_15 + 0.03571249559281 * S_PC_16 + 
0.2847703627343 * S_PC_17 + -0.16271629589908 * S_PC_2 + 0.52964147468074 * S_PC_3 + 
-0.33068934270513 * S_PC_4 + 0.07238724351739 * S_PC_5 + -0.03272511854832 * S_PC_6 + 
-0.07339911070876 * S_PC_7 + -0.29046574671064 * S_PC_8 + 0.47930932535214 * S_PC_9 + 
0.0318506115502 * S_Year_Birth ;
691013    +   H11  =     -0.5804626060578 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.5804626060578 + H11 ;
691014    +   H12  =     -0.8310908205064 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.8310908205064 + H12 ;
691015    +   H13  =      1.2672691450253 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.2672691450253 + H13 ;
691016    +   H14  =    -2.34195905920109 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.34195905920109 + H14 ;
691017    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
691018    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
691019    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
691020    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
691021    +END;
MPRINT(EM_DIAGRAM):   END;
691022    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
691023    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
691024    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
691025    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
691026    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
691027    +END;
MPRINT(EM_DIAGRAM):   END;
691028    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691029    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
691030    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691031    +
691032    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
691033    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
691034    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
691035    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
691036    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
691037    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
691038    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
691039    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
691040    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
691041    +end;
MPRINT(EM_DIAGRAM):   end;
691042    +else do;
MPRINT(EM_DIAGRAM):   else do;
691043    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
691044    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
691045    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
691046    +   end;
MPRINT(EM_DIAGRAM):   end;
691047    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
691048    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
691049    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
691050    +   end;
MPRINT(EM_DIAGRAM):   end;
691051    +   else do;
MPRINT(EM_DIAGRAM):   else do;
691052    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
691053    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
691054    +   end;
MPRINT(EM_DIAGRAM):   end;
691055    +end;
MPRINT(EM_DIAGRAM):   end;
691056    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
691057    +   P_DepVar1  =    -2.78636512087722 * H11  +     2.96232206155343 * H12
691058    +          +     2.04650520917727 * H13  +     2.72577868801108 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.78636512087722 * H11 + 2.96232206155343 * H12 + 
2.04650520917727 * H13 + 2.72577868801108 * H14 ;
691059    +   P_DepVar1  =    -1.61492090748328 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.61492090748328 + P_DepVar1 ;
691060    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
691061    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
691062    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
691063    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
691064    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
691065    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
691066    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
691067    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
691068    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
691069    +END;
MPRINT(EM_DIAGRAM):   END;
691070    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
691071    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
691072    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
691073    +END;
MPRINT(EM_DIAGRAM):   END;
691074    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
691075    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
691076    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
691077    +END;
MPRINT(EM_DIAGRAM):   END;
691078    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
691079    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
691080    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
691081    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
691082    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
691083    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
691084    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
691085    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691086    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
691087    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691088    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
691089    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
691090    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
691091    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
691092    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
691093    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
691094    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
691095    +END;
MPRINT(EM_DIAGRAM):   END;
691096    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
691097    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
691098    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
691099    +drop
691100    +H11
691101    +H12
691102    +H13
691103    +H14
691104    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
691105    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
691106     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL15_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
691107     quit;
691108     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
691109     filename emflow
691109   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural15: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
691110     *------------------------------------------------------------*;
691111     * Neural15: Scoring VALIDATE data;
691112     *------------------------------------------------------------*;
691113     data EMWS8.Neural15_VALIDATE
691114     / view=EMWS8.Neural15_VALIDATE
691115     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural15_VALIDATE / view=EMWS8.Neural15_VALIDATE ;
691116     set EMWS8.PRINCOMP_VALIDATE
691117     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
691118     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural15\EMFLOWSCORE.sas.
691119    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
691120    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
691121    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
691122    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
691123    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
691124    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
691125    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
691126    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
691127    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
691128    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
691129    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
691130    +LENGTH _WARN_ $4
691131    +      F_DepVar  $ 12
691132    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
691133    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
691134    +
691135    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
691136    +
691137    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
691138    +
691139    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
691140    +
691141    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
691142    +
691143    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
691144    +
691145    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
691146    +
691147    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
691148    +
691149    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
691150    +
691151    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
691152    +
691153    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
691154    +
691155    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
691156    +
691157    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
691158    +
691159    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
691160    +
691161    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
691162    +
691163    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
691164    +
691165    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
691166    +
691167    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
691168    +
691169    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
691170    +
691171    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
691172    +
691173    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
691174    +
691175    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
691176    +
691177    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
691178    +
691179    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
691180    +
691181    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
691182    +
691183    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
691184    +
691185    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
691186    +
691187    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
691188    +
691189    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
691190    +
691191    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
691192    +
691193    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691194    +*** Checking missing input Interval
691195    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
691196    +
691197    +IF NMISS(
691198    +   PC_1 ,
691199    +   PC_10 ,
691200    +   PC_11 ,
691201    +   PC_12 ,
691202    +   PC_13 ,
691203    +   PC_14 ,
691204    +   PC_15 ,
691205    +   PC_16 ,
691206    +   PC_17 ,
691207    +   PC_2 ,
691208    +   PC_3 ,
691209    +   PC_4 ,
691210    +   PC_5 ,
691211    +   PC_6 ,
691212    +   PC_7 ,
691213    +   PC_8 ,
691214    +   PC_9 ,
691215    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
691216    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
691217    +
691218    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
691219    +END;
MPRINT(EM_DIAGRAM):   END;
691220    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691221    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
691222    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691223    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
691224    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
691225    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
691226    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
691227    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
691228    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
691229    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
691230    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
691231    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
691232    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
691233    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
691234    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
691235    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
691236    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
691237    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
691238    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
691239    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
691240    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
691241    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
691242    +END;
MPRINT(EM_DIAGRAM):   END;
691243    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
691244    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
691245    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
691246    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
691247    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
691248    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
691249    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
691250    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
691251    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
691252    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
691253    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
691254    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
691255    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
691256    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
691257    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
691258    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
691259    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
691260    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
691261    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
691262    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
691263    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
691264    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
691265    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
691266    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
691267    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
691268    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
691269    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
691270    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
691271    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
691272    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
691273    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
691274    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
691275    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
691276    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
691277    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
691278    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
691279    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
691280    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
691281    +END;
MPRINT(EM_DIAGRAM):   END;
691282    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691283    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
691284    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691285    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
691286    +   H11  =     0.46869680071829 * S_PC_1  +     0.53515767845021 * S_PC_10
691287    +          +     0.91332134879585 * S_PC_11  +    -0.56549380766669 * S_PC_12
691288    +          +    -0.47439134786924 * S_PC_13  +     0.15706747636881 * S_PC_14
691289    +          +    -0.28121143620248 * S_PC_15  +     -0.0660630641321 * S_PC_16
691290    +          +    -0.16936399393449 * S_PC_17  +    -0.69766306821055 * S_PC_2
691291    +          +    -0.61273247065427 * S_PC_3  +    -0.65421711112506 * S_PC_4
691292    +          +      1.8885310176882 * S_PC_5  +    -0.14678899976605 * S_PC_6
691293    +          +     0.81361432077057 * S_PC_7  +    -2.23765638170408 * S_PC_8
691294    +          +    -0.33522612975501 * S_PC_9  +     0.29777310391692 *
691295    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.46869680071829 * S_PC_1 + 0.53515767845021 * S_PC_10 + 
0.91332134879585 * S_PC_11 + -0.56549380766669 * S_PC_12 + -0.47439134786924 * S_PC_13 + 
0.15706747636881 * S_PC_14 + -0.28121143620248 * S_PC_15 + -0.0660630641321 * S_PC_16 + 
-0.16936399393449 * S_PC_17 + -0.69766306821055 * S_PC_2 + -0.61273247065427 * S_PC_3 + 
-0.65421711112506 * S_PC_4 + 1.8885310176882 * S_PC_5 + -0.14678899976605 * S_PC_6 + 
0.81361432077057 * S_PC_7 + -2.23765638170408 * S_PC_8 + -0.33522612975501 * S_PC_9 + 
0.29777310391692 * S_Year_Birth ;
691296    +   H12  =     0.25019246202603 * S_PC_1  +    -0.30132926594914 * S_PC_10
691297    +          +     0.26623921153752 * S_PC_11  +     0.25927452133438 * S_PC_12
691298    +          +    -0.70972225295583 * S_PC_13  +     0.35153331784932 * S_PC_14
691299    +          +    -0.18518300487726 * S_PC_15  +     0.15976527110357 * S_PC_16
691300    +          +    -0.10232312091379 * S_PC_17  +     -0.3658127360462 * S_PC_2
691301    +          +    -0.32891504317723 * S_PC_3  +     0.21036562324713 * S_PC_4
691302    +          +     0.10489569651468 * S_PC_5  +    -0.03965052645582 * S_PC_6
691303    +          +     0.06588275037854 * S_PC_7  +     0.21368149742997 * S_PC_8
691304    +          +     0.16575991499598 * S_PC_9  +     0.37678142817356 *
691305    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.25019246202603 * S_PC_1 + -0.30132926594914 * S_PC_10 + 
0.26623921153752 * S_PC_11 + 0.25927452133438 * S_PC_12 + -0.70972225295583 * S_PC_13 + 
0.35153331784932 * S_PC_14 + -0.18518300487726 * S_PC_15 + 0.15976527110357 * S_PC_16 + 
-0.10232312091379 * S_PC_17 + -0.3658127360462 * S_PC_2 + -0.32891504317723 * S_PC_3 + 
0.21036562324713 * S_PC_4 + 0.10489569651468 * S_PC_5 + -0.03965052645582 * S_PC_6 + 
0.06588275037854 * S_PC_7 + 0.21368149742997 * S_PC_8 + 0.16575991499598 * S_PC_9 + 
0.37678142817356 * S_Year_Birth ;
691306    +   H13  =     0.56598278715964 * S_PC_1  +     -0.6560131519929 * S_PC_10
691307    +          +     0.86276673043983 * S_PC_11  +     0.93659160239074 * S_PC_12
691308    +          +    -1.05127453906738 * S_PC_13  +     0.52450101291782 * S_PC_14
691309    +          +     -0.7200559717032 * S_PC_15  +    -0.05498035311125 * S_PC_16
691310    +          +    -0.70645259409595 * S_PC_17  +      -0.622311716538 * S_PC_2
691311    +          +      -0.018691247623 * S_PC_3  +    -0.08650926014452 * S_PC_4
691312    +          +    -0.55234613902769 * S_PC_5  +     0.36877773908022 * S_PC_6
691313    +          +    -0.42943894582997 * S_PC_7  +    -0.18854707726599 * S_PC_8
691314    +          +    -0.03989102982446 * S_PC_9  +    -0.08146217707249 *
691315    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = 0.56598278715964 * S_PC_1 + -0.6560131519929 * S_PC_10 + 
0.86276673043983 * S_PC_11 + 0.93659160239074 * S_PC_12 + -1.05127453906738 * S_PC_13 + 
0.52450101291782 * S_PC_14 + -0.7200559717032 * S_PC_15 + -0.05498035311125 * S_PC_16 + 
-0.70645259409595 * S_PC_17 + -0.622311716538 * S_PC_2 + -0.018691247623 * S_PC_3 + 
-0.08650926014452 * S_PC_4 + -0.55234613902769 * S_PC_5 + 0.36877773908022 * S_PC_6 + 
-0.42943894582997 * S_PC_7 + -0.18854707726599 * S_PC_8 + -0.03989102982446 * S_PC_9 + 
-0.08146217707249 * S_Year_Birth ;
691316    +   H14  =     1.00641864527646 * S_PC_1  +    -0.41346599515815 * S_PC_10
691317    +          +    -0.34661992582662 * S_PC_11  +    -0.67272292331443 * S_PC_12
691318    +          +    -0.33569738775899 * S_PC_13  +    -0.02890913575241 * S_PC_14
691319    +          +     -0.0605515198529 * S_PC_15  +     0.03571249559281 * S_PC_16
691320    +          +      0.2847703627343 * S_PC_17  +    -0.16271629589908 * S_PC_2
691321    +          +     0.52964147468074 * S_PC_3  +    -0.33068934270513 * S_PC_4
691322    +          +     0.07238724351739 * S_PC_5  +    -0.03272511854832 * S_PC_6
691323    +          +    -0.07339911070876 * S_PC_7  +    -0.29046574671064 * S_PC_8
691324    +          +     0.47930932535214 * S_PC_9  +      0.0318506115502 *
691325    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = 1.00641864527646 * S_PC_1 + -0.41346599515815 * S_PC_10 + 
-0.34661992582662 * S_PC_11 + -0.67272292331443 * S_PC_12 + -0.33569738775899 * S_PC_13 + 
-0.02890913575241 * S_PC_14 + -0.0605515198529 * S_PC_15 + 0.03571249559281 * S_PC_16 + 
0.2847703627343 * S_PC_17 + -0.16271629589908 * S_PC_2 + 0.52964147468074 * S_PC_3 + 
-0.33068934270513 * S_PC_4 + 0.07238724351739 * S_PC_5 + -0.03272511854832 * S_PC_6 + 
-0.07339911070876 * S_PC_7 + -0.29046574671064 * S_PC_8 + 0.47930932535214 * S_PC_9 + 
0.0318506115502 * S_Year_Birth ;
691326    +   H11  =     -0.5804626060578 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.5804626060578 + H11 ;
691327    +   H12  =     -0.8310908205064 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.8310908205064 + H12 ;
691328    +   H13  =      1.2672691450253 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.2672691450253 + H13 ;
691329    +   H14  =    -2.34195905920109 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.34195905920109 + H14 ;
691330    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
691331    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
691332    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
691333    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
691334    +END;
MPRINT(EM_DIAGRAM):   END;
691335    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
691336    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
691337    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
691338    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
691339    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
691340    +END;
MPRINT(EM_DIAGRAM):   END;
691341    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691342    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
691343    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691344    +
691345    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
691346    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
691347    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
691348    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
691349    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
691350    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
691351    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
691352    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
691353    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
691354    +end;
MPRINT(EM_DIAGRAM):   end;
691355    +else do;
MPRINT(EM_DIAGRAM):   else do;
691356    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
691357    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
691358    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
691359    +   end;
MPRINT(EM_DIAGRAM):   end;
691360    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
691361    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
691362    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
691363    +   end;
MPRINT(EM_DIAGRAM):   end;
691364    +   else do;
MPRINT(EM_DIAGRAM):   else do;
691365    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
691366    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
691367    +   end;
MPRINT(EM_DIAGRAM):   end;
691368    +end;
MPRINT(EM_DIAGRAM):   end;
691369    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
691370    +   P_DepVar1  =    -2.78636512087722 * H11  +     2.96232206155343 * H12
691371    +          +     2.04650520917727 * H13  +     2.72577868801108 * H14 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.78636512087722 * H11 + 2.96232206155343 * H12 + 
2.04650520917727 * H13 + 2.72577868801108 * H14 ;
691372    +   P_DepVar1  =    -1.61492090748328 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.61492090748328 + P_DepVar1 ;
691373    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
691374    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
691375    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
691376    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
691377    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
691378    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
691379    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
691380    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
691381    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
691382    +END;
MPRINT(EM_DIAGRAM):   END;
691383    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
691384    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
691385    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
691386    +END;
MPRINT(EM_DIAGRAM):   END;
691387    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
691388    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
691389    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
691390    +END;
MPRINT(EM_DIAGRAM):   END;
691391    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
691392    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
691393    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
691394    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
691395    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
691396    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
691397    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
691398    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691399    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
691400    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
691401    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
691402    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
691403    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
691404    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
691405    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
691406    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
691407    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
691408    +END;
MPRINT(EM_DIAGRAM):   END;
691409    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
691410    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
691411    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
691412    +drop
691413    +H11
691414    +H12
691415    +H13
691416    +H14
691417    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
691418    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
691419     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL15_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
691420     quit;
691421     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
691422     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
691423     * Neural15: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural15: Computing metadata for TRAIN data;
691424     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL15_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural15\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural15_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural15_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural15_TRAIN out=WORK.M39FKVEM noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39FKVEM;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M39FKVEM(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39FKVEM;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M39FKVEM;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0I26LTT NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1A2U0_0(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   set WORK.M0I26LTT;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural15_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural15";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural15";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural15";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural15: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
691736     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
691737     set EMWS8.Neural15_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural15_EMINFO;
691738     where DATA='Neural15' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural15' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
691739     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL15_EMINFO.
      WHERE (DATA='Neural15') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

691740     data EMWS8.Neural15_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural15_EMINFO;
691741     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
691742     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
691743     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL15_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
691747     run;
691748     data EMWS8.Neural15_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural15_EMINFO;
691749     set EMWS8.Neural15_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural15_EMINFO WORK.MODELTEMP_INFO;
691750     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL15_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL15_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

691751     proc sort data = EMWS8.Neural15_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural15_EMINFO NOTHREADS;
691752     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
691753     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL15_EMINFO.
NOTE: The data set EMWS8.NEURAL15_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

691754     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
691755     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
691756     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

691757     proc sort data = EMWS8.Neural15_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural15_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
691758     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
691759     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL15_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

691760     data EMWS8.Neural15_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural15_EMINFO;
691761     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
691762     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
691763     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL15_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

691764     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
691765     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
691766     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
691767     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL15_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL15_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
