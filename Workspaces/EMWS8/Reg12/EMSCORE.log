MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.27 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                12.27 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2P6OGE_ 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2P6OGE_ new;
MPRINT(EM_DIAGRAM):   run;
219376     proc transpose data=EMWS8.Reg12_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg12_EMESTIMATE out=WORK.TEMPREG;
219377     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
219378     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG12_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 65 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

219379     proc transpose data=EMWS8.Reg12_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg12_MAPDS out=WORK.TEMPREG2;
219380     var "AcceptedCmp10"n--"Teenhome"n;
MPRINT(EM_DIAGRAM):   var "AcceptedCmp10"n--"Teenhome"n;
219381     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG12_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 31 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

219382     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
219383     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
219384     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 65 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 65 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

219385     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
219386     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
219387     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 31 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

219388     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
219389     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
219390     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
219391     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
219392     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 65 observations read from the data set WORK.TEMPREG.
NOTE: There were 31 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

219393     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
219394     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
219395     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
219396     i=1;
MPRINT(EM_DIAGRAM):   i=1;
219397     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
219398     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
219399     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
219400     output;
MPRINT(EM_DIAGRAM):   output;
219401     end;
MPRINT(EM_DIAGRAM):   end;
219402     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

219403     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
219404     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
219405     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 12 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

219406     filename emflow
219406   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
219407     *------------------------------------------------------------*;
219408     * Reg12: Scoring DATA data;
219409     *------------------------------------------------------------*;
219410     data EMWS8.Reg12_TRAIN
219411     / view=EMWS8.Reg12_TRAIN
219412     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_TRAIN / view=EMWS8.Reg12_TRAIN ;
219413     set EMWS8.Meta3_TRAIN
219414     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN ;
219415     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas.
219416    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
219417    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
219418    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
219419    +
219420    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
219421    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
219422    +
219423    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
219424    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
219425    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
219426    +array REG12DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG12DRF [2] $12 _temporary_ ('1' '0' );
219427    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
219428    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
219429    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
219430    +ARRAY REG12DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG12DRU[2] _TEMPORARY_ (1 0);
219431    +
219432    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
219433    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
219434    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
219435    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
219436    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
219437    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219438    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
219439    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
219440    +end;
MPRINT(EM_DIAGRAM):   end;
219441    +else do;
MPRINT(EM_DIAGRAM):   else do;
219442    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
219443    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
219444    +   end;
MPRINT(EM_DIAGRAM):   end;
219445    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
219446    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
219447    +   end;
MPRINT(EM_DIAGRAM):   end;
219448    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219449    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
219450    +   end;
MPRINT(EM_DIAGRAM):   end;
219451    +end;
MPRINT(EM_DIAGRAM):   end;
219452    +
219453    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
219454    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
219455    +
219456    +*** Check AcceptedCmpTotal for missing values ;
MPRINT(EM_DIAGRAM):   *** Check AcceptedCmpTotal for missing values ;
219457    +if missing( AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmpTotal ) then do;
219458    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219459    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219460    +end;
MPRINT(EM_DIAGRAM):   end;
219461    +
219462    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
219463    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
219464    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219465    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219466    +end;
MPRINT(EM_DIAGRAM):   end;
219467    +
219468    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
219469    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
219470    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219471    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219472    +end;
MPRINT(EM_DIAGRAM):   end;
219473    +
219474    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
219475    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
219476    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219477    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219478    +end;
MPRINT(EM_DIAGRAM):   end;
219479    +
219480    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
219481    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
219482    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219483    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219484    +end;
MPRINT(EM_DIAGRAM):   end;
219485    +
219486    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
219487    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
219488    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219489    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219490    +end;
MPRINT(EM_DIAGRAM):   end;
219491    +
219492    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
219493    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
219494    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219495    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219496    +end;
MPRINT(EM_DIAGRAM):   end;
219497    +
219498    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
219499    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
219500    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219501    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219502    +end;
MPRINT(EM_DIAGRAM):   end;
219503    +
219504    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
219505    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
219506    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219507    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219508    +end;
MPRINT(EM_DIAGRAM):   end;
219509    +
219510    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
219511    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
219512    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
219513    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
219514    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219515    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219516    +end;
MPRINT(EM_DIAGRAM):   end;
219517    +else do;
MPRINT(EM_DIAGRAM):   else do;
219518    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
219519    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
219520    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219521    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
219522    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
219523    +   end;
MPRINT(EM_DIAGRAM):   end;
219524    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
219525    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
219526    +   end;
MPRINT(EM_DIAGRAM):   end;
219527    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219528    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
219529    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219530    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219531    +   end;
MPRINT(EM_DIAGRAM):   end;
219532    +end;
MPRINT(EM_DIAGRAM):   end;
219533    +
219534    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
219535    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
219536    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
219537    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
219538    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219539    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219540    +end;
MPRINT(EM_DIAGRAM):   end;
219541    +else do;
MPRINT(EM_DIAGRAM):   else do;
219542    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
219543    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
219544    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219545    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
219546    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
219547    +   end;
MPRINT(EM_DIAGRAM):   end;
219548    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
219549    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
219550    +   end;
MPRINT(EM_DIAGRAM):   end;
219551    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219552    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
219553    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219554    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219555    +   end;
MPRINT(EM_DIAGRAM):   end;
219556    +end;
MPRINT(EM_DIAGRAM):   end;
219557    +
219558    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
219559    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
219560    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
219561    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
219562    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
219563    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
219564    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
219565    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
219566    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
219567    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
219568    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
219569    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
219570    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219571    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219572    +end;
MPRINT(EM_DIAGRAM):   end;
219573    +else do;
MPRINT(EM_DIAGRAM):   else do;
219574    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
219575    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
219576    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219577    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
219578    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
219579    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
219580    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
219581    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
219582    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219583    +         end;
MPRINT(EM_DIAGRAM):   end;
219584    +         else do;
MPRINT(EM_DIAGRAM):   else do;
219585    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
219586    +               _9_1 = 1;
The SAS System

MPRINT(EM_DIAGRAM):   _9_1 = 1;
219587    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219588    +            end;
MPRINT(EM_DIAGRAM):   end;
219589    +         end;
MPRINT(EM_DIAGRAM):   end;
219590    +      end;
MPRINT(EM_DIAGRAM):   end;
219591    +      else do;
MPRINT(EM_DIAGRAM):   else do;
219592    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
219593    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
219594    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219595    +         end;
MPRINT(EM_DIAGRAM):   end;
219596    +      end;
MPRINT(EM_DIAGRAM):   end;
219597    +   end;
MPRINT(EM_DIAGRAM):   end;
219598    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219599    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
219600    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
219601    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219602    +      end;
MPRINT(EM_DIAGRAM):   end;
219603    +      else do;
MPRINT(EM_DIAGRAM):   else do;
219604    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
219605    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
219606    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
219607    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
219608    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
219609    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219610    +         end;
MPRINT(EM_DIAGRAM):   end;
219611    +      end;
MPRINT(EM_DIAGRAM):   end;
219612    +   end;
MPRINT(EM_DIAGRAM):   end;
219613    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
219614    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
219615    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
219616    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
219617    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
219618    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219619    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219620    +   end;
MPRINT(EM_DIAGRAM):   end;
219621    +end;
MPRINT(EM_DIAGRAM):   end;
219622    +
219623    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
219624    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
219625    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
219626    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
219627    +   goto REG12DR1;
MPRINT(EM_DIAGRAM):   goto REG12DR1;
219628    +end;
MPRINT(EM_DIAGRAM):   end;
219629    +
219630    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
219631    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
219632    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
219633    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
219634    +
219635    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
219636    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219637    +_LP0 = _LP0 + (   -0.41254575292144) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.41254575292144) * _TEMP * _3_0;
219638    +
219639    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
219640    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219641    +_LP0 = _LP0 + (    0.34675190501967) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.34675190501967) * _TEMP * _4_0;
219642    +
219643    +***  Effect: AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmpTotal ;
219644    +_TEMP = AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   _TEMP = AcceptedCmpTotal ;
219645    +_LP0 = _LP0 + (    1.80745311910799 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.80745311910799 * _TEMP);
219646    +
219647    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
219648    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
219649    +_LP0 = _LP0 + (   -0.01852391433447 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01852391433447 * _TEMP);
219650    +
219651    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
219652    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
219653    +_LP0 = _LP0 + (   -0.05045980295154 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05045980295154 * _TEMP);
219654    +
219655    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
219656    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
219657    +_LP0 = _LP0 + (     0.0000456777011 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0000456777011 * _TEMP);
219658    +
219659    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
219660    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219661    +_LP0 = _LP0 + (    0.19470733105664) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19470733105664) * _TEMP * _9_0;
219662    +_LP0 = _LP0 + (   -0.66737124261283) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66737124261283) * _TEMP * _9_1;
219663    +_LP0 = _LP0 + (    0.47354458382979) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.47354458382979) * _TEMP * _9_2;
219664    +_LP0 = _LP0 + (   -0.76484617755918) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.76484617755918) * _TEMP * _9_3;
219665    +
219666    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
219667    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
219668    +_LP0 = _LP0 + (    0.38683487817532 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38683487817532 * _TEMP);
219669    +
219670    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
219671    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
219672    +_LP0 = _LP0 + (    0.30399773949187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.30399773949187 * _TEMP);
219673    +
219674    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
219675    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
219676    +_LP0 = _LP0 + (    0.01122718563179 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01122718563179 * _TEMP);
219677    +
219678    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
219679    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
219680    +_LP0 = _LP0 + (   -0.06483187112579 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.06483187112579 * _TEMP);
219681    +
219682    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
219683    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
219684    +_LP0 = _LP0 + (   -1.33693437973843 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.33693437973843 * _TEMP);
219685    +
219686    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
219687    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
219688    +_TEMP =    -3.46388239032287 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -3.46388239032287 + _LP0;
219689    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
219690    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
219691    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
219692    +end;
MPRINT(EM_DIAGRAM):   end;
219693    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
219694    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
219695    +
219696    +REG12DR1:
219697    +
219698    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG12DR1: *** Residuals;
219699    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
219700    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
219701    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
219702    +end;
MPRINT(EM_DIAGRAM):   end;
219703    +else do;
MPRINT(EM_DIAGRAM):   else do;
219704    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
219705    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
219706    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
219707    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
219708    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
219709    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
219710    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
219711    +   end;
MPRINT(EM_DIAGRAM):   end;
219712    +end;
MPRINT(EM_DIAGRAM):   end;
219713    +
219714    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
219715    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
219716    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
219717    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
219718    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
219719    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
219720    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
219721    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
219722    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
219723    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
219724    +end;
MPRINT(EM_DIAGRAM):   end;
219725    +I_DepVar = REG12DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG12DRF[_IY];
219726    +U_DepVar = REG12DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG12DRU[_IY];
219727    +
219728    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
219729    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
219730    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
219731     run;

NOTE: DATA STEP view saved on file EMWS8.REG12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
219732     quit;
219733     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
219734     filename emflow
219734   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
219735     *------------------------------------------------------------*;
219736     * Reg12: Scoring VALIDATE data;
219737     *------------------------------------------------------------*;
219738     data EMWS8.Reg12_VALIDATE
219739     / view=EMWS8.Reg12_VALIDATE
219740     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_VALIDATE / view=EMWS8.Reg12_VALIDATE ;
219741     set EMWS8.Meta3_VALIDATE
219742     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE ;
219743     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas.
219744    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
219745    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
219746    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
219747    +
219748    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
219749    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
219750    +
219751    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
219752    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
219753    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
219754    +array REG12DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG12DRF [2] $12 _temporary_ ('1' '0' );
219755    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
219756    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
219757    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
219758    +ARRAY REG12DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG12DRU[2] _TEMPORARY_ (1 0);
219759    +
219760    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
219761    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
219762    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
219763    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
219764    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
219765    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219766    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
219767    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
219768    +end;
MPRINT(EM_DIAGRAM):   end;
219769    +else do;
MPRINT(EM_DIAGRAM):   else do;
219770    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
219771    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
219772    +   end;
MPRINT(EM_DIAGRAM):   end;
219773    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
219774    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
219775    +   end;
MPRINT(EM_DIAGRAM):   end;
219776    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219777    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
219778    +   end;
MPRINT(EM_DIAGRAM):   end;
219779    +end;
MPRINT(EM_DIAGRAM):   end;
219780    +
219781    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
219782    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
219783    +
219784    +*** Check AcceptedCmpTotal for missing values ;
MPRINT(EM_DIAGRAM):   *** Check AcceptedCmpTotal for missing values ;
219785    +if missing( AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmpTotal ) then do;
219786    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219787    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219788    +end;
MPRINT(EM_DIAGRAM):   end;
219789    +
219790    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
219791    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
219792    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219793    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219794    +end;
MPRINT(EM_DIAGRAM):   end;
219795    +
219796    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
219797    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
219798    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219799    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219800    +end;
MPRINT(EM_DIAGRAM):   end;
219801    +
219802    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
219803    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
219804    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219805    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219806    +end;
MPRINT(EM_DIAGRAM):   end;
219807    +
219808    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
219809    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
219810    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219811    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219812    +end;
MPRINT(EM_DIAGRAM):   end;
219813    +
219814    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
219815    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
219816    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219817    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219818    +end;
MPRINT(EM_DIAGRAM):   end;
219819    +
219820    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
219821    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
219822    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219823    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219824    +end;
MPRINT(EM_DIAGRAM):   end;
219825    +
219826    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
219827    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
219828    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219829    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219830    +end;
MPRINT(EM_DIAGRAM):   end;
219831    +
219832    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
219833    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
219834    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219835    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219836    +end;
MPRINT(EM_DIAGRAM):   end;
219837    +
219838    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
219839    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
219840    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
219841    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
219842    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219843    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219844    +end;
MPRINT(EM_DIAGRAM):   end;
219845    +else do;
MPRINT(EM_DIAGRAM):   else do;
219846    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
219847    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
219848    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219849    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
219850    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
219851    +   end;
MPRINT(EM_DIAGRAM):   end;
219852    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
219853    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
219854    +   end;
MPRINT(EM_DIAGRAM):   end;
219855    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219856    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
219857    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219858    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219859    +   end;
MPRINT(EM_DIAGRAM):   end;
219860    +end;
MPRINT(EM_DIAGRAM):   end;
219861    +
219862    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
219863    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
219864    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
219865    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
219866    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219867    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219868    +end;
MPRINT(EM_DIAGRAM):   end;
219869    +else do;
MPRINT(EM_DIAGRAM):   else do;
219870    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
219871    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
219872    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219873    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
219874    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
219875    +   end;
MPRINT(EM_DIAGRAM):   end;
219876    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
219877    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
219878    +   end;
MPRINT(EM_DIAGRAM):   end;
219879    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219880    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
219881    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219882    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219883    +   end;
MPRINT(EM_DIAGRAM):   end;
219884    +end;
MPRINT(EM_DIAGRAM):   end;
219885    +
219886    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
219887    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
219888    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
219889    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
219890    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
219891    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
219892    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
219893    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
219894    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
219895    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
219896    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
219897    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
219898    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
219899    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219900    +end;
MPRINT(EM_DIAGRAM):   end;
219901    +else do;
MPRINT(EM_DIAGRAM):   else do;
219902    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
219903    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
219904    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
219905    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
219906    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
219907    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
219908    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
219909    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
219910    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219911    +         end;
MPRINT(EM_DIAGRAM):   end;
219912    +         else do;
MPRINT(EM_DIAGRAM):   else do;
219913    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
219914    +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
219915    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219916    +            end;
MPRINT(EM_DIAGRAM):   end;
219917    +         end;
MPRINT(EM_DIAGRAM):   end;
219918    +      end;
MPRINT(EM_DIAGRAM):   end;
219919    +      else do;
MPRINT(EM_DIAGRAM):   else do;
219920    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
219921    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
219922    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219923    +         end;
MPRINT(EM_DIAGRAM):   end;
219924    +      end;
MPRINT(EM_DIAGRAM):   end;
219925    +   end;
MPRINT(EM_DIAGRAM):   end;
219926    +   else do;
MPRINT(EM_DIAGRAM):   else do;
219927    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
219928    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
219929    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219930    +      end;
MPRINT(EM_DIAGRAM):   end;
219931    +      else do;
MPRINT(EM_DIAGRAM):   else do;
219932    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
219933    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
219934    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
219935    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
219936    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
219937    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
219938    +         end;
MPRINT(EM_DIAGRAM):   end;
219939    +      end;
MPRINT(EM_DIAGRAM):   end;
219940    +   end;
MPRINT(EM_DIAGRAM):   end;
219941    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
219942    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
219943    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
219944    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
219945    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
219946    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
219947    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
219948    +   end;
MPRINT(EM_DIAGRAM):   end;
219949    +end;
MPRINT(EM_DIAGRAM):   end;
219950    +
219951    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
219952    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
219953    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
219954    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
219955    +   goto REG12DR1;
MPRINT(EM_DIAGRAM):   goto REG12DR1;
219956    +end;
MPRINT(EM_DIAGRAM):   end;
219957    +
219958    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
219959    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
219960    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
219961    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
219962    +
219963    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
219964    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219965    +_LP0 = _LP0 + (   -0.41254575292144) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.41254575292144) * _TEMP * _3_0;
219966    +
219967    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
219968    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219969    +_LP0 = _LP0 + (    0.34675190501967) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.34675190501967) * _TEMP * _4_0;
219970    +
219971    +***  Effect: AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmpTotal ;
219972    +_TEMP = AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   _TEMP = AcceptedCmpTotal ;
219973    +_LP0 = _LP0 + (    1.80745311910799 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.80745311910799 * _TEMP);
219974    +
219975    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
219976    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
219977    +_LP0 = _LP0 + (   -0.01852391433447 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01852391433447 * _TEMP);
219978    +
219979    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
219980    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
219981    +_LP0 = _LP0 + (   -0.05045980295154 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05045980295154 * _TEMP);
219982    +
219983    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
219984    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
219985    +_LP0 = _LP0 + (     0.0000456777011 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0000456777011 * _TEMP);
219986    +
219987    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
219988    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
219989    +_LP0 = _LP0 + (    0.19470733105664) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19470733105664) * _TEMP * _9_0;
219990    +_LP0 = _LP0 + (   -0.66737124261283) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66737124261283) * _TEMP * _9_1;
219991    +_LP0 = _LP0 + (    0.47354458382979) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.47354458382979) * _TEMP * _9_2;
219992    +_LP0 = _LP0 + (   -0.76484617755918) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.76484617755918) * _TEMP * _9_3;
219993    +
219994    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
219995    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
219996    +_LP0 = _LP0 + (    0.38683487817532 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38683487817532 * _TEMP);
219997    +
219998    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
219999    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
220000    +_LP0 = _LP0 + (    0.30399773949187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.30399773949187 * _TEMP);
220001    +
220002    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
220003    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
220004    +_LP0 = _LP0 + (    0.01122718563179 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01122718563179 * _TEMP);
220005    +
220006    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
220007    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
220008    +_LP0 = _LP0 + (   -0.06483187112579 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.06483187112579 * _TEMP);
220009    +
220010    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
220011    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
220012    +_LP0 = _LP0 + (   -1.33693437973843 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.33693437973843 * _TEMP);
220013    +
220014    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
220015    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
220016    +_TEMP =    -3.46388239032287 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -3.46388239032287 + _LP0;
220017    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
220018    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
220019    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
220020    +end;
MPRINT(EM_DIAGRAM):   end;
220021    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
220022    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
220023    +
220024    +REG12DR1:
220025    +
220026    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG12DR1: *** Residuals;
220027    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
220028    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
220029    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
220030    +end;
MPRINT(EM_DIAGRAM):   end;
220031    +else do;
MPRINT(EM_DIAGRAM):   else do;
220032    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
220033    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
220034    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
220035    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
220036    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
220037    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
220038    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
220039    +   end;
MPRINT(EM_DIAGRAM):   end;
220040    +end;
MPRINT(EM_DIAGRAM):   end;
220041    +
220042    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
220043    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
220044    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
220045    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
220046    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
220047    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
220048    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
220049    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
220050    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
220051    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
220052    +end;
MPRINT(EM_DIAGRAM):   end;
220053    +I_DepVar = REG12DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG12DRF[_IY];
220054    +U_DepVar = REG12DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG12DRU[_IY];
220055    +
220056    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
220057    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
220058    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
220059     run;

NOTE: DATA STEP view saved on file EMWS8.REG12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
220060     quit;
220061     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
220062     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
220063     * Reg12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg12: Computing metadata for TRAIN data;
220064     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG12_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg12_TRAIN out=WORK.M088W1R7 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M088W1R7;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M088W1R7(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M088W1R7;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M088W1R7;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0JV8DVY NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1S9TA16(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JV8DVY;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ACCEPTEDCMP3' 'ACCEPTEDCMP4' 'ACCEPTEDCMPTOTAL' 
'AGE' 'FRQ' 'INCOME' 'MARITAL_STATUS' 'NUMDEALSPURCHASES' 'NUMWEBVISITSMONTH' 'RMNTFRQ' 
'RECENCY' 'TEENHOME' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg12: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
220396     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
220397     set EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg12_EMINFO;
220398     where DATA='Reg12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
220399     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG12_EMINFO.
      WHERE (DATA='Reg12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

220400     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg12_EMINFO;
220401     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
220402     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
220403     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
220407     run;
220408     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_EMINFO;
220409     set EMWS8.Reg12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg12_EMINFO WORK.MODELTEMP_INFO;
220410     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

220411     proc sort data = EMWS8.Reg12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg12_EMINFO NOTHREADS;
220412     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
220413     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

220414     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
220415     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
220416     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

220417     proc sort data = EMWS8.Reg12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
220418     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
220419     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

220420     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_EMINFO;
220421     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
220422     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
220423     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

220424     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
220425     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
220426     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
220427     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.REG12_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.REG12_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
