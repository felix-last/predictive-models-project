MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.05 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                20.05 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0_D5DKG 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0_D5DKG new;
MPRINT(EM_DIAGRAM):   run;
796379     proc transpose data=EMWS8.Reg12_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg12_EMESTIMATE out=WORK.TEMPREG;
796380     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
796381     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG12_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 46 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

796382     proc transpose data=EMWS8.Reg12_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg12_MAPDS out=WORK.TEMPREG2;
796383     var "AcceptedCmpTotal"n--"Recency"n;
MPRINT(EM_DIAGRAM):   var "AcceptedCmpTotal"n--"Recency"n;
796384     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG12_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 12 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

796385     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
796386     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
796387     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 46 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

796388     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
796389     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
796390     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 12 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

796391     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
796392     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
796393     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
796394     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
796395     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 46 observations read from the data set WORK.TEMPREG.
NOTE: There were 12 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

796396     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
796397     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
796398     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
796399     i=1;
MPRINT(EM_DIAGRAM):   i=1;
796400     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
796401     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
796402     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
796403     output;
MPRINT(EM_DIAGRAM):   output;
796404     end;
MPRINT(EM_DIAGRAM):   end;
796405     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 12 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

796406     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
796407     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
796408     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPREG3.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 9 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

796409     filename emflow
796409   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
796410     *------------------------------------------------------------*;
796411     * Reg12: Scoring DATA data;
796412     *------------------------------------------------------------*;
796413     data EMWS8.Reg12_TRAIN
796414     / view=EMWS8.Reg12_TRAIN
796415     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_TRAIN / view=EMWS8.Reg12_TRAIN ;
796416     set EMWS8.Meta3_TRAIN
796417     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN ;
796418     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas.
796419    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796420    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
796421    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796422    +
796423    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
796424    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
796425    +
796426    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
796427    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
796428    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
796429    +array REG12DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG12DRF [2] $12 _temporary_ ('1' '0' );
796430    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
796431    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
796432    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
796433    +ARRAY REG12DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG12DRU[2] _TEMPORARY_ (1 0);
796434    +
796435    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
796436    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
796437    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
796438    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
796439    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
796440    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
796441    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
796442    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
796443    +end;
MPRINT(EM_DIAGRAM):   end;
796444    +else do;
MPRINT(EM_DIAGRAM):   else do;
796445    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
796446    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
796447    +   end;
MPRINT(EM_DIAGRAM):   end;
796448    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
796449    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
796450    +   end;
MPRINT(EM_DIAGRAM):   end;
796451    +   else do;
MPRINT(EM_DIAGRAM):   else do;
796452    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
796453    +   end;
MPRINT(EM_DIAGRAM):   end;
796454    +end;
MPRINT(EM_DIAGRAM):   end;
796455    +
796456    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
796457    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
796458    +
796459    +*** Check AcceptedCmpTotal for missing values ;
MPRINT(EM_DIAGRAM):   *** Check AcceptedCmpTotal for missing values ;
796460    +if missing( AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmpTotal ) then do;
796461    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796462    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796463    +end;
MPRINT(EM_DIAGRAM):   end;
796464    +
796465    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
796466    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
796467    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796468    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796469    +end;
MPRINT(EM_DIAGRAM):   end;
796470    +
796471    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
796472    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
796473    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796474    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796475    +end;
MPRINT(EM_DIAGRAM):   end;
796476    +
796477    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
796478    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
796479    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796480    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796481    +end;
MPRINT(EM_DIAGRAM):   end;
796482    +
796483    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
796484    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
796485    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796486    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796487    +end;
MPRINT(EM_DIAGRAM):   end;
796488    +
796489    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
796490    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
796491    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796492    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796493    +end;
MPRINT(EM_DIAGRAM):   end;
796494    +
796495    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
796496    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
796497    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796498    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796499    +end;
MPRINT(EM_DIAGRAM):   end;
796500    +
796501    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
796502    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
796503    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796504    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796505    +end;
MPRINT(EM_DIAGRAM):   end;
796506    +
796507    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
796508    +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
796509    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
796510    +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
796511    +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
796512    +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
796513    +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
796514    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
796515    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
796516    +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
796517    +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
796518    +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
796519    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796520    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796521    +end;
MPRINT(EM_DIAGRAM):   end;
796522    +else do;
MPRINT(EM_DIAGRAM):   else do;
796523    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
796524    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
796525    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
796526    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
796527    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
796528    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
796529    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
796530    +            _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
796531    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796532    +         end;
MPRINT(EM_DIAGRAM):   end;
796533    +         else do;
MPRINT(EM_DIAGRAM):   else do;
796534    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
796535    +               _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
796536    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796537    +            end;
MPRINT(EM_DIAGRAM):   end;
796538    +         end;
MPRINT(EM_DIAGRAM):   end;
796539    +      end;
MPRINT(EM_DIAGRAM):   end;
796540    +      else do;
MPRINT(EM_DIAGRAM):   else do;
796541    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
796542    +            _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
796543    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796544    +         end;
MPRINT(EM_DIAGRAM):   end;
796545    +      end;
MPRINT(EM_DIAGRAM):   end;
796546    +   end;
MPRINT(EM_DIAGRAM):   end;
796547    +   else do;
MPRINT(EM_DIAGRAM):   else do;
796548    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
796549    +         _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
796550    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796551    +      end;
MPRINT(EM_DIAGRAM):   end;
796552    +      else do;
MPRINT(EM_DIAGRAM):   else do;
796553    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
796554    +            _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
796555    +            _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
796556    +            _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
796557    +            _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
796558    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796559    +         end;
MPRINT(EM_DIAGRAM):   end;
796560    +      end;
MPRINT(EM_DIAGRAM):   end;
796561    +   end;
MPRINT(EM_DIAGRAM):   end;
796562    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
796563    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
796564    +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
796565    +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
796566    +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
796567    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
796568    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796569    +   end;
MPRINT(EM_DIAGRAM):   end;
796570    +end;
MPRINT(EM_DIAGRAM):   end;
796571    +
796572    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
796573    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
796574    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
796575    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
796576    +   goto REG12DR1;
MPRINT(EM_DIAGRAM):   goto REG12DR1;
796577    +end;
MPRINT(EM_DIAGRAM):   end;
796578    +
796579    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
796580    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
796581    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
796582    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
796583    +
796584    +***  Effect: AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmpTotal ;
796585    +_TEMP = AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   _TEMP = AcceptedCmpTotal ;
796586    +_LP0 = _LP0 + (    2.91278643457381 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.91278643457381 * _TEMP);
796587    +
796588    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
796589    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
796590    +_LP0 = _LP0 + (   -0.29070071451539 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.29070071451539 * _TEMP);
796591    +
796592    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
796593    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
796594    +_LP0 = _LP0 + (    0.08044802466944) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08044802466944) * _TEMP * _1_0;
796595    +_LP0 = _LP0 + (   -0.81043379256053) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.81043379256053) * _TEMP * _1_1;
796596    +_LP0 = _LP0 + (    0.82981010582138) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.82981010582138) * _TEMP * _1_2;
796597    +_LP0 = _LP0 + (   -0.86325418976783) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.86325418976783) * _TEMP * _1_3;
796598    +
796599    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
796600    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
796601    +_LP0 = _LP0 + (   -0.00257118165656 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00257118165656 * _TEMP);
796602    +
796603    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
796604    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
796605    +_LP0 = _LP0 + (    0.01212481906959 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01212481906959 * _TEMP);
796606    +
796607    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
796608    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
796609    +_LP0 = _LP0 + (    1.02604890063437 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.02604890063437 * _TEMP);
796610    +
796611    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
796612    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
796613    +_LP0 = _LP0 + (    0.51747253477408 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.51747253477408 * _TEMP);
796614    +
796615    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
796616    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
796617    +_LP0 = _LP0 + (    0.77987169824887 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.77987169824887 * _TEMP);
796618    +
796619    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
796620    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
796621    +_LP0 = _LP0 + (   -0.09331353606711 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09331353606711 * _TEMP);
796622    +
796623    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
796624    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
796625    +_TEMP =     -5.4430055929719 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -5.4430055929719 + _LP0;
796626    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
796627    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
796628    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
796629    +end;
MPRINT(EM_DIAGRAM):   end;
796630    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
796631    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
796632    +
796633    +REG12DR1:
796634    +
796635    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG12DR1: *** Residuals;
796636    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
796637    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
796638    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
796639    +end;
MPRINT(EM_DIAGRAM):   end;
796640    +else do;
MPRINT(EM_DIAGRAM):   else do;
796641    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
796642    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
796643    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
796644    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
796645    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
796646    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
796647    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
796648    +   end;
MPRINT(EM_DIAGRAM):   end;
796649    +end;
MPRINT(EM_DIAGRAM):   end;
796650    +
796651    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
796652    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
796653    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
796654    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
796655    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
796656    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
796657    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
796658    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
796659    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
796660    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
796661    +end;
MPRINT(EM_DIAGRAM):   end;
796662    +I_DepVar = REG12DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG12DRF[_IY];
796663    +U_DepVar = REG12DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG12DRU[_IY];
796664    +
796665    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796666    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
796667    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
796668     run;

NOTE: DATA STEP view saved on file EMWS8.REG12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
796669     quit;
796670     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
796671     filename emflow
796671   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
796672     *------------------------------------------------------------*;
796673     * Reg12: Scoring VALIDATE data;
796674     *------------------------------------------------------------*;
796675     data EMWS8.Reg12_VALIDATE
796676     / view=EMWS8.Reg12_VALIDATE
796677     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_VALIDATE / view=EMWS8.Reg12_VALIDATE ;
796678     set EMWS8.Meta3_VALIDATE
796679     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE ;
796680     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg12\EMFLOWSCORE.sas.
796681    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796682    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
796683    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796684    +
796685    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
796686    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
796687    +
796688    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
796689    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
796690    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
796691    +array REG12DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG12DRF [2] $12 _temporary_ ('1' '0' );
796692    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
796693    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
796694    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
796695    +ARRAY REG12DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG12DRU[2] _TEMPORARY_ (1 0);
796696    +
796697    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
796698    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
796699    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
796700    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
796701    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
796702    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
796703    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
796704    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
796705    +end;
MPRINT(EM_DIAGRAM):   end;
796706    +else do;
MPRINT(EM_DIAGRAM):   else do;
796707    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
796708    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
796709    +   end;
MPRINT(EM_DIAGRAM):   end;
796710    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
796711    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
796712    +   end;
MPRINT(EM_DIAGRAM):   end;
796713    +   else do;
MPRINT(EM_DIAGRAM):   else do;
796714    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
796715    +   end;
MPRINT(EM_DIAGRAM):   end;
796716    +end;
MPRINT(EM_DIAGRAM):   end;
796717    +
796718    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
796719    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
796720    +
796721    +*** Check AcceptedCmpTotal for missing values ;
MPRINT(EM_DIAGRAM):   *** Check AcceptedCmpTotal for missing values ;
796722    +if missing( AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmpTotal ) then do;
796723    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796724    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796725    +end;
MPRINT(EM_DIAGRAM):   end;
796726    +
796727    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
796728    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
796729    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796730    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796731    +end;
MPRINT(EM_DIAGRAM):   end;
796732    +
796733    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
796734    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
796735    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796736    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796737    +end;
MPRINT(EM_DIAGRAM):   end;
796738    +
796739    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
796740    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
796741    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796742    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796743    +end;
MPRINT(EM_DIAGRAM):   end;
796744    +
796745    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
796746    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
796747    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796748    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796749    +end;
MPRINT(EM_DIAGRAM):   end;
796750    +
796751    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
796752    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
796753    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796754    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796755    +end;
MPRINT(EM_DIAGRAM):   end;
796756    +
796757    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
796758    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
796759    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796760    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796761    +end;
MPRINT(EM_DIAGRAM):   end;
796762    +
796763    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
796764    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
796765    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796766    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796767    +end;
MPRINT(EM_DIAGRAM):   end;
796768    +
796769    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
796770    +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
796771    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
796772    +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
796773    +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
796774    +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
796775    +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
796776    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
796777    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
796778    +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
796779    +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
796780    +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
796781    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
796782    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796783    +end;
MPRINT(EM_DIAGRAM):   end;
796784    +else do;
MPRINT(EM_DIAGRAM):   else do;
796785    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
796786    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
796787    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
796788    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
796789    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
796790    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
796791    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
796792    +            _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
796793    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796794    +         end;
MPRINT(EM_DIAGRAM):   end;
796795    +         else do;
MPRINT(EM_DIAGRAM):   else do;
796796    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
796797    +               _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
796798    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796799    +            end;
MPRINT(EM_DIAGRAM):   end;
796800    +         end;
MPRINT(EM_DIAGRAM):   end;
796801    +      end;
MPRINT(EM_DIAGRAM):   end;
796802    +      else do;
MPRINT(EM_DIAGRAM):   else do;
796803    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
796804    +            _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
796805    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796806    +         end;
MPRINT(EM_DIAGRAM):   end;
796807    +      end;
MPRINT(EM_DIAGRAM):   end;
796808    +   end;
MPRINT(EM_DIAGRAM):   end;
796809    +   else do;
MPRINT(EM_DIAGRAM):   else do;
796810    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
796811    +         _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
796812    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796813    +      end;
MPRINT(EM_DIAGRAM):   end;
796814    +      else do;
MPRINT(EM_DIAGRAM):   else do;
796815    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
796816    +            _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
796817    +            _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
796818    +            _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
796819    +            _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
796820    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
796821    +         end;
MPRINT(EM_DIAGRAM):   end;
796822    +      end;
MPRINT(EM_DIAGRAM):   end;
796823    +   end;
MPRINT(EM_DIAGRAM):   end;
796824    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
796825    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
796826    +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
796827    +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
796828    +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
796829    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
796830    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
796831    +   end;
MPRINT(EM_DIAGRAM):   end;
796832    +end;
MPRINT(EM_DIAGRAM):   end;
796833    +
796834    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
796835    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
796836    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
796837    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
796838    +   goto REG12DR1;
MPRINT(EM_DIAGRAM):   goto REG12DR1;
796839    +end;
MPRINT(EM_DIAGRAM):   end;
796840    +
796841    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
796842    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
796843    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
796844    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
796845    +
796846    +***  Effect: AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmpTotal ;
796847    +_TEMP = AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   _TEMP = AcceptedCmpTotal ;
796848    +_LP0 = _LP0 + (    2.91278643457381 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.91278643457381 * _TEMP);
796849    +
796850    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
796851    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
796852    +_LP0 = _LP0 + (   -0.29070071451539 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.29070071451539 * _TEMP);
796853    +
796854    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
796855    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
796856    +_LP0 = _LP0 + (    0.08044802466944) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08044802466944) * _TEMP * _1_0;
796857    +_LP0 = _LP0 + (   -0.81043379256053) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.81043379256053) * _TEMP * _1_1;
796858    +_LP0 = _LP0 + (    0.82981010582138) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.82981010582138) * _TEMP * _1_2;
796859    +_LP0 = _LP0 + (   -0.86325418976783) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.86325418976783) * _TEMP * _1_3;
796860    +
796861    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
796862    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
796863    +_LP0 = _LP0 + (   -0.00257118165656 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00257118165656 * _TEMP);
796864    +
796865    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
796866    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
796867    +_LP0 = _LP0 + (    0.01212481906959 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01212481906959 * _TEMP);
796868    +
796869    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
796870    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
796871    +_LP0 = _LP0 + (    1.02604890063437 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.02604890063437 * _TEMP);
796872    +
796873    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
796874    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
796875    +_LP0 = _LP0 + (    0.51747253477408 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.51747253477408 * _TEMP);
796876    +
796877    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
796878    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
796879    +_LP0 = _LP0 + (    0.77987169824887 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.77987169824887 * _TEMP);
796880    +
796881    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
796882    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
796883    +_LP0 = _LP0 + (   -0.09331353606711 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09331353606711 * _TEMP);
796884    +
796885    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
796886    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
796887    +_TEMP =     -5.4430055929719 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -5.4430055929719 + _LP0;
796888    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
796889    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
796890    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
796891    +end;
MPRINT(EM_DIAGRAM):   end;
796892    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
796893    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
796894    +
796895    +REG12DR1:
796896    +
796897    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG12DR1: *** Residuals;
796898    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
796899    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
796900    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
796901    +end;
MPRINT(EM_DIAGRAM):   end;
796902    +else do;
MPRINT(EM_DIAGRAM):   else do;
796903    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
796904    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
796905    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
796906    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
796907    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
796908    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
796909    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
796910    +   end;
MPRINT(EM_DIAGRAM):   end;
796911    +end;
MPRINT(EM_DIAGRAM):   end;
796912    +
796913    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
796914    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
796915    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
796916    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
796917    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
796918    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
796919    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
796920    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
796921    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
796922    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
796923    +end;
MPRINT(EM_DIAGRAM):   end;
796924    +I_DepVar = REG12DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG12DRF[_IY];
796925    +U_DepVar = REG12DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG12DRU[_IY];
796926    +
796927    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
796928    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
796929    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
796930     run;

NOTE: DATA STEP view saved on file EMWS8.REG12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
796931     quit;
796932     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
796933     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
796934     * Reg12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg12: Computing metadata for TRAIN data;
796935     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg12_TRAIN out=WORK.M2BET0UF noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2BET0UF;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2BET0UF(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2BET0UF;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2BET0UF;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2BET0UF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort data=WORK.M39ZPU3Q NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   data WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   merge WORK.M39ZPU3Q(in=_a) WORK.M2BET0UF(in=_b);
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   if _a and ^_b then delete;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N68NPJ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   set WORK.M39ZPU3Q;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ACCEPTEDCMPTOTAL' 'FRQ' 'MARITAL_STATUS' 'MNT' 
'MNTMEATPRODUCTS' 'NUMCATALOGPURCHASES' 'NUMDEALSPURCHASES' 'NUMWEBVISITSMONTH' 'RECENCY' ) 
then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg12: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
797277     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
797278     set EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg12_EMINFO;
797279     where DATA='Reg12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
797280     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG12_EMINFO.
      WHERE (DATA='Reg12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797281     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg12_EMINFO;
797282     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
797283     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
797284     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
797288     run;
797289     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_EMINFO;
797290     set EMWS8.Reg12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg12_EMINFO WORK.MODELTEMP_INFO;
797291     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797292     proc sort data = EMWS8.Reg12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg12_EMINFO NOTHREADS;
797293     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
797294     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: The data set EMWS8.REG12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797295     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
797296     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
797297     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797298     proc sort data = EMWS8.Reg12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
797299     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
797300     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797301     data EMWS8.Reg12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg12_EMINFO;
797302     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
797303     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
797304     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

797305     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
797306     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
797307     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
797308     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.REG12_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS8.REG12_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
