MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3HAA7IT 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3HAA7IT new;
MPRINT(EM_DIAGRAM):   run;
759609     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
759610     set EMWS8.Neural11_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_OUTKEY;
759611     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
759612     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS8.NEURAL11_OUTKEY.
NOTE: The data set WORK.OUTKEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

759613     filename emflow
759613   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759614     *------------------------------------------------------------*;
759615     * Neural11: Scoring DATA data;
759616     *------------------------------------------------------------*;
759617     data EMWS8.Neural11_TRAIN
759618     / view=EMWS8.Neural11_TRAIN
759619     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_TRAIN / view=EMWS8.Neural11_TRAIN ;
759620     set EMWS8.PRINCOMP_TRAIN
759621     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
759622     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
759623    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
759624    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
759625    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
759626    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
759627    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
759628    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
759629    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
759630    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
759631    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
759632    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
759633    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
759634    +LENGTH _WARN_ $4
759635    +      F_DepVar  $ 12
759636    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
759637    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
759638    +
759639    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
759640    +
759641    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
759642    +
759643    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
759644    +
759645    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
759646    +
759647    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
759648    +
759649    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
759650    +
759651    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
759652    +
759653    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
759654    +
759655    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
759656    +
759657    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
759658    +
759659    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
759660    +
759661    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
759662    +
759663    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
759664    +
759665    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
759666    +
759667    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
759668    +
759669    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
759670    +
759671    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
759672    +
759673    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
759674    +
759675    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
759676    +
759677    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
759678    +
759679    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
759680    +
759681    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
759682    +
759683    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
759684    +
759685    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
759686    +
759687    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
759688    +
759689    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
759690    +
759691    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759692    +*** Checking missing input Interval
759693    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
759694    +
759695    +IF NMISS(
759696    +   PC_1 ,
759697    +   PC_10 ,
759698    +   PC_11 ,
759699    +   PC_12 ,
759700    +   PC_13 ,
759701    +   PC_14 ,
759702    +   PC_15 ,
759703    +   PC_16 ,
759704    +   PC_17 ,
759705    +   PC_2 ,
759706    +   PC_3 ,
759707    +   PC_4 ,
759708    +   PC_5 ,
759709    +   PC_6 ,
759710    +   PC_7 ,
759711    +   PC_8 ,
759712    +   PC_9 ,
759713    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
759714    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
759715    +
759716    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759717    +END;
MPRINT(EM_DIAGRAM):   END;
759718    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759719    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
759720    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759721    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
759722    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
759723    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
759724    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
759725    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
759726    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
759727    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
759728    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
759729    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
759730    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
759731    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
759732    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
759733    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
759734    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
759735    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
759736    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
759737    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
759738    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
759739    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
759740    +END;
MPRINT(EM_DIAGRAM):   END;
759741    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
759742    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
759743    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
759744    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
759745    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
759746    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
759747    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
759748    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
759749    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
759750    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
759751    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
759752    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
759753    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
759754    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
759755    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
759756    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
759757    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
759758    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
759759    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
759760    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
759761    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
759762    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
759763    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
759764    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
759765    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
759766    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
759767    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
759768    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
759769    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
759770    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
759771    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
759772    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
759773    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
759774    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
759775    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
759776    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
759777    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
759778    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
759779    +END;
MPRINT(EM_DIAGRAM):   END;
759780    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759781    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
759782    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759783    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
759784    +   H11  =    -0.11355259784693 * S_PC_1  +     0.09821088930461 * S_PC_10
759785    +          +    -0.03790390875086 * S_PC_11  +    -0.02310315531826 * S_PC_12
759786    +          +     0.15443150363184 * S_PC_13  +    -0.06423123439766 * S_PC_14
759787    +          +     0.04229747295712 * S_PC_15  +     -0.0338418263084 * S_PC_16
759788    +          +     0.02045719938559 * S_PC_17  +     0.10726544480497 * S_PC_2
759789    +          +     0.02238713759079 * S_PC_3  +    -0.02744369405165 * S_PC_4
759790    +          +     0.06597303349601 * S_PC_5  +    -0.03087160674989 * S_PC_6
759791    +          +    -0.01940493724452 * S_PC_7  +    -0.05154083987327 * S_PC_8
759792    +          +    -0.06916160514074 * S_PC_9  +    -0.00670286344758 *
759793    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.11355259784693 * S_PC_1 + 0.09821088930461 * S_PC_10 + 
-0.03790390875086 * S_PC_11 + -0.02310315531826 * S_PC_12 + 0.15443150363184 * S_PC_13 + 
-0.06423123439766 * S_PC_14 + 0.04229747295712 * S_PC_15 + -0.0338418263084 * S_PC_16 + 
0.02045719938559 * S_PC_17 + 0.10726544480497 * S_PC_2 + 0.02238713759079 * S_PC_3 + 
-0.02744369405165 * S_PC_4 + 0.06597303349601 * S_PC_5 + -0.03087160674989 * S_PC_6 + 
-0.01940493724452 * S_PC_7 + -0.05154083987327 * S_PC_8 + -0.06916160514074 * S_PC_9 + 
-0.00670286344758 * S_Year_Birth ;
759794    +   H11  =    -0.68068308660931 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.68068308660931 + H11 ;
759795    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
759796    +END;
MPRINT(EM_DIAGRAM):   END;
759797    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
759798    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
759799    +END;
MPRINT(EM_DIAGRAM):   END;
759800    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759801    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
759802    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759803    +
759804    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
759805    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
759806    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
759807    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
759808    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
759809    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
759810    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
759811    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
759812    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
759813    +end;
MPRINT(EM_DIAGRAM):   end;
759814    +else do;
MPRINT(EM_DIAGRAM):   else do;
759815    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
759816    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
759817    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
759818    +   end;
MPRINT(EM_DIAGRAM):   end;
759819    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
759820    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
759821    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
759822    +   end;
MPRINT(EM_DIAGRAM):   end;
759823    +   else do;
MPRINT(EM_DIAGRAM):   else do;
759824    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
759825    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
759826    +   end;
MPRINT(EM_DIAGRAM):   end;
759827    +end;
MPRINT(EM_DIAGRAM):   end;
759828    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
759829    +   P_DepVar1  =     -16.691252350141 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -16.691252350141 * H11 ;
759830    +   P_DepVar1  =    -12.7407719174024 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -12.7407719174024 + P_DepVar1 ;
759831    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
759832    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
759833    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
759834    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
759835    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
759836    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
759837    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
759838    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
759839    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
759840    +END;
MPRINT(EM_DIAGRAM):   END;
759841    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
759842    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
759843    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
759844    +END;
MPRINT(EM_DIAGRAM):   END;
759845    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
759846    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
759847    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
759848    +END;
MPRINT(EM_DIAGRAM):   END;
759849    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
759850    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
759851    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
759852    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
759853    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
759854    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
759855    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
759856    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759857    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
759858    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759859    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
759860    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
759861    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
759862    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
759863    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
759864    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
759865    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
759866    +END;
MPRINT(EM_DIAGRAM):   END;
759867    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
759868    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
759869    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
759870    +drop
759871    +H11
759872    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
759873    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
759874     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
759875     quit;
759876     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
759877     filename emflow
759877   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
759878     *------------------------------------------------------------*;
759879     * Neural11: Scoring VALIDATE data;
759880     *------------------------------------------------------------*;
759881     data EMWS8.Neural11_VALIDATE
759882     / view=EMWS8.Neural11_VALIDATE
759883     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_VALIDATE / view=EMWS8.Neural11_VALIDATE ;
759884     set EMWS8.PRINCOMP_VALIDATE
759885     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
759886     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
759887    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
759888    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
759889    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
759890    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
759891    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
759892    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
759893    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
759894    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
759895    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
759896    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
759897    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
759898    +LENGTH _WARN_ $4
759899    +      F_DepVar  $ 12
759900    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
759901    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
759902    +
759903    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
759904    +
759905    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
759906    +
759907    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
759908    +
759909    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
759910    +
759911    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
759912    +
759913    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
759914    +
759915    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
759916    +
759917    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
759918    +
759919    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
759920    +
759921    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
759922    +
759923    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
759924    +
759925    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
759926    +
759927    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
759928    +
759929    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
759930    +
759931    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
759932    +
759933    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
759934    +
759935    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
759936    +
759937    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
759938    +
759939    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
759940    +
759941    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
759942    +
759943    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
759944    +
759945    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
759946    +
759947    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
759948    +
759949    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
759950    +
759951    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
759952    +
759953    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
759954    +
759955    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759956    +*** Checking missing input Interval
759957    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
759958    +
759959    +IF NMISS(
759960    +   PC_1 ,
759961    +   PC_10 ,
759962    +   PC_11 ,
759963    +   PC_12 ,
759964    +   PC_13 ,
759965    +   PC_14 ,
759966    +   PC_15 ,
759967    +   PC_16 ,
759968    +   PC_17 ,
759969    +   PC_2 ,
759970    +   PC_3 ,
759971    +   PC_4 ,
759972    +   PC_5 ,
759973    +   PC_6 ,
759974    +   PC_7 ,
759975    +   PC_8 ,
759976    +   PC_9 ,
759977    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
759978    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
759979    +
759980    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
759981    +END;
MPRINT(EM_DIAGRAM):   END;
759982    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759983    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
759984    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
759985    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
759986    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
759987    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
759988    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
759989    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
759990    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
759991    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
759992    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
759993    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
759994    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
759995    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
759996    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
759997    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
759998    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
759999    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
760000    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
760001    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
760002    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
760003    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
760004    +END;
MPRINT(EM_DIAGRAM):   END;
760005    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
760006    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
760007    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
760008    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
760009    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
760010    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
760011    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
760012    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
760013    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
760014    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
760015    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
760016    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
760017    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
760018    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
760019    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
760020    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
760021    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
760022    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
760023    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
760024    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
760025    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
760026    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
760027    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
760028    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
760029    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
760030    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
760031    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
760032    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
760033    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
760034    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
760035    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
760036    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
760037    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
760038    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
760039    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
760040    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
760041    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
760042    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
760043    +END;
MPRINT(EM_DIAGRAM):   END;
760044    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760045    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
760046    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760047    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
760048    +   H11  =    -0.11355259784693 * S_PC_1  +     0.09821088930461 * S_PC_10
760049    +          +    -0.03790390875086 * S_PC_11  +    -0.02310315531826 * S_PC_12
760050    +          +     0.15443150363184 * S_PC_13  +    -0.06423123439766 * S_PC_14
760051    +          +     0.04229747295712 * S_PC_15  +     -0.0338418263084 * S_PC_16
760052    +          +     0.02045719938559 * S_PC_17  +     0.10726544480497 * S_PC_2
760053    +          +     0.02238713759079 * S_PC_3  +    -0.02744369405165 * S_PC_4
760054    +          +     0.06597303349601 * S_PC_5  +    -0.03087160674989 * S_PC_6
760055    +          +    -0.01940493724452 * S_PC_7  +    -0.05154083987327 * S_PC_8
760056    +          +    -0.06916160514074 * S_PC_9  +    -0.00670286344758 *
760057    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.11355259784693 * S_PC_1 + 0.09821088930461 * S_PC_10 + 
-0.03790390875086 * S_PC_11 + -0.02310315531826 * S_PC_12 + 0.15443150363184 * S_PC_13 + 
-0.06423123439766 * S_PC_14 + 0.04229747295712 * S_PC_15 + -0.0338418263084 * S_PC_16 + 
0.02045719938559 * S_PC_17 + 0.10726544480497 * S_PC_2 + 0.02238713759079 * S_PC_3 + 
-0.02744369405165 * S_PC_4 + 0.06597303349601 * S_PC_5 + -0.03087160674989 * S_PC_6 + 
-0.01940493724452 * S_PC_7 + -0.05154083987327 * S_PC_8 + -0.06916160514074 * S_PC_9 + 
-0.00670286344758 * S_Year_Birth ;
760058    +   H11  =    -0.68068308660931 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.68068308660931 + H11 ;
760059    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
760060    +END;
MPRINT(EM_DIAGRAM):   END;
760061    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
760062    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
760063    +END;
MPRINT(EM_DIAGRAM):   END;
760064    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760065    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
760066    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760067    +
760068    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
760069    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
760070    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
760071    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
760072    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
760073    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
760074    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
760075    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
760076    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
760077    +end;
MPRINT(EM_DIAGRAM):   end;
760078    +else do;
MPRINT(EM_DIAGRAM):   else do;
760079    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
760080    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
760081    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
760082    +   end;
MPRINT(EM_DIAGRAM):   end;
760083    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
760084    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
760085    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
760086    +   end;
MPRINT(EM_DIAGRAM):   end;
760087    +   else do;
MPRINT(EM_DIAGRAM):   else do;
760088    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
760089    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
760090    +   end;
MPRINT(EM_DIAGRAM):   end;
760091    +end;
MPRINT(EM_DIAGRAM):   end;
760092    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
760093    +   P_DepVar1  =     -16.691252350141 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -16.691252350141 * H11 ;
760094    +   P_DepVar1  =    -12.7407719174024 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -12.7407719174024 + P_DepVar1 ;
760095    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
760096    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
760097    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
760098    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
760099    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
760100    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
760101    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
760102    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
760103    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
760104    +END;
MPRINT(EM_DIAGRAM):   END;
760105    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
760106    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
760107    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
760108    +END;
MPRINT(EM_DIAGRAM):   END;
760109    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
760110    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
760111    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
760112    +END;
MPRINT(EM_DIAGRAM):   END;
760113    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
760114    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
760115    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
760116    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
760117    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
760118    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
760119    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
760120    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760121    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
760122    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
760123    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
760124    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
760125    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
760126    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
760127    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
760128    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
760129    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
760130    +END;
MPRINT(EM_DIAGRAM):   END;
760131    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
760132    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
760133    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
760134    +drop
760135    +H11
760136    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
760137    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
760138     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
760139     quit;
760140     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
760141     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
760142     * Neural11: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural11: Computing metadata for TRAIN data;
760143     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural11_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural11_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural11_TRAIN out=WORK.M1TQCPXH noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TQCPXH;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1TQCPXH(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TQCPXH;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1TQCPXH;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1ZL4U00 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UADTYI(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ZL4U00;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural11";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural11";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
760455     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
760456     set EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO;
760457     where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
760458     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL11_EMINFO.
      WHERE (DATA='Neural11') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760459     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural11_EMINFO;
760460     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
760461     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
760462     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
760466     run;
760467     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
760468     set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
760469     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760470     proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
760471     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
760472     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760473     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
760474     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
760475     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760476     proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
760477     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
760478     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760479     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
760480     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
760481     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
760482     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

760483     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
760484     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
760485     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
760486     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL11_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
