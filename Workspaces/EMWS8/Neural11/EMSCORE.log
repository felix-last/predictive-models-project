MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O33T6WNG 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O33T6WNG new;
MPRINT(EM_DIAGRAM):   run;
644002     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
644003     set EMWS8.Neural11_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_OUTKEY;
644004     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
644005     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS8.NEURAL11_OUTKEY.
NOTE: The data set WORK.OUTKEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

644006     filename emflow
644006   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
644007     *------------------------------------------------------------*;
644008     * Neural11: Scoring DATA data;
644009     *------------------------------------------------------------*;
644010     data EMWS8.Neural11_TRAIN
644011     / view=EMWS8.Neural11_TRAIN
644012     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_TRAIN / view=EMWS8.Neural11_TRAIN ;
644013     set EMWS8.PRINCOMP_TRAIN
644014     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
644015     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
644016    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
644017    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
644018    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
644019    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
644020    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
644021    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
644022    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
644023    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
644024    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
644025    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
644026    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
644027    +LENGTH _WARN_ $4
644028    +      F_DepVar  $ 12
644029    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
644030    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
644031    +
644032    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
644033    +
644034    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
644035    +
644036    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
644037    +
644038    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
644039    +
644040    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
644041    +
644042    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
644043    +
644044    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
644045    +
644046    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
644047    +
644048    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
644049    +
644050    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
644051    +
644052    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
644053    +
644054    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
644055    +
644056    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
644057    +
644058    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
644059    +
644060    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
644061    +
644062    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
644063    +
644064    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
644065    +
644066    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
644067    +
644068    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
644069    +
644070    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
644071    +
644072    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
644073    +
644074    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
644075    +
644076    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
644077    +
644078    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
644079    +
644080    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
644081    +
644082    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
644083    +
644084    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644085    +*** Checking missing input Interval
644086    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
644087    +
644088    +IF NMISS(
644089    +   PC_1 ,
644090    +   PC_10 ,
644091    +   PC_11 ,
644092    +   PC_12 ,
644093    +   PC_13 ,
644094    +   PC_14 ,
644095    +   PC_15 ,
644096    +   PC_16 ,
644097    +   PC_17 ,
644098    +   PC_2 ,
644099    +   PC_3 ,
644100    +   PC_4 ,
644101    +   PC_5 ,
644102    +   PC_6 ,
644103    +   PC_7 ,
644104    +   PC_8 ,
644105    +   PC_9 ,
644106    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
644107    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
644108    +
644109    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
644110    +END;
MPRINT(EM_DIAGRAM):   END;
644111    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644112    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
644113    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644114    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644115    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
644116    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
644117    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
644118    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
644119    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
644120    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
644121    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
644122    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
644123    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
644124    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
644125    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
644126    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
644127    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
644128    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
644129    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
644130    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
644131    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
644132    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
644133    +END;
MPRINT(EM_DIAGRAM):   END;
644134    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644135    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
644136    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
644137    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
644138    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
644139    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
644140    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
644141    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
644142    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
644143    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
644144    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
644145    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
644146    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
644147    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
644148    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
644149    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
644150    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
644151    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
644152    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
644153    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
644154    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
644155    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
644156    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
644157    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
644158    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
644159    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
644160    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
644161    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
644162    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
644163    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
644164    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
644165    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
644166    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
644167    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
644168    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
644169    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
644170    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
644171    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
644172    +END;
MPRINT(EM_DIAGRAM):   END;
644173    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644174    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
644175    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644176    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644177    +   H11  =    -0.10522500657273 * S_PC_1  +     0.09096573158531 * S_PC_10
644178    +          +    -0.03499340047101 * S_PC_11  +    -0.02154646847275 * S_PC_12
644179    +          +     0.14267743709601 * S_PC_13  +    -0.05921128717719 * S_PC_14
644180    +          +     0.03912274316982 * S_PC_15  +    -0.03096569248972 * S_PC_16
644181    +          +     0.01908651067352 * S_PC_17  +     0.09933417368367 * S_PC_2
644182    +          +     0.02064402121592 * S_PC_3  +    -0.02543300464446 * S_PC_4
644183    +          +     0.06123490685161 * S_PC_5  +     -0.0286817861828 * S_PC_6
644184    +          +    -0.01806073106772 * S_PC_7  +    -0.04768430946936 * S_PC_8
644185    +          +    -0.06386532208159 * S_PC_9  +    -0.00602159272673 *
644186    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.10522500657273 * S_PC_1 + 0.09096573158531 * S_PC_10 + 
-0.03499340047101 * S_PC_11 + -0.02154646847275 * S_PC_12 + 0.14267743709601 * S_PC_13 + 
-0.05921128717719 * S_PC_14 + 0.03912274316982 * S_PC_15 + -0.03096569248972 * S_PC_16 + 
0.01908651067352 * S_PC_17 + 0.09933417368367 * S_PC_2 + 0.02064402121592 * S_PC_3 + 
-0.02543300464446 * S_PC_4 + 0.06123490685161 * S_PC_5 + -0.0286817861828 * S_PC_6 + 
-0.01806073106772 * S_PC_7 + -0.04768430946936 * S_PC_8 + -0.06386532208159 * S_PC_9 + 
-0.00602159272673 * S_Year_Birth ;
644187    +   H11  =    -0.86046397050555 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.86046397050555 + H11 ;
644188    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
644189    +END;
MPRINT(EM_DIAGRAM):   END;
644190    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644191    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
644192    +END;
MPRINT(EM_DIAGRAM):   END;
644193    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644194    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
644195    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644196    +
644197    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
644198    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
644199    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
644200    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
644201    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
644202    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
644203    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
644204    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
644205    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
644206    +end;
MPRINT(EM_DIAGRAM):   end;
644207    +else do;
MPRINT(EM_DIAGRAM):   else do;
644208    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
644209    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
644210    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
644211    +   end;
MPRINT(EM_DIAGRAM):   end;
644212    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
644213    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
644214    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
644215    +   end;
MPRINT(EM_DIAGRAM):   end;
644216    +   else do;
MPRINT(EM_DIAGRAM):   else do;
644217    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
644218    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
644219    +   end;
MPRINT(EM_DIAGRAM):   end;
644220    +end;
MPRINT(EM_DIAGRAM):   end;
644221    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644222    +   P_DepVar1  =    -22.9233051266101 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -22.9233051266101 * H11 ;
644223    +   P_DepVar1  =    -18.8228116776068 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -18.8228116776068 + P_DepVar1 ;
644224    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
644225    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
644226    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
644227    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
644228    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
644229    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
644230    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
644231    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
644232    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
644233    +END;
MPRINT(EM_DIAGRAM):   END;
644234    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644235    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
644236    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
644237    +END;
MPRINT(EM_DIAGRAM):   END;
644238    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
644239    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
644240    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
644241    +END;
MPRINT(EM_DIAGRAM):   END;
644242    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
644243    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
644244    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
644245    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
644246    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
644247    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
644248    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
644249    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644250    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
644251    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644252    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
644253    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
644254    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
644255    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
644256    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
644257    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
644258    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
644259    +END;
MPRINT(EM_DIAGRAM):   END;
644260    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
644261    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
644262    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
644263    +drop
644264    +H11
644265    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
644266    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
644267     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
644268     quit;
644269     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
644270     filename emflow
644270   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
644271     *------------------------------------------------------------*;
644272     * Neural11: Scoring VALIDATE data;
644273     *------------------------------------------------------------*;
644274     data EMWS8.Neural11_VALIDATE
644275     / view=EMWS8.Neural11_VALIDATE
644276     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_VALIDATE / view=EMWS8.Neural11_VALIDATE ;
644277     set EMWS8.PRINCOMP_VALIDATE
644278     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
644279     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
644280    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
644281    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
644282    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
644283    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
644284    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
644285    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
644286    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
644287    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
644288    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
644289    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
644290    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
644291    +LENGTH _WARN_ $4
644292    +      F_DepVar  $ 12
644293    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
644294    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
644295    +
644296    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
644297    +
644298    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
644299    +
644300    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
644301    +
644302    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
644303    +
644304    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
644305    +
644306    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
644307    +
644308    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
644309    +
644310    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
644311    +
644312    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
644313    +
644314    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
644315    +
644316    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
644317    +
644318    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
644319    +
644320    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
644321    +
644322    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
644323    +
644324    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
644325    +
644326    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
644327    +
644328    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
644329    +
644330    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
644331    +
644332    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
644333    +
644334    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
644335    +
644336    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
644337    +
644338    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
644339    +
644340    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
644341    +
644342    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
644343    +
644344    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
644345    +
644346    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
644347    +
644348    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644349    +*** Checking missing input Interval
644350    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
644351    +
644352    +IF NMISS(
644353    +   PC_1 ,
644354    +   PC_10 ,
644355    +   PC_11 ,
644356    +   PC_12 ,
644357    +   PC_13 ,
644358    +   PC_14 ,
644359    +   PC_15 ,
644360    +   PC_16 ,
644361    +   PC_17 ,
644362    +   PC_2 ,
644363    +   PC_3 ,
644364    +   PC_4 ,
644365    +   PC_5 ,
644366    +   PC_6 ,
644367    +   PC_7 ,
644368    +   PC_8 ,
644369    +   PC_9 ,
644370    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
644371    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
644372    +
644373    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
644374    +END;
MPRINT(EM_DIAGRAM):   END;
644375    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644376    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
644377    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644378    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644379    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
644380    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
644381    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
644382    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
644383    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
644384    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
644385    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
644386    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
644387    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
644388    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
644389    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
644390    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
644391    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
644392    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
644393    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
644394    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
644395    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
644396    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
644397    +END;
MPRINT(EM_DIAGRAM):   END;
644398    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644399    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
644400    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
644401    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
644402    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
644403    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
644404    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
644405    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
644406    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
644407    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
644408    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
644409    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
644410    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
644411    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
644412    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
644413    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
644414    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
644415    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
644416    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
644417    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
644418    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
644419    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
644420    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
644421    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
644422    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
644423    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
644424    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
644425    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
644426    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
644427    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
644428    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
644429    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
644430    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
644431    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
644432    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
644433    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
644434    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
644435    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
644436    +END;
MPRINT(EM_DIAGRAM):   END;
644437    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644438    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
644439    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644440    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644441    +   H11  =    -0.10522500657273 * S_PC_1  +     0.09096573158531 * S_PC_10
644442    +          +    -0.03499340047101 * S_PC_11  +    -0.02154646847275 * S_PC_12
644443    +          +     0.14267743709601 * S_PC_13  +    -0.05921128717719 * S_PC_14
644444    +          +     0.03912274316982 * S_PC_15  +    -0.03096569248972 * S_PC_16
644445    +          +     0.01908651067352 * S_PC_17  +     0.09933417368367 * S_PC_2
644446    +          +     0.02064402121592 * S_PC_3  +    -0.02543300464446 * S_PC_4
644447    +          +     0.06123490685161 * S_PC_5  +     -0.0286817861828 * S_PC_6
644448    +          +    -0.01806073106772 * S_PC_7  +    -0.04768430946936 * S_PC_8
644449    +          +    -0.06386532208159 * S_PC_9  +    -0.00602159272673 *
644450    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.10522500657273 * S_PC_1 + 0.09096573158531 * S_PC_10 + 
-0.03499340047101 * S_PC_11 + -0.02154646847275 * S_PC_12 + 0.14267743709601 * S_PC_13 + 
-0.05921128717719 * S_PC_14 + 0.03912274316982 * S_PC_15 + -0.03096569248972 * S_PC_16 + 
0.01908651067352 * S_PC_17 + 0.09933417368367 * S_PC_2 + 0.02064402121592 * S_PC_3 + 
-0.02543300464446 * S_PC_4 + 0.06123490685161 * S_PC_5 + -0.0286817861828 * S_PC_6 + 
-0.01806073106772 * S_PC_7 + -0.04768430946936 * S_PC_8 + -0.06386532208159 * S_PC_9 + 
-0.00602159272673 * S_Year_Birth ;
644451    +   H11  =    -0.86046397050555 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.86046397050555 + H11 ;
644452    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
644453    +END;
MPRINT(EM_DIAGRAM):   END;
644454    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644455    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
644456    +END;
MPRINT(EM_DIAGRAM):   END;
644457    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644458    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
644459    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644460    +
644461    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
644462    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
644463    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
644464    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
644465    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
644466    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
644467    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
644468    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
644469    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
644470    +end;
MPRINT(EM_DIAGRAM):   end;
644471    +else do;
MPRINT(EM_DIAGRAM):   else do;
644472    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
644473    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
644474    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
644475    +   end;
MPRINT(EM_DIAGRAM):   end;
644476    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
644477    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
644478    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
644479    +   end;
MPRINT(EM_DIAGRAM):   end;
644480    +   else do;
MPRINT(EM_DIAGRAM):   else do;
644481    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
644482    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
644483    +   end;
MPRINT(EM_DIAGRAM):   end;
644484    +end;
MPRINT(EM_DIAGRAM):   end;
644485    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
644486    +   P_DepVar1  =    -22.9233051266101 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -22.9233051266101 * H11 ;
644487    +   P_DepVar1  =    -18.8228116776068 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -18.8228116776068 + P_DepVar1 ;
644488    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
644489    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
644490    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
644491    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
644492    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
644493    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
644494    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
644495    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
644496    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
644497    +END;
MPRINT(EM_DIAGRAM):   END;
644498    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
644499    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
644500    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
644501    +END;
MPRINT(EM_DIAGRAM):   END;
644502    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
644503    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
644504    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
644505    +END;
MPRINT(EM_DIAGRAM):   END;
644506    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
644507    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
644508    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
644509    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
644510    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
644511    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
644512    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
644513    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644514    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
644515    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
644516    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
644517    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
644518    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
644519    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
644520    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
644521    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
644522    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
644523    +END;
MPRINT(EM_DIAGRAM):   END;
644524    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
644525    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
644526    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
644527    +drop
644528    +H11
644529    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
644530    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
644531     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
644532     quit;
644533     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
644534     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
644535     * Neural11: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural11: Computing metadata for TRAIN data;
644536     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural11_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural11_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural11_TRAIN out=WORK.M3B4NVYF noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3B4NVYF;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3B4NVYF(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3B4NVYF;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3B4NVYF;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0JH5TXV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0PJG52F(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JH5TXV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural11";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural11";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
644848     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
644849     set EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO;
644850     where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
644851     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL11_EMINFO.
      WHERE (DATA='Neural11') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644852     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural11_EMINFO;
644853     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
644854     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
644855     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
644859     run;
644860     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
644861     set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
644862     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644863     proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
644864     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644865     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644866     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
644867     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644868     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644869     proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
644870     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644871     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644872     data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
644873     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
644874     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
644875     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

644876     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
644877     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
644878     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
644879     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL11_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
