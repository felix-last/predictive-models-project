MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VGA2NO 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VGA2NO new;
MPRINT(EM_DIAGRAM):   run;
1601048    data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
1601049    set EMWS8.Neural11_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_OUTKEY;
1601050    if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
1601051    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS8.NEURAL11_OUTKEY.
NOTE: The data set WORK.OUTKEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601052    filename emflow
1601052  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1601053    *------------------------------------------------------------*;
1601054    * Neural11: Scoring DATA data;
1601055    *------------------------------------------------------------*;
1601056    data EMWS8.Neural11_TRAIN
1601057    / view=EMWS8.Neural11_TRAIN
1601058    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_TRAIN / view=EMWS8.Neural11_TRAIN ;
1601059    set EMWS8.PRINCOMP_TRAIN
1601060    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
1601061    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
1601062   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1601063   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1601064   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1601065   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1601066   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1601067   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1601068   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1601069   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1601070   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1601071   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1601072   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1601073   +LENGTH _WARN_ $4
1601074   +      F_DepVar  $ 12
1601075   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1601076   +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
1601077   +
1601078   +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
1601079   +
1601080   +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
1601081   +
1601082   +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
1601083   +
1601084   +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
1601085   +
1601086   +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
1601087   +
1601088   +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
1601089   +
1601090   +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
1601091   +
1601092   +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
1601093   +
1601094   +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
1601095   +
1601096   +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
1601097   +
1601098   +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
1601099   +
1601100   +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
1601101   +
1601102   +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
1601103   +
1601104   +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
1601105   +
1601106   +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
1601107   +
1601108   +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
1601109   +
1601110   +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
1601111   +
1601112   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1601113   +
1601114   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1601115   +
1601116   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1601117   +
1601118   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1601119   +
1601120   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1601121   +
1601122   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1601123   +
1601124   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1601125   +
1601126   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1601127   +
1601128   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1601129   +
1601130   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601131   +*** Checking missing input Interval
1601132   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1601133   +
1601134   +IF NMISS(
1601135   +   PC_1 ,
1601136   +   PC_10 ,
1601137   +   PC_11 ,
1601138   +   PC_12 ,
1601139   +   PC_13 ,
1601140   +   PC_14 ,
1601141   +   PC_15 ,
1601142   +   PC_16 ,
1601143   +   PC_17 ,
1601144   +   PC_2 ,
1601145   +   PC_3 ,
1601146   +   PC_4 ,
1601147   +   PC_5 ,
1601148   +   PC_6 ,
1601149   +   PC_7 ,
1601150   +   PC_8 ,
1601151   +   PC_9 ,
1601152   +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
1601153   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1601154   +
1601155   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1601156   +END;
MPRINT(EM_DIAGRAM):   END;
1601157   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601158   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1601159   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601160   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601161   +   S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1601162   +   S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1601163   +   S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1601164   +   S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1601165   +   S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1601166   +   S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1601167   +   S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1601168   +   S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1601169   +   S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1601170   +   S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1601171   +   S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1601172   +   S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1601173   +   S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1601174   +   S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1601175   +   S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1601176   +   S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1601177   +   S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1601178   +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1601179   +END;
MPRINT(EM_DIAGRAM):   END;
1601180   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601181   +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
1601182   +   ELSE S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1601183   +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
1601184   +   ELSE S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1601185   +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
1601186   +   ELSE S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1601187   +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
1601188   +   ELSE S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1601189   +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
1601190   +   ELSE S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1601191   +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
1601192   +   ELSE S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1601193   +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
1601194   +   ELSE S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1601195   +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
1601196   +   ELSE S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1601197   +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
1601198   +   ELSE S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1601199   +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
1601200   +   ELSE S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1601201   +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
1601202   +   ELSE S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1601203   +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
1601204   +   ELSE S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1601205   +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
1601206   +   ELSE S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1601207   +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
1601208   +   ELSE S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1601209   +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
1601210   +   ELSE S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1601211   +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
1601212   +   ELSE S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1601213   +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
1601214   +   ELSE S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1601215   +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
1601216   +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
1601217   +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1601218   +END;
MPRINT(EM_DIAGRAM):   END;
1601219   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601220   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1601221   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601222   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601223   +   H11  =    -0.10779848418181 * S_PC_1  +     0.09315986878639 * S_PC_10
1601224   +          +    -0.03602343723016 * S_PC_11  +    -0.02214286994284 * S_PC_12
1601225   +          +      0.1463819191836 * S_PC_13  +    -0.06057500684726 * S_PC_14
1601226   +          +     0.04003057615401 * S_PC_15  +    -0.03171221434661 * S_PC_16
1601227   +          +     0.01959009419309 * S_PC_17  +     0.10171257983407 * S_PC_2
1601228   +          +     0.02117202187974 * S_PC_3  +    -0.02609959549496 * S_PC_4
1601229   +          +     0.06274377685426 * S_PC_5  +    -0.02936526023354 * S_PC_6
1601230   +          +    -0.01853862761408 * S_PC_7  +    -0.04891455650107 * S_PC_8
1601231   +          +    -0.06547184427141 * S_PC_9  +    -0.00614630950598 *
1601232   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.10779848418181 * S_PC_1 + 0.09315986878639 * S_PC_10 + 
-0.03602343723016 * S_PC_11 + -0.02214286994284 * S_PC_12 + 0.1463819191836 * S_PC_13 + 
-0.06057500684726 * S_PC_14 + 0.04003057615401 * S_PC_15 + -0.03171221434661 * S_PC_16 + 
0.01959009419309 * S_PC_17 + 0.10171257983407 * S_PC_2 + 0.02117202187974 * S_PC_3 + 
-0.02609959549496 * S_PC_4 + 0.06274377685426 * S_PC_5 + -0.02936526023354 * S_PC_6 + 
-0.01853862761408 * S_PC_7 + -0.04891455650107 * S_PC_8 + -0.06547184427141 * S_PC_9 + 
-0.00614630950598 * S_Year_Birth ;
1601233   +   H11  =    -0.80299655741874 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.80299655741874 + H11 ;
1601234   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1601235   +END;
MPRINT(EM_DIAGRAM):   END;
1601236   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601237   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1601238   +END;
MPRINT(EM_DIAGRAM):   END;
1601239   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601240   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1601241   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601242   +
1601243   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1601244   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1601245   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1601246   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1601247   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1601248   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1601249   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1601250   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1601251   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1601252   +end;
MPRINT(EM_DIAGRAM):   end;
1601253   +else do;
MPRINT(EM_DIAGRAM):   else do;
1601254   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1601255   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1601256   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1601257   +   end;
MPRINT(EM_DIAGRAM):   end;
1601258   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1601259   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1601260   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1601261   +   end;
MPRINT(EM_DIAGRAM):   end;
1601262   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1601263   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1601264   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1601265   +   end;
MPRINT(EM_DIAGRAM):   end;
1601266   +end;
MPRINT(EM_DIAGRAM):   end;
1601267   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601268   +   P_DepVar1  =    -20.6561051767535 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -20.6561051767535 * H11 ;
1601269   +   P_DepVar1  =    -16.6085807379215 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -16.6085807379215 + P_DepVar1 ;
1601270   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1601271   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1601272   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1601273   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1601274   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1601275   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1601276   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1601277   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1601278   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1601279   +END;
MPRINT(EM_DIAGRAM):   END;
1601280   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601281   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1601282   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1601283   +END;
MPRINT(EM_DIAGRAM):   END;
1601284   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1601285   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1601286   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1601287   +END;
MPRINT(EM_DIAGRAM):   END;
1601288   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1601289   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1601290   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1601291   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1601292   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1601293   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1601294   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1601295   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601296   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1601297   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601298   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1601299   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1601300   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1601301   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1601302   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1601303   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1601304   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1601305   +END;
MPRINT(EM_DIAGRAM):   END;
1601306   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1601307   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1601308   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1601309   +drop
1601310   +H11
1601311   +;
MPRINT(EM_DIAGRAM):   drop H11 ;
1601312   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1601313    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1601314    quit;
1601315    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1601316    filename emflow
1601316  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1601317    *------------------------------------------------------------*;
1601318    * Neural11: Scoring VALIDATE data;
1601319    *------------------------------------------------------------*;
1601320    data EMWS8.Neural11_VALIDATE
1601321    / view=EMWS8.Neural11_VALIDATE
1601322    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_VALIDATE / view=EMWS8.Neural11_VALIDATE ;
1601323    set EMWS8.PRINCOMP_VALIDATE
1601324    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
1601325    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural11\EMFLOWSCORE.sas.
1601326   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1601327   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1601328   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1601329   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1601330   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1601331   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1601332   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1601333   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1601334   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1601335   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1601336   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1601337   +LENGTH _WARN_ $4
1601338   +      F_DepVar  $ 12
1601339   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1601340   +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
1601341   +
1601342   +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
1601343   +
1601344   +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
1601345   +
1601346   +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
1601347   +
1601348   +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
1601349   +
1601350   +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
1601351   +
1601352   +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
1601353   +
1601354   +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
1601355   +
1601356   +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
1601357   +
1601358   +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
1601359   +
1601360   +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
1601361   +
1601362   +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
1601363   +
1601364   +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
1601365   +
1601366   +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
1601367   +
1601368   +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
1601369   +
1601370   +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
1601371   +
1601372   +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
1601373   +
1601374   +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
1601375   +
1601376   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1601377   +
1601378   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1601379   +
1601380   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1601381   +
1601382   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1601383   +
1601384   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1601385   +
1601386   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1601387   +
1601388   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1601389   +
1601390   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1601391   +
1601392   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1601393   +
1601394   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601395   +*** Checking missing input Interval
1601396   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1601397   +
1601398   +IF NMISS(
1601399   +   PC_1 ,
1601400   +   PC_10 ,
1601401   +   PC_11 ,
1601402   +   PC_12 ,
1601403   +   PC_13 ,
1601404   +   PC_14 ,
1601405   +   PC_15 ,
1601406   +   PC_16 ,
1601407   +   PC_17 ,
1601408   +   PC_2 ,
1601409   +   PC_3 ,
1601410   +   PC_4 ,
1601411   +   PC_5 ,
1601412   +   PC_6 ,
1601413   +   PC_7 ,
1601414   +   PC_8 ,
1601415   +   PC_9 ,
1601416   +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
1601417   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1601418   +
1601419   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1601420   +END;
MPRINT(EM_DIAGRAM):   END;
1601421   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601422   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1601423   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601424   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601425   +   S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1601426   +   S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1601427   +   S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1601428   +   S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1601429   +   S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1601430   +   S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1601431   +   S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1601432   +   S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1601433   +   S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1601434   +   S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1601435   +   S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1601436   +   S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1601437   +   S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1601438   +   S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1601439   +   S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1601440   +   S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1601441   +   S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1601442   +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1601443   +END;
MPRINT(EM_DIAGRAM):   END;
1601444   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601445   +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
1601446   +   ELSE S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1601447   +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
1601448   +   ELSE S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1601449   +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
1601450   +   ELSE S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1601451   +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
1601452   +   ELSE S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1601453   +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
1601454   +   ELSE S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1601455   +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
1601456   +   ELSE S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1601457   +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
1601458   +   ELSE S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1601459   +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
1601460   +   ELSE S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1601461   +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
1601462   +   ELSE S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1601463   +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
1601464   +   ELSE S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1601465   +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
1601466   +   ELSE S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1601467   +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
1601468   +   ELSE S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1601469   +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
1601470   +   ELSE S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1601471   +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
1601472   +   ELSE S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1601473   +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
1601474   +   ELSE S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1601475   +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
1601476   +   ELSE S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1601477   +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
1601478   +   ELSE S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1601479   +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
1601480   +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
1601481   +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1601482   +END;
MPRINT(EM_DIAGRAM):   END;
1601483   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601484   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1601485   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601486   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601487   +   H11  =    -0.10779848418181 * S_PC_1  +     0.09315986878639 * S_PC_10
1601488   +          +    -0.03602343723016 * S_PC_11  +    -0.02214286994284 * S_PC_12
1601489   +          +      0.1463819191836 * S_PC_13  +    -0.06057500684726 * S_PC_14
1601490   +          +     0.04003057615401 * S_PC_15  +    -0.03171221434661 * S_PC_16
1601491   +          +     0.01959009419309 * S_PC_17  +     0.10171257983407 * S_PC_2
1601492   +          +     0.02117202187974 * S_PC_3  +    -0.02609959549496 * S_PC_4
1601493   +          +     0.06274377685426 * S_PC_5  +    -0.02936526023354 * S_PC_6
1601494   +          +    -0.01853862761408 * S_PC_7  +    -0.04891455650107 * S_PC_8
1601495   +          +    -0.06547184427141 * S_PC_9  +    -0.00614630950598 *
1601496   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.10779848418181 * S_PC_1 + 0.09315986878639 * S_PC_10 + 
-0.03602343723016 * S_PC_11 + -0.02214286994284 * S_PC_12 + 0.1463819191836 * S_PC_13 + 
-0.06057500684726 * S_PC_14 + 0.04003057615401 * S_PC_15 + -0.03171221434661 * S_PC_16 + 
0.01959009419309 * S_PC_17 + 0.10171257983407 * S_PC_2 + 0.02117202187974 * S_PC_3 + 
-0.02609959549496 * S_PC_4 + 0.06274377685426 * S_PC_5 + -0.02936526023354 * S_PC_6 + 
-0.01853862761408 * S_PC_7 + -0.04891455650107 * S_PC_8 + -0.06547184427141 * S_PC_9 + 
-0.00614630950598 * S_Year_Birth ;
1601497   +   H11  =    -0.80299655741874 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.80299655741874 + H11 ;
1601498   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1601499   +END;
MPRINT(EM_DIAGRAM):   END;
1601500   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601501   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1601502   +END;
MPRINT(EM_DIAGRAM):   END;
1601503   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601504   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1601505   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601506   +
1601507   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1601508   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1601509   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1601510   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1601511   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1601512   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1601513   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1601514   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1601515   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1601516   +end;
MPRINT(EM_DIAGRAM):   end;
1601517   +else do;
MPRINT(EM_DIAGRAM):   else do;
1601518   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1601519   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1601520   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1601521   +   end;
MPRINT(EM_DIAGRAM):   end;
1601522   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1601523   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1601524   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1601525   +   end;
MPRINT(EM_DIAGRAM):   end;
1601526   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1601527   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1601528   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1601529   +   end;
MPRINT(EM_DIAGRAM):   end;
1601530   +end;
MPRINT(EM_DIAGRAM):   end;
1601531   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1601532   +   P_DepVar1  =    -20.6561051767535 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -20.6561051767535 * H11 ;
1601533   +   P_DepVar1  =    -16.6085807379215 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -16.6085807379215 + P_DepVar1 ;
1601534   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1601535   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1601536   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1601537   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1601538   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1601539   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1601540   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1601541   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1601542   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1601543   +END;
MPRINT(EM_DIAGRAM):   END;
1601544   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1601545   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1601546   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1601547   +END;
MPRINT(EM_DIAGRAM):   END;
1601548   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1601549   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1601550   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1601551   +END;
MPRINT(EM_DIAGRAM):   END;
1601552   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1601553   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1601554   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1601555   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1601556   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1601557   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1601558   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1601559   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601560   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1601561   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1601562   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1601563   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1601564   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1601565   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1601566   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1601567   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1601568   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1601569   +END;
MPRINT(EM_DIAGRAM):   END;
1601570   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1601571   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1601572   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1601573   +drop
1601574   +H11
1601575   +;
MPRINT(EM_DIAGRAM):   drop H11 ;
1601576   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1601577    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL11_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1601578    quit;
1601579    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1601580    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1601581    * Neural11: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural11: Computing metadata for TRAIN data;
1601582    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural11\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural11_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural11_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural11_TRAIN out=WORK.M2N1LRDH noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2N1LRDH;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N1LRDH(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2N1LRDH;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N1LRDH;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3J0TPSX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2AZC2UG(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   set WORK.M3J0TPSX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural11";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural11";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural11";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural11: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1601894    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1601895    set EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO;
1601896    where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
1601897    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL11_EMINFO.
      WHERE (DATA='Neural11') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601898    data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural11_EMINFO;
1601899    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1601900    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1601901    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
1601905    run;
1601906    data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
1601907    set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural11_EMINFO WORK.MODELTEMP_INFO;
1601908    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601909    proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural11_EMINFO NOTHREADS;
1601910    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1601911    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601912    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1601913    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1601914    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601915    proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1601916    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1601917    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL11_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601918    data EMWS8.Neural11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural11_EMINFO;
1601919    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1601920    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1601921    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL11_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1601922    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1601923    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1601924    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1601925    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL11_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL11_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
