*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                08.22 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.08 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                08.08 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O132AMNF
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O132AMNF new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.08 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.08 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
367714     proc freq data=EMWS8.SVM_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM_VariableSet noprint;
367715     table ROLE*LEVEL/out=WORK.SVMMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVMMETA;
367716     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.SVM_VARIABLESET.
NOTE: The data set WORK.SVMMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
367717     proc print data=WORK.SVMMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVMMETA label noobs;
367718     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
367719     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
367719   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
367719   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
367720     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
367721     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
367722     run;
 
NOTE: There were 7 observations read from the data set WORK.SVMMETA.
NOTE: The PROCEDURE PRINT printed page 137.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
367723     title10;
MPRINT(EM_DIAGRAM):   title10;
367724     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM_DepVar_DD
out=EMWS8.SVM_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
367771     data WORK.SVM_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
367772     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
367773     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
367773   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
367773   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
367774        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
367774   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
367774   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
367775     set EMWS8.SVM_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_DEPVAR_DM( where=(_TYPE_="TARGET"));
367776     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
367777     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
367778     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
367779     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
367780     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
367781     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
367782     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
367783     end;
MPRINT(EM_DIAGRAM):   end;
367784     output;
MPRINT(EM_DIAGRAM):   output;
367785     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
367786     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
367787     proc print data=WORK.SVM_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM_EVENT noobs label;
367788     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
367789     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
367790     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
367791     run;
 
NOTE: There were 1 observations read from the data set WORK.SVM_EVENT.
NOTE: The PROCEDURE PRINT printed page 138.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
367792     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
367793     proc print data = EMWS8.SVM_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM_DepVar_DM noobs label;
367794     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
367795     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
367796     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
367796   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
367796   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
367797     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
367798     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
367799     run;
 
NOTE: There were 7 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 139.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
367800     title10;
MPRINT(EM_DIAGRAM):   title10;
367801     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
368316     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
368317     * SVM: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM: Generation of macros and macro variables;
368318     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
368319     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
368320     %let EMEXCEPTIONSTRING=;
368321     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
368322     * TRAIN: SVM;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM;
368323     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
368324     %let EM_ACTION = TRAIN;
368325     %let syscc = 0;
368326     %macro main;
368327
368328        filename temp catalog 'sashelp.emmodl.svm_macros.source';
368329        %include temp;
368330        filename temp;
368331        %SetProperties;
368332        %if %upcase(&EM_ACTION) = CREATE %then %do;
368333            filename temp catalog 'sashelp.emmodl.svm_create.source';
368334            %include temp;
368335            filename temp;
368336            %create;
368337        %end;
368338        %else
368339        %if %upcase(&EM_ACTION) = TRAIN %then %do;
368340            filename temp catalog 'sashelp.emmodl.svm_train.source';
368341            %include temp;
368342            filename temp;
368343            %train;
368344        %end;
368345        %else
368346        %if %upcase(&EM_ACTION) = REPORT %then %do;
368347            filename temp catalog 'sashelp.emmodl.svm_report.source';
368348            %include temp;
368349            filename temp;
368350            %report;
368351        %end;
368352
368353     %mend main;
368354
368355     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
368357    +%macro SetProperties;
368358    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
368359    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
368360    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
368361    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
368362    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
368363    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
368364    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
368365    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
368366    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
368367    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
368368    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
368369    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
368370    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
368371    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
368372    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
368373    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
368374    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
368375    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
368376    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
368377    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
368378    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
368379    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
368380    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
368381    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
368382    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
368383    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
368384    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
368385    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
368386    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
368387    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
368388    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
368389    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
368390    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
368391    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
368392    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
368393    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
368394    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
368395    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
368396    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
368397    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
368398    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
368399    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
368400    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
368401    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
368402    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
368403    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
368404    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
368405    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
368406    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
368407    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
368409    +%mend SetProperties;
368412    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
368414    +  %local emclassout emvarout;
368416    +   proc dmdb batch dmdbcat= _emdmdb
368418    +   %if &out ne 0 %then %do ;
368419    +       data=&indata out= _emdmdb &emclassout &emvarout;
368420    +   %end ;
368421    +   %else %do ;
368422    +       data=&indata &emclassout &emvarout;
368423    +   %end ;
368425    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
368426    +   %if %em_class   ne  %then %do ;
368427    +       class %EM_CLASS;
368428    +   %end ;
368429    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
368430    +   %if %em_target ne %then %do ;
368431    +          target %em_target ;
368432    +   %end ;
368433    +   run ;
368434    +%mend make_dmdb;
368437    +%macro svm_training(indata=,
368438    +                    task=,
368439    +                    classtask=,
368440    +                    method=,
368441    +                    outest =,
368442    +                    outclass =,
368443    +                    outfit =,
368444    +                    isValidationSet =,
368445    +                    testdata =,
368446    +                    testout =,
368447    +                    validSource=,
368448    +                    usecgbydefault=
368449    +                    );
368451    +%make_dmdb(indata=&indata, out=1);
368453    +options debug="nlpitermsg=2";
368455    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
368456    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
368457    +ods output tun_crt = &EM_USER_TUNINGCRIT;
368458    +%end;
368460    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
368461    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
368462    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
368463    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
368465    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
368466    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
368467    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
368468    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
368471    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
368472    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
368473    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
368474    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
368476    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
368477    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
368478    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
368479    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
368482    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
368483    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
368484    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
368485    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
368488    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
368489    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
368490    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
368491    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
368492    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
368493    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
368494    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
368495    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
368496    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
368497    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
368498    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
368499    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
368503    +proc svm data= _emdmdb
368504    +         dmdbcat= _emdmdb
368505    +         nomonitor
368506    +         outfit= &outfit
368507    +         outclass= &outclass
368508    +         outest= &outest
368509    +         out = _outtrain
368510    +         maxiter = &_PROPERTY_MAXITER
368511    +         maxfunc = &_PROPERTY_MAXFUNC
368512    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
368513    +         gconv =   &_PROPERTY_GCONV
368514    +         absgconv = &_PROPERTY_ABSGCONV
368515    +         xconv =   &_PROPERTY_XCONV
368516    +         absxconv = &_PROPERTY_ABSXCONV
368518    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
368519    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
368520    +             xscale
368521    +         %end;
368522    +         %else %do;
368523    +             noscale
368524    +         %end;
368525    +    %end;
368526    +    %if &task eq CLASSIFICATION %then %do;
368527    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
368528    +         method= &method
368529    +        %end;
368530    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
368531    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
368532    +        %end;
368533    +        %else %do;
368534    +         method= &EM_PROPERTY_METHOD
368535    +        %end;
368536    +    %end;
368537    +    %else %do;
368538    +         method= &method  task=&classtask
368539    +         /*%if &classtask eq EPS_REG %then %do; */
368540    +             esp=&_PROPERTY_EPSILON
368541    +         /*%end;*/
368542    +    %end;
368544    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
368545    +         kernel = &EM_PROPERTY_KERNEL
368546    +    %end;
368547    +    %else %do;
368548    +         kernel = Linear
368549    +    %end;
368551    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
368553    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
368554    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
368555    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
368556    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
368557    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
368558    +            tun = &EM_PROPERTY_TUNINGMETHOD
368559    +        %end;
368561    +    %end;
368563    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
368564    +         CV  = &EM_PROPERTY_CVMETHOD
368565    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
368566    +         fold = &EM_PROPERTY_CVFOLD
368567    +         %end;
368568    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
368569    +                testdata = &testdata
368570    +         %end;
368571    +    %end;
368573    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
368574    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
368575    +    %end;
368577    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
368578    +    &EM_PROPERTY_PRINTOPTION
368579    +    %end;
368581    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
368582    +    POPTHIS
368583    +    %end;
368584    +    ;
368585    +    var %EM_INPUT %EM_REJECTED;
368586    +    target %EM_TARGET;
368588    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
368590    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
368591    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
368592    +             by &_PROPERTY_TUN_C_BY
368593    +             ;
368594    +         %end;
368595    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
368596    +             C  &_PROPERTY_USERCVALUE ;
368597    +         %end;
368599    +     %end;
368600    +     %else %do;
368601    +           C  &_PROPERTY_USERCVALUE ;
368602    +     %end;
368605    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
368607    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
368608    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
368609    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
368610    +                  by &_PROPERTY_POLY_TUN_KP1_BY
368611    +                ;
368612    +             %end;
368613    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
368614    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
368615    +             %end;
368616    +          %end;
368617    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
368618    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
368619    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
368620    +                ;
368621    +              %end;
368622    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
368623    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
368624    +              %end;
368625    +           %end;
368626    +           %else %do;
368627    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
368628    +           %end;
368629    +    %end;
368631    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
368632    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
368633    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
368634    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
368635    +                  by &_PROPERTY_RBF_TUN_KP1_BY
368636    +                  ;
368637    +              %end;
368638    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
368639    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
368640    +              %end;
368641    +          %end;
368642    +          %else %do;
368643    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
368644    +          %end;
368645    +    %end;
368648    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
368650    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
368652    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
368653    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
368654    +                by &_PROPERTY_SGMD_TUN_KP1_BY
368655    +             ;
368656    +             %end;
368657    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
368658    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
368659    +             %end;
368661    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
368662    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
368663    +                by &_PROPERTY_SGMD_TUN_KP2_BY
368664    +             ;
368665    +             %end;
368666    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
368667    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
368668    +             %end;
368669    +          %end;
368670    +          %else %do;
368671    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
368672    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
368673    +          %end;
368674    +    %end;
368676    +run;
368677    +%TRAINENDLINE:
368678    +quit;
368679    +%mend svm_training;
368681    +%macro svm_score(indata=,
368682    +                 inest=,
368683    +                 infit=,
368684    +                 inclass=,
368685    +                 outindata=,
368686    +                 outscore=,
368687    +                 targetLevel=
368688    +                 );
368691    +%if &TargetLevel eq BINARY %then %do;
368693    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
368695    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
368696    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
368697    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
368698    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
368701    +%do %while(^ %sysfunc(fetch(&dsid)));
368702    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
368703    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
368704    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
368705    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
368706    +%end;
368708    +%let dsid = %sysfunc(close(&dsid));
368711    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
368712    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
368714    +%do %while(^ %sysfunc(fetch(&dsid)));
368715    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
368716    +%end;
368717    +%let dsid = %sysfunc(close(&dsid));
368719    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
368720    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
368722    +%do %while(^ %sysfunc(fetch(&dsid)));
368723    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
368724    +%end;
368725    +%let dsid = %sysfunc(close(&dsid));
368728    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
368729    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
368730    +run;
368732    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
368733    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
368733   !+from a part of %EM_MODEL() macro */
368735    +data &outscore(drop=_P);
368736    +      set  &outscore;
368737    +     if (_P_ < -600) then _p =0;
368738    +     else _P = 1/(1+EXP((-1)*(_P_)));
368740    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
368741    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
368742    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
368744    +%do %while(^ %sysfunc(fetch(&dsid)));
368745    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
368746    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
368747    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
368748    +       &P_Var = _P;
368749    +   %end;
368750    +   %else %do;
368751    +       &P_Var = 1 - _P;
368752    +       %let targetNonEvent = &P_LEVEL;
368753    +   %end;
368754    +%end;
368755    +%let dsid = %sysfunc(close(&dsid));
368757    +%include resifref;
368759    +run;
368761    +filename resifref;
368763    +%end; /* the end of if - targetlevel eq binary */
368764    +%else %do;
368766    +/* ----     interval target  ------ */
368768    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
368769    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
368771    +%do %while(^ %sysfunc(fetch(&dsid)));
368772    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
368773    +%end;
368774    +%let dsid = %sysfunc(close(&dsid));
368776    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
368777    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
368779    +%do %while(^ %sysfunc(fetch(&dsid)));
368780    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
368781    +%end;
368783    +%let dsid = %sysfunc(close(&dsid));
368785    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
368786    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
368787    +run;
368789    +%end; /* end of targetlevel eq interval */
368792    +%mend svm_score;
368795    +%macro makeSVMFitStatDs();
368797    +data &EM_USER_SVMFITDS;
368798    +     set &EM_USER_SVMFITSTAT;
368799    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
368799   !+noquote))";
368800    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
368800   !+rpt_svmfitstat_label_k_par2, noquote))";
368801    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
368801   !+rpt_svmfitstat_label_k_par3, noquote))";
368802    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
368802   !+ noquote))";
368803    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
368803   !+noquote))";
368804    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
368804   !+rpt_svmfitstat_label_margin, noquote))";
368805    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
368805   !+ noquote))";
368806    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
368806   !+noquote))";
368807    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
368807   !+noquote))";
368808    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
368808   !+noquote))";
368809    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
368809   !+noquote))";
368810    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
368810   !+noquote))";
368811    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
368811   !+rpt_svmfitstat_label_ntrain, noquote))";
368812    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
368812   !+ noquote))";
368813    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
368813   !+ noquote))";
368814    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
368814   !+noquote))";
368815    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
368815   !+rpt_svmfitstat_label_radius, noquote))";
368816    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
368816   !+noquote))";
368817    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
368817   !+noquote))";
368818    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
368818   !+ noquote))";
368819    +    if _TYPE_ ='_ACCTAB_' then delete;
368820    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
368821    +      _BIAS_= _K_PAR_;
368822    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
368823    +    %end;
368824    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
368825    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
368826    +    %end;
368827    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
368828    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
368829    +    %end;
368830    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
368831    +      DROP _K_PAR3_  _L1_;
368832    +    %end;
368833    +run;
368835    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
368836    +run;
368838    +data &EM_USER_SVMFITDS;
368839    +     set &EM_USER_SVMFITDS;
368840    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
368840   !+;
368841    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
368842    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
368842   !+noquote))";
368843    +     Rename COL1 = Train;
368844    +     if _NAME_ = '_ACCU_' then delete;
368845    +run;
368847    +%mend makeSVMFitStatDs;
368849    +%macro svm_fitstat(validSource=);
368851    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
368852    +            %if &_validSource= VALIDSET %then %do;
368853    +                validDs=work._tmp_scored_test,
368854    +                testDs=,
368855    +            %end;
368856    +            %else %if &_validSource= TESTSET %then %do;
368857    +                validDs=,
368858    +                testDs=work._tmp_scored_test,
368859    +            %end;
368860    +            decdata=&EM_DEC_DECDATA,
368861    +            decmeta=&EM_DEC_DECMETA,
368862    +            freqvar=, df=,
368863    +            outfit=&EM_DATA_EMOUTFIT);
368865    +data &EM_DATA_EMOUTFIT;
368866    +     set &EM_DATA_EMOUTFIT;
368867    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
368867   !+_SBC_; /* Because of DF */
368868    +run;
368869    +%mend svm_fitstat;
368871    +/*----------------------------------------------------------------------------------
368871   !+-----
368872    +   OUTEST data set
368874    +                                                       APRTMNT_  APRTMNT_   TELIND_
368874   !+  TELIND_
368875    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
368875   !+     2_
368877    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
368877   !+   0.97609
368878    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
368878   !+   0.15280
368879    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
368879   !+  -0.07311
368881    +=-----------------------------------------------------------------------------------
368881   !+--*/
368882    +/* this is not used, generate score code directly for the case of linear svm */
368883    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
368883   !+Residual=);
368885    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
368887    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
368888    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
368889    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
368890    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
368891    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
368893    +%do %while(^ %sysfunc(fetch(&dsid)));
368894    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
368895    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
368896    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
368897    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
368898    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
368899    +%end;
368900    +%let dsid = %sysfunc(close(&dsid));
368902    +data _cmeta;
368903    +    set &ColumnsMeta;
368904    +    NAME = upcase(strip(NAME));
368905    +run;
368907    +data _tmpclass;
368908    +       set &outclass;
368909    +   _VAR_ = upcase(strip(_VAR_));
368910    +run;
368912    +proc sql;
368913    +create table _outclass as
368914    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
368915    +  from  _tmpclass, _cmeta
368916    +  where _tmpclass._VAR_ = _cmeta.NAME;
368917    +run;
368919    +data _outclass;
368920    +    set _outclass;
368921    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
368922    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
368923    +run;
368924    +data _meands;
368925    +    set &outest;
368926    +    if _TYPE_='_MEAN_';
368927    +run;
368929    +/*
368930    +data _null_;
368931    +    set &outest;
368932    +    if _TYPE_='_PARMS_';
368933    +    call symput('bias', _STDEV_ );
368934    +    call symput('intercept', _MEAN_ );
368935    +run;
368936    +*/
368938    +filename  _File_ "&File";
368939    +data _null_;
368940    +    FILE _File_;
368941    +    length _line $500;
368942    +    drop _line;
368944    +    put ' ';
368945    +    put '/*-------------------------------------------------*/';
368946    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
368947    +    put '/*-------------------------------------------------*/';
368948    +    put ' ';
368950    +    put 'length _warn_ $ 4;';
368951    +    put 'label _warn_ = "Warnings";';
368952    +    put 'length _svm_uname $32;';
368953    +    put 'DROP _svm_uname ;';
368955    +  dsid = open("work._outclass");
368956    +    if dsid then do;
368957    +          oldvname ='';
368958    +          do while(not fetch(dsid));
368959    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
368960    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
368961    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
368962    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
368963    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
368964    +             *put 'vtype =' vtype;
368965    +             *put 'vformat=' vformat;
368967    +             if oldname ne vname then do;
368968    +                 if vtype = 'N' then do;
368969    +                     if vformat eq ' ' then do;
368970    +                        put '_svm_uname = put(' vname ', Best12.);';
368971    +                     end; else do;
368972    +                        put '_svm_uname = put(' vname ',' vformat ');';
368973    +                     end;
368974    +                  end;
368975    +                  else do;
368976    +                     if vformat eq ' ' then do;
368977    +                        put '_svm_uname = ' vname ' ;';
368978    +                     end; else do;
368979    +                        put '_svm_uname = put(' vname ',' vformat ');';
368980    +                     end;
368981    +                  end;
368982    +                  put '%DMNORMIP(_svm_uname);';
368983    +              end; /* end of oldname ne vname */
368985    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
368986    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
368987    +              put _line;
368988    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
368988   !+;';
368989    +              oldname = vname;
368990    +          end;
368992    +     end;
368993    +rc=close(dsid);
368995    +dsid = open("&outest");
368996    +    if dsid then do;
368997    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
368997   !+noquote))"  "------ */";
368998    +          ncol = attrn(dsid, 'NVARS');
368999    +          do i=4 to ncol;
369000    +             vname = upcase(trim(left(varname(dsid,i))));
369001    +              do while(not fetch(dsid));
369002    +                  type = strip(getvarc(dsid,2));
369003    +                  select(type);
369004    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
369005    +                      when('_STDEV_') std  =  getvarn(dsid, i);
369006    +                      when('_PARMS_') coeff = getvarn(dsid, i);
369007    +                  otherwise;
369008    +                  end;
369009    +              end; /* end of do-while*/
369010    +              *put '+' coeff '*(' vname '-' mean ')/' std;
369011    +              if i=4 then  do; put '_P_ =(' coeff ; end;
369012    +              else if i=5 then do; put '+' coeff ');' ; end;
369013    +              else do;
369014    +                      tmpvar = '_TMPVAR'||strip(i);
369015    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
369016    +                      put 'else ' tmpvar '=' vname ';';
369017    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
369018    +                      put 'drop  ' tmpvar ';';
369019    +              end;
369020    +              rc=rewind(dsid);
369021    +         end; /* end of  do i=6 to &nvars; */
369022    +         put ';';
369023    +     end;
369024    +    rc=close(dsid);
369025    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
369025   !+"------ */";
369027    +%if &TargetLevel eq BINARY %then %do;
369029    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
369030    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369031    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
369033    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
369034    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
369036    +%do %while(^ %sysfunc(fetch(&dsid)));
369037    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
369038    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
369039    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
369040    +       put " &P_Var = _P;";
369041    +   %end;
369042    +   %else %do;
369043    +       put " &P_Var = 1 - _P;";
369044    +   %let targetNonEvent = &P_LEVEL;
369045    +   %end;
369046    +%end;
369047    +%let dsid = %sysfunc(close(&dsid));
369049    +%if &Residual = Y %then %do;
369051    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
369051   !+"------ */";
369053    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
369054    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369055    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
369057    +   %do %while(^ %sysfunc(fetch(&dsid)));
369058    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
369059    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
369060    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
369061    +       put " &R_Var = 1 - _P;";
369062    +   %end;
369063    +   %else %do;
369064    +       put " &R_Var = 0 - (1 - _P);";
369065    +   %end;
369066    +   %end;
369067    +   %let dsid = %sysfunc(close(&dsid));
369068    +%end;
369069    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
369069   !+"------ */";
369071    +    put 'length _FORMAT_VAR $200;';
369072    +    put 'length _TARGNOR $%DMNORLEN; ';
369073    +    put 'DROP _FORMAT_VAR _TARGNOR;';
369074    +    %if &TargetFormat ne  %then %do;
369075    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
369076    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
369077    +    %end;
369078    +    %else %do;
369079    +    %if &TargetType  = N  %then %do;
369080    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
369081    +       %end;
369082    +       %else %do;
369083    +    put "_FORMAT_VAR= &TargetVar;";
369084    +       %end;
369085    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
369086    +    %end;
369088    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
369089    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
369090    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
369092    +    %do %while(^ %sysfunc(fetch(&dsid)));
369093    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
369094    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
369095    +        %let qF_var_label = %str(%"&F_var_label%");
369096    +    put "&F_var = _TARGNOR ;";
369097    +    put "label &F_var = &qF_Var_label;";
369098    +    %end;
369099    +    %let dsid = %sysfunc(close(&dsid));
369101    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
369101   !+"------ */";
369103    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
369104    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369105    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
369107    +%do %while(^%sysfunc(fetch(&dsid)));
369108    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
369109    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
369110    +   %let qI_var_label = %str(%"&I_var_label%");
369111    +   %let qTargetEvent = %str(%"&targetEvent%");
369112    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
369113    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
369114    +       put " else &I_Var  =  &qtargetNonEvent ;";
369115    +       put " label &I_var = &qI_var_label;";
369116    +%end;
369117    +%let dsid = %sysfunc(close(&dsid));
369119    +%end;  /* end of TargetLevel= Binary */
369121    +%else %if &TargetLevel eq INTERVAL %then %do;
369123    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
369124    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369125    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
369127    +%do %while(^ %sysfunc(fetch(&dsid)));
369128    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
369129    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
369130    +   %let qP_label = %str(%"&P_label%");
369131    +    put " &P_Var = _P_;";
369132    +    put " label &P_Var = &qP_label;";
369133    +%end;
369134    +%let dsid = %sysfunc(close(&dsid));
369136    +%if &Residual = Y %then %do;
369138    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
369138   !+"------ */";
369140    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
369141    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369142    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
369144    +   %do %while(^ %sysfunc(fetch(&dsid)));
369145    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
369146    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
369147    +     %let qR_label = %str(%"&R_label%");
369148    +       put " &R_Var = &TargetVar - &P_var;";
369149    +       put " label &R_Var = &qR_label;";
369150    +   %end;
369151    +   %let dsid = %sysfunc(close(&dsid));
369152    +%end;
369154    +%end;   /* end of TargetLevel= Interval */
369156    +  put "/*------------------------------------------------------------*/";
369157    +proc datasets lib=work nolist;
369158    + delete _tmpclass _cmeta _outclass;
369159    +run;
369160    +run;
369162    +filename  _File_;
369164    +%mend gen_score;
369166    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
369167    +%global &nLevel;
369168    +proc dmdb batch data=&indata
369169    +classout=_tmp_dmdbout;
369170    +class &target;
369171    +run;
369172    +data _tmp_dmdbout;
369173    +    set _tmp_dmdbout;
369174    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
369175    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
369176    +run;
369177    +data _null_;
369178    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
369179    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
369180    +    %let dsid = %sysfunc(close(&dsid));
369181    +     call symput("&nLevel", put(&_obs, Best12.));
369182    +run;
369184    +proc datasets lib=work nolist;
369185    +     delete _tmp_dmdbout;
369186    +run;
369187    +quit;
369188    +%Mend CheckBinaryTargetLevel;
369191    +%macro getNObs(inds=, nobs=);
369192    +    %global &nobs;
369193    +    data _null_;
369194    +        set &inds end=eof;
369195    +        if eof then call symput("&nobs", _N_);
369196    +    run;
369197    +    quit;
369198    +%mend  getNObs;
369202    +%macro makeAlphaDs(target=, cmeta=);
369204    + %let isOBSIndex= N;
369205    + %let dsid = %sysfunc(open(&cmeta));
369206    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
369207    + %do %while(^%sysfunc(fetch(&dsid)));
369208    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
369209    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
369210    + %end;
369211    + %let dsid = %sysfunc(close(&dsid));
369213    +data &EM_USER_OUTALPHA;
369214    +     set _sample_train;
369215    +     set _outtrain(keep=_ALPHA_ _BOUND_);
369216    +     %if &isOBSIndex= N %then %do;
369217    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
369218    +     %end;
369219    +     %else %do;
369220    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
369221    +     %end;
369222    +run;
369224    +data &EM_EXPORT_TRAIN;
369225    +     length _OBS_ 8;
369226    +     set &EM_EXPORT_TRAIN;
369227    +     _OBS_ = _N_;
369228    +run;
369230    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
369231    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
369232    +     by _OBS_;
369233    +     if _ALPHA_ =. then _ALPHA_=0;
369234    +     if _BOUND_ ="" then _BOUND_="_LBC";
369235    +run;
369237    +data &EM_USER_OUTALPHA;
369238    +   set &EM_USER_OUTALPHA;
369239    +   if _ALPHA_ = 0 then delete;
369240    +   %if &isOBSIndex= N %then %do;
369241    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
369242    +   rename _OBS_ = _dataobs_;
369243    +   %end;
369244    +   %else %do;
369245    +   drop _OBS_;
369246    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
369246   !+noquote))";
369247    +   %end;
369248    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
369249    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
369250    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
369251    +   run;
369253    +%mend makeAlphaDs;
369256    +%macro makeTunData();
369257    +data &EM_USER_TUNINGCRIT;
369258    +    set &EM_USER_TUNINGCRIT;
369259    +    Drop N;
369260    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
369261    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
369262    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
369263    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
369264    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
369265    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
369266    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
369266   !+noquote))";
369267    +run;
369268    +%mend makeTunData;
369270    +/*------------------ Score Code Generation with Proc SVMScore
369270   !+----------------------  */
369273    +%macro score_code(TargetLevel=, type=);
369275    +%let _inoutest = WORK._inoutest ;
369276    +%let _inoutfit = WORK._inoutfit ;
369277    +%let _inoutclass = WORK._inoutclass;
369279    +%if &type eq FLOW %then %do;
369280    +    %let _inoutest = &EM_USER_OUTEST;
369281    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
369282    +    %let _inoutclass = &EM_USER_OUTCLASS;
369283    +%end;
369284    +%else %do;
369285    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
369285   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
369286    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
369286   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
369287    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
369287   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
369288    +%end;
369290    +%let emscoreout = %str(&)%str(em_score_output);
369293    +%if &type eq FLOW %then %do;
369294    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
369295    +%end;
369296    +%else %do;
369297    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
369298    +%end;
369300    +data _null_;
369301    +    FILE _File_ MOD;
369303    +    put ' ';
369304    +    put '/*-------------------------------------------------*/';
369305    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
369305   !+;
369306    +    put '/*-------------------------------------------------*/';
369307    +    put ' ';
369309    +%if &TargetLevel eq BINARY %then %do;
369311    +/*%put &emscoreout;  */
369313    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
369314    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369316    +%do %while(^ %sysfunc(fetch(&dsid)));
369317    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
369319    +%end;
369320    +%let dsid = %sysfunc(close(&dsid));
369322    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
369323    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369325    +%do %while(^ %sysfunc(fetch(&dsid)));
369326    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
369328    +%end;
369329    +%let dsid = %sysfunc(close(&dsid));
369332    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
369332   !+inclass=&_inoutclass";
369333    +    %if &type eq FLOW %then %do;
369334    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
369335    +    %end;
369336    +    %else %do;
369337    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
369338    +    %end;
369339    +    put ";";
369340    +    put "run;";
369343    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
369345    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
369346    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
369347    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
369348    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
369351    +%do %while(^ %sysfunc(fetch(&dsid)));
369352    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
369353    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
369354    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
369355    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
369356    +%end;
369358    +%let dsid = %sysfunc(close(&dsid));
369360    +    put "data &emscoreout(drop=_P);";
369361    +    put "     set &emscoreout;";
369362    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
369363    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
369365    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
369366    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369367    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
369369    +%do %while(^ %sysfunc(fetch(&dsid)));
369370    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
369371    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
369372    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
369373    +    put " &P_Var = _P ;";
369374    +   %end;
369375    +   %else %do;
369376    +    put " &P_Var = 1 - _P ;";
369377    +    %let targetNonEvent = &P_LEVEL;
369378    +   %end;
369379    +%end;
369380    +%let dsid = %sysfunc(close(&dsid));
369382    +%end; /* the end of if - targetlevel eq binary */
369383    +%else %do;
369385    +/* ----     interval target  ------ */
369387    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
369388    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369390    +%do %while(^ %sysfunc(fetch(&dsid)));
369391    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
369392    +%end;
369393    +%let dsid = %sysfunc(close(&dsid));
369395    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
369396    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
369397    +%do %while(^ %sysfunc(fetch(&dsid)));
369398    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
369399    +%end;
369400    +%let dsid = %sysfunc(close(&dsid));
369402    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
369402   !+inclass=&_inoutclass ";
369403    +    %if &type eq FLOW %then %do;
369404    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
369405    +    %end;
369406    +    %else %do;
369407    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
369408    +    %end;
369409    +    put ";";
369411    +%end; /* end of targetlevel eq interval */
369413    +run;
369414    +filename  _File_;
369415    +%mend score_code;
369418    +%macro makeDeltaCode(TargetLevel=);
369419    +*--- Build Code to Modify Metadata ---*;
369420    +filename X "&EM_FILE_CDELTA_TRAIN";
369422    +/* modify columns meta */
369423    +data _null_;
369424    +    file X;
369425    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
369426    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
369427    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
369428    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
369429    +run;
369430    +%mend makeDeltaCode;
369432    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
369433    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
369435    +    %do;
369436    +    %let m_data      = &data;
369437    +    %let m_decdata   = &decdata;
369438    +    %let m_decmeta   = &decmeta;
369439    +    %let m_noresfile = &noresfile;
369440    +    %let m_resfile   = &resfile;
369441    +    dm "afa c=sashelp.emutil.decidecode.scl";
369442    +  %end;
369443    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
369444    +%Macro Train;
369447    +/*%let SVM_MAXNUMOBS = 10000; */
369448    +/*%let EM_SCORECODEFORMAT=PROC;*/
369449    +/*%let SVM_SAMPLESIZE = 100; */
369451    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
369452    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
369453    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
369454    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
369455    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
369456    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
369457    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
369460    +/*---------- Check the input data set ---------------------*/
369461    +%if &EM_IMPORT_DATA eq  %then %do;
369462    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
369463    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
369464    +%GOTO ENDLINE;
369465    +%end;
369467    +/*----------- Check the target variable  -------------------*/
369469    +%let _targetVar= %EM_TARGET;
369470    +%let _targetlevel = %EM_TARGET_LEVEL;
369472    +%if &_targetVar eq  %then %do;
369473    +%PUT ERROR:THERE IS NO VALID TARGET;
369474    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
369475    +%GOTO ENDLINE;
369476    +%end;
369478    +%let K = %SCAN(&_targetVar, 2, %STR( ));
369479    +%if &K > %then %do;
369480    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
369481    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
369482    +%GOTO ENDLINE;
369483    +%end;
369485    +/* check actual num of target levels */
369486    +%if (&_targetLevel eq BINARY) %then %do;
369487    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
369487   !+nLevel=_nTargetLevel );
369488    +    %if &_nTargetLevel  > 2 %then %do;
369489    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
369489   !+;
369490    +    %GOTO ENDLINE;
369491    +    %end;
369492    +%end;
369493    +%else %do;
369494    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
369494   !+ SUPPORTS ONLY BINARY TARGET;
369495    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
369496    +      %GOTO ENDLINE;
369497    +%end;
369499    +%let _PROPERTY_TASK = ;
369500    +%let _PROPERTY_CLASSTASK = ;
369501    +%let _PROPERTY_METHOD = ;
369502    +%if (&_targetLevel eq BINARY) %then %do;
369503    +      %let _PROPERTY_TASK = CLASSIFICATION;
369504    +      %let _PROPERTY_CLASSTASK = C_CLAS;
369505    +      %let _PROPERTY_METHOD = LINSVM;
369506    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
369507    +%else %if (&_targetLevel eq INTERVAL) %then %do;
369508    +      /* for interval target */
369509    +      %let _PROPERTY_TASK = REGRESSION;
369510    +      %let _PROPERTY_CLASSTASK = L2_REG;
369511    +      %let _PROPERTY_METHOD = LSSVM;
369512    +%end; %else %do;
369513    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
369514    +      %GOTO ENDLINE;
369516    +%end;
369519    +%let _isValidationSet =NO;
369520    +%let _testdata =;
369521    +%let _testout =;
369522    +%let _validSource=;
369524    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
369525    +        %let _isValidationSet = YES;
369526    +        %let _testdata = &EM_IMPORT_VALIDATE;
369527    +        %let _testout = &EM_EXPORT_VALIDATE;
369528    +        %let _validSource= VALIDSET;
369529    +%end;
369530    +%else %do;
369531    +        %if &EM_IMPORT_TEST  ne  %then %do;
369532    +         %let _isValidationSet = YES;
369533    +         %let _testdata = &EM_IMPORT_TEST;
369534    +         %let _testout = &EM_EXPORT_TEST;
369535    +         %let _validSource= TESTSET;
369536    +         %end;
369537    +%end;
369539    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
369540    +    %if &_isValidationSet eq NO  %then %do;
369541    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
369542    +    %GOTO ENDLINE;
369543    +    %end;
369544    +%end;
369546    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
369547    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
369548    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
369549    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
369550    +%let _num_input_class =
369550   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
369551    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
369553    +%if  &_num_input_total < 2 %then %do;
369554    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
369555    +         %goto ENDLINE;
369556    +         %end;
369559    +/*
369560    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
369560   !+%then %do;
369562    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
369564    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
369565    +         %let  EMEXCEPTIONSTRING =
369565   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
369566    +               %goto endline;
369567    +    %end;
369568    +%end;
369569    +*/
369571    +/*------ Training ----------------------*/
369572    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
369573    +    %if (&_targetLevel ne INTERVAL) %then %do;
369574    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
369574   !+METADATA=&EM_DATA_VARIABLESET,
369575    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
369575   !+INDEX=Y, INDEXNAME=_OBS_ );
369576    +    %end;
369577    +    %else %do;
369578    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
369578   !+METADATA=&EM_DATA_VARIABLESET,
369579    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
369579   !+INDEX=Y, INDEXNAME=_OBS_ );
369580    +    %end;
369581    +%end;
369582    +%else %do;
369583    +data _sample_train;
369584    +    length _OBS_ 8.;
369585    +    set &EM_IMPORT_DATA;
369586    +    _OBS_ = _N_;
369587    +run;
369588    +%end;
369589    +%let _usecgbydefault=;
369590    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
369591    +    %let _usecgbydefault = N;
369592    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
369593    +    %if &_trainnobs > 3000   %then %do;
369594    +    %let _usecgbydefault = Y;
369595    +   %end;
369596    +%end;
369598    +%svm_training(indata=_sample_train,
369599    +              task=&_PROPERTY_TASK,
369600    +              classtask =&_PROPERTY_CLASSTASK,
369601    +              method = &_PROPERTY_METHOD,
369602    +              outest=&EM_USER_OUTEST,
369603    +              outfit=&EM_USER_SVMFITSTAT,
369604    +              outclass=&EM_USER_OUTCLASS,
369605    +              isValidationSet=&_isValidationSet,
369606    +              testdata =&_testdata,
369607    +              testout =&_testout,
369608    +              validSource=&_validSource,
369609    +              usecgbydefault=&_usecgbydefault
369610    +              );
369611    +run;
369613    +%svm_score(indata=&EM_IMPORT_DATA,
369614    +             inest=&EM_USER_OUTEST,
369615    +             infit=&EM_USER_SVMFITSTAT,
369616    +             inclass=&EM_USER_OUTCLASS,
369617    +             outindata=  _tmpTrain ,
369618    +             outscore = &EM_EXPORT_TRAIN,
369619    +             targetLevel =&_targetLevel
369620    +            );
369622    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
369623    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
369624    +             inest=&EM_USER_OUTEST,
369625    +             infit=&EM_USER_SVMFITSTAT,
369626    +             inclass=&EM_USER_OUTCLASS,
369627    +             outindata=_tmpValid,
369628    +             outscore = &EM_EXPORT_VALIDATE,
369629    +             targetLevel =&_targetLevel
369630    +            );
369632    +%end;
369633    +%if &EM_IMPORT_TEST  ne  %then %do;
369634    +  %svm_score(indata=&EM_IMPORT_TEST,
369635    +             inest=&EM_USER_OUTEST,
369636    +             infit=&EM_USER_SVMFITSTAT,
369637    +             inclass=&EM_USER_OUTCLASS,
369638    +             outindata=_tmpTest,
369639    +             outscore= &EM_EXPORT_TEST,
369640    +             targetLevel =&_targetLevel
369641    +            );
369643    +%end;
369645    +/*------------------ run decision codes ----------------------*/
369647    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
369648    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
369650    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
369651    +filename _sffile_  "&decfile";
369652    +%if %sysfunc(fexist(_sffile_)) %then
369653    +%do;
369654    +    data &EM_EXPORT_TRAIN;
369655    +       set &EM_EXPORT_TRAIN;
369656    +           %include _sffile_;
369657    +    run;
369658    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
369659    +    data &EM_EXPORT_VALIDATE;
369660    +       set  &EM_EXPORT_VALIDATE;
369661    +           %include _sffile_;
369662    +    %end;
369663    +    %if &EM_IMPORT_TEST  ne  %then %do;
369664    +        data &EM_EXPORT_TEST;
369665    +            set  &EM_EXPORT_TEST;
369666    +            %include _sffile_;
369667    +        run;
369668    +    %end;
369669    +%let rc = %sysfunc(fdelete(_sffile_));
369670    +%end;
369671    +filename _sffile_ ;
369673    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
369674    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
369676    +%makeDeltaCode(TargetLevel =&_targetLevel);
369679    +/* %put SYSError =  &SYSERR;  */
369681    +%if &SYSERR > 0 %then %do;
369682    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
369683    +      %goto ENDLINE;
369684    +%end;
369686    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
369686   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
369686   !+Cutoff=0.5, Residual=Y)
369687    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
369687   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
369687   !+Cutoff=0.5, Residual=N)
369688    +*/
369691    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
369691   !+RESIDUALS=Y);
369693    +/*------ Make data for report data ----------------*/
369694    +%makeSVMFitStatDs;
369696    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
369698    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
369700    +proc datasets lib = work nolist;
369701    +      delete _outtrain  _sample_train ;
369702    +run;
369704    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
369705    +%if &_svnobs < 1   %then %do;
369706    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
369707    +      %goto endline;
369708    +%end;
369711    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
369712    +%makeTunData();
369713    +%end;
369716    +%ENDLINE:
369718    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
369720    +/*------------------------------------------------------------------
369721    +  MACRO EXPLOREOBS
369723    +  SUPPORT:  SASDHD - David Duling
369724    +  PRODUCT:  Enterprise Miner
369726    +  DESCRIPTION:
369727    +  Generates maximum and default numbers of observations to
369728    +  download for visualization depending on the record length.
369730    +  Values were determined by trial and error using typical
369731    +  Windows workstation configurations.
369733    +  Discrete sets of values are returned so that user experience
369734    +  will be consitent with similar sized data sets.
369736    +  These macro variables are set:
369737    +  _exploreobs_max -- maximum number of obs downloadable
369738    +  _exploreobs_def -- default number of obs to be downloaded
369739    +  _exploreobs_recl - record length.  Might be useful for reporting.
369741    +  Use the _exploreobs_max to set limit the GUI selection of
369742    +  observations for downloading.  The GUI selection for obs
369743    +  could be reduced to "Default" and "Max".
369745    +  Parameters
369746    +  data=   libname.memname of input data
369747    +  vars=   subset list of variables.
369748    +          downloading 1 out of 500 really does work like downloading
369749    +          1 out of 1 vars.  Users may select a subset of vars for
369750    +                   visualizations.  Pass in the list as space delimited
369751    +          var names.  If vars is not specified, the record length
369752    +          of the entire data will be used.
369753    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
369755    +  Control
369756    +  Users may control the values by entering these macro variables.
369757    +            EM_EXPLOREOBS_MAX
369758    +            EM_EXPLOREOBS_DEFAULT
369759    +  These values override the computed values.
369761    +  Debugging
369762    +  %let _exploreobs_debug=1 ;
369763    +--------------------------------------------------------------------
369764    +  HISTORY: 20APR2004. sasdhd. pushed.
369765    +           18DEC2004. sasdhd. S0280556.
369766    +           07SEP2007. sasdhd. HK1009586
369767    +--------------------------------------------------------------------*/
369769    +%macro exploreobs(data=,vars=, nbytes=) ;
369771    +   /*--- variable definitions ---*/
369772    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
369773    +   %local xobs xvars xlen vlen xi vname vlist ;
369774    +   %local _exp_source _exp_notes ;
369776    +   /*--- USER definitions ---*/
369777    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
369779    +   /*--- variable intializations ---*/
369780    +   %let _exploreobs_max=0 ;
369781    +   %let _exploreobs_def=0 ;
369782    +   %let _exploreobs_recl=0 ;
369783    +   %let xvars= 0 ;
369784    +   %let xlen = 0 ;
369785    +   %let xobs = 0 ;
369787    +   /*--- data error checks ---*/
369788    +   %if "&data" eq "" %then %do ;
369789    +            %put NOTE: DATA is not specified. ;
369790    +            %goto term ;
369791    +      %end ;
369793    +   %let dsid=%sysfunc(open(&data)) ;
369794    +   %if not &dsid %then %do ;
369795    +            %put NOTE: DATA &data is not available. ;
369796    +            %goto term ;
369797    +      %end ;
369799    +   /*--- if a vars list exists generate a subset ---*/
369800    +   %if &vars ne %then %do ;
369801    +         %let dsid=%sysfunc(close(&dsid)) ;
369802    +         %if &_exploreobs_debug ne 1 %then %do ;
369803    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
369804    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
369805    +                  options nosource nonotes ;
369806    +         %end ;
369807    +         data _exploreobs_temp_data ;
369808    +         set &data(obs=0) ;
369809    +          keep &vars ;
369810    +         run;
369811    +         %if &_exploreobs_debug ne 1 %then %do ;
369812    +                  options &_exp_source &_exp_notes ;
369813    +         %end ;
369814    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
369815    +         %if &dsid eq 0 %then %do ;
369816    +                  %put NOTE: Sample is not available.;
369817    +                  %goto term ;
369818    +            %end ;
369819    +      %end ;
369821    +   /*--- get var attributes ---*/
369822    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
369823    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
369824    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
369825    +   %let dsid= %sysfunc(close(&dsid)) ;
369827    +   /*--- set default and max obs ---*/
369828    +   %let _exploreobs_recl=%eval(&xlen) ;
369829    +   %if &_exploreobs_recl eq 0 %then %do ;
369830    +             %let _exploreobs_max= 0 ;
369831    +             %let _exploreobs_def= 0 ;
369832    +             %goto term ;
369834    +   %end ;
369835    +   %else
369836    +   %if &_exploreobs_recl le 32 %then %do ;
369837    +             %let _exploreobs_max=100000 ;
369838    +             %let _exploreobs_def= 10000 ;
369839    +   %end ;
369840    +   %else
369841    +   %if &_exploreobs_recl le 128 %then %do ;
369842    +             %let _exploreobs_max=60000 ;
369843    +             %let _exploreobs_def= 6000 ;
369844    +   %end ;
369845    +   %else
369846    +   %if &_exploreobs_recl lt 1000 %then %do ;
369847    +             %let _exploreobs_max=20000 ;
369848    +             %let _exploreobs_def= 2000 ;
369849    +   %end ;
369850    +   %else
369851    +   %if &_exploreobs_recl lt 5000 %then %do ;
369852    +             %let _exploreobs_max= 10000 ;
369853    +             %let _exploreobs_def=  1000 ;
369854    +   %end ;
369855    +   %else
369856    +   %if &_exploreobs_recl lt 20000 %then %do ;
369857    +             %let _exploreobs_max= 5000 ;
369858    +             %let _exploreobs_def=  500 ;
369859    +   %end ;
369860    +   %else %do ;
369861    +             %let _exploreobs_max= 1000 ;
369862    +             %let _exploreobs_def=  200 ;
369863    +   %end ;
369865    +   /*--- Users options ---*/
369866    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
369867    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
369868    +   %end;
369869    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
369870    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
369871    +   %end;
369873    +    /*--- S0868273 ---*/
369874    +    %if "&NBYTES" ne "" %then %do;
369875    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
369876    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
369877    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
369877   !+&EM_EXPLOREOBS_MAX));
369878    +       %end;
369880    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
369881    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
369882    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
369882   !+&EM_EXPLOREOBS_DEFAULT));
369883    +          %if ^&_exploreobs_def %then
369884    +              %let _exploreobs_def = 1;
369886    +       %end;
369887    +    %end;
369889    +   /*--- Terminate ---*/
369890    +   %term:
369892    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
369892   !+max=&_exploreobs_max : def= &_exploreobs_def ;
369893    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Meta_TRAIN;
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)),
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.SVM_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Meta_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Meta_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum,
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' -
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' -
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!'
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;
 
MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Meta_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Meta_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;
 
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 46 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      12:34
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
Custid DepVar Education HigherEducationBinary Marital_Status
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;
 
NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 35 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit=
EMWS8.SVM_SVMFITSTAT outclass= EMWS8.SVM_OUTCLASS outest= EMWS8.SVM_OUTEST out = _outtrain
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv =
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;
 
NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM_OUTCLASS has 49 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 47
      variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 43 variables.
NOTE: The data set EMWS8.SVM_OUTEST has 5 observations and 52 variables.
NOTE: The data set EMWS8.SVM_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 47411
*** Time for Optimization: 822
*** Total Processing Time: 822
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 140-144.
NOTE: PROCEDURE SVM used (Total process time):
      real time           13:41.95
      cpu time            13:32.89
 
 
MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta_TRAIN inest=EMWS8.SVM_OUTEST
infit=EMWS8.SVM_SVMFITSTAT inclass=EMWS8.SVM_OUTCLASS out=EMWS8.SVM_TRAIN(rename=(_F_=F_DepVar
_I_=I_DepVar));
MPRINT(SVM_SCORE):   run;
 
WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
 
MPRINT(SVM_SCORE):   filename resifref
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=26. April 2016 14.27 Uhr
 
NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas.
369896    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
369897    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
369898    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
369899    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
369900    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
369901    +if
369902    + F_DepVar ne '1'
369903    +and F_DepVar ne '0'
369904    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
369905    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
369906    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
369907    +end;
MPRINT(SVM_SCORE):   end;
369908    +else do;
MPRINT(SVM_SCORE):   else do;
369909    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
369910    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
369911    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
369912    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
369913    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
369914    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
369915    +end;
MPRINT(SVM_SCORE):   end;
369916    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.SVM_TRAIN.
NOTE: The data set EMWS8.SVM_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta_VALIDATE inest=EMWS8.SVM_OUTEST
infit=EMWS8.SVM_SVMFITSTAT inclass=EMWS8.SVM_OUTCLASS
out=EMWS8.SVM_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;
 
WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(SVM_SCORE):   filename resifref
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=26. April 2016 14.27 Uhr
 
NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file
      C:\\predictive-models-project\Workspaces\EMWS8\SVM\tmprescode.sas.
369917    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
369918    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
369919    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
369920    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
369921    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
369922    +if
369923    + F_DepVar ne '1'
369924    +and F_DepVar ne '0'
369925    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
369926    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
369927    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
369928    +end;
MPRINT(SVM_SCORE):   end;
369929    +else do;
MPRINT(SVM_SCORE):   else do;
369930    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
369931    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
369932    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
369933    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
369934    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
369935    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
369936    +end;
MPRINT(SVM_SCORE):   end;
369937    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.SVM_VALIDATE.
NOTE: The data set EMWS8.SVM_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
369938     data SVM_SCORE/view=SVM_SCORE;
MPRINT(EM_DECIDECODE):   data SVM_SCORE/view=SVM_SCORE;
369939     set EMWS8.SVM_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM_TRAIN;
369940     run;
MPRINT(EM_DECIDECODE):   run;
 
NOTE: DATA STEP view saved on file WORK.SVM_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
369941     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
369942     * SVM: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM: Create decision matrix;
369943     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
369944     data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
369945       length   DepVar                           $  32
369946                COUNT                                8
369947                DATAPRIOR                            8
369948                TRAINPRIOR                           8
369949                DECPRIOR                             8
369950                DECISION1                            8
369951                DECISION2                            8
369952                ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8
DECISION1 8 DECISION2 8 ;
369953
369954       label    COUNT="Level Counts"
369955                DATAPRIOR="Data Proportions"
369956                TRAINPRIOR="Training Proportions"
369957                DECPRIOR="Decision Priors"
369958                DECISION1="1"
369959                DECISION2="0"
369960                ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
369961       format   COUNT 10.
369962                ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
369963     DepVar="1"; COUNT=359; DATAPRIOR=0.15122156697556; TRAINPRIOR=0.15122156697556;
369963   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
369964     output;
MPRINT(EM_DECIDECODE):   output;
369965     DepVar="0"; COUNT=2015; DATAPRIOR=0.84877843302443; TRAINPRIOR=0.84877843302443;
369965   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
369966     output;
MPRINT(EM_DECIDECODE):   output;
369967     ;
MPRINT(EM_DECIDECODE):   ;
369968     run;
MPRINT(EM_DECIDECODE):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
369969     proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
369970     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
369971     label DECISION1= '1';
369972     label DECISION2= '0';
369973     run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
369974     quit;
MPRINT(EM_DECIDECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
369975     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
369976     * SVM Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM Generate decision score code;
369977     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
369978     run;
MPRINT(EM_DECIDECODE):   run;
 
MPRINT(EM_DECIDECODE):
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM_OUTEST
infit=EMWS8.SVM_SVMFITSTAT inclass=EMWS8.SVM_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;
 
NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 113.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;
 
NOTE: There were 5 observations read from the data set EMWS8.SVM_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 52 variables.
369979     %em_copyfile(infref=#LN05359, outfref=#LN05358, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN05358 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN05359",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file #LN05358 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 124 records were written to the file #LN05358.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DATA2CODE):  ;
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DATA2CODE):
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
369980     %em_copyfile(infref=#LN05361, outfref=#LN05360, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN05360 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN05361",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file #LN05360 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=10168,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 65 records were written to the file #LN05360.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DATA2CODE):  ;
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DATA2CODE):
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;
 
NOTE: There were 49 observations read from the data set EMWS8.SVM_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 49 observations and 9 variables.
369981     %em_copyfile(infref=#LN05363, outfref=#LN05362, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN05362 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN05363",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file #LN05362 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=13539,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 112 records were written to the file #LN05362.
      The minimum record length was 1.
      The maximum record length was 151.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DATA2CODE):  ;
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DATA2CODE):
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;
 
NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=20790,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X
"C:\\predictive-models-project\Workspaces\EMWS8\SVM\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;
 
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=26. April 2016 14.23 Uhr
 
NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_SVMFITSTAT.
NOTE: The data set EMWS8.SVM_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM_SVMFITDS out =EMWS8.SVM_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.SVM_SVMFITDS.
NOTE: The data set EMWS8.SVM_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;
 
NOTE: There were 17 observations read from the data set EMWS8.SVM_SVMFITDS.
NOTE: The data set EMWS8.SVM_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;
 
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEALPHADS):   data EMWS8.SVM_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.SVM_TRAIN.
NOTE: The data set EMWS8.SVM_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEALPHADS):   data EMWS8.SVM_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM_TRAIN EMWS8.SVM_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.SVM_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM_OUTALPHA.
NOTE: The data set EMWS8.SVM_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEALPHADS):   data EMWS8.SVM_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;
 
NOTE: There were 1000 observations read from the data set EMWS8.SVM_OUTALPHA.
NOTE: The data set EMWS8.SVM_OUTALPHA has 194 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;
 
NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      16:34
NOTE: There were 194 observations read from the data set EMWS8.SVM_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;
 
NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM_TUNINGCRIT.
NOTE: The data set EMWS8.SVM_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
369982
369983     *------------------------------------------------------------*;
369984     * End TRAIN: SVM;
369985     *------------------------------------------------------------*;
 
369986     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
369987     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
369988     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
369989     ;
MPRINT(EM_DIAGRAM):   ;
369990     ;
MPRINT(EM_DIAGRAM):   ;
369991     ;
MPRINT(EM_DIAGRAM):   ;
369992     ;
MPRINT(EM_DIAGRAM):   ;
369993     quit;
MPRINT(EM_DIAGRAM):   quit;
369994     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
369995     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
369996     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
369997     /*; *"; *'; */
369998     ;
MPRINT(EM_DIAGRAM):   ;
369999     run;
MPRINT(EM_DIAGRAM):   run;
370000     quit;
MPRINT(EM_DIAGRAM):   quit;
370001     /* Reset EM Options */
370002     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
370003     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
370004     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                08.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O18DY211 "C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O18DY211 new;
MPRINT(EM_DIAGRAM):   run;
370106     %let EMEXCEPTIONSTRING=;
370107     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
370108     * SCORE: SVM;
MPRINT(EM_DIAGRAM):   * SCORE: SVM;
370109     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
370110     %let EM_ACTION = SCORE;
370111     %let syscc = 0;
370112     %macro main;
370113
370114        filename temp catalog 'sashelp.emmodl.svm_macros.source';
370115        %include temp;
370116        filename temp;
370117        %SetProperties;
370118        %if %upcase(&EM_ACTION) = CREATE %then %do;
370119            filename temp catalog 'sashelp.emmodl.svm_create.source';
370120            %include temp;
370121            filename temp;
370122            %create;
370123        %end;
370124        %else
370125        %if %upcase(&EM_ACTION) = TRAIN %then %do;
370126            filename temp catalog 'sashelp.emmodl.svm_train.source';
370127            %include temp;
370128            filename temp;
370129            %train;
370130        %end;
370131        %else
370132        %if %upcase(&EM_ACTION) = REPORT %then %do;
370133            filename temp catalog 'sashelp.emmodl.svm_report.source';
370134            %include temp;
370135            filename temp;
370136            %report;
370137        %end;
370138
370139     %mend main;
370140
370141     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
370143    +%macro SetProperties;
370144    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
370145    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
370146    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
370147    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
370148    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
370149    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
370150    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
370151    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
370152    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
370153    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
370154    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
370155    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
370156    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
370157    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
370158    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
370159    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
370160    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
370161    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
370162    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
370163    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
370164    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
370165    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
370166    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
370167    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
370168    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
370169    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
370170    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
370171    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
370172    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
370173    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
370174    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
370175    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
370176    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
370177    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
370178    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
370179    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
370180    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
370181    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
370182    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
370183    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
370184    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
370185    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
370186    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
370187    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
370188    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
370189    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
370190    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
370191    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
370192    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
370193    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
370195    +%mend SetProperties;
370198    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
370200    +  %local emclassout emvarout;
370202    +   proc dmdb batch dmdbcat= _emdmdb
370204    +   %if &out ne 0 %then %do ;
370205    +       data=&indata out= _emdmdb &emclassout &emvarout;
370206    +   %end ;
370207    +   %else %do ;
370208    +       data=&indata &emclassout &emvarout;
370209    +   %end ;
370211    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
370212    +   %if %em_class   ne  %then %do ;
370213    +       class %EM_CLASS;
370214    +   %end ;
370215    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
370216    +   %if %em_target ne %then %do ;
370217    +          target %em_target ;
370218    +   %end ;
370219    +   run ;
370220    +%mend make_dmdb;
370223    +%macro svm_training(indata=,
370224    +                    task=,
370225    +                    classtask=,
370226    +                    method=,
370227    +                    outest =,
370228    +                    outclass =,
370229    +                    outfit =,
370230    +                    isValidationSet =,
370231    +                    testdata =,
370232    +                    testout =,
370233    +                    validSource=,
370234    +                    usecgbydefault=
370235    +                    );
370237    +%make_dmdb(indata=&indata, out=1);
370239    +options debug="nlpitermsg=2";
370241    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
370242    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
370243    +ods output tun_crt = &EM_USER_TUNINGCRIT;
370244    +%end;
370246    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
370247    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
370248    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
370249    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
370251    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
370252    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
370253    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
370254    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
370257    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
370258    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
370259    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
370260    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
370262    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
370263    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
370264    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
370265    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
370268    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
370269    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
370270    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
370271    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
370274    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
370275    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
370276    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
370277    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
370278    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
370279    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
370280    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
370281    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
370282    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
370283    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
370284    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
370285    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
370289    +proc svm data= _emdmdb
370290    +         dmdbcat= _emdmdb
370291    +         nomonitor
370292    +         outfit= &outfit
370293    +         outclass= &outclass
370294    +         outest= &outest
370295    +         out = _outtrain
370296    +         maxiter = &_PROPERTY_MAXITER
370297    +         maxfunc = &_PROPERTY_MAXFUNC
370298    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
370299    +         gconv =   &_PROPERTY_GCONV
370300    +         absgconv = &_PROPERTY_ABSGCONV
370301    +         xconv =   &_PROPERTY_XCONV
370302    +         absxconv = &_PROPERTY_ABSXCONV
370304    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
370305    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
370306    +             xscale
370307    +         %end;
370308    +         %else %do;
370309    +             noscale
370310    +         %end;
370311    +    %end;
370312    +    %if &task eq CLASSIFICATION %then %do;
370313    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
370314    +         method= &method
370315    +        %end;
370316    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
370317    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
370318    +        %end;
370319    +        %else %do;
370320    +         method= &EM_PROPERTY_METHOD
370321    +        %end;
370322    +    %end;
370323    +    %else %do;
370324    +         method= &method  task=&classtask
370325    +         /*%if &classtask eq EPS_REG %then %do; */
370326    +             esp=&_PROPERTY_EPSILON
370327    +         /*%end;*/
370328    +    %end;
370330    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
370331    +         kernel = &EM_PROPERTY_KERNEL
370332    +    %end;
370333    +    %else %do;
370334    +         kernel = Linear
370335    +    %end;
370337    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
370339    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
370340    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
370341    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
370342    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
370343    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
370344    +            tun = &EM_PROPERTY_TUNINGMETHOD
370345    +        %end;
370347    +    %end;
370349    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
370350    +         CV  = &EM_PROPERTY_CVMETHOD
370351    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
370352    +         fold = &EM_PROPERTY_CVFOLD
370353    +         %end;
370354    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
370355    +                testdata = &testdata
370356    +         %end;
370357    +    %end;
370359    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
370360    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
370361    +    %end;
370363    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
370364    +    &EM_PROPERTY_PRINTOPTION
370365    +    %end;
370367    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
370368    +    POPTHIS
370369    +    %end;
370370    +    ;
370371    +    var %EM_INPUT %EM_REJECTED;
370372    +    target %EM_TARGET;
370374    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
370376    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
370377    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
370378    +             by &_PROPERTY_TUN_C_BY
370379    +             ;
370380    +         %end;
370381    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
370382    +             C  &_PROPERTY_USERCVALUE ;
370383    +         %end;
370385    +     %end;
370386    +     %else %do;
370387    +           C  &_PROPERTY_USERCVALUE ;
370388    +     %end;
370391    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
370393    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
370394    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
370395    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
370396    +                  by &_PROPERTY_POLY_TUN_KP1_BY
370397    +                ;
370398    +             %end;
370399    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
370400    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
370401    +             %end;
370402    +          %end;
370403    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
370404    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
370405    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
370406    +                ;
370407    +              %end;
370408    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
370409    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
370410    +              %end;
370411    +           %end;
370412    +           %else %do;
370413    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
370414    +           %end;
370415    +    %end;
370417    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
370418    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
370419    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
370420    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
370421    +                  by &_PROPERTY_RBF_TUN_KP1_BY
370422    +                  ;
370423    +              %end;
370424    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
370425    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
370426    +              %end;
370427    +          %end;
370428    +          %else %do;
370429    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
370430    +          %end;
370431    +    %end;
370434    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
370436    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
370438    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
370439    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
370440    +                by &_PROPERTY_SGMD_TUN_KP1_BY
370441    +             ;
370442    +             %end;
370443    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
370444    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
370445    +             %end;
370447    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
370448    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
370449    +                by &_PROPERTY_SGMD_TUN_KP2_BY
370450    +             ;
370451    +             %end;
370452    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
370453    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
370454    +             %end;
370455    +          %end;
370456    +          %else %do;
370457    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
370458    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
370459    +          %end;
370460    +    %end;
370462    +run;
370463    +%TRAINENDLINE:
370464    +quit;
370465    +%mend svm_training;
370467    +%macro svm_score(indata=,
370468    +                 inest=,
370469    +                 infit=,
370470    +                 inclass=,
370471    +                 outindata=,
370472    +                 outscore=,
370473    +                 targetLevel=
370474    +                 );
370477    +%if &TargetLevel eq BINARY %then %do;
370479    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
370481    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
370482    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
370483    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
370484    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
370487    +%do %while(^ %sysfunc(fetch(&dsid)));
370488    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
370489    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
370490    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
370491    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
370492    +%end;
370494    +%let dsid = %sysfunc(close(&dsid));
370497    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
370498    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370500    +%do %while(^ %sysfunc(fetch(&dsid)));
370501    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
370502    +%end;
370503    +%let dsid = %sysfunc(close(&dsid));
370505    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
370506    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370508    +%do %while(^ %sysfunc(fetch(&dsid)));
370509    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
370510    +%end;
370511    +%let dsid = %sysfunc(close(&dsid));
370514    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
370515    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
370516    +run;
370518    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
370519    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /* from a part of %EM_MODEL() macro */
370521    +data &outscore(drop=_P);
370522    +      set  &outscore;
370523    +     if (_P_ < -600) then _p =0;
370524    +     else _P = 1/(1+EXP((-1)*(_P_)));
370526    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
370527    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370528    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
370530    +%do %while(^ %sysfunc(fetch(&dsid)));
370531    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
370532    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
370533    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
370534    +       &P_Var = _P;
370535    +   %end;
370536    +   %else %do;
370537    +       &P_Var = 1 - _P;
370538    +       %let targetNonEvent = &P_LEVEL;
370539    +   %end;
370540    +%end;
370541    +%let dsid = %sysfunc(close(&dsid));
370543    +%include resifref;
370545    +run;
370547    +filename resifref;
370549    +%end; /* the end of if - targetlevel eq binary */
370550    +%else %do;
370552    +/* ----     interval target  ------ */
370554    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
370555    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370557    +%do %while(^ %sysfunc(fetch(&dsid)));
370558    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
370559    +%end;
370560    +%let dsid = %sysfunc(close(&dsid));
370562    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
370563    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370565    +%do %while(^ %sysfunc(fetch(&dsid)));
370566    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
370567    +%end;
370569    +%let dsid = %sysfunc(close(&dsid));
370571    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
370572    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
370573    +run;
370575    +%end; /* end of targetlevel eq interval */
370578    +%mend svm_score;
370581    +%macro makeSVMFitStatDs();
370583    +data &EM_USER_SVMFITDS;
370584    +     set &EM_USER_SVMFITSTAT;
370585    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias, noquote))";
370586    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par2, noquote))";
370587    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par3, noquote))";
370588    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par, noquote))";
370589    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1, noquote))";
370590    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_margin, noquote))";
370591    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev, noquote))";
370592    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv, noquote))";
370593    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv, noquote))";
370594    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv, noquote))";
370595    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs, noquote))";
370596    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv, noquote))";
370597    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ntrain, noquote))";
370598    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev, noquote))";
370599    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw, noquote))";
370600    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj, noquote))";
370601    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_radius, noquote))";
370602    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc, noquote))";
370603    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom, noquote))";
370604    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim, noquote))";
370605    +    if _TYPE_ ='_ACCTAB_' then delete;
370606    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
370607    +      _BIAS_= _K_PAR_;
370608    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
370609    +    %end;
370610    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
370611    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
370612    +    %end;
370613    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
370614    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
370615    +    %end;
370616    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
370617    +      DROP _K_PAR3_  _L1_;
370618    +    %end;
370619    +run;
370621    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
370622    +run;
370624    +data &EM_USER_SVMFITDS;
370625    +     set &EM_USER_SVMFITDS;
370626    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))";
370627    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
370628    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat, noquote))";
370629    +     Rename COL1 = Train;
370630    +     if _NAME_ = '_ACCU_' then delete;
370631    +run;
370633    +%mend makeSVMFitStatDs;
370635    +%macro svm_fitstat(validSource=);
370637    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
370638    +            %if &_validSource= VALIDSET %then %do;
370639    +                validDs=work._tmp_scored_test,
370640    +                testDs=,
370641    +            %end;
370642    +            %else %if &_validSource= TESTSET %then %do;
370643    +                validDs=,
370644    +                testDs=work._tmp_scored_test,
370645    +            %end;
370646    +            decdata=&EM_DEC_DECDATA,
370647    +            decmeta=&EM_DEC_DECMETA,
370648    +            freqvar=, df=,
370649    +            outfit=&EM_DATA_EMOUTFIT);
370651    +data &EM_DATA_EMOUTFIT;
370652    +     set &EM_DATA_EMOUTFIT;
370653    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_    _SBC_; /* Because of DF */
370654    +run;
370655    +%mend svm_fitstat;
370657    +/*---------------------------------------------------------------------------------------
370658    +   OUTEST data set
370660    +                                                       APRTMNT_  APRTMNT_   TELIND_   TELIND_
370661    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_        2_
370663    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391   0.97609
370664    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280   0.15280
370665    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778  -0.07311
370667    +=-------------------------------------------------------------------------------------*/
370668    +/* this is not used, generate score code directly for the case of linear svm */
370669    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=, Residual=);
370671    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
370673    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
370674    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
370675    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
370676    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
370677    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
370679    +%do %while(^ %sysfunc(fetch(&dsid)));
370680    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
370681    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
370682    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
370683    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
370684    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
370685    +%end;
370686    +%let dsid = %sysfunc(close(&dsid));
370688    +data _cmeta;
370689    +    set &ColumnsMeta;
370690    +    NAME = upcase(strip(NAME));
370691    +run;
370693    +data _tmpclass;
370694    +       set &outclass;
370695    +   _VAR_ = upcase(strip(_VAR_));
370696    +run;
370698    +proc sql;
370699    +create table _outclass as
370700    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
370701    +  from  _tmpclass, _cmeta
370702    +  where _tmpclass._VAR_ = _cmeta.NAME;
370703    +run;
370705    +data _outclass;
370706    +    set _outclass;
370707    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
370708    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
370709    +run;
370710    +data _meands;
370711    +    set &outest;
370712    +    if _TYPE_='_MEAN_';
370713    +run;
370715    +/*
370716    +data _null_;
370717    +    set &outest;
370718    +    if _TYPE_='_PARMS_';
370719    +    call symput('bias', _STDEV_ );
370720    +    call symput('intercept', _MEAN_ );
370721    +run;
370722    +*/
370724    +filename  _File_ "&File";
370725    +data _null_;
370726    +    FILE _File_;
370727    +    length _line $500;
370728    +    drop _line;
370730    +    put ' ';
370731    +    put '/*-------------------------------------------------*/';
370732    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
370733    +    put '/*-------------------------------------------------*/';
370734    +    put ' ';
370736    +    put 'length _warn_ $ 4;';
370737    +    put 'label _warn_ = "Warnings";';
370738    +    put 'length _svm_uname $32;';
370739    +    put 'DROP _svm_uname ;';
370741    +  dsid = open("work._outclass");
370742    +    if dsid then do;
370743    +          oldvname ='';
370744    +          do while(not fetch(dsid));
370745    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
370746    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
370747    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
370748    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
370749    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
370750    +             *put 'vtype =' vtype;
370751    +             *put 'vformat=' vformat;
370753    +             if oldname ne vname then do;
370754    +                 if vtype = 'N' then do;
370755    +                     if vformat eq ' ' then do;
370756    +                        put '_svm_uname = put(' vname ', Best12.);';
370757    +                     end; else do;
370758    +                        put '_svm_uname = put(' vname ',' vformat ');';
370759    +                     end;
370760    +                  end;
370761    +                  else do;
370762    +                     if vformat eq ' ' then do;
370763    +                        put '_svm_uname = ' vname ' ;';
370764    +                     end; else do;
370765    +                        put '_svm_uname = put(' vname ',' vformat ');';
370766    +                     end;
370767    +                  end;
370768    +                  put '%DMNORMIP(_svm_uname);';
370769    +              end; /* end of oldname ne vname */
370771    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
370772    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
370773    +              put _line;
370774    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname ' ;';
370775    +              oldname = vname;
370776    +          end;
370778    +     end;
370779    +rc=close(dsid);
370781    +dsid = open("&outest");
370782    +    if dsid then do;
370783    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues, noquote))"  "------ */";
370784    +          ncol = attrn(dsid, 'NVARS');
370785    +          do i=4 to ncol;
370786    +             vname = upcase(trim(left(varname(dsid,i))));
370787    +              do while(not fetch(dsid));
370788    +                  type = strip(getvarc(dsid,2));
370789    +                  select(type);
370790    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
370791    +                      when('_STDEV_') std  =  getvarn(dsid, i);
370792    +                      when('_PARMS_') coeff = getvarn(dsid, i);
370793    +                  otherwise;
370794    +                  end;
370795    +              end; /* end of do-while*/
370796    +              *put '+' coeff '*(' vname '-' mean ')/' std;
370797    +              if i=4 then  do; put '_P_ =(' coeff ; end;
370798    +              else if i=5 then do; put '+' coeff ');' ; end;
370799    +              else do;
370800    +                      tmpvar = '_TMPVAR'||strip(i);
370801    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
370802    +                      put 'else ' tmpvar '=' vname ';';
370803    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
370804    +                      put 'drop  ' tmpvar ';';
370805    +              end;
370806    +              rc=rewind(dsid);
370807    +         end; /* end of  do i=6 to &nvars; */
370808    +         put ';';
370809    +     end;
370810    +    rc=close(dsid);
370811    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"  "------ */";
370813    +%if &TargetLevel eq BINARY %then %do;
370815    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
370816    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370817    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
370819    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
370820    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
370822    +%do %while(^ %sysfunc(fetch(&dsid)));
370823    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
370824    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
370825    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
370826    +       put " &P_Var = _P;";
370827    +   %end;
370828    +   %else %do;
370829    +       put " &P_Var = 1 - _P;";
370830    +   %let targetNonEvent = &P_LEVEL;
370831    +   %end;
370832    +%end;
370833    +%let dsid = %sysfunc(close(&dsid));
370835    +%if &Residual = Y %then %do;
370837    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
370839    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
370840    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370841    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
370843    +   %do %while(^ %sysfunc(fetch(&dsid)));
370844    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
370845    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
370846    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
370847    +       put " &R_Var = 1 - _P;";
370848    +   %end;
370849    +   %else %do;
370850    +       put " &R_Var = 0 - (1 - _P);";
370851    +   %end;
370852    +   %end;
370853    +   %let dsid = %sysfunc(close(&dsid));
370854    +%end;
370855    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"  "------ */";
370857    +    put 'length _FORMAT_VAR $200;';
370858    +    put 'length _TARGNOR $%DMNORLEN; ';
370859    +    put 'DROP _FORMAT_VAR _TARGNOR;';
370860    +    %if &TargetFormat ne  %then %do;
370861    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
370862    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
370863    +    %end;
370864    +    %else %do;
370865    +    %if &TargetType  = N  %then %do;
370866    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
370867    +       %end;
370868    +       %else %do;
370869    +    put "_FORMAT_VAR= &TargetVar;";
370870    +       %end;
370871    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
370872    +    %end;
370874    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
370875    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
370876    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
370878    +    %do %while(^ %sysfunc(fetch(&dsid)));
370879    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
370880    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
370881    +        %let qF_var_label = %str(%"&F_var_label%");
370882    +    put "&F_var = _TARGNOR ;";
370883    +    put "label &F_var = &qF_Var_label;";
370884    +    %end;
370885    +    %let dsid = %sysfunc(close(&dsid));
370887    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"  "------ */";
370889    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
370890    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370891    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
370893    +%do %while(^%sysfunc(fetch(&dsid)));
370894    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
370895    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
370896    +   %let qI_var_label = %str(%"&I_var_label%");
370897    +   %let qTargetEvent = %str(%"&targetEvent%");
370898    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
370899    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
370900    +       put " else &I_Var  =  &qtargetNonEvent ;";
370901    +       put " label &I_var = &qI_var_label;";
370902    +%end;
370903    +%let dsid = %sysfunc(close(&dsid));
370905    +%end;  /* end of TargetLevel= Binary */
370907    +%else %if &TargetLevel eq INTERVAL %then %do;
370909    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
370910    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370911    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
370913    +%do %while(^ %sysfunc(fetch(&dsid)));
370914    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
370915    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
370916    +   %let qP_label = %str(%"&P_label%");
370917    +    put " &P_Var = _P_;";
370918    +    put " label &P_Var = &qP_label;";
370919    +%end;
370920    +%let dsid = %sysfunc(close(&dsid));
370922    +%if &Residual = Y %then %do;
370924    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
370926    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
370927    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
370928    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
370930    +   %do %while(^ %sysfunc(fetch(&dsid)));
370931    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
370932    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
370933    +     %let qR_label = %str(%"&R_label%");
370934    +       put " &R_Var = &TargetVar - &P_var;";
370935    +       put " label &R_Var = &qR_label;";
370936    +   %end;
370937    +   %let dsid = %sysfunc(close(&dsid));
370938    +%end;
370940    +%end;   /* end of TargetLevel= Interval */
370942    +  put "/*------------------------------------------------------------*/";
370943    +proc datasets lib=work nolist;
370944    + delete _tmpclass _cmeta _outclass;
370945    +run;
370946    +run;
370948    +filename  _File_;
370950    +%mend gen_score;
370952    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
370953    +%global &nLevel;
370954    +proc dmdb batch data=&indata
370955    +classout=_tmp_dmdbout;
370956    +class &target;
370957    +run;
370958    +data _tmp_dmdbout;
370959    +    set _tmp_dmdbout;
370960    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
370961    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
370962    +run;
370963    +data _null_;
370964    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
370965    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
370966    +    %let dsid = %sysfunc(close(&dsid));
370967    +     call symput("&nLevel", put(&_obs, Best12.));
370968    +run;
370970    +proc datasets lib=work nolist;
370971    +     delete _tmp_dmdbout;
370972    +run;
370973    +quit;
370974    +%Mend CheckBinaryTargetLevel;
370977    +%macro getNObs(inds=, nobs=);
370978    +    %global &nobs;
370979    +    data _null_;
370980    +        set &inds end=eof;
370981    +        if eof then call symput("&nobs", _N_);
370982    +    run;
370983    +    quit;
370984    +%mend  getNObs;
370988    +%macro makeAlphaDs(target=, cmeta=);
370990    + %let isOBSIndex= N;
370991    + %let dsid = %sysfunc(open(&cmeta));
370992    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
370993    + %do %while(^%sysfunc(fetch(&dsid)));
370994    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
370995    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
370996    + %end;
370997    + %let dsid = %sysfunc(close(&dsid));
370999    +data &EM_USER_OUTALPHA;
371000    +     set _sample_train;
371001    +     set _outtrain(keep=_ALPHA_ _BOUND_);
371002    +     %if &isOBSIndex= N %then %do;
371003    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
371004    +     %end;
371005    +     %else %do;
371006    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
371007    +     %end;
371008    +run;
371010    +data &EM_EXPORT_TRAIN;
371011    +     length _OBS_ 8;
371012    +     set &EM_EXPORT_TRAIN;
371013    +     _OBS_ = _N_;
371014    +run;
371016    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
371017    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
371018    +     by _OBS_;
371019    +     if _ALPHA_ =. then _ALPHA_=0;
371020    +     if _BOUND_ ="" then _BOUND_="_LBC";
371021    +run;
371023    +data &EM_USER_OUTALPHA;
371024    +   set &EM_USER_OUTALPHA;
371025    +   if _ALPHA_ = 0 then delete;
371026    +   %if &isOBSIndex= N %then %do;
371027    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
371028    +   rename _OBS_ = _dataobs_;
371029    +   %end;
371030    +   %else %do;
371031    +   drop _OBS_;
371032    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
371033    +   %end;
371034    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
371035    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
371036    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
371037    +   run;
371039    +%mend makeAlphaDs;
371042    +%macro makeTunData();
371043    +data &EM_USER_TUNINGCRIT;
371044    +    set &EM_USER_TUNINGCRIT;
371045    +    Drop N;
371046    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
371047    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
371048    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
371049    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
371050    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
371051    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
371052    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror, noquote))";
371053    +run;
371054    +%mend makeTunData;
371056    +/*------------------ Score Code Generation with Proc SVMScore    ----------------------  */
371059    +%macro score_code(TargetLevel=, type=);
371061    +%let _inoutest = WORK._inoutest ;
371062    +%let _inoutfit = WORK._inoutfit ;
371063    +%let _inoutclass = WORK._inoutclass;
371065    +%if &type eq FLOW %then %do;
371066    +    %let _inoutest = &EM_USER_OUTEST;
371067    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
371068    +    %let _inoutclass = &EM_USER_OUTCLASS;
371069    +%end;
371070    +%else %do;
371071    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
371072    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
371073    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
371074    +%end;
371076    +%let emscoreout = %str(&)%str(em_score_output);
371079    +%if &type eq FLOW %then %do;
371080    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
371081    +%end;
371082    +%else %do;
371083    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
371084    +%end;
371086    +data _null_;
371087    +    FILE _File_ MOD;
371089    +    put ' ';
371090    +    put '/*-------------------------------------------------*/';
371091    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */';
371092    +    put '/*-------------------------------------------------*/';
371093    +    put ' ';
371095    +%if &TargetLevel eq BINARY %then %do;
371097    +/*%put &emscoreout;  */
371099    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
371100    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
371102    +%do %while(^ %sysfunc(fetch(&dsid)));
371103    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
371105    +%end;
371106    +%let dsid = %sysfunc(close(&dsid));
371108    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
371109    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
371111    +%do %while(^ %sysfunc(fetch(&dsid)));
371112    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
371114    +%end;
371115    +%let dsid = %sysfunc(close(&dsid));
371118    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass";
371119    +    %if &type eq FLOW %then %do;
371120    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
371121    +    %end;
371122    +    %else %do;
371123    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
371124    +    %end;
371125    +    put ";";
371126    +    put "run;";
371129    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
371131    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
371132    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
371133    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
371134    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
371137    +%do %while(^ %sysfunc(fetch(&dsid)));
371138    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
371139    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
371140    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
371141    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
371142    +%end;
371144    +%let dsid = %sysfunc(close(&dsid));
371146    +    put "data &emscoreout(drop=_P);";
371147    +    put "     set &emscoreout;";
371148    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
371149    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
371151    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
371152    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
371153    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
371155    +%do %while(^ %sysfunc(fetch(&dsid)));
371156    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
371157    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
371158    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
371159    +    put " &P_Var = _P ;";
371160    +   %end;
371161    +   %else %do;
371162    +    put " &P_Var = 1 - _P ;";
371163    +    %let targetNonEvent = &P_LEVEL;
371164    +   %end;
371165    +%end;
371166    +%let dsid = %sysfunc(close(&dsid));
371168    +%end; /* the end of if - targetlevel eq binary */
371169    +%else %do;
371171    +/* ----     interval target  ------ */
371173    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
371174    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
371176    +%do %while(^ %sysfunc(fetch(&dsid)));
371177    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
371178    +%end;
371179    +%let dsid = %sysfunc(close(&dsid));
371181    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
371182    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
371183    +%do %while(^ %sysfunc(fetch(&dsid)));
371184    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
371185    +%end;
371186    +%let dsid = %sysfunc(close(&dsid));
371188    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass ";
371189    +    %if &type eq FLOW %then %do;
371190    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
371191    +    %end;
371192    +    %else %do;
371193    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
371194    +    %end;
371195    +    put ";";
371197    +%end; /* end of targetlevel eq interval */
371199    +run;
371200    +filename  _File_;
371201    +%mend score_code;
371204    +%macro makeDeltaCode(TargetLevel=);
371205    +*--- Build Code to Modify Metadata ---*;
371206    +filename X "&EM_FILE_CDELTA_TRAIN";
371208    +/* modify columns meta */
371209    +data _null_;
371210    +    file X;
371211    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
371212    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
371213    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
371214    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
371215    +run;
371216    +%mend makeDeltaCode;
371218    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
371219    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
371221    +    %do;
371222    +    %let m_data      = &data;
371223    +    %let m_decdata   = &decdata;
371224    +    %let m_decmeta   = &decmeta;
371225    +    %let m_noresfile = &noresfile;
371226    +    %let m_resfile   = &resfile;
371227    +    dm "afa c=sashelp.emutil.decidecode.scl";
371228    +  %end;
371229    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: SVM;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
371230
371231     *------------------------------------------------------------*;
371232     * End SCORE: SVM;
371233     *------------------------------------------------------------*;
 
371234     filename x "C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMFLOWSCORE.sas" MOD;
MPRINT(EM_DIAGRAM):    filename x "C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMFLOWSCORE.sas" MOD;
371235     %makeResidualVars(target=DepVar, decmeta=EMWS8.SVM_DepVar_DM, fref=X);
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file X;
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=503,
      Last Modified=28. April 2016 08.22 Uhr,
      Create Time=28. April 2016 08.22 Uhr
 
NOTE: 21 records were written to the file X.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
371236     filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.SVM_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" _DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong
Classifications" _DISF_= "Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.SVM_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error" _DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong
Classifications" _DISF_= "Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid: Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   merge WORK.OUTFITDATA _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
371297     proc append base=EMWS8.SVM_EMOUTFIT data=WORK.OUTFITDATA force;
MPRINT(EM_DIAGRAM):    proc append base=EMWS8.SVM_EMOUTFIT data=WORK.OUTFITDATA force;
371298     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.OUTFITDATA to EMWS8.SVM_EMOUTFIT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS8.SVM_EMOUTFIT has 1 observations and 19 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371299     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
371300     * SVM: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * SVM: Computing metadata for TRAIN data;
371301     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\SVM\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.SVM_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.SVM_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS8.SVM_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.SVM_TRAIN out=WORK.M2KINHJL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KINHJL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KINHJL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KINHJL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KINHJL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M26JN184 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0KRJUGO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   set WORK.M26JN184;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "SVM";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "SVM";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "SVM";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "SVM";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "SVM";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "SVM";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "SVM";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_Y_' then ROLE='PREDICT';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_R_' then ROLE='RESIDUAL';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_ALPHA_' then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_BOUND_' then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
371622     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
371623     set EMWS8.SVM_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMINFO;
371624     where DATA='SVM' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='SVM' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
371625     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.SVM_EMINFO.
      WHERE (DATA='SVM') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371626     data EMWS8.SVM_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMINFO;
371627     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
371628     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
371629     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.SVM_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
371633     run;
371634     data EMWS8.SVM_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMINFO;
371635     set EMWS8.SVM_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMINFO WORK.MODELTEMP_INFO;
371636     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.SVM_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.SVM_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371637     proc sort data = EMWS8.SVM_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.SVM_EMINFO NOTHREADS;
371638     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
371639     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.SVM_EMINFO.
NOTE: The data set EMWS8.SVM_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371640     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
371641     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
371642     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
371643     proc sort data = EMWS8.SVM_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.SVM_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
371644     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
371645     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.SVM_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371646     data EMWS8.SVM_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMINFO;
371647     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
371648     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
371649     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.SVM_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371650     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
371651     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
371652     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
371653     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                08.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0KX9_E7 "C:\\predictive-models-project\Workspaces\EMWS8\SVM\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0KX9_E7 new;
MPRINT(EM_DIAGRAM):   run;
371677     data EMWS8.SVM_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMOUTFIT;
371678     set EMWS8.SVM_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMOUTFIT;
371679     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
371680     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
371681     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
371682     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.SVM_EMOUTFIT.
NOTE: The data set EMWS8.SVM_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371683     proc sort data=EMWS8.SVM_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.SVM_EMREPORTFIT nothreads;
371684     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
371685     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.SVM_EMREPORTFIT.
NOTE: The data set EMWS8.SVM_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371686     %let _EMwarndup = 0;
371687     %let _EMtargetdup =;
371688     %let _EMASEtargetdup =;
371689     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
371690     set EMWS8.SVM_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMOUTFIT;
371691     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
371692     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
371693     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
371694     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
371695     end;
MPRINT(EM_DIAGRAM):   end;
371696     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.SVM_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
371697     %let EMEXCEPTIONSTRING=;
371698     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
371699     * REPORT: SVM;
MPRINT(EM_DIAGRAM):   * REPORT: SVM;
371700     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
371701     %let EM_ACTION = REPORT;
371702     %let syscc = 0;
371703     %macro main;
371704
371705        filename temp catalog 'sashelp.emmodl.svm_macros.source';
371706        %include temp;
371707        filename temp;
371708        %SetProperties;
371709        %if %upcase(&EM_ACTION) = CREATE %then %do;
371710            filename temp catalog 'sashelp.emmodl.svm_create.source';
371711            %include temp;
371712            filename temp;
371713            %create;
371714        %end;
371715        %else
371716        %if %upcase(&EM_ACTION) = TRAIN %then %do;
371717            filename temp catalog 'sashelp.emmodl.svm_train.source';
371718            %include temp;
371719            filename temp;
371720            %train;
371721        %end;
371722        %else
371723        %if %upcase(&EM_ACTION) = REPORT %then %do;
371724            filename temp catalog 'sashelp.emmodl.svm_report.source';
371725            %include temp;
371726            filename temp;
371727            %report;
371728        %end;
371729
371730     %mend main;
371731
371732     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
371734    +%macro SetProperties;
371735    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
371736    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
371737    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
371738    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
371739    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
371740    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
371741    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
371742    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
371743    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
371744    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
371745    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
371746    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
371747    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
371748    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
371749    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
371750    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
371751    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
371752    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
371753    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
371754    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
371755    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
371756    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
371757    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
371758    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
371759    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
371760    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
371761    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
371762    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
371763    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
371764    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
371765    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
371766    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
371767    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
371768    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
371769    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
371770    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
371771    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
371772    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
371773    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
371774    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
371775    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
371776    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
371777    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
371778    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
371779    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
371780    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
371781    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
371782    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
371783    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
371784    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
371786    +%mend SetProperties;
371789    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
371791    +  %local emclassout emvarout;
371793    +   proc dmdb batch dmdbcat= _emdmdb
371795    +   %if &out ne 0 %then %do ;
371796    +       data=&indata out= _emdmdb &emclassout &emvarout;
371797    +   %end ;
371798    +   %else %do ;
371799    +       data=&indata &emclassout &emvarout;
371800    +   %end ;
371802    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
371803    +   %if %em_class   ne  %then %do ;
371804    +       class %EM_CLASS;
371805    +   %end ;
371806    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
371807    +   %if %em_target ne %then %do ;
371808    +          target %em_target ;
371809    +   %end ;
371810    +   run ;
371811    +%mend make_dmdb;
371814    +%macro svm_training(indata=,
371815    +                    task=,
371816    +                    classtask=,
371817    +                    method=,
371818    +                    outest =,
371819    +                    outclass =,
371820    +                    outfit =,
371821    +                    isValidationSet =,
371822    +                    testdata =,
371823    +                    testout =,
371824    +                    validSource=,
371825    +                    usecgbydefault=
371826    +                    );
371828    +%make_dmdb(indata=&indata, out=1);
371830    +options debug="nlpitermsg=2";
371832    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
371833    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
371834    +ods output tun_crt = &EM_USER_TUNINGCRIT;
371835    +%end;
371837    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
371838    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
371839    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
371840    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
371842    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
371843    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
371844    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
371845    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
371848    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
371849    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
371850    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
371851    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
371853    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
371854    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
371855    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
371856    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
371859    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
371860    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
371861    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
371862    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
371865    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
371866    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
371867    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
371868    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
371869    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
371870    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
371871    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
371872    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
371873    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
371874    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
371875    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
371876    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
371880    +proc svm data= _emdmdb
371881    +         dmdbcat= _emdmdb
371882    +         nomonitor
371883    +         outfit= &outfit
371884    +         outclass= &outclass
371885    +         outest= &outest
371886    +         out = _outtrain
371887    +         maxiter = &_PROPERTY_MAXITER
371888    +         maxfunc = &_PROPERTY_MAXFUNC
371889    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
371890    +         gconv =   &_PROPERTY_GCONV
371891    +         absgconv = &_PROPERTY_ABSGCONV
371892    +         xconv =   &_PROPERTY_XCONV
371893    +         absxconv = &_PROPERTY_ABSXCONV
371895    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
371896    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
371897    +             xscale
371898    +         %end;
371899    +         %else %do;
371900    +             noscale
371901    +         %end;
371902    +    %end;
371903    +    %if &task eq CLASSIFICATION %then %do;
371904    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
371905    +         method= &method
371906    +        %end;
371907    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
371908    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
371909    +        %end;
371910    +        %else %do;
371911    +         method= &EM_PROPERTY_METHOD
371912    +        %end;
371913    +    %end;
371914    +    %else %do;
371915    +         method= &method  task=&classtask
371916    +         /*%if &classtask eq EPS_REG %then %do; */
371917    +             esp=&_PROPERTY_EPSILON
371918    +         /*%end;*/
371919    +    %end;
371921    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
371922    +         kernel = &EM_PROPERTY_KERNEL
371923    +    %end;
371924    +    %else %do;
371925    +         kernel = Linear
371926    +    %end;
371928    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
371930    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
371931    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
371932    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
371933    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
371934    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
371935    +            tun = &EM_PROPERTY_TUNINGMETHOD
371936    +        %end;
371938    +    %end;
371940    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
371941    +         CV  = &EM_PROPERTY_CVMETHOD
371942    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
371943    +         fold = &EM_PROPERTY_CVFOLD
371944    +         %end;
371945    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
371946    +                testdata = &testdata
371947    +         %end;
371948    +    %end;
371950    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
371951    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
371952    +    %end;
371954    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
371955    +    &EM_PROPERTY_PRINTOPTION
371956    +    %end;
371958    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
371959    +    POPTHIS
371960    +    %end;
371961    +    ;
371962    +    var %EM_INPUT %EM_REJECTED;
371963    +    target %EM_TARGET;
371965    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
371967    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
371968    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
371969    +             by &_PROPERTY_TUN_C_BY
371970    +             ;
371971    +         %end;
371972    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
371973    +             C  &_PROPERTY_USERCVALUE ;
371974    +         %end;
371976    +     %end;
371977    +     %else %do;
371978    +           C  &_PROPERTY_USERCVALUE ;
371979    +     %end;
371982    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
371984    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
371985    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
371986    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
371987    +                  by &_PROPERTY_POLY_TUN_KP1_BY
371988    +                ;
371989    +             %end;
371990    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
371991    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
371992    +             %end;
371993    +          %end;
371994    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
371995    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
371996    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
371997    +                ;
371998    +              %end;
371999    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
372000    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
372001    +              %end;
372002    +           %end;
372003    +           %else %do;
372004    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
372005    +           %end;
372006    +    %end;
372008    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
372009    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
372010    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
372011    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
372012    +                  by &_PROPERTY_RBF_TUN_KP1_BY
372013    +                  ;
372014    +              %end;
372015    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
372016    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
372017    +              %end;
372018    +          %end;
372019    +          %else %do;
372020    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
372021    +          %end;
372022    +    %end;
372025    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
372027    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
372029    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
372030    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
372031    +                by &_PROPERTY_SGMD_TUN_KP1_BY
372032    +             ;
372033    +             %end;
372034    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
372035    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
372036    +             %end;
372038    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
372039    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
372040    +                by &_PROPERTY_SGMD_TUN_KP2_BY
372041    +             ;
372042    +             %end;
372043    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
372044    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
372045    +             %end;
372046    +          %end;
372047    +          %else %do;
372048    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
372049    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
372050    +          %end;
372051    +    %end;
372053    +run;
372054    +%TRAINENDLINE:
372055    +quit;
372056    +%mend svm_training;
372058    +%macro svm_score(indata=,
372059    +                 inest=,
372060    +                 infit=,
372061    +                 inclass=,
372062    +                 outindata=,
372063    +                 outscore=,
372064    +                 targetLevel=
372065    +                 );
372068    +%if &TargetLevel eq BINARY %then %do;
372070    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
372072    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
372073    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
372074    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
372075    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
372078    +%do %while(^ %sysfunc(fetch(&dsid)));
372079    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
372080    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
372081    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
372082    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
372083    +%end;
372085    +%let dsid = %sysfunc(close(&dsid));
372088    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
372089    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372091    +%do %while(^ %sysfunc(fetch(&dsid)));
372092    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372093    +%end;
372094    +%let dsid = %sysfunc(close(&dsid));
372096    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
372097    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372099    +%do %while(^ %sysfunc(fetch(&dsid)));
372100    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372101    +%end;
372102    +%let dsid = %sysfunc(close(&dsid));
372105    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
372106    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
372107    +run;
372109    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
372110    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /* from a part of %EM_MODEL() macro */
372112    +data &outscore(drop=_P);
372113    +      set  &outscore;
372114    +     if (_P_ < -600) then _p =0;
372115    +     else _P = 1/(1+EXP((-1)*(_P_)));
372117    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
372118    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372119    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
372121    +%do %while(^ %sysfunc(fetch(&dsid)));
372122    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
372123    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
372124    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
372125    +       &P_Var = _P;
372126    +   %end;
372127    +   %else %do;
372128    +       &P_Var = 1 - _P;
372129    +       %let targetNonEvent = &P_LEVEL;
372130    +   %end;
372131    +%end;
372132    +%let dsid = %sysfunc(close(&dsid));
372134    +%include resifref;
372136    +run;
372138    +filename resifref;
372140    +%end; /* the end of if - targetlevel eq binary */
372141    +%else %do;
372143    +/* ----     interval target  ------ */
372145    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
372146    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372148    +%do %while(^ %sysfunc(fetch(&dsid)));
372149    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372150    +%end;
372151    +%let dsid = %sysfunc(close(&dsid));
372153    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
372154    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372156    +%do %while(^ %sysfunc(fetch(&dsid)));
372157    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372158    +%end;
372160    +%let dsid = %sysfunc(close(&dsid));
372162    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
372163    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
372164    +run;
372166    +%end; /* end of targetlevel eq interval */
372169    +%mend svm_score;
372172    +%macro makeSVMFitStatDs();
372174    +data &EM_USER_SVMFITDS;
372175    +     set &EM_USER_SVMFITSTAT;
372176    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias, noquote))";
372177    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par2, noquote))";
372178    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par3, noquote))";
372179    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par, noquote))";
372180    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1, noquote))";
372181    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_margin, noquote))";
372182    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev, noquote))";
372183    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv, noquote))";
372184    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv, noquote))";
372185    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv, noquote))";
372186    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs, noquote))";
372187    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv, noquote))";
372188    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ntrain, noquote))";
372189    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev, noquote))";
372190    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw, noquote))";
372191    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj, noquote))";
372192    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_radius, noquote))";
372193    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc, noquote))";
372194    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom, noquote))";
372195    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim, noquote))";
372196    +    if _TYPE_ ='_ACCTAB_' then delete;
372197    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
372198    +      _BIAS_= _K_PAR_;
372199    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
372200    +    %end;
372201    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
372202    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
372203    +    %end;
372204    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
372205    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
372206    +    %end;
372207    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
372208    +      DROP _K_PAR3_  _L1_;
372209    +    %end;
372210    +run;
372212    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
372213    +run;
372215    +data &EM_USER_SVMFITDS;
372216    +     set &EM_USER_SVMFITDS;
372217    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))";
372218    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
372219    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat, noquote))";
372220    +     Rename COL1 = Train;
372221    +     if _NAME_ = '_ACCU_' then delete;
372222    +run;
372224    +%mend makeSVMFitStatDs;
372226    +%macro svm_fitstat(validSource=);
372228    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
372229    +            %if &_validSource= VALIDSET %then %do;
372230    +                validDs=work._tmp_scored_test,
372231    +                testDs=,
372232    +            %end;
372233    +            %else %if &_validSource= TESTSET %then %do;
372234    +                validDs=,
372235    +                testDs=work._tmp_scored_test,
372236    +            %end;
372237    +            decdata=&EM_DEC_DECDATA,
372238    +            decmeta=&EM_DEC_DECMETA,
372239    +            freqvar=, df=,
372240    +            outfit=&EM_DATA_EMOUTFIT);
372242    +data &EM_DATA_EMOUTFIT;
372243    +     set &EM_DATA_EMOUTFIT;
372244    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_    _SBC_; /* Because of DF */
372245    +run;
372246    +%mend svm_fitstat;
372248    +/*---------------------------------------------------------------------------------------
372249    +   OUTEST data set
372251    +                                                       APRTMNT_  APRTMNT_   TELIND_   TELIND_
372252    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_        2_
372254    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391   0.97609
372255    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280   0.15280
372256    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778  -0.07311
372258    +=-------------------------------------------------------------------------------------*/
372259    +/* this is not used, generate score code directly for the case of linear svm */
372260    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=, Residual=);
372262    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
372264    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
372265    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
372266    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
372267    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
372268    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
372270    +%do %while(^ %sysfunc(fetch(&dsid)));
372271    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
372272    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
372273    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
372274    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
372275    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
372276    +%end;
372277    +%let dsid = %sysfunc(close(&dsid));
372279    +data _cmeta;
372280    +    set &ColumnsMeta;
372281    +    NAME = upcase(strip(NAME));
372282    +run;
372284    +data _tmpclass;
372285    +       set &outclass;
372286    +   _VAR_ = upcase(strip(_VAR_));
372287    +run;
372289    +proc sql;
372290    +create table _outclass as
372291    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
372292    +  from  _tmpclass, _cmeta
372293    +  where _tmpclass._VAR_ = _cmeta.NAME;
372294    +run;
372296    +data _outclass;
372297    +    set _outclass;
372298    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
372299    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
372300    +run;
372301    +data _meands;
372302    +    set &outest;
372303    +    if _TYPE_='_MEAN_';
372304    +run;
372306    +/*
372307    +data _null_;
372308    +    set &outest;
372309    +    if _TYPE_='_PARMS_';
372310    +    call symput('bias', _STDEV_ );
372311    +    call symput('intercept', _MEAN_ );
372312    +run;
372313    +*/
372315    +filename  _File_ "&File";
372316    +data _null_;
372317    +    FILE _File_;
372318    +    length _line $500;
372319    +    drop _line;
372321    +    put ' ';
372322    +    put '/*-------------------------------------------------*/';
372323    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
372324    +    put '/*-------------------------------------------------*/';
372325    +    put ' ';
372327    +    put 'length _warn_ $ 4;';
372328    +    put 'label _warn_ = "Warnings";';
372329    +    put 'length _svm_uname $32;';
372330    +    put 'DROP _svm_uname ;';
372332    +  dsid = open("work._outclass");
372333    +    if dsid then do;
372334    +          oldvname ='';
372335    +          do while(not fetch(dsid));
372336    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
372337    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
372338    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
372339    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
372340    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
372341    +             *put 'vtype =' vtype;
372342    +             *put 'vformat=' vformat;
372344    +             if oldname ne vname then do;
372345    +                 if vtype = 'N' then do;
372346    +                     if vformat eq ' ' then do;
372347    +                        put '_svm_uname = put(' vname ', Best12.);';
372348    +                     end; else do;
372349    +                        put '_svm_uname = put(' vname ',' vformat ');';
372350    +                     end;
372351    +                  end;
372352    +                  else do;
372353    +                     if vformat eq ' ' then do;
372354    +                        put '_svm_uname = ' vname ' ;';
372355    +                     end; else do;
372356    +                        put '_svm_uname = put(' vname ',' vformat ');';
372357    +                     end;
372358    +                  end;
372359    +                  put '%DMNORMIP(_svm_uname);';
372360    +              end; /* end of oldname ne vname */
372362    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
372363    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
372364    +              put _line;
372365    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname ' ;';
372366    +              oldname = vname;
372367    +          end;
372369    +     end;
372370    +rc=close(dsid);
372372    +dsid = open("&outest");
372373    +    if dsid then do;
372374    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues, noquote))"  "------ */";
372375    +          ncol = attrn(dsid, 'NVARS');
372376    +          do i=4 to ncol;
372377    +             vname = upcase(trim(left(varname(dsid,i))));
372378    +              do while(not fetch(dsid));
372379    +                  type = strip(getvarc(dsid,2));
372380    +                  select(type);
372381    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
372382    +                      when('_STDEV_') std  =  getvarn(dsid, i);
372383    +                      when('_PARMS_') coeff = getvarn(dsid, i);
372384    +                  otherwise;
372385    +                  end;
372386    +              end; /* end of do-while*/
372387    +              *put '+' coeff '*(' vname '-' mean ')/' std;
372388    +              if i=4 then  do; put '_P_ =(' coeff ; end;
372389    +              else if i=5 then do; put '+' coeff ');' ; end;
372390    +              else do;
372391    +                      tmpvar = '_TMPVAR'||strip(i);
372392    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
372393    +                      put 'else ' tmpvar '=' vname ';';
372394    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
372395    +                      put 'drop  ' tmpvar ';';
372396    +              end;
372397    +              rc=rewind(dsid);
372398    +         end; /* end of  do i=6 to &nvars; */
372399    +         put ';';
372400    +     end;
372401    +    rc=close(dsid);
372402    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"  "------ */";
372404    +%if &TargetLevel eq BINARY %then %do;
372406    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
372407    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372408    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
372410    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
372411    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
372413    +%do %while(^ %sysfunc(fetch(&dsid)));
372414    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
372415    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
372416    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
372417    +       put " &P_Var = _P;";
372418    +   %end;
372419    +   %else %do;
372420    +       put " &P_Var = 1 - _P;";
372421    +   %let targetNonEvent = &P_LEVEL;
372422    +   %end;
372423    +%end;
372424    +%let dsid = %sysfunc(close(&dsid));
372426    +%if &Residual = Y %then %do;
372428    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
372430    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
372431    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372432    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
372434    +   %do %while(^ %sysfunc(fetch(&dsid)));
372435    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
372436    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
372437    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
372438    +       put " &R_Var = 1 - _P;";
372439    +   %end;
372440    +   %else %do;
372441    +       put " &R_Var = 0 - (1 - _P);";
372442    +   %end;
372443    +   %end;
372444    +   %let dsid = %sysfunc(close(&dsid));
372445    +%end;
372446    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"  "------ */";
372448    +    put 'length _FORMAT_VAR $200;';
372449    +    put 'length _TARGNOR $%DMNORLEN; ';
372450    +    put 'DROP _FORMAT_VAR _TARGNOR;';
372451    +    %if &TargetFormat ne  %then %do;
372452    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
372453    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
372454    +    %end;
372455    +    %else %do;
372456    +    %if &TargetType  = N  %then %do;
372457    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
372458    +       %end;
372459    +       %else %do;
372460    +    put "_FORMAT_VAR= &TargetVar;";
372461    +       %end;
372462    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
372463    +    %end;
372465    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
372466    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
372467    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
372469    +    %do %while(^ %sysfunc(fetch(&dsid)));
372470    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
372471    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
372472    +        %let qF_var_label = %str(%"&F_var_label%");
372473    +    put "&F_var = _TARGNOR ;";
372474    +    put "label &F_var = &qF_Var_label;";
372475    +    %end;
372476    +    %let dsid = %sysfunc(close(&dsid));
372478    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"  "------ */";
372480    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
372481    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372482    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
372484    +%do %while(^%sysfunc(fetch(&dsid)));
372485    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
372486    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
372487    +   %let qI_var_label = %str(%"&I_var_label%");
372488    +   %let qTargetEvent = %str(%"&targetEvent%");
372489    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
372490    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
372491    +       put " else &I_Var  =  &qtargetNonEvent ;";
372492    +       put " label &I_var = &qI_var_label;";
372493    +%end;
372494    +%let dsid = %sysfunc(close(&dsid));
372496    +%end;  /* end of TargetLevel= Binary */
372498    +%else %if &TargetLevel eq INTERVAL %then %do;
372500    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
372501    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372502    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
372504    +%do %while(^ %sysfunc(fetch(&dsid)));
372505    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
372506    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
372507    +   %let qP_label = %str(%"&P_label%");
372508    +    put " &P_Var = _P_;";
372509    +    put " label &P_Var = &qP_label;";
372510    +%end;
372511    +%let dsid = %sysfunc(close(&dsid));
372513    +%if &Residual = Y %then %do;
372515    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
372517    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
372518    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372519    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
372521    +   %do %while(^ %sysfunc(fetch(&dsid)));
372522    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
372523    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
372524    +     %let qR_label = %str(%"&R_label%");
372525    +       put " &R_Var = &TargetVar - &P_var;";
372526    +       put " label &R_Var = &qR_label;";
372527    +   %end;
372528    +   %let dsid = %sysfunc(close(&dsid));
372529    +%end;
372531    +%end;   /* end of TargetLevel= Interval */
372533    +  put "/*------------------------------------------------------------*/";
372534    +proc datasets lib=work nolist;
372535    + delete _tmpclass _cmeta _outclass;
372536    +run;
372537    +run;
372539    +filename  _File_;
372541    +%mend gen_score;
372543    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
372544    +%global &nLevel;
372545    +proc dmdb batch data=&indata
372546    +classout=_tmp_dmdbout;
372547    +class &target;
372548    +run;
372549    +data _tmp_dmdbout;
372550    +    set _tmp_dmdbout;
372551    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
372552    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
372553    +run;
372554    +data _null_;
372555    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
372556    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
372557    +    %let dsid = %sysfunc(close(&dsid));
372558    +     call symput("&nLevel", put(&_obs, Best12.));
372559    +run;
372561    +proc datasets lib=work nolist;
372562    +     delete _tmp_dmdbout;
372563    +run;
372564    +quit;
372565    +%Mend CheckBinaryTargetLevel;
372568    +%macro getNObs(inds=, nobs=);
372569    +    %global &nobs;
372570    +    data _null_;
372571    +        set &inds end=eof;
372572    +        if eof then call symput("&nobs", _N_);
372573    +    run;
372574    +    quit;
372575    +%mend  getNObs;
372579    +%macro makeAlphaDs(target=, cmeta=);
372581    + %let isOBSIndex= N;
372582    + %let dsid = %sysfunc(open(&cmeta));
372583    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
372584    + %do %while(^%sysfunc(fetch(&dsid)));
372585    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
372586    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
372587    + %end;
372588    + %let dsid = %sysfunc(close(&dsid));
372590    +data &EM_USER_OUTALPHA;
372591    +     set _sample_train;
372592    +     set _outtrain(keep=_ALPHA_ _BOUND_);
372593    +     %if &isOBSIndex= N %then %do;
372594    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
372595    +     %end;
372596    +     %else %do;
372597    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
372598    +     %end;
372599    +run;
372601    +data &EM_EXPORT_TRAIN;
372602    +     length _OBS_ 8;
372603    +     set &EM_EXPORT_TRAIN;
372604    +     _OBS_ = _N_;
372605    +run;
372607    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
372608    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
372609    +     by _OBS_;
372610    +     if _ALPHA_ =. then _ALPHA_=0;
372611    +     if _BOUND_ ="" then _BOUND_="_LBC";
372612    +run;
372614    +data &EM_USER_OUTALPHA;
372615    +   set &EM_USER_OUTALPHA;
372616    +   if _ALPHA_ = 0 then delete;
372617    +   %if &isOBSIndex= N %then %do;
372618    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
372619    +   rename _OBS_ = _dataobs_;
372620    +   %end;
372621    +   %else %do;
372622    +   drop _OBS_;
372623    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
372624    +   %end;
372625    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
372626    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
372627    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
372628    +   run;
372630    +%mend makeAlphaDs;
372633    +%macro makeTunData();
372634    +data &EM_USER_TUNINGCRIT;
372635    +    set &EM_USER_TUNINGCRIT;
372636    +    Drop N;
372637    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
372638    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
372639    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
372640    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
372641    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
372642    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
372643    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror, noquote))";
372644    +run;
372645    +%mend makeTunData;
372647    +/*------------------ Score Code Generation with Proc SVMScore    ----------------------  */
372650    +%macro score_code(TargetLevel=, type=);
372652    +%let _inoutest = WORK._inoutest ;
372653    +%let _inoutfit = WORK._inoutfit ;
372654    +%let _inoutclass = WORK._inoutclass;
372656    +%if &type eq FLOW %then %do;
372657    +    %let _inoutest = &EM_USER_OUTEST;
372658    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
372659    +    %let _inoutclass = &EM_USER_OUTCLASS;
372660    +%end;
372661    +%else %do;
372662    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
372663    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
372664    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
372665    +%end;
372667    +%let emscoreout = %str(&)%str(em_score_output);
372670    +%if &type eq FLOW %then %do;
372671    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
372672    +%end;
372673    +%else %do;
372674    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
372675    +%end;
372677    +data _null_;
372678    +    FILE _File_ MOD;
372680    +    put ' ';
372681    +    put '/*-------------------------------------------------*/';
372682    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */';
372683    +    put '/*-------------------------------------------------*/';
372684    +    put ' ';
372686    +%if &TargetLevel eq BINARY %then %do;
372688    +/*%put &emscoreout;  */
372690    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
372691    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372693    +%do %while(^ %sysfunc(fetch(&dsid)));
372694    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372696    +%end;
372697    +%let dsid = %sysfunc(close(&dsid));
372699    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
372700    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372702    +%do %while(^ %sysfunc(fetch(&dsid)));
372703    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
372705    +%end;
372706    +%let dsid = %sysfunc(close(&dsid));
372709    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass";
372710    +    %if &type eq FLOW %then %do;
372711    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
372712    +    %end;
372713    +    %else %do;
372714    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
372715    +    %end;
372716    +    put ";";
372717    +    put "run;";
372720    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
372722    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
372723    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
372724    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
372725    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
372728    +%do %while(^ %sysfunc(fetch(&dsid)));
372729    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
372730    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
372731    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
372732    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
372733    +%end;
372735    +%let dsid = %sysfunc(close(&dsid));
372737    +    put "data &emscoreout(drop=_P);";
372738    +    put "     set &emscoreout;";
372739    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
372740    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
372742    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
372743    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372744    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
372746    +%do %while(^ %sysfunc(fetch(&dsid)));
372747    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
372748    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
372749    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
372750    +    put " &P_Var = _P ;";
372751    +   %end;
372752    +   %else %do;
372753    +    put " &P_Var = 1 - _P ;";
372754    +    %let targetNonEvent = &P_LEVEL;
372755    +   %end;
372756    +%end;
372757    +%let dsid = %sysfunc(close(&dsid));
372759    +%end; /* the end of if - targetlevel eq binary */
372760    +%else %do;
372762    +/* ----     interval target  ------ */
372764    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
372765    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372767    +%do %while(^ %sysfunc(fetch(&dsid)));
372768    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
372769    +%end;
372770    +%let dsid = %sysfunc(close(&dsid));
372772    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
372773    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
372774    +%do %while(^ %sysfunc(fetch(&dsid)));
372775    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
372776    +%end;
372777    +%let dsid = %sysfunc(close(&dsid));
372779    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass ";
372780    +    %if &type eq FLOW %then %do;
372781    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
372782    +    %end;
372783    +    %else %do;
372784    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
372785    +    %end;
372786    +    put ";";
372788    +%end; /* end of targetlevel eq interval */
372790    +run;
372791    +filename  _File_;
372792    +%mend score_code;
372795    +%macro makeDeltaCode(TargetLevel=);
372796    +*--- Build Code to Modify Metadata ---*;
372797    +filename X "&EM_FILE_CDELTA_TRAIN";
372799    +/* modify columns meta */
372800    +data _null_;
372801    +    file X;
372802    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
372803    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
372804    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
372805    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
372806    +run;
372807    +%mend makeDeltaCode;
372809    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
372810    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
372812    +    %do;
372813    +    %let m_data      = &data;
372814    +    %let m_decdata   = &decdata;
372815    +    %let m_decmeta   = &decmeta;
372816    +    %let m_noresfile = &noresfile;
372817    +    %let m_resfile   = &resfile;
372818    +    dm "afa c=sashelp.emutil.decidecode.scl";
372819    +  %end;
372820    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_REPORT.SOURCE.
372821    +%Macro report;
372823    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
372824    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
372825    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
372826    +%EM_REPORT(key=OUTALPHA,  viewtype=HISTOGRAM, block=Model, X=_ALPHA_, Autodisplay=Y, description=histosv) ;
372827    +%EM_REPORT(key=SVMFITDS,  viewtype=DATA, block=Model, Autodisplay=Y, description=svmfitstat) ;
372828    +%EM_REPORT(key=TUNINGCRIT,  viewtype=DATA, block=Model, Autodisplay=Y, description=tunhist) ;
372829    +%EM_REPORT(key=OUTALPHA,  viewtype=DATA, block=Model, Autodisplay=N, description=supportvector) ;
372831    +%Mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTALPHA";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "histosv";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_ALPHA_";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Model";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87432826025147;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):   ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SVMFITDS";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "svmfitstat";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Model";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47178284566466;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT):   ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TUNINGCRIT";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "tunhist";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Model";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77697639622584;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 378 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT):   ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTALPHA";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "supportvector";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Model";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.52227277100192;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 378 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 504 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):   ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: SVM;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
372832
372833     *------------------------------------------------------------*;
372834     * End REPORT: SVM;
372835     *------------------------------------------------------------*;
 
372836     /* Reset EM Options */
372837     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
372838     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
372839     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
372840     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
372841     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
372842     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 504 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 504 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
372843     proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
372844     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
372845     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.META_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 36 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
372846     proc sort data=EMWS8.SVM_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
372847     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
372848     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.SVM_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 36 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
372849     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
372850     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
372851     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
372852     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 36 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 36 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
372853     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
372854     set EMWS8.SVM_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_CMeta_TRAIN;
372855     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
372856     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.SVM_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 9 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
372857     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
372858     set EMWS8.SVM_TRAIN(keep=
372859     F_DepVar
372860     I_DepVar
372861     P_DepVar0
372862     P_DepVar1
372863     R_DepVar0
372864     R_DepVar1
372865     _R_
372866     _WARN_
372867     _Y_
372868     DepVar
372869     );
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 R_DepVar0 R_DepVar1 _R_ _WARN_ _Y_ DepVar );
372870     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.SVM_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.SVM_2LI6K9Z nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SVM_2LI6K9Z;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.SVM_2LI6K9Z(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.SVM_2LI6K9Z;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.SVM_2LI6K9Z;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359 _NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0001567413 OVLMAX 0.9982080883 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
377136     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
377137     set EMWS8.SVM_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_CMeta_TRAIN;
377138     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
377138   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
377139     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.SVM_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 9 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
377140     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
377141     set EMWS8.SVM_VALIDATE(keep=
377142     F_DepVar
377143     I_DepVar
377144     P_DepVar0
377145     P_DepVar1
377146     R_DepVar0
377147     R_DepVar1
377148     _R_
377149     _WARN_
377150     _Y_
377151     DepVar
377152     );
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _R_ _WARN_ _Y_ DepVar );
377153     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.SVM_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.SVM_1MB210R nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SVM_1MB210R;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.SVM_1MB210R(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMCLASSIFICATION WORK.SVM_1MB210R;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.SVM_1MB210R;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
The SAS System
 
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.000347009 OVLMAX 0.9920050518 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
381428     %let _cn = %sysfunc(getoption(CENTER));
381429     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
381430     proc print data=EMWS8.SVM_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.SVM_EMREPORTFIT noobs label;
381431     var STAT LABEL TRAIN
381432     VALIDATE
381433     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
381434     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
381435     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
381436     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
381437     run;
 
NOTE: There were 9 observations read from the data set EMWS8.SVM_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 145.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
381438     title10;
MPRINT(EM_DIAGRAM):   title10;
381439     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
381440     proc sort data=EMWS8.SVM_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.SVM_EMCLASSIFICATION nothreads;
381441     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
381442     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.SVM_EMCLASSIFICATION.
NOTE: The data set EMWS8.SVM_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
381443     %let _cn = %sysfunc(getoption(CENTER));
381444     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
381445     proc print data=EMWS8.SVM_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.SVM_EMCLASSIFICATION noobs label;
381446     var from into pct_row pct_col count percent
381447     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
381448     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
381449     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
381450     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
381451     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
381452     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
381453     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
381454     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
381455     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
381456     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
381457     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
381458     run;
 
NOTE: There were 8 observations read from the data set EMWS8.SVM_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 146.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
381459     title9;
MPRINT(EM_DIAGRAM):   title9;
381460     title10;
MPRINT(EM_DIAGRAM):   title10;
381461     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
381462     %let _cn = %sysfunc(getoption(CENTER));
381463     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
381464     data EMWS8.SVM_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM_EMEVENTREPORT;
381465     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
381465   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
381466     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
381466   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
381466   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
381466   ! FALSEEVENT
381467     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
381467   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
381467   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
381468        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
381469     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
381470     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
381471     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
381472     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
381473     set EMWS8.SVM_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM_EMEVENTREPORT;
381474     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_EMEVENTREPORT.
NOTE: The data set EMWS8.SVM_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
381475     proc print data=EMWS8.SVM_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.SVM_EMEVENTREPORT noobs label;
381476     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
381477     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
381478     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
381479     run;
 
NOTE: There were 2 observations read from the data set EMWS8.SVM_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 147.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
381480     title10;
MPRINT(EM_DIAGRAM):   title10;
381481     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
381482     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
381483     modify SVM_EMRANK;
MPRINT(EM_DIAGRAM):   modify SVM_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
381484     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
381485     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
381485   ! ;
MPRINT(EM_DIAGRAM):   run;
381486     run;
 
NOTE: MODIFY was successful for EMWS8.SVM_EMRANK.DATA.
381487     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
381488     %let _cn = %sysfunc(getoption(CENTER));
381489     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
381490     proc print data=EMWS8.SVM_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.SVM_EMRANK label noobs;
381491     var
381492     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
381493     by
381494     notsorted DATAROLE
381495     notsorted TARGET
381496     notsorted TARGETLABEL
381497     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
381498     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
381499     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
381500     run;
 
NOTE: There were 40 observations read from the data set EMWS8.SVM_EMRANK.
NOTE: The PROCEDURE PRINT printed page 148.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
381501     title10;
MPRINT(EM_DIAGRAM):   title10;
381502     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
381503     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
381504     modify SVM_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify SVM_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
381505     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
381505   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
381506     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
381506   ! ;
MPRINT(EM_DIAGRAM):   run;
381507     run;
 
NOTE: MODIFY was successful for EMWS8.SVM_EMSCOREDIST.DATA.
381508     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.SVM_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
